<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Working With Workspaces</h1>

<h2>Description</h2>

<p>This scene demonstrates how to run multiple scenes and/or portable experiences at one time</p>

<p>This scene shows you:</p>

<li>How to add/remove scenes from the workspace</li>

<li>Run multiple scenes at same time</li>

<li>Run portable experiences with other scenes</li>

<li>Make odd scene shapes such as a hollow rectangles</li>

<h2>Video Tutorial</h2>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A project that shows how to use workspaces to run multiple scenes + smart wearables together</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/digital-bouncer

# URL: https://github.com/decentraland-scenes/digital-bouncer

<title>GitHub - decentraland-scenes/digital-bouncer: Grant admin players special abilities in a scene, like kicking other players out</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Grant admin players special abilities in a scene, like kicking other players out</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/digital-bouncer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Digital Bouncer</h2>

<p>A simple scene where special admin users can be given special abilities in a scene. This scene shows you:</p>

<li>How to grant special abilities to admin users in a scene</li>

<li>How to use a fill-in prompt from the UI library</li>

<li>How to use the UI library to display announcements</li>

<li>How to teleport a player to specific coordinates in the scene</li>

<li>How to toggle the showing and hiding of UIs with global buttons</li>

<li>How to check if the scene runs in preview or in production</li>

<p>This kind of interface is especially useful in events, where you might want to grant an admin user special abilities to make sure everything runs smoothly, and deter trolls.</p>

<p>Note that all of the actions carried out by a scene admin user are contained in the realm where the user is at. For event that span multiple realms, you should have an admin on each realm, or at least focus on the ones where your scene is the most crowded.</p>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command</p>

<pre>npm i -g decentraland</pre>

<p>For a more details, follow the steps in the</p>

<p>.</p>

<strong>Previewing the scene</strong>

<p>Once you've installed the CLI, download this example and navigate to its directory from your terminal or command prompt.</p>

<em>from the scene directory:</em>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI will open the scene in a new browser tab automatically.</p>

<strong>Usage</strong>

<p>If the scene runs in preview, all users behave as admin users. In production, the only ones with admin powers will be those who's names are in the list</p>

<code>allowListedIds</code>

<p>in</p>

<code>bouncerUI.ts</code>

<p>.</p>

<p>An admin usr can do two things</p>

<li>Click E to toggle the announcement UI. Any messages written here are are displayed for a few seconds on the screens of all players in the scene.</li>

<li>Click F to toggle the bouncer UI. By writing the display name of a player and pressing "Kick", that player is teleported to the</li>

<em>0,0,0</em>

<li>corner of the scene, outside the main building.</li>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Grant admin players special abilities in a scene, like kicking other players out</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/boolean-hole-and-proximity-spheres

# URL: https://github.com/decentraland-scenes/boolean-hole-and-proximity-spheres

<title>GitHub - decentraland-scenes/boolean-hole-and-proximity-spheres: Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/boolean-hole-and-proximity-spheres</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Boolean Hole + Proximity Spheres</h1>

<p>This example scene demonstrates several objects that react to your proximity.  Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</p>

<p>To conserve polygons it uses a plane + billboard affect to give the illusion of a sphere.</p>

<p>To conserve the amount of materials used it makes use of a object pool to reuse and reduce the amount of materials needed for the +300 spheres.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>Acknowledgements</h2>

<p>Outside building sound</p>

<p>is from</p>

<p>Inside Building Sound</p>

<p>is from</p>

<h2>About</h2>

<p>Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/models

# URL: https://github.com/decentraland-scenes/models

<title>GitHub - decentraland-scenes/models</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/models</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>models</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/first-ecs7-scene

# URL: https://github.com/decentraland-scenes/first-ecs7-scene

<title>GitHub - decentraland-scenes/first-ecs7-scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/first-ecs7-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ECS7 Test scene</h1>

<p>This scene is built with the ECS7 in alpha state.</p>

<li>Run</li>

<code>npm i</code>

<li>Run</li>

<code>npm start</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/museum_template

# URL: https://github.com/decentraland-scenes/museum_template

<title>GitHub - decentraland-scenes/museum_template: A simple generic virtual museum for displaying NFT art</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple generic virtual museum for displaying NFT art</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/museum_template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Museum Template</h1>

<p>A simple generic virtual museum for displaying NFT art</p>

<p>This scene shows you:</p>

<li>How to add NFT picture frames</li>

<li>How to add a streaming video</li>

<li>How to add a POAP booth</li>

<li>How to add external links</li>

<li>How to organize the scene's content into neat modular components that are easy to change from a config file</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.

Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple generic virtual museum for displaying NFT art</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Store-Template

# URL: https://github.com/decentraland-scenes/Store-Template

<title>GitHub - decentraland-scenes/Store-Template: A basic generic virtual store for wearables and other tokens</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A basic generic virtual store for wearables and other tokens</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Store-Template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Store Template</h1>

<p>A basic generic virtual store for wearables and other tokens</p>

<p>This scene shows you:</p>

<li>How to add links to wearables on the market place</li>

<li>How to add a streaming video</li>

<li>How to add a POAP booth</li>

<li>How to add external links</li>

<li>How to organize the scene's content into neat modular components that are easy to change from a config file</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.

Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A basic generic virtual store for wearables and other tokens</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/avatar-mirror

# URL: https://github.com/decentraland-scenes/avatar-mirror

<title>GitHub - decentraland-scenes/avatar-mirror</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/avatar-mirror</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/testUVs

# URL: https://github.com/decentraland-scenes/testUVs

<title>GitHub - decentraland-scenes/testUVs: Test scene to verify a bug with UVs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Test scene to verify a bug with UVs</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/testUVs</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Test scene to verify a bug with UVs</p>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Asian-Plaza

# URL: https://github.com/decentraland-scenes/Asian-Plaza

<title>GitHub - decentraland-scenes/Asian-Plaza: Asian Plaza in Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Asian Plaza in Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Asian-Plaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>plaza-asian</h1>

<p>Asian Plaza in Decentraland</p>

<h2>About</h2>

<p>Asian Plaza in Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/ForestPlaza

# URL: https://github.com/decentraland-scenes/ForestPlaza

<title>GitHub - decentraland-scenes/ForestPlaza: Forst plaza</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Forst plaza</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/ForestPlaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Forst plaza</p>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Fireworks-MessageBus

# URL: https://github.com/decentraland-scenes/Fireworks-MessageBus

<title>GitHub - decentraland-scenes/Fireworks-MessageBus: messageBus-tuto</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>messageBus-tuto</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Fireworks-MessageBus</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Fireworks-MessageBus</h1>

<p>A simple scene where players can light up fireworks, and all other players see them light up too.</p>

<p>This scene shows you:</p>

<li>How to keep players synced by using the messagebus to communicate each player's actions to others</li>

<li>How to play sounds from files</li>

<li>How to encapsule a set of components into an object to easily reuse</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on one of the firewarks to light it up!</p>

<p>If there are multiple players in the scene, they should all see them launch too. You can simulate this by opening two browser tabs with the same preview.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>messageBus-tuto</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/old-lady-quest-part1

# URL: https://github.com/decentraland-scenes/old-lady-quest-part1

<title>GitHub - decentraland-scenes/old-lady-quest-part1: An example scene that handles quests</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>An example scene that handles quests</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/old-lady-quest-part1</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>old-lady-quest-part1</h1>

<p>An example scene that handles quests.</p>

<p>This repo contains part 1 of 2. The same quest is continued on this repo:</p>

<p>Note: This other repo is also private, you may need to request access to it.</p>

<p>This quest includes some single tasks, and a numerical task. The numerical task may be reset to 0 if the player doesn't complete it in full in time and then attempts again.</p>

<p>Part 1 has a very simple setup, part 2 is a more elaborate scene where things are more abstracted.</p>

<p>Check the file</p>

<code>quest-example.json</code>

<p>to see what was uploaded to the quests server to match this scene.</p>

<h2>Quest library</h2>

<h3>Install</h3>

<p>To install the library in a Decentraland scene, run:</p>

<code>npm i dcl-ecs-quests -B</code>

<p>Then open your sceneâs tsconfig.json file, and add the following to the paths object:</p>

<pre>: [</pre>

<pre>],</pre>

<p>Finally, run dcl start or dcl build on your project for all the internal files of the library to get properly built.</p>

<p>Then on your sceneâs Typescript files import the library by writing the following:</p>

<h3>Initiate a quest tracker</h3>

<p>All interactions with the quest server and the quest UI are handled by a quest tracker object.</p>

<p>To initiate a quest tracker, create a new RemoteQuestTracker object, passing at least a quest ID, referencing a quest thatâs already created in the quests server.</p>

<p>Note: Since the constructor of RemoteQuestTracker is asynchronous, you should run it inside an async function or an async block. All examples from now on will be assumed to run asynchronously.</p>

<h2>About</h2>

<p>An example scene that handles quests</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Gamer-Plaza

# URL: https://github.com/decentraland-scenes/Gamer-Plaza

<title>GitHub - decentraland-scenes/Gamer-Plaza: One of Decentraland's public plazas, dedicated to gaming</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>One of Decentraland's public plazas, dedicated to gaming</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Gamer-Plaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Gamer-Plaza</h1>

<p>One of Decentraland's public plazas, dedicated to gaming</p>

<h2>About</h2>

<p>One of Decentraland's public plazas, dedicated to gaming</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/DCL-trams

# URL: https://github.com/decentraland-scenes/DCL-trams

<title>GitHub - decentraland-scenes/DCL-trams: Trams public transport system</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Trams public transport system</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/DCL-trams</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL Trams</h1>

<em>demo of a long-distance public transport tram.</em>

<h2>Description</h2>

<p>This scene shows a tram that players can board to cover long distances.</p>

<p>Trams come by every 3 minutes. The tram is synced to a world time API, so all players see the tram in sync with everyone else.</p>

<h2>Instructions</h2>

<p>Wait for the trams in one of the stations, and board the train.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>Trams public transport system</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Tower-defense

# URL: https://github.com/decentraland-scenes/Tower-defense

<title>GitHub - decentraland-scenes/Tower-defense: A fully-fledged game where a random 2d path is generated along which enemies walk, and where traps are randomly placed. You need to activate the traps as the enemies advance along the path to kill them. Itâs all about timing.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A fully-fledged game where a random 2d path is generated along which enemies walk, and where traps are randomly placed. You need to activate the traps as the enemies advance along the path to kill them. Itâs all about timing.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Tower-defense</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Tower defense game (WIP)</h2>

<p>A fully-fledged game where a random 2d path is generated along which enemies walk, and where traps are randomly placed. You need to activate the traps as the enemies advance along the path to kill them. Itâs all about timing.</p>

<p>This scen shows you:</p>

<li>How to handle the reusing of multiple entities using pools</li>

<li>How to generate a random path that fulfills certain conditions</li>

<li>How to move a character along a predetermined path</li>

<li>How to keep a game's logic encapsulated in game objects, each with its own state and methods</li>

<p>Note: This scene currently has bugs that need fixing. It still serves to show certain best practices.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click the button on the rock to start a new game. Blob monsters will start to appear and walk along the path. Kill them by triggering both levers on a trap. Traps are active for a short period of time, so be careful with the timing. Once a trap is activated, another appears on a random spot along the path.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A fully-fledged game where a random 2d path is generated along which enemies walk, and where traps are randomly placed. You need to activate the traps as the enemies advance along the path to kill them. Itâs all about timing.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/bird-field

# URL: https://github.com/decentraland-scenes/bird-field

<title>GitHub - decentraland-scenes/bird-field: A scene where birds fly up in the air based on their relative distance to the player.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene where birds fly up in the air based on their relative distance to the player.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/bird-field</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Bird Field</h1>

<em>demo of the bird scaring scene running in preview.</em>

<h2>Description</h2>

<p>Bird field is a scene where a large number of animated objects react to the player's proximity. In this scene the birds hanging around the scene fly up based on how close the player gets to them. The proximity effect can easily be extended to other use cases /art installations.</p>

<h2>Instructions</h2>

<strong>In the scene</strong>

<p>Run around and watch as the birds react to your proximity by flying up into the air. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>A scene where birds fly up in the air based on their relative distance to the player.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/uv-projector

# URL: https://github.com/decentraland-scenes/uv-projector

<title>GitHub - decentraland-scenes/uv-projector: Tool that helps you project a large video stretching over many smaller screens</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Tool that helps you project a large video stretching over many smaller screens</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/uv-projector</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>UV Projector</h1>

<em>demo of the UV Projector scene running in preview.</em>

<h2>Description</h2>

<p>UV Projector is a tool that helps you project a large video stretching out onto many smaller screens. You can even reproject the UV cooridantes on every frame, so the video will always face towards the player.</p>

<h2>Instructions</h2>

<strong>In the scene</strong>

<p>You can run around and watch as the video on the colums follow you (while the columns themselves don't move or turn). Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<strong>In the code</strong>

<p>You need to create a projector plane ( Projector ) that is invisible to the player, with a chosen size and orientation. This will project the video onto other screens ( Screen ).</p>

<p>You need to also create a ScreenGroup for each Projector and assign the Screens you create to that group.</p>

<p>You can project all the Screens' UVs once (or on every frame inside a System) using:</p>

<code>myScreenGroup.updateScreens( Camera.instance.position )</code>

<p>Do not parent the screens or the projector under any other Entity. Both need to be in world-space. You can however parent Entities to the screens to add frames, backgrounds etc.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>cc_video.mp4</em>

<li>is a Creative Commons video from</li>

<h2>About</h2>

<p>Tool that helps you project a large video stretching over many smaller screens</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/white-rabbit

# URL: https://github.com/decentraland-scenes/white-rabbit

<title>GitHub - decentraland-scenes/white-rabbit: Decentraland's first 24/7 night club</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland's first 24/7 night club</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/white-rabbit</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>58</strong>

<h2>Files</h2>

<button>View code</button>

<h2>White Rabbit Night Club</h2>

<p>The White Rabbit is a 24/7 night club, at -65,85.</p>

<p>This scene shows you:</p>

<li>How to stream audio and video</li>

<li>How to animate lights, smoke and other effects</li>

<li>How to sync effects for all players with messagebus messages</li>

<li>How to allowlist players as admins with special permissions in a scene</li>

<li>How to teleport a player within a scene</li>

<li>How to create a cool glass-breaking effect</li>

<li>How to make an arcade machine</li>

<p>Special admin players have the ability to control all of the lighting effects via a special UI panel only they can access. A series of timed effects can also be scheduled to be triggered in sequence, based on a timestamp on an external server.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Take the leaf as a raft up to the mushroom, where you can teleport up into the club.</p>

<p>If you're listed as an admin in the scene, you can open the effects UI by pressing E to control all of the lighting effects. These effects are otherwise played in a fixed sequence, checking the time in a universal time API, and looping the same sequence every 10 minutes.</p>

<p>Admin players can also open the Bouncer API by pressing F. They can write down the name of another player and teleport them to the 0,0 of the scene if they're being problematic. See the</p>

<p>example scene for a simpler version of that.</p>

<p>Clicking on any of the windows breaks them.</p>

<p>The arcade machines can also be played, using E and F to move the pad, and click to shoot the ball.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Decentraland's first 24/7 night club</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/nft-scanner-basic

# URL: https://github.com/decentraland-scenes/nft-scanner-basic

<title>GitHub - decentraland-scenes/nft-scanner-basic: Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/nft-scanner-basic</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NFT Scanner (Basic)</h1>

<em>demo of nft-scanner-basic scene running in preview.</em>

<h2>Description</h2>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club. In this example, we're checking whether the player owns a pair of RTFKT X Atari Sneakers, which is any token minted from this</p>

<p>.</p>

<p>Note: There's another version of this scene</p>

<p>that performs more advanced token checks.</p>

<h2>Instructions</h2>

<p>Walk up to the door and press the</p>

<kbd>E</kbd>

<p>key to see if you can access the club. The door will open and the audio quality increases if you own at least one pair of RTFKT X Atari Sneakers. Please feel free to modify the</p>

<code>contractAddress</code>

<p>within the</p>

<code>game.ts</code>

<p>file to test other tokens.</p>

<p>Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<kbd>Space</kbd>

<p>keys on your keyboard to move forward, left, backward, right and jump respectively. You can also press the</p>

<kbd>P</kbd>

<p>key to adjust the graphics settings.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Add the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<code>http://192.168.1.132:8000?position=0%2C0&SCENE_DEBUG_PANEL</code>

<p>then change it to</p>

<code>http://192.168.1.132:8000?position=0%2C0&SCENE_DEBUG_PANEL&ENABLE_WEB3</code>

<p>Note: Make sure you have a browser wallet installed like Metamask or Fortmatic as you'll need to be logged onto those with the network set to the</p>

<code>Ethereum Mainnet</code>

<p>in order for the scene to perform checks on your wallet address.</p>

<h2>Acknowledgements</h2>

<em>accessDenied.mp3</em>

<li>modified from</li>

<em>jazz.mp3</em>

<li>modified from</li>

<em>jazzMuffled.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>9</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/nft-scanner

# URL: https://github.com/decentraland-scenes/nft-scanner

<title>GitHub - decentraland-scenes/nft-scanner: Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/nft-scanner</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NFT Scanner</h1>

<em>demo of nft-scanner scene running in preview.</em>

<h2>Description</h2>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club. In this example, we're checking whether the player owns a key from</p>

<p>project.</p>

<p>Note: There's a basic version of this scene</p>

<p>that performs simpler token checks.</p>

<h2>Instructions</h2>

<p>Walk up to the door and press the</p>

<kbd>E</kbd>

<p>key to see if you can access the club. The door will open and the audio quality increases if you own the Genesis Key, which is the first key minted from this contract</p>

<p>. Please feel free to modify the</p>

<code>contractAddress</code>

<p>along with the</p>

<code>tokenID</code>

<p>within the</p>

<code>game.ts</code>

<p>file to test other scenarios - you'll also need to update the</p>

<code>abi.ts</code>

<p>file to with the corresponding</p>

<em>Contract ABI</em>

<p>, which can be found using at</p>

<p>with the</p>

<em>contract address</em>

<p>appended at the end of the URL.</p>

<p>Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<kbd>Space</kbd>

<p>keys on your keyboard to move forward, left, backward, right and jump respectively. You can also press the</p>

<kbd>P</kbd>

<p>key to adjust the graphics settings.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Add the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<code>http://192.168.1.132:8000?position=0%2C0&SCENE_DEBUG_PANEL</code>

<p>then change it to</p>

<code>http://192.168.1.132:8000?position=0%2C0&SCENE_DEBUG_PANEL&ENABLE_WEB3</code>

<p>Note: Make sure you have a browser wallet installed like Metamask or Fortmatic as you'll need to be logged onto those with the network set to the</p>

<code>Ethereum Mainnet</code>

<p>in order for the scene to perform checks on your wallet address.</p>

<h2>Acknowledgements</h2>

<em>accessDenied.mp3</em>

<li>modified from</li>

<em>jazz.mp3</em>

<li>modified from</li>

<em>jazzMuffled.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=4

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=4

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</p>

<p>A shop to sell wearables in-world connecting to the Decentraland Marketplace</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player activates a lever</p>

<p>A particle system to create smoke</p>

<p>A basic scene that uses a WebSockets server to sync changes between players.</p>

<p>A multiplayer scene that uses a websockets server to sync the position of a frisbee as it's thrown between players</p>

<p>Combine Websockets and Physics to share data about bouncing balls between players. All of the logic is carried out client side. The server just passes on data.</p>

<p>Display the frames of a 2D animation from a spritesheet</p>

<p>A voxel art creator.</p>

<p>Coin pickup mechanic where the player moves over the coins to collect them.</p>

<p>A platform that moves when the player stands on one of the switches.</p>

<p>A flying rocket board that you can take anywhere</p>

<p>A shark moves along a curve, smoothly rotating and varying its speed depending on steepness</p>

<p>Monitor currnet realm + island, and how many other players are connected around you</p>

<p>Test raycasts across portable expereinces and scenes</p>

<p>A smart wearable that works as a radio you can carry with you to hear music anywhere in Decentraland</p>

<p>A Portal-ble experience to let you teleport anywhere around Decentraland instantly</p>

<p>A simple scarvenger hunt where you need to look for some landmarks in limited time</p>

<p>A simple interactive scene with a two-sided door that can be opened by clicking.</p>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. You can paint pixels in a mural that other users can see. The colors of each pixel are stored in a remote server.</p>

<p>Gun game mechanic along with bullet marks that appear at whatever angle the bullet strikes the target.</p>

<p>Basic gun game mechanic along with bullet marks and pop up scores.</p>

<p>This simple scene shows how to add animations to a `GLTFComponent` and handle click events.</p>

<p>A simple platformer that demonstrates rotating various platforms using code.</p>

<p>A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</p>

<p>Based on the classic Sokoban puzzle game where you push statues onto marked spots.</p>

<p>Using simple planes to create a force field effect that blocks the player from reaching the access card.</p>

<p>Using the new spawn feature to recreate a simple Portal clone.</p>

<p>A piano floor where you walk on the keys to play.</p>

<em>4</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/beer-dispenser

# URL: https://github.com/decentraland-scenes/beer-dispenser

<title>GitHub - decentraland-scenes/beer-dispenser: A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/beer-dispenser</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>35</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Beer Dispenser</h1>

<em>demo of beer-dispenser scene running in preview.</em>

<h2>Description</h2>

<p>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Pick up and put down the beer glass using the</p>

<kbd>E</kbd>

<p>key - you will only be able to place the beer glass on a flat surface that's pointing upwards. To fill a glass, place it at one of the bases on the dispenser and then press on the corresponding tap using the the</p>

<kbd>E</kbd>

<p>key again; to drink the beer just press the</p>

<kbd>F</kbd>

<p>key. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Finally, pressing the</p>

<kbd>Space</kbd>

<p>key will make your avatar jump.</p>

<p>If you launch a scene preview and open it in two (or more) browser windows, each window will be interpreted as a separate player and a mock communications server will keep these players in sync.</p>

<em>Note: If you open separate tabs in the same window, the interaction wonât work properly, as only one tab will be treated as active by the browser at a time.</em>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>beerPump.mp3</em>

<li>modified from</li>

<em>error.mp3</em>

<li>modified from</li>

<em>pickUp.mp3</em>

<li>modified from</li>

<em>putDown.mp3</em>

<li>modified from</li>

<em>swallow.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Wearables-In-world-Market

# URL: https://github.com/decentraland-scenes/Wearables-In-world-Market

<title>GitHub - decentraland-scenes/Wearables-In-world-Market: A shop to sell wearables in-world connecting to the Decentraland Marketplace</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A shop to sell wearables in-world connecting to the Decentraland Marketplace</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Wearables-In-world-Market</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Wearables Marketplace</h1>

<p>A simple scene that uses the</p>

<code>decentraland-crypto-utils</code>

<p>library and the Marketplace API mount an in-world wearables shop for wearables that are on Layer 1 Ethereum, leveraging from items published in the Decentraland Marketplace.</p>

<p>Note: This example code only works for wearables on L1 of Ethereum. It doesn't work for wearables on L2. For that, refer to the</p>

<p>example scene.</p>

<p>This scene shows you:</p>

<li>How to use the crypto utils library</li>

<li>How to query the Marketplace API (based on The Graph)</li>

<li>How to check if a player has allowed a dapp to handle MANA on their behalf and if the player has balance</li>

<li>How to run a buy transaction from the scene, to trade MANA for a wearable</li>

<li>How to build a UI to display all the data for a wearable publication</li>

<li>How to open a custom UI to display a confirmation prompt</li>

<li>How to make a UI component clickable and use it to trigger functions</li>

<p>The crypto Utils function makes it a lot simpler to perform blockchain functions. Sending MANA from one account to another just takes one line of code using this library.</p>

<p>Feel free to reuse the models and code from this scene!</p>

<p>Note: The crtpyo-utils library is currently a work in progress and has issues that need to be resolved. It's not yet published on npm, but you can copy what's been done in the</p>

<code>package.json</code>

<p>file of this repository.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<p>, make it</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Scene usage</h2>

<p>Press E on any wearable item. The scene will query the Marketplace API and return data about the cheapest sale for that item. You can then purchase it by clicking a button on that same UI.</p>

<p>If the player hasn't already allowed the Decentraland Marketplace to operate MANA on their behalf, a notification will appear with a button that lets players run that transaction from the scene. They must wait for that transaction to complete before they can make a purchase.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A shop to sell wearables in-world connecting to the Decentraland Marketplace</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Paid-Lever

# URL: https://github.com/decentraland-scenes/Paid-Lever

<title>GitHub - decentraland-scenes/Paid-Lever: A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player activates a lever</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player activates a lever</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Paid-Lever</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Paid Lever</h1>

<p>A simple scene that uses the</p>

<code>decentraland-crypto-utils</code>

<p>library to make a MANA payment and trigger an action after the payment is done.</p>

<p>This scene shows you:</p>

<li>How to use the crypto utils library</li>

<li>How to send a payment in MANA to a wallet</li>

<li>How to dealy an action itll a transaction for a payment in MANA is sent</li>

<li>How to handle async functions</li>

<li>How to define the elements of a scene as game objects, with state and functions</li>

<li>How to open a custom UI to display a confirmation prompt</li>

<li>How to make a UI component clickable and use it to trigger functions</li>

<li>How to use the utils library to move and rotate an entity smoothly</li>

<p>The crypto Utils function makes it a lot simpler to perform blockchain functions. Sending MANA from one account to another just takes one line of code using this library.</p>

<p>Feel free to reuse the models and code from this scene!</p>

<p>Note: The crtpyo-utils library is currently a work in progress and has issues that need to be resolved. It's not yet published on npm, but you can copy what's been done in the</p>

<code>package.json</code>

<p>file of this repository.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<p>, make it</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Scene usage</h2>

<p>When clicking on the lever, a UI screen will ask you to confirm the action. If confirmed, Metamask or your wallet of choice will prompt you to confirm the transaction. Once confirmed, the action that's linked to the lever is performed. The bridge shifts from one platform to the other, according to the position of the lever.</p>

<p>You can test this scene in Ropsten testnet to aviod paying real MANA and Ether for the gas fee. To do so, simply set your Metamask network from Mainnet to Ropsten and reload the scene.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player activates a lever</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Smoke

# URL: https://github.com/decentraland-scenes/Smoke

<title>GitHub - decentraland-scenes/Smoke: A particle system to create smoke</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A particle system to create smoke</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Smoke</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Smoke scene</h2>

<p>This simple scene shows how to handle a particle system to create smoke.</p>

<p>This scene shows you:</p>

<li>How to use materials with transparency on a plane</li>

<li>How to use billboards to keep a 2D plane always facing the player</li>

<li>How to use a system to create a particle effect, spawnin and reusing multiple entities, changing their position and scale gradually</li>

<li>Use an Entity pool to keep reusing the same entities instead of constantly creating new ones</li>

<p>There are two modules being used:</p>

<code>SmokeSource</code>

<li>defines a place from where smoke puffs spawn and an interval. To instance smoke puffs, it either uses idle entities from an object pool or creates new ones if they don't exist yet.</li>

<code>Smoke</code>

<li>updates the position of the existing smoke puffs so that they rise and slowly move in a direction set by their</li>

<code>SmokeVelocity</code>

<li>component. When a smoke puff is too far from the source, it's removed from the scene.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Note how smoke starts rising from the fireplace. Puffs of smoke have random sizes and move in random directions, but they gradually grow and straighten upwards as time goes by.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A particle system to create smoke</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/ws-example

# URL: https://github.com/decentraland-scenes/ws-example

<title>GitHub - decentraland-scenes/ws-example: A basic scene that uses a WebSockets server to sync changes between players.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A basic scene that uses a WebSockets server to sync changes between players.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/ws-example</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ws-example</h1>

<p>A basic scene that uses a WebSockets server to sync changes between players. When a player clicks on a cube, all players see it turn green. The scene checks the player's realm and only syncs between players that are in the same realm, to keep things consistent between players that can see each other.</p>

<p>The scene relies on a</p>

<p>that broadcasts all messages that are sent to it to all players.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to the</p>

<code>scene</code>

<p>directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Run the server</strong>

<p>By default, the scene relies on an already deployed server on that can be reached on</p>

<code>wss://64-225-45-232.nip.io/</code>

<p>To instead run the server locally, on a separate command line window, navigate to the</p>

<code>server</code>

<p>directory and run the following command to install all the dependencies:</p>

<code>npm i</code>

<p>Once the dependencies are installed, run the following command to start the server:</p>

<code>npm run start</code>

<p>The server will then be listening on</p>

<code>localhost:8080</code>

<p>, you can redirect the scene to point to this address when connecting to the WS server.</p>

<code>socket = new WebSocket(

    'wss://localhost:8080/broadcast/' + realm.displayName

  )</code>

<strong>Scene Usage</strong>

<p>Click on the cubes to see them change color. If you open multiple tabs to the same preview, you should see that all tabs respond to the changes that other players do too. These messages are travelling via WebSockets.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A basic scene that uses a WebSockets server to sync changes between players.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/ws-broadcast

# URL: https://github.com/decentraland-scenes/ws-broadcast

<title>GitHub - decentraland-scenes/ws-broadcast: Simple broadcasting websocket server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Simple broadcasting websocket server</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/ws-broadcast</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Simple broadcasting websocket server</h1>

<p>This project serves as an example on how to build a server that can be used by a Decentraland scene to handle secure Websockets communication between players.</p>

<p>It opens a websocket server on port 8080 which can then be proxied via nginx to add TLS certificate.</p>

<h2>Behavior</h2>

<p>This server shares all messages sent by all players to all other players in the same room, without filtering or applying any logic of its own.</p>

<p>When a player establishes a connection with this server, it groups the player into a room depending on the last parameter of the URL.</p>

<p>/broadcast/</p>

<p>The following scene is an example of a scene that uses a server like this:</p>

<p>This scene adds the player's realm at the end of the URL when establishing the connection, so that all players in a same realm in the scene are in sync with each other.</p>

<h2>Running locally</h2>

<p>You can run this server locally under localhost.</p>

<p>To do this, simply cd to the server directory and run:</p>

<code>npm run start</code>

<p>You can then run a Decentraland scene on a separate command line window and interact with this server. If you open the scene preview on multiple tabs, the preview on each of the tabs will communicate with each other.</p>

<p>To reach the server when running locally from your scene's code, do:</p>

<code>const socket = new WebSocket(`ws://localhost:8080`)</code>

<h2>Installation via Docker</h2>

<p>For easier installation on the server where you want to ultimately run this, this project is packaged into a Docker container. The server then just needs to have TLS certificates and nginx installed.</p>

<p>To install it as a docker container, run the following from the server:</p>

<code>docker docker run -d -p 13370:13370 hprivakos/ws-broadcast</code>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Simple broadcasting websocket server</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/websocket-frisbee

# URL: https://github.com/decentraland-scenes/websocket-frisbee

<title>GitHub - decentraland-scenes/websocket-frisbee: A multiplayer scene that uses a websockets server to sync the position of a frisbee as it's thrown between players</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A multiplayer scene that uses a websockets server to sync the position of a frisbee as it's thrown between players</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/websocket-frisbee</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>33</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Websocket Frisbee Throwing</h1>

<p>A multiplayer scene that uses a websockets server to sync the position of a frisbee as it's thrown between players</p>

<em>demo of frisbee throwing running in preview.</em>

<h2>Description</h2>

<p>This scene uses WebSockets to sync what each player sees while throwing a futuristic frisbee around, that bounces using the</p>

<p>physics engine.</p>

<p>Since physics is calculated client side, sending messages for each change of position would be too much. Here, we're just sharing information about each throwing of the frisbee, and each client then calculates the effects of that locally.</p>

<p>The last player to throw the frisbee is assigned as the source of truth, and syncs the position of the frisbee in the scene to others every few seconds.</p>

<p>This scene uses the default echo websockets server, which simply forwards all messages received to all other players in the room. A more robustly developed scene might implement server-side logic to dissambiguate confiting data better, or even run a parallel phyisics simulation and take that as the final source of truth. The benefit of this implementation is that it doesn't require changing the server-side code at all, but it has its limitations.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to the</p>

<code>scene</code>

<p>directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Run the server</strong>

<p>By default, the scene relies on an already deployed server on that can be reached on</p>

<code>wss://64-225-45-232.nip.io/</code>

<p>To instead run the server locally, on a separate command line window, navigate to the</p>

<code>server</code>

<p>directory and run the following command to install all the dependencies:</p>

<code>npm i</code>

<p>Once the dependencies are installed, run the following command to start the server:</p>

<code>npm run start</code>

<p>The server will then be listening on</p>

<code>localhost:8080</code>

<p>, you can redirect the scene to point to this address when connecting to the WS server.</p>

<code>socket = new WebSocket(

    'wss://localhost:8080/broadcast/' + realm.displayName

  )</code>

<strong>Scene Usage</strong>

<p>Use the</p>

<code>E</code>

<p>key to pick upt the frisbee, then click to throw it. Other players can press</p>

<code>E</code>

<p>to catch it when it flies by near them. The UI counts the times you throw and catch it without falling to the ground. If you open multiple tabs to the same preview, you should see that all tabs respond to the changes that other players do too. These messages are travelling via WebSockets.</p>

<h2>About</h2>

<p>A multiplayer scene that uses a websockets server to sync the position of a frisbee as it's thrown between players</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/websocket-basket

# URL: https://github.com/decentraland-scenes/websocket-basket

<title>GitHub - decentraland-scenes/websocket-basket</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/websocket-basket</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Websocket Basketball</h1>

<p>A multiplayer scene that uses a websockets server to sync the position of a basketball as it's thrown between players</p>

<em>demo of basketball running in preview.</em>

<h2>Description</h2>

<p>This scene uses WebSockets to sync what each player sees while throwing a futuristic basketball around, that bounces using the</p>

<p>physics engine.</p>

<p>Since physics is calculated client side, sending messages for each change of position would be too much. Here, we're just sharing information about each throwing of the ball, and each client then calculates the effects of that locally.</p>

<p>The last player to throw the ball is assigned as the source of truth, and syncs the position of the ball in the scene to others every few seconds.</p>

<p>This scene uses the default echo websockets server, which simply forwards all messages received to all other players in the room. A more robustly developed scene might implement server-side logic to dissambiguate confiting data better, or even run a parallel phyisics simulation and take that as the final source of truth. The benefit of this implementation is that it doesn't require changing the server-side code at all, but it has its limitations.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to the</p>

<code>scene</code>

<p>directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Run the server</strong>

<p>By default, the scene relies on an already deployed server on that can be reached on</p>

<code>wss://64-225-45-232.nip.io/</code>

<p>To instead run the server locally, on a separate command line window, navigate to the</p>

<code>server</code>

<p>directory and run the following command to install all the dependencies:</p>

<code>npm i</code>

<p>Once the dependencies are installed, run the following command to start the server:</p>

<code>npm run start</code>

<p>The server will then be listening on</p>

<code>localhost:8080</code>

<p>, you can redirect the scene to point to this address when connecting to the WS server.</p>

<code>socket = new WebSocket(

    'wss://localhost:8080/broadcast/' + realm.displayName

  )</code>

<strong>Scene Usage</strong>

<p>Use the</p>

<code>E</code>

<p>key to pick upt the ball, then click to throw it. As you keep the mouse button pressed, a bar fills up showing the strength of your shot. You can shoot hoops at the rings, each shot is worth 2 or 3 points depending on your distance away from the hoop when throwing.</p>

<p>Other players can press</p>

<code>E</code>

<p>to catch it when it bounces by near them. The UI counts the times you throw and catch it without falling to the ground.</p>

<p>If you open multiple tabs to the same preview, you should see that all tabs respond to the changes that other players do too. These messages are travelling via WebSockets.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/websocket-bouncing-balls

# URL: https://github.com/decentraland-scenes/websocket-bouncing-balls

<title>GitHub - decentraland-scenes/websocket-bouncing-balls: Combine Websockets and Physics to share data about bouncing balls between players. All of the logic is carried out client side. The server just passes on data.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Combine Websockets and Physics to share data about bouncing balls between players. All of the logic is carried out client side. The server just passes on data.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/websocket-bouncing-balls</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Websockets and physics scene</h1>

<em>demo of cannon-example-scene running in preview.</em>

<h2>Description</h2>

<p>This scene uses WebSockets to sync what each player sees while simulating a bunch of balls bouncing using the</p>

<p>physics engine.</p>

<p>Since physics is calculated client side, sending messages for each change of position would be too much. Here, we're just sharing information about any exherted forces on the balls, and each client then calculates the effects of that locally.</p>

<p>Small delays might lead to balls being in slightly different positions, and could deal to discrepancies, especially when balls bounce off each other, so it's important to deal with that in some way.</p>

<p>In this case, the last player to have kicked a ball is assigned as the source of truth, and syncs the position of all balls in the scene to others every couple of seconds.</p>

<p>This scene uses the default echo websockets server, which simply forwards all messages received to all other players in the room. A more robustly developed scene might implement server-side logic to dissambiguate confiting data better, or even run a parallel phyisics simulation and take that as the final source of truth. The benefit of this implementation is that it doesn't require changing the server-side code at all, but it has its limitations.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to the</p>

<code>scene</code>

<p>directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Run the server</strong>

<p>By default, the scene relies on an already deployed server on that can be reached on</p>

<code>wss://64-225-45-232.nip.io/</code>

<p>To instead run the server locally, on a separate command line window, navigate to the</p>

<code>server</code>

<p>directory and run the following command to install all the dependencies:</p>

<code>npm i</code>

<p>Once the dependencies are installed, run the following command to start the server:</p>

<code>npm run start</code>

<p>The server will then be listening on</p>

<code>localhost:8080</code>

<p>, you can redirect the scene to point to this address when connecting to the WS server.</p>

<code>socket = new WebSocket(

    'wss://localhost:8080/broadcast/' + realm.displayName

  )</code>

<strong>Scene Usage</strong>

<p>Use the Left Mouse Button or 'E' or 'F' keys to interact with the balls.  If you open multiple tabs to the same preview, you should see that all tabs respond to the changes that other players do too. These messages are travelling via WebSockets.</p>

<h2>About</h2>

<p>Combine Websockets and Physics to share data about bouncing balls between players. All of the logic is carried out client side. The server just passes on data.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/uv-map

# URL: https://github.com/decentraland-scenes/uv-map

<title>GitHub - decentraland-scenes/uv-map: Display the frames of a 2D animation from a spritesheet</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Display the frames of a 2D animation from a spritesheet</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/uv-map</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h2>UV Map</h2>

<p>A simple scene that shows a spritesheet animation of a robot talking.</p>

<p>This scene shows you:</p>

<li>How to map a portion of a texture onto a plane</li>

<li>How to change the mapped portion of a texture frame by frame to produce a 2D frame by frame animation</li>

<p>A PlaneShape uses a spritesheet as texture, selecting only a region of the image. The selected region is changed on every frame, to simulate movement.</p>

<p>This is the image used as a spritesheet:</p>

<p>Note: Event though this is not how we animated the robots in Genesis Plaza in the end, it's still a valuable example for other spritesheet implementations.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.

Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Display the frames of a 2D animation from a spritesheet</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/coin-pickup

# URL: https://github.com/decentraland-scenes/coin-pickup

<title>GitHub - decentraland-scenes/coin-pickup: Coin pickup mechanic where the player moves over the coins to collect them.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Coin pickup mechanic where the player moves over the coins to collect them.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/coin-pickup</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Coin Pickup</h1>

<em>demo of coin-pickup scene running in preview.</em>

<h2>Description</h2>

<p>Coin pickup mechanic where the player moves over the coins to collect them. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Run over the coins to collect them. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>coinPickup.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Coin pickup mechanic where the player moves over the coins to collect them.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/switchboard-platforms

# URL: https://github.com/decentraland-scenes/switchboard-platforms

<title>GitHub - decentraland-scenes/switchboard-platforms: A platform that moves when the player stands on one of the switches.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A platform that moves when the player stands on one of the switches.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/switchboard-platforms</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>19</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Switchboard Platforms (Workshop)</h1>

<em>demo of switchboard-platforms scene running in preview.</em>

<h2>Description</h2>

<p>A platform that moves when the player stands on one of the switches. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Try and get the coin that's floating in the air. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>coinPickup.mp3</em>

<li>modified from</li>

<em>switch.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A platform that moves when the player stands on one of the switches.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Smart-wearable-rocket-board

# URL: https://github.com/decentraland-scenes/Smart-wearable-rocket-board

<title>GitHub - decentraland-scenes/Smart-wearable-rocket-board: A flying rocket board that you can take anywhere</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A flying rocket board that you can take anywhere</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Smart-wearable-rocket-board</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>rocket-board</h1>

<p>A flying rocket board that you can take anywhere</p>

<h2>About</h2>

<p>A flying rocket board that you can take anywhere</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Swimming-shark

# URL: https://github.com/decentraland-scenes/Swimming-shark

<title>GitHub - decentraland-scenes/Swimming-shark: A shark moves along a curve, smoothly rotating and varying its speed depending on steepness</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A shark moves along a curve, smoothly rotating and varying its speed depending on steepness</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Swimming-shark</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Swimming shark</h2>

<p>A scene that shows a shark moving around in circles along a curved circular path, using lerp over each segment of the path.</p>

<p>This scene shows you:</p>

<li>How to trace a curve made up of multiple segments</li>

<li>How to use a system to move an entity through the points of the curve</li>

<li>How to use a system to keep rotating the entity towards the next point in the path</li>

<li>How to create custom components to store custom data</li>

<p>The path is generated by specifying just four points through which the shark needs to pass, the rest of the points are calculated automatically.</p>

<p>The shark also rotates smoothly with a spherical lerp function. It's speed also depends on the steepness of the segment it's swimming up. The speed and intensity of the swimming animation also depends on this.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>The shark moves following a fixed path. Its speed depends on the steepness of the section it's swimming through.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A shark moves along a curve, smoothly rotating and varying its speed depending on steepness</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Smart-wearable-realms-test

# URL: https://github.com/decentraland-scenes/Smart-wearable-realms-test

<title>GitHub - decentraland-scenes/Smart-wearable-realms-test: Monitor currnet realm + island, and how many other players are connected around you</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Monitor currnet realm + island, and how many other players are connected around you</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Smart-wearable-realms-test</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>realms-test</h1>

<p>Monitor currnet realm + island, and how many other players are connected around you</p>

<h2>About</h2>

<p>Monitor currnet realm + island, and how many other players are connected around you</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Smart-wearable-raycast-test

# URL: https://github.com/decentraland-scenes/Smart-wearable-raycast-test

<title>GitHub - decentraland-scenes/Smart-wearable-raycast-test: Test raycasts across portable expereinces and scenes</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Test raycasts across portable expereinces and scenes</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Smart-wearable-raycast-test</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>raycast-test</h1>

<p>Test raycasts across portable expereinces and scenes</p>

<h2>About</h2>

<p>Test raycasts across portable expereinces and scenes</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Smart-wearable-radio

# URL: https://github.com/decentraland-scenes/Smart-wearable-radio

<title>GitHub - decentraland-scenes/Smart-wearable-radio: A smart wearable that works as a radio you can carry with you to hear music anywhere in Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A smart wearable that works as a radio you can carry with you to hear music anywhere in Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Smart-wearable-radio</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>radio</h1>

<h2>About</h2>

<p>A smart wearable that works as a radio you can carry with you to hear music anywhere in Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Portal-ble_experience

# URL: https://github.com/decentraland-scenes/Portal-ble_experience

<title>GitHub - decentraland-scenes/Portal-ble_experience: A Portal-ble experience to let you teleport anywhere around Decentraland instantly</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A Portal-ble experience to let you teleport anywhere around Decentraland instantly</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Portal-ble_experience</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>portal</h1>

<p>A Portal-ble experience to let you teleport anywhere around Decentraland instantly</p>

<h2>About</h2>

<p>A Portal-ble experience to let you teleport anywhere around Decentraland instantly</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Smart-wearable-Scarvenger-hunt

# URL: https://github.com/decentraland-scenes/Smart-wearable-Scarvenger-hunt

<title>GitHub - decentraland-scenes/Smart-wearable-Scarvenger-hunt: A simple scarvenger hunt where you need to look for some landmarks in limited time</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scarvenger hunt where you need to look for some landmarks in limited time</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Smart-wearable-Scarvenger-hunt</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Scarvenger-hunt</h1>

<p>A simple scarvenger hunt where you need to look for some landmarks in limited time</p>

<h2>About</h2>

<p>A simple scarvenger hunt where you need to look for some landmarks in limited time</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Sliding-door

# URL: https://github.com/decentraland-scenes/Sliding-door

<title>GitHub - decentraland-scenes/Sliding-door: A simple interactive scene with a two-sided door that can be opened by clicking.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple interactive scene with a two-sided door that can be opened by clicking.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Sliding-door</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Sliding doors</h2>

<p>A simple interactive scene with a two-sided door that can be opened by clicking.</p>

<p>This scene shows you:</p>

<li>How to add primitive shapes and apply materials to them</li>

<li>How to handle click events</li>

<li>How to use the</li>

<li>to move an entity gradually</li>

<li>How to use the toggle component from the utils library to alternate something between two states</li>

<li>How to arrange entities into parents and children</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the door to open both sides at once.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple interactive scene with a two-sided door that can be opened by clicking.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Remote-mural

# URL: https://github.com/decentraland-scenes/Remote-mural

<title>GitHub - decentraland-scenes/Remote-mural: A scene that uses a server and a REST API to sync a scene state amongst multiple users. You can paint pixels in a mural that other users can see. The colors of each pixel are stored in a remote server.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. You can paint pixels in a mural that other users can see. The colors of each pixel are stored in a remote server.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Remote-mural</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Remote mural</h1>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. You can paint pixels in a mural that other users can see. The colors of each pixel are stored in a remote server.</p>

<li>Create a REST server</li>

<li>Call REST API</li>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command</p>

<pre>npm i -g decentraland</pre>

<p>For a more details, follow the steps in the</p>

<p>.</p>

<strong>Previewing the scene</strong>

<p>Once you've installed the CLI, download this example and navigate to its directory from your terminal or command prompt.</p>

<h4>Run the REST server</h4>

<p>(In another terminal window)</p>

<pre>server</pre>

<pre>npm install</pre>

<pre>npm run build</pre>

<pre>npm start</pre>

<h4>Run the scene preview</h4>

<pre>scene</pre>

<pre>npm install</pre>

<pre>dcl start</pre>

<p>Open multiple browser tabs by copying the preview URL. Interact with the door on one tab to see that it also changes on other tabs as well.</p>

<p>Any dependencies are installed and then the CLI will open the scene in a new browser tab automatically.</p>

<strong>Usage</strong>

<p>Click on a color on the palette on the right. Once a color is selected, you can paint the pixels on the wall with that color. Other users will see the same wall, painted with the same colors.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. You can paint pixels in a mural that other users can see. The colors of each pixel are stored in a remote server.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/shooting-range-advanced

# URL: https://github.com/decentraland-scenes/shooting-range-advanced

<title>GitHub - decentraland-scenes/shooting-range-advanced: Gun game mechanic along with bullet marks that appear at whatever angle the bullet strikes the target.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Gun game mechanic along with bullet marks that appear at whatever angle the bullet strikes the target.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/shooting-range-advanced</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Shooting Range Advanced</h1>

<em>demo of shooting-range-advanced scene running in preview.</em>

<h2>Description</h2>

<p>Gun game mechanic along with bullet marks that appear at whatever angle the bullet strikes the target. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Make sure you stand inside the shooting area marked in red before firing at the targets. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Press the</p>

<kbd>Space</kbd>

<p>key to jump and the</p>

<kbd>Left Mouse Button</kbd>

<p>to shoot.</p>

<h2>Issues</h2>

<p>If the targets is set to spin too quickly then the bullet marks might appear hidden beneath the target's geometry as the bullet mark isn't generated fast enough.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>shotFail.mp3</em>

<li>modified from</li>

<em>shotRicochet.mp3</em>

<li>modified from</li>

<em>shotSilencer.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Gun game mechanic along with bullet marks that appear at whatever angle the bullet strikes the target.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/shooting-range

# URL: https://github.com/decentraland-scenes/shooting-range

<title>GitHub - decentraland-scenes/shooting-range: Basic gun game mechanic along with bullet marks and pop up scores.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Basic gun game mechanic along with bullet marks and pop up scores.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/shooting-range</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Shooting Range</h1>

<em>demo of shooting-range scene running in preview.</em>

<h2>Description</h2>

<p>Basic gun game mechanic along with bullet marks and pop up scores. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Make sure you stand inside the shooting area marked in red before firing at the targets. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Press the</p>

<kbd>Space</kbd>

<p>key to jump and the</p>

<kbd>Left Mouse Button</kbd>

<p>to shoot.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>shot.mp3</em>

<li>modified from</li>

<em>shotFail.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Basic gun game mechanic along with bullet marks and pop up scores.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Shark-animation

# URL: https://github.com/decentraland-scenes/Shark-animation

<title>GitHub - decentraland-scenes/Shark-animation: This simple scene shows how to add animations to a `GLTFComponent` and handle click events.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This simple scene shows how to add animations to a `GLTFComponent` and handle click events.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Shark-animation</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>27</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Shark animation</h2>

<p>This simple scene shows how to add animations to a</p>

<code>GLTFComponent</code>

<p>and handle click events.</p>

<p>This scene shows you:</p>

<li>How to add 3D models</li>

<li>How to play animations from a 3D model</li>

<li>How to toggle animations on or off from a 3D model</li>

<li>How to handle click events on an entity</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the shark to toggle the</p>

<code>bite</code>

<p>animation on and off. The</p>

<code>swim</code>

<p>animation should be always on.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>This simple scene shows how to add animations to a `GLTFComponent` and handle click events.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/rotating-platforms

# URL: https://github.com/decentraland-scenes/rotating-platforms

<title>GitHub - decentraland-scenes/rotating-platforms: A simple platformer that demonstrates rotating various platforms using code.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple platformer that demonstrates rotating various platforms using code.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/rotating-platforms</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Rotating Platforms</h1>

<em>demo of rotating-platforms scene running in preview.</em>

<h2>Description</h2>

<p>A simple platformer that demonstrates rotating various platforms using code, which then enables you to sync up the position of the platforms with other players in the scene should you choose to do so. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>The aim is to get to the crown by moving and jumping between platforms. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>win.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A simple platformer that demonstrates rotating various platforms using code.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/rocket-board

# URL: https://github.com/decentraland-scenes/rocket-board

<title>GitHub - decentraland-scenes/rocket-board: A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/rocket-board</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Rocket Board</h1>

<em>demo of rocket-board scene running in preview.</em>

<h2>Description</h2>

<p>A rocket board that you can stand on and pilot. The board uses the</p>

<p>physics engine so you get to experience the momentum and inertia effects. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Hop onto the rocket board and fly through the ring, every time you do, another one pops up in a random location in the scene. Press the</p>

<kbd>F</kbd>

<p>key to thrust upwards and press</p>

<kbd>E</kbd>

<p>key to thrust forwards in the direction you're facing. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move your avatar forward, left, backward and right respectively.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>rocketBooster.mp3</em>

<li>modified from</li>

<em>ringPassmp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/push-box-puzzle

# URL: https://github.com/decentraland-scenes/push-box-puzzle

<title>GitHub - decentraland-scenes/push-box-puzzle: Based on the classic Sokoban puzzle game where you push statues onto marked spots.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Based on the classic Sokoban puzzle game where you push statues onto marked spots.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/push-box-puzzle</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Push Box Puzzle</h1>

<em>demo of push-box-puzzle scene running in preview.</em>

<h2>Description</h2>

<p>Based on the classic Sokoban puzzle game where you push statues onto marked spots. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Stand close to the statue you want to move and press the</p>

<kbd>Left Mouse Button</kbd>

<p>to push it to the adjacent tile. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. You can exit the room to restart the puzzle.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>statueMove.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Based on the classic Sokoban puzzle game where you push statues onto marked spots.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/power-cube

# URL: https://github.com/decentraland-scenes/power-cube

<title>GitHub - decentraland-scenes/power-cube: Using simple planes to create a force field effect that blocks the player from reaching the access card.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using simple planes to create a force field effect that blocks the player from reaching the access card.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/power-cube</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Power Cube</h1>

<em>demo of power-cube scene running in preview.</em>

<h2>Description</h2>

<p>Using simple planes to create a force field effect that blocks the player from reaching the access card. This scene also demonstrate the new</p>

<code>Attachable</code>

<p>feature, which is used for picking up the power cube. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Get close to the power cube before picking it up. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. The</p>

<kbd>E</kbd>

<p>key is used to pick up and put down the cube. Remove the power cube from its base to turn off the forcefield.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>cubePickup.mp3</em>

<li>modified from</li>

<em>cubePutDown.mp3</em>

<li>modified from</li>

<em>powerUp.mp3</em>

<li>modified from</li>

<em>powerDown.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Using simple planes to create a force field effect that blocks the player from reaching the access card.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/portal-puzzle

# URL: https://github.com/decentraland-scenes/portal-puzzle

<title>GitHub - decentraland-scenes/portal-puzzle: Using the new spawn feature to recreate a simple Portal clone.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using the new spawn feature to recreate a simple Portal clone.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/portal-puzzle</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Portal Puzzle</h1>

<em>demo of portal-puzzle scene running in preview.</em>

<h2>Description</h2>

<p>Using the new spawn feature to recreate a simple Portal clone where the player has to pickup the access card that's on a ledge. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Walk over the portal gun to pick it up. Press the</p>

<kbd>Left Mouse Button</kbd>

<p>to shoot and the</p>

<kbd>Space</kbd>

<p>key to jump. To toggle between the orange and blue portals, press the</p>

<kbd>E</kbd>

<p>key. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>gunPickup.mp3</em>

<li>modified from</li>

<em>portalFail.mp3</em>

<li>modified from</li>

<em>portalSuccess.mp3</em>

<li>modified from</li>

<em>teleport.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Using the new spawn feature to recreate a simple Portal clone.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=5

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=5

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Use a time API to get the current time and start a party</p>

<p>A simple interactive scene with a door that can be opened and closed.</p>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<p>A simple mural scene.</p>

<p>A puzzle game where you reflect a beam of light to a target using a series of mirrors.</p>

<p>Example scene showing a UI</p>

<p>A Simon Says game, with click interactions and sequenced actions. The game generates a random sequence of colors and you must click buttons to match those.</p>

<p>Run a MANA transaction and receive MANA in Ropsten</p>

<p>A scene where MANA from market transactions is burnt, displaying a particle-based fire</p>

<p>Reflecting a ray off of multiple objects at arbitrary angles.</p>

<p>Item pickup mechanic where each item has a different spawn time.</p>

<p>This simple scene features a couple of wheels that you can spin by clicking them.</p>

<p>A scene where hummingbirds spawn when you click a tree. Each bird moves on its own to random positions.</p>

<p>Using the Noise Utils library to simulate random grass movement from wind</p>

<p>Demonstrates how you can grab and move an object.</p>

<p>A scene that shows a character walking along a fixed path, using lerp over each segment of the path. If you approach it, it will switch to yelling at you.</p>

<p>A cube-based fountain that works on Soho Plaza. It includes P2P sync and handling of multiple animations per model.</p>

<p>Call the Decentraland Events API to display events that are currently going on</p>

<p>Spawning enemy spaceships from various shaped portals.</p>

<p>A scene with animations, sound, and tiles on the floor that randomly change color to the beat.</p>

<p>Displays an NFT taken from a contract address</p>

<p>Using cannon.js to simulate several bouncing balls</p>

<p>A scene with a simple AI character that chooses its own actions and follows orders.</p>

<p>Make players dance in a loop when they stand in certain areas of your scene</p>

<p>A simple scene that shows how to fetch player wearable data to match against a criteria. In this case, only players wearing eyewear are allowed in.</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks on a donations box</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks a button</p>

<p>Swapping out the default avatar model for another character model.</p>

<p>A coconut shy built using cannon.js physics engine.</p>

<em>5</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Party-Time

# URL: https://github.com/decentraland-scenes/Party-Time

<title>GitHub - decentraland-scenes/Party-Time: Use a time API to get the current time and start a party</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Use a time API to get the current time and start a party</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Party-Time</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Party time</h1>

<p>This simple scene calls a time API to fetch the current time. If the time is between 9:00 PM and midnight in GMT+3, a party starts.</p>

<p>This scene shows you:</p>

<li>How to send requests to an API</li>

<li>How to parse a JSON response</li>

<li>How to handle async functions, waiting for an external response</li>

<li>How to stream audio</li>

<li>How to stream video, and display it as a texture on primitive shapes</li>

<p>The RESTful API called is</p>

<code>https://worldtimeapi.org/api</code>

<p>, which returns a JSON file with several fields that can be read.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Once the party starts, the scene starts streaming audio from an internet radio, and applies video textures from a video stream to spinning cubes.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Use a time API to get the current time and start a party</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Open-door

# URL: https://github.com/decentraland-scenes/Open-door

<title>GitHub - decentraland-scenes/Open-door: A simple interactive scene with a door that can be opened and closed.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple interactive scene with a door that can be opened and closed.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Open-door</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Open the door</h2>

<p>A simple interactive scene with a door that can be opened and closed.</p>

<p>This scene shows you:</p>

<li>How to add primitive shapes and apply materials to them</li>

<li>How to handle click events</li>

<li>How to use the</li>

<li>to rotate an entity gradually</li>

<li>How to use the toggle component from the utils library to alternate something between two states</li>

<li>How to arrange entities into parents and children</li>

<li>How to rotate an entity around an arbitrary pivot point</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the door to open and close it.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple interactive scene with a door that can be opened and closed.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/mural-example-scene

# URL: https://github.com/decentraland-scenes/mural-example-scene

<title>GitHub - decentraland-scenes/mural-example-scene: A simple mural scene.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple mural scene.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/mural-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Mural Example Scene</h1>

<em>A screenshot of the mural-example-scene running in preview.</em>

<p>A simple mural with pixel times that can be painted different colors.</p>

<p>This scene shows you:</p>

<li>How to use the message bus to keep players in sync with each other's actions while they're together in the scene</li>

<li>How to send HTTP requests to an API to store the scene state in a permanent place, so others can then retrieve changes</li>

<li>How to set up a server that is capable of handling the storage of data in a separate Amazon S3 server</li>

<li>How to obtain the realm that a player is currently on</li>

<li>How to change the material of a primitive shape</li>

<li>How to use the utils library</li>

<code>Delay</code>

<li>component to buffer the updating various changes to the server</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of the same server that's used by Soho Plaza. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>. To store data on an Amazon S3 server, as done here, you'll also need to set up your own Amazon S3, and fetch credentials for that account to include in your server folder.</p>

<h2>About syncing changes between players</h2>

<p>When a player comes into the scene, they download the latest tile coloring pattern from off the server. Then, as different players that are there change the pattern, they get these changes from each other using the Message Bus, they donât need to check the server regularly to know whatâs new.</p>

<p>For this to work properly, we need to keep a separate version of this pattern for each realm and know what realm each player is on when they update the pattern. This is because only players that are in the same realm message each other via the Message Bus. There would otherwise be odd inconsistencies in what the pattern ends up being when players that are in different realms modify the same pattern without notifying each other. The scene includes the playerâs realm as part of the requests it sends, and the server then handles a different .json file depending on the realm.</p>

<p>Note: This works fine as long as the scene is deployed in one single place in the map. If various copies of the same scene exist and call the same server, writing to the same database, then that could be a problem. If two players are interacting with the two different versions of the scene, they will be acting upon the same database, but they won't share changes via the message bus. This will result in inconsistencies in between what each one sees and the final result being stored.</p>

<p>Another noteworthy thing weâre doing in this example is that changes arenât sent to the server right away, but instead we do a little buffer using the utils.Delay component, so that if the player changes several notes in quick succession, the server only gets notified of the final state of the pattern. This helps reduce the number of requests that the server needs to handle. For it to work, each update request needs to send the full state of the pattern, rather than just the changed elements.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>About</h2>

<p>A simple mural scene.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/mirror-puzzle

# URL: https://github.com/decentraland-scenes/mirror-puzzle

<title>GitHub - decentraland-scenes/mirror-puzzle: A puzzle game where you reflect a beam of light to a target using a series of mirrors.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A puzzle game where you reflect a beam of light to a target using a series of mirrors.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/mirror-puzzle</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Mirror Puzzle</h1>

<em>demo of mirror-puzzle scene running in preview.</em>

<h2>Description</h2>

<p>A puzzle game where you reflect a beam of light to a target using a series of mirrors. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Stand close to the mirror you want to move and press the</p>

<kbd>Left Mouse Button</kbd>

<p>to push the mirror to an adjacent tile. Using the</p>

<kbd>E</kbd>

<p>key will rotate the mirror clockwise and the</p>

<kbd>F</kbd>

<p>key to rotate it anti-clockwise. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Finally, pressing the</p>

<kbd>Space</kbd>

<p>key will make your avatar jump.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>mirrorMove.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A puzzle game where you reflect a beam of light to a target using a series of mirrors.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Mining-rocks

# URL: https://github.com/decentraland-scenes/Mining-rocks

<title>GitHub - decentraland-scenes/Mining-rocks: Example scene showing a UI</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Example scene showing a UI</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Mining-rocks</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>28</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Mining rocks</h2>

<p>This simple scene shows how to create a custom UI.</p>

<p>This scene shows you:</p>

<li>How to create a UI canvas</li>

<li>How to add simple elements like text and rectangles to the UI</li>

<li>How to add images to the UI</li>

<li>How to trigger actions from clicking on UI elements</li>

<li>How to open and close the UI</li>

<li>How to display a bar in-world over an entity that is filled up gradually</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on a rock to mine it, a health bar will appear over the rock until it's fully mined. If the rock contained any valuable coins, a floating notification will appear over the rock.</p>

<p>You can open the UI at any moment. This displays the durability of your tool and all of the coins you have collected so far.</p>

<p>If your tool's durability runs out, you won't be able to mine any more.</p>

<p>Open the pop-up UI at any time by clicking the icon on the top-right corner. You can also open it by clicking on the cube that's in the center of the scene.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Example scene showing a UI</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Memory-game

# URL: https://github.com/decentraland-scenes/Memory-game

<title>GitHub - decentraland-scenes/Memory-game: A Simon Says game, with click interactions and sequenced actions. The game generates a random sequence of colors and you must click buttons to match those.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A Simon Says game, with click interactions and sequenced actions. The game generates a random sequence of colors and you must click buttons to match those.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Memory-game</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>20</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Memory game</h2>

<p>A Simon Says game, with click interactions and sequenced actions. The game generates a random sequence of colors and you must click buttons to match those.</p>

<p>This scene shows you:</p>

<li>How to change materials on a primitive shape</li>

<li>How to handle click events</li>

<li>How to use custom components to store custom data</li>

<li>How to use component groups to handle various entities</li>

<li>How to use a system to handle a game's rules and logic</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click the button in the center to start a game. Repeat the sequence of colors by clicking the colored panels. If you make a mistake, you must start again.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A Simon Says game, with click interactions and sequenced actions. The game generates a random sequence of colors and you must click buttons to match those.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/MANA-Transaction

# URL: https://github.com/decentraland-scenes/MANA-Transaction

<title>GitHub - decentraland-scenes/MANA-Transaction: Run a MANA transaction and receive MANA in Ropsten</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Run a MANA transaction and receive MANA in Ropsten</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/MANA-Transaction</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>19</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Mana transaction</h2>

<p>A simple scene that uses the MANA smart contract and the EthConnect library to send the user an amount of MANA on the Ropsten test network.</p>

<p>This scene shows you:</p>

<li>How to import a smart contract</li>

<li>How to use the Eth-Connect library to call functions on a smart contrct</li>

<p>Note: This scene uses the MANA contract as an example that can be applied to any other contract. If all you want to do is send a MANA, you might prefer to look at this simpler scene, that presents an easier way to achieve the same:</p>

<p>.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<p>, make it</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<strong>Scene Usage</strong>

<p>IMPORTANT: You can test this scene in Ropsten testnet to aviod paying real MANA and Ether for the gas fee. To do so, simply set your Metamask network from Mainnet to Ropsten and reload the scene.</p>

<p>Click on the cube to trigger a transaction. Metamask should then ask for your validation that you agree to the transaction. MANA is then sent to your account.</p>

<p>Learn more about how to use blockchain in your scenes in</p>

<p>in our docs site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Run a MANA transaction and receive MANA in Ropsten</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Paid-Button

# URL: https://github.com/decentraland-scenes/Paid-Button

<title>GitHub - decentraland-scenes/Paid-Button: A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks a button</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks a button</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Paid-Button</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Paid Button</h1>

<p>A simple scene that uses the</p>

<code>decentraland-crypto-utils</code>

<p>library to make a MANA payment when a player clicks a button.</p>

<p>This scene shows you:</p>

<li>How to use the crypto utils library</li>

<li>How to send a payment in MANA to a wallet</li>

<li>How to dealy an action itll a transaction for a payment in MANA is sent</li>

<li>How to handle async functions</li>

<li>How to define the elements of a scene as game objects, with state and functions</li>

<li>How to open a custom UI to display a confirmation prompt</li>

<li>How to make a UI component clickable and use it to trigger functions</li>

<p>The crypto Utils function makes it a lot simpler to perform blockchain functions. Sending MANA from one account to another just takes one line of code using this library.</p>

<p>Feel free to reuse the models and code from this scene!</p>

<p>Note: The crtpyo-utils library is currently a work in progress and has issues that need to be resolved. It's not yet published on npm, but you can copy what's been done in the</p>

<code>package.json</code>

<p>file of this repository.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<p>, make it</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Scene usage</h2>

<p>When clicking on the button, a UI screen will ask you to confirm the action. If confirmed, Metamask or your wallet of choice will prompt you to confirm the transaction. Once confirmed, the action that's linked to the lever is performed: the door will open.</p>

<p>You can test this scene in Ropsten testnet to aviod paying real MANA and Ether for the gas fee. To do so, simply set your Metamask network from Mainnet to Ropsten and reload the scene.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks a button</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/MANA-Burning-Altar

# URL: https://github.com/decentraland-scenes/MANA-Burning-Altar

<title>GitHub - decentraland-scenes/MANA-Burning-Altar: A scene where MANA from market transactions is burnt, displaying a particle-based fire</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene where MANA from market transactions is burnt, displaying a particle-based fire</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/MANA-Burning-Altar</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Mana transaction</h2>

<p>Fees collected from the Marketplace are stored in this Altar.</p>

<p>Anyone can burn the MANA collected by touching the Altar's stone

and light the flame, which will last 1 block for every 10 MANA burnt.</p>

<p>This scene shows you:</p>

<li>How to call functions from a smart contract</li>

<li>How to make a particle effect handling multiple entities</li>

<li>How to create custom components to store custom data about entities</li>

<li>How to use component groups to handle all entities that share the same components</li>

<li>How to create a system to update entity positions frame by frame</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<code>http://127.0.0.1:8000?position=0%2C0&SCENE_DEBUG_PANEL</code>

<p>, make it</p>

<code>http://127.0.0.1:8000?position=0%2C0&SCENE_DEBUG_PANEL&ENABLE_WEB3</code>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<p>IMPORTANT: You</p>

<strong>MUST</strong>

<p>be on mainnet for this in order to work</p>

<strong>Scene Usage</strong>

<p>The amount of mana that's ready to be burnt is displayed as a glowing blue column at the back of the altar. Click on the fire icon at the bottom to burn it. Metamask should then ask for your validation that you agree to the transaction.</p>

<p>This triggers the burning of these tokens. It also shows this by creating a fire as a particle system.</p>

<p>The fire keeps burning for the duration of one Ethereum block mining for every 10 MANA that was burnt. If someone enters the scene while the last fire is still burning, they will also see the fire.</p>

<p>Learn more about how to use blockchain in your scenes in</p>

<p>in our docs site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Demo Mode</h2>

<p>You can set the variable</p>

<code>DEMO_MODE</code>

<p>to</p>

<code>true</code>

<p>and the collected MANA will be 25,000 and you won't need to sign a transaction to push the burn button</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene where MANA from market transactions is burnt, displaying a particle-based fire</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/light-bounce-puzzle

# URL: https://github.com/decentraland-scenes/light-bounce-puzzle

<title>GitHub - decentraland-scenes/light-bounce-puzzle: Reflecting a ray off of multiple objects at arbitrary angles.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Reflecting a ray off of multiple objects at arbitrary angles.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/light-bounce-puzzle</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Light Bounce Puzzle</h1>

<em>demo of light-bounce-puzzle scene running in preview.</em>

<h2>Description</h2>

<p>The objective is to fire a single light ray that reflects off of all four floating rocks. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Use the</p>

<kbd>Left Mouse Button</kbd>

<p>to fire a light ray. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>lightningOrb.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Reflecting a ray off of multiple objects at arbitrary angles.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/item-pickup

# URL: https://github.com/decentraland-scenes/item-pickup

<title>GitHub - decentraland-scenes/item-pickup: Item pickup mechanic where each item has a different spawn time.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Item pickup mechanic where each item has a different spawn time.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/item-pickup</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>19</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Item Pickup</h1>

<em>demo of item-pickup scene running in preview.</em>

<h2>Description</h2>

<p>Item pickup mechanic where each item has a different spawn time. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Run over or stand over an item to pick it up. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>ammoPickup.mp3</em>

<li>modified from</li>

<em>armorPickup.mp3</em>

<li>modified from</li>

<em>medikitPickup.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Item pickup mechanic where each item has a different spawn time.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Hypno-wheels

# URL: https://github.com/decentraland-scenes/Hypno-wheels

<title>GitHub - decentraland-scenes/Hypno-wheels: This simple scene features a couple of wheels that you can spin by clicking them.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This simple scene features a couple of wheels that you can spin by clicking them.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Hypno-wheels</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Hypno wheels</h2>

<p>This simple scene features a couple of wheels that you can spin by clicking them.</p>

<p>Read the</p>

<p>about this scene</p>

<p>This scene shows you:</p>

<li>How to add 3D models</li>

<li>How to rotate an entity</li>

<li>How to handle click events</li>

<li>How to apply textures to primitive shapes</li>

<li>How to create custom components to store custom data</li>

<li>How to use systems to make gradual changes on every frame</li>

<li>How to use component groups to keep track of multiple entities</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click a wheel to make it spin. The more times you click it, the faster it spins.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>This simple scene features a couple of wheels that you can spin by clicking them.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Hummingbirds

# URL: https://github.com/decentraland-scenes/Hummingbirds

<title>GitHub - decentraland-scenes/Hummingbirds: A scene where hummingbirds spawn when you click a tree. Each bird moves on its own to random positions.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene where hummingbirds spawn when you click a tree. Each bird moves on its own to random positions.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Hummingbirds</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>29</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Hummingbird sample scene</h1>

<p>A scene where hummingbirds spawn when you click a tree. Each bird moves on its own to random positions.</p>

<p>This scene shows you:</p>

<li>How to call multiple animations in a 3D model</li>

<li>How to play animations on a 3D model without looping them</li>

<li>How to spawn new entities</li>

<li>How to build a system that randomly moves an entity around the scene</li>

<li>How to build a system that handles the movement of a changing number of entities</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the tree to make a bird appear and start flying randomly around the scene. Each time you click the tree, a new bird appears until a maximum number is reached.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene where hummingbirds spawn when you click a tree. Each bird moves on its own to random positions.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/grass-noise-example

# URL: https://github.com/decentraland-scenes/grass-noise-example

<title>GitHub - decentraland-scenes/grass-noise-example: Using the Noise Utils library to simulate random grass movement from wind</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using the Noise Utils library to simulate random grass movement from wind</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/grass-noise-example</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>grass-noise-example</h1>

<p>Using the Noise Utils library to simulate random grass movement from wind</p>

<p>This scene uses the</p>

<p>library to generate a semi-random sequence that uses a 3d version of the</p>

<em>Simplex</em>

<p>formula to change the rotation of grass over time.</p>

<p>The first two dimensions of the Simplex formula are mapped to the x and z coordinate of each grass entity, the thrid dimension of the Simplex formula is iterated over time to create movement.</p>

<p>The grass movement is random, but follows a smooth series of transitions that appear to move close grass entities together. The movement patterns are deterministic, but start from a random seed and don't have clear recognizeable repeating patterns.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the grass to start the movement. Each grass clump moves independently, following its own values from the Simplex random noise algorithm.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Using the Noise Utils library to simulate random grass movement from wind</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-noise-utils

# URL: https://github.com/decentraland/decentraland-noise-utils

<title>GitHub - decentraland/decentraland-noise-utils: Tools for generating semi-random noise based on the Perlin and Simplex algorithms, to simulate an organic kind of randomness.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Tools for generating semi-random noise based on the Perlin and Simplex algorithms, to simulate an organic kind of randomness.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-noise-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>12</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>38</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Noise Utils Library</h1>

<p>This library includes tools for generating semi-random noise based on the Perlin and Simplex algorithms. These are used to generate random sequences of values that have a similarity to the kind of randomness we see in nature. The result is not chaotic noise, but rather smooth curves that trend up and down randomly, and always keeping a fairly even balance.</p>

<h2>Background</h2>

<p>Both Simplex and Perlin Noise are algorithms that are commonly used in new-media art, games, and countless other applications to simulate a kind of randomness that seems natural, that transitions smoothly from one state to another.</p>

<p>Perlin Noise was developed in the 80s by Ken Perlin, then later in the early 2000s Ken Perlin himself also developed the Simplex Noise formula, which produces similar results but at less performance cost and with less artifacts. Aesthetic preference for one or the other is subjective, but in general Simplex is recommended for its lower performance cost.</p>

<p>Both algorithms are based on an n-dimensional grid of values. As we move along this grid in any of its dimensions, values slope up and down smoothly and randomly. We can choose to map these values to whatever we choose in our scenes to achieve a natural-looking kind of randomness. In this library, both algorithms have a 2 dimensional and a 3 dimensional version.</p>

<p>The results of these functions are not truly random, they follow a deterministic pattern. If you start from a fixed seed number, the results will always be the same. By default the library uses a random seed, which ensures that the result will be different every time and the formulas are designed to avoid any clear recognizable patterns.</p>

<h2>Using the Noise library</h2>

<p>To use any of the helpers provided by the noise library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl/noise-utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>Noise.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Simplex</h2>

<p>To use the 2d simplex formula, do</p>

<code>Noise.simplex2()</code>

<p>, to use the 3d simplex formula, do</p>

<code>Noise.simplex3()</code>

<p>.</p>

<p>The 2D version requires two parameters: an</p>

<em>x</em>

<p>and a</p>

<em>y</em>

<p>coordinate. The 3d version also requires a third parameter for th</p>

<em>z</em>

<p>coordinate.</p>

<p>The functions return a single value, that represents a point in the grid system of the algorithm, at the 2d or 3d coordinates indicated in the input parameters.</p>

<p>The following function lays down a grid of cubes at random heights, following a 2d simplex formula so that they are shaped into smooth slopes.</p>

<h2>Perlin</h2>

<p>To use the 2d Perlin formula, do</p>

<code>Noise.perlin2()</code>

<p>, to use the 3d Perlin formula, do</p>

<code>Noise.perlin3()</code>

<p>.</p>

<p>The 2D version requires two parameters: an</p>

<em>x</em>

<p>and a</p>

<em>y</em>

<p>coordinate. The 3d version also requires a third parameter for th</p>

<em>z</em>

<p>coordinate.</p>

<p>The functions return a single value, that represents a point in the grid system of the algorithm, at the 2d or 3d coordinates indicated in the input parameters.</p>

<p>The following function lays down a grid of cubes at random heights, following a 2d Perlin formula so that they are shaped into smooth slopes.</p>

<h2>Changes over time</h2>

<p>We can move over one of the dimensions of the grid system over time to mimic gradual random change.</p>

<p>The following example uses a 3d version of Perlin noise, using the first two dimensions for each position on the canvas, and the third dimension to changes over time.</p>

<h2>One dimensional noise</h2>

<p>This library provides formulas for 2d and 3d noise. In some cases you may want to alter values based on a single parameter (like for example time). In those cases, you can simply use a 2d version of a function, setting a fixed constant value for one of the arguments.</p>

<h2>Full example</h2>

<p>The following example uses a 3d simplex formula to map the heights of several cubes and move them up and down over time. The first two dimensions of the simplex formula relate to the gid positions of each cube, the third dimension advances over time to make these move like waves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>TIP: The speed of the passage of time can make a huge difference on how this effect looks. In this example we increment the time by</p>

<em>dt/4</em>

<p>on every frame, which is approximately</p>

<em>0.00833</em>

<p>(at 30 frames per second). Incrementing the value of the timer by</p>

<em>dt</em>

<p>felt too fast for the desired effect here. Incrementing</p>

<em>1</em>

<p>on every frame, it looked look chaotic, with no apparent relation between one frame and the next. We recommend you try different values till you find what looks right for what you're trying to achieve.</p>

<h2>Pre determined seeds</h2>

<p>By default, the Perlin and simplex noise formulas use a random seed number, so that the result is always different and unpredictable.</p>

<p>For these formulas to always produce the same results, initiate the</p>

<code>Noise</code>

<p>object with a specific seed value. Use</p>

<code>Noise.Init(seed)</code>

<p>, where</p>

<code>seed</code>

<p>is a value between 0 and 1, or between 1 and 65536. After calling the</p>

<code>Init</code>

<p>object with a seed value, you can call the simplex or Perlin functions freely, and their results will be deterministic based on the seed you passed.</p>

<p>This is especially useful to make sure the result looks the same for all players who are in the scene at the same time. Consistency may be important in some cases, for example if the floor level raises players up or down randomly, you want players to all see the elevation patterns match the positions of other players. If all players have initiated their</p>

<code>Noise</code>

<p>object with the same seed value, then passing the same parameters to the Perlin or simplex functions should return the same values on each.

.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/noise-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<p>Tools for generating semi-random noise based on the Perlin and Simplex algorithms, to simulate an organic kind of randomness.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-noise-utils-library

# Change to URL: https://github.com/decentraland-scenes/grab-objects

# URL: https://github.com/decentraland-scenes/grab-objects

<title>GitHub - decentraland-scenes/grab-objects: Demonstrates how you can grab and move an object.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Demonstrates how you can grab and move an object.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/grab-objects</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Grab Objects</h1>

<em>demo of grab-objects scene running in preview.</em>

<h2>Description</h2>

<p>Demonstrates how you can grab and move an object using the new</p>

<code>Attachable</code>

<p>feature. This is a simplified version of this scene</p>

<p>. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Get close to the crate before picking it up. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. The</p>

<kbd>E</kbd>

<p>key is used to pick up and put down the crate.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>pickUp.mp3</em>

<li>modified from</li>

<em>putDown.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Demonstrates how you can grab and move an object.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/grab-objects-advance

# URL: https://github.com/decentraland-scenes/grab-objects-advance

<title>GitHub - decentraland-scenes/grab-objects-advanced: Demonstrates how you can grab and move an object with physics.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Demonstrates how you can grab and move an object with physics.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/grab-objects-advanced</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Grab Objects Advanced</h1>

<em>demo of grab-objects-advanced scene running in preview.</em>

<h2>Description</h2>

<p>Demonstrates how you can grab and move an object using the</p>

<p>physics engine. This is the advanced version of this scene</p>

<p>. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<li>Use your mouse to look around and</li>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<li>keys on your keyboard to move forward, left, backward and right respectively.</li>

<li>To jump, press the</li>

<kbd>Space</kbd>

<li>key.</li>

<li>To grab the object, click and hold the</li>

<kbd>Left Mouse Button</kbd>

<li>.</li>

<li>Press and hold the</li>

<kbd>E</kbd>

<li>key to pull the object in.</li>

<h2>Issues</h2>

<p>There are a couple of issues that need looking at:</p>

<li>Object reorientates itself when you first pick it up.</li>

<li>Making large arcs/turns whilst holding the object can cause the object to go out of bounds.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>Code is adapted from</p>

<h2>About</h2>

<p>Demonstrates how you can grab and move an object with physics.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/grab-objects-advanced

# URL: https://github.com/decentraland-scenes/grab-objects-advanced

<title>GitHub - decentraland-scenes/grab-objects-advanced: Demonstrates how you can grab and move an object with physics.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Demonstrates how you can grab and move an object with physics.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/grab-objects-advanced</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Grab Objects Advanced</h1>

<em>demo of grab-objects-advanced scene running in preview.</em>

<h2>Description</h2>

<p>Demonstrates how you can grab and move an object using the</p>

<p>physics engine. This is the advanced version of this scene</p>

<p>. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<li>Use your mouse to look around and</li>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<li>keys on your keyboard to move forward, left, backward and right respectively.</li>

<li>To jump, press the</li>

<kbd>Space</kbd>

<li>key.</li>

<li>To grab the object, click and hold the</li>

<kbd>Left Mouse Button</kbd>

<li>.</li>

<li>Press and hold the</li>

<kbd>E</kbd>

<li>key to pull the object in.</li>

<h2>Issues</h2>

<p>There are a couple of issues that need looking at:</p>

<li>Object reorientates itself when you first pick it up.</li>

<li>Making large arcs/turns whilst holding the object can cause the object to go out of bounds.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>Code is adapted from</p>

<h2>About</h2>

<p>Demonstrates how you can grab and move an object with physics.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Gnark-patrol

# URL: https://github.com/decentraland-scenes/Gnark-patrol

<title>GitHub - decentraland-scenes/Gnark-patrol: A scene that shows a character walking along a fixed path, using lerp over each segment of the path. If you approach it, it will switch to yelling at you.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene that shows a character walking along a fixed path, using lerp over each segment of the path. If you approach it, it will switch to yelling at you.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Gnark-patrol</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>8</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>41</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Gnark patrolling</h2>

<p>A scene that shows a character walking along a fixed path, using lerp over each segment of the path. If you approach it, it will switch to yelling at you.</p>

<p>This scene shows you:</p>

<li>How to add 3D models to a scene and call their animations</li>

<li>How to use a system to make an NPC walk around a predetermined path</li>

<li>How to check the proximity of a player to an NPC and react</li>

<li>How to rotate an entity to face the player</li>

<li>How to create a custom component to store custom data</li>

<p>Read a tutorial blog post about this scene:</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Gnark walks in circles, patrolling his temple. If you approach him too much, he will face you and scream a battle cry!</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>3D models</h2>

<p>The 3D model for the character used in the scene is an asset courtesy of</p>

<p>. The model is not free to use, but with the coupon code</p>

<code>DecentralandKing</code>

<p>you can obtain it with a 100% discount on their site.</p>

<p>Other 3D models in this scene are developed by Decentraland's art team and free to use under the Apache 2 licence.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene that shows a character walking along a fixed path, using lerp over each segment of the path. If you approach it, it will switch to yelling at you.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/enemy-spawner

# URL: https://github.com/decentraland-scenes/enemy-spawner

<title>GitHub - decentraland-scenes/enemy-spawner: Spawning enemy spaceships from various shaped portals.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Spawning enemy spaceships from various shaped portals.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/enemy-spawner</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Enemy Spawner</h1>

<em>demo of enemy-spawner scene running in preview.</em>

<h2>Description</h2>

<p>Spawning enemy spaceships from portals, which come in a variety of shapes: circle, triangle and rectangle. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Press the</p>

<kbd>Space</kbd>

<p>key to jump and the</p>

<kbd>Left Mouse Button</kbd>

<p>to fire at an enemy spaceship.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>blaster.mp3</em>

<li>modified from</li>

<em>explosion.mp3</em>

<li>modified from</li>

<em>spawn.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Spawning enemy spaceships from various shaped portals.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Dance-floor

# URL: https://github.com/decentraland-scenes/Dance-floor

<title>GitHub - decentraland-scenes/Dance-floor: A scene with animations, sound, and tiles on the floor that randomly change color to the beat.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene with animations, sound, and tiles on the floor that randomly change color to the beat.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Dance-floor</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Dance floor</h1>

<p>A scene with animations, sound, and tiles on the floor that randomly change color to the beat.</p>

<p>This scene shows you:</p>

<li>How to play music</li>

<li>How to add a 3D model</li>

<li>How to play animations from a 3D model</li>

<li>How to change the materials on a primitive shape</li>

<li>How to handle synchronized changes of several entities through a system</li>

<li>How to create custom components</li>

<li>How to use component groups to manage multiple entities</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene with animations, sound, and tiles on the floor that randomly change color to the beat.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>9</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/cannon-example-scene

# URL: https://github.com/decentraland-scenes/cannon-example-scene

<title>GitHub - decentraland-scenes/cannon-example-scene: Using cannon.js to simulate several bouncing balls</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using cannon.js to simulate several bouncing balls</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/cannon-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Cannon Example Scene</h1>

<em>demo of cannon-example-scene running in preview.</em>

<h2>Description</h2>

<p>Simulating a bunch of balls bouncing using the</p>

<p>physics engine.</p>

<h2>Running the scene</h2>

<p>After you clone the project, run the following:</p>

<code>$ npm i -g decentraland</code>

<p>Followed by:</p>

<code>$ dcl start</code>

<p>Use the Left Mouse Button or 'E' or 'F' keys to interact with the balls.</p>

<h2>About</h2>

<p>Using cannon.js to simulate several bouncing balls</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Block-dog

# URL: https://github.com/decentraland-scenes/Block-dog

<title>GitHub - decentraland-scenes/Block-dog: A scene with a simple AI character that chooses its own actions and follows orders.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene with a simple AI character that chooses its own actions and follows orders.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Block-dog</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Block Dog</h1>

<p>A scene with a simple AI character. It randomly chooses what action to take: follow you, sit or remain idle. You can also tell it to sit or stand up by clicking it, or tell it to drink water by clicking its bowl.</p>

<p>This scene shows you:</p>

<li>How to handle multple animations on a 3D model</li>

<li>How to create a basic AI, giving an NPC a basic state-machine behavior</li>

<li>How to use randomness to determine autonomous behavior of a character</li>

<li>How to override random behaviour with specific commands</li>

<li>How to make an entity follow the player's position</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<li>The dog has autonomous behavior and randomly sits and stands up on its own.</li>

<li>If you click the dog, it switches from standing up to sitting down.</li>

<li>If you click the water bowl, it walks towards it and drinks.</li>

<li>If you step inside the bounds of the scene, the dog follows you and sits in front of you.</li>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene with a simple AI character that chooses its own actions and follows orders.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Auto-Dance-Area

# URL: https://github.com/decentraland-scenes/Auto-Dance-Area

<title>GitHub - decentraland-scenes/Auto-Dance-Area: Make players dance in a loop when they stand in certain areas of your scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Make players dance in a loop when they stand in certain areas of your scene</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Auto-Dance-Area</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Auto Dance Area</h1>

<h2>Description</h2>

<p>Make players dance in a loop when they stand in certain areas of your scene.

When players stand on either of the two checkered platforms, they'll start looping a dance animation.</p>

<h2>Instructions</h2>

<p>Open the</p>

<code>danceArea.ts</code>

<p>file. The first thing you'll find is the definition of</p>

<code>danceAreas</code>

<p>, an array with every danceArea definition in the scene. You can customize this to add more areas to this list, or change the size or position of these.</p>

<p>You can also change the</p>

<code>type</code>

<p>of the dance, the following options are available:</p>

<code>PredefinedEmote.ROBOT</code>

<code>PredefinedEmote.TIK</code>

<code>PredefinedEmote.TEKTONIK</code>

<code>PredefinedEmote.HAMMER</code>

<code>PredefinedEmote.HEAD_EXPLODDE</code>

<code>PredefinedEmote.HANDS_AIR</code>

<code>PredefinedEmote.DISCO</code>

<code>PredefinedEmote.DAB</code>

<code>"all"</code>

<p>Note: When passing the string value</p>

<code>"all"</code>

<p>, the auto-dance area will perform random dance animations.</p>

<p>Set the</p>

<code>DEBUG_FLAG</code>

<p>to true to view white cubes where each dance area is at. These are only visible if the scene is in preview mode, not once the scene is deployed.</p>

<p>The</p>

<code>DanceSystem</code>

<p>is active only while a player is inside one of the dance areas. This system loops over a counter that lasts 11 seconds (same length as all the default dance animations). It also sets button event listeners, to trigger the dance animation as soon as the player lets go of any of the movement keys. This is there because dance animations are otherwise interrupted every time the player walks.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>Make players dance in a loop when they stand in certain areas of your scene</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Donations-Box

# URL: https://github.com/decentraland-scenes/Donations-Box

<title>GitHub - decentraland-scenes/Donations-Box: A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks on a donations box</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks on a donations box</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Donations-Box</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Donations Box</h1>

<p>A simple scene that uses the</p>

<code>decentraland-crypto-utils</code>

<p>library to make a MANA payment when a player clicks on a donations box</p>

<p>This scene shows you:</p>

<li>How to use the crypto utils library</li>

<li>How to send a payment in MANA to a wallet</li>

<li>How to dealy an action itll a transaction for a payment in MANA is sent</li>

<li>How to handle async functions</li>

<li>How to define the elements of a scene as game objects, with state and functions</li>

<li>How to open a custom UI to display a confirmation prompt</li>

<li>How to make a UI component clickable and use it to trigger functions</li>

<li>How to include an input field in a UI, where players can write freely</li>

<p>The crypto Utils function makes it a lot simpler to perform blockchain functions. Sending MANA from one account to another just takes one line of code using this library.</p>

<p>Feel free to reuse the models and code from this scene!</p>

<p>Note: The crtpyo-utils library is currently a work in progress and has issues that need to be resolved. It's not yet published on npm, but you can copy what's been done in the</p>

<code>package.json</code>

<p>file of this repository.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<p>, make it</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Scene usage</h2>

<p>When clicking on the donations box, a UI screen opens asking you to confirm the action. You can go with the suggested donation ammount, or provide a different number in the input box. If confirmed, Metamask or your wallet of choice will prompt you to confirm the transaction. Once confirmed, the action that's linked to the lever is performed: the donations box performs an enticing animation.</p>

<p>You can test this scene in Ropsten testnet to aviod paying real MANA and Ether for the gas fee. To do so, simply set your Metamask network from Mainnet to Ropsten and reload the scene.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks on a donations box</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/avatar-swap

# URL: https://github.com/decentraland-scenes/avatar-swap

<title>GitHub - decentraland-scenes/avatar-swap: Swapping out the default avatar model for another character model.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Swapping out the default avatar model for another character model.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/avatar-swap</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Avatar Swap</h1>

<em>demo of avatar-swap scene running in preview.</em>

<h2>Description</h2>

<p>Using the new</p>

<code>AvatarModifiers</code>

<p>feature to swap out the default avatar for another character model. This way you can avoid breaking the immersiveness of the scene by making the player's character style match that of the enviroment's. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Run over to the area covered in grass to automatically switch avatars. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>Model and animations from</p>

<h2>About</h2>

<p>Swapping out the default avatar model for another character model.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/cube-spawner

# URL: https://github.com/decentraland-scenes/cube-spawner

<title>GitHub - decentraland-scenes/cube-spawner</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/cube-spawner</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland scene</h1>

<p>This folder contains all the necessary files to launch a Decentraland scene.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scene

# Change to URL: https://github.com/decentraland-scenes/coconut-shy

# URL: https://github.com/decentraland-scenes/coconut-shy

<title>GitHub - decentraland-scenes/coconut-shy: A coconut shy built using cannon.js physics engine.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A coconut shy built using cannon.js physics engine.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/coconut-shy</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Coconut Shy</h1>

<em>demo of coconut-shy scene running in preview.</em>

<h2>Description</h2>

<p>A coconut shy built using</p>

<p>physics engine. This scene demonstrates interactions between multiple dynamic objects. To view the scene, please visit</p>

<p>. Note: You can press the</p>

<kbd>P</kbd>

<p>key to adjust the graphics settings.</p>

<h2>Instructions</h2>

<p>Grab a ball using the</p>

<kbd>E</kbd>

<p>key, then use your mouse to aim in the direction you want to throw the ball. Press and hold the</p>

<kbd>Left Mouse Button</kbd>

<p>to trigger the 'power' meter to the bottom right of the screen, which controls how hard you throw the ball. To release the ball, let go of the</p>

<kbd>Left Mouse Button</kbd>

<p>as soon as the meter reaches your desired 'power' level. In terms of basic movement:</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Finally, pressing the</p>

<kbd>Space</kbd>

<p>key will make your avatar jump.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<li>All sound effects are from</li>

<h2>About</h2>

<p>A coconut shy built using cannon.js physics engine.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=6

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=6

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>nft_bazl gallery</p>

<p>One of Decentraland's public plazas, dedicated to gaming</p>

<p>The vegas plaza, located at -66,66 in Decentraland Genesis City</p>

<p>A meter that goes up based on the number of claps from players applauding in the scene.</p>

<p>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</p>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<p>Simple broadcasting websocket server</p>

<p>A multiplayer game for Decentraland Game Jam September 2020</p>

<p>An inflatable-punch-bag scene built using cannon.js physics engine.</p>

<p>A tin-can-alley scene built using cannon.js physics engine.</p>

<p>Arcade cabinets containing variations of the classic Breakout game.</p>

<p>Using CoinGecko's API to display the prices of Bitcoin, Ethereum and Mana.</p>

<p>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc, which allows a player to teleport to wherever the disc is located.</p>

<p>A simple party area with music streaming and video projections</p>

<p>Scene used in Halloween events for day 1 and 2</p>

<p>Cover as much of the ground as you can with paint.</p>

<p>Demonstrates how you can grab and move an object with physics.</p>

<p>Using box2d to create a bouncing ball</p>

<p>Displaying NFTs and information about them using a JSON file.</p>

<p>A static scene that includes animations that are built-into the 3D models</p>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. Itâs built around the basic âopen the doorâ example.</p>

<p>A Decentraland tutorial - learn how to make a game!</p>

<em>6</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/nft_bazl

# URL: https://github.com/decentraland-scenes/nft_bazl

<title>GitHub - decentraland-scenes/nft_bazl: nft_bazl gallery</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>nft_bazl gallery</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/nft_bazl</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>nft_bazl gallery</p>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/nft_bazl

# Change to URL: https://github.com/decentraland-scenes/Vegas-Plaza

# URL: https://github.com/decentraland-scenes/Vegas-Plaza

<title>GitHub - decentraland-scenes/Vegas-Plaza: The vegas plaza, located at -66,66 in Decentraland Genesis City</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>The vegas plaza, located at -66,66 in Decentraland Genesis City</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Vegas-Plaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>The vegas plaza, located at -66,66 in Decentraland Genesis City</p>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/clap-meter

# URL: https://github.com/decentraland-scenes/clap-meter

<title>GitHub - decentraland-scenes/clap-meter: A meter that goes up based on the number of claps from players applauding in the scene.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A meter that goes up based on the number of claps from players applauding in the scene.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/clap-meter</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Clap Meter</h1>

<em>demo of clap-meter scene running in preview.</em>

<h2>Description</h2>

<p>A meter that goes up based on the number of claps from players applauding in the scene. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>The scene checks whether you're in first person or third person view - for the best experience, you should switch to the third person view by pressing the</p>

<kbd>V</kbd>

<p>key. To move the needle on the meter just clap by pressing the number</p>

<kbd>5</kbd>

<p>key - keep pressing</p>

<kbd>5</kbd>

<p>to push it further to the right. Once you stop clapping, the needle will also stop moving and will even start moving towards the left again after a short cooldown period.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>A meter that goes up based on the number of claps from players applauding in the scene.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/key-binding

# URL: https://github.com/decentraland-scenes/key-binding

<title>GitHub - decentraland-scenes/key-binding: Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/key-binding</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>15</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Key Binding</h1>

<em>demo of key binding scene running in preview.</em>

<h2>Description</h2>

<p>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<li>Use your mouse to look around and</li>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<li>keys on your keyboard to move forward, left, backward and right respectively</li>

<li>To jump, press the</li>

<kbd>Space</kbd>

<li>key</li>

<li>To place paint onto the ground, use the</li>

<kbd>Left Mouse Button</kbd>

<li>Use the number keys</li>

<kbd>1</kbd>

<li>to</li>

<kbd>7</kbd>

<li>to switch between the various paint colors</li>

<li>Use the</li>

<kbd>E</kbd>

<li>key to switch to the next paint color</li>

<li>Use the</li>

<kbd>F</kbd>

<li>key to switch to the previous paint color</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<em>splat.mp3</em>

<li>modified from</li>

<em>switch.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Space-Traitor

# URL: https://github.com/decentraland-scenes/Space-Traitor

<title>GitHub - decentraland-scenes/Space-Traitor: A multiplayer game for Decentraland Game Jam September 2020</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A multiplayer game for Decentraland Game Jam September 2020</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Space-Traitor</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>103</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Space Traitor</h1>

<p>This is a multiplayer game about deceiving and guessing other player's identities. It takes plenty of inspiration from Among Us, but brings similar mechanics into a 3d medium.</p>

<p>At least 3 (or better 4) players must ring the bell of the space station, then the game starts.</p>

<p>A traitor is picked randomly, that player will secretly play against the others.</p>

<p>This scene is built using Colyseus as an authoritative server, syncing all changes to players via Websockets.</p>

<h1>Instructions</h1>

<h3>Play online</h3>

<li>In decentraland, deployed at:</li>

<h3>Run locally</h3>

<li>open a console on the</li>

<code>server</code>

<li>folder</li>

<li>run</li>

<code>npm run build</code>

<li>, then</li>

<code>npm run start</code>

<li>in server's folder</li>

<li>open another console in the</li>

<code>scene</code>

<li>folder</li>

<li>run</li>

<code>dcl start</code>

<li>open 3 tabs at "</li>

<li>", click on the button by the door to register as a player</li>

<li>the traitor will be notified</li>

<h3>Test the scene as 1 player</h3>

<p>To be able to test the scene as 1 person you can choose the "F" option twice during the button dialogue.</p>

<h3>Game mechanics</h3>

<p>Once at least 3 players have accepted the game, a countdown will start. During this countdown, other players can join, otherwise the game begins.</p>

<p>Once the game begins, one of the players is selected at random to be the traitor, this player is given instructions to act secretively.</p>

<p>A 5 minute countdown starts, non-traitor players hav to fix 8 machines before this countdown ends, otherwise the traitor wins. The machines are fixed by playing a randomly selected UI mini-game. Some equipment might randomly break over time too.</p>

<p>The traitor can also sabotage fuse boxes by cutting cables. By cutting all cables in a fusebox, the time for solving the game gets reduced significantly, favoring the traitor.</p>

<p>At any moment during the game, anyone can hit the vote button on the main hall and start a voting round. All players left alive must vote for someone to be kicked out. If the traitor is kicked out, other players win.</p>

<p>That's why the traitor must act discretely, as cutting wires out in the open will alert them of who he is and vote him out. The game is designed to make everyone doubt each other and suspicions to fly all over the place.</p>

<h2>Using Colyseus SDK with Decentraland</h2>

<p>Install</p>

<code>colyseus.js</code>

<p>:</p>

<code>npm install --save colyseus.js</code>

<p>Add</p>

<code>colyseus.js</code>

<p>to your</p>

<code>"bundleDependencies"</code>

<p>in your</p>

<code>package.json</code>

<p>:</p>

<pre>: [</pre>

<pre>]</pre>

<p>To avoid TypeScript compilation errors you'll need to edit</p>

<code>tsconfig.json</code>

<p>, and include a few</p>

<code>///<reference</code>

<p>to your source-code, as you can see in the</p>

<p>file.</p>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<p>The Colyseus SDK requires a few TypeScript libraries that are excluded by default by Decentraland.</p>

<h2>Creating a Colyseus server:</h2>

<code>npm init colyseus-app ./server</code>

<h2>Deploying to</h2>

<code>npm run build</code>

<p>Upload the</p>

<code>lib</code>

<p>folder from the Arena control panel.</p>

<h2>More</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A multiplayer game for Decentraland Game Jam September 2020</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/inflatable-punch-bag

# URL: https://github.com/decentraland-scenes/inflatable-punch-bag

<title>GitHub - decentraland-scenes/inflatable-punch-bag: An inflatable-punch-bag scene built using cannon.js physics engine.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>An inflatable-punch-bag scene built using cannon.js physics engine.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/inflatable-punch-bag</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Inflatable punch bag</h1>

<em>demo of inflatable-punch-bag scene running in preview.</em>

<h2>Description</h2>

<p>An inflatable-punch-bag scene built using</p>

<p>physics engine. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>You can hit the bag from any direction and the bag will swing back and forth until it settles back into its original position. To punch the bag just walk up to it and press the</p>

<kbd>Left Mouse Button</kbd>

<p>,</p>

<kbd>E</kbd>

<p>or</p>

<kbd>R</kbd>

<p>key. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Finally, pressing the</p>

<kbd>Space</kbd>

<p>key will make your avatar jump.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>An inflatable-punch-bag scene built using cannon.js physics engine.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/tin-can-alley

# URL: https://github.com/decentraland-scenes/tin-can-alley

<title>GitHub - decentraland-scenes/tin-can-alley: A tin-can-alley scene built using cannon.js physics engine.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A tin-can-alley scene built using cannon.js physics engine.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/tin-can-alley</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Tin Can Alley</h1>

<em>demo of tin-can-alley scene running in preview.</em>

<h2>Description</h2>

<p>A tin-can-alley scene built using</p>

<p>physics engine. This scene demonstrates interactions between multiple dynamic objects. To view the scene, please visit</p>

<p>. Note: You can press the</p>

<kbd>P</kbd>

<p>key to adjust the graphics settings.</p>

<h2>Instructions</h2>

<p>Use your mouse to aim in the rifle and press the</p>

<kbd>Left Mouse Button</kbd>

<p>to shoot at the cans. In terms of basic movement:</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Finally, pressing the</p>

<kbd>Space</kbd>

<p>key will make your avatar jump.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>The following files were taken from</p>

<p>:</p>

<em>can01.mp3</em>

<li>to</li>

<em>can03.mp3</em>

<li>are modified from</li>

<em>shotSilencer.mp3</em>

<li>modified from</li>

<em>shotTin.mp3</em>

<li>modified from</li>

<em>shotWood.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A tin-can-alley scene built using cannon.js physics engine.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/atari-arcade-cabinets

# URL: https://github.com/decentraland-scenes/atari-arcade-cabinets

<title>GitHub - decentraland-scenes/atari-arcade-cabinets: Arcade cabinets containing variations of the classic Breakout game.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Arcade cabinets containing variations of the classic Breakout game.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/atari-arcade-cabinets</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Atari Arcade Cabinets</h1>

<em>demo of atari-arcade-cabinets scene running in preview.</em>

<h2>Description</h2>

<p>Arcade cabinets containing variations of the classic Breakout game developed and published by Atari, Inc. where the player takes control of a paddle with the aim of breaking down a wall of bricks by ricocheting a ball against them. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. Walk right up to one of the arcade cabinets to start playing -</p>

<kbd>Left Mouse Button</kbd>

<p>to serve the ball,</p>

<kbd>E</kbd>

<p>and</p>

<kbd>F</kbd>

<p>to move the paddle left and right.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>Arcade cabinets containing variations of the classic Breakout game.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/coingecko-price-tracker

# URL: https://github.com/decentraland-scenes/coingecko-price-tracker

<title>GitHub - decentraland-scenes/coingecko-price-tracker: Using CoinGecko's API to display the prices of Bitcoin, Ethereum and Mana.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using CoinGecko's API to display the prices of Bitcoin, Ethereum and Mana.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/coingecko-price-tracker</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>CoinGecko Price Tracker</h1>

<em>screenshot of coingecko-price-tracker scene running in preview.</em>

<h2>Description</h2>

<p>Using CoinGecko's API to display the prices of Bitcoin, Ethereum and Mana. To view the scene, please visit</p>

<p>.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>Using CoinGecko's API to display the prices of Bitcoin, Ethereum and Mana.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/translocator

# URL: https://github.com/decentraland-scenes/translocator

<title>GitHub - decentraland-scenes/translocator: Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc, which allows a player to teleport to wherever the disc is located.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc, which allows a player to teleport to wherever the disc is located.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/translocator</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Translocator</h1>

<em>demo of translocator scene running in preview.</em>

<h2>Description</h2>

<p>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc, which allows a player to teleport to wherever the disc is located. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Press the</p>

<kbd>Left Mouse Button</kbd>

<p>to fire the translocator disc and press again to recall. Press the</p>

<kbd>E</kbd>

<p>key to teleport to the location of the disc. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>Sounds are taken from</p>

<h2>About</h2>

<p>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc, which allows a player to teleport to wherever the disc is located.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/gamerDistrictPartyArea

# URL: https://github.com/decentraland-scenes/gamerDistrictPartyArea

<title>GitHub - decentraland-scenes/gamerDistrictPartyArea: A simple party area with music streaming and video projections</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple party area with music streaming and video projections</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/gamerDistrictPartyArea</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>A simple party area with music streaming and video projections</p>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/cemetery2020

# URL: https://github.com/decentraland-scenes/cemetery2020

<title>GitHub - decentraland-scenes/cemetery2020: Scene used in Halloween events for day 1 and 2</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Scene used in Halloween events for day 1 and 2</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/cemetery2020</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Scene used in Halloween events for day 1 and 2</p>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/temple-trouble

# Change to URL: https://github.com/decentraland-scenes/pumpkin-problem

# URL: https://github.com/decentraland-scenes/pumpkin-problem

<title>GitHub - decentraland-scenes/pumpkin-problem</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/pumpkin-problem</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/splat-attack

# URL: https://github.com/decentraland-scenes/splat-attack

<title>GitHub - decentraland-scenes/splat-attack: Cover as much of the ground as you can with paint.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Cover as much of the ground as you can with paint.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/splat-attack</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Splat Attack</h1>

<em>demo of splat-attack scene running in preview.</em>

<h2>Description</h2>

<p>The objective is to cover as much of the ground as you can with paint. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<li>Use your mouse to look around and</li>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<li>keys on your keyboard to move forward, left, backward and right respectively.</li>

<li>To jump, press the</li>

<kbd>Space</kbd>

<li>key.</li>

<li>To fire paint onto the ground, use the</li>

<kbd>Left Mouse Button</kbd>

<li>.</li>

<li>To calculate the approximate area covered by the paint, press the</li>

<kbd>E</kbd>

<li>key.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<p>Adapted from the grid sampling solution version 4 to the total circles area problem found</p>

<p>.</p>

<p>The following files were taken from</p>

<p>:</p>

<em>splat.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>Cover as much of the ground as you can with paint.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/cannon-car-example-scene

# URL: https://github.com/decentraland-scenes/cannon-car-example-scene

<title>GitHub - decentraland-scenes/cannon-car-example-scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/cannon-car-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Cannon Car Example Scene</h1>

<em>demo of cannon-car-example-scene running in preview.</em>

<h2>Description</h2>

<p>Using raycast vehicle from the</p>

<p>physics engine. You can find the original code that this was based on</p>

<p>.</p>

<h2>Running the scene</h2>

<p>After you clone the project, run the following:</p>

<code>$ npm i -g decentraland</code>

<p>Followed by:</p>

<code>$ dcl start</code>

<li>Left Mouse Button to accelerate</li>

<li>Press E Key to turn left</li>

<li>Press F Key to turn right</li>

<li>Press E and F Keys together to brake</li>

<h2>About</h2>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/discordWebsocket

# URL: https://github.com/decentraland-scenes/discordWebsocket

<title>GitHub - decentraland-scenes/discordWebsocket</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/discordWebsocket</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Discord chat to Decentraland</h1>

<p>This scene shows you:</p>

<li>How to build a WebSockets server to communicate with a scene</li>

<li>How to connect a Decentraland scene to a WebSockets server</li>

<li>How to link the server to the Discord API, where the Decentraland community has its discussions</li>

<li>How to display text in a scene</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Launch the server</strong>

<p>Navigate to the</p>

<code>/server</code>

<p>directory and run</p>

<pre>npm run start</pre>

<p>The server will be launched locally and will start listening for requests.</p>

<strong>Previewing the scene</strong>

<p>On a separate command line window, avigate to the</p>

<code>/scene</code>

<p>directory, then run:</p>

<pre>dcl start</pre>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/discord-chat-to-decentraland

# Change to URL: https://github.com/decentraland-scenes/box2d-ball-example-scene

# URL: https://github.com/decentraland-scenes/box2d-ball-example-scene

<title>GitHub - decentraland-scenes/box2d-ball-example-scene: Using box2d to create a bouncing ball</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using box2d to create a bouncing ball</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/box2d-ball-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Box2D Ball Example Scene</h1>

<em>demo of box2d-ball-example-scene running in preview.</em>

<h2>Description</h2>

<p>Simulating a bouncing ball using the</p>

<p>physics engine.</p>

<h2>Running the scene</h2>

<p>After you clone the project, run the following:</p>

<code>$ npm i -g decentraland</code>

<p>Followed by:</p>

<code>$ dcl start</code>

<h2>About</h2>

<p>Using box2d to create a bouncing ball</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/nft-wall-example-scene

# URL: https://github.com/decentraland-scenes/nft-wall-example-scene

<title>GitHub - decentraland-scenes/nft-wall-example-scene: Displaying NFTs and information about them using a JSON file.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Displaying NFTs and information about them using a JSON file.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/nft-wall-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NFT Wall Example Scene</h1>

<p>Displaying NFTs and information about them using a JSON file. The NFTs also swap out after several seconds.</p>

<em>demo of nft-wall-example-scene running in preview.</em>

<p>This scene shows you:</p>

<li>How to display NFTs in picture frames</li>

<li>How to lay out the picture frames based on data from a JSON file</li>

<li>How to open a custom UI</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the NFT art to open a UI with additional info.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Displaying NFTs and information about them using a JSON file.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>12</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/the-munastery

# URL: https://github.com/decentraland-scenes/the-munastery

<title>GitHub - decentraland-scenes/the-munastery: A static scene that includes animations that are built-into the 3D models</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A static scene that includes animations that are built-into the 3D models</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/the-munastery</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Muna Temple</h1>

<p>A simple static scene that just displays 3D models. The 3D models include animations to move the butterflies, flames, etc.</p>

<p>This scene shows you:</p>

<li>How to add 3D models to a scene</li>

<li>How to add multiple parcels to a scene</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A static scene that includes animations that are built-into the 3D models</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Remote-door

# URL: https://github.com/decentraland-scenes/Remote-door

<title>GitHub - decentraland-scenes/Remote-door: A scene that uses a server and a REST API to sync a scene state amongst multiple users. Itâs built around the basic âopen the doorâ example.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. Itâs built around the basic âopen the doorâ example.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Remote-door</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>15</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Remote server door</h1>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. Itâs built around the basic âopen the doorâ example.</p>

<li>Create a REST server</li>

<li>Call REST API</li>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command</p>

<pre>npm i -g decentraland</pre>

<p>For a more details, follow the steps in the</p>

<p>.</p>

<strong>Previewing the scene</strong>

<p>Once you've installed the CLI, download this example and navigate to its directory from your terminal or command prompt.</p>

<h4>Run the REST server</h4>

<p>(In another terminal window)</p>

<pre>server</pre>

<pre>npm i</pre>

<pre>npm run build</pre>

<pre>npm start</pre>

<h4>Run the scene preview</h4>

<pre>scene</pre>

<pre>dcl start</pre>

<p>Open multiple browser tabs by copying the preview URL. Interact with the door on one tab to see that it also changes on other tabs as well.</p>

<p>Any dependencies are installed and then the CLI will open the scene in a new browser tab automatically.</p>

<strong>Usage</strong>

<p>Click on the door to open or close it. Other users should see the door change state as well.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. Itâs built around the basic âopen the doorâ example.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/dcl-escape-room-tutorial

# URL: https://github.com/decentraland-scenes/dcl-escape-room-tutorial

<title>GitHub - decentraland-scenes/dcl-escape-room-tutorial: A Decentraland tutorial - learn how to make a game!</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A Decentraland tutorial - learn how to make a game!</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-escape-room-tutorial</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>152</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL-Escape-Room-Tutorial</h1>

<p>A Decentraland tutorial - learn how to make a game!</p>

<p>Check out the</p>

<p>!</p>

<h2>About</h2>

<p>A Decentraland tutorial - learn how to make a game!</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>25</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Escape-Room

# URL: https://github.com/decentraland-scenes/Escape-Room

<title>GitHub - decentraland-scenes/Escape-Room</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Escape-Room</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>60</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>A fully fledged game, based on the popular game 2048.</p>

<p>port of</p>

<p>colyseus-sdk7</p>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<p>Basic 101 Avocado Tutorial</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=2&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=2&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A zombie will chase you around and attack you once it gets near.</p>

<p>Crypto Valley art gallery</p>

<p>This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the Show Management Library</p>

<p>Signed fetch base implementation</p>

<p>The full Soho Plaza in Genesis City</p>

<p>Dressable AvatarShape scene where the user can flip through several wearables and outfits on a mannequin</p>

<p>Decentraland Foundation HQ Building</p>

<p>A puffer fish that inflates and deflates when clicked. This scene uses the Utils library.</p>

<p>A cutting edge racing game</p>

<p>A simple scene showing how to create a leader board for high scores</p>

<p>Sign a guestbook. User names are stored in a RESFful API, whic is also included in this repo.</p>

<p>A musical sequencer based on dragging stones into position</p>

<p>Tutorial for multiplayer with Colyseus</p>

<p>Route OSC messages to Decentraland scenes, via Colyseus</p>

<p>A multiplayer game with websockets</p>

<p>A simple scene with an interactive booth that gives out POAP tokens to certify the player's attendance to an event</p>

<em>2</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=1&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=1&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>A fully fledged game, based on the popular game 2048.</p>

<p>port of</p>

<p>colyseus-sdk7</p>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<p>Basic 101 Avocado Tutorial</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=3&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=3&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A portable experience to paint graffitti on a layer only visible to those wearing the wearable</p>

<p>Assets and code used for the Metaverse Festival 2022 Main Stage Scene</p>

<p>Assets and code used for the Metaverse Festival 2022 Tower of Babel Scene</p>

<p>Stress test the SDK with many entities updating every frame</p>

<p>A simpe example scene that uses quests</p>

<p>Medieval Plaza in Decentraland</p>

<p>crypto valley convention center</p>

<p>Optimized scene that only loads certain entites when the player approaches them</p>

<p>A project that shows how to use workspaces to run multiple scenes + smart wearables together</p>

<p>Grant admin players special abilities in a scene, like kicking other players out</p>

<p>A minimal scene that shows all the basic ways a player can interact with a scene.</p>

<p>Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</p>

<p>A simple generic virtual museum for displaying NFT art</p>

<p>A basic generic virtual store for wearables and other tokens</p>

<p>Test scene to verify a bug with UVs</p>

<p>Asian Plaza in Decentraland</p>

<p>Forst plaza</p>

<p>messageBus-tuto</p>

<p>An example scene that handles quests</p>

<p>Trams public transport system</p>

<p>A fully-fledged game where a random 2d path is generated along which enemies walk, and where traps are randomly placed. You need to activate the traps as the enemies advance along the path to kill them. Itâs all about timing.</p>

<p>A scene where birds fly up in the air based on their relative distance to the player.</p>

<p>Tool that helps you project a large video stretching over many smaller screens</p>

<p>Decentraland's first 24/7 night club</p>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<em>3</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=4&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=4&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</p>

<p>A shop to sell wearables in-world connecting to the Decentraland Marketplace</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player activates a lever</p>

<p>A particle system to create smoke</p>

<p>A basic scene that uses a WebSockets server to sync changes between players.</p>

<p>A multiplayer scene that uses a websockets server to sync the position of a frisbee as it's thrown between players</p>

<p>Combine Websockets and Physics to share data about bouncing balls between players. All of the logic is carried out client side. The server just passes on data.</p>

<p>Display the frames of a 2D animation from a spritesheet</p>

<p>A voxel art creator.</p>

<p>Coin pickup mechanic where the player moves over the coins to collect them.</p>

<p>A platform that moves when the player stands on one of the switches.</p>

<p>A flying rocket board that you can take anywhere</p>

<p>A shark moves along a curve, smoothly rotating and varying its speed depending on steepness</p>

<p>Monitor currnet realm + island, and how many other players are connected around you</p>

<p>Test raycasts across portable expereinces and scenes</p>

<p>A smart wearable that works as a radio you can carry with you to hear music anywhere in Decentraland</p>

<p>A Portal-ble experience to let you teleport anywhere around Decentraland instantly</p>

<p>A simple scarvenger hunt where you need to look for some landmarks in limited time</p>

<p>A simple interactive scene with a two-sided door that can be opened by clicking.</p>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. You can paint pixels in a mural that other users can see. The colors of each pixel are stored in a remote server.</p>

<p>Gun game mechanic along with bullet marks that appear at whatever angle the bullet strikes the target.</p>

<p>Basic gun game mechanic along with bullet marks and pop up scores.</p>

<p>This simple scene shows how to add animations to a `GLTFComponent` and handle click events.</p>

<p>A simple platformer that demonstrates rotating various platforms using code.</p>

<p>A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</p>

<p>Based on the classic Sokoban puzzle game where you push statues onto marked spots.</p>

<p>Using simple planes to create a force field effect that blocks the player from reaching the access card.</p>

<p>Using the new spawn feature to recreate a simple Portal clone.</p>

<p>A piano floor where you walk on the keys to play.</p>

<em>4</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=5&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=5&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Use a time API to get the current time and start a party</p>

<p>A simple interactive scene with a door that can be opened and closed.</p>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<p>A simple mural scene.</p>

<p>A puzzle game where you reflect a beam of light to a target using a series of mirrors.</p>

<p>Example scene showing a UI</p>

<p>A Simon Says game, with click interactions and sequenced actions. The game generates a random sequence of colors and you must click buttons to match those.</p>

<p>Run a MANA transaction and receive MANA in Ropsten</p>

<p>A scene where MANA from market transactions is burnt, displaying a particle-based fire</p>

<p>Reflecting a ray off of multiple objects at arbitrary angles.</p>

<p>Item pickup mechanic where each item has a different spawn time.</p>

<p>This simple scene features a couple of wheels that you can spin by clicking them.</p>

<p>A scene where hummingbirds spawn when you click a tree. Each bird moves on its own to random positions.</p>

<p>Using the Noise Utils library to simulate random grass movement from wind</p>

<p>Demonstrates how you can grab and move an object.</p>

<p>A scene that shows a character walking along a fixed path, using lerp over each segment of the path. If you approach it, it will switch to yelling at you.</p>

<p>A cube-based fountain that works on Soho Plaza. It includes P2P sync and handling of multiple animations per model.</p>

<p>Call the Decentraland Events API to display events that are currently going on</p>

<p>Spawning enemy spaceships from various shaped portals.</p>

<p>A scene with animations, sound, and tiles on the floor that randomly change color to the beat.</p>

<p>Displays an NFT taken from a contract address</p>

<p>Using cannon.js to simulate several bouncing balls</p>

<p>A scene with a simple AI character that chooses its own actions and follows orders.</p>

<p>Make players dance in a loop when they stand in certain areas of your scene</p>

<p>A simple scene that shows how to fetch player wearable data to match against a criteria. In this case, only players wearing eyewear are allowed in.</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks on a donations box</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks a button</p>

<p>Swapping out the default avatar model for another character model.</p>

<p>A coconut shy built using cannon.js physics engine.</p>

<em>5</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=6&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=6&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>nft_bazl gallery</p>

<p>One of Decentraland's public plazas, dedicated to gaming</p>

<p>The vegas plaza, located at -66,66 in Decentraland Genesis City</p>

<p>A meter that goes up based on the number of claps from players applauding in the scene.</p>

<p>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</p>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<p>Simple broadcasting websocket server</p>

<p>A multiplayer game for Decentraland Game Jam September 2020</p>

<p>An inflatable-punch-bag scene built using cannon.js physics engine.</p>

<p>A tin-can-alley scene built using cannon.js physics engine.</p>

<p>Arcade cabinets containing variations of the classic Breakout game.</p>

<p>Using CoinGecko's API to display the prices of Bitcoin, Ethereum and Mana.</p>

<p>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc, which allows a player to teleport to wherever the disc is located.</p>

<p>A simple party area with music streaming and video projections</p>

<p>Scene used in Halloween events for day 1 and 2</p>

<p>Cover as much of the ground as you can with paint.</p>

<p>Demonstrates how you can grab and move an object with physics.</p>

<p>Using box2d to create a bouncing ball</p>

<p>Displaying NFTs and information about them using a JSON file.</p>

<p>A static scene that includes animations that are built-into the 3D models</p>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. Itâs built around the basic âopen the doorâ example.</p>

<p>A Decentraland tutorial - learn how to make a game!</p>

<em>6</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>167</strong>

<strong>all</strong>

<strong>TypeScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>A fully fledged game, based on the popular game 2048.</p>

<p>port of</p>

<p>colyseus-sdk7</p>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<p>Basic 101 Avocado Tutorial</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=2&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=2&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>167</strong>

<strong>all</strong>

<strong>TypeScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>A zombie will chase you around and attack you once it gets near.</p>

<p>Crypto Valley art gallery</p>

<p>This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the Show Management Library</p>

<p>Signed fetch base implementation</p>

<p>The full Soho Plaza in Genesis City</p>

<p>Dressable AvatarShape scene where the user can flip through several wearables and outfits on a mannequin</p>

<p>Decentraland Foundation HQ Building</p>

<p>A puffer fish that inflates and deflates when clicked. This scene uses the Utils library.</p>

<p>A cutting edge racing game</p>

<p>A simple scene showing how to create a leader board for high scores</p>

<p>Sign a guestbook. User names are stored in a RESFful API, whic is also included in this repo.</p>

<p>A musical sequencer based on dragging stones into position</p>

<p>Tutorial for multiplayer with Colyseus</p>

<p>A multiplayer game with websockets</p>

<p>A simple scene with an interactive booth that gives out POAP tokens to certify the player's attendance to an event</p>

<p>A portable experience to paint graffitti on a layer only visible to those wearing the wearable</p>

<p>Assets and code used for the Metaverse Festival 2022 Main Stage Scene</p>

<p>Assets and code used for the Metaverse Festival 2022 Tower of Babel Scene</p>

<em>2</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=1&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=1&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>167</strong>

<strong>all</strong>

<strong>TypeScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>A fully fledged game, based on the popular game 2048.</p>

<p>port of</p>

<p>colyseus-sdk7</p>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<p>Basic 101 Avocado Tutorial</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=3&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=3&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>167</strong>

<strong>all</strong>

<strong>TypeScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>Stress test the SDK with many entities updating every frame</p>

<p>A simpe example scene that uses quests</p>

<p>Medieval Plaza in Decentraland</p>

<p>crypto valley convention center</p>

<p>Optimized scene that only loads certain entites when the player approaches them</p>

<p>A project that shows how to use workspaces to run multiple scenes + smart wearables together</p>

<p>Grant admin players special abilities in a scene, like kicking other players out</p>

<p>A minimal scene that shows all the basic ways a player can interact with a scene.</p>

<p>Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</p>

<p>A simple generic virtual museum for displaying NFT art</p>

<p>A basic generic virtual store for wearables and other tokens</p>

<p>Test scene to verify a bug with UVs</p>

<p>Asian Plaza in Decentraland</p>

<p>Forst plaza</p>

<p>messageBus-tuto</p>

<p>An example scene that handles quests</p>

<p>A fully-fledged game where a random 2d path is generated along which enemies walk, and where traps are randomly placed. You need to activate the traps as the enemies advance along the path to kill them. Itâs all about timing.</p>

<p>A scene where birds fly up in the air based on their relative distance to the player.</p>

<p>Tool that helps you project a large video stretching over many smaller screens</p>

<p>Decentraland's first 24/7 night club</p>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<p>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</p>

<p>A shop to sell wearables in-world connecting to the Decentraland Marketplace</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player activates a lever</p>

<p>A particle system to create smoke</p>

<p>A basic scene that uses a WebSockets server to sync changes between players.</p>

<p>Combine Websockets and Physics to share data about bouncing balls between players. All of the logic is carried out client side. The server just passes on data.</p>

<em>3</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=4&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=4&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>167</strong>

<strong>all</strong>

<strong>TypeScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>Display the frames of a 2D animation from a spritesheet</p>

<p>A voxel art creator.</p>

<p>Coin pickup mechanic where the player moves over the coins to collect them.</p>

<p>A platform that moves when the player stands on one of the switches.</p>

<p>A flying rocket board that you can take anywhere</p>

<p>A shark moves along a curve, smoothly rotating and varying its speed depending on steepness</p>

<p>Monitor currnet realm + island, and how many other players are connected around you</p>

<p>Test raycasts across portable expereinces and scenes</p>

<p>A smart wearable that works as a radio you can carry with you to hear music anywhere in Decentraland</p>

<p>A Portal-ble experience to let you teleport anywhere around Decentraland instantly</p>

<p>A simple scarvenger hunt where you need to look for some landmarks in limited time</p>

<p>A simple interactive scene with a two-sided door that can be opened by clicking.</p>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. You can paint pixels in a mural that other users can see. The colors of each pixel are stored in a remote server.</p>

<p>Gun game mechanic along with bullet marks that appear at whatever angle the bullet strikes the target.</p>

<p>Basic gun game mechanic along with bullet marks and pop up scores.</p>

<p>This simple scene shows how to add animations to a `GLTFComponent` and handle click events.</p>

<p>A simple platformer that demonstrates rotating various platforms using code.</p>

<p>A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</p>

<p>Based on the classic Sokoban puzzle game where you push statues onto marked spots.</p>

<p>Using simple planes to create a force field effect that blocks the player from reaching the access card.</p>

<p>Using the new spawn feature to recreate a simple Portal clone.</p>

<p>A piano floor where you walk on the keys to play.</p>

<p>Use a time API to get the current time and start a party</p>

<p>A simple interactive scene with a door that can be opened and closed.</p>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<p>A simple mural scene.</p>

<p>A puzzle game where you reflect a beam of light to a target using a series of mirrors.</p>

<p>Example scene showing a UI</p>

<p>A Simon Says game, with click interactions and sequenced actions. The game generates a random sequence of colors and you must click buttons to match those.</p>

<p>Run a MANA transaction and receive MANA in Ropsten</p>

<em>4</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=5&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=5&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>167</strong>

<strong>all</strong>

<strong>TypeScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>A scene where MANA from market transactions is burnt, displaying a particle-based fire</p>

<p>Reflecting a ray off of multiple objects at arbitrary angles.</p>

<p>Item pickup mechanic where each item has a different spawn time.</p>

<p>This simple scene features a couple of wheels that you can spin by clicking them.</p>

<p>A scene where hummingbirds spawn when you click a tree. Each bird moves on its own to random positions.</p>

<p>Using the Noise Utils library to simulate random grass movement from wind</p>

<p>Demonstrates how you can grab and move an object.</p>

<p>A scene that shows a character walking along a fixed path, using lerp over each segment of the path. If you approach it, it will switch to yelling at you.</p>

<p>A cube-based fountain that works on Soho Plaza. It includes P2P sync and handling of multiple animations per model.</p>

<p>Call the Decentraland Events API to display events that are currently going on</p>

<p>Spawning enemy spaceships from various shaped portals.</p>

<p>A scene with animations, sound, and tiles on the floor that randomly change color to the beat.</p>

<p>Displays an NFT taken from a contract address</p>

<p>Using cannon.js to simulate several bouncing balls</p>

<p>A scene with a simple AI character that chooses its own actions and follows orders.</p>

<p>Make players dance in a loop when they stand in certain areas of your scene</p>

<p>A simple scene that shows how to fetch player wearable data to match against a criteria. In this case, only players wearing eyewear are allowed in.</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks on a donations box</p>

<p>A simple scene that uses the `decentraland-crypto-utils` library to make a MANA payment when a player clicks a button</p>

<p>Swapping out the default avatar model for another character model.</p>

<p>A coconut shy built using cannon.js physics engine.</p>

<p>nft_bazl gallery</p>

<p>One of Decentraland's public plazas, dedicated to gaming</p>

<p>The vegas plaza, located at -66,66 in Decentraland Genesis City</p>

<p>A meter that goes up based on the number of claps from players applauding in the scene.</p>

<p>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</p>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<p>Simple broadcasting websocket server</p>

<p>A multiplayer game for Decentraland Game Jam September 2020</p>

<em>5</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=6&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=typescript&page=6&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>167</strong>

<strong>all</strong>

<strong>TypeScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>An inflatable-punch-bag scene built using cannon.js physics engine.</p>

<p>A tin-can-alley scene built using cannon.js physics engine.</p>

<p>Arcade cabinets containing variations of the classic Breakout game.</p>

<p>Using CoinGecko's API to display the prices of Bitcoin, Ethereum and Mana.</p>

<p>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc, which allows a player to teleport to wherever the disc is located.</p>

<p>A simple party area with music streaming and video projections</p>

<p>Cover as much of the ground as you can with paint.</p>

<p>Demonstrates how you can grab and move an object with physics.</p>

<p>Using box2d to create a bouncing ball</p>

<p>Displaying NFTs and information about them using a JSON file.</p>

<p>A static scene that includes animations that are built-into the 3D models</p>

<p>A scene that uses a server and a REST API to sync a scene state amongst multiple users. Itâs built around the basic âopen the doorâ example.</p>

<p>A Decentraland tutorial - learn how to make a game!</p>

<em>6</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=javascript&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=javascript&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>6</strong>

<strong>all</strong>

<strong>JavaScript</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<p>Route OSC messages to Decentraland scenes, via Colyseus</p>

<p>Trams public transport system</p>

<p>A multiplayer scene that uses a websockets server to sync the position of a frisbee as it's thrown between players</p>

<p>Scene used in Halloween events for day 1 and 2</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?language=html&type=all

# URL: https://github.com/orgs/decentraland-scenes/repositories?language=html&type=all

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<strong>1</strong>

<strong>all</strong>

<strong>HTML</strong>

<strong>last updated</strong>

<h2>Repositories</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-awesome-repository

# Change to URL: https://github.com/3d-modeling-for-decentraland

# Change to URL: https://github.com/decentraland/pixel-chain-mural-scene

# URL: https://github.com/decentraland/pixel-chain-mural-scene

<title>GitHub - decentraland/pixel-chain-mural-scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/pixel-chain-mural-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Pixel Mural</h1>

<em>A screenshot of the mural-example-scene running in preview.</em>

<p>This scene lets you paint a mural by coloring one pixel at a time in a grid of 32 x 32 pixels. You can then mint the resulting mural as an NFT on</p>

<p>.</p>

<p>This scene shows you:</p>

<li>How to interact with a smart contract to call its functions (Pixelchain's contract, in this case)</li>

<li>How to use the messagebus to sync changes with other players</li>

<li>How to encapsule logic and properties into game objects</li>

<li>How to display a UI with buttons and input fields</li>

<li>How to use trigger areas to delay the rendering of entities till a player enters an area</li>

<li>How to change the materials of a primitive shape</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<p>, make it</p>

<p>Note: The mural itself may take some time to load before you can see it.</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<strong>Scene Usage</strong>

<p>Approach the center of the scene for the wall and the pallette to load.</p>

<p>On the different colors of the pallette press E to pick a color, then click on the tiles of the mural to paint them that color. Other players in the scene will also see the mural change.</p>

<p>You can also press F on one of the colors of the swatch to open a UI where you can set a different Hex color. Pixelchain NFTs can only contain up to 12 different colors, but you can pick which colors. So you can change any of the colors and this will be also synced w other players.</p>

<p>When you're happy with your creation, click on the pink cube next to the mural and it will open a UI where you can give your work a name and mint it as a PixelChain NFT.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>15</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/store-template

# URL: https://github.com/decentraland-scenes/store-template

<title>GitHub - decentraland-scenes/Store-Template: A basic generic virtual store for wearables and other tokens</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A basic generic virtual store for wearables and other tokens</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Store-Template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Store Template</h1>

<p>A basic generic virtual store for wearables and other tokens</p>

<p>This scene shows you:</p>

<li>How to add links to wearables on the market place</li>

<li>How to add a streaming video</li>

<li>How to add a POAP booth</li>

<li>How to add external links</li>

<li>How to organize the scene's content into neat modular components that are easy to change from a config file</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.

Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A basic generic virtual store for wearables and other tokens</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-ecs-utils

# URL: https://github.com/decentraland/decentraland-ecs-utils

<title>GitHub - decentraland/decentraland-ecs-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-ecs-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>35</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>106</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/ecs-scene-utils</h1>

<p>This library includes a number of helpful pre-built tools that include components, methods, and systems. They offer simple solutions to common scenarios that you're likely to run into.</p>

<h2>Using the Utils library</h2>

<p>To use any of the helpers provided by the utils library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl/ecs-scene-utils -B</code>

<li>Run</li>

<code>dcl start</code>

<li>or</li>

<code>dcl build</code>

<li>so the dependencies are correctly installed.</li>

<li>Import the library into the scene's script. Add this line at the start of your</li>

<code>game.ts</code>

<li>file, or any other TypeScript files that require it:</li>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Gradual Movement</h2>

<h3>Move an entity</h3>

<p>To move an entity over a period of time, from one position to another, use the</p>

<code>MoveTransformComponent</code>

<p>component.</p>

<code>MoveTransformComponent</code>

<p>has three required arguments:</p>

<code>start</code>

<li>:</li>

<code>Vector3</code>

<li>for the start position</li>

<code>end</code>

<li>:</li>

<code>Vector3</code>

<li>for the end position</li>

<code>duration</code>

<li>: duration (in seconds) of the translation</li>

<p>This example moves an entity from one position to another over 2 seconds:</p>

<h3>Follow a path</h3>

<p>To move an entity over several points of a path over a period of time, use the</p>

<code>FollowPathComponent</code>

<p>component.</p>

<code>FollowPathComponent</code>

<p>has two required arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that form the path.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<p>This example moves an entity over through four points over 5 seconds:</p>

<h3>Follow a curved path</h3>

<p>To move an entity following a curved path over a period of time, use the</p>

<code>FollowCurvedPathComponent</code>

<p>component.</p>

<p>The curved path is composed of multiple straight line segments put together. You only need to supply a series of fixed path points and a smooth curve is drawn to pass through all of these.</p>

<code>FollowCurvedPathComponent</code>

<p>has three required arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that the curve must pass through.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<code>numberOfSegments</code>

<li>: How many straight-line segments to use to construct the curve.</li>

<p>Tip: Each segment takes at least one frame to complete. Avoid using more than 30 segments per second in the duration of the path, or the entity will move significantly slower while it stops for each segment.</p>

<p>This example moves an entity over through a curve that's subdivided into 40 segments, over a period of 5 seconds. The curve passes through four key points.</p>

<p>The</p>

<code>FollowCurvedPathComponent</code>

<p>also lets you set:</p>

<code>turnToFaceNext</code>

<li>: If true, the entity will rotate on each segment of the curve to always face forward.</li>

<code>closedCircle</code>

<li>: If true, traces a circle that starts back at the beginning, keeping the curvature rounded in the seams too</li>

<h3>Rotate an entity</h3>

<p>To rotate an entity over a period of time, from one direction to another, use the</p>

<code>rotateTransformComponent</code>

<p>component, which works very similarly to the</p>

<code>MoveTransformComponent</code>

<p>component.</p>

<code>rotateTransformComponent</code>

<p>has three required arguments:</p>

<code>start</code>

<li>:</li>

<code>Quaternion</code>

<li>for the start rotation</li>

<code>end</code>

<li>:</li>

<code>Quaternion</code>

<li>for the end rotation</li>

<code>duration</code>

<li>: duration (in seconds) of the rotation</li>

<p>This example rotates an entity from one rotation to another over 2 seconds:</p>

<h3>Sustain rotation</h3>

<p>To rotates an entity continuously, use</p>

<code>KeepRotatingComponent</code>

<p>. The entity will keep rotating forever until it's explicitly stopped or the component is removed.</p>

<code>KeepRotatingComponent</code>

<p>has one required argument:</p>

<code>rotationVelocity</code>

<li>: A quaternion describing the desired rotation to perform each second second. For example</li>

<code>Quaternion.Euler(0, 45, 0)</code>

<li>rotates the entity on the Y axis at a speed of 45 degrees per second, meaning that it makes a full turn every 8 seconds.</li>

<p>The component also contains the following method:</p>

<code>stop()</code>

<li>: stops rotation and removes the component from any entities its added to.</li>

<p>In the following example, a cube rotates continuously until clicked:</p>

<pre>:</pre>

<h3>Change scale</h3>

<p>To adjust the scale of an entity over a period of time, from one size to another, use the</p>

<code>ScaleTransformComponent</code>

<p>component, which works very similarly to the</p>

<code>MoveTransformComponent</code>

<p>component.</p>

<code>ScaleTransformComponent</code>

<p>has three required arguments:</p>

<code>start</code>

<li>:</li>

<code>Vector3</code>

<li>for the start scale</li>

<code>end</code>

<li>:</li>

<code>Vector3</code>

<li>for the end scale</li>

<code>duration</code>

<li>: duration (in seconds) of the scaling</li>

<p>This example scales an entity from one size to another over 2 seconds:</p>

<h3>Non-linear changes</h3>

<p>All of the translation components, the</p>

<code>MoveTransformComponent</code>

<p>,</p>

<code>rotateTransformComponent</code>

<p>,</p>

<code>ScaleTransformComponent</code>

<p>, and</p>

<code>FollowPathComponent</code>

<p>have an optional argument to set the rate of change. By default, the movement, rotation, or scaling occurs at a linear rate, but this can be set to other options.</p>

<p>The following values are accepted:</p>

<code>Interpolation.LINEAR</code>

<code>Interpolation.EASEINQUAD</code>

<code>Interpolation.EASEOUTQUAD</code>

<code>Interpolation.EASEQUAD</code>

<code>Interpolation.EASEINSINE</code>

<code>Interpolation.EASEOUTSINE</code>

<code>Interpolation.EASESINE</code>

<code>Interpolation.EASEINEXPO</code>

<code>Interpolation.EASEOUTEXPO</code>

<code>Interpolation.EASEEXPO</code>

<code>Interpolation.EASEINELASTIC</code>

<code>Interpolation.EASEOUTELASTIC</code>

<code>Interpolation.EASEELASTIC</code>

<code>Interpolation.EASEINBOUNCE</code>

<code>Interpolation.EASEOUTEBOUNCE</code>

<code>Interpolation.EASEBOUNCE</code>

<p>The following example moves a box following an ease-in rate:</p>

<h3>Callback on finish</h3>

<p>All of the translation components, the</p>

<code>MoveTransformComponent</code>

<p>,</p>

<code>rotateTransformComponent</code>

<p>,</p>

<code>ScaleTransformComponent</code>

<p>,</p>

<code>FollowPathComponent</code>

<p>, and</p>

<code>FollowCurvedPathComponent</code>

<p>have an optional argument that executes a function when the translation is complete.</p>

<code>onFinishCallback</code>

<li>: function to execute when movement is done.</li>

<p>The following example logs a message when the box finishes its movement. The example uses</p>

<code>MoveTransformComponent</code>

<p>, but the same applies to</p>

<code>rotateTransformComponent</code>

<p>and</p>

<code>ScaleTransformComponent</code>

<p>.</p>

<p>The</p>

<code>FollowPathComponent</code>

<p>has a two optional arguments that execute functions when a section of the path is complete and when the whole path is complete.</p>

<code>onFinishCallback</code>

<p>: function to execute when movement is complete.</p>

<code>onPointReachedCallback</code>

<p>: function to execute when each section of the path is done.</p>

<p>The following example logs a messages when the box finishes each segment of the path, and another when the entire path is done.</p>

<h2>Toggle</h2>

<p>Use the</p>

<code>ToggleComponent</code>

<p>to switch an entity between two possible states, running a same function on every transition.</p>

<p>The</p>

<code>ToggleComponent</code>

<p>has the following arguments:</p>

<code>startingState</code>

<li>: Starting state of the toggle (ON or OFF)</li>

<code>onValueChangedCallback</code>

<li>: Function to call every time the toggle state changed.</li>

<p>It exposes three methods:</p>

<code>toggle()</code>

<li>: switches the state of the component between ON and OFF</li>

<code>isOn()</code>

<li>: reads the current state of the component, without altering it. It returns a boolean, where</li>

<code>true</code>

<li>means ON.</li>

<code>setCallback()</code>

<li>: allows you to change the function to be executed by</li>

<code>onValueChangedCallback</code>

<li>, for the next time it's toggled.</li>

<p>The following example switches the color of a box between two colors each time it's clicked.</p>

<h3>Combine Toggle with Translate</h3>

<p>This example combines a toggle component with a move component to switch an entity between two positions every time it's clicked.</p>

<h2>Time</h2>

<p>These tools are all related to the passage of time in the scene.</p>

<h3>Delay a function</h3>

<p>Use the</p>

<code>setTimeout</code>

<p>function to delay the execution of a function by a given amount of milliseconds.</p>

<p>This function requires two fields:</p>

<code>ms</code>

<li>: How many milliseconds to delay the function</li>

<code>callback</code>

<li>: The function to execute after the waiting period</li>

<p>This example delays the logging of a message by 1000 milliseconds.</p>

<p>As an alternative, you can add the</p>

<code>Delay</code>

<p>component to an entity.</p>

<p>This example creates an entity that only becomes visible in the scene after 10000 milliseconds (10 seconds) have passed.</p>

<h3>Delay removing an entity</h3>

<p>Add an</p>

<code>ExpireIn</code>

<p>component to an entity to remove it from the scene after an</p>

<code>n</code>

<p>amount of milliseconds.</p>

<p>This example creates an entity that is removed from the scene 500 milliseconds after it's clicked.</p>

<h3>Repeat at an Interval</h3>

<p>Add an</p>

<code>Interval</code>

<p>component to an entity to make it execute a same function every</p>

<code>n</code>

<p>milliseconds.</p>

<p>This example creates an entity that changes its scale to a random size every 500 milliseconds.</p>

<p>To repeat the execution of a task that isn't directly tied to any entity in the scene, create a dummy entity that only holds an</p>

<code>Interval</code>

<p>component.</p>

<h2>Triggers</h2>

<h3>Trigger Component</h3>

<p>The trigger component can execute whatever you want whenever the player's position or the position of a specific entity or type of entity overlaps with an area.</p>

<p>The</p>

<code>TriggerComponent</code>

<p>has the following arguments:</p>

<code>shape</code>

<li>: Shape of the triggering collider area, either a cube or a sphere (</li>

<code>TriggerBoxShape</code>

<li>or</li>

<code>TriggerSphereShape</code>

<li>)</li>

<code>data</code>

<li>: An object of type</li>

<code>TriggerData</code>

<li>containing several optional parameters to configure the behavior of the trigger area.</li>

<p>The</p>

<code>TriggerData</code>

<p>type may contain the following parameters:</p>

<code>onCameraEnter</code>

<li>: Callback function for when the player enters the trigger area</li>

<code>onCameraExit</code>

<li>: Callback function for when the player leaves the trigger area</li>

<code>layer</code>

<li>: Layer of the Trigger, useful to discriminate between trigger events. You can set multiple layers by using a</li>

<code>|</code>

<li>symbol.</li>

<code>triggeredByLayer</code>

<li>: Against which layers to check collisions</li>

<code>onTriggerEnter</code>

<li>: Callback when an entity of a valid layer enters the trigger area</li>

<code>onTriggerExit</code>

<li>: Callback function for when an entity of a valid layer leaves the trigger area</li>

<code>enableDebug</code>

<li>: When true, makes the trigger area visible for debug purposes. Only visible when running a preview locally, not in production.</li>

<p>The following example creates a trigger that changes its position randomly when triggered by the player.</p>

<pre>:</pre>

<pre>:</pre>

<p>Note: The trigger shape can be positioned or stretched, but it can't be rotated on any axis. This is a design decision taken for performance reasons. To cover a slanted area, we recommend adding multiple triggers if applicable.</p>

<p>Each trigger area has a shape for its area to check for collisions, which is completely independent of the visible shape of the entity. The shape of the area can either be determined by a</p>

<code>TriggerBoxShape</code>

<p>or a</p>

<code>TriggerSphereShape</code>

<p>. When instancing these, can set the scale and an offset position. By default, the trigger shape starts in the same position as the entity that has the</p>

<code>TriggerComponent</code>

<p>.</p>

<p>You can check where exactly the trigger area is and its scale by setting the</p>

<code>enableDebug</code>

<p>flag to true. You will then see this shape in the scene when running a preview. This debug shape is only visible in the context of a preview, not once the scene is deployed.</p>

<p>Note: The player's head needs to go into the trigger area to activate it. If only a player's feet or torso are in, that won't trigger it. Setting</p>

<code>enableDebug</code>

<p>to true can help you check how the area overlaps with the player.</p>

<h3>Dissable a collision component</h3>

<code>TriggerComponent</code>

<p>components have an</p>

<code>enabled</code>

<p>property, which is set to</p>

<code>true</code>

<p>by default when creating it. You can use this property to disable the behavior of the component without removing it.</p>

<h3>One Time Trigger</h3>

<p>As a shortcut for creating a trigger area that is only actioned when the player first walks in or out, use the</p>

<code>addOneTimeTrigger()</code>

<p>function.</p>

<p>This function creates a new entity with a</p>

<code>TriggerComponent</code>

<p>, that gets removed as soon as the</p>

<code>onCameraEnter</code>

<p>and</p>

<code>onCameraExit</code>

<p>functions are triggered once. If only one of these is present, the entity is removed as soon it is triggered.</p>

<p>This function is especially useful for optimizing the loading of a scene, so that certain elements aren't loaded till a player walks into an area.</p>

<p>This function takes similar arguments to creating a Trigger component:</p>

<code>shape</code>

<li>: Shape of the triggering collider area, either a cube or a sphere (</li>

<code>TriggerBoxShape</code>

<li>or</li>

<code>TriggerSphereShape</code>

<li>)</li>

<code>data</code>

<li>: An object of type</li>

<code>TriggerData</code>

<li>containing several optional parameters to configure the behavior of the trigger area.</li>

<code>parent</code>

<li>: An entity to set as parent of the entity created by this function. The new entity inherits position, rotation and scale from the parent.</li>

<p>The</p>

<code>TriggerData</code>

<p>type may contain the following parameters:</p>

<code>onCameraEnter</code>

<li>: Callback function for when the player first enters the trigger area</li>

<code>onCameraExit</code>

<li>: Callback function for when the player first leaves the trigger area</li>

<code>enableDebug</code>

<li>: When true, makes the trigger area visible for debug purposes. Only visible when running a preview locally, not in production.</li>

<pre>:</pre>

<pre>:</pre>

<p>In the example above, the trigger area will only display the welcome message the first time the player walks in, and only display the goodbye message the first time the player leaves. After that, the entity is removed from the scene.</p>

<h3>Set a custom shape for player</h3>

<p>You can optionally configure a custom shape and size for the player's trigger area, according to your needs:</p>

<p>Changing this configuration affects the behavior of all</p>

<code>onCameraEnter</code>

<p>and</p>

<code>onCameraExit</code>

<p>functions of all TriggerComponents in the scene.</p>

<h3>Trigger layers</h3>

<p>You can define different layers (bitwise) for triggers, and set which other layers can trigger it.</p>

<p>The following example creates a scene that has:</p>

<li>food (cones)</li>

<li>mice (spheres)</li>

<li>cats (boxes)</li>

<p>Food is triggered (or eaten) by both cats or mice. Also, mice are eaten by cats, so a mouse's trigger area is triggered by only cats.</p>

<p>Cats and mice always move towards the food. When food or mice are eaten, they respawn in a random location.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Conversions</h2>

<p>This library includes a number of helpful functions for common value conversions.</p>

<h4>Clamp</h4>

<p>Use the</p>

<code>clamp()</code>

<p>function to easily clamp possible values between a maximum and a minimum.</p>

<p>The</p>

<code>clamp()</code>

<p>function takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min</code>

<li>: Minimum output value.</li>

<code>max</code>

<li>: Maximum output value.</li>

<p>The following example limits an incoming value between 5 and 15. If the incoming value is less than 5, it will output 5. If the incoming value is more than 15, it will output 15.</p>

<h4>Map</h4>

<p>Use the</p>

<code>map()</code>

<p>function to map a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum.</p>

<p>The</p>

<code>map()</code>

<p>function takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min1</code>

<li>: Minimum value in the range of the input.</li>

<code>max1</code>

<li>: Maximum value in the range of the input.</li>

<code>min2</code>

<li>: Minimum value in the range of the output.</li>

<code>max2</code>

<li>: Maximum value in the range of the output.</li>

<p>The following example maps the value</p>

<em>5</em>

<p>from a scale of 0 to 10 to a scale of 300 to 400. The resulting value is 350, as it keeps the same proportion relative to the new maximum and minimum values.</p>

<h4>World position</h4>

<p>If an entity is parented to another entity, or to the player, then its Transform position will be relative to its parent. To find what its global position is, taking into account any parents, use</p>

<code>getEntityWorldPosition()</code>

<p>.</p>

<p>The</p>

<code>getEntityWorldPosition()</code>

<p>function takes a single argument:</p>

<code>entity</code>

<li>: The entity from which to get the global position</li>

<p>The function returns a</p>

<code>Vector3</code>

<p>object, with the resulting position of adding the given entity and all its chain of parents.</p>

<p>The following example sets a cube as a child of the player, and logs its true position when clicked.</p>

<pre>:</pre>

<h4>World rotation</h4>

<p>If an entity is parented to another entity, or to the player, then its Transform rotation will be relative to its parent. To find what its global rotation is, taking into account any parents, use</p>

<code>getEntityWorldRotation()</code>

<p>.</p>

<p>The</p>

<code>getEntityWorldRotation()</code>

<p>function takes a single argument:</p>

<code>entity</code>

<li>: The entity from which to get the global rotation</li>

<p>The function returns a</p>

<code>Quaternion</code>

<p>object, with the resulting rotation of multiplying the given entity to all its chain of parents.</p>

<p>The following example sets a cube as a child of the player, and logs its true rotation when clicked.</p>

<pre>:</pre>

<h2>Send requests</h2>

<p>Use the</p>

<code>sendRequest()</code>

<p>function to easily send HTTP requests to APIs.</p>

<p>The</p>

<code>sendRequest()</code>

<p>function has a single required argument:</p>

<code>url</code>

<li>: The URL to send the request</li>

<p>NOTE: The sendRequest() function is asynchronous, since it must wait for the external server to respond back before it can return a response. If you need your code to access the data on the request's response, you must use the sendRequest() within an</p>

<code>async</code>

<p>block of code, and add an</p>

<code>await</code>

<p>to the function.</p>

<p>The</p>

<code>sendRequest()</code>

<p>function also lets you use the following arguments, for sending more advanced requests:</p>

<code>method</code>

<li>: The HTTP method to use.</li>

<code>GET</code>

<li>is the default, other common options are</li>

<code>POST</code>

<li>,</li>

<code>PUT</code>

<li>, and</li>

<code>DELETE</code>

<li>.</li>

<code>headers</code>

<li>: The HTTP headers of the request, as a JSON object.</li>

<code>body</code>

<li>: The body of the request, as a JSON object.</li>

<pre>:</pre>

<pre>:</pre>

<h2>Labels</h2>

<p>Add a text label floating over an entity using</p>

<code>addLabel()</code>

<p>.</p>

<p>The</p>

<code>addLabel()</code>

<p>function has just two required arguments:</p>

<code>text</code>

<li>: The string of text to display</li>

<code>parent</code>

<li>: The entity to set the label on</li>

<pre>:</pre>

<p>The</p>

<code>addLabel()</code>

<p>function also lets you set the following:</p>

<code>billboard</code>

<li>: If true, label turns to always face player. True by default.</li>

<code>color</code>

<li>: Text color. Black by default.</li>

<code>size</code>

<li>: Text font size, 3 by default.</li>

<code>textOffset</code>

<li>: Offset from parent entity's position. By default 1.5 meters above the parent.</li>

<p>Tip: The</p>

<code>addLabel()</code>

<p>function returns the created entity used for the text. You can then tweak this entity in any way you choose.</p>

<h2>Debug helpers</h2>

<h4>Debug cube</h4>

<p>Render a simple clickable cube to use as a trigger when debugging a scene with</p>

<code>addTestCube()</code>

<p>.</p>

<p>NOTE: The test cube is only shown in preview, unless configured to appear also in production.</p>

<p>The</p>

<code>addTestCube()</code>

<p>function has just two required arguments:</p>

<code>pos</code>

<li>: The position, rotation and/or scale of the cube, expressed as a TransformConstructorArgs object, as gets passed when creating a</li>

<code>Transform</code>

<li>component.</li>

<code>triggeredFunction</code>

<li>: A function that gets called every time the cube is clicked.</li>

<pre>:</pre>

<p>The</p>

<code>addTestCube()</code>

<p>function also lets you set the following:</p>

<code>label</code>

<li>: An optional label to display floating over the cube</li>

<code>color</code>

<li>: A color for the cube's material.</li>

<code>sphere</code>

<li>: If true, it renders as a Sphere instead of a cube.</li>

<code>noCollider</code>

<li>: If true, the cube won't have a collider and will let players walk through it.</li>

<code>keepInProduction</code>

<li>: If true, it will be visible for players in-world once the scene is deployed. Otherwise, the cube is only present when previewing he scene locally.</li>

<p>Tip: The</p>

<code>addTestCube()</code>

<p>function returns the created entity for the cube. You can then tweak this entity in any way you choose.</p>

<code>addTestCube()</code>

<p>is an async function (because the function first checks if you're in preview or in production). If you need the function to return the cube (instead of a promise of a cube) use it inside an async block of code with an await on the</p>

<code>addTestCube()</code>

<p>function.</p>

<pre>:</pre>

<h2>Action sequence</h2>

<p>Use an action sequence to play a series of actions one after another.</p>

<h3>IAction</h3>

<p>The</p>

<code>IAction</code>

<p>interface defines the actions that can be added into a sequence. It includes:</p>

<code>hasFinished</code>

<li>: Boolean for the state of the action, wether it has finished its execution or not.</li>

<code>onStart()</code>

<li>: First method that is called upon the execution of the action.</li>

<code>update()</code>

<li>: Called on every frame on the action's internal update.</li>

<code>onFinish()</code>

<li>: Called when the action has finished executing.</li>

<h3>Action Sequence Builder</h3>

<p>This object creates action sequences, using simple building blocks.</p>

<p>The</p>

<code>SequenceBuilder</code>

<p>exposes the following methods:</p>

<code>then()</code>

<li>: Enqueue an action so that it's executed when the previous one finishes.</li>

<code>if()</code>

<li>: Use a condition to branch the sequence</li>

<code>else()</code>

<li>: Used with if() to create an alternative branch</li>

<code>endIf()</code>

<li>: Ends the definition of the conditional block</li>

<code>while()</code>

<li>: Keep running the actions defined in a block until a condition is no longer met.</li>

<code>breakWhile()</code>

<li>: Ends the definition of the while block</li>

<h3>Action Sequence System</h3>

<p>The action sequence system takes care of running the sequence of actions. The</p>

<code>ActionsSequenceSystem</code>

<p>exposes the following methods:</p>

<code>startSequence()</code>

<li>: Starts a sequence of actions</li>

<code>setOnFinishCallback()</code>

<li>: Sets a callback for when the whole sequence is finished</li>

<code>isRunning()</code>

<li>: Returns a boolean that determines if the sequence is running</li>

<code>stop()</code>

<li>: Stops a running the sequence</li>

<code>resume()</code>

<li>: Resumes a stopped sequence</li>

<code>reset()</code>

<li>: Resets a sequence so that it starts over</li>

<h3>Full example</h3>

<p>The following example creates a box that changes its scale until clicked. Then it resets its scale and moves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Contribute</h2>

<p>All contributions from the community are encouraged as Pull Requests to this repository. Please notify of any PRs in the Decentraland Discord channels to make sure the team is aware of them.</p>

<p>In order to test any changes made to this library on active scenes, follow these steps:</p>

<li>Run</li>

<code>npm run build</code>

<li>to build internal dependencies in the project folder</li>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>Create a new DCL scene, or pick an existing one</li>

<li>Install the library normally with</li>

<code>npm i @dcl/ecs-scene-utils -B</code>

<li>Import the library normally into the project with</li>

<code>import * as utils from '@dcl/ecs-scene-utils'</code>

<li>On the scene folder, run</li>

<code>npm link @dcl/ecs-scene-utils</code>

<li>Use this scene to try out any functionality you've added or changed to verify that it behaves as expected.</li>

<p>Note: When done testing, run</p>

<code>npm unlink @dcl/ecs-scene-utils</code>

<p>on your scene, so that it no longer depends on your local copy of the library.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>31</strong>

<h3>Watchers</h3>

<strong>23</strong>

<h3>Forks</h3>

<strong>14</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-ui-utils

# URL: https://github.com/decentraland/decentraland-ui-utils

<title>GitHub - decentraland/decentraland-ui-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-ui-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>45</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>112</strong>

<h2>Files</h2>

<button>View code</button>

<h1>UI-library</h1>

<p>A collection of tools for common UI requirements for Decentraland scenes.</p>

<p>To use any of the helpers provided by the UI utils library:</p>

<li>Install the library as an npm package. Run this command in your scene's project folder:</li>

<code>npm i @dcl/ui-scene-utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>ui</code>

<li>. and let the suggestions of your IDE show the available helpers.</li>

<h2>Text Announcement</h2>

<p>To display a text announcement on the center of the screen for a specified amount of time, use the</p>

<code>displayAnnouncement</code>

<p>function.</p>

<p>This function can take the following parameters:</p>

<code>value</code>

<li>: String to display</li>

<code>duration</code>

<li>: Time to keep the text visible (in seconds). Default: 3 seconds. If set to -1, the announcement will remain on screen till it's hidden.</li>

<code>color</code>

<li>: Text color, as a</li>

<em>Color4</em>

<li>, default: yellow.</li>

<code>size</code>

<li>: Font size, default: 50</li>

<code>bordersOff</code>

<li>: The text has a thin black margin unless this field is set to</li>

<em>true</em>

<li>.</li>

<p>To hide any open announcements, you can call</p>

<code>hideAnnouncements()</code>

<p>.</p>

<h2>Counter</h2>

<p>To display a number on a corner of the screen that can be easily updated, you can create a</p>

<code>Counter</code>

<p>.</p>

<p>When instancing a new counter you can pass the following parameters:</p>

<code>value</code>

<li>: Starting value</li>

<code>xOffset</code>

<li>: Offset on X away from the bottom-left corner</li>

<code>yOffset</code>

<li>: Offset on Y away from the bottom-left corner</li>

<code>color</code>

<li>: Text color, white by default</li>

<code>size</code>

<li>: Text size, 25 by default</li>

<code>bordersOff</code>

<li>: The text has a thin black margin unless this field is set to</li>

<em>true</em>

<li>.</li>

<p>Once a</p>

<code>UICounter</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read</code>

<li>: Returns the current value of the counter</li>

<code>increase</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 1.</li>

<code>decrease</code>

<li>: Decreases the number by a given amount. If no parameters are passed, it lowers the value by 1.</li>

<code>set</code>

<li>: Sets the number to a given amount, no matter what the previous value was.</li>

<h2>Corner Labels</h2>

<p>To display text on the bottom-left corner of the screen, you can create a</p>

<code>CornerLabel</code>

<p>.</p>

<p>When instancing a new corner label you can pass the following parameters:</p>

<code>value</code>

<li>: Text to show.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the bottom-right corner.</li>

<code>color</code>

<li>: Text color, white by default</li>

<code>size</code>

<li>: Text size, 25 by default</li>

<code>bordersOff</code>

<li>: The text has a thin black margin unless this field is set to</li>

<em>true</em>

<li>.</li>

<h2>Bar</h2>

<p>To display a bar that can be updated to increase or shorten in length, similar to a typical health bar in games, you can create a</p>

<code>UIBar</code>

<p>.</p>

<p>When instancing a new bar you can pass the following parameters:</p>

<code>value</code>

<li>: Starting value of the bar, from 0 to 1. With 1 the bar is full, with 0 it's empty.</li>

<code>xOffset</code>

<li>: Offset on X away from the bottom-left corner.</li>

<code>yOffset</code>

<li>: Offset on Y away from the bottom-left corner.</li>

<code>fillColor</code>

<li>: Color of the bar filling, red by default.</li>

<code>style</code>

<li>: Margin style of the bar, from a list of different predetermined options in different colors and shapes. It takes a value from the</li>

<code>BarStyles</code>

<li>enum.</li>

<code>scale</code>

<li>: Multiplier to alter the size of the bar proportionally. A scale of 1 = 128 x 32 pixels.</li>

<p>Once a</p>

<code>UIBar</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read</code>

<li>: Returns the current value of the counter.</li>

<code>increase</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 0.1.</li>

<code>decrease</code>

<li>: Secreases the number by a given amount. If no parameters are passed, it lowers the value by 0.1.</li>

<code>set</code>

<li>: Sets the bar to a given value, no matter what the previous value was.</li>

<h2>Corner Icons</h2>

<p>To display an icon of on the bottom-left corner of the screen you can create one of the following:</p>

<code>SmallIcon</code>

<li>: by default 32x32 pixels in size.</li>

<code>MediumIcon</code>

<li>: by default 64x64 pixels in size.</li>

<code>LargeIcon</code>

<li>: by default 128x128 pixels in size.</li>

<p>When instancing a new icon you can pass the following parameters:</p>

<code>image</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the bottom-right corner.</li>

<code>width</code>

<li>: Image width on screen in pixels.</li>

<code>height</code>

<li>: Image height on screen in pixels.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<h2>Loading icon</h2>

<p>To display a loading icon on the center of the screen for a specified amount of time, create a</p>

<code>LoadingIcon</code>

<p>.</p>

<p>When instancing a new loading icon, you can pass the following parameters:</p>

<code>duration</code>

<li>: seconds to display the image onscreen. If not set, or set to 0, it keeps the icon on till you hide it.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the center of the screen.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the center of the screen.</li>

<code>scale</code>

<li>: Multiplier to alter the size of the icon proportionally. A scale of 1 = 48 x 64 pixels.</li>

<p>Once a</p>

<code>LoadingIcon</code>

<p>object is instanced, you can call the</p>

<code>hide()</code>

<p>function to remove it.</p>

<h2>Full screen image</h2>

<p>To display a large image on the center of the screen for a spefified amount of time, create a</p>

<code>CenterImage</code>

<p>. By default images must be 512 x 512 pixels, unless specified.</p>

<p>When instancing a new large image, you can pass the following parameters:</p>

<code>image</code>

<li>: Path to image file.</li>

<code>duration</code>

<li>: Seconds to display the image onscreen, 3 seconds by default. -1 keeps it on till you hide it.</li>

<code>startHidden</code>

<li>: If true, the image starts invisible till you run its</li>

<code>show()</code>

<li>function. Large images may flash white for a second if created and shown at the same time. By deferring the creation you avoid this artifact.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the center of the screen.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the center of the screen.</li>

<code>width</code>

<li>: Image width on screen in pixels, 512 by default.</li>

<code>height</code>

<li>: Image height on screen in pixels, 512 by default.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple images into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>CenterImage</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show</code>

<li>: Shows the image.</li>

<code>hide</code>

<li>: Hides the image.</li>

<h2>Predefined prompt windows</h2>

<p>The UI Utils library includes various common prompt windows to display messages and ask players to take action.</p>

<h3>Ok Prompt</h3>

<p>Displays a prompt window with a custom message and an OK button. The Ok button can either be clicked or triggered by pressing the E key.</p>

<p>When instancing a new Ok Prompt, you can pass the following parameters:</p>

<code>instructions</code>

<li>: Message string.</li>

<code>onAccept</code>

<li>: Function that gets executed if player clicks the button or presses E.</li>

<code>acceptLabel</code>

<li>: Label to go in the accept button, "Ok" by default.</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<p>Note: If the player closes the window with the close icon, the related function isn't called.</p>

<h3>Option Prompt</h3>

<p>Displays a prompt window with a custom message, a title, and two buttons that perform separate actions. The buttons can be clicked or triggered by the E and F keys.</p>

<p>When instancing a new Option Prompt, you can pass the following parameters:</p>

<code>title</code>

<li>: Header in bold letters at the top of the window</li>

<code>instructions</code>

<li>: Smaller print instructions.</li>

<code>onAccept</code>

<li>: Function that gets executed if player clicks accept.</li>

<code>onReject</code>

<li>: Function that gets executed if player clicks reject.</li>

<code>acceptLabel</code>

<li>: String to go in the accept button</li>

<code>rejectLabel</code>

<li>: String to go in the reject button</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<p>Note: If the player closes the window with the close icon, neither of the functions are called.</p>

<h3>Fill in Prompt</h3>

<p>Displays a prompt window with a header, a text field to fill in and a submit button. The value filled into the text box can be used as a parameter in the submit function.</p>

<p>When instancing a new Fill-in Prompt, you can pass the following parameters:</p>

<code>title</code>

<li>: Header in bold letters at the top of the window.</li>

<code>onAccept</code>

<li>: Function that gets executed when player clicks button of presses the E key.</li>

<code>acceptLabel</code>

<li>: String to use as label on the submit button. "Submit" by default.</li>

<code>placeholder</code>

<li>: Text to display as placeholder in the text box.</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, the related function isn't called.</p>

<h2>Custom Prompt Windows</h2>

<p>Custom prompt windows let you arrange as many elements as you want into a window, including buttons, text, checkboxes, switches, textboxes and icons.</p>

<h3>Create a custom prompt</h3>

<p>First create a new</p>

<code>CustomPrompt</code>

<p>object.</p>

<p>When instancing a new CustomPrompt, you can pass the following parameters:</p>

<code>style</code>

<li>: Pick from a few predefined options, some of them using the dark theme, others the light theme. You can also provide a string with a path to a custom image to use as a background instead.</li>

<code>width</code>

<li>: Background width on screen in pixels. The default size depends on the theme used.</li>

<code>height</code>

<li>: Background height on screen in pixels. The default size depends on the theme used.</li>

<code>startHidden</code>

<li>: If true, image starts invisible to load in the background till calling the</li>

<code>show()</code>

<li>function of the prompt object.</li>

<code>onClose</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<p>Note: Stretching the background images away from their default values may lead to blurry corners.</p>

<p>Once you instanced a</p>

<code>CustomPrompt</code>

<p>object, you can add elements to it by calling its various functions.</p>

<p>You can also call the following functions on it:</p>

<code>hide</code>

<li>: Hides the window.</li>

<code>show</code>

<li>: Shows the window if previously closed.</li>

<p>Access all of the UI elements that make up the prompt UI by calling the</p>

<code>elements</code>

<p>property of the prompt object.</p>

<h3>Add Text</h3>

<p>To add text to a custom prompt, use the</p>

<code>addText</code>

<p>function.</p>

<p>The</p>

<code>addText()</code>

<p>function can take the following parameters:</p>

<code>value</code>

<li>: Text to show.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>color</code>

<li>: Text color.</li>

<code>size</code>

<li>: Text size.</li>

<p>The</p>

<code>addText()</code>

<p>function returns a</p>

<code>CustomPromptText</code>

<p>object, that you can then reference to change its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<h3>Add a button</h3>

<p>To add a button to a custom prompt, use the</p>

<code>addButton</code>

<p>function.</p>

<p>The</p>

<code>addButton</code>

<p>function can take the following parameters:</p>

<code>label</code>

<li>: Label to show on the button.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>onClick</code>

<li>: Function to execute when the button is clicked.</li>

<code>style</code>

<li>: Choose out of several predefined style options, with different colors and rounded or square corners.</li>

<p>Note: If you pick the</p>

<code>E</code>

<p>or</p>

<code>F</code>

<p>style, the buttons will also be triggered when pressing the E or F keys respectively.</p>

<p>The</p>

<code>addButton()</code>

<p>function returns a</p>

<code>CustomPromptButton</code>

<p>object, that you can then reference to change its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<code>grayOut</code>

<li>: Sets the text to gray and makes it unclickable.</li>

<code>enable</code>

<li>: Sets the text to white and makes it clickable again.</li>

<h3>Add a Checkbox</h3>

<p>To add a checkbox to a custom prompt, use the</p>

<code>addCheckbox</code>

<p>function.</p>

<p>The</p>

<code>addCheckbox</code>

<p>function can take the following parameters:</p>

<code>label</code>

<li>: Label to show next to the checkbox.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck</code>

<li>: Function to execute when the box is checked.</li>

<code>onUncheck</code>

<li>: Function to execute when the box is unchecked.</li>

<code>large</code>

<li>: The default size of the checkbox is 24 x 24 pixels, checking this box sets the size to 32 x 32.</li>

<code>startChecked</code>

<li>: If true, the box starts checked by default.</li>

<p>The</p>

<code>addCheckbox()</code>

<p>function returns a</p>

<code>CustomPromptCheckbox</code>

<p>object, that you can then reference to change and read its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<code>check</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<code>uncheck</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<p>You can also read the returned object's</p>

<code>checked</code>

<p>property at any time to find its current state.</p>

<h3>Add a Switch</h3>

<p>To add a switch to a custom prompt, use the</p>

<code>addSwitch</code>

<p>function.</p>

<p>The</p>

<code>addSwitch</code>

<p>function can take the following parameters:</p>

<code>label</code>

<li>: Label to show next to the switch.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck</code>

<li>: Function to execute when the switch is activated.</li>

<code>onUncheck</code>

<li>: Function to execute when the switch is deactivated.</li>

<code>style</code>

<li>: Pick between several sizes, with different colors and rounded or square corners. The value must be from the</li>

<code>SwitchStyles</code>

<li>enum.</li>

<code>startChecked</code>

<li>: If true, the switch starts activated by default.</li>

<p>The</p>

<code>addSwitch()</code>

<p>function returns a</p>

<code>CustomPromptSwitch</code>

<p>object, that you can then reference to change and read its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<code>check</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<code>uncheck</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<p>You can also read the returned object's</p>

<code>checked</code>

<p>property at any time to find its current state.</p>

<h3>Add an icon</h3>

<p>To add an icon to a custom prompt, use the</p>

<code>addIcon</code>

<p>function.</p>

<p>The</p>

<code>addIcon</code>

<p>function can take the following parameters:</p>

<code>image</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the window's center.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>width</code>

<li>: Image width on screen in pixels.</li>

<code>height</code>

<li>: Image height on screen in pixels.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<p>The</p>

<code>addIcon()</code>

<p>function returns a</p>

<code>CustomPromptIcon</code>

<p>object, that you can then reference to change its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<h3>Add an input box</h3>

<p>To add an input box to a custom prompt, use the</p>

<code>addTextBox</code>

<p>function.</p>

<p>The</p>

<code>addTextBox</code>

<p>function can take the following parameters:</p>

<code>posX</code>

<li>: Offset on X, relative to the window's center.</li>

<code>posY</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>placeholder</code>

<li>: Text to display in the input box before the player interacts with it.</li>

<code>onChange</code>

<li>: Function that gets executed every time the player edits the content on the input box, once for each character changed.</li>

<p>The</p>

<code>addTextBox()</code>

<p>function returns a</p>

<code>CustomPromptTextBox</code>

<p>object, that you can then reference to change and read its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<p>You can access the last edited value on the textbox by fetching the</p>

<code>currentText</code>

<p>value of the returned object.</p>

<h3>Full Custom UI example</h3>

<p>Here's a full example of a custom UI:</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/ui-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>15</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>19</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-crypto-utils

# URL: https://github.com/decentraland/decentraland-crypto-utils

<title>GitHub - decentraland/decentraland-crypto-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-crypto-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>25</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>121</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-crypto-utils</h1>

<p>This library includes a number of helpful pre-built tools that help you deal with common requirements that involve and interacting with data on the blockchain.</p>

<h2>Using the Crypto library</h2>

<p>To use any of the helpers provided by the utils library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm i @dcl/crypto-scene-utils @dcl/ecs-scene-utils eth-connect -B</code>

<p>Note: This command also installs the latest version of the @dcl/ecs-scene-utils and eth-connect libraries, that are dependencies of the crypto utils library</p>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>crypto.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>MANA Operations</h2>

<p>As MANA is Decentraland's main currency, this library provides tools to make it especially easy to use in a scene.</p>

<h3>Send MANA to an address</h3>

<p>To make players in your scene send MANA to a specific address, use the</p>

<code>send()</code>

<p>function. This function requires the following arguments:</p>

<code>toAddress</code>

<li>: What ethereum address to send the MANA to</li>

<code>amount</code>

<li>: How many MANA tokens to send</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requests players to make a MANA payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, paying the required MANA sum plus an ETH gas fee dictated by the market at that time.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Get a player's MANA Balance</h3>

<p>Look up how much MANA a player has in their wallet. This is useful to know in advance if a player will be able to pay a fee or buy something from the Marketplace.</p>

<p>Check the current player's balance with</p>

<code>myBalance()</code>

<p>. This function doesn't require any arguments.</p>

<p>Check the balance of any other wallet with</p>

<code>balance()</code>

<p>. This function just requires the wallet address to check, as a string.</p>

<h2>Other Currencies</h2>

<p>Any currency token that adheres to the ERC20 standard can be handled by this library.</p>

<h3>Send</h3>

<p>To make players in your scene send a currency token to a specific address, use the</p>

<code>send()</code>

<p>function. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be sent</li>

<code>toAddress</code>

<li>: What ethereum address to send the tokens to</li>

<code>amount</code>

<li>: How many tokens to send</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requests players to make a DAI payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, paying the required DAI sum plus an ETH gas fee dictated by the market at that time. Once that transaction is accepted on Metamask, the door opens.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Check balance</h3>

<p>Look up how much of a coin a player has in their wallet. This is useful to know in advance if a player will be able to pay a fee or buy something in the scene.</p>

<p>Check the balance of any other wallet with</p>

<code>balance()</code>

<p>. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: Addess of the token's smart contract.</li>

<code>address</code>

<li>: Wallet address that you want to check the balance of.</li>

<h3>Other functions</h3>

<p>Call any functions that are available in a token's contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass the token's address as a parameter.</p>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<h2>NFTs</h2>

<p>Any non-fungible token that adheres to the ERC721 standard can be handled by this library. Other tokens that don't adhere to the standard but that share common methods with it can also have those methods accessed through the functions in this library.</p>

<h3>Transfer an NFT</h3>

<p>To make players in your scene transfer an NFT to a specific address, use the</p>

<code>transfer()</code>

<p>function. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be sent</li>

<code>toAddress</code>

<li>: What ethereum address to send the tokens to</li>

<code>tokenId</code>

<li>: The id of the specific token to send within the smart contract</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requires sending any wearable item to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to transfer the token.</p>

<pre>...</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, transfering the NFT token plus paying an ETH gas fee dictated by the market at that time. Once that transaction is accepted on Metamask, the door opens.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Check player for Tokens</h3>

<p>Check if a player holds any specific tokens in their wallet using</p>

<code>checkTokens()</code>

<p>. You can either check for any token that belogs to a given contract (eg: any cryptokitty), or for particular token IDs within that contract (eg: only for cryptokitty number 500 or 501).</p>

<p>This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be checked</li>

<code>tokenIds</code>

<li>: One or multiple token IDs to check player ownership. This can be a single number, or an array of multiple numbers.</li>

<p>The function returns</p>

<em>true</em>

<p>or</p>

<em>false</em>

<p>depending on if the player's wallet owns any of the indicated tokens.</p>

<h3>Other functions</h3>

<p>Call any functions that are available in a token's contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass the token's address as a parameter.</p>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<h2>Signing Messages</h2>

<p>Request a player to use the private key of their Ethereum wallet to sign a message.</p>

<p>This is a valuable security measure to validate that the player who owns that wallet was truly there, since the signature of a private key can't be forged. Several smart contracts also require passing signed strings as parameters.</p>

<p>Note: The string for the message to sign must start be preceded by</p>

<code>msg:</code>

<p>.</p>

<p>Whenever the</p>

<code>signMessage()</code>

<p>funcition is called, Metamask will open on the player's browser to request to accept signing the message.</p>

<p>The</p>

<code>signMessage()</code>

<p>function returns an object that contains:</p>

<code>message</code>

<li>: The original message that was signed, preceded by the string</li>

<code># DCL Signed messageâµmsg:</code>

<code>signature</code>

<li>: The string generated from encrypting the original message through the player's private key</li>

<h2>Decentraland contracts</h2>

<p>This library includes an enum list of all official Decentraland-released smart contracts, to easily refer to them when using the different functions.</p>

<p>A separate list exists for contracts on</p>

<code>mainnet</code>

<p>,</p>

<code>ropsten</code>

<p>,</p>

<code>kovan</code>

<p>and</p>

<code>rinkeby</code>

<p>networks.</p>

<h2>The Marketplace</h2>

<p>This library exposes several functions that allow players to interact directly with the Decentraland marketplace from inside a scene.</p>

<h3>Buy an item from the marketplace</h3>

<p>A player can buy an item that's on sale on the Decentraland marketplace without leaving a Decentraland scene, using the</p>

<code>executeOrder()</code>

<p>function.</p>

<p>This function takes three arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token being sold. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<code>price</code>

<li>:</li>

<em>number</em>

<li>The price being paid for the item, in MANA. This number is expressed in full MANA units, not in Wei.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The item needs to be currently published on sale in the Decentraland marketplace.</p>

<p>To buy the item, the player must give the Decentraland Marketplace permissions to operate with MANA on their behalf. If the player doesn't have these permissions set, the</p>

<code>executeOrder()</code>

<p>will ask for two transactions: one to set these permissions and one to do buy the item.</p>

<p>TIP: You can check to see if your wallet has these permissions set by going to the</p>

<p>and seeing if this checkbox is checked:</p>

<strong>Authorize the Marketplace contract to operate MANA on your behalf</strong>

<h3>Check the player's authorizations</h3>

<p>Before a player can buy on the Decentraland Marketplace, they need to give the Marketplace contract permissions to operate with MANA on their behalf. Before a player posts a new order to sell an item, they also need to give the Marketplace permissions to handle items of the contract that items belongs to.</p>

<p>If a player tries to run the</p>

<code>executeOrder()</code>

<p>function without the necessary permissions, the function will handle adding those permissions first.</p>

<p>To check if a player has the necessary permissions to buy with the Marketplace and has enough MANA in their balance, use</p>

<code>isAuthorizedAndHasBalance()</code>

<p>. This function requires one field:</p>

<code>price</code>

<li>:</li>

<em>string</em>

<li>How much MANA the player should have in their balance. This number is expressed in full MANA units, not in Wei.</li>

<p>This function returns</p>

<em>true</em>

<p>only if the player has MANA authorized for the Marketplace, and holds enough MANA currently.</p>

<p>To make the player approve MANA for spending in the Marketplace, you can use the</p>

<code>setApproval()</code>

<p>function of the</p>

<code>currency</code>

<p>section of this library, like so:</p>

<p>To check if a player has all of the possible permissions set up for the Marketplace, run the</p>

<code>isAuthorizedAll()</code>

<p>function. This function has one optional parameter</p>

<code>address</code>

<li>:</li>

<em>string</em>

<li>(optional) What player address to check for permissions. If no value is provided, it uses the current player running the scene.</li>

<p>This function returns an object with three main objects,</p>

<code>bidding</code>

<p>,</p>

<code>buying</code>

<p>, and</p>

<code>selling</code>

<p>. Each of these contains a field for each of the available contracts that might have permissions for that purpose, and for each of these contracts, there's an object containing the address and a boolean for the</p>

<code>authorized</code>

<p>status of that contract for that purpose.</p>

<p>Below is an extract of part of what the response looks like:</p>

<code>{

	bidding: {

		mana: { address: "0x0f5d2fb29fb7d3cfee444a200298f468908cc942", authorized: true}

	},

	buying: {

		mana: { address: "0x0f5d2fb29fb7d3cfee444a200298f468908cc942", authorized: true}

	}.

	selling: {

		communityContest: { address: "0x32b7495895264ac9d0b12d32afd435453458b1c6", authorized: true},

		(...)

	}

}</code>

<p>If permissions are missing, they can be added with the</p>

<code>setApproval()</code>

<p>function from the</p>

<code>currency</code>

<p>or the</p>

<code>nft</code>

<p>section of the library, depending on the case.</p>

<h3>Sell from a scene</h3>

<p>A player can put an item on sale on the Marketplace from within a Decentraland scene using the</p>

<code>createOrder()</code>

<p>function.</p>

<p>This function takes three arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token to sell. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<code>price</code>

<li>:</li>

<em>number</em>

<li>The price to set for the order, in MANA. This number is expressed in full MANA units, not in Wei.</li>

<code>expireAt</code>

<li>:</li>

<em>number</em>

<li>(optional) When to expire this offer, expressed as milliseconds since January 1, 1970, 00:00:00 UTC. If a value is not set, it defaults to one month from the present time.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The player creating the order needs to own the token being put on sale. The player must also have permissions set to allow the Marketplace contract to operate with this specific token contract. If it's a wearable, the player must have granted permissions for that specific wearable collection.</p>

<h3>Cancel the selling of a token</h3>

<p>A token that's on sale on the Marketplace can be taken off sale from within a scene, by using the</p>

<code>cancelOrder()</code>

<p>function.</p>

<p>This function takes two arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token to sell. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The player cancelling the order needs to be the creator of the order in the Marketplace and own the token being put on sale. The player must also have permissions set to allow the Marketplace contract to operate with this specific token contract. If it's a wearable, the player must have granted permissions for that specific wearable collection.</p>

<h2>Third parties operating tokens</h2>

<p>You can check if a given contract is allowed to handle a given token for a player, and otherwise carry out a transaction to allow it to.</p>

<p>Many smart contracts require to be given explicit permission by a wallet owner to operate with the token on their behalf, especially when the contract has the ability to remove tokens from the owner's balance.</p>

<h3>Currencies</h3>

<p>To check if a contract has permissions to handle a specific currency token for a player, use the</p>

<code>isApproved()</code>

<p>function. This function takes 3 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>owner</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<p>The</p>

<code>isApproved()</code>

<p>function returns a boolean indicating wether permissions are there or not.</p>

<p>To check how much is the maximum allowance that a contract has to handle a specific currency token for a player, use the</p>

<code>allowance()</code>

<p>function. This function takes three arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>owner</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<p>The</p>

<code>allowance()</code>

<p>function returns a string with the number of allowed currency, expressed in wei units.</p>

<p>To grant permissions to a contract to handle a specific currency token for a player, use the</p>

<code>setApproval()</code>

<p>function. This function takes 4 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, resolve promise when the transaction is mined on the blockchain</li>

<code>amount</code>

<li>:</li>

<em>string</em>

<li>(optional) Maximum amount of the currency to allow the spender to spend</li>

<h3>NFTs</h3>

<p>To check if a contract has permissions to handle a specific type of NFT for a player, use the</p>

<code>isApprovedForAll()</code>

<p>function. This function takes 3 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>assetHolder</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>operator</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to handle the token</li>

<p>The</p>

<code>isApproved()</code>

<p>function returns a boolean indicating wether permissions are there or not.</p>

<p>To grant permissions to a contract to handle a specific NFT for a player, use the</p>

<code>setApprovalForAll()</code>

<p>function. This function takes 4 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>operator</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<code>approved</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If</li>

<em>true</em>

<li>, sets the contract as approved for this NFT, if</li>

<em>false</em>

<li>, it removes these same approvals.</li>

<em>true</em>

<li>by default.</li>

<h2>Call functions from any contract</h2>

<p>Call any functions that are available in any smart contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass:</p>

<code>contractAdress</code>

<li>: The token's Ethereum smart contract address.</li>

<code>abi</code>

<li>: The ABI definition for the contract, where all of its functions and parameters are listed</li>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<p>You can obtain the ABI of a contract on etherscan. For example, if you go to the Etherscan page for the</p>

<p>, you can find the ABI by picking the</p>

<em>Contract</em>

<p>tab in the bottom section and then scrolling down. You can export the ABI to JSON, and add that as a file in your scene's project, or paste its contents into a</p>

<em>.ts</em>

<p>file in your scene's project.</p>

<h2>Avatar</h2>

<h3>Get user information</h3>

<p>To get information about an user, use the</p>

<code>getUserInfo()</code>

<p>function.</p>

<code>getUserInfo</code>

<p>has one optional argument:</p>

<code>address</code>

<li>:</li>

<em>string</em>

<li>which is the ETH address of a user</li>

<p>If an address is not specified, the function will use the address of the current user running the scene.</p>

<p>This example retrieves the data of an address and prints the username in console:</p>

<p>The</p>

<code>getUserData()</code>

<p>function returns the following information:</p>

<code>content</code>

<li>: An array containing four objects, each with the path to a different screenshot of the player: a full body image, and three versions of the face in full and in thumbnail resolution.</li>

<code>metdta</code>

<li>: An object that includes:</li>

<code>avatar</code>

<li>: All of the wearables and configurations on the avatar</li>

<code>inventory</code>

<li>: All of the wearables the player owns</li>

<code>ethAddress</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player's Ethereum wallet. If the player has no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>name</code>

<li>: The player's user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.

the player's email and bio if present.</li>

<code>timestamp</code>

<li>: A timestamp for the time this data was fetched.</li>

<p>Note: For any Ethereum transactions with the player, always use the</p>

<code>ethAddress</code>

<p>field, instead of the</p>

<code>userId</code>

<p>.</p>

<h3>Get a user's snapshot images</h3>

<p>Use</p>

<code>getPlayerSnapshots()</code>

<p>to fetch a set of URLs for snapshots of the player wearing the current wearables they have on. These snapshots are available in different resolutions, and both of the face and full body.</p>

<p>The response contains the following data:</p>

<code>face</code>

<li>: URL for the full resolution image of the face, with 512x512 pixels</li>

<code>face128</code>

<li>: URL for the face as a 128x128 pixel image</li>

<code>face256</code>

<li>: URL for the face as a 256x256 pixel image</li>

<code>body</code>

<li>: URL for the full resolution image of the face, with 512x1024 pixels</li>

<p>Optionally pass a player id to fetch the snapshots of that player's particular avatar, it will otherwise fetch the snapshots of the player's avatar.</p>

<pre>:</pre>

<p>This example fetches the snapshots from a specific player, then sets that as a texture on a plane.</p>

<h3>Get user inventory</h3>

<p>To fetch the full inventory of wearable items owned by a player, use the</p>

<code>getUserInventory()</code>

<p>function.</p>

<code>getUserInventory</code>

<p>has one optional argument:</p>

<code>address</code>

<li>:</li>

<em>string</em>

<li>which is the ETH address of an user</li>

<p>If an address is not specified, the function will use the address of the current user running the scene.</p>

<p>This example retrieves the inventory of an address and print a list of items in the console:</p>

<p>This function returns an array with the full names of each wearabe, for example:</p>

<code>["dcl://halloween_2019/zombie_suit_mask", "dcl://community_contest/cw_tuxedo_tshirt_upper_body", "dcl://dcl_launch/mana_hoodie_upper_body"]</code>

<h3>Check if a player has an item</h3>

<p>To check if an item is in the inventory of a player, use the</p>

<code>itemInInventory</code>

<p>function.</p>

<code>itemInInventory</code>

<p>has one required and one optional argument:</p>

<code>wearable</code>

<p>:</p>

<em>string</em>

<p>which is the name of a wearable (e.g.:</p>

<code>dcl://dcl_launch/razor_blade_upper_body</code>

<p>)</p>

<code>equiped</code>

<p>:</p>

<em>boolean</em>

<p>(optional) if true, the player must have the item currently equipped (default: false)</p>

<p>This example checks if the player has the</p>

<em>Razor Blade Jacket</em>

<p>wearable equiped. If so, the function returns</p>

<em>true</em>

<p>.</p>

<p>Tip: You can find out the full name of a wearable by using</p>

<code>getListOfWearables()</code>

<p>to get a full list of all wearables supported by Decentraland, with all their information.</p>

<h3>Check if a player has one of several items</h3>

<p>To check if at least one of several items are in the inventory of a player, use the</p>

<code>itemsInInventory</code>

<p>function.</p>

<code>itemsInInventory</code>

<p>has one required and one optional argument:</p>

<code>wearables</code>

<p>:</p>

<em>string[]</em>

<p>An array with the string names of the wearables to look for (e.g.:</p>

<code>["dcl://dcl_launch/razor_blade_upper_body", "dcl://community_contest/cw_tuxedo_tshirt_upper_body"]</code>

<p>).</p>

<code>equiped</code>

<p>:</p>

<em>boolean</em>

<p>(optional) if true, the player must have one of the items currently equipped (default: false).</p>

<p>This example checks if the player has the Razor Blade Jacket equiped or the Tuxedo Shirt. If so, the function returns</p>

<em>true</em>

<p>.</p>

<p>Tip: You can find out the full name of a wearable by using</p>

<code>getListOfWearables()</code>

<p>to get a full list of all wearables supported by Decentraland, with all their information.</p>

<h3>Get the rarity of the player's rarest item</h3>

<p>Use the</p>

<code>rarestItem()</code>

<p>function to find out what's the rarest item that the player owns.</p>

<p>It returns the rarity category as a value from the</p>

<code>rarityLevel</code>

<p>enum.</p>

<code>rarestItem()</code>

<p>has one optional argument:</p>

<code>equiped</code>

<li>:</li>

<em>boolean</em>

<li>(optional) if true, only the items currently equipped are considered.</li>

<p>This example checks what's the rarest item owned and logs the category name.</p>

<p>Tip: To see the name of the rarity category, rather than the index, reference the</p>

<code>rarityLevel</code>

<p>enum, for example</p>

<code>rarityLevel[response]</code>

<p>.</p>

<h3>Get data of all wearables</h3>

<p>To fetch a list of wearables supported by Decentraland, including their full names, categories, contracts, etc, call the</p>

<code>getListOfWearables()</code>

<p>. This function supports the following filters:</p>

<pre>collectionIds:</pre>

<pre>wearableIds:</pre>

<pre>textSearch:</pre>

<pre>:</pre>

<p>This function returns an array of wearables.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/crypto-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>11</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>10</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-crypto-utils

# Change to URL: https://github.com/decentraland/decentraland-l2-utils

# URL: https://github.com/decentraland/decentraland-l2-utils

<title>GitHub - decentraland/decentraland-l2-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-l2-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>10</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>37</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-l2-utils</h1>

<p>This library includes a number of helpful pre-built tools that help you deal with common requirements that involve and interacting with data on the second layer blockchain.</p>

<h2>Using the L2 library</h2>

<p>To use any of the helpers provided by the utils library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm i @dcl/l2-scene-utils eth-connect decentraland-transactions -B</code>

<p>Note: This command also installs the latest version of the decentraland-transactions and eth-connect libraries, that are dependencies of the l2 utils library</p>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add those lines at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<pre>mana</pre>

<h2>MANA Operations</h2>

<p>As MANA is Decentraland's main currency, this library provies tools to make it especially easy to use in a scene.</p>

<h3>Get balance of an address</h3>

<p>To check the balance of a specific address in MANAwei, use the</p>

<code>balance()</code>

<p>function. This function has an optional argument:</p>

<code>address</code>

<li>: Ethereum address to check, if not provided, it will check the balance of the</li>

<pre>mana</pre>

<h3>Send MANA to an address</h3>

<p>To make players in your scene send MANA to a specific address, use the</p>

<code>transfer()</code>

<p>function. This function requires the following arguments:</p>

<code>to</code>

<li>: What ethereum address to send the MANA to</li>

<code>amount</code>

<li>: How many MANAwei to send</li>

<p>For example, your scene can have a button that requests players to make a MANA payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<pre>mana</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction.

Once that transaction is sent on the Matic network, the door opens.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/l2-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>17</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>9</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-l2-utils

# Change to URL: https://github.com/decentraland/show-management

# URL: https://github.com/decentraland/show-management

<title>GitHub - decentraland/show-management: Utility to schedule shows as well as synchronize actions with a show</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Utility to schedule shows as well as synchronize actions with a show</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/show-management</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>11</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>115</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Show Management</h2>

<p>Show Management Library enables you to schedule videos and synchronize actions with those videos to make a much more immersive show.</p>

<h1>Show Manager Documentation</h1>

<h2>Video Tutorial</h2>

<h2>Install</h2>

<p>To use any of the helpers provided by this library:</p>

<p>Install it as an npm package. Run this command in your scene's project folder:</p>

<code>npm i @dcl/show-management</code>

<p>Add this line at the start of your game.ts file, or any other TypeScript files that require it:</p>

<p>To be recognized you may also have to add an entry in tsconfig.json under paths</p>

<code>{

  "compilerOptions": {

    ...

    "paths": {

		 "@dcl/show-management": [

		        "node_modules/@dcl/show-management/dist/index.d.ts",

		        "node_modules\\@dcl\\show-management\\dist\\index.d.ts"

		      ]

	}

	...

}</code>

<h2>Usage</h2>

<h3>Show Manager</h3>

<p>You will need need to create a ShowManager instance to start and assign it a schedule</p>

<pre>:</pre>

<pre>...</pre>

<h3>Configure Shows</h3>

<p>You must create showData that will define what shows to play and when.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>NOTE:  You maybe tempted to use ISO 8601 date format however there is no garetee 100% support it will be parsed correctly.  ISO 8601 format is the most universally supported however you cannot rely on correct implementation of the standard.</p>

<code>new Date("2022-05-09T16:39:00-04:00").getTime()/1000 //use at your own risk</code>

<p>Here is one of many free helpful converter tools</p>

<p>to you convert to date and time to seconds for startTime</p>

<h4>Configure Show Example</h4>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Syncing Actions to Video</h3>

<p>To sync action to video we make use of a subtitle file format called SubRip Subtitle (SRT).</p>

<p>If you would like to learn more about SRT format check these out</p>

<p>Here is the same SRT example but with comments explaining the components</p>

<p>Credit</p>

<p>Here is an example SRT format with actions in it</p>

<code>1

00:00:01,000 --> 00:00:01,033

ANNOUNCE {"text":"Welcome to our show","duration":3}

ANIMATE djTable {"animationName":"deckTableOn", "loop":true,"bpmSync":true}</code>

<p>See</p>

<p>for how the actions in the subtitle file come to life in your scene</p>

<h3>Run Your Show</h3>

<p>You will need need to create a RunOfShowSystem instance should you want the show to play by it self when the startTime dictage</p>

<h3>Event Listeners</h3>

<p>The Show Manager has no knowlege of your scene and how it should react to the videos.  So your scene react to show events registering to the provided event listeners</p>

<li>addStopShowListeners</li>

<li>addPlayVideoListeners</li>

<li>addVideoStatusChangeListener</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<h3>Display the Show Video</h3>

<p>The Show Manager will create a video texture but does not know where to put it in your scene.  You can register to SHOW_MGR.addPlayVideoListeners and assign the video texture where it needs to go.</p>

<pre>:</pre>

<h3>Perform a specific action for a certian show</h3>

<p>In this example I want to show a countdown to when the next show will be.  Register a listener to  addPlayVideoListeners and perform your logic there</p>

<pre>:</pre>

<h3>Enable Debug UI</h3>

<h3>Show Action Handlers</h3>

<p>Show action handlers are what convert the commands in the subtitle file into something in your scene</p>

<p>There are three types of handlers provided.  Ones that have all the functionality they need and some that need you extend them.  The latter require you to define how they function because there is no way to know exactly how each show will want to implement it.  For example the PAUSE action could mean lots of things, pause 1 animation but play another, hide one entity but show a different entity.  There is no way to predict all this so you must define it.  The third type are onces that you make yourself.</p>

<p>Provided handlers with all functionality provided include</p>

<li>ShowAnimationActionHandler</li>

<li>ShowBpmActionHandler</li>

<li>DefineTargetGroupActionHandler</li>

<li>ShowAnounceActionHandler</li>

<p>Handlers that are recommended you to extend them by defining how they should function</p>

<li>ShowPauseAllActionHandler</li>

<li>ShowStopAllActionHandler</li>

<h4>Show Action Handler Interface</h4>

<p>All action handlers implement a ShowActionHandler.  Matches(), Execute() and DecodeAction() are the most important methods.  Matches tests to see if the handler can process the action,  Execute processes it and DecodeAction provides a way to parse the action to a more structured object</p>

<code>interface ShowActionHandler<T>{

  // will test if the action sent can be procssed by this handler  

  matches(action:string,showActionMgr:ShowActionManager):boolean

  

  // if matches() returns true, execute will be called to process the action 

  execute(action:string,showActionMgr:ShowActionManager):void

  

  // Will decode/parse the action into a more meaningful structure 

  decodeAction(action:string,showActionMgr:ShowActionManager):ActionParams<T>

  

  ....

}</code>

<h4>Parsing Actions</h4>

<p>The library provides a basic parser</p>

<code>showMgmt.parseActionWithOpts</code>

<p>.  Expected a pattern of:</p>

<code>ACTION_NAME TEXT_NO_SPACES TEXT_NO_SPACES2 ... (optional JSON string to be parsed as the very end)</code>

<p>The return object looks like this</p>

<code>type ActionParams<T>={

  array?:string[] //parameters split on whitespace

  params?:T // JSON object here if one passed

}</code>

<p>Example</p>

<code>const exampleAction = 'ANIMATE djTable {"animationName":"deckTableOn", "loop":true,"bpmSync":true}'

//when parsed

const parsedActionParams = showMgmt.parseActionWithOpts( exampleAction )

//output will be 

{

  array: ["ANIMATE","djTable",'{"animationName":"deckTableOn", "loop":true,"bpmSync":true}'],

  params: {"animationName":"deckTableOn", "loop":true,"bpmSync":true}

}</code>

<p>You can implement your own parser if need be.</p>

<h4>Override Action Handler Behavior</h4>

<p>To define override an action handler should behave, you must provide a process method.  In this example here it defines how the Anounce action handler should behave.</p>

<p>You can initiate your own version of the class</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>OR fetch the existing one and overwrite its process callback</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Extend Action Handler Behavior</h4>

<p>To extend an action handler behavior, can provide processExt method.  In this example here it defines how to extend PauseAll action handler.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>OR add an onProcessListerner.  The benefit of this is you can register as many actions as you need when you need.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Make Your Own Show Action Handler</h3>

<p>Here is an example of how to make your very own action handler.  In this example we make a new action named "SAY" followed by the text to be said and register it to the show manager.</p>

<p>An example where no arguments are required</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Example where you want to pass arguments.</p>

<pre>?:</pre>

<pre>?:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>?</pre>

<pre>:</pre>

<h3>Adjust Logging Levels</h3>

<p>To avoid flooding logs each class has its own logger named by class name.  You can adjust logging levels for all classes or just a few to suit your needs</p>

<p>Classes of interest</p>

<li>ShowManager - manager class that is called to play shows</li>

<li>RunOfShowSystem - system that processes showSchedule and decides which show to play at the correct time</li>

<li>SubtitleVideoSystem - system that processes video events</li>

<li>SubtitleSystem - system that handles processing subtitles</li>

<li>ShowActionManager - processes an actions to be sent to a handler</li>

<li>ShowActionHandler - the action handlers them self</li>

<pre>:</pre>

<h2>How the Show Management Library Syncs Actions to Videos</h2>

<p>To be able to sync actions to videos we need to know where in the video we are (video currentOffset).</p>

<pre>sequenceDiagram

    

    ShowManager->> ShowManager : playVideo

    ShowManager->> VideoSystem : init

    VideoSystem->>onVideoEvent: subscribe

    VideoSystem->> SubtitleSystem : init

    loop onVideo event

        onVideoEvent->>VideoSystem: notify video event

    end

    ShowManager->> SubtitleSystem : subscribe.onCueBeginListeners

    loop onUpdate(dt)

        VideoSystem->>SubtitleSystem: time progressed

        loop check for cues to fire

            SubtitleSystem->>SubtitleSystem: check for cues to fire

            SubtitleSystem->>SubtitleSystem : onCueBeginListeners: notify cue began

            SubtitleSystem-->>ShowManager : runAction

        end

    end</pre>

<p>The onVideoEvent listener tells us the video is playing, paused, buffering etc.  The onVideoEvent also provides currentOffset which is the video currentOffset time.  You may be wondering why dont we just use onVideoEvent.  It is because the update event does not fire frequently enough to get precise time.  If we only need to know currentOffset updated every second or we would be done.    But for syncing of actions to video we need it to be much more precise.</p>

<p>The VideoSystem keeps track of the delta time from the game clock.  The onVideoEvent listener tells the system when the video is playing.  While the video is playing the system can increment its estimatedOffset using the currentOffset provided by the onVideoEvent listener.  We can now keep track of what time in the video we are at with subsecond precision.</p>

<p>Now that we have precision video offset we can make use of a SubtitleSystem.  The system reads in an SRT format and using the known video offset decides which actions to fire.</p>

<h3>Class Diagram</h3>

<pre>classDiagram

ShowManager "1" o-- "1" SubtitleVideoSystem : Manages Video and Subtitle

SubtitleVideoSystem --|> VideoSystem

SubtitleVideoSystem "1" o-- "1" SubtitleSystem

VideoSystem : VideoTexture videoTexture

VideoSystem --o onVideoEvent

ShowManager "1" o--  "1" ShowActionManager : managers actions

ShowActionManager "1" o--  "*" ShowEntity : registers

ShowActionManager "1" o--  "*" ShowActionHandler : registers

RunOfShowSystem o-- ShowManager : Schedules Videos

class ISystem{

    <<interface>>

    update(dt:number)

}

class onVideoEvent{

    add(listener)

}

class RunOfShowSystem{

    update(dt:number)

}

class ShowActionManager{

    registerShowEntity(name:string,object:any)

    registerHandler(action:ShowActionHandler<any>)

    processAction(action:string,handler:ShowActionHandler<any>)

    runAction(action: string)

}

class ShowEntity{

  appear:() => void

  hide:() => void

  play:() => void

  stop:() => void

  triggerEvent: (index: number)=>void

}

class ShowActionHandler{ 

  matches(action:string,showActionMgr:ShowActionManager):boolean

  execute(action:string,showActionMgr:ShowActionManager):void

  getName():string

  addOnProcessListener(listener:OnProcessListener<ActionParams<T>>):void

  removeOnProcessListener(listener:OnProcessListener<ActionParams<T>>):void

  decodeAction(action:string,showActionMgr:ShowActionManager):ActionParams<T>

}

class ShowManager{

    pause()

    play()

    startShow(showData: ShowType) 

    playVideo(showData: ShowType, offsetSeconds: number)

    addVideoStatusChangeListener(listener:VideoChangeStatusListener)

    addPlayVideoListeners(callback:(event:PlayShowEvent)=>void)

    addStopShowListeners(callback:(event:StopShowEvent)=>void)

    enableDebugUI(val:boolean)

}

class SubtitleSystem{

    addCueListener(listener:(cue: NodeCue,event:SubtitleCueEvent))

    onCueBegin(cue: NodeCue)

}</pre>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Utility to schedule shows as well as synchronize actions with a show</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=6

# URL: https://github.com/orgs/decentraland/repositories?page=6

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Safe FFmpeg wrapper.</p>

<p>VSCode extension for Decentraland SDK6</p>

<p>SDK Playground</p>

<p>Queries to build the Scenes Ranking</p>

<p>The Graph indexing for the Rentals contract</p>

<p>Official open source React components and examples for building with LiveKit.</p>

<p>Portable Experience Sample</p>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<p>A</p>

<p>graph detaling the ownership and permissions of Land</p>

<p>Catalyst, POIs, Ban Names list</p>

<p>Skyboxes for Explorer</p>

<p>UI to deploy vesting contracts using a minimal proxy</p>

<p>An idiomatic protobuf generator for TypeScript</p>

<p>Efficient glTF 3D import / export package for Unity</p>

<p>About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</p>

<p>Import crashbot data</p>

<p>Avatars smart contract</p>

<p>Scripts for deploying testnet contracts.</p>

<em>6</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer-desktop-launcher

# URL: https://github.com/decentraland/explorer-desktop-launcher

<title>GitHub - decentraland/explorer-desktop-launcher</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-desktop-launcher</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>52</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>112</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Explorer Desktop Launcher</h1>

<p>A launcher to auto update the</p>

<code>unity-renderer</code>

<p>(</p>

<p>)</p>

<h2>Available Scripts</h2>

<code>npm run start</code>

<p>Runs the Electron app in the development mode.</p>

<p>The Electron app will reload if you make edits in the</p>

<code>electron</code>

<p>directory.</p>

<p>You will also see any lint errors in the console.</p>

<h4>Custom arguments</h4>

<p>Use</p>

<code>-- <args></code>

<p>to specify custom arguments</p>

<code>--developer-mode</code>

<li>open the application in Developer Mode (with DevTools)</li>

<code>--custom-url <url></code>

<li>overrides the url, in Developer Mode it can be changed later</li>

<code>--desktop-branch <branch_name></code>

<li>downloads the renderer of the specified branch and uses the corresponding browser-interface</li>

<code>--desktop-version <version></code>

<li>downloads the renderer of the specified version and uses the corresponding browser-interface</li>

<p>e.g.</p>

<code>npm run start -- --developer-mode --desktop-branch main</code>

<code>npm run build</code>

<p>Builds the Electron app package for production to the</p>

<code>dist</code>

<p>folder.</p>

<p>Your Electron app is ready to be distributed!</p>

<code>npm run publish</code>

<p>Build and publish</p>

<h2>Project directory structure</h2>

<pre>my-app/

âââ package.json

â</pre>

<pre>âââ tsconfig.json

âââ public/

â</pre>

<pre>âââ electron/

âÂ Â  âââ main.ts

âÂ Â  âââ tsconfig.json

â</pre>

<pre>âââ build/

âÂ Â  âââ index.html

âÂ Â  âââ static/

âÂ Â  â   âââ css/

âÂ Â  â   âââ js/

âÂ Â  â

âÂ Â  âââ electron/

âÂ Â  Â Â  âââ main.js

â</pre>

<pre>âââ dist/

 Â Â  âââ mac/

 Â Â  âÂ Â  âââ my-app.app

 Â Â  âââ my-app-0.1.0.dmg</pre>

<h2>Artifacts</h2>

<h2>Custom protocol</h2>

<p>The custom protocol is using the prefix</p>

<code>dcl://</code>

<p>We can add the following parameters to the custom protocol to change the behaviour of the Launcher.</p>

<code>DESKTOP-BRANCH=main</code>

<li>: Downloads the renderer of the specified branch</li>

<code>DESKTOP-VERSION=1.0.325-20220517164352.commit-e28a414</code>

<li>: Downloads the renderer of the specified version</li>

<code>DESKTOP-DEVELOPER-MODE</code>

<li>: Open the application in Developer Mode (with DevTools)</li>

<code>PREVIEW-MODE=url</code>

<li>: Opens in PREVIEW MODE the specified URL (confirmation needed)</li>

<p>If you add another parameter, it will be forwarded to the final URL.

For example, if we use</p>

<code>position=10,10&realm=thor</code>

<p>it will be similar as opening:</p>

<p>Example:</p>

<code>dcl://DESKTOP-BRANCH=main&position=10,10&realm=thor</code>

<p>It will use the last desktop renderer version from the</p>

<code>main</code>

<p>branch, and you will enter position 10,10 in the realm</p>

<code>thor</code>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>12</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-explorer-desktop-launcher

# Change to URL: https://github.com/decentraland/rust-ffmpeg

# URL: https://github.com/decentraland/rust-ffmpeg

<title>GitHub - decentraland/rust-ffmpeg: Safe FFmpeg wrapper.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Safe FFmpeg wrapper.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rust-ffmpeg</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>578</strong>

<h2>Files</h2>

<button>View code</button>

<p>This is a fork of the abandoned</p>

<p>crate by</p>

<p>.</p>

<p>Currently supported FFmpeg versions: 3.4.x through 4.4.x.</p>

<p>Build instructions can be found on the</p>

<p>.</p>

<p>Documentation:</p>

<li>;</li>

<li>;</li>

<li>.</li>

<em>Note on upgrading to v4.3.4 or later: v4.3.4 introduced automatic FFmpeg version detection, obsoleting feature flags</em>

<code>ffmpeg4</code>

<em>,</em>

<code>ffmpeg41</code>

<em>,</em>

<code>ffmpeg42</code>

<em>and</em>

<code>ffmpeg43</code>

<em>. If you manually specify any of these features, now is the time to remove them; if you use</em>

<code>ffmpeg43</code>

<em>through the</em>

<code>default</code>

<em>feature, it's still on for backward-compatibility but it has turned into a no-op, and you don't need to do anything. Deprecation plan:</em>

<code>ffmpeg43</code>

<em>will be dropped from default features come 4.4, and all these features will be removed come 5.0.</em>

<em>See</em>

<em>for other information on version upgrades.</em>

<p>A word on versioning: major and minor versions of this crate track major and minor versions of FFmpeg, e.g. 4.2.x of this crate has been updated to support the 4.2.x series of FFmpeg. Patch level is reserved for changes to this crate and does not track FFmpeg patch versions. Since we can only freely bump the patch level, versioning of this crate differs from semver: minor versions may behave like semver major versions and introduce backward-incompatible changes; patch versions may behave like semver minor versions and introduce new APIs. Please peg the version you use accordingly.</p>

<strong>Please realize that this crate is in maintenance-only mode for the most part.</strong>

<p>Which means I'll try my best to ensure the crate compiles against all release branches of FFmpeg 3.4 and later (only the latest patch release of each release branch is officially supported) and fix reported bugs, but if a new FFmpeg version brings new APIs that require significant effort to port to Rust, you might have to send me a PR (and just to be clear, I can't really guarantee I'll have the time to review). Any PR to improve existing API is unlikely to be merged, unfortunately.</p>

<p>ð¤</p>

<strong>If you have significant, demonstrable experience in Rust and multimedia-related programming, please let me know, I'll be more than happy to invite you as a collaborator.</strong>

<p>ð¤</p>

<h2>About</h2>

<p>Safe FFmpeg wrapper.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>181</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/editor-sdk6

# URL: https://github.com/decentraland/editor-sdk6

<title>GitHub - decentraland/editor-sdk6: VSCode extension for Decentraland SDK6</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>VSCode extension for Decentraland SDK6</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/editor-sdk6</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>61</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>129</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Editor SDK6</h1>

<p>This extension includes the following features for Decentraland SDK6 projects:</p>

<strong>Create projects</strong>

<li>: Scaffold a new project of various types: scene, library, portable experience, and smart item.</li>

<strong>Run scenes</strong>

<li>: preview your scenes within VSCode, or launch in a browser.</li>

<strong>Debug scenes</strong>

<li>: set breakpoints, use the debugger to stop/resume execution, see and modify the values of the variables in the scope, step over or step into your code line by line.</li>

<strong>Publish scenes</strong>

<li>: publish your scene to the Genesis City, your own World, or a private/custom server.</li>

<strong>Manage dependencies</strong>

<li>: add, remove, and list the libraries and dependencies that your project is using.</li>

<strong>Preview models</strong>

<li>: you will get an interactive preview when selecting a</li>

<code>.gltf</code>

<li>or</li>

<code>.glb</code>

<li>model.</li>

<h2>About</h2>

<p>VSCode extension for Decentraland SDK6</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-editor-sdk6

# Change to URL: https://github.com/decentraland/sdk-playground

# URL: https://github.com/decentraland/sdk-playground

<title>GitHub - decentraland/sdk-playground: SDK Playground</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>SDK Playground</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-playground</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>17</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>61</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK Playground</h1>

<p>SDK Playground is a React App that embed the Decentraland Preview to create scene and a code editor.</p>

<h2>About</h2>

<p>SDK Playground</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dao-scenes-ranking

# URL: https://github.com/decentraland/dao-scenes-ranking

<title>GitHub - decentraland/dao-scenes-ranking: Queries to build the Scenes Ranking</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Queries to build the Scenes Ranking</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dao-scenes-ranking</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DAO Scenes Ranking</h1>

<p>Queries to reproduce the Scenes Ranking.</p>

<p>First, you need to have available these raw datasets as a table:</p>

<li>rel_scenes_tiles (Link AWS)</li>

<li>scene_wallet_movement (Link AWS)</li>

<li>scene_ranking_weights (Link AWS)</li>

<p>The following queries should be executed on the order below:</p>

<li>scene_visit_web3.sql -> All visits and stay durations to each scene by user that are then</li>

<li>scene_visit_aggregated.sql -> Metrics with the aggregated user activities for each scene</li>

<li>top_scenes_monthly.sql -> We keep the top 100 scenes in terms of visits</li>

<li>scene_ranking_monthly.sql -> The top 100 scenes are ranked according to visists, unique visitors, length of scene stays, retention and returning visists from the same users. The rankings for each metric are taken into account to create a final ranking.</li>

<li>scene_ranking_winners_monthly.sql -> The final winners list, these are going to be the 30 tile owners that had the best scenes, with only the best scene of each owner taken into consideration.</li>

<p>These queries have place holders in the</p>

<code>FROM</code>

<p>statements, you should manually replace them with references to the actual tables on your local db.</p>

<h2>About</h2>

<p>Queries to build the Scenes Ranking</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rentals-graph

# URL: https://github.com/decentraland/rentals-graph

<title>GitHub - decentraland/rentals-graph: The Graph indexing for the Rentals contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>The Graph indexing for the Rentals contract</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rentals-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Rentals graph</h1>

<th>Network</th>

<th>Provider</th>

<th>URL</th>

<th>Current</th>

<th>Previous</th>

<td>Mainnet</td>

<td>Hosted Services</td>

<td>QmcMk21Jdeng7SWv8yqhskhKbykqgH12vE64cnNhzSbXJ8</td>

<td>QmXCbUvhaH7f21sTaD5VtX8ExShUvcCEfV2nPEntTWeAJw</td>

<td>Mainnet</td>

<td>Satsuma</td>

<td>QmcMk21Jdeng7SWv8yqhskhKbykqgH12vE64cnNhzSbXJ8</td>

<td>QmXCbUvhaH7f21sTaD5VtX8ExShUvcCEfV2nPEntTWeAJw</td>

<td>Sepolia</td>

<td>Graph Studio</td>

<td>QmT5YoctTWsbL9LYytTUR8qTXset7seqThgsvccs8YzQyA</td>

<td>-</td>

<td>Goerli</td>

<td>Hosted Services</td>

<td>QmdWQ9zhgAFMEn1Fne6CdJr2bn9yTUnsDbYLeyuttXhq9v</td>

<td>QmPrRyB6npHxp1wqgsYiP4YYSYjjLujGPiDkcoBnjw8KVE</td>

<p>Using</p>

<p>and</p>

<h3>Install</h3>

<pre>npm run ci</pre>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<h4>Get totals</h4>

<h2>About</h2>

<p>The Graph indexing for the Rentals contract</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-rentals-graph

# Change to URL: https://github.com/decentraland/holodeck

# URL: https://github.com/decentraland/holodeck

<title>GitHub - decentraland/holodeck</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/holodeck</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Wearable Preview</h1>

<p>This webapp renders an interactive 3D preview of a wearable or an avatar. It can be configured via query params or via</p>

<code>postMessage</code>

<p>:</p>

<code>contract</code>

<li>: The contract address of the wearable collection.</li>

<code>item</code>

<li>: The id of the item in the collection.</li>

<code>token</code>

<li>: The id of the token (to preview a specific NFT).</li>

<code>profile</code>

<li>: an ethereum address of a profile to load as the base avatar. It can be set to</li>

<code>default</code>

<li>to use a default profile.</li>

<code>urn</code>

<li>: a URN of a wearable or an emote to load. If it is a wearable, it will override anything loaded from a profile. It can be used many times.</li>

<code>url</code>

<li>: a URL of a wearable or an emote to load. If it is a wearable, it will override anything loaded from a profile. It can be used many times. The url will be fetched and must return a valid definition following the</li>

<code>WearableDefinition</code>

<li>or</li>

<code>EmoteDefinition</code>

<li>types.</li>

<code>base64</code>

<li>: a wearable or an emote to load, encoded in base64. If it is a wearable, it will override anything loaded from a profile. It can be used many times. Once parsed it should be a valid definition following the</li>

<code>WearableDefinition</code>

<li>or</li>

<code>EmoteDefinition</code>

<li>types.</li>

<code>skin</code>

<li>: a color to be used by the skin material, it must be in hex.</li>

<code>hair</code>

<li>: a color to be used by the hair material, it must be in hex.</li>

<code>eyes</code>

<li>: a color to be used by the eyes tint, it must be in hex.</li>

<code>bodyShape</code>

<li>: which body shape to use, possible values are</li>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<li>or</li>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<li>.</li>

<code>emote</code>

<li>: the emote that the avatar will play. Default value is</li>

<code>idle</code>

<li>, other possible values are:</li>

<code>clap</code>

<li>,</li>

<code>dab</code>

<li>,</li>

<code>dance</code>

<li>,</li>

<code>fashion</code>

<li>,</li>

<code>fashion-2</code>

<li>,</li>

<code>fashion-3</code>

<li>,</li>

<code>fashion-4</code>

<li>,</li>

<code>love</code>

<li>,</li>

<code>money</code>

<li>,</li>

<code>fist-pump</code>

<li>and</li>

<code>head-explode</code>

<li>.</li>

<code>zoom</code>

<li>: the level of zoom, it must be a number between 1 and 100.</li>

<code>camera</code>

<li>: which camera type to use, either</li>

<code>interactive</code>

<li>or</li>

<code>static</code>

<li>. By default it uses the</li>

<code>interactive</code>

<li>one.</li>

<code>projection</code>

<li>: which projection type to use, either</li>

<code>orthographic</code>

<li>or</li>

<code>perspective</code>

<li>. By default it uses the</li>

<code>perspective</code>

<li>one.</li>

<code>offsetX</code>

<li>: apply an offset in the X position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>offsetY</code>

<li>: apply an offset in the Y position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>offsetZ</code>

<li>: apply an offset in the Z position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>cameraX</code>

<li>: set the X position of the camera.</li>

<code>cameraY</code>

<li>: set the Y position of the camera.</li>

<code>cameraZ</code>

<li>: set the Z position of the camera.</li>

<code>wheelZoom</code>

<li>: a multiplier of how much the user can zoom with the mouse wheel. By default is</li>

<code>1</code>

<li>, which means the wheel doesn't do any zoom. If the value were</li>

<code>2</code>

<li>the user would be able to zoom up to 2x.</li>

<code>wheelPrecision</code>

<li>: the higher the value, the slower the wheel zooms when scrolled. By default is</li>

<code>100</code>

<li>.</li>

<code>wheelStart</code>

<li>: a value between 0 and 100 which determines how zoomed in or out the wheel starts. By default is</li>

<code>50</code>

<li>, so the user can zoom in or out. If the value were</li>

<code>0</code>

<li>the zoom would start at minimum and the user would be able to zoom in. If the value were</li>

<code>100</code>

<li>the zoom would start at max and the user would be able to zoom out.</li>

<code>background</code>

<li>: the color of the background in hex, ie:</li>

<code>ff0000</code>

<li>.</li>

<code>peerUrl</code>

<li>: set a custom url for a Catalyst peer.</li>

<code>nftServerUrl</code>

<li>: set a custom url for the NFT API.</li>

<code>disableBackground</code>

<li>: if</li>

<code>true</code>

<li>it will make the background transparent.</li>

<code>disableAutoRotate</code>

<li>: if</li>

<code>true</code>

<li>it will disable the auto-rotate behaviour of the camera.</li>

<code>disableAutoCenter</code>

<li>: if</li>

<code>true</code>

<li>it will disable the auto-center around the bounding box.</li>

<code>disableFace</code>

<li>: if</li>

<code>true</code>

<li>it will disable the facial features.</li>

<code>disableDefaultWearables</code>

<li>: if</li>

<code>true</code>

<li>it will not load the default wearables (it will only load the base body shape).</li>

<code>disableFadeEffect</code>

<li>: if</li>

<code>true</code>

<li>it will disable css transitions (the fade in / fade out effect). This is useful for automation tests.</li>

<code>disableDefaultEmotes</code>

<li>: if</li>

<code>true</code>

<li>and</li>

<code>emote</code>

<li>is not passed, it will not load the default IDLE emote.</li>

<code>showSceneBoundaries</code>

<li>: if</li>

<code>true</code>

<li>it will show a cylinder representing the recommended scene boundaries.</li>

<code>showThumbnailBoundaries</code>

<li>: if</li>

<code>true</code>

<li>it will show a square representing the thumbnail boundaries.</li>

<code>env</code>

<li>: The environment to use, it can be</li>

<code>prod</code>

<li>(uses mainnet wearables and catalysts) or</li>

<code>dev</code>

<li>(uses testnet wearables and catalysts).</li>

<p>Example:</p>

<code>iframe</code>

<h3>API:</h3>

<p>It's possible to load the</p>

<code>babylon-preview</code>

<p>in an iframe and communicate with it via</p>

<code>postMessage</code>

<p>:</p>

<h4>Update/override options</h4>

<p>If you want to update some options without having to reload the iframe, you can send an</p>

<code>update</code>

<p>message with the options and their new values:</p>

<pre>:</pre>

<pre>:</pre>

<code>iframe</code>

<h3>events:</h3>

<p>You can listen to events sent by the iframe via</p>

<code>postMessage</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>message</pre>

<pre>:</pre>

<pre>type</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>controller</code>

<h3>RPC</h3>

<p>The</p>

<code>controller</code>

<p>allows to take screenshots and get metrics from the scene, and also control the emote animations (play/pause/stop/goTo).</p>

<p>To use the controller you can send</p>

<code>controller_request</code>

<p>messages and the response will arrive via a</p>

<code>controller_response</code>

<p>message.</p>

<p>The available methods are:</p>

<li>namespace:</li>

<code>scene</code>

<li>method:</li>

<code>getScreenshot</code>

<li>params:</li>

<code>[width: number, height: number]</code>

<li>result:</li>

<code>string</code>

<li>method:</li>

<code>getMetrics</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>Metrics</code>

<li>namespace:</li>

<code>emote</code>

<li>method:</li>

<code>play</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>play</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>play</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>goTo</code>

<li>params:</li>

<code>[seconds: number]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>getLength</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>number</code>

<li>method:</li>

<code>isPlaying</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>boolean</code>

<p>This is an example of an RPC:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>id</pre>

<pre>namespace</pre>

<pre>method</pre>

<pre>params</pre>

<pre>:</pre>

<pre>id</pre>

<p>Now you can use it like this:</p>

<h3>Setup</h3>

<code>npm ci</code>

<h3>Development</h3>

<code>npm run start</code>

<h3>Build</h3>

<code>npm run build</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/livekit-components-js

# URL: https://github.com/decentraland/livekit-components-js

<title>GitHub - decentraland/livekit-components-js: Official open source React components and examples for building with LiveKit.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Official open source React components and examples for building with LiveKit.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/livekit-components-js</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>723</strong>

<h2>Files</h2>

<button>View code</button>

<h1>LiveKit Components</h1>

<article>Use this SDK to add real-time video, audio and data features to your React app. By connecting to a self- or cloud-hosted</article>

<article>server, you can quickly build applications like interactive live streaming or video calls with just a few lines of code.</article>

<h2>About LiveKit Components</h2>

<p>Create your</p>

<p>WebRTC experience without worrying about state. LiveKit Components give you a declarative way to build your real-time LiveKit audio/video frontend with React.</p>

<p>Every use case is different and apps in the real world are individual and unique. We don't pretend to have the perfect solution that fits all use cases. Instead, we've taken an approach where we give you reasonable defaults, without taking away full control over each component if you want it.</p>

<h3>ð¤© LiveKit Components handle all state for you</h3>

<p>You don't have to worry about participant or room events to update the state of your application. All components handle state management for you, and by using React contexts, you don't have to route properties through your component tree.</p>

<h3>ð ï¸ Carefully crafted set of components</h3>

<p>We offer all the necessary building blocks to build a live video or audio app in no time.</p>

<h3>ð Beautiful and sane defaults</h3>

<p>We put a lot of effort into creating components that work and look great right out of the gate. Get started quickly by using the defaults of your components or overwrite them by simply adding children.</p>

<pre>LiveKitRoom></pre>

<h3>ð¨ Style them the way you want</h3>

<p>Because most of the components are merely wrappers around standard HTML-Elements you can overwrite the basic component style how ever you want.</p>

<p>On top of that we provide a handful of pre-defined css variables to easily theme LiveKit Components to your needs.</p>

<p>To add styling from our @livekit/components-styles package:</p>

<p>Import all styles including the default theme</p>

<p>And add a theme data attribute to the</p>

<code><LiveKitRoom/></code>

<p>or any HTML container, to gain access to default LiveKit styles.</p>

<pre>="</pre>

<pre>"</pre>

<h3>ð Room to grow: create your own components</h3>

<p>The component we offer does not fit your requirements? We have the solution for you! Each component comes with its own React hook that allows you to create your own component with minimal boilerplate. Of course, you can also combine your own component with our pre-built components. It's common to start with our components to quickly sketch out a concept, and then replace some of them with your own components to build something we could never have imagined.</p>

<h2>Get started</h2>

<p>The best way to get started is to use the</p>

<code>@livekit/components-react</code>

<p>package and install it.</p>

<pre>yarn add @livekit/components-react livekit-client</pre>

<p>or</p>

<pre>npm install @livekit/components-react livekit-client</pre>

<p>Creating a full fledged video conference is as easy as</p>

<h2>Examples</h2>

<p>There are some basic example on how to use and customize LiveKit Components in the</p>

<p>In order to set the examples up locally follow the</p>

<p>.</p>

<p>We also have a fully featured video conferencing application built on top of LiveKit Components</p>

<p>that powers</p>

<p>.</p>

<h2>FAQ</h2>

<h3>Why is there a @livekit/components-core package?</h3>

<p>By abstracting most of the state handling logic into a common core we wanted to make sure that other framework implementations can be created with minimal code duplication. We chose observables as the main data structure for this core as its concepts translate really well to for example React's hooks, solid's signals, Svelte's stores, Vue's composables, and angular loves observables out of the box.</p>

<h3>Did you consider using Custom Elements?</h3>

<p>Yes, we did consider building LK Components with custom elements (web components). We ultimately decided against it in order to give users the option to develop within the constraints of their chosen framework with all its specific concepts (e.g. in the case of react hooks, context etc.). That said the road towards supporting custom elements isn't entirely closed off. If the adoption of custom elements gains traction we can imagine providing a framework implementation that additionally compiles to custom elements (e.g. solid or svelte).</p>

<h3>Will there be an implementation for my favorite framework?</h3>

<p>The highest priority is currently to get the core and react packages to a stable version that people love to work with. Once this is done we will decide on what other frameworks we might to support officially. If you want to develop an implementation for your favorite framework based on the core package we'd love to talk to you about it!</p>

<h2>Development Setup</h2>

<h3>Setup Monorepo</h3>

<p>This repo consists of multiple packages that partly build on top of each other.

It relies on yarn workspaces and</p>

<p>(which gets installed automatically).</p>

<p>On the root level:</p>

<pre>yarn install</pre>

<p>In order to link up initial dependencies and check whether everything has installed correctly run</p>

<pre>yarn build</pre>

<p>This will build all the packages in</p>

<code>/packages</code>

<p>and the examples in</p>

<code>/examples</code>

<p>once.</p>

<p>After that you can use a more granular command to only rebuild the packages you are working on.

E.g. to test and automatically rebuild package dependencies for the nextjs example, run:</p>

<pre>yarn dev:next</pre>

<strong>Note</strong>

<p>for the examples to work you'll need to make sure to copy the the contents of .env.example in the specific example folder to a newly created .env.local file and adjust the values accordingly to your livekit server setup.</p>

<h2>Monorepo Navigation</h2>

<strong>Docs</strong>

<strong>Framework Implementations</strong>

<li>:</li>

<strong>Examples</strong>

<strong>Internal Packages</strong>

<th>LiveKit Ecosystem</th>

<td>Client SDKs</td>

<b>Components</b>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Server SDKs</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Services</td>

<td>Â·</td>

<td>Â·</td>

<td>Resources</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<h2>About</h2>

<p>Official open source React components and examples for building with LiveKit.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>43</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk7-streaming-world

# URL: https://github.com/decentraland/sdk7-streaming-world

<title>GitHub - decentraland/sdk7-streaming-world</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk7-streaming-world</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>152</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Streaming World Test</h1>

<h1>Adding a new scene</h1>

<p>Check the parcel usage running</p>

<code>node scripts/checkParcelsCollision.js</code>

<p>. The plaza is a rect from 72,-9 to 81,10.</p>

<p>Visit the collection of all the scenes in this repo deployed at</p>

<h2>Before commit</h2>

<p>You will need to make sure the workspace is in good shape for the CI. TO do so, run:</p>

<code>npm run update-parcels && npm run sync && npm run test && npm run format</code>

<li>Then commit</li>

<p>This project uses NPM workspaces, that means all scenes must have their own package.json with an unique name</p>

<h2>Testing pull requests</h2>

<p>Each pull request generates a permanent new realm in</p>

<code>offline:offline</code>

<p>mode. The instructions to enter the realm are posted as a PR comment after passes. The realm is stored in a static CDN, and its name takes the commit hash of the repository. Making realms easy to access even if the PR was merged.</p>

<p>To keep consistent code styles, there is an automated CI step. If the build fails, please make sure to run</p>

<code>npm run format</code>

<p>and commit the changes.</p>

<h2>Testing main branch</h2>

<p>In a Decentraland explorer execute:</p>

<code>/changerealm https://sdk-team-cdn.decentraland.org/ipfs/streaming-world-main</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>15</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/smart-wearable-sample

# URL: https://github.com/decentraland/smart-wearable-sample

<title>GitHub - decentraland/smart-wearable-sample: Portable Experience Sample</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Portable Experience Sample</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/smart-wearable-sample</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland scene</h1>

<p>This folder contains all the necessary files to launch a Decentraland scene.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Portable Experience Sample</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/meet

# URL: https://github.com/decentraland/meet

<title>GitHub - decentraland/meet: Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/meet</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>73</strong>

<h2>Files</h2>

<button>View code</button>

<h1>LiveKit Meet</h1>

<strong>Try the demo</strong>

<p>â¢</p>

<p>â¢</p>

<p>â¢</p>

<p>â¢</p>

<p>LiveKit Meet is an open source video conferencing app built on</p>

<p>,</p>

<p>, and Next.js. It's been completely redesigned from the ground up using our new components library.</p>

<h2>Tech Stack</h2>

<li>This is a</li>

<li>project bootstrapped with</li>

<code>create-next-app</code>

<li>.</li>

<li>App is built with</li>

<li>library.</li>

<h2>Demo</h2>

<p>Give it a try at</p>

<p>.</p>

<h2>Dev Setup</h2>

<p>Steps to get a local dev setup up and running:</p>

<li>Run</li>

<code>yarn install</code>

<li>to install all dependencies.</li>

<li>Copy</li>

<code>.env.example</code>

<li>in the project root and rename it to</li>

<code>.env.local</code>

<li>.</li>

<li>Update the missing environment variables in the newly created</li>

<code>.env.local</code>

<li>file.</li>

<li>Run</li>

<code>yarn dev</code>

<li>to start the development server and visit</li>

<li>to see the result.</li>

<li>Start development ð</li>

<h2>About</h2>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>60</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/LAND-permissions-graph

# URL: https://github.com/decentraland/LAND-permissions-graph

<title>GitHub - decentraland/LAND-permissions-graph: A http://thegraph.com/ graph detaling the ownership and permissions of Land</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A</p>

<p>graph detaling the ownership and permissions of Land</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/LAND-permissions-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Ownership and permissions graph</h1>

<p>A</p>

<p>detaling the ownership and permissions of</p>

<code>LAND</code>

<p>and</p>

<code>Estate</code>

<p>s. It's used to make decisions about the historical ownership or permissions of a LAND or Estate.</p>

<p>For clarity, the rest of the file uses</p>

<code>Parcel</code>

<p>and</p>

<code>LAND</code>

<p>interchangeably,</p>

<code>Land</code>

<p>, refers to both</p>

<code>LAND</code>

<p>and</p>

<code>Estate</code>

<th>Network</th>

<th>Provider</th>

<th>URL</th>

<th>Current</th>

<th>Previous</th>

<td>Mainnet</td>

<td>Satsuma</td>

<td>QmZWZWLQqY7FqsjjTsShheSZDSmj1Q3RLogNSwME3yep4Q</td>

<td>-</td>

<td>Mainnet</td>

<td>Hosted Services</td>

<td>QmZWZWLQqY7FqsjjTsShheSZDSmj1Q3RLogNSwME3yep4Q</td>

<td>-</td>

<td>Sepolia</td>

<td>Graph Studio</td>

<td>QmfKfXNfmLrj3DprHtqKmdmCMa7BKqdki7rMiai6byWTQN</td>

<td>-</td>

<td>Goerli</td>

<td>Hosted Services</td>

<td>QmQwkZwFANnwH3bpKdrTD6xUnxs3vgjnD1CX6CKVX49aix</td>

<td>-</td>

<p>Using</p>

<p>and</p>

<h2>Index</h2>

<h2>Permission types</h2>

<p>There are two types of permissions, address-level and Land-level. Address level permissions are given by an address to another address, and grant you access to all of the Land of the recipient. Land level permissions grant you access to a particular Land.</p>

<p>For more information check the roles section of these proposal:</p>

<h2>Entities</h2>

<p>You can check the graph entities in the</p>

<p>file in this repo, or directly on the</p>

<p>. They are:</p>

<strong>Data related</strong>

<strong>Permissions related</strong>

<li>: Address level</li>

<li>: Land level</li>

<li>: Land level</li>

<li>: Land level</li>

<h3>Parcel and Estate</h3>

<p>These entities have information for all parcels (</p>

<code>LAND</code>

<p>) and estates (</p>

<code>Estate</code>

<p>) in Decentraland. Most of the information for each is self-evident, but there are a few interesting props:</p>

<code>Parcel {

	id: ID!

	(...)

	owner: Wallet

	owners: [Owner!]

	operators: [Operator!]

	operator: Bytes

	updateOperator: Bytes

	updateOperators: [UpdateOperator!]

	estate: Estate

	estates: [EstateHistory!]

}

Estate {

	id: ID!

	(...)

	owner: Wallet!

	owners: [Owner!]

	operators: [Operator!]

	operator: Bytes

	updateOperator: Bytes

	updateOperators: [UpdateOperator!]

}</code>

<p>For both</p>

<code>Parcel</code>

<p>s and</p>

<code>Estate</code>

<p>s the entity holds the current owner/operator/updateOperator, but also has a historical array consisting of</p>

<p>s and</p>

<p>s, so you don't necessarily have to query those entities separately.</p>

<p>Also, for parcels, you have a historical array of</p>

<p>so you can check to which Estates the parcel belonged to, if any</p>

<h3>Data</h3>

<p>The parsed data string for each parcel and estate</p>

<h3>Wallet</h3>

<p>All addresses that have either a parcel or a estate in Decentraland</p>

<h3>EstateHistory</h3>

<p>Has a tally</p>

<strong>per parcel</strong>

<p>of each Estate. The Entity allows you to check how many times a parcel was added or removed to an Estate and when. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The</p>

<code>ID</code>

<p>of each EstateHistory is composed of</p>

<code>{blockNumber}-{logIndex}-{type}-{estateId}</code>

<p>, where type is</p>

<code>AddLand</code>

<p>or</p>

<code>RemoveLand</code>

<p>. For example:</p>

<code>10004651-60-RemoveLand-1053</code>

<p>Example query: Get the historical Estate data for the parcel (49,5)</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>{</pre>

<pre>}</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

    ]

  }

}</pre>

<p>If you check those results, you can see that the parcel (</p>

<code>49,5</code>

<p>) was first added to the Estate</p>

<code>1053</code>

<p>, to then be removed and re-added to</p>

<code>3673</code>

<h3>Authorization</h3>

<p>Address-level permissions for Land, composed of</p>

<code>UpdateManager</code>

<p>and</p>

<code>ApprovalForAll</code>

<p>. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The id of each Entity is composed of</p>

<code>{blockNumber}-{logIndex}-{type}</code>

<p>where type is Operator or Manager. The type is what let's you know which type of Authorization was given.</p>

<p>The Authorization type is not tied to a particular LAND or Estate, that is why it has the</p>

<code>tokenAddress</code>

<p>property, it'll refer to the EstateRegistry or LANDRegistry respectively, or maybe a new asset in the future. The</p>

<code>operator</code>

<p>prop is the address that received the Authorization</p>

<p>Example query: Get all the authorizations an address gave</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

  ) {</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

    ]

  }

}</pre>

<p>This can be read as: The address</p>

<code>0x1fc5616bb5cc9774c23b734a1a4e5ec82ebdc89a</code>

<p>gave ApprovalForAll permissions to</p>

<code>0x8e5660b4ab70168b5a6feea0e0315cb49c8cd539</code>

<p>to manage both their LANDs (</p>

<code>0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d</code>

<p>) and Estates (</p>

<code>0x959e104e1a4db6317fa58f8295f586e1a978c297</code>

<p>)</p>

<h3>Owner</h3>

<p>Land-level permission, denotes</p>

<p>of each Land. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The id of each Entity is composed of</p>

<code>{blockNumber}-{logIndex}-{type}</code>

<p>where type is Owner. The prop</p>

<code>eventName</code>

<p>is here for completeness sake, as it's always a</p>

<code>Transfer</code>

<p>.</p>

<p>Example query: Get the historical owners for the parcel (-69,8)</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

    ]

  }

}</pre>

<p>The last owner on this result set, should always coincide with the</p>

<code>Parcel</code>

<p>entity</p>

<code>owner</code>

<p>prop. You could check it here by adding</p>

<pre>{

(...)</pre>

<pre>{</pre>

<pre>{</pre>

<pre>}

	}

}</pre>

<p>to the query</p>

<h3>Operator and UpdateOperator</h3>

<p>Land-level permissions, composed of</p>

<p>and</p>

<p>. These entities give you a clear idea of which address gave which permission, and to which Land. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The id of each Entity is composed of</p>

<code>{blockNumber}-{logIndex}-{type}</code>

<p>where type is Operator or UpdateOperator. You can check which type of event triggered the permission by getting the</p>

<code>eventName</code>

<p>prop, which could be:</p>

<li>Approval: Grant/revoke operator permissions</li>

<li>UpdateOperator: Grant/revoke update operator permissions</li>

<li>Transfer: Reset permissions</li>

<p>Example query: Get the operator and update operator historical data for the (89,-139) parcel</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

    ],</pre>

<pre>: [

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

    ]

  }

}</pre>

<p>You can see in the results how the address is null on Transfers, as the Land-level persmissions are cleared</p>

<h2>Example Query</h2>

<p>Get all permissions an address (</p>

<code>0x4fee7b061c97c9c496b01dbce9cdb10c02f0a0be</code>

<p>) has for a particular Land (</p>

<code>20,12</code>

<p>):</p>

<p>First we check the parcel itself, for the current Land-level permissions and to check if it's in a Estate:</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}) {</pre>

<pre>{</pre>

<pre>}</pre>

<pre>{</pre>

<pre>}

  }

}</pre>

<p>Result:</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

    ]

  }

}</pre>

<p>Here we can tell that:</p>

<li>The Parcel does not belong to a Estate</li>

<li>Our address is the operator of the Parcel</li>

<p>Next we have to check address level permissions, to do that, we have to check if the owner of the parcel,</p>

<code>0x7a536388147c04c5407ca6a7117141faa611bdde</code>

<p>, has given an</p>

<p>to it:</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}

}</pre>

<p>Result:</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

      {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

    ]

  }

}</pre>

<p>We can see here that our operator has an Operator (</p>

<code>ApprovalForAll</code>

<p>) permission for all LANDs (</p>

<code>0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d</code>

<p>) our owner has.</p>

<strong>In conclusion</strong>

<p>:</p>

<p>The address</p>

<code>0x4fee7b061c97c9c496b01dbce9cdb10c02f0a0be</code>

<p>is</p>

<li>The operator of</li>

<code>(20,12)</code>

<li>Has all</li>

<code>ApprovalForAll</code>

<li>permissions over</li>

<code>0x7a536388147c04c5407ca6a7117141faa611bdde</code>

<li>LAND. As long as</li>

<code>0x7a536388147c04c5407ca6a7117141faa611bdde</code>

<li>has</li>

<code>(20,12)</code>

<li>, she will have access.</li>

<h2>Run</h2>

<pre>npm run codegen

npm run build

npm run deploy</pre>

<h2>About</h2>

<p>A</p>

<p>graph detaling the ownership and permissions of Land</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-lists-graph

# URL: https://github.com/decentraland/decentraland-lists-graph

<title>GitHub - decentraland/decentraland-lists-graph: Catalyst, POIs, Ban Names list</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Catalyst, POIs, Ban Names list</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-lists-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland lists graph</h1>

<li>Mainnet:</li>

<li>(QmTBP7FEU1gHJaSev3wZsyoV47rV8hWdTpH1JnU2Krzycy)</li>

<li>Ropsten:</li>

<li>(QmdZDDBGi4gyrSaJH8hCU493c1iQvMhAEyKSTDAoH4DHZ5)</li>

<li>Sepolia:</li>

<li>(QmQyDBMkGXZpubcKKnomnmDU2z5FhjCEuHr2FYhGS2esU2)</li>

<li>Goerli:</li>

<li>(QmPNMrWGnkpikrEgDktwKZaFhhaZz2DLGLrSAhMZZdrsye)</li>

<h3>Install</h3>

<pre>npm run install</pre>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<p>Ethereum addresses should be passed lowercased:</p>

<code>0xB549B2442b2BD0a53795BC5cDcBFE0cAF7ACA9f8</code>

<li>â</li>

<code>0xb549b2442b2bd0a53795bc5cdcbfe0caf7aca9f8</code>

<li>â</li>

<h4>Get active Catalyst, POIs or Names</h4>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Get totals</h4>

<h2>About</h2>

<p>Catalyst, POIs, Ban Names list</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-lists-graph

# Change to URL: https://github.com/decentraland/ethereum-blocks

# URL: https://github.com/decentraland/ethereum-blocks

<title>GitHub - decentraland/ethereum-blocks</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ethereum-blocks</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Blocks info to be used on multichain snapshot strategy</h1>

<h2>URLS:</h2>

<li>(QmXebqMHXdRKeUzqkiNPDhWdqZCzqadGRmhfb1qfikHhzC)</li>

<li>(QmSRbWhQhAn7onR6LszorPTLu5gdU6Kn8pfhwSVSGJZyKN)</li>

<li>(QmZ18hhCLAnx3ehh1pGvBqT7QndrXoQNV5YKCoeur7Jupr)</li>

<li>(QmZ18hhCLAnx3ehh1pGvBqT7QndrXoQNV5YKCoeur7Jupr)</li>

<li>(QmfJgvNwvA19ErStudGK92d9tqLkYE7rAZ3wKguQQu5xHQ)</li>

<li>(QmSRbWhQhAn7onR6LszorPTLu5gdU6Kn8pfhwSVSGJZyKN)</li>

<h2>Install</h2>

<pre>npm i</pre>

<h2>Deploy</h2>

<pre>npm run deploy:mainnet

npm run deploy:mumbai</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>222</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer-skyboxes

# URL: https://github.com/decentraland/explorer-skyboxes

<title>GitHub - decentraland/explorer-skyboxes: Skyboxes for Explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Skyboxes for Explorer</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-skyboxes</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>explorer-skyboxes</h1>

<p>Skyboxes for Explorer</p>

<h2>About</h2>

<p>Skyboxes for Explorer</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/platform-substreams-indexer

# URL: https://github.com/decentraland/platform-substreams-indexer

<title>GitHub - decentraland/platform-substreams-indexer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/platform-substreams-indexer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>19</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-substreams</h1>

<p>An implementation of StreamingFast's substreams for dcl contracts</p>

<h1>Substreams</h1>

<p>Developer preview</p>

<p>Substreams is a powerful blockchain indexing technology, developed for The Graph Network.</p>

<p>Substreams enables developers to write Rust modules, composing data streams alongside the community, and provides extremely high performance indexing by virtue of parallelization, in a streaming-first fashion.</p>

<p>Substreams has all the benefits of StreamingFast Firehose, like low-cost caching and archiving of blockchain data, high throughput processing, and cursor-based reorgs handling.</p>

<h1>Running the substreams</h1>

<p>First, compile the substreams modules:</p>

<code>cargo build --release --target wasm32-unknown-unknown</code>

<p>Then, run the module that you want:</p>

<code>substreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml map_collection_created --start-block 10000001 --stop-block +1</code>

<h1>Running the sink module</h1>

<p>You'll need to have the</p>

<p>cli installed. I recommend using the</p>

<code>go</code>

<p>installation:</p>

<code>go install github.com/streamingfast/substreams-sink-postgres/cmd/substreams-sink-postgres@latest.</code>

<p>Check if you have the GOPATH as part of your</p>

<code>PATH</code>

<p>. If not, add it:</p>

<code>export PATH=$PATH:$(go env GOPATH)/bin</code>

<p>Finally, run the sink</p>

<code>substreams-sink-postgres run \    

    "psql://db_user:db_pass@localhost:5432/db_name?sslmode=disable" \

    "polygon.streamingfast.io:443" \

    "substreams.yaml" \

    db_out</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/vestings-builder

# URL: https://github.com/decentraland/vestings-builder

<title>GitHub - decentraland/vestings-builder: UI to deploy vesting contracts using a minimal proxy</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>UI to deploy vesting contracts using a minimal proxy</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/vestings-builder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Vesting Generator</h1>

<p>Allows the deployment of a single or multiple</p>

<p>contracts.

Still supports the deployment of the original</p>

<p>contract.</p>

<h2>Use it</h2>

<p>to deploy a single</p>

<code>PeriodicTokenVesting</code>

<p>contract.</p>

<p>to deploy multiple</p>

<code>PeriodicTokenVesting</code>

<p>contracts in batch using a csv file.</p>

<p>To use the UI for deploying the original</p>

<code>TokenVesting</code>

<p>contract, you have to append</p>

<code>/old</code>

<p>to the URL. For example:</p>

<p>to deploy a single</p>

<code>TokenVesting</code>

<p>contract.</p>

<p>to deploy a multiple</p>

<code>TokenVesting</code>

<p>contracts in batch using a csv file.</p>

<p>For single deployments, you can set values optionally through the URL instead of filling them in the form by providing query params for each of them as follows:</p>

<code>https://vestings-deployer.vercel.app/?owner=<address>&beneficiary=<address>&token=<address></code>

<p>Query params supported by the</p>

<code>PeriodicTokenVesting</code>

<p>deployment UI are:</p>

<code>owner=<address>

beneficiary=<address>

token=<address>

revocable=<yes|no>

pausable=<yes|no>

linear=<yes|no>

start=<yyyy-mm-dd>

period=<seconds>

cliff=<seconds>

vestedPerPeriod=<comma separated numbers></code>

<p>Query params supported by the original</p>

<code>TokenVesting</code>

<p>deployment UI are:</p>

<code>beneficiary=<address>

token=<address>

cliff=<seconds>

revocable=<yes|no>

start=<yyyy-mm-dd>

duration=<seconds></code>

<h2>Development</h2>

<p>Required software</p>

<code>node ^16

npm ^7</code>

<p>Install dependencies.</p>

<pre>npm ci</pre>

<p>Run frontend.</p>

<pre>npm start</pre>

<p>Compile Smart Contracts inside the</p>

<code>./contracts</code>

<p>directory.</p>

<pre>npx hardhat compile</pre>

<p>Run Smart Contract tests.</p>

<pre>npx hardhat</pre>

<p>Run Smart Contract tests with coverage.</p>

<pre>npx hardhat coverage</pre>

<h1>Periodic Token Vesting</h1>

<p>Allows vesting an ERC20 token through consecutive periods of time of the same length.</p>

<p>Each period is defined with an amount of tokens to be vested.

If the contract is defined as Linear, the amount defined in the current period will be vested proportionally to the time that has elapsed.

If it is not, only when the period elapses the amount defined will be vested.</p>

<p>The beneficiary is the only address able to release vested tokens.

When releasing, the beneficiary can choose which address will receive the vested tokens as well as the amount.

The beneficiary can also transfer the beneficiary status to another address.</p>

<p>When initializing the contract, it can be defined as revocable and/or pausable.

Only the owner can pause or revoke the contract.

If the contract is paused or revoked, tokens will stop vesting up to that timestamp.

A paused contract can be unpaused, resuming the normal course of the vesting.

However, revoking a contract is irreversible, once revoked the vesting is stopped forever.</p>

<p>The contract will start vesting the moment it has been defined to do so, despite if it has been funded with tokens.

The beneficiary is only able to release an amount of tokens that the contract actually has in its balance.

For example, if the contract has vested 100 tokens, but it only has 10 in its balance, the beneficiary will only be able to release up to 10 tokens.

It will fail otherwise.</p>

<p>Moreover, the amount of tokens in the contract's balance that exceeds the amount of tokens that will be vested through the sum of all periods is considered surplus.

The owner of the contract can release any amount of surplus tokens to the desired recipient.

When a contract is revoked, all non-vested tokens will become surplus, allowing the owner of the contract to withdraw them.</p>

<h2>Deployment and Initialization</h2>

<p>The contract has been developed to be used as the implementation of multiple proxies.

The deployed contract cannot be used directly as it cannot be initialized due to the</p>

<code>_disableInitializers</code>

<p>in its constructor which is intended to prevent the initialization of implementations.</p>

<p>Once a proxy is deployed with the implementation address being the deployed PeriodicTokenVesting contract, it has to be initialized once calling the</p>

<code>initialize</code>

<p>function.</p>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>)</pre>

<pre>initializer {}</pre>

<h2>Examples</h2>

<strong>Example 1</strong>

<p>We might want to create a vesting with the following conditions:</p>

<li>4 years duration</li>

<li>1 year cliff</li>

<li>10k tokens in total to be vested</li>

<li>Tokens are vested per quarter instead of every second after the cliff</li>

<li>The first 3 years will vest 25% of the total and the last year will vest the rest</li>

<p>For the requirements mentioned previously we would need to provide the following data to obtain a vesting program that fits it.</p>

<h3>isLinear</h3>

<p>Has to be false, this is because we want tokens to be vested quarterly and not every second.</p>

<h3>periodDuration</h3>

<p>Has to be a quarter of a year (7889400 seconds). As tokens are vested quarterly, we will be defining periods that have this duration each.</p>

<h3>cliffDuration</h3>

<p>Has to be a year (31557600 seconds). The beneficiary will not vest anything for the first year.</p>

<h3>vestedPerPeriod</h3>

<p>Contains how much tokens will be vested after each period passes. Each period lasts a quarter and in 4 years, which is the total duration of the vesting, there are 16 quarters. This means we have to define how much is vested on each of these 16 periods.</p>

<p>25% will be vested on the first 3 years and 75% will be released on the last year. Meaning 2500 tokens are vested on the first 3 years and 7500 on the last one.</p>

<p>We need to configure 16 periods to reflect these values, so the first 2.5k tokens will be distributed in the first 12 periods and the 7.5k tokens in the last 4 periods. Leaving us with an array that looks like the following:</p>

<p>Every quarter that passes will vest the amount defined for the corresponding period, always taking into consideration the cliff. In this example, when the year elapses, 208.33 * 4 will be vested as the cliff is over. Then, every quarter that passes will vest the extra tokens it has defined until all periods are over and the 10k can be released.</p>

<strong>Example 2</strong>

<p>We might want to create a vesting with the following conditions:</p>

<li>3 years duration</li>

<li>A year and a half of cliff</li>

<li>2k are vested the first year, 4k the second, and 6k the third, for a total of 12k tokens</li>

<li>Tokens are vested every second</li>

<p>This kind of vesting might never exist as a real use case, however, this just shows the flexibility this contract provides.</p>

<h3>isLinear</h3>

<p>Has to be true because we want tokens to be vested every second, not by quarters of a year like Example 1.</p>

<h3>periodDuration</h3>

<p>We are asked to vest different amounts on each year, so we will need to configure 3 different periods. As we have 3 periods in a vesting of 3 years, the period duration should be of a year.</p>

<h3>cliffDuration</h3>

<p>The cliff has to be of a year and a half so that's it.</p>

<h3>vestedPerPeriod</h3>

<p>We have been asked to vest different amount of tokens each year of the vesting, so we will need to defined 3 different periods.</p>

<p>We have a cliff of a year and a half, so until that time elapses, the contract will vest nothing. Once the year and a half passes, the contract will vest what corresponds to that time. It will vest all the tokens from the first period as it has elapsed completely, and will vest half of the tokens defined in the second period, as only half of that period has passed.

.</p>

<strong>Example 3</strong>

<p>Consider the following setup for the "Higher Tier" schedule:</p>

<li>60000 in tokens total amount</li>

<li>6 Months duration</li>

<li>10k tokens are vested each 30 days, for a total of 60k tokens</li>

<li>Initialized to start on either 1st or 15th of month</li>

<p>This new vesting schedule will follow a step function, where compensation is made available in chunks over periods of time.</p>

<h3>isLinear</h3>

<p>Has to be false, this is because we want tokens to be vested by period and not every second.</p>

<h3>periodDuration</h3>

<p>We are asked to vest different amounts on each 30 days, so we will need to configure 6 different periods. As we have 6 periods in a vesting of 6 months, the period duration should be of 30 days.</p>

<h3>cliffDuration</h3>

<p>The cliff duration is not required when using vesting per period logic. Funds will only vest after the first period duration has passed, the same as using a cliff.</p>

<h3>vestedPerPeriod</h3>

<p>We have been asked to vest an equal amount of tokens each 30 days of the vesting, so we will need to define 6 equal periods.</p>

<p>The contract will vest what corresponds to each period, only after the period has elapsed.

.</p>

<h3>startTime</h3>

<p>The start time will be set to the timestamp of the 1st of 15th of the starting month.</p>

<h2>About</h2>

<p>UI to deploy vesting contracts using a minimal proxy</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-vesting-generator

# Change to URL: https://github.com/decentraland/ts-proto

# URL: https://github.com/decentraland/ts-proto

<title>GitHub - decentraland/ts-proto: An idiomatic protobuf generator for TypeScript</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>An idiomatic protobuf generator for TypeScript</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ts-proto</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>4</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,024</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/ts-proto</h1>

<p>This is a fork of</p>

<p>. Here we use</p>

<code>namespace</code>

<p>exports instead of export object with properties for messages.</p>

<h1>ts-proto</h1>

<code>ts-proto</code>

<p>transforms your</p>

<code>.proto</code>

<p>files into strongly-typed, idiomatic TypeScript files!</p>

<h2>Table of contents</h2>

<h1>Overview</h1>

<p>ts-proto generates TypeScript types from protobuf schemas.</p>

<p>I.e. given a</p>

<code>person.proto</code>

<p>schema like:</p>

<pre>{</pre>

<pre>;

}</pre>

<p>ts-proto will generate a</p>

<code>person.ts</code>

<p>file like:</p>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>...</pre>

<p>It also knows about services and will generate types for them as well, i.e.:</p>

<pre>:</pre>

<pre>:</pre>

<p>It will also generate client implementations of</p>

<code>PingService</code>

<p>; currently</p>

<p>,</p>

<p>,</p>

<p>and</p>

<p>are supported.</p>

<h1>QuickStart</h1>

<code>npm install ts-proto</code>

<code>protoc --plugin=./node_modules/.bin/protoc-gen-dcl_ts_proto --ts_proto_out=. ./simple.proto</code>

<li>(Note that the output parameter name,</li>

<code>ts_proto_out</code>

<li>, is named based on the suffix of the plugin's name, i.e. "ts_proto" suffix in the</li>

<code>--plugin=./node_modules/.bin/protoc-gen-dcl_ts_proto</code>

<li>parameter becomes the</li>

<code>_out</code>

<li>prefix, per</li>

<code>protoc</code>

<li>'s CLI conventions.)</li>

<li>On Windows, use</li>

<code>protoc --plugin=protoc-gen-dcl_ts_proto=.\\node_modules\\.bin\\protoc-gen-ts_proto.cmd--ts_proto_out=. ./simple.proto</code>

<li>(see</li>

<li>)</li>

<li>Ensure you're using a modern</li>

<code>protoc</code>

<li>, i.e. the original</li>

<code>protoc</code>

<code>3.0.0</code>

<li>doesn't support the</li>

<code>_opt</code>

<li>flag</li>

<p>This will generate</p>

<code>*.ts</code>

<p>source files for the given</p>

<code>*.proto</code>

<p>types.</p>

<p>If you want to package these source files into an npm package to distribute to clients, just run</p>

<code>tsc</code>

<p>on them as usual to generate the</p>

<code>.js</code>

<p>/</p>

<code>.d.ts</code>

<p>files, and deploy the output as a regular npm package.</p>

<h2>Buf</h2>

<p>If you're using Buf, pass</p>

<code>strategy: all</code>

<p>in your</p>

<code>buf.gen.yaml</code>

<p>file (</p>

<p>).</p>

<pre>:</pre>

<pre>:

  -</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To prevent</p>

<code>buf push</code>

<p>from reading irrelevent</p>

<code>.proto</code>

<p>files, configure</p>

<code>buf.yaml</code>

<p>like so:</p>

<pre>:</pre>

<pre>:</pre>

<p>You can also use the official plugin published to the Buf Registry.</p>

<pre>:</pre>

<pre>:

  -</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:

      -</pre>

<pre>-</pre>

<h2>ESM</h2>

<p>If you're using a modern TS setup with either</p>

<code>esModuleInterop</code>

<p>or running in an ESM environment, you'll need to pass</p>

<code>ts_proto_opt</code>

<p>s of:</p>

<code>esModuleInterop=true</code>

<li>if using</li>

<code>esModuleInterop</code>

<li>in your</li>

<code>tsconfig.json</code>

<li>, and</li>

<code>importSuffix=.js</code>

<li>if executing the generated ts-proto code in an ESM environment</li>

<h1>Goals</h1>

<p>In terms of the code that</p>

<code>ts-proto</code>

<p>generates, the general goals are:</p>

<li>Idiomatic TypeScript/ES6 types</li>

<code>ts-proto</code>

<li>is a clean break from either the built-in Google/Java-esque JS code of</li>

<code>protoc</code>

<li>or the "make</li>

<code>.d.ts</code>

<li>files the</li>

<code>*.js</code>

<li>comments" approach of</li>

<code>protobufjs</code>

<li>(Techically the</li>

<code>protobufjs/minimal</code>

<li>package is used for actually reading/writing bytes.)</li>

<li>TypeScript-first output</li>

<li>Interfaces over classes</li>

<li>As much as possible, types are just interfaces, so you can work with messages just like regular hashes/data structures.</li>

<li>Only supports codegen</li>

<code>*.proto</code>

<li>-to-</li>

<code>*.ts</code>

<li>workflow, currently no runtime reflection/loading of dynamic</li>

<code>.proto</code>

<li>files</li>

<h2>Non-Goals</h2>

<p>Note that ts-proto is not an out-of-the-box RPC framework; instead it's more of a swiss-army knife (as witnessed by its many config options), that lets you build</p>

<em>exactly</em>

<p>the RPC framework you'd like on top of it (i.e. that best integrates with your company's protobuf ecosystem; for better or worse, protobuf RPC is still a somewhat fragmented ecosystem).</p>

<p>If you'd like an out-of-the-box RPC framework built on top of ts-proto, there are a few examples:</p>

<p>(Note for potential contributors, if you develop other frameworks/mini-frameworks, or even blog posts/tutorials, on using</p>

<code>ts-proto</code>

<p>, we're happy to link to them.)</p>

<h1>Example Types</h1>

<p>The generated types are "just data", i.e.:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Along with</p>

<code>encode</code>

<p>/</p>

<code>decode</code>

<p>factory methods:</p>

<pre>?:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>?:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<p>This allows idiomatic TS/JS usage like:</p>

<pre>: ...</pre>

<pre>: ...</pre>

<pre>...</pre>

<p>Which can dramatically ease integration when converting to/from other layers without

creating a class and calling the right getters/setters.</p>

<h1>Highlights</h1>

<p>A poor man's attempt at "please give us back optional types"</p>

<p>The canonical protobuf wrapper types, i.e.</p>

<code>google.protobuf.StringValue</code>

<p>, are mapped as optional values, i.e.</p>

<code>string | undefined</code>

<p>, which means for primitives we can kind of pretend the protobuf type system has optional types.</p>

<p>(</p>

<strong>Update</strong>

<p>: ts-proto now also supports the proto3</p>

<code>optional</code>

<p>keyword.)</p>

<p>Timestamps are mapped as</p>

<code>Date</code>

<p>(Configurable with the</p>

<code>useDate</code>

<p>parameter.)</p>

<code>fromJSON</code>

<p>/</p>

<code>toJSON</code>

<p>use the</p>

<p>(e.g. timestamps are ISO strings), unlike</p>

<code>protobufjs</code>

<p>.</p>

<p>ObjectIds can be mapped as</p>

<code>mongodb.ObjectId</code>

<p>(Configurable with the</p>

<code>useMongoObjectId</code>

<p>parameter.)</p>

<h1>Auto-Batching / N+1 Prevention</h1>

<p>(Note: this is currently only supported by the Twirp clients.)</p>

<p>If you're using ts-proto's clients to call backend micro-services, similar to the N+1 problem in SQL applications, it is easy for micro-service clients to (when serving an individual request) inadvertantly trigger multiple separate RPC calls for "get book 1", "get book 2", "get book 3", that should really be batched into a single "get books [1, 2, 3]" (assuming the backend supports a batch-oriented RPC method).</p>

<p>ts-proto can help with this, and essentially auto-batch your individual "get book" calls into batched "get books" calls.</p>

<p>For ts-proto to do this, you need to implement your service's RPC methods with the batching convention of:</p>

<li>A method name of</li>

<code>Batch<OperationName></code>

<li>The</li>

<code>Batch<OperationName></code>

<li>input type has a single repeated field (i.e.</li>

<code>repeated string ids = 1</code>

<li>)</li>

<li>The</li>

<code>Batch<OperationName></code>

<li>output type has either a:</li>

<li>A single repeated field (i.e.</li>

<code>repeated Foo foos = 1</code>

<li>)</li>

<em>where the output order is the same as the input</em>

<code>ids</code>

<em>order</em>

<li>, or</li>

<li>A map of the input to an output (i.e.</li>

<code>map<string, Entity> entities = 1;</code>

<li>)</li>

<p>When ts-proto recognizes methods of this pattern, it will automatically create a "non-batch" version of</p>

<code><OperationName></code>

<p>for the client, i.e.</p>

<code>client.Get<OperationName></code>

<p>, that takes a single id and returns a single result.</p>

<p>This provides the client code with the illusion that it can make individual</p>

<code>Get<OperationName></code>

<p>calls (which is generally preferrable/easier when implementing the client's business logic), but the actual implementation that ts-proto provides will end up making</p>

<code>Batch<OperationName></code>

<p>calls to the backend service.</p>

<p>You also need to enable the</p>

<code>useContext=true</code>

<p>build-time parameter, which gives all client methods a Go-style</p>

<code>ctx</code>

<p>parameter, with a</p>

<code>getDataLoaders</code>

<p>method that lets ts-proto cache/resolve request-scoped</p>

<p>, which provide the fundamental auto-batch detection/flushing behavior.</p>

<p>See the</p>

<code>batching.proto</code>

<p>file and related tests for examples/more details.</p>

<p>But the net effect is that ts-proto can provide SQL-/ORM-style N+1 prevention for clients calls, which can be critical especially in high-volume / highly-parallel implementations like GraphQL front-end gateways calling backend micro-services.</p>

<h1>Usage</h1>

<code>ts-proto</code>

<p>is a</p>

<code>protoc</code>

<p>plugin, so you run it by (either directly in your project, or more likely in your mono-repo schema pipeline, i.e. like</p>

<p>or</p>

<p>):</p>

<li>Add</li>

<code>ts-proto</code>

<li>to your</li>

<code>package.json</code>

<li>Run</li>

<code>npm install</code>

<li>to download it</li>

<li>Invoke</li>

<code>protoc</code>

<li>with a</li>

<code>plugin</code>

<li>parameter like:</li>

<pre>protoc --plugin=node_modules/ts-proto/protoc-gen-dcl_ts_proto ./batching.proto -I.</pre>

<code>ts-proto</code>

<p>can also be invoked with</p>

<p>using the</p>

<p>:</p>

<pre>protobuf {

    plugins {</pre>

<pre>ts {

            path</pre>

<pre>}

    }</pre>

<pre>generateProtoTasks {

        all()</pre>

<pre>each {</pre>

<pre>task</pre>

<pre>plugins {</pre>

<pre>ts {

                    option</pre>

<pre>}

            }

        }

    }

}</pre>

<p>Generated code will be placed in the Gradle build directory.</p>

<h3>Supported options</h3>

<p>With</p>

<code>--ts_proto_opt=context=true</code>

<p>, the services will have a Go-style</p>

<code>ctx</code>

<p>parameter, which is useful for tracing/logging/etc. if you're not using node's</p>

<code>async_hooks</code>

<p>api due to performance reasons.</p>

<p>With</p>

<code>--ts_proto_opt=forceLong=long</code>

<p>, all 64-bit numbers will be parsed as instances of</p>

<code>Long</code>

<p>(using the</p>

<p>library).</p>

<p>With</p>

<code>--ts_proto_opt=forceLong=string</code>

<p>, all 64-bit numbers will be output as strings.</p>

<p>With</p>

<code>--ts_proto_opt=forceLong=bigint</code>

<p>, all 64-bit numbers will be output as</p>

<code>BigInt</code>

<p>s. This option still uses the</p>

<code>long</code>

<p>library to encode/decode internally within</p>

<code>protobuf.js</code>

<p>, but then converts to/from</p>

<code>BigInt</code>

<p>s in the ts-proto-generated code.</p>

<p>The default behavior is</p>

<code>forceLong=number</code>

<p>, which will internally still use the</p>

<code>long</code>

<p>library to encode/decode values on the wire (so you will still see a</p>

<code>util.Long = Long</code>

<p>line in your output), but will convert the</p>

<code>long</code>

<p>values to</p>

<code>number</code>

<p>automatically for you. Note that a runtime error is thrown if, while doing this conversion, a 64-bit value is larger than can be correctly stored as a</p>

<code>number</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=esModuleInterop=true</code>

<p>changes output to be</p>

<code>esModuleInterop</code>

<p>compliant.</p>

<p>Specifically the</p>

<code>Long</code>

<p>imports will be generated as</p>

<code>import Long from 'long'</code>

<p>instead of</p>

<code>import * as Long from 'long'</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=env=node</code>

<p>or</p>

<code>browser</code>

<p>or</p>

<code>both</code>

<p>, ts-proto will make environment-specific assumptions in your output. This defaults to</p>

<code>both</code>

<p>, which makes no environment-specific assumptions.</p>

<p>Using</p>

<code>node</code>

<p>changes the types of</p>

<code>bytes</code>

<p>from</p>

<code>Uint8Array</code>

<p>to</p>

<code>Buffer</code>

<p>for easier integration with the node ecosystem which generally uses</p>

<code>Buffer</code>

<p>.</p>

<p>Currently</p>

<code>browser</code>

<p>doesn't have any specific behavior other than being "not</p>

<code>node</code>

<p>". It probably will soon/at some point.</p>

<p>With</p>

<code>--ts_proto_opt=useOptionals=messages</code>

<p>(for message fields) or</p>

<code>--ts_proto_opt=useOptionals=all</code>

<p>(for message and scalar fields), fields are declared as optional keys, e.g.</p>

<code>field?: Message</code>

<p>instead of the default</p>

<code>field: Message | undefined</code>

<p>.</p>

<p>ts-proto defaults to</p>

<code>useOptionals=none</code>

<p>because it:</p>

<li>Prevents typos when initializing messages, and</li>

<li>Provides the most consistent API to readers</li>

<li>Ensures production messages are properly initialized with all fields.</li>

<p>For typo prevention, optional fields make it easy for extra fields to slip into a message (until we get</p>

<p>), i.e.:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<p>For a consistent API, if</p>

<code>SomeMessage.lastName</code>

<p>is optional</p>

<code>lastName?</code>

<p>, then readers have to check</p>

<em>two</em>

<p>empty conditions: a) is</p>

<code>lastName</code>

<code>undefined</code>

<p>(b/c it was created in-memory and left unset), or b) is</p>

<code>lastName</code>

<p>empty string (b/c we read</p>

<code>SomeMessage</code>

<p>off the wire and correctly set</p>

<code>lastName</code>

<p>to empty string)?</p>

<p>For ensuring proper initialization, if later</p>

<code>SomeMessage.middleInitial</code>

<p>is added, but it's marked as optional</p>

<code>middleInitial?</code>

<p>, you may have many call sites in production code that</p>

<em>should</em>

<p>now be passing</p>

<code>middleInitial</code>

<p>to create a valid</p>

<code>SomeMessage</code>

<p>, but are not.</p>

<p>So, between typo-prevention, reader inconsistency, and proper initialization, ts-proto recommends using</p>

<code>useOptionals=none</code>

<p>as the "most safe" option.</p>

<p>All that said, this approach does require writers/creators to set every field (although</p>

<code>fromPartial</code>

<p>and</p>

<code>create</code>

<p>are meant to address this), so if you still want to have optional fields, you can set</p>

<code>useOptionals=messages</code>

<p>or</p>

<code>useOptionals=all</code>

<p>.</p>

<p>(See</p>

<p>and</p>

<p>for discussions on</p>

<code>useOptional</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=exportCommonSymbols=false</code>

<p>, utility types like</p>

<code>DeepPartial</code>

<p>and</p>

<code>protobufPackage</code>

<p>won't be</p>

<code>export</code>

<p>d.</p>

<p>This should make it possible to use create barrel imports of the generated output, i.e.</p>

<code>import * from ./foo</code>

<p>and</p>

<code>import * from ./bar</code>

<p>.</p>

<p>Note that if you have the same message name used in multiple</p>

<code>*.proto</code>

<p>files, you will still get import conflicts.</p>

<p>With</p>

<code>--ts_proto_opt=oneof=unions</code>

<p>,</p>

<code>oneof</code>

<p>fields will be generated as ADTs.</p>

<p>See the "OneOf Handling" section.</p>

<p>With</p>

<code>--ts_proto_opt=unrecognizedEnum=false</code>

<p>enums will not contain an</p>

<code>UNRECOGNIZED</code>

<p>key with value of -1.</p>

<p>With</p>

<code>--ts_proto_opt=removeEnumPrefix=true</code>

<p>generated enums will have the enum name removed from members.</p>

<code>FooBar.FOO_BAR_BAZ = "FOO_BAR_BAZ"</code>

<p>will generate</p>

<code>FooBar.BAZ = "FOO_BAR_BAZ"</code>

<p>With</p>

<code>--ts_proto_opt=lowerCaseServiceMethods=true</code>

<p>, the method names of service methods will be lowered/camel-case, i.e.</p>

<code>service.findFoo</code>

<p>instead of</p>

<code>service.FindFoo</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=snakeToCamel=false</code>

<p>, fields will be kept snake case in both the message keys and the</p>

<code>toJSON</code>

<p>/</p>

<code>fromJSON</code>

<p>methods.</p>

<code>snakeToCamel</code>

<p>can also be set as a</p>

<code>_</code>

<p>-delimited list of strings (comma is reserved as the flag delimited), i.e.</p>

<code>--ts_proto_opt=snakeToCamel=keys_json</code>

<p>, where including</p>

<code>keys</code>

<p>will make message keys be camel case and including</p>

<code>json</code>

<p>will make JSON keys be camel case.</p>

<p>Empty string, i.e.</p>

<code>snakeToCamel=</code>

<p>, will keep both messages keys and</p>

<code>JSON</code>

<p>keys as snake case (it is the same as</p>

<code>snakeToCamel=false</code>

<p>).</p>

<p>Note that to use the</p>

<code>json_name</code>

<p>attribute, you'll have to use the</p>

<code>json</code>

<p>.</p>

<p>The default behavior is</p>

<code>keys_json</code>

<p>, i.e. both will be camel cased, and</p>

<code>json_name</code>

<p>will be used if set.</p>

<p>With</p>

<code>--ts_proto_opt=outputEncodeMethods=false</code>

<p>, the</p>

<code>Message.encode</code>

<p>and</p>

<code>Message.decode</code>

<p>methods for working with protobuf-encoded/binary data will not be output.</p>

<p>This is useful if you want "only types".</p>

<p>With</p>

<code>--ts_proto_opt=outputJsonMethods=false</code>

<p>, the</p>

<code>Message.fromJSON</code>

<p>and</p>

<code>Message.toJSON</code>

<p>methods for working with JSON-coded data will not be output.</p>

<p>This is also useful if you want "only types".</p>

<p>With</p>

<code>--ts_proto_opt=outputPartialMethods=false</code>

<p>, the</p>

<code>Message.fromPartial</code>

<p>and</p>

<code>Message.create</code>

<p>methods for accepting partially-formed objects/object literals will not be output.</p>

<p>With</p>

<code>--ts_proto_opt=stringEnums=true</code>

<p>, the generated enum types will be string-based instead of int-based.</p>

<p>This is useful if you want "only types" and are using a gRPC REST Gateway configured to serialize enums as strings.</p>

<p>(Requires</p>

<code>outputEncodeMethods=false</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=outputClientImpl=false</code>

<p>, the client implementations, i.e.</p>

<code>FooServiceClientImpl</code>

<p>, that implement the client-side (in Twirp, see next option for</p>

<code>grpc-web</code>

<p>) RPC interfaces will not be output.</p>

<p>With</p>

<code>--ts_proto_opt=outputClientImpl=grpc-web</code>

<p>, the client implementations, i.e.</p>

<code>FooServiceClientImpl</code>

<p>, will use the</p>

<p>library at runtime to send grpc messages to a grpc-web backend.</p>

<p>(Note that this only uses the grpc-web runtime, you don't need to use any of their generated code, i.e. the ts-proto output replaces their</p>

<code>ts-protoc-gen</code>

<p>output.)</p>

<p>You'll need to add the</p>

<code>@improbable-eng/grpc-web</code>

<p>and a transport to your project's</p>

<code>package.json</code>

<p>; see the</p>

<code>integration/grpc-web</code>

<p>directory for a working example. Also see</p>

<p>for integrating with</p>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=returnObservable=true</code>

<p>, the return type of service methods will be</p>

<code>Observable<T></code>

<p>instead of</p>

<code>Promise<T></code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=addGrpcMetadata=true</code>

<p>, the last argument of service methods will accept the grpc</p>

<code>Metadata</code>

<p>type, which contains additional information with the call (i.e. access tokens/etc.).</p>

<p>(Requires</p>

<code>nestJs=true</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=addNestjsRestParameter=true</code>

<p>, the last argument of service methods will be an rest parameter with type any. This way you can use custom decorators you could normally use in nestjs.</p>

<p>(Requires</p>

<code>nestJs=true</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=nestJs=true</code>

<p>, the defaults will change to generate</p>

<p>friendly types & service interfaces that can be used in both the client-side and server-side of NestJS protobuf implementations. See the</p>

<p>for more information and implementation examples.</p>

<p>Specifically</p>

<code>outputEncodeMethods</code>

<p>,</p>

<code>outputJsonMethods</code>

<p>, and</p>

<code>outputClientImpl</code>

<p>will all be false,</p>

<code>lowerCaseServiceMethods</code>

<p>will be true and</p>

<code>outputServices</code>

<p>will be ignored.</p>

<p>Note that</p>

<code>addGrpcMetadata</code>

<p>,</p>

<code>addNestjsRestParameter</code>

<p>and</p>

<code>returnObservable</code>

<p>will still be false.</p>

<p>With</p>

<code>--ts_proto_opt=useDate=false</code>

<p>, fields of type</p>

<code>google.protobuf.Timestamp</code>

<p>will not be mapped to type</p>

<code>Date</code>

<p>in the generated types. See</p>

<p>for more details.</p>

<p>With</p>

<code>--ts_proto_opt=useMongoObjectId=true</code>

<p>, fields of a type called ObjectId where the message is constructed to have on field called value that is a string will be mapped to type</p>

<code>mongodb.ObjectId</code>

<p>in the generated types. This will require your project to install the mongodb npm package. See</p>

<p>for more details.</p>

<p>With</p>

<code>--ts_proto_opt=outputSchema=true</code>

<p>, meta typings will be generated that can later be used in other code generators.</p>

<p>With</p>

<code>--ts_proto_opt=outputTypeAnnotations=true</code>

<p>, each message will be given a</p>

<code>$type</code>

<p>field containing its fully-qualified name. You can use</p>

<code>--ts_proto_opt=outputTypeAnnotations=static-only</code>

<p>to omit it from the</p>

<code>interface</code>

<p>declaration.</p>

<p>With</p>

<code>--ts_proto_opt=outputTypeRegistry=true</code>

<p>, the type registry will be generated that can be used to resolve message types by fully-qualified name. Also, each message will be given a</p>

<code>$type</code>

<p>field containing its fully-qualified name.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=grpc-js</code>

<p>, ts-proto will output service definitions and server / client stubs in</p>

<p>format.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=generic-definitions</code>

<p>, ts-proto will output generic (framework-agnostic) service definitions. These definitions contain descriptors for each method with links to request and response types, which allows to generate server and client stubs at runtime, and also generate strong types for them at compile time. An example of a library that uses this approach is</p>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=nice-grpc</code>

<p>, ts-proto will output server and client stubs for</p>

<p>. This should be used together with generic definitions, i.e. you should specify two options:</p>

<code>outputServices=nice-grpc,outputServices=generic-definitions</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=metadataType=Foo@./some-file</code>

<p>, ts-proto add a generic (framework-agnostic) metadata field to the generic service definition.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=generic-definitions,outputServices=default</code>

<p>, ts-proto will output both generic definitions and interfaces. This is useful if you want to rely on the interfaces, but also have some reflection capabilities at runtime.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=false</code>

<p>, or</p>

<code>=none</code>

<p>, ts-proto will output NO service definitions.</p>

<p>With</p>

<code>--ts_proto_opt=useAbortSignal=true</code>

<p>, the generated services will accept an</p>

<code>AbortSignal</code>

<p>to cancel RPC calls.</p>

<p>With</p>

<code>--ts_proto_opt=useAsyncIterable=true</code>

<p>, the generated services will use</p>

<code>AsyncIterable</code>

<p>instead of</p>

<code>Observable</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=emitImportedFiles=false</code>

<p>, ts-proto will not emit</p>

<code>google/protobuf/*</code>

<p>files unless you explicit add files to</p>

<code>protoc</code>

<p>like this</p>

<code>protoc --plugin=./node_modules/.bin/protoc-gen-dcl_ts_proto my_message.proto google/protobuf/duration.proto</code>

<p>With</p>

<code>--ts_proto_opt=fileSuffix=<SUFFIX></code>

<p>, ts-proto will emit generated files using the specified suffix. A</p>

<code>helloworld.proto</code>

<p>file with</p>

<code>fileSuffix=.pb</code>

<p>would be generated as</p>

<code>helloworld.pb.ts</code>

<p>. This is common behavior in other protoc plugins and provides a way to quickly glob all the generated files.</p>

<p>With</p>

<code>--ts_proto_opt=importSuffix=<SUFFIX></code>

<p>, ts-proto will emit file imports using the specified suffix. An import of</p>

<code>helloworld.ts</code>

<p>with</p>

<code>fileSuffix=.js</code>

<p>would generate</p>

<code>import "helloworld.js"</code>

<p>. The default is to import without a file extension. Supported by TypeScript 4.7.x and up.</p>

<p>With</p>

<code>--ts_proto_opt=enumsAsLiterals=true</code>

<p>, the generated enum types will be enum-ish object with</p>

<code>as const</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=useExactTypes=false</code>

<p>, the generated</p>

<code>fromPartial</code>

<p>and</p>

<code>create</code>

<p>methods will not use Exact types.</p>

<p>The default behavior is</p>

<code>useExactTypes=true</code>

<p>, which makes</p>

<code>fromPartial</code>

<p>and</p>

<code>create</code>

<p>use Exact type for its argument to make TypeScript reject any unknown properties.</p>

<p>With</p>

<code>--ts_proto_opt=unknownFields=true</code>

<p>, all unknown fields will be parsed and output as arrays of buffers.</p>

<p>With</p>

<code>--ts_proto_opt=onlyTypes=true</code>

<p>, only types will be emitted, and imports for</p>

<code>long</code>

<p>and</p>

<code>protobufjs/minimal</code>

<p>will be excluded.</p>

<p>This is the same as setting</p>

<code>outputJsonMethods=false,outputEncodeMethods=false,outputClientImpl=false,nestJs=false</code>

<p>With</p>

<code>--ts_proto_opt=usePrototypeForDefaults=true</code>

<p>, the generated code will wrap new objects with</p>

<code>Object.create</code>

<p>.</p>

<p>This allows code to do hazzer checks to detect when default values have been applied, which due to proto3's behavior of not putting default values on the wire, is typically only useful for interacting with proto2 messages.</p>

<p>When enabled, default values are inherited from a prototype, and so code can use Object.keys().includes("someField") to detect if someField was actually decoded or not.</p>

<p>Note that, as indicated, this means Object.keys will not include set-by-default fields, so if you have code that iterates over messages keys in a generic fashion, it will have to also iterate over keys inherited from the prototype.</p>

<p>With</p>

<code>--ts_proto_opt=useJsonWireFormat=true</code>

<p>, the generated code will reflect the JSON representation of Protobuf messages.</p>

<p>Requires</p>

<code>onlyTypes=true</code>

<p>. Implies</p>

<code>useDate=string</code>

<p>and</p>

<code>stringEnums=true</code>

<p>. This option is to generate types that can be directly used with marshalling/unmarshalling Protobuf messages serialized as JSON.

You may also want to set</p>

<code>useOptionals=all</code>

<p>, as gRPC gateways are not required to send default value for scalar values.</p>

<p>With</p>

<code>--ts_proto_opt=useNumericEnumForJson=true</code>

<p>, the JSON converter (</p>

<code>toJSON</code>

<p>) will encode enum values as int, rather than a string literal.</p>

<p>With</p>

<code>--ts_proto_opt=initializeFieldsAsUndefined=false</code>

<p>, all optional field initializers will be omited from the generated base instances.</p>

<p>With</p>

<code>--ts_proto_opt=Mgoogle/protobuf/empty.proto=./google3/protobuf/empty</code>

<p>, ('M' means 'importMapping', similar to</p>

<p>), the generated code import path for</p>

<code>./google/protobuf/empty.ts</code>

<p>will reflect the overridden value:</p>

<code>Mfoo/bar.proto=@myorg/some-lib</code>

<li>will map</li>

<code>foo/bar.proto</code>

<li>imports into</li>

<code>import ... from '@myorg/some-lib'</code>

<li>.</li>

<code>Mfoo/bar.proto=./some/local/lib</code>

<li>will map</li>

<code>foo/bar.proto</code>

<li>imports into</li>

<code>import ... from './some/local/lib'</code>

<li>.</li>

<code>Mfoo/bar.proto=some-modules/some-lib</code>

<li>will map</li>

<code>foo/bar.proto</code>

<li>imports into</li>

<code>import ... from 'some-module/some-lib'</code>

<li>.</li>

<strong>Note</strong>

<li>: Uses are accummulated, so multiple values are expected in the form of</li>

<code>--ts_proto_opt=M... --ts_proto_opt=M...</code>

<li>(one</li>

<code>ts_proto_opt</code>

<li>per mapping).</li>

<strong>Note</strong>

<li>: Proto files that match mapped imports</li>

<strong>will not be generated</strong>

<li>.</li>

<p>With</p>

<code>--ts_proto_opt=useMapType=true</code>

<p>, the generated code for protobuf</p>

<code>map<key_type, value_type></code>

<p>will become</p>

<code>Map<key_type, value_type></code>

<p>that uses JavaScript Map type.</p>

<p>The default behavior is</p>

<code>useMapType=false</code>

<p>, which makes it generate the code for protobuf</p>

<code>map<key_type, value_type</code>

<p>with the key-value pair like</p>

<code>{[key: key_type]: value_type}</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=useReadonlyTypes=true</code>

<p>, the generated types will be declared as immutable using typescript's</p>

<code>readonly</code>

<p>modifer.</p>

<p>With</p>

<code>--ts_proto_opt=useSnakeTypeName=false</code>

<p>will remove snake casing from types.</p>

<p>Example Protobuf</p>

<pre>{</pre>

<pre>{</pre>

<pre>{</pre>

<pre>{</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;

                }

          }

      }

}</pre>

<p>by default this is enabled which would generate a type of</p>

<code>Box_Element_Image_Alignment</code>

<p>. By disabling this option the type that is generated would be</p>

<code>BoxElementImageAlignment</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=outputExtensions=true</code>

<p>, the generated code will include proto2 extensions</p>

<p>Extension encode/decode methods are compliant with the</p>

<code>outputEncodeMethods</code>

<p>option, and if</p>

<code>unknownFields=true</code>

<p>,

the</p>

<code>setExtension</code>

<p>and</p>

<code>getExtension</code>

<p>methods will be created for extendable messages, also compliant with</p>

<code>outputEncodeMethods</code>

<p>(setExtension = encode, getExtension = decode).</p>

<p>With</p>

<code>--ts_proto_opt=outputIndex=true</code>

<p>, index files will be generated based on the proto package namespaces.</p>

<p>This will disable</p>

<code>exportCommonSymbols</code>

<p>to avoid name collisions on the common symbols.</p>

<h3>NestJS Support</h3>

<p>We have a great way of working together with</p>

<p>.</p>

<code>ts-proto</code>

<p>generates</p>

<code>interfaces</code>

<p>and</p>

<code>decorators</code>

<p>for you controller, client. For more information see the</p>

<p>.</p>

<h3>Watch Mode</h3>

<p>If you want to run</p>

<code>ts-proto</code>

<p>on every change of a proto file, you'll need to use a tool like</p>

<p>and use it as a script in</p>

<code>package.json</code>

<p>:</p>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<h3>Basic gRPC implementation</h3>

<code>ts-proto</code>

<p>is RPC framework agnostic - how you transmit your data to and from

your data source is up to you. The generated client implementations all expect

a</p>

<code>rpc</code>

<p>parameter, which type is defined like this:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>If you're working with gRPC, a simple implementation could look like this:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h1>Sponsors</h1>

<p>Kudos to our sponsors:</p>

<li>funded ts-proto's initial grpc-web support.</li>

<p>If you need ts-proto customizations or priority support for your company, you can ping me at</p>

<p>.</p>

<h1>Development</h1>

<p>This section describes how to contribute directly to ts-proto, i.e. it's not required for running</p>

<code>ts-proto</code>

<p>in</p>

<code>protoc</code>

<p>or using the generated TypeScript.</p>

<strong>Requirements</strong>

<li>or</li>

<li>v3.19.1</li>

<code>yarn</code>

<li>â</li>

<code>npm install -g yarn</code>

<strong>Setup</strong>

<p>The commands below assume you have</p>

<strong>Docker</strong>

<p>installed. To use a</p>

<strong>local</strong>

<p>copy of</p>

<code>protoc</code>

<p>without docker, use commands suffixed with</p>

<code>:local</code>

<p>. If you are using OS X, install</p>

<strong>coreutils</strong>

<p>,</p>

<code>brew install coreutils</code>

<p>.</p>

<li>Check out the</li>

<li>for the latest code.</li>

<li>Run</li>

<code>yarn install</code>

<li>to install the dependencies.</li>

<li>Run</li>

<code>yarn build:test</code>

<li>to generate the test files.</li>

<em>This runs the following commands:</em>

<code>proto2bin</code>

<li>â Converts integration test</li>

<code>.proto</code>

<li>files to</li>

<code>.bin</code>

<li>.</li>

<code>bin2ts</code>

<li>â Runs</li>

<code>ts-proto</code>

<li>on the</li>

<code>.bin</code>

<li>files to generate</li>

<code>.ts</code>

<li>files.</li>

<code>proto2pbjs</code>

<li>â Generates a reference implementation using</li>

<code>pbjs</code>

<li>for testing compatibility.</li>

<li>Run</li>

<code>yarn test</code>

<strong>Workflow</strong>

<li>Add/update an integration test for your use case</li>

<li>Either find an existing</li>

<code>integration/*</code>

<li>test that is close enough to your use case, e.g. has a</li>

<code>parameters.txt</code>

<li>that matches the</li>

<code>ts_proto_opt</code>

<li>params necessary to reproduce your use case</li>

<li>If creating a new integration test:</li>

<li>Make a new</li>

<code>integration/your-new-test/parameters.txt</code>

<li>with the necessary</li>

<code>ts_proto_opt</code>

<li>params</li>

<li>Create a minimal</li>

<code>integration/your-new-test/your-new-test.proto</code>

<li>schema to reproduce your use case</li>

<li>After any changes to</li>

<code>your-new-test.proto</code>

<li>, or an existing</li>

<code>integration/*.proto</code>

<li>file, run</li>

<code>yarn proto2bin</code>

<li>You can also leave</li>

<code>yarn watch</code>

<li>running, and it should "just do the right thing"</li>

<li>Add/update a</li>

<code>integration/your-new-test/some-test.ts</code>

<li>unit test, even if it's as trivial as just making sure the generated code compiles</li>

<li>Modify the</li>

<code>ts-proto</code>

<li>code generation logic:</li>

<li>Most important logic is found in</li>

<li>.</li>

<li>After any changes to</li>

<code>src/*.ts</code>

<li>files, run</li>

<code>yarn bin2ts</code>

<li>to re-codegen all integration tests</li>

<li>Or</li>

<code>yarn bin2ts your-new-test</code>

<li>to re-codegen a specific test</li>

<li>Again leaving</li>

<code>yarn watch</code>

<li>running should "just do the right thing"</li>

<li>Run</li>

<code>yarn test</code>

<li>to verify your changes pass all existing tests</li>

<li>Commit and submit a PR</li>

<li>Run</li>

<code>yarn format</code>

<li>to format the typescript files.</li>

<li>Make sure to</li>

<code>git add</code>

<li>all of the</li>

<code>*.proto</code>

<li>,</li>

<code>*.bin</code>

<li>, and</li>

<code>*.ts</code>

<li>files in</li>

<code>integration/your-new-test</code>

<li>Sometimes checking in generated code is frowned upon, but given ts-proto's main job is to generate code, seeing the codegen diffs in PRs is helpful</li>

<strong>Dockerized Protoc</strong>

<p>The repository includes a dockerized version of</p>

<code>protoc</code>

<p>, which is configured in</p>

<p>.</p>

<p>It can be useful in case you want to manually invoke the plugin with a known version of</p>

<code>protoc</code>

<p>.</p>

<p>Usage:</p>

<pre>aliases.sh</pre>

<pre>protoc --plugin=/ts-proto/protoc-gen-dcl_ts_proto --ts_proto_out=./output -I=./protos ./protoc/</pre>

<pre>.proto</pre>

<pre>ts-protoc --ts_proto_out=./output -I=./protos ./protoc/</pre>

<pre>.proto</pre>

<li>All paths must be relative paths</li>

<em>within</em>

<li>the current working directory of the host.</li>

<code>../</code>

<li>is not allowed</li>

<li>Within the docker container, the absolute path to the project root is</li>

<code>/ts-proto</code>

<li>The container mounts the current working directory in</li>

<code>/host</code>

<li>, and sets it as its working directory.</li>

<li>Once</li>

<code>aliases.sh</code>

<li>is sourced, you can use the</li>

<code>protoc</code>

<li>command in any folder.</li>

<h1>Assumptions</h1>

<li>TS/ES6 module name is the proto package</li>

<h1>Todo</h1>

<li>Support the string-based encoding of duration in</li>

<code>fromJSON</code>

<li>/</li>

<code>toJSON</code>

<li>Make</li>

<code>oneof=unions</code>

<li>the default behavior in 2.0</li>

<li>Probably change</li>

<code>forceLong</code>

<li>default in 2.0, should default to</li>

<code>forceLong=long</code>

<li>Make</li>

<code>esModuleInterop=true</code>

<li>the default in 2.0</li>

<h1>OneOf Handling</h1>

<p>By default, ts-proto models</p>

<code>oneof</code>

<p>fields "flatly" in the message, e.g. a message like:</p>

<pre>{</pre>

<pre>{</pre>

<pre>;</pre>

<pre>; }

}</pre>

<p>Will generate a</p>

<code>Foo</code>

<p>type with two fields:</p>

<code>field_a: string | undefined;</code>

<p>and</p>

<code>field_b: string | undefined</code>

<p>.</p>

<p>With this output, you'll have to check both</p>

<code>if object.field_a</code>

<p>and</p>

<code>if object.field_b</code>

<p>, and if you set one, you'll have to remember to unset the other.</p>

<p>Instead, we recommend using the</p>

<code>oneof=unions</code>

<p>option, which will change the output to be an Abstract Data Type/ADT like:</p>

<pre>?:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>As this will automatically enforce only one of</p>

<code>field_a</code>

<p>or</p>

<code>field_b</code>

<p>"being set" at a time, because the values are stored in the</p>

<code>eitherField</code>

<p>field that can only have a single value at a time.</p>

<p>(Note that</p>

<code>eitherField</code>

<p>is optional b/c</p>

<code>oneof</code>

<p>in Protobuf means "at most one field" is set, and does not mean one of the fields</p>

<em>must</em>

<p>be set.)</p>

<p>In ts-proto's currently-unscheduled 2.x release,</p>

<code>oneof=unions</code>

<p>will become the default behavior.</p>

<h1>Default values and unset fields</h1>

<p>In core Protobuf (and so also</p>

<code>ts-proto</code>

<p>), values that are</p>

<em>unset</em>

<p>or equal to the default value are not sent over the wire.</p>

<p>For example, the default value of a message is</p>

<code>undefined</code>

<p>. Primitive types take their natural default value, e.g.</p>

<code>string</code>

<p>is</p>

<code>''</code>

<p>,</p>

<code>number</code>

<p>is</p>

<code>0</code>

<p>, etc.</p>

<p>Protobuf chose/enforces this behavior because it enables forward compatibility, as primitive fields will always have a value, even when omitted by outdated agents.</p>

<p>This is good, but it also means</p>

<em>default</em>

<p>and</p>

<em>unset</em>

<p>values cannot be distinguished in</p>

<code>ts-proto</code>

<p>fields; it's just fundamentally how Protobuf works.</p>

<p>If you need primitive fields where you can detect set/unset, see</p>

<p>.</p>

<strong>Encode / Decode</strong>

<code>ts-proto</code>

<p>follows the Protobuf rules, and always returns default values for unsets fields when decoding, while omitting them from the output when serialized in binary format.</p>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>:</pre>

<strong>fromJSON / toJSON</strong>

<p>Reading JSON will also initialize the default values. Since senders may either omit unset fields, or set them to the default value, use</p>

<code>fromJSON</code>

<p>to normalize the input.</p>

<pre>:</pre>

<pre>:</pre>

<p>When writing JSON,</p>

<code>ts-proto</code>

<p>currently does</p>

<strong>not</strong>

<p>normalize message when converting to JSON, other than omitting unset fields, but it may do so in the future.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<li>Please open an issue if you need this behavior.</li>

<h1>Well-Known Types</h1>

<p>Protobuf comes with several predefined message definitions, called "</p>

<p>".

Their interpretation is defined by the Protobuf specification, and libraries are expected to convert these messages to corresponding native types in the target language.</p>

<code>ts-proto</code>

<p>currently automatically converts these messages to their corresponding native types.</p>

<li>â</li>

<code>boolean</code>

<li>â</li>

<code>Uint8Array</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>string[]</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>any[]</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>string</code>

<li>â</li>

<code>any</code>

<li>(i.e.</li>

<code>number | string | boolean | null | array | object</code>

<li>)</li>

<li>â</li>

<code>{ [key: string]: any }</code>

<h2>Wrapper Types</h2>

<p>Wrapper Types are messages containing a single primitive field, and can be imported in</p>

<code>.proto</code>

<p>files with</p>

<code>import "google/protobuf/wrappers.proto"</code>

<p>.</p>

<p>Since these are</p>

<em>messages</em>

<p>, their default value is</p>

<code>undefined</code>

<p>, allowing you to distinguish unset primitives from their default values, when using Wrapper Types.</p>

<code>ts-proto</code>

<p>generates these fields as</p>

<code><primitive> | undefined</code>

<p>.</p>

<p>For example:</p>

<pre>;</pre>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>:</pre>

<p>When encoding a message the primitive value is converted back to its corresponding wrapper type:</p>

<pre>:</pre>

<p>When calling toJSON, the value is not converted, because wrapper types are idiomatic in JSON.</p>

<pre>:</pre>

<h2>JSON Types (Struct Types)</h2>

<p>Protobuf's language and types are not sufficient to represent all possible JSON values, since JSON may contain values whose type is unknown in advance.

For this reason, Protobuf offers several additional types to represent arbitrary JSON values.</p>

<p>These are called Struct Types, and can be imported in</p>

<code>.proto</code>

<p>files with</p>

<code>import "google/protobuf/struct.proto"</code>

<p>.</p>

<li>â</li>

<code>any</code>

<li>This is the most general type, and can represent any JSON value (i.e.</li>

<code>number | string | boolean | null | array | object</code>

<li>).</li>

<li>â</li>

<code>any[]</code>

<li>To represent a JSON array</li>

<li>â</li>

<code>{ [key: string]: any }</code>

<li>To represent a JSON object</li>

<code>ts-proto</code>

<p>automatically converts back and forth between these Struct Types and their corresponding JSON types.</p>

<p>Example:</p>

<pre>;</pre>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>:</pre>

<p>Encoding a JSON value embedded in a message, converts it to a Struct Type:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Timestamp</h2>

<p>The representation of</p>

<code>google.protobuf.Timestamp</code>

<p>is configurable by the</p>

<code>useDate</code>

<p>flag.</p>

<th>Protobuf well-known type</th>

<th>Default/</th>

<code>useDate=true</code>

<code>useDate=false</code>

<code>useDate=string</code>

<code>google.protobuf.Timestamp</code>

<code>Date</code>

<code>{ seconds: number, nanos: number }</code>

<code>string</code>

<h1>Number Types</h1>

<p>Numbers are by default assumed to be plain JavaScript</p>

<code>number</code>

<p>s.</p>

<p>This is fine for Protobuf types like</p>

<code>int32</code>

<p>and</p>

<code>float</code>

<p>, but 64-bit types like</p>

<code>int64</code>

<p>can't be 100% represented by JavaScript's</p>

<code>number</code>

<p>type, because</p>

<code>int64</code>

<p>can have larger/smaller values than</p>

<code>number</code>

<p>.</p>

<p>ts-proto's default configuration (which is</p>

<code>forceLong=number</code>

<p>) is to still use</p>

<code>number</code>

<p>for 64-bit fields, and then throw an error if a value (at runtime) is larger than</p>

<code>Number.MAX_SAFE_INTEGER</code>

<p>.</p>

<p>If you expect to use 64-bit / higher-than-</p>

<code>MAX_SAFE_INTEGER</code>

<p>values, then you can use the ts-proto</p>

<code>forceLong</code>

<p>option, which uses the</p>

<p>npm package to support the entire range of 64-bit values.</p>

<p>The protobuf number types map to JavaScript types based on the</p>

<code>forceLong</code>

<p>config option:</p>

<th>Protobuf number types</th>

<th>Default/</th>

<code>forceLong=number</code>

<code>forceLong=long</code>

<code>forceLong=string</code>

<td>double</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>float</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>int32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>int64</td>

<td>number*</td>

<td>Long</td>

<td>string</td>

<td>uint32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>uint64</td>

<td>number*</td>

<td>Unsigned Long</td>

<td>string</td>

<td>sint32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>sint64</td>

<td>number*</td>

<td>Long</td>

<td>string</td>

<td>fixed32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>fixed64</td>

<td>number*</td>

<td>Unsigned Long</td>

<td>string</td>

<td>sfixed32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>sfixed64</td>

<td>number*</td>

<td>Long</td>

<td>string</td>

<p>Where (*) indicates they might throw an error at runtime.</p>

<h1>Current Status of Optional Values</h1>

<li>Required primitives: use as-is, i.e.</li>

<code>string name = 1</code>

<li>.</li>

<li>Optional primitives: use wrapper types, i.e.</li>

<code>StringValue name = 1</code>

<li>.</li>

<li>Required messages: not available</li>

<li>Optional messages: use as-is, i.e.</li>

<code>SubMessage message = 1</code>

<li>.</li>

<h2>About</h2>

<p>An idiomatic protobuf generator for TypeScript</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>298</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/substreams-sink-postgres

# URL: https://github.com/decentraland/substreams-sink-postgres

<title>GitHub - decentraland/substreams-sink-postgres</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-sink-postgres</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>117</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Substreams Sink PostgreSQL</h1>

<p>This is a command line tool to quickly sync a Substreams with a PostgreSQL database.</p>

<h3>Quickstart</h3>

<p>Install</p>

<code>substreams-sink-postgres</code>

<p>by using the pre-built binary release</p>

<p>. Extract</p>

<code>substreams-sink-postgres</code>

<p>binary into a folder and ensure this folder is referenced globally via your</p>

<code>PATH</code>

<p>environment variable.</p>

<strong>Note</strong>

<p>Or install from source directly</p>

<code>go install github.com/streamingfast/substreams-sink-postgres/cmd/substreams-sink-postgres@latest</code>

<p>.</p>

<p>Start Docker Compose:</p>

<pre>docker compose up</pre>

<strong>Note</strong>

<p>Feel free to skip this step if you already have a running Postgres instance accessible, don't forget to update the connection string in the command below.</p>

<p>Run the setup command:</p>

<pre>substreams-sink-postgres setup</pre>

<pre>docs/tutorial/schema.sql</pre>

<p>This will connect to the given database pointed by</p>

<code>psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable</code>

<p>, create the tables and indexes specified in the given</p>

<code><schema_file></code>

<p>, and will create the required tables to run the sink (e.g. the</p>

<code>cursors</code>

<p>table).</p>

<strong>Note</strong>

<p>For the sake of idempotency, we recommend that the schema file only contain</p>

<code>create table if not exists</code>

<p>statements.</p>

<p>Run the sink</p>

<p>Compile the</p>

<p>tutorial project first:</p>

<pre>docs/tutorial

cargo build --target wasm32-unknown-unknown --release</pre>

<pre>../..</pre>

<p>Once the compilation has completed, let launch the</p>

<code>sink</code>

<p>process.</p>

<strong>Note</strong>

<p>To connect to Substreams you will need an authentication token, follow this</p>

<p>to obtain one.</p>

<pre>substreams-sink-postgres run \</pre>

<pre>\</pre>

<pre>\</pre>

<pre>\

    db_out</pre>

<h3>Output Module</h3>

<p>To be accepted by</p>

<code>substreams-sink-postgres</code>

<p>, your module output's type must be a</p>

<p>message. The Rust crate</p>

<p>contains bindings and helpers to implement it easily. Some project implementing</p>

<code>db_out</code>

<p>module for reference:</p>

<li>(some helpers found in</li>

<li>)</li>

<p>By convention, we name the</p>

<code>map</code>

<p>module that emits</p>

<p>output</p>

<code>db_out</code>

<p>.</p>

<p>Note that using prior versions (0.2.0, 0.1.*) of</p>

<code>substreams-database-change</code>

<p>, you have to use</p>

<code>substreams.database.v1.DatabaseChanges</code>

<p>in your</p>

<code>substreams.yaml</code>

<p>and put the respected version of the</p>

<code>spkg</code>

<p>in your</p>

<code>substreams.yaml</code>

<h3>PostgreSQL DSN</h3>

<p>The connection string is provided using a simple string format respecting the URL specification. The DSN format is:</p>

<code>psql://<user>:<password>@<host>/<dbname>[?<options>]</code>

<p>Where</p>

<code><options></code>

<p>is URL query parameters in</p>

<code><key>=<value></code>

<p>format, multiple options are separated by</p>

<code>&</code>

<p>signs. Supported options can be seen</p>

<p>. The options</p>

<code><user></code>

<p>,</p>

<code><password></code>

<p>,</p>

<code><host></code>

<p>and</p>

<code><dbname></code>

<p>should</p>

<strong>not</strong>

<p>be passed in</p>

<code><options></code>

<p>as they are automatically extracted from the DSN URL.</p>

<p>Moreover, the</p>

<code>schema</code>

<p>option key can be used to select a particular schema within the</p>

<code><dbname></code>

<p>database.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/platform-test-helpers

# URL: https://github.com/decentraland/platform-test-helpers

<title>GitHub - decentraland/platform-test-helpers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/platform-test-helpers</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>35</strong>

<h2>Files</h2>

<button>View code</button>

<h1>platform-test-helpers</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/glTFast

# URL: https://github.com/decentraland/glTFast

<title>GitHub - decentraland/glTFast: Efficient glTF 3D import / export package for Unity</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Efficient glTF 3D import / export package for Unity</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/glTFast</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,475</strong>

<h2>Files</h2>

<button>View code</button>

<h1>glTFast for Unity</h1>

<em>glTFast</em>

<p>enables use of</p>

<p>asset files in</p>

<p>.</p>

<p>It focuses on speed, memory efficiency and a small build footprint while also providing:</p>

<li>100%</li>

<li>compliance</li>

<li>Ease of use</li>

<li>Robustness and Stability</li>

<li>Customization and extensibility for advanced users</li>

<p>Check out the</p>

<p>and try the</p>

<p>.</p>

<h2>Features</h2>

<em>glTFast</em>

<p>supports the full</p>

<p>and many extensions. It works with Universal, High Definition and the Built-In Render Pipelines on all platforms.</p>

<p>See the</p>

<p>.</p>

<h3>Workflows</h3>

<p>There are four use-cases for glTF within Unity</p>

<li>Import</li>

<li>in games/applications</li>

<li>(i.e. import assets at design-time)</li>

<li>Export</li>

<li>(save and share dynamic, user-generated 3D content)</li>

<li>(Unity as glTF authoring tool)</li>

<p>Read more about the workflows in the</p>

<p>.</p>

<h2>Installing</h2>

<p>The easiest way to install is to download and open the</p>

<p>It runs a script that installs</p>

<em>glTFast</em>

<p>via a</p>

<p>.</p>

<p>Afterwards</p>

<em>glTFast</em>

<p>and further, optional packages are listed in the</p>

<em>Package Manager</em>

<p>(under</p>

<em>My Registries</em>

<p>) and can be installed and updated from there.</p>

<h3>Optional Packages</h3>

<p>There are some related package that improve</p>

<em>glTFast</em>

<p>by extending its feature set.</p>

<li>(provides support for</li>

<li>)</li>

<li>(provides support for</li>

<li>)</li>

<em>meshoptimizer decompression for Unity</em>

<li>(provides support for</li>

<li>)</li>

<em>glTFast</em>

<p>5.x requires Unity 2019.3 or newer. For older Unity versions see</p>

<p>.</p>

<h2>Usage</h2>

<p>You can load a glTF asset from an URL or a file path.</p>

<h3>Runtime Loading via Component</h3>

<p>Add a</p>

<code>GltfAsset</code>

<p>component to a GameObject.</p>

<h3>Runtime Loading via Script</h3>

<pre>gameObject</pre>

<pre>GLTFast</pre>

<pre>GltfAsset</pre>

<pre>gltf</pre>

<pre>url</pre>

<p>See</p>

<p>in the documentation for more details and instructions how to</p>

<p>via script.</p>

<h3>Editor Import</h3>

<p>Move or copy</p>

<em>glTF</em>

<p>files into your project's</p>

<em>Assets</em>

<p>folder, similar to other 3D formats:</p>

<em>glTFast</em>

<p>will import them to native Unity prefabs and add them to the asset database.</p>

<p>See</p>

<p>in the documentation for details.</p>

<h3>Editor Export</h3>

<p>The main menu has a couple of</p>

<p>under</p>

<code>File > Export</code>

<p>and glTFs can also be

created</p>

<p>.</p>

<h2>Project Setup</h2>

<h3>Materials and Shader Variants</h3>

<p>â IMPORTANT â</p>

<em>glTFast</em>

<p>uses custom shader graphs that you</p>

<strong>have</strong>

<p>to include in builds in order to make materials work. If materials are fine in the Unity Editor but not in builds, chances are some shaders (or variants) are missing.</p>

<p>Read the section</p>

<em>Materials and Shader Variants</em>

<p>in the</p>

<p>for details.</p>

<h2>Get involved</h2>

<p>Contributions in the form of ideas, comments, critique, bug reports, pull requests are highly appreciated. Feel free to get in contact if you consider using or improving</p>

<em>glTFast</em>

<p>.</p>

<h2>Supporters</h2>

<p>Thanks to</p>

<p>for sponsoring the development of skin support! â¤ï¸</p>

<h2>License</h2>

<p>Copyright (c) 2020-2022 Andreas Atteneder, All Rights Reserved.</p>

<p>Licensed under the Apache License, Version 2.0 (the "License");

you may not use files in this repository except in compliance with the License.

You may obtain a copy of the License at</p>

<p>Unless required by applicable law or agreed to in writing, software

distributed under the License is distributed on an "AS IS" BASIS,

WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

See the License for the specific language governing permissions and

limitations under the License.</p>

<h2>Trademarks</h2>

<em>Unity</em>

<p>is a registered trademark of</p>

<p>.</p>

<em>KhronosÂ®</em>

<p>is a registered trademark and</p>

<em>glTFâ¢</em>

<p>is a trademark of</p>

<p>.</p>

<h2>About</h2>

<p>Efficient glTF 3D import / export package for Unity</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>221</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-coingecko

# URL: https://github.com/decentraland/tap-coingecko

<title>GitHub - decentraland/tap-coingecko: About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-coingecko</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-coingecko</h1>

<code>tap-coingecko</code>

<p>is a Singer tap for coingecko.</p>

<p>Built with the</p>

<p>for Singer Taps.</p>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-coingecko --about</pre>

<h3>Configure using environment variables</h3>

<p>This Singer tap will automatically import any environment variables within the working directory's</p>

<code>.env</code>

<p>if the</p>

<code>--config=ENV</code>

<p>is provided, such that config values will be considered if a matching

environment variable is set either in the terminal context or in the</p>

<code>.env</code>

<p>file.</p>

<h3>Source Authentication and Authorization</h3>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-coingecko</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-coingecko --version

tap-coingecko --help

tap-coingecko --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<p>Follow these instructions to contribute to this project.</p>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_coingecko/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-coingecko</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-coingecko --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-coingecko

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-coingecko --version</pre>

<pre>meltano elt tap-coingecko target-jsonl</pre>

<h3>SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-decentraland-crashbot

# URL: https://github.com/decentraland/tap-decentraland-crashbot

<title>GitHub - decentraland/tap-decentraland-crashbot: Import crashbot data</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Import crashbot data</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-decentraland-crashbot</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-decentraland-crashbot</h1>

<code>tap-decentraland-crashbot</code>

<p>is a Singer tap for DCLCrashbot.</p>

<p>Built with the</p>

<p>for Singer Taps.</p>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-decentraland-crashbot --about</pre>

<h3>Configure using environment variables</h3>

<p>This Singer tap will automatically import any environment variables within the working directory's</p>

<code>.env</code>

<p>if the</p>

<code>--config=ENV</code>

<p>is provided, such that config values will be considered if a matching

environment variable is set either in the terminal context or in the</p>

<code>.env</code>

<p>file.</p>

<h3>Source Authentication and Authorization</h3>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-decentraland-crashbot</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-decentraland-crashbot --version

tap-decentraland-crashbot --help

tap-decentraland-crashbot --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<p>Follow these instructions to contribute to this project.</p>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_decentraland_crashbot/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-decentraland-crashbot</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-decentraland-crashbot --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-decentraland-crashbot

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-decentraland-crashbot --version</pre>

<pre>meltano elt tap-decentraland-crashbot target-jsonl</pre>

<h3>SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>Import crashbot data</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>