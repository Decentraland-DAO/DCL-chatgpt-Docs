

# URL: https://github.com/decentraland-scenes

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h1>decentraland-scenes</h1>

<h2>Pinned</h2>

<tool-tip>Awesome-Repository</tool-tip>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>Repositories</h3>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<h4>People</h4>

<p>This organization has no public members. You must be a member to see whoâs a part of this organization.</p>

<h4>Top languages</h4>

<p>Loadingâ¦</p>

<h4>Most used topics</h4>

<p>Loadingâ¦</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes

# URL: https://github.com/decentraland-scenes

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h1>decentraland-scenes</h1>

<h2>Pinned</h2>

<tool-tip>Awesome-Repository</tool-tip>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>Repositories</h3>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<h4>People</h4>

<p>This organization has no public members. You must be a member to see whoâs a part of this organization.</p>

<h4>Top languages</h4>

<p>Loadingâ¦</p>

<h4>Most used topics</h4>

<p>Loadingâ¦</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories

# URL: https://github.com/orgs/decentraland-scenes/repositories

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>A fully fledged game, based on the popular game 2048.</p>

<p>port of</p>

<p>colyseus-sdk7</p>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<p>Basic 101 Avocado Tutorial</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/dcl-npc-toolkit

# URL: https://github.com/decentraland-scenes/dcl-npc-toolkit

<title>GitHub - decentraland-scenes/dcl-npc-toolkit</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-npc-toolkit</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>16</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>94</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NPC-library</h1>

<p>A collection of tools for creating Non-Player-Characters (NPCs). These are capable of having conversations with the player, and play different animations.</p>

<p>Capabilities of the NPCs in this library:</p>

<p>Start a conversation when clicked or when walking near</p>

<p>Trigger any action when clicked or when walking near</p>

<p>Trigger any action when the player walks away</p>

<p>Turn around slowly to always face the player</p>

<p>Play an animation in the NPC 3d model, optionally returning to loop the idle animation afterwards</p>

<p>The dialog messages can also require that the player chooses options, and any action can be triggered when the player picks an option or advances past a message.</p>

<h2>Install the library</h2>

<h2>Via the Decentraland Editor</h2>

<p>Follow the steps in</p>

<p>with Visual Studio Code open on your project folder.</p>

<p>Open the Decentraland Editor tab. Note that the bottom section lists all of your projectâs currently installed dependencies.</p>

<p>Click the + icon on the header of the Dependencies view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write Â´dcl-npc-toolkitÂ´ and press Enter.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>index.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, call the</li>

<code>create</code>

<li>function passing it a</li>

<code>TransformType</code>

<li>and a</li>

<code>NPCData</code>

<li>object. The</li>

<code>NPCData</code>

<li>object requires a minimum of a</li>

<code>NPCType</code>

<li>and a function to trigger when the NPC is activated:</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<li>Write a dialog script for your character, preferably on a separate file, making it of type</li>

<code>Dialog[]</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Via the CLI</h2>

<li>Install the library as an npm bundle. Run this command in your scene's project folder:</li>

<li>Install the dependent sdk utils library as an npm bundle. Run this command in your scene's project folder:</li>

<code>npm i @dcl-sdk/utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>index.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, call the</li>

<code>create</code>

<li>function passing it a</li>

<code>TransformType</code>

<li>and a</li>

<code>NPCData</code>

<li>object. The</li>

<code>NPCData</code>

<li>object requires a minimum of a</li>

<code>NPCType</code>

<li>and a function to trigger when the NPC is activated:</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<li>Write a dialog script for your character, preferably on a separate file, making it of type</li>

<code>Dialog[]</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>NPC Default Behavior</h2>

<p>NPCs at the very least must have:</p>

<code>position</code>

<p>: (</p>

<em>TransformType</em>

<p>) Must include position, rotation and scale.</p>

<code>NPCData</code>

<p>: (</p>

<em>Data Object</em>

<p>) with a minimum of two variables</p>

<code>type</code>

<p>: (</p>

<em>NPCType</em>

<p>) you have the choice to use a custom GLB object or an</p>

<code>AvatarShape</code>

<p>for your npc</p>

<code>NPCType.CUSTOM</code>

<code>NPCType.AVATAR</code>

<code>onActivate()</code>

<p>: (</p>

<em>()=> void</em>

<p>) A function to call when the NPC is activated.</p>

<em>if you decide to use a</em>

<code>NPCType.CUSTOM</code>

<em>GLB model for your avatar, you must pass in a model object inside the</em>

<code>NPCData</code>

<code>model</code>

<li>: (</li>

<em>string</em>

<li>) The path to a 3D model</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>With this default configuration, the NPC behaves in the following way:</p>

<p>The</p>

<code>onActivate()</code>

<p>function is called when pressing E on the NPC, and when the player walks near at a distance of 6 meters.</p>

<p>Once activated, there's a cooldown period of 5 seconds, that prevents the NPC to be activated again.</p>

<p>After walking away from the NPC, if its dialog window was open it will be closed, and if the NPC was rotating to follow the player it will stop.</p>

<p>If the NPC already has an open dialog window, clicking on the NPC won't do anything, to prevent accidentally clicking on it while flipping through the conversation.</p>

<p>If the NPC has an animation named 'Idle', it will play it in a loop. If other non-looping animations are played, it will return to looping the 'Idle' animation after the indicated duration.</p>

<p>Many of these behaviors can be overridden or tweaked with the exposed properties.</p>

<h2>SDK7 UI</h2>

<p>With sdk7, there are new ways to implement similar features from sdk6, one of them being the way 2D UI objects get created. To add the NPC dialogs to your sdk7 2D UI:</p>

<p>create a variable to hold</p>

<em>all</em>

<p>of your 2D UI objects</p>

<p>import the NPC UI from the library and add the React object to your scene UI tree</p>

<p>create a function to be called once to render all of your 2D UI objects</p>

<pre>UiEntity></pre>

<p>Note: The UI drawn by this library library requires fetching images from an external URL. For the scene to allow you to do this, you must include the</p>

<code>ALLOW_MEDIA_HOSTNAMES</code>

<p>scene permission and add</p>

<code>decentraland.org</code>

<p>to the list of allowed domains in your</p>

<code>scene.json</code>

<p>file. Learn more about</p>

<p>.</p>

<pre>: [</pre>

<pre>],</pre>

<pre>: [</pre>

<pre>],</pre>

<h2>NPC Additional Properties</h2>

<p>To configure other properties of an NPC, add a fourth argument as an</p>

<code>NPCData</code>

<p>object. This object can have the following optional properties:</p>

<code>idleAnim</code>

<p>:</p>

<em>(string)</em>

<p>Name of the idle animation in the model. This animation is always looped. After playing a non-looping animation it returns to looping this one.</p>

<code>faceUser</code>

<p>:</p>

<em>(boolean)</em>

<p>Set if the NPC rotates to face the user while active.</p>

<code>dialogSound</code>

<p>:</p>

<em>(string)</em>

<p>Path to sound file to play once for every entry shown on the UI. If the dialog entry being shown has an</p>

<code>audio</code>

<p>field, the NPC will play the file referenced by the</p>

<code>audio</code>

<p>field instead.</p>

<code>coolDownDuration</code>

<p>:</p>

<em>(number)</em>

<p>Change the cooldown period for activating the NPC again. The number is in seconds.</p>

<code>hoverText</code>

<p>:</p>

<em>(string)</em>

<p>Set the UI hover feedback when pointing the cursor at the NPC.</p>

<em>TALK</em>

<p>by default.</p>

<code>onlyClickTrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by walking near. Just by clicking on it or calling its</p>

<code>activate()</code>

<p>function.</p>

<code>onlyETrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by walking near. Just by pressing the E key on it or calling its</p>

<code>activate()</code>

<p>function.</p>

<code>onlyExternalTrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by clicking, pressing E, or walking near. Just by calling its</p>

<code>activate()</code>

<p>function.</p>

<code>reactDistance</code>

<p>:</p>

<em>(number)</em>

<p>Radius in meters for the player to activate the NPC or trigger the</p>

<code>onWalkAway()</code>

<p>function when leaving the radius.</p>

<code>continueOnWalkAway</code>

<p>:</p>

<em>(boolean)</em>

<p>If true,when the player walks out of the</p>

<code>reactDistance</code>

<p>radius, the dialog window stays open and the NPC keeps turning to face the player (if applicable). It doesn't affect the triggering of the</p>

<code>onWalkAway()</code>

<p>function.</p>

<code>onWalkAway</code>

<p>: (</p>

<em>()=> void</em>

<p>) Function to call every time the player walks out of the</p>

<code>reactDistance</code>

<p>radius.</p>

<code>walkingAnim</code>

<p>:</p>

<em>(string)</em>

<p>Name of the walking animation on the model. This animation is looped when calling the</p>

<code>followPath()</code>

<p>function.</p>

<code>walkingSpeed</code>

<p>:</p>

<em>(number)</em>

<p>Speed of the NPC when walking. By default</p>

<em>2</em>

<p>.</p>

<code>path</code>

<p>:</p>

<em>(Vector3)</em>

<p>Default path to walk. If a value is provided for this field on NPC initialization, the NPC will walk over this path in loop from the start.</p>

<code>bubbleHeight</code>

<p>:</p>

<em>(number)</em>

<p>The height at which to display the speech bubble above the head of the NPC.</p>

<code>textBubble</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, NPC starts with a speech bubble object ready to be accessed from the start. Otherwise, they text bubble is only built on the first call to</p>

<code>talkBubble()</code>

<p>on the NPC.</p>

<code>noUI</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, no UI object is built for UI dialogs for this NPC. This may help optimize the scene if this feature is not used.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Get NPC Data</h2>

<p>There are several properties you can check on an NPC to know what its current state is:</p>

<code>.state</code>

<p>: An enum value of type</p>

<code>NPCState</code>

<p>. Supported values are</p>

<code>NPCState.STANDING</code>

<p>(default),</p>

<code>NPCState.TALKING</code>

<p>, and</p>

<code>NPCState.FOLLOWPATH</code>

<p>.</p>

<code>TALKING</code>

<p>is applied when the dialog window is opened, and set back to</p>

<code>STANDING</code>

<p>when the window is closed.</p>

<code>FOLLOWPATH</code>

<p>is applied when the NPC starts walking, and set back to</p>

<code>STANDING</code>

<p>when the NPC finishes its path or is stopped.</p>

<code>.introduced</code>

<p>: Boolean, false by default. Set to true if the NPC has spoken to the player at least once in this session.</p>

<code>.visible</code>

<p>: Returns a Boolean, false by default. True if the dialog window for this NPC is currently open.</p>

<code>.inCooldown</code>

<p>: Boolean, false by default. True if the NPC was recently activated and it's now in cooldown. The NPC won't respond to being activated till</p>

<code>inCooldown</code>

<p>is false.</p>

<p>TIP: If you want to force an activation of the NPC in spite of the</p>

<code>inCooldown</code>

<p>value, you can force this value to true before activating.</p>

<h2>NPC Callable Actions</h2>

<p>An NPC object has several callable functions that come with the class:</p>

<h3>Talk</h3>

<p>To start a conversation with the NPC using the dialog UI, call the</p>

<code>talk()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>script</code>

<li>:</li>

<em>(Dialog[])</em>

<li>This array contains the information to manage the conversation, including events that may be triggered, options to choose, etc.</li>

<p>It can also take the following optional parameters:</p>

<code>startIndex</code>

<p>:</p>

<em>(number | string)</em>

<p>The</p>

<em>Dialog</em>

<p>object from the</p>

<code>script</code>

<p>array to open first. By default this is</p>

<em>0</em>

<p>, the first element of the array. Pass a number to open the entry on a given array position, or pass a string to open the entry with a</p>

<code>name</code>

<p>property matching that string.</p>

<code>duration</code>

<p>:</p>

<em>(number)</em>

<p>Number of seconds to wait before closing the dialog window. If no value is set, the window is kept open till the player reaches the end of the conversation or something else closes it.</p>

<p>Learn how to build a script object for NPCs in a section below.</p>

<h3>Play Animations</h3>

<p>By default, the NPC will loop an animation named 'Idle', or with a name passed in the</p>

<code>idleAnim</code>

<p>parameter.</p>

<p>Make the NPC play another animation by calling the</p>

<code>playAnimation()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>animationName</code>

<li>:</li>

<em>(string)</em>

<li>The name of the animation to play.</li>

<p>It can also take the following optional parameters:</p>

<code>noLoop</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, plays the animation just once. Otherwise, the animation is looped.</p>

<code>duration</code>

<p>:</p>

<em>(number)</em>

<p>Specifies the duration in seconds of the animation. When finished, it returns to playing the idle animation.</p>

<p>Note: If</p>

<code>noLoop</code>

<p>is true but no</p>

<code>duration</code>

<p>is set, the model will stay still after playing the animation instead of returning to the idle animation.</p>

<h3>Change idle animation</h3>

<p>The NPC's idle animation is looped by default whenever the NPC is not playing any other animations. In some cases you may want to have different idle animations depending on the circumstances, like while in a conversation, or if the NPC changes its general attitude after some event.</p>

<p>You set the NPC's idle animation when creating the NPC, using the</p>

<code>idleAnim</code>

<p>field. To change this animation at some later time, use</p>

<code>changeIdleAnim()</code>

<p>.</p>

<p>The</p>

<code>changeIdleAnim()</code>

<p>function takes two arguments:</p>

<code>animation</code>

<p>: The name of the new animation to set as the idle animation</p>

<code>play</code>

<p>: Optionally pass this value as</p>

<em>true</em>

<p>if you want this new animation to start playing right away.</p>

<h3>Activate</h3>

<p>The</p>

<code>activate()</code>

<p>function can be used to trigger the</p>

<code>onActivate()</code>

<p>function, as an alternative to pressing E or walking near.</p>

<p>The</p>

<code>activate()</code>

<p>function is callable even when in cool down period, and it doesn't start a new cool down period.</p>

<h3>Stop Walking</h3>

<p>If the NPC is currently walking, call</p>

<code>stopWalking()</code>

<p>to stop it moving and return to playing its idle animation.</p>

<code>stopWalking()</code>

<p>can be called with no parameters, or it can also be called with:</p>

<code>duration</code>

<li>: Seconds to wait before starting to walk again. If not provided, the NPC will stop walking indefinitely.</li>

<p>Note: If the NPC is has its dialog window open when the timer for the</p>

<code>duration</code>

<p>ends, the NPC will not return to walking.</p>

<p>To make the NPC play a different animation from idle when paused, call</p>

<code>playAnimation()</code>

<p>after</p>

<code>stopWalking()</code>

<p>.</p>

<h3>Follow Path</h3>

<p>Make an NPC walk following a path of</p>

<code>Vector3</code>

<p>points by calling</p>

<code>followPath()</code>

<p>. While walking, the NPC will play the</p>

<code>walkingAnim</code>

<p>if one was set when defining the NPC. The path can be taken once or on a loop.</p>

<code>followPath()</code>

<p>can be called with no parameters if a</p>

<code>path</code>

<p>was already provided in the NPC's initialization or in a previous calling of</p>

<code>followPath()</code>

<p>. If the NPC was previously in the middle of walking a path and was interrupted, calling</p>

<code>followPath()</code>

<p>again with no arguments will return the NPC to that path.</p>

<p>Note: If the NPC is initialized with a</p>

<code>path</code>

<p>value, it will start out walking that path in a loop, no need to run</p>

<code>followPath()</code>

<p>.</p>

<code>followPath()</code>

<p>has a single optional parameter of type</p>

<code>FollowPathData</code>

<p>. This object may have the following optional fields:</p>

<p>path: Array of</p>

<code>Vector3</code>

<p>positions to walk over.</p>

<p>speed: Speed to move at while walking this path. If no</p>

<code>speed</code>

<p>or</p>

<code>totalDuration</code>

<p>is provided, it uses the NPC's</p>

<code>walkingSpeed</code>

<p>, which is</p>

<em>2</em>

<p>by default.</p>

<p>totalDuration: The duration in</p>

<em>seconds</em>

<p>that the whole path should take. The NPC will move at the constant speed required to finish in that time. This value overrides that of the</p>

<em>speed</em>

<p>.</p>

<p>loop:</p>

<em>boolean</em>

<p>If true, the NPC walks in circles over the provided set of points in the path.</p>

<em>false</em>

<p>by default, unless the NPC is initiated with a</p>

<code>path</code>

<p>, in which case it starts as</p>

<em>true</em>

<p>.</p>

<p>curve:</p>

<em>boolean</em>

<p>If true, the path is traced a single smooth curve that passes over each of the indicated points. The curve is made out of straight-line segments, the path is stored with 4 times as many points as originally defined.</p>

<em>false</em>

<p>by default.</p>

<p>startingPoint: Index position for what point to start from on the path.</p>

<em>0</em>

<p>by default.</p>

<p>onFinishCallback: Function to call when the NPC finished walking over all the points on the path. This is only called when</p>

<code>loop</code>

<p>is</p>

<em>false</em>

<p>.</p>

<p>onReachedPointCallback: Function to call once every time the NPC reaches a point in the path.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>NPC Walking Speed</h4>

<p>The following list of factors are used to determine speed in hierarchical order:</p>

<code>totalDuration</code>

<p>parameter set when calling</p>

<code>followPath()</code>

<p>is used over the total distance travelled over the path.</p>

<code>speed</code>

<p>parameter set when calling</p>

<code>followPath()</code>

<code>walkingSpeed</code>

<p>parameter set when initializing NPC</p>

<p>Default value</p>

<em>2</em>

<p>.</p>

<h4>Joining the path</h4>

<p>If the NPC's current position when calling</p>

<code>followPath()</code>

<p>doesn't match the first position in the</p>

<code>path</code>

<p>array (or the one that matches the</p>

<code>startingPoint</code>

<p>value), the current position is added to the</p>

<code>path</code>

<p>array. The NPC will start by walking from its current position to the first point provided in the path.</p>

<p>The</p>

<code>path</code>

<p>can be a single point, and the NPC will then walk a from its current position to that point.</p>

<p>Note: If the speed of the NPC is determined by a</p>

<code>totalDuration</code>

<p>value, the segment that the NPC walks to join into the path is counted as part of the full path. If this segment is long, it will increase the NPC walking speed so that the full path lasts as what's indicated by the</p>

<code>totalDuration</code>

<p>.</p>

<p>In this example the NPC is far away from the start of the path. It will first walk from</p>

<em>10, 0, 10</em>

<p>to</p>

<em>2, 0, 2</em>

<p>and then continue the path.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Example Interrupting the NPC</h4>

<p>In the following example, an NPC starts roaming walking over a path, pausing on every point to call out for its lost kitten. If the player activates the NPC (by pressing E on it or walking near it) the NPC stops, and turns to face the player and talk. When the conversation is over, the NPC returns to walking its path from where it left off.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>End interaction</h3>

<p>The</p>

<code>endInteraction()</code>

<p>function can be used to abruptly end interactions with the NPC.</p>

<p>If applicable, it closes the dialog UI, hides speech bubbles, and makes the NPC stop rotating to face the player.</p>

<p>As an alternative, you can call the</p>

<code>handleWalkAway()</code>

<p>function, which has the same effects (as long as</p>

<code>continueOnWalkAway</code>

<p>isn't set to true), but also triggers the</p>

<code>onWalkAway()</code>

<p>function.</p>

<h2>NPC Dialog Window</h2>

<p>You can display an interactive dialog window to simulate a conversation with a non-player character (NPC).</p>

<p>The conversation is based on a script in JSON format. The script can include questions that can take you forward or backward, or end the conversation.</p>

<h3>The NPC script</h3>

<p>Each entry on the script must include at least a</p>

<code>text</code>

<p>field, but can include several more fields to further customize it.</p>

<p>Below is a minimal dialog.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The player advances through each entry by clicking the mouse button. Once the last is reached, clicking again closes the window, as it's marked as</p>

<code>isEndOfDialog</code>

<p>.</p>

<p>The script must adhere to the following schema:</p>

<pre>:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<p>Note: A</p>

<code>Dialog</code>

<p>object can be used as an input both for the</p>

<code>talk()</code>

<p>function (that is displayed in the UI), and the</p>

<code>talkBubble()</code>

<p>function (that is displayed in a floating bubble over the NPC). Properties marked with</p>

<code>*</code>

<p>are only applicable to UI dialogs.</p>

<p>You can set the following fields to change the appearance of a dialog:</p>

<code>text</code>

<p>: The dialog text</p>

<code>fontSize</code>

<p>: Size of the text</p>

<p>Other fields:</p>

<code>buttons *</code>

<p>: An array of buttons to use in a question entry, covered in the next section.</p>

<code>audio</code>

<p>: String with the path to an audio file to play once when this dialog is shown on the UI.</p>

<code>typeSpeed</code>

<p>: The text appears one character at a time, simulating typing. Players can click to skip the animation. Tune the speed of this typing (30 by default) to go slower or faster. Set to</p>

<em>-1</em>

<p>to skip the animation.</p>

<h4>Questions and conversation trees</h4>

<p>The script can include questions that prompt the player to pick between two or up to four options. These questions can branch the conversation out and trigger other actions in the scene.</p>

<p>Note: Questions are only used by UI dialogs. If used in a speech bubble, questions will be displayed as regular entries with no buttons or options.</p>

<p>To make an entry a question, set the</p>

<code>isQuestion</code>

<p>field to</p>

<em>true</em>

<p>. This displays a set of buttons rather than the click icon. It also disables the click to advance to the next entry.</p>

<p>The</p>

<code>buttons</code>

<p>property of an entry contains an array of</p>

<code>ButtonData</code>

<p>objects, each one of these defines one button.</p>

<p>When on a question entry, you must provide at least the following for each button:</p>

<code>label</code>

<p>:</p>

<em>(string)</em>

<p>The label to show on the button.</p>

<code>goToDialog</code>

<p>:</p>

<em>(number | string)</em>

<p>The index or name of the next dialog entry to display when activated.</p>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>You can also set the following:</p>

<code>triggeredActions</code>

<p>:</p>

<em>( () => void )</em>

<p>An additional function to run whenever the button is activated</p>

<code>fontSize</code>

<p>:</p>

<em>(number)</em>

<p>Font size of the text</p>

<code>offsetX</code>

<p>:</p>

<em>(number)</em>

<p>Offset of the label on the X axis, relative to its normal position.</p>

<code>offsetY</code>

<p>:</p>

<em>(number)</em>

<p>Offset of the label on the Y axis, relative to its normal position.</p>

<p>All buttons can be clicked to activate them. Additionally, the first button in the array can be activated by pressing the</p>

<em>E</em>

<p>key. The second button in the array can be activated by pressing the</p>

<em>F</em>

<p>key,</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Triggering functions from the dialog</h4>

<p>You can run functions that may affect any other part of your scene. These functions get triggered when the player interacts with the dialog window, or when the NPC displays speech bubbles.</p>

<code>triggeredByNext</code>

<p>: Is executed when the player advances to the next dialog on a non-question dialog. The function also gets called if the dialog is the end of the conversation. It also gets called when a speech bubble advances to the next entry.</p>

<code>triggeredActions</code>

<p>: This property is associated to a button and is executed on a question dialog if the player activates the corresponding button. You can have up to 4 different buttons per entry, each with its own actions.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>No-NPC Dialogs</h2>

<p>You can open a Dialog window that isn't associated with any</p>

<code>NPC</code>

<p>object in the scene. The</p>

<code>openDialogWindow()</code>

<p>function has all the same functionality as calling the</p>

<code>talk()</code>

<p>function on an NPC, but may be more practical in scenarios where a character isn't physically there, or where the conversation isn't with a particular character.</p>

<h3>The Dialog window</h3>

<p>To create a new dialog window, call</p>

<code>createDialogWindow()</code>

<p>and store as a variable. This will instantiate the window but keep it hidden until you open it.</p>

<p>When instantiating a new blank dialog, you can pass the following optional parameters:</p>

<code>defaultPortrait</code>

<p>: Sets a default portrait image to use on the left of all dialogs that don't specify an image. If a dialog has no portrait and no default is provided, no image is shown on the left. This field expects a</p>

<code>Portrait</code>

<p>object, that may include the following fields: -</p>

<code>path</code>

<p>: Path to the image file -</p>

<code>xOffset</code>

<p>: Offset on X, relative to the normal position of the portrait. -</p>

<code>yOffset</code>

<p>: Offset on Y, relative to the normal position of the portrait. -</p>

<code>section</code>

<p>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</p>

<code>ImageSection</code>

<p>object, specifying</p>

<code>sourceWidth</code>

<p>and</p>

<code>sourceHeight</code>

<p>, and optionally also</p>

<code>sourceLeft</code>

<p>and</p>

<code>sourceTop</code>

<p>.</p>

<code>useDarkTheme</code>

<p>: Switch the style of the window to the dark theme.</p>

<code>sound</code>

<p>: Path to a sound file that will be played once for every dialog entry shown, as long as the dialog entry doesn't have its own</p>

<code>audio</code>

<p>property.</p>

<p>Once you have created a dialog window, you can open a dialog window with the</p>

<code>openDialogWindow()</code>

<p>function.</p>

<p>When calling this function, you must specify:</p>

<code>NPCScript</code>

<li>: A JSON object composed of an array of</li>

<code>Dialog</code>

<li>objects, that includes all the dialog tree.</li>

<p>A second optional parameter is also available:</p>

<code>textId</code>

<li>: The index or</li>

<code>name</code>

<li>property of the entry to show first from the script. The first entry is 0.</li>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>Close a dialog window at any time by calling the</p>

<code>closeDialogWindow()</code>

<p>function.</p>

<p>For details on how to construct the dialog tree, see the sections above. The required</p>

<code>NPCScript</code>

<p>by the</p>

<code>DialogWindow</code>

<p>has exactly the same characteristics as the one used on the</p>

<code>NPC</code>

<p>object when calling the</p>

<code>talk()</code>

<p>function.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<p>Run</p>

<code>npm run build</code>

<p>for the internal files of the library to be generated</p>

<p>Run</p>

<code>npm run link</code>

<p>on this repository</p>

<p>On a new Decentraland scene, import this library as you normally would and include the tests you need</p>

<p>On the scene directory, run</p>

<code>npm link dcl-npc-toolkit</code>

<p>Note: When done testing, run</p>

<code>npm unlink</code>

<p>on both folders, so that the scene stops using the local version of the library.</p>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to automatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/via-the-decentraland-editor

# Change to URL: https://github.com/decentraland-scenes/dcl-ui-toolkit

# URL: https://github.com/decentraland-scenes/dcl-ui-toolkit

<title>GitHub - decentraland-scenes/dcl-ui-toolkit</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-ui-toolkit</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>19</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland UI utils library</h1>

<p>A collection of tools for common UI requirements for Decentraland scenes.</p>

<h2>Install the library</h2>

<h2>Via the Decentraland Editor</h2>

<p>To use any of the helpers provided by the utils library, follow the steps in</p>

<p>with Visual Studio Code open on your project folder.</p>

<p>Open the Decentraland Editor tab. Note that the bottom section lists all of your projectâs currently installed dependencies.</p>

<p>Click the + icon on the header of the Dependencies view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write</p>

<code>dcl-ui-toolkit</code>

<p>and press Enter.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>index.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<p>Add following to your scene intialization code:</p>

<p>Add the following permissions for fetching media on the 'scene.json' file. See</p>

<p>for more details:</p>

<pre>: [</pre>

<pre>],</pre>

<pre>: [</pre>

<pre>],</pre>

<h2>Via the CLI</h2>

<p>To use any of the helpers provided by the utils library</p>

<p>Install it as an</p>

<code>npm</code>

<p>package. Run this command in your scene's project folder:</p>

<code>npm install dcl-ui-toolkit</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<p>Add following to your scene intialization code:</p>

<p>Add the following permissions for fetching media on the 'scene.json' file. See</p>

<p>for more details:</p>

<pre>: [</pre>

<pre>],</pre>

<pre>: [</pre>

<pre>],</pre>

<h2>Text Announcement</h2>

<p>To display a text announcement on the center of the screen for a specified amount of time, use the</p>

<code>Announcement</code>

<p>class.</p>

<pre>:</pre>

<pre>:</pre>

<p>When instancing, you can pass the following parameters:</p>

<code>value: string</code>

<li>: String to display.</li>

<code>duration: number = 3</code>

<li>: Time to keep the text visible (in seconds). If set to -1, the announcement will remain on screen till it's hidden.</li>

<code>color: Color4 = Color4.Yellow()</code>

<li>*: Text color, as a</li>

<code>Color4</code>

<li>.</li>

<code>size: number = 50</code>

<li>*: Font size.</li>

<code>xOffset: number = 0</code>

<li>*: Offset from the center on the X axis.</li>

<code>yOffset: number = 0</code>

<li>*: Offset from the center on the Y axis.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the announcement starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created announcement.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>After creating,</p>

<code>Announcement</code>

<p>has methods to control visibility:</p>

<code>hide(): void</code>

<li>: Hides the announcement.</li>

<code>show(): void</code>

<li>: Shows the announcement (that will be automatically hidden after the specified</li>

<code>duration</code>

<li>).</li>

<pre>:</pre>

<pre>:</pre>

<p>Announcement components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>text component.</li>

<h2>Counter</h2>

<p>To display a number on a corner of the screen that can be easily updated, you can create a</p>

<code>UICounter</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new counter you can pass the following parameters:</p>

<code>value: number</code>

<li>: Numeric starting value.</li>

<code>xOffset: number = -40</code>

<li>*: Offset on X away from the bottom-right corner.</li>

<code>yOffset: number = 70</code>

<li>*: Offset on Y away from the bottom-right corner.</li>

<code>color: Color4 = Color4.White()</code>

<li>*: Text color.</li>

<code>size: number = 25</code>

<li>*: Text size.</li>

<code>fixedDigits: number = 0</code>

<li>*: Number of digits to use,</li>

<code>0</code>

<li>allows any digits number.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the counter starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created counter.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>UICounter</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read(): number</code>

<li>: Returns the current value of the counter.</li>

<code>increase(amount?: number): void</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 1.</li>

<code>decrease(amount?: number): void</code>

<li>: Decreases the number by a given amount. If no parameters are passed, it lowers the value by 1.</li>

<code>set(amount: number): void</code>

<li>: Sets the number to a given amount, no matter what the previous value was.</li>

<code>show(): void</code>

<li>: Shows the counter.</li>

<code>hide(): void</code>

<li>: Hides the counter.</li>

<pre>:</pre>

<pre>:</pre>

<p>Counter components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>text component.</li>

<h2>Corner Labels</h2>

<p>To display text on the bottom-left corner of the screen, you can create a</p>

<code>CornerLabel</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new corner label you can pass the following parameters:</p>

<code>value: string | number</code>

<li>- Text to show.</li>

<code>xOffset: number = -70</code>

<li>*: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset: number = 40</code>

<li>*: Offset on Y, relative to the bottom-right corner.</li>

<code>color: Color4 = Color4.White()</code>

<li>*: Text color.</li>

<code>size: number = 25</code>

<li>*: Text size.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the label starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created label.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>After the</p>

<code>CornerLabel</code>

<p>is being instanced, you can call this methods:</p>

<code>hide(): void</code>

<li>: Hides the label.</li>

<code>show(): void</code>

<li>: Shows the label.</li>

<pre>:</pre>

<pre>:</pre>

<p>Label components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>text component.</li>

<h2>Bar</h2>

<p>To display a bar that can be updated to increase or shorten in length, similar to a typical health bar in games, you can create a</p>

<code>UIBar</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new bar you can pass the following parameters:</p>

<code>value: number</code>

<li>: Starting value of the bar, from 0 to 1. With 1 the bar is full, with 0 it's empty.</li>

<code>xOffset: number = -30</code>

<li>*: Offset on X away from the bottom-right corner.</li>

<code>yOffset: number = 60</code>

<li>*: Offset on Y away from the bottom-right corner.</li>

<code>color: Color4: Color4.Red()</code>

<li>*: Color of the bar filling.</li>

<code>style: BarStyles = BarStyles.ROUNDSILVER</code>

<li>*: Margin style of the bar, from a list of different predetermined options in different colors and shapes. It takes a value from the</li>

<code>BarStyles</code>

<li>enum.</li>

<code>scale: number = 1</code>

<li>*: Multiplier to alter the size of the bar proportionally. A scale of 1 = 128 x 32 pixels.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the bar starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created progress bar.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>UIBar</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read(): number</code>

<li>: Returns the current value of the counter.</li>

<code>increase(amount?: number): void</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 0.1.</li>

<code>decrease(amount?: number): void</code>

<li>: Decreases the number by a given amount. If no parameters are passed, it lowers the value by 0.1.</li>

<code>set(value: amount): void</code>

<li>: Sets the bar to a given value, no matter what the previous value was.</li>

<code>hide(): void</code>

<li>: Hides the bar.</li>

<code>show(): void</code>

<li>: Shows the bar.</li>

<pre>:</pre>

<pre>:</pre>

<p>Progress bar components that you can interact with:</p>

<code>barElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>wrapper component.</li>

<code>backgroundElement: EntityPropTypes</code>

<li>: Props for</li>

<code>UiEntity</code>

<li>component that is responsible for the background.</li>

<code>processElement: EntityPropTypes</code>

<li>: Props for</li>

<code>UiEntity</code>

<li>component that is responsible for displaying the progress.</li>

<h2>Corner Icons</h2>

<p>To display an icon of on the bottom-left corner of the screen you can create one of the following:</p>

<code>Icon</code>

<li>: generic component that accepts</li>

<code>size</code>

<li>parameter.</li>

<code>SmallIcon</code>

<li>: by default 32x32 pixels in size.</li>

<code>MediumIcon</code>

<li>: by default 64x64 pixels in size.</li>

<code>LargeIcon</code>

<li>: by default 128x128 pixels in size.</li>

<pre>:</pre>

<p>When instancing a new icon you can pass the following parameters:</p>

<code>image: string</code>

<li>*: Path to the image file.</li>

<code>xOffset: number = -30</code>

<li>*: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset: number = -50</code>

<li>*: Offset on Y, relative to the bottom-right corner.</li>

<code>width?: number</code>

<li>*: Image width on screen in pixels. Default value depends on icon's type (</li>

<code>32</code>

<li>for</li>

<code>SmallIcon</code>

<li>,</li>

<code>64</code>

<li>for</li>

<code>MediumIcon</code>

<li>and</li>

<code>128</code>

<li>for</li>

<code>LargeIcon</code>

<li>).</li>

<code>height?: number</code>

<li>*: Image height on screen in pixels. Default value depends on icon's type (</li>

<code>32</code>

<li>for</li>

<code>SmallIcon</code>

<li>,</li>

<code>64</code>

<li>for</li>

<code>MediumIcon</code>

<li>and</li>

<code>128</code>

<li>for</li>

<code>LargeIcon</code>

<li>).</li>

<code>size: 'small' | 'medium' | 'large'</code>

<li>: Icon sizes.</li>

<strong>Available only for</strong>

<code>Icon</code>

<li>.</li>

<code>section?: ImageAtlasData</code>

<li>*: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageAtlasData</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>,</li>

<code>sourceHeight</code>

<li>,</li>

<code>sourceLeft</code>

<li>,</li>

<code>sourceTop</code>

<li>,</li>

<code>atlasWidth</code>

<li>and</li>

<code>atlasHeight</code>

<li>.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the icon starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created icon.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>After the icon is being instanced, you can call this methods to manipulate it's visibility:</p>

<code>hide(): void</code>

<li>: Hides the icon.</li>

<code>show(): void</code>

<li>: Shows the icon.</li>

<p>Icon components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h2>Loading icon</h2>

<p>To display a loading icon on the center of the screen for a specified amount of time, create a</p>

<code>LoadingIcon</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new loading icon, you can pass the following parameters:</p>

<code>duration: number = 0</code>

<li>: seconds to display the image onscreen. If not set, or set to 0, it keeps the icon on till you hide it.</li>

<code>xOffset: number = 0</code>

<li>*: Offset on X, relative to the center of the screen.</li>

<code>yOffset: number = 0</code>

<li>*: Offset on Y, relative to the center of the screen.</li>

<code>scale: number = 1</code>

<li>*: Multiplier to alter the size of the icon proportionally. A scale of 1 = 50 x 66 pixels.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the icon starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created loading icon.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>LoadingIcon</code>

<p>object is instanced, you can call this methods:</p>

<code>hide(): void</code>

<li>: Hides the icon.</li>

<code>show(): void</code>

<li>: Shows the icon.</li>

<p>Loading icon components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h2>Large image</h2>

<p>To display a large image on the center of the screen for a specified amount of time, create a</p>

<code>CenterImage</code>

<p>. By default images must be 512 x 512 pixels, unless specified.</p>

<pre>:</pre>

<p>When instancing a new large image, you can pass the following parameters:</p>

<code>image: string</code>

<li>*: Path to image file.</li>

<code>duration: number</code>

<li>: Seconds to display the image onscreen. -1 keeps it on till you hide it.</li>

<code>xOffset: number = 0</code>

<li>*: Offset on X, relative to the center of the screen.</li>

<code>yOffset: number = 0</code>

<li>*: Offset on Y, relative to the center of the screen.</li>

<code>width: number = 512</code>

<li>*: Image width on screen in pixels.</li>

<code>height: number = 512</code>

<li>*: Image height on screen in pixels.</li>

<code>section?: ImageAtlasData</code>

<li>*: Use only a section of the image file, useful when arranging multiple images into an image atlas. This field takes an</li>

<code>ImageAtlasData</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>,</li>

<code>sourceHeight</code>

<li>,</li>

<code>sourceLeft</code>

<li>,</li>

<code>sourceTop</code>

<li>,</li>

<code>atlasWidth</code>

<li>and</li>

<code>atlasHeight</code>

<li>.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the image starts invisible till you run its</li>

<code>show()</code>

<li>function. Large images may flash white for a second if created and shown at the same time. By deferring the creation you avoid this artifact.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created image.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>CenterImage</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the image.</li>

<code>hide(): void</code>

<li>: Hides the image.</li>

<p>Large image components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h2>Predefined prompt windows</h2>

<p>The UI Utils library includes various common prompt windows to display messages and ask players to take an action.</p>

<h3>Ok Prompt</h3>

<p>Displays a prompt window with a custom message and an OK button. The Ok button can either be clicked or triggered by pressing the E key.</p>

<p>When instancing a new Ok Prompt, you can pass the following parameters:</p>

<code>text: string</code>

<li>: Message string.</li>

<code>onAccept?: () => void</code>

<li>: Function that gets executed if player clicks the button or presses E.</li>

<code>acceptLabel: string = 'Ok'</code>

<li>: Label to go in the accept button.</li>

<code>useDarkTheme: boolean = false</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>width: number = 400</code>

<li>: Width of the prompt.</li>

<code>height: number = 250</code>

<li>: Height of the prompt.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, the related</p>

<code>onAccept</code>

<p>function isn't called.</p>

<p>Once a</p>

<code>OkPrompt</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the prompt.</li>

<code>hide(): void</code>

<li>: Hides the prompt.</li>

<p>Note: prompt will not be closed automatically after the user clicks the button or presses the E key. You should close it manually using the</p>

<code>hide</code>

<p>method.</p>

<p>Prompt parts that you can interact with:</p>

<code>textElement: PromptText</code>

<li>: Main text element of the prompt.</li>

<code>buttonElement: PromptButton</code>

<li>: Accept button of the prompt.</li>

<code>closeIcon: PromptCloseIcon</code>

<li>: Close icon of the prompt.</li>

<h3>Option Prompt</h3>

<p>Displays a prompt window with a custom message, a title, and two buttons that perform separate actions. The buttons can be clicked or triggered by the E and F keys.</p>

<p>When instancing a new Option Prompt, you can pass the following parameters:</p>

<code>title: string | number</code>

<li>: Header at the top of the window.</li>

<code>titleSize: number = 24</code>

<li>: Size of the header text.</li>

<code>text: string | number</code>

<li>: Smaller print instructions displayed at the center of the prompt.</li>

<code>textSize: number = 21</code>

<li>: Size of the prompt text.</li>

<code>onAccept?: () => void</code>

<li>: Function that gets executed if player clicks accept (left) button or presses the E key.</li>

<code>onReject?: () => void</code>

<li>: Function that gets executed if player clicks reject (right) button or presses the F key.</li>

<code>acceptLabel: string = 'Yes'</code>

<li>: String to go in the accept button</li>

<code>rejectLabel: string = 'No'</code>

<li>: String to go in the reject button</li>

<code>useDarkTheme: boolean = false</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>width: number = 400</code>

<li>: Width of the prompt.</li>

<code>height: number = 250</code>

<li>: Height of the prompt.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, neither of the functions are called.</p>

<p>Once a</p>

<code>OptionPrompt</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the prompt.</li>

<code>hide(): void</code>

<li>: Hides the prompt.</li>

<p>Note: prompt will not be closed automatically after the user clicks buttons or presses the E or F key. You should close it manually using the</p>

<code>hide</code>

<p>method.</p>

<p>Prompt parts that you can interact with:</p>

<code>titleElement: PromptText</code>

<li>: Title element of the prompt.</li>

<code>textElement: PromptText</code>

<li>: Main text element of the prompt.</li>

<code>primaryButtonElement: PromptButton</code>

<li>: Primary button of the prompt.</li>

<code>secondaryButtonElement: PromptButton</code>

<li>: Secondary button of the prompt.</li>

<code>closeIcon: PromptCloseIcon</code>

<li>: Close icon of the prompt.</li>

<h3>Fill in Prompt</h3>

<p>Displays a prompt window with a header, a text field to fill in and a submit button. The value filled into the text box can be used as a parameter in the submit function.</p>

<p>When instancing a new Fill-in Prompt, you can pass the following parameters:</p>

<code>title: string | number</code>

<li>: Header at the top of the window.</li>

<code>titleSize: number = 24</code>

<li>: Size of the header text.</li>

<code>onAccept: (value: string) => void</code>

<li>: Function that gets executed when player clicks the button or presses the E key.</li>

<code>acceptLabel: string = 'Submit'</code>

<li>: String to use as label on the submit button.</li>

<code>placeholder: string = 'Fill in'</code>

<li>: Text to display as placeholder in the text box.</li>

<code>useDarkTheme: boolean = false</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>width: number = 400</code>

<li>: Width of the prompt.</li>

<code>height: number = 250</code>

<li>: Height of the prompt.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, the related function isn't called.</p>

<p>Once a</p>

<code>FillInPrompt</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the prompt.</li>

<code>hide(): void</code>

<li>: Hides the prompt.</li>

<p>Note: prompt will not be closed automatically after the user clicks the button or presses the E key. You should close it manually using the</p>

<code>hide</code>

<p>method.</p>

<p>Prompt parts that you can interact with:</p>

<code>titleElement: PromptText</code>

<li>: Title element of the prompt.</li>

<code>inputElement: PromptInput</code>

<li>: Input field element of the prompt.</li>

<code>buttonElement: PromptButton</code>

<li>: Submit button of the prompt.</li>

<code>closeIcon: PromptCloseIcon</code>

<li>: Close icon of the prompt.</li>

<h2>Custom Prompt Windows</h2>

<p>Custom prompt windows let you arrange as many elements as you want into a window, including buttons, text, checkboxes, switches, textboxes and icons.</p>

<h3>Create a custom prompt</h3>

<p>First create a new</p>

<code>CustomPrompt</code>

<p>object.</p>

<pre>:</pre>

<p>When instancing a new CustomPrompt, you can pass the following parameters:</p>

<code>style: PromptStyles = PromptStyles.LIGHT</code>

<li>: Pick from a few predefined options, some of them using the dark theme, others the light theme.</li>

<code>width: number = 400</code>

<li>: Background width on screen in pixels. The default size depends on the theme used.</li>

<code>height: number = 250</code>

<li>: Background height on screen in pixels. The default size depends on the theme used.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible to load in the background till calling the</li>

<code>show()</code>

<li>function of the prompt object.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<p>Note: Stretching the background images away from their default values may lead to blurry corners.</p>

<p>Once you instanced a</p>

<code>CustomPrompt</code>

<p>object, you can add elements to it by calling its various functions.</p>

<p>You can also call the following functions on it:</p>

<code>hide</code>

<li>: Hides the window.</li>

<code>show</code>

<li>: Shows the window if previously closed.</li>

<p>Access all of the UI elements that make up the prompt UI by calling the</p>

<code>elements</code>

<p>property of the prompt object.</p>

<h3>Customizing close button</h3>

<p>When you're creating a prompt, it'll have a close button at the upper right corner. Anytime you can access</p>

<code>closeIcon</code>

<p>property of</p>

<code>PromptCloseIcon</code>

<p>type to change some of it's options:</p>

<code>width: number = 32</code>

<li>: Button width.</li>

<code>height: number = 32</code>

<li>: Button height.</li>

<code>xPosition: number = 10</code>

<li>: Offset on X from the top of the window.</li>

<code>yPosition: number = 10</code>

<li>: Offset on X from the right of the window.</li>

<code>onMouseDown: () => void</code>

<li>: Callback that is called when the user clicks on the button.</li>

<p>Note: When changing the</p>

<code>onMouseDown</code>

<p>, be sure to call the</p>

<code>hide</code>

<p>method of the related popup's to close it.</p>

<p>Close button components that you can interact with:</p>

<code>iconElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h3>Add text</h3>

<p>To add text to a custom prompt, use the</p>

<code>addText</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addText()</code>

<p>function can take the following parameters:</p>

<code>value: string | number</code>

<li>: Text to show.</li>

<code>xPosition: number</code>

<li>: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>: Offset on Y from the center of the window.</li>

<code>color: Color4 = Color4.Black()</code>

<li>: Text color.</li>

<code>size: number = 14</code>

<li>: Text size.</li>

<code>startHidden: boolean = false</code>

<li>: If true, text will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the created</p>

<code>PromptText</code>

<p>.</p>

<p>The</p>

<code>addText()</code>

<p>function returns a</p>

<code>PromptText</code>

<p>object, that you can then reference to change its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<li>: Hides the text.</li>

<code>show(): void</code>

<li>: Shows the text.</li>

<p>Text components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>component.</li>

<h3>Add a button</h3>

<p>To add a button to a custom prompt, use the</p>

<code>addButton</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addButton</code>

<p>function can take the following parameters:</p>

<code>text: string | number</code>

<li>*: Label to show on the button.</li>

<code>xPosition: number</code>

<li>*: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>*: Offset on Y from the center of the window.</li>

<code>onMouseDown: () => void</code>

<li>*: Function to execute when the button is clicked.</li>

<code>style: PromptButtonStyles = PromptButtonStyles.ROUNDSILVER</code>

<li>: Choose out of several predefined style options, with different colors and rounded or square corners.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the button will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the returned</p>

<code>PromptButton</code>

<p>.</p>

<p>Note: If you pick the</p>

<code>E</code>

<p>or</p>

<code>F</code>

<p>style, the buttons will also be triggered when pressing the E or F keys respectively.</p>

<p>The</p>

<code>addButton()</code>

<p>function returns a</p>

<code>PromptButton</code>

<p>object, that you can then reference to change its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<code>grayOut(): void</code>

<li>: Sets the text to gray and makes it unclickable.</li>

<code>enable(): void</code>

<li>: Sets the text to white and makes it clickable again.</li>

<p>Button components that you can interact with:</p>

<code>labelElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>Label</code>

<li>component that is responsible for the button label.</li>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the button background image.</li>

<code>iconElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the button icon.</li>

<h3>Add a Checkbox</h3>

<p>To add a checkbox to a custom prompt, use the</p>

<code>addCheckbox</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addCheckbox</code>

<p>function can take the following parameters:</p>

<code>text: string</code>

<li>: Label to show next to the checkbox.</li>

<code>xPosition: number</code>

<li>: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck?: () => void</code>

<li>: Function to execute when the box is checked.</li>

<code>onUncheck?: () => void</code>

<li>: Function to execute when the box is unchecked.</li>

<code>large: boolean = false</code>

<li>: If</li>

<code>true</code>

<li>, the box size to 32 x 32.</li>

<code>startChecked: boolean = false</code>

<li>: If true, the box starts checked by default.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the checkbox will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startChecked</code>

<p>and</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the created</p>

<code>PromptCheckbox</code>

<p>.</p>

<p>The</p>

<code>addCheckbox()</code>

<p>function returns a</p>

<code>PromptCheckbox</code>

<p>object, that you can then reference to change and read its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<code>check(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<code>uncheck(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<p>Checkbox components and components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the checkbox's box image.</li>

<code>labelElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the</li>

<code>Label</code>

<li>component that is responsible for the checkbox label.</li>

<h3>Add a Switch</h3>

<p>To add a switch to a custom prompt, use the</p>

<code>addSwitch</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addSwitch</code>

<p>function can take the following parameters:</p>

<code>text: string</code>

<li>: Label to show next to the switch.</li>

<code>xPosition: number</code>

<li>: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck?: () => void</code>

<li>: Function to execute when the switch is activated.</li>

<code>onUncheck?: () => void</code>

<li>: Function to execute when the switch is deactivated.</li>

<code>style: PromptSwitchStyles = PromptSwitchStyles.ROUNDGREEN</code>

<li>: Pick between several sizes, with different colors and rounded or square corners. The value must be from the</li>

<code>SwitchStyles</code>

<li>enum.</li>

<code>startChecked: boolean = false</code>

<li>: If true, the switch starts activated by default.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the switch will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>The</p>

<code>addSwitch()</code>

<p>function returns a</p>

<code>PromptSwitch</code>

<p>object, that you can then reference to change and read its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<code>check(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<code>uncheck(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<p>Switch has components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the switch icon.</li>

<code>labelElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the</li>

<code>Label</code>

<li>component that is responsible for the switch label.</li>

<h3>Add an icon</h3>

<p>To add an icon to a custom prompt, use the</p>

<code>addIcon</code>

<p>function.</p>

<pre>:</pre>

<p>The</p>

<code>addIcon</code>

<p>function can take the following parameters:</p>

<code>image: string</code>

<li>: Path to the image file.</li>

<code>xPosition: number = 0</code>

<li>: Offset on X, relative to the window's center.</li>

<code>yPosition: number = 0</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>width: number = 128</code>

<li>: Image width on screen in pixels.</li>

<code>height: number = 128</code>

<li>: Image height on screen in pixels.</li>

<code>section?: ImageAtlasData</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageAtlasData</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>,</li>

<code>sourceHeight</code>

<li>,</li>

<code>sourceLeft</code>

<li>,</li>

<code>sourceTop</code>

<li>,</li>

<code>atlasWidth</code>

<li>and</li>

<code>atlasHeight</code>

<li>.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the switch will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the returned</p>

<code>PromptIcon</code>

<p>.</p>

<p>The</p>

<code>addIcon()</code>

<p>function returns a</p>

<code>PromptIcon</code>

<p>object, that you can then reference to change its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<p>Icon components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>component.</li>

<h3>Add an input box</h3>

<p>To add an input box to a custom prompt, use the</p>

<code>addTextBox</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addTextBox</code>

<p>function can take the following parameters:</p>

<code>xPosition: number</code>

<li>: Offset on X, relative to the window's center.</li>

<code>yPosition: number</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>placeholder: string | number = 'Fill in'</code>

<li>: Text to display in the input box before the player interacts with it.</li>

<code>onChange?: (value: string) => void</code>

<li>: Function that gets executed every time the player edits the content on the input box, once for each character changed.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the switch will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the returned</p>

<code>PromptInput</code>

<p>.</p>

<p>The</p>

<code>addTextBox()</code>

<p>function returns a</p>

<code>PromptInput</code>

<p>object, that you can then reference to change and read its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<p>You can access the last edited value on the textbox by fetching the</p>

<code>currentText</code>

<p>value of the returned object.</p>

<p>Input components that you can interact with:</p>

<code>fillInBoxElement: EntityPropTypes & Partial<UiInputProps></code>

<li>: Props for the underlying</li>

<code>Input</code>

<li>component.</li>

<h3>Full Custom UI example</h3>

<p>Here's a full example of a custom UI:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Combine with custom UI</h2>

<p>If you want to combine elements from the UI Toolkit with your own</p>

<p>in the same scene, you need to render all of the UI via a single call to the</p>

<code>ReactEcsRenderer.setUiRenderer</code>

<p>function. You can combine both into a single call in the following way:</p>

<p>For example:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Build the project by running</li>

<code>npm run build</code>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl-sdk/ui-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to automatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<strong>nearnshaw</strong>

<strong>Maironire</strong>

<strong>wacaine</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-ui-utils-library

# Change to URL: https://github.com/decentraland-scenes/dcl-dynamic-ui

# URL: https://github.com/decentraland-scenes/dcl-dynamic-ui

<title>GitHub - decentraland-scenes/dcl-dynamic-ui</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-dynamic-ui</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl-sdk/utils</h1>

<p>This library includes a number of helpful pre-built tools that offer simple solutions to common scenarios that you're likely to run into.</p>

<h2>Using the Utils library</h2>

<p>To use any of the helpers provided by the utils library you must install it in your Decentrland project.</p>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you've</p>

<p>.</p>

<li>Open your scene's folder using Visual Studio Code.</li>

<strong>ð Note</strong>

<p>: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project's currently installed dependencies.</p>

<p>Click the</p>

<code>+</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write</p>

<code>@dcl-sdk/utils</code>

<p>and hit enter. The dependency is then installed to your scene.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h3>Via the CLI</h3>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl-sdk/utils</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Debug helpers</h2>

<h3>Label</h3>

<p>Add a text label floating over an entity using</p>

<code>utils.addLabel</code>

<p>. It has two required arguments:</p>

<code>text</code>

<li>: The string of text to display.</li>

<code>parent</code>

<li>: The entity to set the label on.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addLabel</code>

<p>also lets you set the following:</p>

<code>billboard</code>

<li>: If true, label turns to always face player. True by default.</li>

<code>color</code>

<li>: Text color. Black by default.</li>

<code>size</code>

<li>: Text font size, 3 by default.</li>

<code>textOffset</code>

<li>: Offset from parent entity's position. By default 1.5 meters above the parent.</li>

<p>Tip:</p>

<code>utils.addLabel</code>

<p>returns the created entity used for the text. You can then tweak this entity in any way you choose.</p>

<h3>Debug cube</h3>

<p>Render a simple clickable cube to use as a trigger when debugging a scene with</p>

<code>utils.addTestCube</code>

<p>. It has two required arguments:</p>

<code>transform</code>

<li>: The position, rotation and/or scale of the cube, expressed as a</li>

<code>TransformType</code>

<li>object, as gets passed when creating a</li>

<code>Transform</code>

<li>component.</li>

<code>triggeredFunction</code>

<li>: A function that gets called every time the cube is clicked.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addTestCube</code>

<p>also lets you set the following:</p>

<code>label</code>

<li>: An optional label to display floating over the cube.</li>

<code>color</code>

<li>: A color for the cube's material.</li>

<code>sphere</code>

<li>: If true, it renders as a Sphere instead of a cube.</li>

<code>noCollider</code>

<li>: If true, the cube won't have a collider and will let players walk through it.</li>

<p>Tip:</p>

<code>utils.addTestCube</code>

<p>returns the created entity for the cube. You can then tweak this entity in any way you choose.</p>

<h2>Tweens</h2>

<h3>Translate an entity</h3>

<p>To change entity's position over a period of time, use the</p>

<code>utils.tweens.startTranslation</code>

<p>.</p>

<p>This example moves an entity from one position to another over 2 seconds:</p>

<h3>Rotate an entity</h3>

<p>To rotate an entity over a period of time, from one direction to another, use</p>

<code>utils.tweens.startRotation</code>

<p>.</p>

<p>This example rotates an entity from one directions to another over 2 seconds:</p>

<h3>Scale an entity</h3>

<p>To adjust the scale of an entity over a period of time, from one size to another, use</p>

<code>utils.tweens.startScaling</code>

<p>.</p>

<p>This example scales an entity from one size to another over 2 seconds:</p>

<h3>Non-linear changes</h3>

<p>All tweens accept an optional argument which sets the rate of change. By default, translation, rotation, or scaling occur at a linear rate, but this can be set to other options.</p>

<code>utils.InterpolationType</code>

<p>enumeration lists all available interpolation types.</p>

<p>The following example moves a box following a quadratic ease-in rate:</p>

<h3>Stopping tweens and callbacks</h3>

<code>utils.tweens.stopTranslation</code>

<p>,</p>

<code>utils.tweens.stopRotation</code>

<p>and</p>

<code>utils.tweens.stopScaling</code>

<p>stop translation, rotation and scaling respectively.</p>

<p>In the following example tweens affecting a box are stopped when player clicks on a sphere:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>All tweens accept an optional argument</p>

<code>onFinishCallback</code>

<p>which is executed when a tween is complete. It is not executed if a tween was explicitly stopped via stop methods. Use</p>

<code>utils.tweens.getTranslationOnFinishCallback</code>

<p>,</p>

<code>utils.tweens.getRotationOnFinishCallback</code>

<p>and</p>

<code>utils.tweens.getScalingOnFinishCallback</code>

<p>to obtain tween's callback and call it before stopping a tween, if required.</p>

<p>The following example logs a message when the box finishes its movement.</p>

<h2>Perpetual motions</h2>

<h3>Perpetual rotation</h3>

<p>To rotate an entity continuously, use</p>

<code>utils.perpetualMotions.startRotation</code>

<p>. The entity will keep rotating forever until it's explicitly stopped.</p>

<code>rotationVelocity</code>

<p>argument is a quaternion describing the desired rotation to perform each second second. For example</p>

<code>Quaternion.fromEulerDegrees(0, 45, 0)</code>

<p>rotates the entity on the Y axis at a speed of 45 degrees per second, meaning that it makes a full turn every 8 seconds.</p>

<p>Rotation can be stopped by calling</p>

<code>utils.perpetualMotions.stopRotation</code>

<p>.</p>

<p>In the following example, a cube rotates continuously until clicked:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Path following</h2>

<h3>Straight path</h3>

<p>To move an entity over several points of a path over a period of time, use</p>

<code>utils.paths.startStraightPath</code>

<p>. Along with an entity which will follow a path you must specify two arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that form the path.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<p>There is one optional argument:</p>

<code>faceDirection</code>

<li>: When set to true, an entity will be rotated to face the direction of its movement.</li>

<p>This example moves an entity through four points over 10 seconds:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Smooth path</h3>

<p>To make an entity follow a smooth path over a period of time, use</p>

<code>utils.paths.startSmoothPath</code>

<p>. The smooth path is composed of multiple straight line segments put together. You only need to supply a series of fixed path points and a smooth curve is drawn to pass through all of these. You must specify an amount of segments via</p>

<code>segmentCount</code>

<p>argument.</p>

<code>faceDirection</code>

<p>argument works for smooth paths too.</p>

<p>This example makes entity follow a smooth path that's subdivided into 20 segments, over a period of 10 seconds. The curve passes through four key points.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>If the first and last points of a smooth path are identical, the library tries to facilitate smooth orientation change during movement over a loop. In the example below a box loops through three points forever.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Stopping paths and callbacks</h3>

<p>Just like tweens, paths can be stopped: use</p>

<code>utils.paths.stopPath</code>

<p>for that purpose. Again, like tweens, path starting functions accept optional</p>

<code>onFinishCallback</code>

<p>argument which is executed after a path finishes. If a path was explicitly stopped via</p>

<code>utils.paths.stopPath</code>

<p>, callback is not executed. Use</p>

<code>utils.paths.getOnFinishCallback</code>

<p>to obtain a callback and call it before stopping a path, if required.</p>

<p>Paths also accept optional</p>

<code>onPointReachedCallback</code>

<p>argument which is executed when a path reaches one of its milestones (</p>

<code>points</code>

<p>).</p>

<p>The following example logs a messages when the box finishes each segment of the path, and another when the entire path is done.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Toggle</h2>

<code>utils.toggles.*</code>

<p>family of functions enables switching an entity between two possible states, running a specified callback on every transition.</p>

<code>utils.toggles.addToggle</code>

<p>assigns an initial state (either</p>

<code>utils.ToggleState.On</code>

<p>or</p>

<code>utils.ToggleState.Off</code>

<p>) to an entity and the function to be run on a state change.</p>

<code>utils.toggles.removeToggle</code>

<p>removes the toggle from an entity.</p>

<p>Entity's state can be set explicitly via</p>

<code>utils.toggles.set</code>

<p>or flipped via</p>

<code>utils.toggles.flip</code>

<p>. Query entity's state by calling</p>

<code>utils.toggles.isOn</code>

<p>: it returns a boolean, where</p>

<code>true</code>

<p>means ON.</p>

<p>Callback can be changed by calling</p>

<code>utils.toggles.setCallback</code>

<p>.</p>

<p>The following example switches the color of a box between two colors each time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Combine toggle with a tween</h3>

<p>This example combines a toggle with a tween to switch an entity between two positions every time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Timers</h2>

<p>These tools are all related to the passage of time in the scene.</p>

<h3>Delay a function</h3>

<p>Use</p>

<code>utils.timers.setTimeout</code>

<p>to delay the execution of a function by a given amount of milliseconds.</p>

<p>This example delays the logging of a message by 1000 milliseconds.</p>

<h3>Repeat at an interval</h3>

<p>Use</p>

<code>utils.timers.setInterval</code>

<p>to execute a function every</p>

<code>n</code>

<p>milliseconds.</p>

<p>This example creates an entity that changes its scale to a random size every 2 seconds.</p>

<h3>Canceling execution</h3>

<p>Both</p>

<code>utils.timers.setInterval</code>

<p>and</p>

<code>utils.timers.setTimeout</code>

<p>return a unique</p>

<code>TimerId</code>

<p>which can be used to cancel delayed or repeated execution by calling</p>

<code>utils.timers.clearInterval</code>

<p>and</p>

<code>utils.timers.clearTimeout</code>

<p>respectively. In the example below a box keep changing its color every second until it's clicked on.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Triggers</h2>

<code>utils.triggers.*</code>

<p>family of functions powers trigger areas which can be added to entities and which report when intersections with other trigger areas arise or cease.</p>

<h3>Create a trigger</h3>

<p>Use</p>

<code>utils.triggers.addTrigger</code>

<p>to add a trigger area to an entity. It has the following arguments:</p>

<code>entity</code>

<li>: Trigger's owner entity. Trigger area's coordinates depend on</li>

<code>entity</code>

<li>'s Transform component.</li>

<code>layerMask</code>

<li>: Specificies layers to which this trigger belongs to. The library provides eight layers:</li>

<code>utils.LAYER_1</code>

<li>, ...</li>

<code>utils.LAYER_8</code>

<li>. If an entity is supposed to belong to multiple layers, for example layer 1 and layer 3, set</li>

<code>layerMask</code>

<li>to a combination of layer constants separated by</li>

<code>|</code>

<li>(bitwise OR):</li>

<code>utils.LAYER_1 | utils.LAYER_3</code>

<li>. If an entity is supposed to belong to all 8 layers, set</li>

<code>layerMask</code>

<li>to</li>

<code>utils.ALL_LAYERS</code>

<li>. Default value of</li>

<code>layerMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity does not belong to any layer and won't be able to trigger other entities (it still can be triggered by others, see</li>

<code>triggeredByMask</code>

<li>below).</li>

<code>triggeredByMask</code>

<li>: Specifies layers which can trigger an entity. For example, if an entity is supposed to be triggered by entities that belong to either or both layer 2 and layer 4, set</li>

<code>triggeredByMask</code>

<li>to</li>

<code>utils.LAYER_2 | utils.LAYER_4</code>

<li>. Default value of</li>

<code>triggeredByMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity won't be triggered by other entities at all. When set to</li>

<code>utils.ALL_LAYERS</code>

<li>an entity will be triggered by all entities that belong to at least one layer.</li>

<code>areas</code>

<li>: An array of shapes (either boxes or spheres) which describes trigger area. A box is indicated by the object</li>

<code>{type: 'box', position?: Vector3, scale?: Vector3}</code>

<li>, and a sphere by the object</li>

<code>{type: 'sphere', position?: Vector3, radius?: number}</code>

<li>.</li>

<code>position</code>

<li>,</li>

<code>scale</code>

<li>and</li>

<code>radius</code>

<li>fields are optional and default to</li>

<code>{x: 0, y: 0, z: 0}</code>

<li>,</li>

<code>{x: 1, y: 1, z: 1}</code>

<li>and</li>

<code>1</code>

<li>respectively. Please note that box's or sphere's coordinates are relative to</li>

<code>entity</code>

<li>'s Transform. Additionally, box areas always stay axis-aligned, disregarding</li>

<code>entity</code>

<li>'s rotation.</li>

<code>onEnterCallback</code>

<li>: This function will be called when a trigger's area intersects with an area of another, layer-compatible trigger. It will receive an entity which owns intersecting trigger as a single argument.</li>

<code>onExitCallback</code>

<li>: This function will be called when a trigger's area no longer intersects with an area of another trigger. It will receive an entity which owns formerly intersecting trigger as a single argument.</li>

<code>debugColor</code>

<li>: Defines a color of trigger area's shapes when debug visualization is active: call</li>

<code>utils.triggers.enableDebugDraw(true)</code>

<li>to enable it.</li>

<p>The following example creates a trigger that changes its position randomly when triggered by the player. Please note that the library automatically creates a trigger area for the player entity: it's a box closely matching avatar's shape with</p>

<code>layerMask</code>

<p>set to</p>

<code>utils.LAYER_1</code>

<p>and</p>

<code>triggeredByMask</code>

<p>set to</p>

<code>utils.NO_LAYERS</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Tip: to set a custom shape and other parameters of player's trigger first remove a default trigger via</p>

<code>utils.triggers.removeTrigger(engine.PlayerEntity)</code>

<p>and then specify your own trigger via</p>

<code>utils.triggers.addTrigger(engine.PlayerEntity, ...)</code>

<p>.</p>

<h3>Disable a trigger</h3>

<p>You can temporarily disable a trigger by calling</p>

<code>utils.triggers.enableTrigger(entity, false)</code>

<p>. Enable it again by calling</p>

<code>utils.triggers.enableTrigger(entity, true)</code>

<p>. Remove trigger altogether by calling</p>

<code>utils.triggers.removeTrigger(entity)</code>

<p>.</p>

<h3>One time Trigger</h3>

<p>As a shortcut for creating a trigger area that is only actioned once when the player first walks in or out, use the</p>

<code>utils.triggers.oneTimeTrigger</code>

<p>. This function has same arguments as</p>

<code>utils.triggers.addTrigger</code>

<p>, apart for</p>

<code>onExitCallback</code>

<p>. This function is especially useful for optimizing the loading of a scene, so that certain elements aren't loaded till a player walks into an area.</p>

<p>In the example below, the trigger area will only display welcome message the first time a player walks in. After that, the entity is removed from the scene.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Trigger layers</h3>

<p>You can define different layers for triggers, and set which other layers can trigger it.</p>

<p>The following example creates a scene that has:</p>

<li>food (green box)</li>

<li>mouse (blue sphere)</li>

<li>cat (red sphere)</li>

<p>Food is triggered (or eaten) by both cat and mouse. Also, mice are eaten by cats, so a mouse's trigger area is triggered only by a cat.</p>

<p>Cat and mouse always move towards the food. When food or mouse are eaten, they respawn in a random location.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Math</h2>

<h3>Remap</h3>

<code>utils.remap</code>

<p>maps a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum. It takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min1</code>

<li>: Minimum value in the range of the input.</li>

<code>max1</code>

<li>: Maximum value in the range of the input.</li>

<code>min2</code>

<li>: Minimum value in the range of the output.</li>

<code>max2</code>

<li>: Maximum value in the range of the output.</li>

<p>The following example maps the value</p>

<em>5</em>

<p>from a scale of 0 to 10 to a scale of 300 to 400. The resulting value is 350, as it keeps the same proportion relative to the new maximum and minimum values.</p>

<h3>World position</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform position will be relative to its parent. To find what its global position is, taking into account any parents, use</p>

<code>utils.getWorldPosition</code>

<p>. It returns a</p>

<code>Vector3</code>

<p>object, with the resulting position of adding the given entity and all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world position.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>World rotation</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform rotation will be relative to its parent. To find what its global rotation is, taking into account any parents, use</p>

<code>utils.getWorldRotation</code>

<p>. It returns a</p>

<code>Quaternion</code>

<p>object, with the resulting rotation of multiplying the given entity to all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world rotation.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>##Â Other helpers</p>

<p>The library offers a few other functions that may be useful as shortcuts for common use cases.</p>

<p>##Â Get entity parent</p>

<p>Returns an entity that is the parent of the provided entity.</p>

<h2>Get entities with parent</h2>

<p>Returns an array of entities that all share the provided entity as parent.</p>

<h2>Get player position</h2>

<p>Returns the position of the player's avatar.</p>

<p>Note: Always call this function inside the main() function, a function called indirectly by it, or a system. Otherwise, you might be attempting to fetch data that doesn't yet exist.</p>

<h2>Play sound</h2>

<p>Plays a sound from an audio file, at a given location in the scene. This saves you from having to create an entity and give it a position and AudioSource component.</p>

<h2>Action sequence</h2>

<p>Use an action sequence to play a series of actions one after another.</p>

<h3>IAction</h3>

<p>The</p>

<code>actions.IAction</code>

<p>interface defines the actions that can be added into a sequence. It includes:</p>

<code>hasFinished</code>

<li>: Boolean for the state of the action, wether it has finished its execution or not.</li>

<code>onStart()</code>

<li>: First method that is called upon the execution of the action.</li>

<code>update()</code>

<li>: Called on every frame on the action's internal update.</li>

<code>onFinish()</code>

<li>: Called when the action has finished executing.</li>

<h3>Sequence builder</h3>

<p>This object creates action sequences, using simple building blocks.</p>

<p>The</p>

<code>actions.SequenceBuilder</code>

<p>exposes the following methods:</p>

<code>then()</code>

<li>: Enqueue an action so that it's executed when the previous one finishes.</li>

<code>if()</code>

<li>: Use a condition to branch the sequence</li>

<code>else()</code>

<li>: Used with if() to create an alternative branch</li>

<code>endIf()</code>

<li>: Ends the definition of the conditional block</li>

<code>while()</code>

<li>: Keep running the actions defined in a block until a condition is no longer met.</li>

<code>breakWhile()</code>

<li>: Ends the definition of the while block</li>

<h3>Sequence runner</h3>

<p>The</p>

<code>actions.SequenceRunner</code>

<p>object takes care of running sequences created by</p>

<code>actions.SequenceBuilder</code>

<p>. It exposes the following methods:</p>

<code>startSequence()</code>

<li>: Starts a sequence of actions</li>

<code>setOnFinishCallback()</code>

<li>: Sets a callback for when the whole sequence is finished</li>

<code>isRunning()</code>

<li>: Returns a boolean that determines if the sequence is running</li>

<code>stop()</code>

<li>: Stops a running the sequence</li>

<code>resume()</code>

<li>: Resumes a stopped sequence</li>

<code>reset()</code>

<li>: Resets a sequence so that it starts over</li>

<code>destroy()</code>

<li>: Removes a sequence from the engine</li>

<h3>Full example</h3>

<p>The following example creates a box that changes its scale until clicked. Then it resets its scale and moves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Awesome-Repository

# URL: https://github.com/decentraland-scenes/Awesome-Repository

<title>GitHub - decentraland-scenes/Awesome-Repository: A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Awesome-Repository</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<pre>Add 800 add-ons repo</pre>

<code>2006371</code>

<h2>Git stats</h2>

<strong>199</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Awesome Repository</h1>

<p>Welcome to the Decentraland Awesome repository!</p>

<p>This is a large collection of example scenes, libraries, and full tutorials meant to help you build scenes for Decentraland!</p>

<summary>Content Index</summary>

<p>If you can think of an example that is easy to understand and covers valuable topics that aren't covered here, you're encouraged to create a</p>

<strong>Pull Request</strong>

<p>and</p>

<p>!</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Key Concepts</h2>

<p>For a fully comprehensive introduction, we recommend you read the following topics from the Documentation:</p>

<p>See the</p>

<p>to find more specific information about various other.</p>

<h2>Examples</h2>

<h3>Wearables</h3>

<h4>Add-ons</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Contains all the add-ons of the Feet category: Left base, Right base, Left shoelaces, Right shoelaces, Left sole, Right sole, Left toecap, Right toecap, Left toecap sole and Right toecap sole.</td>

<td>Contains all the add-ons of the female Lower body category: Waist, Left thigh, Right thigh, Left knee, Right knee, Left leg and Right leg.</td>

<td>Contains all the add-ons of the male Lower body category: Waist, Left thigh, Right thigh, Left knee, Right knee, Left leg and Right leg.</td>

<td>Contains all the add-ons of the female Upper body category: Torso, Neck, Left arm, Right arm, Left elbow, Right elbow, Left forearm and Right forearm.</td>

<td>Contains all the add-ons of the male Upper body category: Torso, Neck, Left arm, Right arm, Left elbow, Right elbow, Left forearm and Right forearm.</td>

<td>Contains the original body parts with the skin texture of all the previous categories, this is useful if you want to build a wearable with short sleeves or with certain parts exposed such as a thigh, knee, etc.</td>

<h3>Essentials</h3>

<h4>Basics</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Use the Utils library to shift the position of a door gradually. Clicks on the door toggle it from open to closed.</td>

<td>Use the Utils library to rotate a door gradually. Clicks on the door toggle it from open to closed.</td>

<td>Use the Utils library to scale items and delay actions. Also include 3D models and sounds.</td>

<td>A simple example of each way in which players can use button events to interact with the scene. Each shape's color is activated by interacting with it in a special way.</td>

<td>Play different songs by pressing buttons on a jukebox.</td>

<td>A first encounter with Systems, Custom Components and Component Groups. Check out the</td>

<td>.)</td>

<td>Control animations on a 3D model. Toggle them on or off when clicking on the model.</td>

<td>A character walks along a fixed path, using lerp over each segment of the path. If you approach it, it will switch states to yelling at you. Check out the</td>

<td>.</td>

<td>A new bird spawns every time you click a tree. Each bird moves on its own to random positions.</td>

<td>Use planes to create a particle system that simulates smoke rising.</td>

<td>Combines animations, sound, and tiles on the floor that randomly change color to the beat.</td>

<td>Use ray casting to trace a line in space and check for intersections. Cubes change material when hit by the laser. They also change when being pointed at by the player.</td>

<td>A simple scene that shows a spritesheet animation of a robot talking. The different expressions of the robot are all stored in the same image.</td>

<td>Move a shark along the segments of a curve to swim in circles.</td>

<td>A simple AI character that randomly chooses what action to take: follow you, sit or remain idle. Tell it to sit or stand up by clicking it, or tell it to drink water by clicking its bowl.</td>

<td>Use workspaces to preview multiple adjacent scenes/portable experiences at onces and see how they interact.</td>

<h4>Game Mechanics</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Arcade cabinets containing variations of the classic Breakout game.</td>

<td>Swapping out the default avatar for another character model.</td>

<td>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</td>

<td>A coconut shy built using cannon.js physics engine.</td>

<td>Coins are picked up once the player walk over them.</td>

<td>Spawning enemy spaceships from various shaped portals.</td>

<td>Click an item to hold it and drop it somewhere else in the scene.</td>

<td>Click an item to hold it in the air and carry it or toss it around the scene using physics.</td>

<td>An inflatable-punch-bag scene built using cannon.js physics engine.</td>

<td>Various items like health packs and ammo that are picked up when players walk over them.</td>

<td>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</td>

<td>Reflecting a ray off of multiple objects at arbitrary angles.</td>

<td>A puzzle game where you reflect a beam of light to a target using a series of mirrors.</td>

<td>A simple platformer that demonstrates various platform movements using code.</td>

<td>A UI window presents texts from an NPC, allowing you to use Mouse Clicks, E and F keys to advance the conversation or answer questions.</td>

<td>Using the new spawn feature to recreate a simple Portal clone.</td>

<td>Using simple planes to create a force field effect that blocks the player from reaching the access card.</td>

<td>Based on the classic Sokoban puzzle game where you push statues onto marked spots.</td>

<td>Use noise generation to imitate the kind of randomness you see in nature.</td>

<td>A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</td>

<td>A simple platformer that demonstrates rotating various platforms using code.</td>

<td>Shoot at moving targets. Bullet holes appear in the spots where shots hit.</td>

<td>Shoot at moving targets. Bullet holes appear at whatever angle the bullet strikes the target.</td>

<td>Cover as much of the ground as you can with paint before calculating the area covered by it.</td>

<td>A platform that moves when the player stands on one of the switches.</td>

<td>A tin-can-alley scene built using cannon.js physics engine.</td>

<td>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc.</td>

<td>A zombie will chase you around and attack you once it gets near.</td>

<td>Players wearing smart wearables are blocked from certain aspects of the scene, to prevent unfair advantages over others.</td>

<td>Use UVs to map a video to multiple surfaces, constructing a single image that adjusts as the player changes their angle.</td>

<td>Control a flock of birds so that they each take off when you walk near. They can then land back on uneven terrain.</td>

<td>Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</td>

<td>Implementation of Boids. Flock behavior of fish or birds</td>

<td>Use A* Search algorithm to help guide the NPC.</td>

<h4>Event Hosting</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A video streamed from an external URL. The repo includes instructions for various alternatives for uploading the video content.</td>

<td>Interact with the</td>

<td>contract to mint a POAP token when clicking on a booth.</td>

<td>Grant admin players special abilities, including kick other players out, and displaying UI announcements.</td>

<td>Only load certain entities when the player walks into a room or region.</td>

<td>Make players dance in a loop when they stand in certain areas of your scene.</td>

<td>Schedule the start of a video, then sync the timing of actions in the scene to the video</td>

<td>A simple scene with a green screen that can be used for photoshoots. You can change the background color too.</td>

<td>Demonstrates how to UV map a video texture onto many many planes</td>

<h4>Physics</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Kick balls around and make them bounce off each other, using the cannon.js library for physics.</td>

<td>Drive a car through piles of boxes and see them tumble down, using cannon.js for physics.</td>

<td>A bouncing ball using the box2d physics library to simulate physics in a 2D space.</td>

<h4>3D Art</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>35+ Opensource builds and assets for Decentraland by MrDhingia.</td>

<td>Improve the conversion optimization and user flow of your build by indicating key areas with these animated GLB files by DOCTORdripp.</td>

<td>Everything you need to start your wearable creation journey. Created by Nikki Fuego and Doki.</td>

<h3>Monetization and Blockchain</h3>

<h4>Crypto Libraries</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Request MANA donations to a wallet.</td>

<td>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</td>

<td>Check for token or wearable ownership to easily control access to a scene area</td>

<td>Add a button that is only activated by paying a MANA sum to a specified address.</td>

<td>Add a lever that only switches state by paying a MANA sum to a specified address.</td>

<td>Fetch the list of wearables that a player currently has on. If they have something in the eyewear category, open the door for them.</td>

<td>Display all wearables on sale on L2 and purchase them in-world. You can also configure it to only display certain collections.</td>

<h4>Displaying NFTs</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Display a 2D NFT in a picture frame.</td>

<td>Display a collection of 2D NFTs in picture frames, these swap every few seconds, taking data from a JSON file.</td>

<h4>Interact Directly With Contract</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Interact with the MANA contract to burn MANA fees collected over time by the Market place in a ceremonious way.</td>

<td>Paint a mural made from 32 x 32 pixels. You can then mint the image as a</td>

<td>NFT.</td>

<h3>Multiplayer and APIs</h3>

<h4>Hit an API</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Hit a world clock API to check the time, start a party if it's after 9PM.</td>

<td>Hit a world clock API to sync the position of a tram line, so all players see them on the same location. Each tram does a full loop every 3 minutes, basing its position on every frame relative to the time.</td>

<td>Query the Decentraland Events API for any events that are currently active to display their info. If more than one, flip through them on the display.</td>

<td>Check a weather API, then represent the weather conditions, whatever they are.</td>

<h4>Run Server-Side Validations</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Hit a server that validates that the player really is in Decentraland, in a specific parcel, with a recent time-stamp, and signed a message cryptographically with their ephemeral key.</td>

<h4>Message Bus</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>The cubes in this fountain have several animations that each set can play. When a player pushes a button, all players see the same animation.</td>

<td>A meter that goes up based on the number of claps from players applauding in the scene.</td>

<td>Play the keys of this piano by stepping on them. All players will hear the notes that are played.</td>

<h4>API as Database</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A fully scalable inventory and leveling system ready for integration into any game.</td>

<td>Upload player's final scores to a server, the best ones are displayed for all to see on a board.</td>

<td>Players that sign this guest-book upload their user name and address to the server. All signatures are fetched when opening the book.</td>

<td>Create 2D pixel art by painting tiles. Players are synced through both the messagebus and a DB in a server.</td>

<td>Create 3D voxel art by placing cubes in place. Players are synced through both the messagebus and a DB in a server.</td>

<td>Create musical patterns that are played in sequence. Players are synced through both the messagebus and a DB in a server.</td>

<h4>Plain WebSockets</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>(server code only)</td>

<td>A basic server that broadcasts all messages it receives to all other players in a room.</td>

<td>A minimal scene where clicking on cubes changes their color. The broadcast server syncs these changes to all other players in the same realm.</td>

<td>Each player runs physics client side. Websockets sends information about new forces applied to the entities. The broadcast server syncs these changes to all other players in the same realm.</td>

<td>Each player runs physics client side. Websockets sends information about the throwing of the frisbee. The frisbee is hidden when picked up by a player.</td>

<td>Each player runs physics client side. Websockets sends information about the throwing of the ball. The ball is hidden when picked up by a player.</td>

<td>Display messages being posted to Decentraland discord server in real time inside the world</td>

<h4>Colyseus</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A basic server that broadcasts all messages it receives to all other players in a room.</td>

<td>A team game for 2 players or more, where tiles switch colors when walked on. The server keeps track of the game's state, and has the final word about when the game ends and who won.</td>

<td>A game of deceit and secret identities. One player is randomly assigned as the trator, that will work against the others to sabotage the space ship.</td>

<td>Listen to OSC messages from any source, relay them to affect Decentraland scenes in real time via a Colyseus server.</td>

<h3>Full Scenes</h3>

<h4>Public Scenes</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A fully equipeped venue ready for live events, with video streaming and POAP dispenser.</td>

<td>A 24/7 nightclub, with lights and smoke effects, arcade machines, and much more.</td>

<td>A simple generic museum to display NFT art and a few common additional features.</td>

<td>A simple generic store to sell wearables, with a few common additional features.</td>

<td>The full code used in Genesis Plaza (0,0), including all the interactive elements found there.</td>

<td>The full code used in Soho Plaza (-75,0), including all the interactive elements found there.</td>

<td>An escape room full of puzzles to solve. A</td>

<td>covers how to make it, starting from the essentials.</td>

<td>A puzzle game based on 2048, where you merge similar gems into valuable ones, till you reach the value of 2048.</td>

<td>A racing game that shows what the Infinity Engine code can do.</td>

<td>Assets and code used for the Metaverse Music Festival (MVMF) 2022 Main Stage Scene</td>

<td>Assets and code used for the Metaverse Music Festival (MVMF) 2022 Tower of Babel Scene</td>

<td>Multiplayer Snowball Fight Arena</td>

<h4>Community Modules</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Two player game of checkers, with fully outlined peer-to-peer networking.</td>

<td>Provides easy-to-use interfaces to generate NFT (2D and 3D) displays. By simply editing the JSON files a user can quickly add displays to their scene.</td>

<td>Provides all the tools need to create your own parkour stadium. Includes: multiple platform types, collectibles, traps, checkpoint/respawn mechanics.</td>

<td>Provides all the utilities required to create card games in Decentraland. Also comes pre-packed with several card games that act as functional examples!</td>

<td>Create an interactive art exhibition with images, videos, and 3D art that rotate to face the player and lower to eye level upon approach. It can be deployed to Decentraland Worlds, so there are no size constraints aside from MB. Made by KJ of Low Poly Models.</td>

<h3>Game Jam Winners</h3>

<p>You can access the code submitted by previous game jam competitions, for those scenes that creators chose to make open source.</p>

<h2>Libraries</h2>

<p>Note that each library is only compatible with either SDK 6 or SDK 7, use libraries that match the version of the Decentraland project you're working on.</p>

<h3>SDK 7</h3>

<th>Article</th>

<th>Description</th>

<td>A very handy collection of common tasks made simple. Gradually move, rotate or scale over time. Add trigger areas, delay an action, run an event periodically, and more!. Replaces SDK6 ECS Utils</td>

<td>A collection of tools for creating Non-Player-Characters (NPCs). These are capable of having conversations with the player, and play different animations. Replaces SDK6 NPC Utils</td>

<td>A collection of tools for common UI requirements for Decentraland scenes. Replaces SDK6 UI Utils</td>

<h3>SDK 6</h3>

<th>Article</th>

<th>Description</th>

<td>A very handy collection of common tasks made simple. Gradually move, rotate or scale over time. Add trigger areas, delay an action, run an event periodically, and more!. Migrating to SDK7, see</td>

<td>UI Prefab components and functions for common game UI elements. Show health-bars, labels, counters, icons, prompt windows, NPC dialogs</td>

<td>Tools to easily create non-player characters (NPCs) that you can have a conversation with. They can ask quesions, play animations, turn around to always face the player, etc. Migrating to SDK7, see UI Toolkit Migrating to SDK7, see</td>

<td>Several functions to allow you to easily carry out operations with MANA, other currencies, NFTs, the Marketplace, sign messages or anything that involves smart contracts.</td>

<td>Several functions to allow you to easily carry out operations with MANA in a Layer 2 Ethereum network, with significantly reduced gas fees and transaction delays.</td>

<td>Several functions to easily controll player acccess to an area in the scene, based on ownership of tokens, wearables or allowlist of player IDs.</td>

<td>To use on servers that interact with Decentraland scenes, to validate that a request truly comes from a real player that is in fact in Decentraland.</td>

<td>A Scene Object Model (SOM) file lists all of the GLTF or GLB models to load into a Decentraland scene. This module contains a SceneObject data structure used to define the models and their positioning in the world, and a ModelLoader class that handles the loading and positioning at runtime.</td>

<td>Tools for generating semi-random noise based on the Perlin and Simplex algorithms. These generate random sequences of values similar to the kind of randomness seen in nature.</td>

<td>A suite of entities, debug utilities and helper functions that will speed up your decentraland SDK development.</td>

<td>A set of tools for managing the playing of videos and video playlists, together with synchronized events in the scnene like animations. It reads subtitle-like instructions with time-stamps to match timing with the video.</td>

<p>Note: To update these libraries from versions older than February 9th 2021, see the</p>

<h2>Tutorials</h2>

<h3>Video tutorials</h3>

<p>Find a full playlist of all Decentraland video tutorials here:</p>

<h3>Escape Room Video Tutorial Series</h3>

<p>This series of 5 minute videos covers a number of essential concepts, game mechanics and coding best practices. They take you through the whole process of building a full escape room game.</p>

<p>Tip: The videos are presented in the above link together with written accompanying content, including all the code in case you want to copy and paste parts of it.</p>

<p>The full code from the tutorial is available in this</p>

<p>.</p>

<h3>Multiplayer and APIs</h3>

<th>Article</th>

<th>Description</th>

<td>Send requests to an API to fetch data.</td>

<td>Launch your own server on Firebase to handle HTTP requests from your scene and store data in a DB.</td>

<td>Build a WebSockets server to handle real-time updates.</td>

<h3>Other</h3>

<th>Article</th>

<th>Description</th>

<td>Tips and tricks that went into the creation of Genesis Plaza, regarding best practices and optimization.</td>

<td>Guidance about several features that were first introduced with Genesis Plaza, like video and audio streaming, teleports, external links, etc.</td>

<td>Tips and tricks that went into the creation of Salmonomicon (-50,0). Mostly related to UI and ray casting.</td>

<h3>Guest Posts</h3>

<th>Article</th>

<th>Description</th>

<td>A walkthrough by Surz about how to create a UI for your scene.</td>

<td>A walkthrough by Interweaver about how to pick up objects and place them in position, snapping to a grid.</td>

<td>A walkthrough by Brent Greyling about creating an animated fireplace using 2D sprite images.</td>

<td>Part 1 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>Part 2 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>Part 3 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>Part 4 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>A walkthrough by Holodot about how to place NFT 2D art in a scene.</td>

<h3>3D Modeling for Decentraland</h3>

<th>Video</th>

<th>Description</th>

<td>Add a collider to an existing 3D model, to prevent players from walking through it.</td>

<td>Download a freely licenced 3D model and apply free animations that you can download from Mixamo to it.</td>

<td>Download a freely licenced 3D model, import it into Blender and then create an</td>

<em>armature</em>

<td>to manually create your own</td>

<em>animations</em>

<td>for it.</td>

<h3>DevOps</h3>

<th>Video</th>

<th>Description</th>

<td>How to use git actions to deploy a scene from a branch.</td>

<h2>Copyright info</h2>

<p>All of these scenes are open source, protected with a standard Apache 2 licence. This licence states that this content can be used freely, even commercially, as long as you acknowledge the author. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>294</strong>

<h3>Watchers</h3>

<strong>27</strong>

<h3>Forks</h3>

<strong>58</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-awesome-repository

# URL: https://github.com/decentraland-scenes

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h1>decentraland-scenes</h1>

<h2>Pinned</h2>

<tool-tip>Awesome-Repository</tool-tip>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>Repositories</h3>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<h4>People</h4>

<p>This organization has no public members. You must be a member to see whoâs a part of this organization.</p>

<h4>Top languages</h4>

<p>Loadingâ¦</p>

<h4>Most used topics</h4>

<p>Loadingâ¦</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/claiming-wearables-sdk7

# URL: https://github.com/decentraland-scenes/claiming-wearables-sdk7

<title>GitHub - decentraland-scenes/claiming-wearables-sdk7: Using the rewards server to claim wearables</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using the rewards server to claim wearables</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/claiming-wearables-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Template scene</h1>

<h2>Try it out</h2>

<strong>Previewing the scene</strong>

<p>Download this repository.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>What's new on SDK 7</h2>

<p>Below are some basic concepts about the SDK 7 syntax. For more details, see the</p>

<p>.</p>

<h3>Entities</h3>

<p>An Entity is just an ID. It is an abstract concept not represented by any data structure. There is no "class Entity". Just a number that is used as a reference to group different components.</p>

<p>Note: Note that it's no longer necessary to separately create an entity and then add it to the engine, this is all done in a single act.</p>

<h3>Components</h3>

<p>The component is just a data container, WITHOUT any functions.</p>

<p>To add a component to an entity, the entry point is now the component type, not the entity.</p>

<p>This is different from how the syntax was in SDK6:</p>

<h4>Base Components</h4>

<p>Base components already come packed as part of the SDK. Most of them interact directly with the renderer in some way. This is the full list of currently supported base components:</p>

<li>Transform</li>

<li>Animator</li>

<li>Material</li>

<li>MeshRenderer</li>

<li>MeshCollider</li>

<li>AudioSource</li>

<li>AudioStream</li>

<li>AvatarAttach</li>

<li>AvatarModifierArea</li>

<li>AvatarShape</li>

<li>Billboard</li>

<li>CameraMode</li>

<li>CameraModeArea</li>

<li>GltfContainer</li>

<li>NftShape</li>

<li>PointerEventsResult</li>

<li>PointerHoverFeedback</li>

<li>PointerLock</li>

<li>Raycast</li>

<li>RaycastResult</li>

<li>TextShape</li>

<li>VisibilityComponent</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Custom Components</h4>

<p>Each component must have a unique number ID. If a number is repeated, the engine or another player receiving updates might apply changes to the wrong component. Note that numbers 1-2000 are reserved for the base components.</p>

<p>When creating a custom component you declare the schema of the data to be stored in it. Every field in a component MUST belong to one of the built-in special schemas provided as part of the SDK. These special schemas include extra functionality that allows them to be serialized/deserialized.</p>

<p>Currently, the names of these special schemas are:</p>

<h5>Primitives</h5>

<code>Schemas.Boolean</code>

<li>: true or false (serialized as a Byte)</li>

<code>Schemas.String</code>

<li>: UTF8 strings (serialized length and content)</li>

<code>Schemas.Float</code>

<li>: single precission float</li>

<code>Schemas.Double</code>

<li>: double precision float</li>

<code>Schemas.Byte</code>

<li>: a single byte, integer with range 0..255</li>

<code>Schemas.Short</code>

<li>: 16 bits signed-integer with range -32768..32767</li>

<code>Schemas.Int</code>

<li>: 32 bits signed-integer with range -2Â³Â¹..(2Â³Â¹-1)</li>

<code>Schemas.Int64</code>

<li>: 64 bits signed-integer</li>

<code>Schemas.Number</code>

<li>: an alias to Schemas.Float</li>

<h5>Specials</h5>

<code>Schemas.Entity</code>

<li>: a wrapper to int32 that casts the type to</li>

<code>Entity</code>

<code>Schemas.Vector3</code>

<li>: a Vector3 with { x, y, z }</li>

<code>Schemas.Quaternion</code>

<li>: a Quaternion with { x, y, z, w}</li>

<code>Schemas.Color3</code>

<li>: a Color3 with { r, g, b }</li>

<code>Schemas.Color4</code>

<li>: a Colo4 with { r, g, b, a }</li>

<h5>Schema generator</h5>

<code>Schemas.Enum</code>

<li>: passing the serialization Schema and the original Enum as generic</li>

<code>Schemas.Array</code>

<li>: passing the item Schema</li>

<code>Schemas.Map</code>

<li>: passing a Map with Schemas as values</li>

<code>Schemas.Optional</code>

<li>: passing the schema to serialize</li>

<p>Below are some examples of how these schemas can be declared.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To then create a custom component using one of these schemas, use the following syntax:</p>

<p>For contrast, below is an example of how components were constructed prior to SDK 7.</p>

<pre>@</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Systems</h3>

<p>Systems are pure & simple functions.

All your logic comes here.

A system might hold data which is relevant to the system itself, but no data about the entities it processes.</p>

<p>To add a system, all you need to do is define a function and add it to the engine. The function may optionally include a</p>

<code>dt</code>

<p>parameter with the delay since last frame, just like in prior versions of the SDK.</p>

<pre>:</pre>

<h4>Query components</h4>

<p>The way to group/query the components inside systems is using the method getEntitiesWith.</p>

<code>engine.getEntitiesWith(...components)</code>

<p>.</p>

<pre>:</pre>

<h3>Mutability</h3>

<p>Mutability is now an important distinction. We can choose to deal with mutable or with immutable versions of a component. We should use</p>

<code>getMutable</code>

<p>only when we plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can't change any of the properties on it.</p>

<p>To fetch the mutable version of a component, call it via</p>

<code>ComponentDefinition.getMutable()</code>

<p>. For example:</p>

<h2>About</h2>

<p>Using the rewards server to claim wearables</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Genesis-Plaza-SDK7

# URL: https://github.com/decentraland-scenes/Genesis-Plaza-SDK7

<title>GitHub - decentraland-scenes/Genesis-Plaza-SDK7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Genesis-Plaza-SDK7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>34</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>626</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Genesis-Plaza SDK7</h1>

<p>NOTICE!</p>

<p>Code that has been commented out and needs revisiting should be tagged with</p>

<code>/*

//TODO TAG:PORT-REIMPLEMENT-ME

code block to be revistied here

*/</code>

<h2>How to deploy</h2>

<p>NOTE: This is deployed by a git action

branches are configured to auto deploy.  Merge code ready to release into release branch</p>

<li>testing = peer-testing</li>

<p>This folder contains all the necessary files to launch a Decentraland scene.</p>

<em>A few screenshots of Genesis Plaza.</em>

<h2>Description</h2>

<p>The newly revamped</p>

<p>.</p>

<p>Read the behind the scenes from this scene in these blog posts:</p>

<p>This scene contains a lot of useful mechanics, including:</p>

<li>Interacting with an NPC</li>

<li>Fetching data from APIs</li>

<li>Adding teleports to other scenes</li>

<li>Adding external links outside Decentraland</li>

<li>Syncing player actions with the messagebus</li>

<li>Streaming audio</li>

<li>Streaming video</li>

<li>Displaying a custom UI</li>

<p>Because it can be hard to find specific things in such a large repository, some of the most interesting bits of the scene have been exported into their own example repos:</p>

<li>: A UI window presents texts from an NPC, allowing you to use the Right Click, E and F keys to advance the conversation or answer questions.</li>

<li>: Display a 2D NFT in a picture frame.</li>

<li>: Query the Decentraland Events API for any events that are currently active to display their info. If more than one, flip through them on the display.</li>

<li>: Play the keys of this piano by stepping on them. All players will hear the notes that are played.</li>

<li>: Create musical patterns that are played in sequence. Players are synced through both the messagebus and a DB in a server.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of the same server that's used by Genesis Plaza. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>. To store data on an Amazon S3 server, as done here, you'll also need to set up your own Amazon S3, and fetch credentials for that account to include in your server folder.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Links</h2>

<h2>Acknowledgements</h2>

<li>Thank you to</li>

<li>for providing sample code of the NPC used in</li>

<em>alice.mp3</em>

<li>modified from</li>

<em>bela.mp3</em>

<li>modified from</li>

<em>betty</em>

<li>.mp3_ modified from</li>

<em>bob.mp3</em>

<li>modified from</li>

<em>charlie</em>

<li>.mp3_ modified from</li>

<em>marsha.mp3</em>

<li>modified from</li>

<em>ron.mp3</em>

<li>modified from</li>

<em>beerPump.mp3</em>

<li>modified from</li>

<em>error.mp3</em>

<li>modified from</li>

<em>pickUp.mp3</em>

<li>modified from</li>

<em>putDown.mp3</em>

<li>modified from</li>

<em>swallow.mp3</em>

<li>modified from</li>

<em>micFeedback.mp3</em>

<li>modified from</li>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/npc-dialog-example-scene

# URL: https://github.com/decentraland-scenes/npc-dialog-example-scene

<title>GitHub - decentraland-scenes/npc-dialog-example-scene: Example scene showing basic dialog interactions with NPCs.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/npc-dialog-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NPC Dialog Example Scene</h1>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<em>demo of npc-dialog-example-scene running in preview.</em>

<p>This scene shows you:</p>

<li>How to animate a 3D model</li>

<li>How to use the</li>

<li>to create a Non-Player Character</li>

<li>How to display a whole text tree from a JSON file into a UI</li>

<li>How to use E and F buttons to pick options in a text tree</li>

<li>How to keep an NPC facing the player as the player moves</li>

<p>Tip: Find full documentation for the NPC Utils library</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the NPC to start a conversation, use E and F keys to choose options when prompted.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Acknowledgements</h2>

<li>Thank you to</li>

<li>for providing sample code of the NPC used in</li>

<em>alice.mp3</em>

<li>modified from (</li>

<li>)</li>

<em>bob.mp3</em>

<li>modified from (</li>

<li>)</li>

<em>charlie</em>

<li>.mp3_ modified from (</li>

<li>)</li>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-npc-utils

# URL: https://github.com/decentraland/decentraland-npc-utils

<title>GitHub - decentraland/decentraland-npc-utils: NPC tools for conversational NPCs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>NPC tools for conversational NPCs</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-npc-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>32</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>117</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NPC-library</h1>

<p>A collection of tools for creating Non-Player-Characters (NPCs). These are capable of having conversations with the player, and play different animations.</p>

<p>Capabilities of the NPCs in this library:</p>

<li>Start a conversation when clicked or when walking near</li>

<li>Trigger any action when clicked or when walking near</li>

<li>Trigger any action when the player walks away</li>

<li>Turn around slowly to always face the player</li>

<li>Play an animation in the NPC 3d model, optionally returning to loop the idle animation afterwards</li>

<p>The dialog messages can also require that the player chooses options, and any action can be triggered when the player picks an option or advances past a message.</p>

<p>To use NPCs in your scene:</p>

<li>Install the library as an npm bundle. Run this command in your scene's project folder:</li>

<code>npm i @dcl/npc-scene-utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, create an</li>

<code>NPC</code>

<li>type object, passing it at least a position, a path to a 3d model, and a function to trigger when the NPC is activated:</li>

<pre>:</pre>

<li>Write a dialog script for your character, preferably on a separate file, making it of type</li>

<code>Dialog[]</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>NPC Default Behavior</h2>

<p>NPCs at the very least must have:</p>

<code>position</code>

<li>: (</li>

<em>TranformConstructorArgs</em>

<li>). Can include position, rotation and scale.</li>

<code>model</code>

<li>: (</li>

<em>string</em>

<li>) The path to a 3D model</li>

<code>onActivate()</code>

<li>: (</li>

<em>()=> void</em>

<li>) A function to call when the NPC is activated.</li>

<pre>:</pre>

<p>With this default configuration, the NPC behaves in the following way:</p>

<li>The</li>

<code>onActivate()</code>

<li>function is called when pressing E on the NPC, and when the player walks near at a distance of 6 meters.</li>

<li>Once activated, there's a cooldown period of 5 seconds, that prevents the NPC to be activated again.</li>

<li>After walking away from the NPC, if its dialog window was open it will be closed, and if the NPC was rotating to follow the player it will stop.</li>

<li>If the NPC already has an open dialog window, clicking on the NPC won't do anything, to prevent accidentally clicking on it while flipping through the conversation.</li>

<li>If the NPC has an animation named 'Idle', it will play it in a loop. If other non-looping animations are played, it will return to looping the 'Idle' animation after the indicated duration.</li>

<p>Many of these behaviors can be overriden or tweaked with the exposed properties.</p>

<h2>NPC Additional Properties</h2>

<p>To configure other properties of an NPC, add a fourth argument as an</p>

<code>NPCData</code>

<p>object. This object can have the following optional properties:</p>

<code>idleAnim</code>

<li>:</li>

<em>(string)</em>

<li>Name of the idle animation in the model. This animation is always looped. After playing a non-looping animation it returns to looping this one.</li>

<code>faceUser</code>

<li>:</li>

<em>(boolean)</em>

<li>Set if the NPC rotates to face the user while active.</li>

<code>turnSpeed</code>

<li>:</li>

<em>(number)</em>

<li>If</li>

<code>faceUser</code>

<li>is true,</li>

<code>turnSpeed</code>

<li>determines the speed at which the NPC turns to face the player. 2 by default.</li>

<code>portrait</code>

<li>:</li>

<em>(string</em>

<li>or</li>

<em>ImageData)</em>

<li>2D image to show on the left-hand side of the dialog window. The structure of an</li>

<code>ImageData</code>

<li>object is described in detail below.</li>

<code>darkUI</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the dialog UI uses the dark theme.</li>

<code>dialogSound</code>

<li>:</li>

<em>(string)</em>

<li>Path to sound file to play once for every entry shown on the UI. If the dialog entry being shown has an</li>

<code>audio</code>

<li>field, the NPC will play the file referenced by the</li>

<code>audio</code>

<li>field instead.</li>

<code>coolDownDuration</code>

<li>:</li>

<em>(number)</em>

<li>Change the cooldown period for activating the NPC again. The number is in seconds.</li>

<code>hoverText</code>

<li>:</li>

<em>(string)</em>

<li>Set the UI hover feedback when pointing the cursor at the NPC.</li>

<em>TALK</em>

<li>by default.</li>

<code>onlyClickTrigger</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the NPC can't be activated by walking near. Just by clicking on it or calling its</li>

<code>activate()</code>

<li>function.</li>

<code>onlyETrigger</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the NPC can't be activated by walking near. Just by pressing the E key on it or calling its</li>

<code>activate()</code>

<li>function.</li>

<code>onlyExternalTrigger</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the NPC can't be activated by clicking, pressing E, or walking near. Just by calling its</li>

<code>activate()</code>

<li>function.</li>

<code>reactDistance</code>

<li>:</li>

<em>(number)</em>

<li>Radius in meters for the player to activate the NPC or trigger the</li>

<code>onWalkAway()</code>

<li>function when leaving the radius.</li>

<code>continueOnWalkAway</code>

<li>:</li>

<em>(boolean)</em>

<li>If true,when the player walks out of the</li>

<code>reactDistance</code>

<li>radius, the dialog window stays open and the NPC keeps turning to face the player (if applicable). It doesn't affect the triggering of the</li>

<code>onWalkAway()</code>

<li>function.</li>

<code>onWalkAway</code>

<li>: (</li>

<em>()=> void</em>

<li>) Function to call every time the player walks out of the</li>

<code>reactDistance</code>

<li>radius.</li>

<code>walkingAnim</code>

<li>:</li>

<em>(string)</em>

<li>Name of the walking animation on the model. This animation is looped when calling the</li>

<code>followPath()</code>

<li>function.</li>

<code>walkingSpeed</code>

<li>:</li>

<em>(number)</em>

<li>Speed of the NPC when walking. By default</li>

<em>2</em>

<li>.</li>

<code>path</code>

<li>:</li>

<em>(Vector3)</em>

<li>Default path to walk. If a value is provided for this field on NPC initialization, the NPC will walk over this path in loop from the start.</li>

<code>bubbleHeight</code>

<li>:</li>

<em>(number)</em>

<li>The height at which to display the speech bubble above the head of the NPC.</li>

<code>textBubble</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, NPC starts with a speech bubble object ready to be accessed from the start. Otherwise, they text bubble is only built on the first call to</li>

<code>talkBubble()</code>

<li>on the NPC.</li>

<code>noUI</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, no UI object is built for UI dialogs for this NPC. This may help optimize the scene if this feature is not used.</li>

<p>The</p>

<code>ImageData</code>

<p>type that can be used on the</p>

<code>portrait</code>

<p>field is an object that may include the following:</p>

<code>path</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the normal position of the image.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the normal position of the image.</li>

<code>width</code>

<li>: The width to show the image onscreen.</li>

<code>height</code>

<li>: The height to show the image onscreen.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Check NPC State</h2>

<p>There are several properties you can check on an NPC to know what its current state is:</p>

<code>.state</code>

<li>: An enum value of type</li>

<code>NPCState</code>

<li>. Supported values are</li>

<code>NPCState.STANDING</code>

<li>(default),</li>

<code>NPCState.TALKING</code>

<li>, and</li>

<code>NPCState.FOLLOWPATH</code>

<li>.</li>

<code>TALKING</code>

<li>is applied when the dialog window is opened, and set back to</li>

<code>STANDING</code>

<li>when the window is closed.</li>

<code>FOLLOWPATH</code>

<li>is applied when the NPC starts walking, and set back to</li>

<code>STANDING</code>

<li>when the NPC finishes its path or is stopped.</li>

<code>.introduced</code>

<li>: Boolean, false by default. Set to true if the NPC has spoken to the player at least once in this session.</li>

<code>.dialog.isDialogOpen()</code>

<li>: Returns a Boolean, false by default. True if the dialog window for this NPC is currently open.</li>

<code>.inCooldown</code>

<li>: Boolean, false by default. True if the NPC was recently activated and it's now in cooldown. The NPC won't respond to being activated till</li>

<code>inCooldown</code>

<li>is false.</li>

<p>TIP: If you want to force an activation of the NPC in spite of the</p>

<code>inCooldown</code>

<p>value, you can force this value to true before activating.</p>

<h2>NPC Callable Actions</h2>

<p>An NPC object has several callable functions that come with the class:</p>

<h3>Talk</h3>

<p>To start a conversation with the NPC using the dialog UI, call the</p>

<code>talk()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>script</code>

<li>:</li>

<em>(Dialog[])</em>

<li>This array contains the information to manage the conversation, including events that may be triggered, options to choose, etc.</li>

<p>It can also take the following optional parameters:</p>

<code>startIndex</code>

<li>:</li>

<em>(number | string)</em>

<li>The</li>

<em>Dialog</em>

<li>object from the</li>

<code>script</code>

<li>array to open first. By default this is</li>

<em>0</em>

<li>, the first element of the array. Pass a number to open the entry on a given array position, or pass a string to open the entry with a</li>

<code>name</code>

<li>property matching that string.</li>

<code>duration</code>

<li>:</li>

<em>(number)</em>

<li>Number of seconds to wait before closing the dialog window. If no value is set, the window is kept open till the player reaches the end of the conversation or something else closes it.</li>

<p>Learn how to build a script object for NPCs in a section below.</p>

<h3>Speech Bubbles</h3>

<p>Besides the UI dialog window, NPCs can show speech bubbles over their heads. This alternative is less invasive to the player, but also non-interactive. Players can't alter the pace of the conversation or provide answers to questions.</p>

<p>For an NPC to talk with bubbles:</p>

<p>The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>script</code>

<li>:</li>

<em>(Dialog[])</em>

<li>This array contains the information to manage the conversation, including events that may be triggered, options to choose, etc.</li>

<p>It can also take the following optional parameters:</p>

<code>startIndex</code>

<li>:</li>

<em>(number | string)</em>

<li>The</li>

<em>Dialog</em>

<li>object from the</li>

<code>script</code>

<li>array to open first. By default this is</li>

<em>0</em>

<li>, the first element of the array. Pass a number to open the entry on a given array position, or pass a string to open the entry with a</li>

<code>name</code>

<li>property matching that string.</li>

<p>To interrupt the flow of an NPC's dialog windows, you can either:</p>

<li>Run</li>

<code>.endInteraction()</code>

<li>on the NPC</li>

<li>Run</li>

<code>.closeDialogWindow()</code>

<li>on the NPC's</li>

<code>bubble</code>

<li>object</li>

<li>Run</li>

<code>.closeDialogEndAll()</code>

<li>on the NPC's</li>

<code>bubble</code>

<li>object</li>

<p>The first two options keep running any</p>

<code>triggeredByNext()</code>

<p>functions associated to the dialogs being shown on the bubble, the third option prevents running these.</p>

<h3>Play Animations</h3>

<p>By default, the NPC will loop an animation named 'Idle', or with a name passed in the</p>

<code>idleAnim</code>

<p>parameter.</p>

<p>Make the NPC play another animation by calling the</p>

<code>playAnimation()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>animationName</code>

<li>:</li>

<em>(string)</em>

<li>The name of the animation to play.</li>

<p>It can also take the following optional parameters:</p>

<code>noLoop</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, plays the animation just once. Otherwise, the animation is looped.</li>

<code>duration</code>

<li>:</li>

<em>(number)</em>

<li>Specifies the duration in seconds of the animation. When finished, it returns to playing the idle animation.</li>

<p>Note: If</p>

<code>noLoop</code>

<p>is true but no</p>

<code>duration</code>

<p>is set, the model will stay still after playing the animation instead of returning to the idle animation.</p>

<h3>Change idle animation</h3>

<p>The NPC's idle animation is looped by default whenever the NPC is not playing any other animations. In some cases you may want to have different idle animations depending on the circumstances, like while in a conversation, or if the NPC changes its general attitude after some event.</p>

<p>You set the NPC's idle animation when creating the NPC, using the</p>

<code>idleAnim</code>

<p>field. To change this animation at some later time, use</p>

<code>changeIdleAnim()</code>

<p>.</p>

<p>The</p>

<code>changeIdleAnim()</code>

<p>function takes two arguments:</p>

<code>animation</code>

<li>: The name of the new animation to set as the idle animation</li>

<code>play</code>

<li>: Optionally pass this value as</li>

<em>true</em>

<li>if you want this new animation to start playing right away.</li>

<h3>Activate</h3>

<p>The</p>

<code>activate()</code>

<p>function can be used to trigger the</p>

<code>onActivate()</code>

<p>function, as an alternative to pressing E or walking near.</p>

<p>The</p>

<code>activate()</code>

<p>function is callable even when in cool down period, and it doesn't start a new cool down period.</p>

<h3>Stop Walking</h3>

<p>If the NPC is currently walking, call</p>

<code>stopWalking()</code>

<p>to stop it moving and return to playing its idle animation.</p>

<code>stopWalking()</code>

<p>can be called with no parameters, or it can also be called with:</p>

<code>duration</code>

<li>: Seconds to wait before starting to walk again. If not provided, the NPC will stop walking indefinitely.</li>

<p>Note: If the NPC is has its dialog window open when the timer for the</p>

<code>duration</code>

<p>ends, the NPC will not return to walking.</p>

<p>To make the NPC play a different animation from idle when paused, call</p>

<code>playAnimation()</code>

<p>after</p>

<code>stopWalking()</code>

<p>.</p>

<h3>Follow Path</h3>

<p>Make an NPC walk following a path of</p>

<code>Vector3</code>

<p>points by calling</p>

<code>followPath()</code>

<p>. While walking, the NPC will play the</p>

<code>walkingAnim</code>

<p>if one was set when defining the NPC. The path can be taken once or on a loop.</p>

<code>followPath()</code>

<p>can be called with no parameters if a</p>

<code>path</code>

<p>was already provided in the NPC's initialization or in a previous calling of</p>

<code>followPath()</code>

<p>. If the NPC was previously in the middle of walking a path and was interrupted, calling</p>

<code>followPath()</code>

<p>again with no arguments will return the NPC to that path.</p>

<p>Note: If the NPC is initialized with a</p>

<code>path</code>

<p>value, it will start out walking that path in a loop, no need to run</p>

<code>followPath()</code>

<p>.</p>

<code>followPath()</code>

<p>has a single optional parameter of type</p>

<code>FollowPathData</code>

<p>. This object may have the following optinal fields:</p>

<li>path: Array of</li>

<code>Vector3</code>

<li>positions to walk over.</li>

<li>speed: Speed to move at while walking this path. If no</li>

<code>speed</code>

<li>or</li>

<code>totalDuration</code>

<li>is provided, it uses the NPC's</li>

<code>walkingSpeed</code>

<li>, which is</li>

<em>2</em>

<li>by default.</li>

<li>totalDuration: The duration in</li>

<em>seconds</em>

<li>that the whole path should take. The NPC will move at the constant speed required to finish in that time. This value overrides that of the</li>

<em>speed</em>

<li>.</li>

<li>loop:</li>

<em>boolean</em>

<li>If true, the NPC walks in circles over the provided set of points in the path.</li>

<em>false</em>

<li>by default, unless the NPC is initiated with a</li>

<code>path</code>

<li>, in which case it starts as</li>

<em>true</em>

<li>.</li>

<li>curve:</li>

<em>boolean</em>

<li>If true, the path is traced a single smooth curve that passes over each of the indicated points. The curve is made out of straight-line segments, the path is stored with 4 times as many points as originally defined.</li>

<em>false</em>

<li>by default.</li>

<li>startingPoint: Index position for what point to start from on the path.</li>

<em>0</em>

<li>by default.</li>

<li>onFinishCallback: Function to call when the NPC finished walking over all the points on the path. This is only called when</li>

<code>loop</code>

<li>is</li>

<em>false</em>

<li>.</li>

<li>onReachedPointCallback: Function to call once every time the NPC reaches a point in the path.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>NPC Walking Speed</h4>

<p>The following list of factors are used to determine speed in hierarchical order:</p>

<code>totalDuration</code>

<li>parameter set when calling</li>

<code>followPath()</code>

<li>is used over the total distance travelled over the path.</li>

<code>speed</code>

<li>parameter set when calling</li>

<code>followPath()</code>

<code>walkingSpeed</code>

<li>parameter set when initializing NPC</li>

<li>Default value</li>

<em>2</em>

<li>.</li>

<h4>Joining the path</h4>

<p>If the NPC's current position when calling</p>

<code>followPath()</code>

<p>doesn't match the first position in the</p>

<code>path</code>

<p>array (or the one that matches the</p>

<code>startingPoint</code>

<p>value), the current position is added to the</p>

<code>path</code>

<p>array. The NPC will start by walking from its current position to the first point provided in the path.</p>

<p>The</p>

<code>path</code>

<p>can be a single point, and the NPC will then walk a from its current position to that point.</p>

<p>Note: If the speed of the NPC is determined by a</p>

<code>totalDuration</code>

<p>value, the segment that the NPC walks to join into the path is counted as part of the full path. If this segment is long, it will increase the NPC walking speed so that the full path lasts as what's indicated by the</p>

<code>totalDuration</code>

<p>.</p>

<p>In this example the NPC is far away from the start of the path. It will first walk from</p>

<em>10, 0, 10</em>

<p>to</p>

<em>2, 0, 2</em>

<p>and then continue the path.</p>

<pre>:</pre>

<pre>:</pre>

<h4>Example Interrupting the NPC</h4>

<p>In the following example, an NPC starts roaming walking over a path, pausing on every point to call out for its lost kitten. If the player activates the NPC (by pressing E on it or walking near it) the NPC stops, and turns to face the player and talk. When the conversation is over, the NPC returns to walking its path from where it left off.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>End interaction</h3>

<p>The</p>

<code>endInteraction()</code>

<p>function can be used to abruptly end interactions with the NPC.</p>

<p>If applicable, it closes the dialog UI, hides speech bubbles, and makes the NPC stop rotating to face the player.</p>

<p>As an alternative, you can call the</p>

<code>handleWalkAway()</code>

<p>function, which has the same effects (as long as</p>

<code>continueOnWalkAway</code>

<p>isn't set to true), but also triggers the</p>

<code>onWalkAway()</code>

<p>function.</p>

<h2>NPC Dialog Window</h2>

<p>You can display an interactive dialog window to simulate a conversation with a non-player character (NPC).</p>

<p>The conversation is based on a script in JSON format. The script can include questions that can take you forward or backward, or end the conversation.</p>

<h3>The NPC script</h3>

<p>Each entry on the script must include at least a</p>

<code>text</code>

<p>field, but can include several more fields to further customize it.</p>

<p>Below is a minimal dialog.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The player advances through each entry by clicking the mouse button. Once the last is reached, clicking again closes the window, as it's marked as</p>

<code>isEndOfDialog</code>

<p>.</p>

<p>The script must adhere to the following schema:</p>

<pre>:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<p>Note: A</p>

<code>Dialog</code>

<p>object can be used as an input both for the</p>

<code>talk()</code>

<p>function (that is displayed in the UI), and the</p>

<code>talkBubble()</code>

<p>function (that is displayed in a floating bubble over the NPC). Properties marked with</p>

<code>*</code>

<p>are only applicabe to UI dialogs.</p>

<p>You can set the following fields to change the appearance of a dialog:</p>

<code>text</code>

<li>: The dialog text</li>

<code>fontSize</code>

<li>: Size of the text</li>

<code>offsetX *</code>

<li>: Offset of the text on the X axis, relative to its normal position.</li>

<code>offsetY *</code>

<li>: Offset of the text on the Y axis, relative to its normal position.</li>

<code>portrait *</code>

<li>: Sets the portrait image to use on the left. This field expects a</li>

<code>Portrait</code>

<li>object.</li>

<code>image *</code>

<li>: Sets a second image to use on the right of the dialog, and slightly up. This field expects an</li>

<code>ImageData</code>

<li>object.</li>

<p>The</p>

<code>ImageData</code>

<p>required for the</p>

<code>portrait</code>

<p>and</p>

<code>image</code>

<p>fields, may include the following:</p>

<code>path</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the normal position of the image.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the normal position of the image.</li>

<code>width</code>

<li>: The width to show the image onscreen.</li>

<code>height</code>

<li>: The height to show the image onscreen.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<p>Other fields:</p>

<code>name</code>

<li>: Optionally add a name to an entry, this serves to more easily refer to an entry.</li>

<code>buttons *</code>

<li>: An array of buttons to use in a question entry, covered in the next section.</li>

<code>audio</code>

<li>: String with the path to an audio file to play once when this dialog is shown on the UI.</li>

<code>typeSpeed</code>

<li>: The text appears one character at a time, simulating typing. Players can click to skip the animation. Tune the speed of this typing (30 by default) to go slower or faster. Set to</li>

<em>-1</em>

<li>to skip the animation.</li>

<code>skipable *</code>

<li>: If true, a "Skip" button appears in the corner to let players jump to the next non-skipable dialog, or close the dialog. Question dialogs can't be skiped.</li>

<p>Add format tags within the</p>

<code>text</code>

<p>string to accentuate parts of the text.</p>

<li>Use</li>

<code><b></b></code>

<li>for</li>

<strong>bold</strong>

<li>Use</li>

<code><i></i></code>

<li>for</li>

<em>italics</em>

<li>Use</li>

<code><color="red"></color></code>

<li>to color text</li>

<p>For example:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Questions and conversation trees</h4>

<p>The script can include questions that prompt the player to pick between two or up to four options. These questions can branch the conversation out and trigger other actions in the scene.</p>

<p>Note: Questions are only used by UI dialogs. If used in a speech bubble, questions will be displayed as regular entries with no buttons or options.</p>

<p>To make an entry a question, set the</p>

<code>isQuestion</code>

<p>field to</p>

<em>true</em>

<p>. This displays a set of buttons rather than the click icon. It also disables the click to advance to the next entry.</p>

<p>The</p>

<code>buttons</code>

<p>property of an entry contains an array of</p>

<code>ButtonData</code>

<p>objects, each one of these defines one button.</p>

<p>When on a question entry, you must provide at least the following for each button:</p>

<code>label</code>

<li>:</li>

<em>(string)</em>

<li>The label to show on the button.</li>

<code>goToDialog</code>

<li>:</li>

<em>(number | string)</em>

<li>The index or name of the next dialog entry to display when activated.</li>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>You can also set the following:</p>

<code>triggeredActions</code>

<li>:</li>

<em>( () => void )</em>

<li>An additional function to run whenever the button is activated</li>

<code>fontSize</code>

<li>:</li>

<em>(number)</em>

<li>Font size of the text</li>

<code>offsetX</code>

<li>:</li>

<em>(number)</em>

<li>Offset of the label on the X axis, relative to its normal position.</li>

<code>offsetY</code>

<li>:</li>

<em>(number)</em>

<li>Offset of the label on the Y axis, relative to its normal position.</li>

<p>All buttons can be clicked to activate them. Additionally, the first button in the array can be activated by pressing the</p>

<em>E</em>

<p>key. The second button in the array can be activated by pressing the</p>

<em>F</em>

<p>key,</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Triggering functions from the dialog</h4>

<p>You can run functions that may affect any other part of your scene. These functions get triggered when the player interacts with the dialog window, or when the NPC displays speech bubbles.</p>

<code>triggeredByNext</code>

<p>: Is executed when the player advances to the next dialog on a non-question dialog. The function also gets called if the dialog is the end of the conversation. It also gets called when a speech bubble advances to the next entry.</p>

<code>triggeredActions</code>

<p>: This property is associated to a button and is executed on a question dialog if the player activates the corresponding button. You can have up to 4 different buttons per entry, each with its own actions.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Skipping Dialogs</h4>

<p>Each dialog has an optional</p>

<code>skipable</code>

<p>property. If true, a button appears in the bottom-left corner of the dialog window. Players can click this button or press F to skip all the following dialogs.</p>

<p>When skipping, players will jump forward in the conversation till</p>

<li>They reach a dialog that doesn't have the</li>

<code>skipable</code>

<li>property.</li>

<li>They reach a dialog with</li>

<code>isQuestion=true</code>

<li>.</li>

<li>They reach a dialog that has the</li>

<code>skipable</code>

<li>property and</li>

<code>isEndOfDialog</code>

<li>, in which case the dialog window is closed.</li>

<h2>No-NPC Dialogs</h2>

<p>You can open a Dialog window that isn't associated with any</p>

<code>NPC</code>

<p>object in the scene. The</p>

<code>DialogWindow</code>

<p>object has all the same functionality as calling the</p>

<code>talk()</code>

<p>function on an NPC, but may be more practical in scenarios where a character isn't physically there, or where the conversation isn't with a particular character.</p>

<h3>The Dialog window</h3>

<p>To create a new dialog window, create a new</p>

<code>DialogWindow</code>

<p>object. This will instantiate the window but keep it hidden until you open it.</p>

<p>When instantiating a new DialogWindow, you can pass the following parameters:</p>

<code>defaultPortrait</code>

<li>: Sets a default portrait image to use on the left of all dialogs that don't specify an image. If a dialog has no portrait and no default is provided, no image is shown on the left. This field expects a</li>

<code>Portrait</code>

<li>object, that may include the following fields: -</li>

<code>path</code>

<li>: Path to the image file -</li>

<code>xOffset</code>

<li>: Offset on X, relative to the normal position of the portrait. -</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the normal position of the portrait. -</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>sound</code>

<li>: Path to a sound file that will be played once for every dialog entry shown, as long as the dialog entry doesn't have its own</li>

<code>audio</code>

<li>property.</li>

<p>Once a</p>

<code>DialogWindow</code>

<p>object is instanced, you can open a dialog window with the</p>

<code>openDialogWindow()</code>

<p>function.</p>

<p>When calling this function, you must specify:</p>

<code>NPCScript</code>

<li>: A JSON object composed of an array of</li>

<code>Dialog</code>

<li>objects, that includes all the dialog tree.</li>

<p>A second optional parameter is also available:</p>

<code>textId</code>

<li>: The index or</li>

<code>name</code>

<li>property of the entry to show first from the script. The first entry is 0.</li>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>Close a dialog window at any time by calling the</p>

<code>closeDialogWindow()</code>

<p>function.</p>

<p>For details on how to construct the dialog tree, see the sections above. The required</p>

<code>NPCScript</code>

<p>by the</p>

<code>DialogWindow</code>

<p>has exactly the same characteristics as the one used on the</p>

<code>NPC</code>

<p>object when calling the</p>

<code>talk()</code>

<p>function.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run build</code>

<li>for the internal files of the library to be generated</li>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On a new Decentraland scene, import this library as you normally would and include the tests you need</li>

<li>On the scene directory, run</li>

<code>npm link @dcl/npc-scene-utils</code>

<p>Note: When done testing, run</p>

<code>npm unlink</code>

<p>on both folders, so that the scene stops using the local version of the library.</p>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<p>NPC tools for conversational NPCs</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>16</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>19</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland

# URL: https://github.com/decentraland

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h1>Decentraland</h1>

<title>Twitter</title>

<summary>Verified</summary>

<p>We've verified that the organization</p>

<strong>decentraland</strong>

<p>controls the domain:</p>

<strong>decentraland.org</strong>

<h2>Pinned</h2>

<tool-tip>marketplace</tool-tip>

<p>ðï¸ Decentraland's NFT Marketplace</p>

<tool-tip>builder</tool-tip>

<p>ð Build scenes for Decentraland</p>

<tool-tip>catalyst</tool-tip>

<p>ð§ Content server for Decentraland</p>

<tool-tip>ui</tool-tip>

<p>ð¦ Decentraland UI</p>

<tool-tip>unity-renderer</tool-tip>

<p>Unity implementation of Decentraland Client</p>

<tool-tip>architecture</tool-tip>

<p>This repository aims to have the main Decentraland Architecture</p>

<h3>Repositories</h3>

<p>Unity project for converting GLTFs to AssetBundles</p>

<p>Decentraland Auth UI</p>

<p>Code for the server dedicated to auth stuff</p>

<p>A client to query and perform changes on Decentraland's catalyst servers</p>

<h4>People</h4>

<h4>Top languages</h4>

<h4>Most used topics</h4>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.commailto:hello@decentraland.org

# URL: https://github.commailto:hello@decentraland.org

<title>Welcome to Decentraland</title>

<h1>Decentraland</h1>

<h1>SDK 7</h1>

<h1>Smart Wearables</h1>

<h3>In Decentraland</h3>

<h2>What's new?</h2>

<p>Decentraland is a world built by YOU where the only limit is your imagination. Create and sell Wearables & Emotes, construct captivating scenes and interactive experiences, or set up a personal space in your own World.</p>

<p>The dynamic, virtual social world of Decentraland is home to a vibrant community hosting diverse daily events, ranging from parties, art exhibitions, fashion shows, music festivals, and more to interactive experiences from renown brands like Netflix, Doritos, and Samsung. Make friends, play games, explore, and discover all Decentraland has to offer!</p>

<p>As a fully decentralized metaverse, Decentraland is owned and governed by its users. Join the Decentraland DAO to submit and vote on proposals that affect how the world operates or secure funding for your ideas by applying for grants.</p>

<h2>Trending Items</h2>

<h2>Browse LAND Available for Rent & Sale</h2>

<h2>Make your ideas a reality in the metaverse. Find a team to build with.</h2>

<h2>Worlds</h2>

<h3>Your Personal Space in the Metaverse</h3>

<p>With just a Decentraland NAME you can claim your own corner of the metaverse, separate from the open world of Decentraland, where you can build, experiment, host eventsâwhatever you want, itâs your World!</p>

<h3>Learn more about Decentraland</h3>

<h2>Frequently Asked

Questions</h2>

<h4>What is Decentraland?</h4>

<h4>How do I enter Decentraland?</h4>

<h4>Do I need cryptocurrency or a crypto wallet to use Decentraland?</h4>

<h4>How do I become a Decentraland Creator?</h4>

<h4>What is a NAME?</h4>

<h4>What is the difference between LANDs and Worlds?</h4>

<h4>How can I get help and contact the Support Team?</h4>

<h3>Stay updated with Decentraland</h3>

<h2>RESOURCES</h2>

<h2>CONNECT</h2>

# Change to URL: https://github.com/orgs/decentraland/repositories

# URL: https://github.com/orgs/decentraland/repositories

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Unity project for converting GLTFs to AssetBundles</p>

<p>Decentraland Auth UI</p>

<p>Code for the server dedicated to auth stuff</p>

<p>A client to query and perform changes on Decentraland's catalyst servers</p>

<p>Notification producer</p>

<p>API definition for the Catalyst Server implementation</p>

<p>ð§ Content server for Decentraland</p>

<p>Service to generate and profile images of avatars</p>

<p>Opinionated All-in-one Web Framework</p>

<p>ð¦ Decentraland UI</p>

<p>ð Build scenes for Decentraland</p>

<p>ð Collection of 3D models for Decentraland avatars</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-explorer

# URL: https://github.com/decentraland/unity-explorer

<title>GitHub - decentraland/unity-explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-explorer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>38</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>157</strong>

<h2>Files</h2>

<button>View code</button>

<h1>unity-explorer</h1>

<p>Explorer renderer</p>

<h1>Protocol Generation</h1>

<h2>Update protocol</h2>

<p>To update the protocol to the last version of the protocol, you can execute the following commands:</p>

<code>cd scripts

npm install @dcl/protocol@next

npm run build-protocol</code>

<h2>SDK7 Integration Progress</h2>

<h3>Components</h3>

<code>Animator</code>

<code>AudioSource</code>

<code>AudioStream</code>

<code>AvatarAttach</code>

<code>AvatarModifierArea</code>

<code>AvatarShape</code>

<code>Billboard</code>

<code>CRDT_MESSAGE_HEADER_LENGTH</code>

<code>CameraMode</code>

<code>CameraModeArea</code>

<code>EngineInfo</code>

<code>GltfContainer</code>

<code>GltfContainerLoadingState</code>

<code>Material</code>

<code>MeshCollider</code>

<code>MeshRenderer</code>

<code>Name</code>

<code>NftShape</code>

<code>PointerEvents</code>

<code>PointerEventsResult</code>

<code>PointerLock</code>

<code>RESERVED_LOCAL_ENTITIES</code>

<code>RESERVED_STATIC_ENTITIES</code>

<code>Raycast</code>

<code>RaycastResult</code>

<code>SYSTEMS_REGULAR_PRIORITY</code>

<code>SyncComponents</code>

<code>TextShape</code>

<code>Transform</code>

<code>Tween</code>

<code>TweenSequence</code>

<code>TweenState</code>

<code>UiBackground</code>

<code>UiCanvasInformation</code>

<code>UiDropdown</code>

<code>UiDropdownResult</code>

<code>UiInput</code>

<code>UiInputResult</code>

<code>UiText</code>

<code>UiTransform</code>

<code>VideoEvent</code>

<code>VideoPlayer</code>

<code>VisibilityComponent</code>

<h2>Runtime API</h2>

<code>CommsApi</code>

<code>CommunicationsController</code>

<code>EngineApi</code>

<code>EnvironmentApi</code>

<code>EthereumController</code>

<code>Players</code>

<code>PortableExperiences</code>

<code>RestrictedActions</code>

<code>Runtime</code>

<li>(partially)</li>

<code>Scene</code>

<code>SignedFetch</code>

<code>Testing</code>

<code>UserActionModule</code>

<code>UserIdentity</code>

<h2>Regenerate protocol</h2>

<p>Just run:</p>

<code>cd scripts

npm run build-protocol</code>

<h1>Test scenes</h1>

<h2>Add a new scene</h2>

<p>To be able to select the scene at runtime</p>

<li>Place it to the "StreamingAssets\Scenes" directory.</li>

<li>Add its name without an extension to the "Scenes" list on the</li>

<code>EntryPoint</code>

<li>component.</li>

<h2>Control scene lifecycle</h2>

<p>At the moment one scene can be active at a time. By default at startup no scene is launched.</p>

<li>When a new scene is selected, the old scene is unloaded releasing its components to the pool.</li>

<li>"Stop" just disposes the scene</li>

<li>You can easily notice if the resources are not properly disposed by looking at the Unity hierarchy.</li>

<li>Setting the framerate can be useful for a stress test.</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/asset-bundle-converter

# URL: https://github.com/decentraland/asset-bundle-converter

<title>GitHub - decentraland/asset-bundle-converter: Unity project for converting GLTFs to AssetBundles</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Unity project for converting GLTFs to AssetBundles</p>

<h3>License</h3>

<summary>Apache-2.0, Unknown licenses found</summary>

<h3>Licenses found</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/asset-bundle-converter</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>33</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<code>cfa5a33</code>

<h2>Git stats</h2>

<strong>214</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Asset Bundle Converter</h1>

<p>This is the standalone version of our Asset Bundle Conversion tool that is actually present at the unity-renderer

The intent of this repository is to decouple the conversion tool to have fewer dependencies and more maintainability.</p>

<h2>Before you start</h2>

<h2>What does this tool does?</h2>

<p>To improve the performance of the WebGL build, in the past, we decided to convert all scenes into Asset Bundles.

So this tool loads every scene asset, loads and re-imports all gltf's to turn them into AssetBundles just for the CI to upload them into the content servers.</p>

<h2>How do I manually run this tool?</h2>

<li>Initialize and update the git submodules (</li>

<code>git submodule update --init</code>

<li>and</li>

<code>git submodule update .</code>

<li>)</li>

<li>Open this project using</li>

<code>Unity 2021.3.20f1</code>

<li>Go to</li>

<code>Decentraland > Convert Scene</code>

<li>menu.</li>

<li>Fill in the scene info and press</li>

<code>Start</code>

<li>Once the conversion is done, you will see the assets loaded in the current scene</li>

<li>You can find the converted asset at the</li>

<code>AssetBundles</code>

<li>folder located at the root of this repository</li>

<h1>The conversion server</h1>

<p>This tool is exposed as a standalone project and as a Docker based service. The code of the service lives in the</p>

<code>consumer-server</code>

<p>folder, and runs commands locally calling the project</p>

<code>asset-bundle-converter</code>

<p>of this same repository.</p>

<p>To build the image locally, docker must be used. The recommended command is:</p>

<code>docker build -t ab-converter .</code>

<p>And to run the server locally, the minimum command is the following:</p>

<code>docker run -p 5001:5000 ab-converter</code>

<p>After it starts, you should be albe to hit</p>

<code>http://localhost:5001/metrics</code>

<p>to check the server is live.</p>

<h1>CDN Filesystem</h1>

<p>The service uploads the results of the conversion to a S3 bucket defined in the</p>

<code>CDN_BUCKET</code>

<p>env var.</p>

<p>The structure of the bucket will look like this:</p>

<code>(root)

âââ/manifest       (manifests of the converted entities)

â  âââ entityId1.json

â  âââ entityId2.json

âââ/v4             (files of the v4 of the converter)

â  âââ ...

âââ/v5             (files of the v5 of the converter)

âââ ...</code>

<li>Every asset bundle conversion may be bound to a specific version of the converter. Versions may change because materials change or as a result of upgrading versions of unity.</li>

<li>This service has an embedded version, which is set via an environment variable (</li>

<code>ENV AB_VERSION v1</code>

<li>in the</li>

<code>Dockerfile</code>

<li>)</li>

<li>When each entity is converted, a manifest is generated. The manifest contains the AB_VERSION and a list of converted assets. The manifest is stored in the path</li>

<code>/manifest/:entity_id.json</code>

<li>. Manifests should have a TTL of 1 hour in the edge and CDN cache.</li>

<li>All converted assets are stored in a version-scoped path</li>

<code>/ab/:AB_VERSION/:CID</code>

<li>. Enabling using the same CDN different versions at a time. Converted assets should have a TTL of 1year in the CDN and edge servers.</li>

<li>Converted assets are stored in three versions:</li>

<code>/ab/:AB_VERSION/:CID</code>

<li>,</li>

<code>/ab/:AB_VERSION/:CID.gz</code>

<li>and</li>

<code>/ab/:AB_VERSION/:CID.br</code>

<li>being to enable network optimizations.</li>

<h1>Logs</h1>

<p>Logs of conversions are stored in a different bucket for safety reasons, the bucket is defined with the environment variable</p>

<code>LOGS_BUCKET</code>

<p>.</p>

<p>The logs for each conversion are stored in the path</p>

<code>logs/:AB_VERSION/:entityId/:DATE_AND_TIME.log</code>

<h1>Scheduling a manual conversion</h1>

<p>To schedule a manual conversion, there is an special with custom authentication at</p>

<code>/queue-task</code>

<p>. It sends a job to the queue, the job will be consumed by any available worker.</p>

<code>curl -XPOST -H 'Authorization: <TOKEN>' https://asset-bundle-converter.decentraland.org/queue-task -d '{"entityId": "bafyadsaljsdlkas", "contentServerUrl": "https://peer.decentraland.org/content"}'</code>

<h1>Using the new asset bundles</h1>

<p>This converter leverages versioning for the assets, the version is changed by the</p>

<code>AB_VERSION</code>

<p>env var in the Dockerfile.</p>

<p>This differs from the previous asset bundles in an impactful way: not all assets are stored at root level anymore. This is due to incompatibilities across versions of the shaders/materials and unity itself.</p>

<p>Prior to this converter, the renderer used to look for the asset bundles of all models and textures, and fallback to the original asset if a 404 was returned.</p>

<p>Now the assets need to be resolved based on a manifest including the list of converted files. If the files are not in the list, we can fallback directly to the original asset without waiting for the 404 and thus, optimizing network roundtrips and loading times.</p>

<p>Here is some pseudocode to illustrate the asset resolution process for an entity:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>As an exercise for the reader, here is a URL to resolve assets manually:</p>

<code>https://ab-cdn.decentraland.zone/manifest/bafkreie7b36aggssaerg7nvj5s56op5zqyxcqjtkq4q4kjrfhnkljhshgy.json</code>

<h1>Deploying</h1>

<p>This repository has continous delivery to the goerli (decentraland.zone) network.</p>

<p>To deploy to production, you must first select the full commit hash from the version you whish to deploy. Then check it exists as a tag in</p>

<p>and lastly execute the workflow "Manual Deploy" selecting the target environment and the docker tag (commit hash).</p>

<p>NOTICE: Please do not use</p>

<code>latest</code>

<p>as tag for the "Manual deploy", the pipeline of deployments runs on deltas, and if there was a "latest" and now we try to deploy "latest", it will detect no changes and finish without deploying. Always use the commit hash.</p>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in

the</p>

<p>file.</p>

<h2>About</h2>

<p>Unity project for converting GLTFs to AssetBundles</p>

<h3>Resources</h3>

<h3>License</h3>

<summary>Apache-2.0, Unknown licenses found</summary>

<h3>Licenses found</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-asset-bundle-converter

# Change to URL: https://github.com/decentraland/auth

# URL: https://github.com/decentraland/auth

<title>GitHub - decentraland/auth: Decentraland Auth UI</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland Auth UI</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/auth</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>34</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Auth UI</h1>

<p>The Decentraland Auth UI repository contains the UI code to belonging to the</p>

<p>site.</p>

<h2>About</h2>

<p>Decentraland Auth UI</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-auth-ui

# Change to URL: https://github.com/decentraland/auth-server

# URL: https://github.com/decentraland/auth-server

<title>GitHub - decentraland/auth-server: Code for the server dedicated to auth stuff</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Code for the server dedicated to auth stuff</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/auth-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>39</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Auth Server</h1>

<p>Server in charge of communication between the decentraland desktop client and the auth dapp on the browser.</p>

<p>Allows the desktop client to execute wallet methods (eth_sendTransaction, personal_sign, etc.) using the wallet the user has on their browser by leveraging the auth dapp.</p>

<h2>Requests</h2>

<p>Requests are the main entity this server handles. Requests contain the wallet methods that the desktop client want to execute.</p>

<p>They are created on the auth server on demand by the desktop client. The server then provides a request id, which can then be used to recover that request on a browser (which in this case it is intended to be opened on the auth dapp).</p>

<p>On the auth dapp, the user can execute said request by using the connected wallet, and communicate the result back to the auth server, which in turn will communicate it back to the desktop client.</p>

<p>For example, if the desktop client needs to send a transaction, it would create a transaction for the</p>

<code>eth_sendTransaction</code>

<p>method, and await for the result, which would be a transaction hash, to be returned after the flow is complete.</p>

<p>Requests have the following characteristics:</p>

<li>Only one request can exist at a time per connected socket. A new request will invalidate a previous one if it existed.</li>

<li>Requests have an expiration, and cannot be consumed after it.</li>

<li>If the socket disconnects, any request made by that socket will be deleted.</li>

<h2>Usage</h2>

<p>This section will explain the ways in which the service can be used.</p>

<p>is required to connect to the auth server (</p>

<p>).</p>

<p>The next example will show how a</p>

<code>personal_sign</code>

<p>can be requested by the desktop client.</p>

<li>The desktop client has to connect to the auth server through web sockets.</li>

<li>The desktop client has to send a request message with the method information to the auth server, and wait for the response.</li>

<pre>requestId</pre>

<pre>expiration</pre>

<pre>code</pre>

<pre>:</pre>

<pre>:</pre>

<p>The expiration shows when the request will become unavailable. The request must be consumed before it expires.</p>

<p>The code can be used as an easy visual help to be displayed on both the desktop client and the auth dapp for the user to see that if they match, they have a really high chance of being for the same request.</p>

<p>The request id is necessary for the next step.</p>

<li>Once the request id is obtained, the client has to listen for the corresponding outcome message that will provide the result of the request that will be executed on the auth dapp.</li>

<li>Get the</li>

<code>result</code>

<li>and the</li>

<code>sender</code>

<li>from the outcome message and do with them whatever is necessary.</li>

<h3>Authentication Flow</h3>

<p>For the sign in flow in the desktop client, we will need to use a special method called</p>

<code>dcl_personal_sign</code>

<p>.</p>

<p>This methods works similarly to</p>

<code>personal_sign</code>

<p>but with a little difference.</p>

<p>For this example we'll be using</p>

<code>ethers v6</code>

<p>and</p>

<code>@dcl/crypto</code>

<li>The desktop client will need to generate and store an epheremeral wallet.</li>

<li>The desktop client has to set a date in which the identity that will be created, expires.</li>

<li>Generate the ephemeral message to be signed using the address of the ephemeral account and the expiration.</li>

<li>Follow the steps decribed on the</li>

<li>section, initializing the flow with the following message.</li>

<pre>:</pre>

<pre>:</pre>

<p>As you can see, there is a simple difference with the previous example. That is that personal_sign requires a second parameter that is the address that will sign the message, but we don't know it yet, so only the ephemeral message is sent. The auth dApp will fill the signing address for us.</p>

<p>If the signer is sent as a param in the request, the auth dapp will use that instead of using the one of the connected wallet, and execute it as a normal personal_sign.</p>

<li>Once the flow is complete, and the desktop client receives the outcome message. The</li>

<code>sender</code>

<li>and the</li>

<code>result</code>

<li>that come with it are necessary to create an auth identity, which will be used to authorize the user into the platform.</li>

<pre>expiration</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>?</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>.</p>

<h2>About</h2>

<p>Code for the server dedicated to auth stuff</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/linker-server-authorizations

# URL: https://github.com/decentraland/linker-server-authorizations

<title>GitHub - decentraland/linker-server-authorizations</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/linker-server-authorizations</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>105</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Linker Authorizations</h1>

<p>To allow an address to deploy over Roads or Plazas, please send a pull request updating</p>

<code>db.json</code>

<p>.</p>

<p>Format:</p>

<pre>{</pre>

<pre>: [</pre>

<pre>,</pre>

<pre>],</pre>

<pre>: [</pre>

<pre>,</pre>

<pre>]

}</pre>

<p>Notes:</p>

<li>WORKAROUND Make sure the Ethereum Address is all lower case and entered mixed case.  The tool needs to be fixed to be case insenstive.</li>

<li>Make sure the json is valid syntax</li>

<li>Make sure the coordinate is format is ##,##</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/notifications-workers

# URL: https://github.com/decentraland/notifications-workers

<title>GitHub - decentraland/notifications-workers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/notifications-workers</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>38</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Overview</h1>

<p>The service is split in two separate workers for scalability and availability.</p>

<li>Processor worker: handles production of notifications and accepts externally produced notifications.</li>

<li>Inbox worker: serves the API to get user notifications and manages subscriptions for Server Sent Events.</li>

<p>The workers share a database to store the notifications and the subscribed users with their privacy configurations.</p>

<h2>Processor worker</h2>

<p>This worker has two main responsibilities:</p>

<li>Run the internal notification producers periodically to generate new notifications for events as they happen.</li>

<li>Receive, validate and accept requests from external notification producers and store the notifications in the DB.</li>

<h2>Inbox worker</h2>

<p>The worker in charge or retrieving the notifications to the user</p>

<h3>Use Case: Subscribe to notifications</h3>

<p>Returns a stream of all the notifications</p>

<strong>Endpoint</strong>

<code>GET /notifications/events</code>

<li>Authentication: signed fetch, the user id will be inferred from the auth chain.</li>

<code>retry: 10000

event: ping

data: {"notification_id":"7d9e62e7-93a1-452d-8397-ab7f8e37a325","origin_id":"91","type":"push","source":"sqs","origin_timestamp":1660554419000,"created_at":1694464865660.472,"updated_at":1694464865660.472,"address":"0xb5D7D1A05f553b5098D9274Df6B292e4e8222314","read":false,"metadata":{"sid":91,"epoch":"1660554419","topic":"Notification","users":["0xb5D7D1A05f553b5098D9274Df6B292e4e8222314"],"sender":"0x35B84d6848D16415177c64D64504663b998A6ab4","payload":{"data":{"app":"Shunya","sid":"121","url":"https://shunya.fi/","acta":"https://shunya.fi","aimg":"https://shunya.fi/_nuxt/img/shunya.cfece51.png","amsg":"Your portfolio is up by 0.08% since yesterday.","asub":"Assets Daily","icon":"https://gateway.ipfs.io/ipfs/QmQM97KUTGTT6nt6Xd7xAJpdGB8adiJ1LVUJoN8RoFUYfx","type":"3","epoch":"1660554419","appbot":"0","hidden":"0","secret":""},"notification":{"body":"Your portfolio is up by 0.08% since yesterday.","title":"Shunya - Assets Daily"}},"subtopic":"Channel"}}

data: {"notification_id":"ad2e1b7d-8b4e-4f5f-9b88-6852c3cd6e2d","origin_id":"152","type":"test","source":"manual","origin_timestamp":1660554419000,"created_at":1694004397627.816,"updated_at":1694004397627.816,"address":"0xb5d7d1a05f553b5098d9274df6b292e4e8222314","read":false,"metadata":{"sid":152,"epoch":"1660554419","topic":"Notification","users":["0xb5d7d1a05f553b5098d9274df6b292e4e8222314"],"sender":"0x35B84d6848D16415177c64D64504663b998A6ab4","payload":{"data":{"app":"Shunya","sid":"121","url":"https://shunya.fi/","acta":"https://shunya.fi","aimg":"https://shunya.fi/_nuxt/img/shunya.cfece51.png","amsg":"Your portfolio is up by 0.08% since yesterday.","asub":"Assets Daily","icon":"https://gateway.ipfs.io/ipfs/QmQM97KUTGTT6nt6Xd7xAJpdGB8adiJ1LVUJoN8RoFUYfx","type":"3","epoch":"1660554419","appbot":"0","hidden":"0","secret":""},"notification":{"body":"Your portfolio is up by 0.08% since yesterday.","title":"Shunya - Assets Daily"}},"subtopic":"Channel"}}

event: ping</code>

<pre>sequenceDiagram

User->>Inbox: Get stream of notifications

Inbox->>Db: get new events from user

Inbox->>User: stream notifications

Inbox->>Db: get new events from user

Inbox->>User: stream notifications

Inbox->>Db: get new events from user

Inbox->>User: stream notifications</pre>

<h2>Get notifications</h2>

<code>GET /notifications?from=&size=&onlyUnread=true&limit=10</code>

<li>Authentication: signed fetch, the user id will be inferred from the auth chain.</li>

<p>Params:</p>

<code>from</code>

<li>: the timestamp of the event triggered the notification to filter the results from (this means all retrieved notifications will have a timestamp >=

from)</li>

<code>limit</code>

<li>: the number of items retrieved in the query, default 20 and max 50</li>

<code>onlyUnread</code>

<li>: if true, then only unread notifications will be retrieved. If false, notifications will not be filtered by the read status.</li>

<p>Return:</p>

<pre>[

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]</pre>

<h2>Change notification read status</h2>

<code>PUT /notifications/read { notificationIds: ['notification-id-1', 'notification-id-2'] }</code>

<li>Authentication: signed fetch</li>

<p>Response</p>

<pre>{</pre>

<pre>:</pre>

<pre>}</pre>

<p>Mark notifications as read, this action is irreversible. The request body must contain the notification ids to be marked as read.</p>

<h2>Store notification by external producer</h2>

<code>POST /notifications {type, address, eventKey, metadata, timestamp}</code>

<li>Authentication: API KEY</li>

<p>Creates a new notification and stores it in the DB. A full example of the payload can look like this:</p>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>}</pre>

<h1>Run locally</h1>

<h3>Prerequisites</h3>

<p>Please make sure to have a postgres DB running (locally, docker, any external provider).  You can quickly spin off a new Postgres instance using Docker using:</p>

<code>yarn rundb:local</code>

<h3>Run the service</h3>

<p>Once the DB is up and running, set up the config in</p>

<code>.env</code>

<p>.</p>

<p>Finally, start the servers.</p>

<code>yarn

yarn start:local</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/archipelago-workers

# URL: https://github.com/decentraland/archipelago-workers

<title>GitHub - decentraland/archipelago-workers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago-workers</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>4</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>218</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Archipelago Service</h1>

<h2>Getting Started</h2>

<h3>Dependencies</h3>

<li>Node >= v16</li>

<li>running instance.</li>

<code>NATS_URL</code>

<li>environment variable must be set. Eg:</li>

<code>NATS_URL=localhost:4222</code>

<h3>Installation</h3>

<p>Install Node dependencies:</p>

<code>yarn install</code>

<h3>Usage</h3>

<p>Build and start the project:</p>

<code>yarn build

yarn start:local</code>

<h3>Test</h3>

<p>Run unit and integration tests:</p>

<code>yarn test</code>

<h3>NATS messages:</h3>

<code>peer.${address}.heartbeat</code>

<code>peer.${address}.disconnect</code>

<code>engine.peer.${address}.island_changed</code>

<code>engine.discovery</code>

<code>engine.islands</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/realm-provider

# URL: https://github.com/decentraland/realm-provider

<title>GitHub - decentraland/realm-provider</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/realm-provider</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/comms-gatekeeper

# URL: https://github.com/decentraland/comms-gatekeeper

<title>GitHub - decentraland/comms-gatekeeper</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/comms-gatekeeper</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-client

# URL: https://github.com/decentraland/catalyst-client

<title>GitHub - decentraland/catalyst-client: A client to query and perform changes on Decentraland's catalyst servers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A client to query and perform changes on Decentraland's catalyst servers</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>198</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>363</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Catalyst Client</h1>

<p>Welcome to the Catalyst Client library. This client can be used to interact with Decentraland's</p>

<p>. You can both fetch data, or deploy new entities to the server you specify.</p>

<h2>Installation</h2>

<pre>npm install dcl-catalyst-client</pre>

<h3>Examples</h3>

<p>Please check our</p>

<h2>About</h2>

<p>A client to query and perform changes on Decentraland's catalyst servers</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>14</strong>

<h3>Forks</h3>

<strong>10</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-catalyst-client

# Change to URL: https://github.com/decentraland/catalyst

# URL: https://github.com/decentraland/catalyst

<title>GitHub - decentraland/catalyst: ð§ Content server for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð§ Content server for Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>32</strong>

<strong>137</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,570</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Catalyst Project</h1>

<p>A Catalyst is a server that bundles different services. These services currently work as the backbone for Decentraland and run the decentralized storage for most of the content needed by the client and orchestrate the communications between peers.</p>

<p>If you just want to run a Catalyst server, please check the</p>

<p>repository. The current repository is mostly used for developing.</p>

<p>The architecture of the server is as follows:</p>

<p>(BFF)

This service was created to resolve client needs to enable faster development of new features without breaking the existing APIs. In the Catalyst context, it's used for the communications between peers connected to the client, its main responsibility is to manage the P2P signaling.</p>

<p>Previously Archipelago was a</p>

<p>used by the</p>

<p>, as now it needs to work with the different transports beyond P2P, it was converted into a Service. This service will have the same responsibility that the library did: group peers in clusters so they can communicate efficiently. On the other hand, the service will also need to be able to balance islands using the available transports and following a set of Catalyst Owner defined rules, in order to, for example, use LiveKit for an island in the Casino and P2P in a Plaza.</p>

<p>NATS is a message broker that enables the data exchange and communication between services. This is also a building block for future developments and will enable an easy way to connect services using subject-based messaging. In the context of the communication services architecture, it is used to communicate the BFF, Archipelago and LiveKit.</p>

<p>LiveKit is an open source project that provides scalable, multi-user conferencing over WebRTC. Instead of doing a P2P network, peers are connected to a</p>

<p>(SFU) in charge of managing message relay and different quality aspects of the communication. This will be the added infrastructure in order to provide high-performance/high-quality communications between crowds on designated scenes.</p>

<p>: This service provides a set of utilities required by the Catalyst Server Clients/Consumers in order to retrieve or validate data.

Some of the validations run in these functions are ownership related and for that it uses</p>

<p>to query the blockchain.</p>

<p>: The Content Server currently stores many of the</p>

<p>used in Decentraland. For example scenes, wearables and profiles. Content Servers will automatically sync with each other, as long as they were all approved by the</p>

<p>. If you set up a local content server, it will receive all updates by those other DAO Catalysts. However, new deployments that happen on your local server will not be sent to other servers.</p>

<p>is the reverse proxy used to route traffic to the Catalysts Services.</p>

<p>The</p>

<p>library can be used to interact with the Catalyst servers. You can both fetch data, or deploy new entities to the server you specify.</p>

<p>Check full architecture</p>

<h2>Catalyst API</h2>

<p>This Server implements the v1 of the API Specification detailed</p>

<h2>Monitoring</h2>

<p>For monitoring see</p>

<h2>Tests</h2>

<code>yarn build

yarn test</code>

<h2>Dependencies</h2>

<p>For a list of other Decentraland libraries that Catalyst servers depend on, please check the</p>

<h2>Contributing</h2>

<p>Please read</p>

<p>so that you can understand what actions will and will not be tolerated.</p>

<p>Read our</p>

<p>to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes.</p>

<h2>Release</h2>

<li>Create a tag release in Git</li>

<li>It will trigger the CI job which publishes a new docker image version under</li>

<code>@latest</code>

<li>tag</li>

<h2>About</h2>

<p>ð§ Content server for Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>52</strong>

<h3>Watchers</h3>

<strong>18</strong>

<h3>Forks</h3>

<strong>53</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: http://decentraland.github.io/catalyst-monitor

# URL: http://decentraland.github.io/catalyst-monitor

<title>Catalyst Nodes Monitor</title>

# Change to URL: https://github.com/decentraland/catalyst-owner

# URL: https://github.com/decentraland/catalyst-owner

<title>GitHub - decentraland/catalyst-owner: Everything necessary for catalyst owners to deploy their own node</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Everything necessary for catalyst owners to deploy their own node</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-owner</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>29</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>410</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Catalyst Management</h1>

<p>Welcome to the Catalyst management tool!</p>

<p>Here you will find everything you need to set up you our Catalyst node.</p>

<h1>Important notice!</h1>

<p>This repository is prepared to be auto updated with cron jobs. The updated branches are</p>

<code>development</code>

<p>and</p>

<code>master</code>

<p>. Where</p>

<code>development</code>

<p>is the canary release to test a configuration and</p>

<code>master</code>

<p>branch is the stable configuration for the catalysts.</p>

<p>It is</p>

<em>highly recommended</em>

<p>that you use a fork of this repository to avoid any security issues since it may run code directly in your catalyst.</p>

<p>We actively mix canary and stable configurations in several catalysts for Goerli (dev) and Mainnet (prod).</p>

<h2>Set up</h2>

<h3>Requirements</h3>

<li>You will need to have</li>

<li>installed.</li>

<li>You will to have</li>

<li>installed.</li>

<li>The initialization script runs on Bash. It has not been tested on Windows.</li>

<p>In order to run a public server, you will also need to:</p>

<li>Have a public domain pointing to your server.</li>

<li>Your server will need to have the HTTPS port open (443).</li>

<h3>What you will need to configure</h3>

<p>To configure your node, you will have to set three variables in the</p>

<p>file:</p>

<th>Name</th>

<th>Description</th>

<th>Default</th>

<th>Required</th>

<td>EMAIL</td>

<td>Needed to handle the TLS certificates. For example, you will be notified when they are about to expire.</td>

<td>-</td>

<td>yes</td>

<td>CONTENT_SERVER_STORAGE</td>

<td>The path to the directory where the content will be stored. Path must be absolute.</td>

<td>-</td>

<td>yes</td>

<td>CATALYST_URL</td>

<td>The public domain of the node. For example</td>

<code>https://peer.decentraland.org</code>

<td>. It is really important that you add</td>

<code>https://</code>

<td>at the beginning of the URL. If you are running your node locally, then simply write</td>

<code>http://localhost</code>

<td>-</td>

<td>yes</td>

<td>CATALYST_OWNER_CHANNEL</td>

<td>Which update channel in the cloud bootstrap configurations to use</td>

<code>stable</code>

<td>or</td>

<code>latest</code>

<td>.</td>

<td>latest</td>

<td>no</td>

<td>SQS_QUEUE_NAME</td>

<td>Which Amazon SQS to consume in</td>

<code>crontab.sh</code>

<td>-</td>

<td>no</td>

<td>MOUNT_DISK</td>

<td>Useful to mount a disk to the folder</td>

<code>$CONTENT_SERVER_STORAGE</code>

<td>when working with persistent storage in cloud instances.</td>

<td>-</td>

<td>no</td>

<td>DISABLE_THIRD_PARTY_PROVIDERS_RESOLVER_SERVICE_USAGE</td>

<td>Used to prevent the retrieval of Third Party Providers from the resolver service and exclusively fetch them from TheGraph.</td>

<td>false</td>

<td>no</td>

<p>There is also some advanced configuration in the</p>

<p>file. Normally, it shouldn't be modified.</p>

<th>Name</th>

<th>Description</th>

<th>Default</th>

<th>Required</th>

<td>ETH_NETWORK</td>

<td>Which Ethereum network you want to use. Usually is</td>

<code>goerli</code>

<td>for testing or</td>

<code>mainnet</code>

<td>for production</td>

<td>mainnet</td>

<td>yes</td>

<td>REGENERATE</td>

<td>This will instruct the script to regenerate the certs.</td>

<code>0</code>

<td>will keep the certificates,</td>

<code>1</code>

<td>will ask for certificate renewal. If there are no certificates, the initialization script will generate them automatically, regardless of this value. For more information, look at FAQ questions (2), (3) and (4)</td>

<td>0</td>

<td>no</td>

<td>MAINTENANCE_MODE</td>

<td>This will instruct to run maintenance tasks in the Catalyst and then stop.</td>

<code>0</code>

<td>will run the Catalyst normally ,</td>

<code>1</code>

<td>will run the maintenance mode.</td>

<td>0</td>

<td>no</td>

<h2>Running your Catalyst</h2>

<p>After you have configured everything, all you need to do is run:</p>

<code>./init.sh</code>

<h4>How to make sure that your Catalyst is running</h4>

<p>Once you started your Catalyst server, after a few seconds you should be able to test the different services by accessing:</p>

<li>Content:</li>

<code>CATALYST_URL/content/status</code>

<li>Lambdas:</li>

<code>CATALYST_URL/lambdas/status</code>

<h2>Updating your Catalyst</h2>

<p>To update your Catalyst to a newer version, you can do the same as above:</p>

<code>./init.sh</code>

<h2>Stopping your Catalyst node</h2>

<p>To stop a specific container on your node:</p>

<code>./stop.sh</code>

<h2>Stopping a specific container from a Catalyst node</h2>

<p>To stop a specific container on your node:</p>

<code>./stop.sh [ nginx | lambdas | content-server ]</code>

<h2>About</h2>

<p>Everything necessary for catalyst owners to deploy their own node</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>11</strong>

<h3>Watchers</h3>

<strong>17</strong>

<h3>Forks</h3>

<strong>29</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer-bff

# URL: https://github.com/decentraland/explorer-bff

<title>GitHub - decentraland/explorer-bff: Backend for frontend for Explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Backend for frontend for Explorer</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-bff</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>12</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>175</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Explorer BFF</h1>

<h2>Getting Started</h2>

<h3>Dependencies</h3>

<li>Node >= v16</li>

<li>running instance.</li>

<code>NATS_URL</code>

<li>environment variable must be set. Eg:</li>

<code>NATS_URL=localhost:4222</code>

<h3>Installation</h3>

<p>Install Node dependencies:</p>

<code>make install</code>

<h3>Usage</h3>

<p>Build and start the project:</p>

<code>make build

make start</code>

<h3>Test</h3>

<p>Run unit and integration tests:</p>

<code>make build

make test</code>

<h3>Modifying the protocol</h3>

<p>The protocol files for the explorer services and API are part of the</p>

<p>repository. To make changes to the protocol, first create a pull request in that repository. After the PR builds, a test link is created suggesting an NPM package to install in this repository in the shape of:</p>

<pre>npm install</pre>

<p>Use that build to test the integration entirely, and leverage the</p>

<p>pull request checks to prevent breaking compatibility with previous versions of the protocol.</p>

<h3>Environment Variables</h3>

<h4>NATS</h4>

<code>NATS_URL</code>

<li>(required): URL of the NATS instance to be connected to</li>

<h4>Server</h4>

<code>HTTP_SERVER_PORT</code>

<li>: (Defaults to 3000)</li>

<code>HTTP_SERVER_HOST</code>

<li>: (Defaults to 0.0.0.0)</li>

<h4>Other</h4>

<code>ETH_NETWORK</code>

<li>: Network for the Ethereum provider</li>

<code>SERVICE_DISCOVERY_HEALTH_CHECK_INTERVAL</code>

<li>: (Defaults to 60000) Interval in milliseconds for checking status updates from external services</li>

<h2>About</h2>

<p>Backend for frontend for Explorer</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/archipelago-service

# URL: https://github.com/decentraland/archipelago-service

<title>GitHub - decentraland/archipelago-service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>22</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>165</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Archipelago Service</h1>

<h2>Getting Started</h2>

<h3>Dependencies</h3>

<li>Node >= v16</li>

<li>running instance.</li>

<code>NATS_URL</code>

<li>environment variable must be set. Eg:</li>

<code>NATS_URL=localhost:4222</code>

<h3>Installation</h3>

<p>Install Node dependencies:</p>

<code>npm install</code>

<h3>Usage</h3>

<p>Build and start the project:</p>

<code>make build

npm run start</code>

<h3>Test</h3>

<p>Run unit and integration tests:</p>

<code>make build

npm run test</code>

<h3>Environment Variables</h3>

<h4>NATS</h4>

<code>NATS_URL</code>

<li>(required): URL of the NATS instance to be connected to</li>

<h4>Server</h4>

<code>HTTP_SERVER_PORT</code>

<li>: (Defaults to 5000)</li>

<code>HTTP_SERVER_HOST</code>

<li>: (Defaults to 0.0.0.0)</li>

<h4>Archipelago</h4>

<code>ARCHIPELAGO_FLUSH_FREQUENCY</code>

<li>: Frequency in seconds for islands/peers updates in Archipelago (Defaults to 2.0)</li>

<code>ARCHIPELAGO_JOIN_DISTANCE</code>

<li>: (Defaults to 64)</li>

<code>ARCHIPELAGO_LEAVE_DISTANCE</code>

<li>: (Defaults to 80)</li>

<code>ARCHIPELAGO_MAX_PEERS_PER_ISLAND</code>

<li>: (Defaults to 100)</li>

<code>ARCHIPELAGO_PARCEL_SIZE</code>

<li>: (Defaults to 16)</li>

<code>ARCHIPELAGO_METRICS_INTERVAL</code>

<li>: Frequency in milliseconds for updating Prometheus metrics (Defaults to 10000)</li>

<code>ARCHIPELAGO_STATUS_UPDATE_INTERVAL</code>

<li>: Frequency in milliseconds for updating Archipelago status information (Defaults to 10000)</li>

<code>CHECK_HEARTBEAT_INTERVAL</code>

<li>: Frequency in milliseconds for checking the last peer update and assume it is active (Defaults to 60000)</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/archipelago

# URL: https://github.com/decentraland/archipelago

<title>GitHub - decentraland/archipelago: Library to group peers in islands according to their position, to decide connection groups</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Library to group peers in islands according to their position, to decide connection groups</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>55</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland's Archipelago Library</h1>

<h2>What is it?</h2>

<p>Decentraland uses P2P connections for communication between players. In order to be able to take better advantage of the available resources, there is a need to be able to group peers in clusters so they can communicate more efficiently and without compromising user experience.</p>

<p>Archipelago organizes peers in "islands" according to their positions in world, so that information can be used to organize the P2P network. It supports near real time position changes, and produces outputs that can be easily transfered to each peer so they can change their connections.</p>

<h2>Usage</h2>

<p>You can create an Archipelago using the default implementation</p>

<pre>:</pre>

<pre>:</pre>

<p>You can then set peer positions and obtain the island changes on each peer:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>You can also clear some peers from the archipelago:</p>

<h2>Interfaces</h2>

<p>See</p>

<h2>Commands</h2>

<h3>Running specs with mocha</h3>

<h4>Run all the tests</h4>

<code>make test</code>

<h4>Run a sigle test</h4>

<code>TESTARGS="--grep 'test name'" make test</code>

<h4>Debugging tests</h4>

<code>TESTARGS="--inspect-brk" make test</code>

<p>Then you can connect the debugger either through VsCode, or through chrome://inspect in Chromium based browsers</p>

<h3>Benchmark</h3>

<p>There is a simple benchmark that can be run to assess the performance of the algorithm. It can be found in</p>

<p>To run it:</p>

<pre>npx ts-node benchmark/simple.ts</pre>

<p>It has multiple parameters that can be configured through environment variables:</p>

<code>MAX_PEERS_PER_ISLAND</code>

<li>: Default 200. The maximum amount of people that can be in the same island.</li>

<code>SEED</code>

<li>: The seed used for RNG. If not provided, one is generated.</li>

<code>TARGET_PEERS</code>

<li>: Default 5000. The amount of peers the benchmark will try to reach by exclusively adding peers until that amount has been reached.</li>

<code>DISCONNECT_CHANCE</code>

<li>: Default 0.01. The chance a peer will disconnect during an operation.</li>

<code>HOTSPOT_CHANCE</code>

<li>: Default 0.95. The chance a peer will select a position near a hotspot</li>

<code>TELEPORT_CHANCE</code>

<li>: Default 0.01. The chance an existing peer will teleport instead of moving close to its position.</li>

<code>MIN_POSITION</code>

<li>: Default [-2400, 0, -2400]. The "minimum" position that can be generated.</li>

<code>MAX_POSITION</code>

<li>: Default [2400, 0, 2400]. The "maximum" position that can be generated. Positions are generated using random values between min and max for each component.</li>

<code>DURATION</code>

<li>: Default 120. Number of seconds to run the benchmark</li>

<code>HOTSPOTS</code>

<li>: Default 100. Number of hotspots that will be generated for this run.</li>

<code>DEBUG</code>

<li>: Default false. Show additional information when logging. When set to true, it can affect the performance significantly.</li>

<p>Example setting multiple parameters:</p>

<pre>DEBUG=true HOTSPOTS=20 SEED=0.8277166950419682 DURATION=60 npx ts-node benchmark/simple.ts</pre>

<h3>Build</h3>

<code>make build</code>

<p>, run it before pushing, otherwise the CI may fail if the API changed.</p>

<h3>Run test app</h3>

<p>There is a test app that runs Archipelago in the browser and draws the result. You can also write tests using Clojure that can be run line by line in an interpreter.</p>

<code>make start</code>

<p>, then manually open</p>

<code>http://0.0.0.0:3000</code>

<h2>About</h2>

<p>Library to group peers in islands according to their position, to decide connection groups</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentralands-archipelago-library

# Change to URL: https://github.com/decentraland/lighthouse

# URL: https://github.com/decentraland/lighthouse

<title>GitHub - decentraland/lighthouse</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/lighthouse</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>8</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Lighthouse / Comms Server</h1>

<p>Comms is comprised of two distinct modules: One for Catalyst server called "Lighthouse" and other for clients & P2P network called "Peer Library".</p>

<p>The Lighthouse is a server that tracks peers in different positions in order to enable them to make the necessary connections. It also handles authentication.</p>

<p>The following docs show how to run a local instance of the Lighthouse.</p>

<p>More information about the Peer Library component is available in this repository:</p>

<h2>Run tests</h2>

<code>yarn build

yarn test</code>

<h2>Set up</h2>

<p>Install libs</p>

<code>yarn install</code>

<p>Build package</p>

<code>yarn build</code>

<p>Set up a lighthouse instance on localhost:9000</p>

<code>yarn start</code>

<h2>Lighthouse endpoints</h2>

<p>Status</p>

<code>curl localhost:9000/status</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-comms-peer

# URL: https://github.com/decentraland/catalyst-comms-peer

<title>GitHub - decentraland/catalyst-comms-peer: Decentraland's Catalyst Comms Peer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland's Catalyst Comms Peer</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-comms-peer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>15</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>44</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Decentraland's Catalyst Comms Peer</p>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/comms3-livekit-transport

# URL: https://github.com/decentraland/comms3-livekit-transport

<title>GitHub - decentraland/comms3-livekit-transport</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/comms3-livekit-transport</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>comms3-livekit-transport</h1>

<p>Communications v3, livekit transport</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/architecture

# URL: https://github.com/decentraland/architecture

<title>GitHub - decentraland/architecture: This repository aims to have the main Decentraland Architecture</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This repository aims to have the main Decentraland Architecture</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/architecture</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Architecture</h1>

<p>This repository aims to have the main Decentraland Architecture, defined using</p>

<p>. The goal is to help you understand it's components, responsibilities, how they interact and help you navigate through them.</p>

<p>You will find the documentation index</p>

<p>and, also, the content of this repository is published on the</p>

<p>.</p>

<h1>How to Update this Repository</h1>

<p>The architecture is something live and from time to time we may need to update this diagram and information, in order to do so the file</p>

<p>contains the definition of the image</p>

<p>. It can be a bit challenging to update and make it look nice, the VSCode extension</p>

<p>can be very helpful to view your changes as you make them.

Once the architecture dot file is updated, you need to compile it and regenerate the architecture.svg file, for that you first need to</p>

<p>and then you can just run the</p>

<code>make</code>

<p>command and replace the architecture.svg file under</p>

<code>/docs</code>

<p>. Note that with any change on the diagram you need to validate that this documentation describing it's components is still updated.</p>

<h2>About</h2>

<p>This repository aims to have the main Decentraland Architecture</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>23</strong>

<h3>Watchers</h3>

<strong>8</strong>

<h3>Forks</h3>

<strong>16</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-architecture

# Change to URL: https://github.com/decentraland/catalyst-api-specs

# URL: https://github.com/decentraland/catalyst-api-specs

<title>GitHub - decentraland/catalyst-api-specs: API definition for the Catalyst Server implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>API definition for the Catalyst Server implementation</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-api-specs</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>15</strong>

<strong>60</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>240</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Catalyst Server API Definition</h1>

<p>API definition for the Catalyst Server implementation.</p>

<p>Check out the public API docs</p>

<h2>Working on the Catalyst API Definition</h2>

<h3>Install</h3>

<li>Install</li>

<li>.</li>

<li>Clone this repo and run</li>

<code>yarn</code>

<li>in the repo root.</li>

<h3>Usage</h3>

<code>yarn start</code>

<p>Starts the reference docs preview server.</p>

<code>yarn build</code>

<p>Bundles the definition to the dist folder.</p>

<code>yarn test</code>

<p>Validates the definition.</p>

<h2>Readocly</h2>

<p>This repository uses</p>

<p>to generate API reference documentation</p>

<p>The</p>

<code>.redocly.yaml</code>

<p>controls settings for various

tools including the lint tool and the reference

docs engine.  Open it to find examples and</p>

<p>for more information.</p>

<h2>About</h2>

<p>API definition for the Catalyst Server implementation</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>10</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://decentraland.github.io/catalyst-api-specs/

# URL: https://decentraland.github.io/catalyst-api-specs/

<title>API Reference | ReDoc</title>

<head>needed for adaptive design</head>

<head>ReDoc uses font options from the parent element

So override default browser styles</head>

<h1>API Specification for the Decentraland Catalyst Server (BETA)</h1>

<p>Download OpenAPI specification</p>

<p>:</p>

<p>A Catalyst is a Server that runs different services. These services currently work as the backbone for Decentraland and work in a decentralized network. The current specification details the following services:</p>

<p>- Archipelago</p>

<p>- Content Server</p>

<p>- Lambdas Service</p>

<p>WARNING: We are working to close the version 1.0 of the Catalyst Protocol defined by this API. So far this is what we have and it's public but we are still working on refinement and during this process we may decided to deprecate or change some of the endpoints.</p>

<h1>Global</h1>

<p>Endpoints that are about the whole catalyst or about shared services</p>

<h2>Catalyst Server Configs and health</h2>

<p>Retrieve detailed information about the services health and its configuration</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Catalyst services health information</p>

<strong>503</strong>

<p>Service Unavailable - Some catalyst service is not Healthy</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>503</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>The stats from all parcels</h2>

<p>Retrieves the amount of users on each parcel</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Parcels with peers connected to</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h1>Content Server</h1>

<p>Decentraland is a virtual world that is owned by its users. One of the biggest differentiators about Decentraland is its level of decentralization. Users can own LAND, wearables, and probably other types of items in the future. Each of these items is an NFT in itself, and therefore ownership is determined by the Ethereum (or EVM-compatible) blockchain.</p>

<p>Now, when a new wearable is created, or when a user uploads a scene to their LAND/parcel, all necessary files (3d models, textures, music, etc) are uploaded to a "content server". Why are we using these servers instead of the blockchain? Mainly because it would be prohibitively expensive to store files as big as 3d models in the blockchain. Users would have to pay fees so high to upload content to their parcels that nobody would do it.</p>

<p>So this is where content servers come into play. The content server is mainly a server where users can upload these files we mentioned before. Each server will verify against the blockchain that the user making the upload is actually allowed to do so. For example, in the case of scenes, the server will check that the deployer owns all the parcels they are trying to modify.</p>

<p>And the most important part is that all content servers will then sync with each other. So, for example, if a scene is modified in one server, the update itself will be broadcasted to the other ones. Then, in the case a content server goes down for some reason, all content will still be present in the other ones.</p>

<h2>Get information about an entity</h2>

<p>Get information about an entity, such us Scenes Profiles or Wearables, with the specified entityId.</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Specify the type of entity to audit</p>

<p>id of the entity</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Entity version, AuthChain and if the deployment was overwritten</p>

<strong>400</strong>

<p>Unrecognized Entity type</p>

<strong>404</strong>

<p>Not Found</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>400</li>

<li>404</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Validate if the Server is part of the DAO</h2>

<p>Used by the Server to figure out their identity on the DAO by themselves, so they will generate a random challenge text, and then query each server for it. If the text matches, then they have found themselves.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Challenge text</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<h2>Download content file</h2>

<p>Download the binary file associated with the specified hashId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Hash of the file to be retrieved, you can search for the hashId in the content section of a deployment. If the entity version greater than or equal to v4,  then the hashing algorithm will be IPFS, if the entity version is v3 or below then  it will be SHA-256</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Binary file with the specified hashId</p>

<strong>404</strong>

<p>File with the specified hashId Not Found</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>404</li>

<h2>Check if a content file exists</h2>

<p>Check if a content file exists</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Hash of the file to be checked</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Content file exists</p>

<strong>404</strong>

<p>File with the specified hashId Not Found</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>404</li>

<h2>List of entityIds associated with a hashId</h2>

<p>Get the list of entity ids whose deployments are associated with the specified content hash. This endpoint is currently intended for troubleshooting as there is no specific use case for it.</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Hash of the content file</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of all the entities associated with the hashId</p>

<strong>404</strong>

<p>Entities not found for the specified hash</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>404</li>

<h2>Validates if file exists on the Server</h2>

<p>Given a list of hashes, validates if the corresponding files exist in the storage of the server</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>Hash of the content file</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of objects with the hasIds and a boolean value specifying 'true' if the files exists on the server and 'false' if it doesn't.</p>

<strong>400</strong>

<p>Missing query parameters in the request</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>400</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Deploys an entity</h2>

<p>Deploys an entity in the content server. This request must contain a file with the entity itself and also the files associated with it, such as 3D models, as well as information about the entity and requester. This request will succeed only if the hash of the entity file matches the entityId and also if the signature is valid has the correct permission to modify the pointers associated with it.</p>

<h5>Request Body schema:</h5>

<h3>Responses</h3>

<strong>200</strong>

<p>Entity created successfully. The response will contain the timestamp and result.</p>

<strong>400</strong>

<p>Bad request. Returns the error object with the list of errors from the server response.</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>400</li>

<h2>List of active entities matching urn prefix</h2>

<p>Returns the list of active entities which have at least one pointer that matches the prefix given</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>urn prefix to filter the entities by</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>Page size (max 1000)</p>

<p>Page number (default: 1)</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of entity Ids matching the condition</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>List active entities by pointers or ids</h2>

<p>Returns the list of entities of the specified type with the specified id or pointers. Only one of these filters must be specified in the body.</p>

<h5>Request Body schema:</h5>

<p>Entities must be filtered by pointer XOR entityId (ids). Use this parameter if you want to retrieve an entity of the specified type with this pointer.</p>

<p>Entities must be filtered by pointer (pointers) XOR entityId. Use this parameter if you want to retrieve an entity of the specified type with this entityId.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of entities corresponding to the matching ids or pointers.</p>

<strong>400</strong>

<p>Bad request: ids or pointers must be present in the request, but not both</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<li>400</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>List of failed deployments</h2>

<p>Retrieves a list of the failed deployments</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Failed deployments list</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>List of changes made to a pointer</h2>

<p>List of all deltas from the deployments inside the filters that affect the given pointers. It returns a list of changes with the</p>

<code>before</code>

<p>field (the entity that was overridden with this deployment) and</p>

<code>after</code>

<p>(the entity that overrides the current one if present).</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>Acts as a filter in the collection of deployments, this value is the minimum value of local timestamp that any deployment in the collection will have.</p>

<p>Acts as a filter in the collection of deployments, this value is the maximum value of local timestamp that any deployment in the collection will have.</p>

<p>It is the last entity id that was visited, so it will be skipped when showing current page.</p>

<p>The deployments are a paginated collection, this parameter corresponds to the limit for each page. The default value is 500.</p>

<p>The type of entities that will be shown in the collection, many values can be sent. Valid values are: profile, scene and wearable.</p>

<p>This value is used as the field to order all the deployments in the collection. If no parameter is sent, then the default field to order with will be local_timestamp.</p>

<p>This value is used as the order for all the deployments in the collection. If no parameter is sent, then the default field to order with will be DESC.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of deployment changes made to pointers</p>

<strong>400</strong>

<p>Bad Request</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>400</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Snapshots with a list of active entities</h2>

<p>Lists all active deployments stored in the database in multiple snapshots for different time ranges. If the information needed is front in time of the most recent snapshot, you may use the</p>

<code>/content/pointer-changes</code>

<p>endpoint with the necessary</p>

<code>from</code>

<p>filter.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>The result is a list of snapshots. Each "hash" field references the a snapshot with all the active entities that has an entity timestamp within the specified time range. Each hash is a reference to a JSON file containing one line per entity in a JSON format. Once you get the hashes you can download them using the /content/contents/{hashId} endpoint.</p>

<strong>503</strong>

<p>New Snapshots not yet created</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Content Server status</h2>

<p>Retrieve deteailed information about the content server status</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Content Server status information</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h1>Archipelago</h1>

<p>This service is in charge of clustering users according to their position and assigning a connection string that will allow the user to connect to an specifig transport.</p>

<h2>List of islands</h2>

<p>Retrieves the list of communication islands in the server with details about the peers present in each island.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of Islands</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Island Details</h2>

<p>Retrieve information about the specified islandId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>ID of the Island. You can search for the list of islands using the /comms/islands endpoint.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Island details</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>List of peers</h2>

<p>Retrieves the list peers in the server with details about their positions and islands.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of Peers</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h1>Lambdas</h1>

<p>This service provides a set of utilities required by the Catalyst Server Clients\Consumers in order to retrieve or validate data.</p>

<h2>Catalyst Server status</h2>

<p>Retrieve detailed information about the services</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Catalyst services information</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<h2>Get Collections</h2>

<p>Retrieve the list of collections URNs</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Array of collections URNs and names</p>

<strong>500</strong>

<p>Internal Server Error</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Download thumbnail image</h2>

<p>Downloads a thumbnail image for the specified urn</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Uniform Resource Name (URN) that identifies the asset</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Thumbnail image</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h2>Download URN image</h2>

<p>Downloads the image for the specified urn</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Uniform Resource Name (URN) that identifies the asset</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Resource image</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h2>Get ERC721 Entity</h2>

<p>Retrieve ERC721/NFT Entity details</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum chain ID:

ETHEREUM_MAINNET = 1

ETHEREUM_RINKEBY = 4

ETHEREUM_GOERLI = 5

ETHEREUM_KOVAN = 42

MATIC_MAINNET = 137

MATIC_MUMBAI = 80001</p>

<p>Hash of the Contract. This will be used to build the URN that identifies the NFT.</p>

<p>Token Identifier</p>

<p>Optional rarity description that will be return as part of the NFT description common: 100000 uncommon: 10000 rare: 5000 epic: 1000 legendary: 100 mythic: 10 unique: 1</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Resource image</p>

<strong>400</strong>

<p>Bad Request: invalid chain ID</p>

<strong>404</strong>

<p>Entity Not Found</p>

<strong>500</strong>

<p>Internal Server Error</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get list of wearables for an address</h2>

<p>Get a list of wearables owned by the given address</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address from which you want to get the list of wearables</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>If present, response will be extended with the entity data.</p>

<p>If present, response will include the third-party wearables owned by the address. They will appear before other wearables if the response is paginated.</p>

<p>The number of the requested page.</p>

<p>The size of the requested page.</p>

<p>Determines the field to be sort by. By default it will be by</p>

<code>transferredAt</code>

<p>. Possible values:</p>

<code>transferredAt</code>

<p>and</p>

<code>rarity</code>

<p>.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of wearables owned by the given address</p>

<strong>503</strong>

<p>Failed to fetch wearables</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>503</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get list of emotes for an address</h2>

<p>Get a list of emotes owned by the given address</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address from which you want to get the list of emotes</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>Third Party collection Id to filter emotes, if this param is not sent then the 3rd parties emotes are not shown. If it is sent, only the 3rd parties emotes are shown.</p>

<p>If present, response will be extended with the entity data.</p>

<p>The number of the requested page.</p>

<p>The size of the requested page</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of emotes owned by the given address</p>

<strong>500</strong>

<p>Failed to fetch emotes for the address</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get list of names for an address</h2>

<p>Get a list of names owned by the given address</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address from which you want to get the list of names</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>The number of the requested page. It needs</p>

<code>pageSize</code>

<p>to be present to enable a paginated response.</p>

<p>The size of the requested page. It needs</p>

<code>pageNum</code>

<p>to be present to enable a paginated response.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of names owned by the given address</p>

<strong>500</strong>

<p>Failed to fetch names for the address</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get list of lands for an address</h2>

<p>Get a list of lands owned by the given address</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address from which you want to get the list of lands</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>The number of the requested page. It needs</p>

<code>pageSize</code>

<p>to be present to enable a paginated response.</p>

<p>The size of the requested page. It needs</p>

<code>pageNum</code>

<p>to be present to enable a paginated response.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of lands owned by the given address</p>

<strong>500</strong>

<p>Failed to fetch lands for the address</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Returns the list of third party wearables for the provided address</h2>

<p>Returns the list of third party wearables for the provided address</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address from which you want to get the list of wearables</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>The number of the requested page.</p>

<p>The size of the requested page.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Returns the list of third party wearables</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Returns the list of third party wearables for the given collection</h2>

<p>Returns the list of third party wearables for the given collection</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address from which you want to get the list of wearables</p>

<p>Third Party collection Id to filter wearables.</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>The number of the requested page.</p>

<p>The size of the requested page.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Returns the list of third party wearables</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Search Wearables</h2>

<p>Search for wearables based on the applied filters and retrieve detailed information</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>Lis of URNs that identify the collection. Maximum amount of ids allowed is 500.</p>

<p>List of wearables URNs to search. Maximum amount of ids allowed is 500.</p>

<p>Search text</p>

<p>Limit the quantity of results that will be returned by the request. You can only request up to 500 results.</p>

<p>The result will always be ordered by the local timestamp fields but in case of timestamp collisions, you can use the lastId field to filter the result</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Catalyst services health information</p>

<strong>400</strong>

<p>Bad Request</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<li>400</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Catalyst Servers</h2>

<p>Retrieve the list of Catalyst Servers</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of Catalyst Servers</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Retrieve DCL Point of Interests</h2>

<p>Retrieve the Point of Interest list of coordinates</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of Point of Interest coordinates. These are currently highlighted in the DCL Atlas.</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<h2>Denylisted user names</h2>

<p>Retrieve list of forbidden user names. The prohibition of these names is decided through the DAO and need to be voted, the list lives in a Smart Contract and the Catalyst just consumes this information to present it to the client. In order to add a new name a new proposal needs to be created, approved and a transaction should be sent by a DAO committee member.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Array of forbidden names by the DAO</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<h2>Validate signed message</h2>

<p>Given a signed message and it's AuthChain, validate it's authenticity. A message can be signed, for example, to prove ownership of the Entity pointers that they want to modify.</p>

<h5>Request Body schema:</h5>

<p>The body has 3 properties. The timestamp, the signedMessage that you wish to validate and the AuthChain.</p>

<p>The structure of the AuthChain is described as follows:</p>

<p>- The first element of the chain is the original signer, and the one who will be used to validate against the blockchain</p>

<p>- The last element of the chain contains the EHash and a signature</p>

<p>- In between are ephemeral keys that can be used for signing</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Result of the signature validation with owner address or errors</p>

<strong>400</strong>

<p>Bad Request: Expected 'signedMessage' property to be set</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<option>Valid Signature</option>

<option>Invalid Signature</option>

<label>Valid Signature</label>

<h2>Hot Scenes</h2>

<p>Returns the list of scenes where there are more users with coordinates and the list of parcels that compose the scene.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of scenes</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Realms status</h2>

<p>Returns the list of realms with details about the users in it</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of the current state of the realms. The userParcels array is the list of parcels in which there are users present.</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Avatars details</h2>

<p>Returns all the Avatars details associated with the Ethereum addresses in the body</p>

<h5>Request Body schema:</h5>

<p>The body only has the</p>

<code>ids</code>

<p>property representing a list of Ethereum addresses</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Array of Avatars</p>

<strong>304</strong>

<p>No profile was modified since</p>

<code>If-Modified-Since</code>

<p>header</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Avatar details</h2>

<p>Given a Ethereum address of a user, return the Avatars details associated with it.</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address of the user</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Array of Avatars</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Outfits</h2>

<p>Given a Ethereum address of a user, return the Outfits entity.</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Ethereum address of the user</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Outfits entity</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Returns the list of third party integrations as well as collections</h2>

<p>Returns the list of third party integrations and collections</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Returns the list of third party integrations and collections</p>

<p>Catalyst Development instance</p>

<p>Catalyst Staging instance</p>

<p>First production Catalyst node</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

# Change to URL: https://github.com/decentraland/catalyst-client-examples

# URL: https://github.com/decentraland/catalyst-client-examples

<title>GitHub - decentraland/catalyst-client-examples</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-client-examples</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ws-room-service

# URL: https://github.com/decentraland/ws-room-service

<title>GitHub - decentraland/ws-room-service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ws-room-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>83</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/snapshots-fetcher

# URL: https://github.com/decentraland/snapshots-fetcher

<title>GitHub - decentraland/snapshots-fetcher</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/snapshots-fetcher</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>135</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>166</strong>

<h2>Files</h2>

<button>View code</button>

<h1>snapshots-fetcher</h1>

<p>##TODO</p>

<li>verify hashes of downloaded files before success</li>

<li>download files to temp folder before verification, move to final folder after successful (download+hash verification)</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>9</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/collaborative-editor-server

# URL: https://github.com/decentraland/collaborative-editor-server

<title>GitHub - decentraland/collaborative-editor-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/collaborative-editor-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Running locally</h1>

<p>Copy file</p>

<code>.env.default</code>

<p>to</p>

<code>.env</code>

<p>and modify any relevant setting as needed. For example:</p>

<pre>cp .env.default .env</pre>

<p>Run</p>

<code>yarn</code>

<p>to install dependencies,</p>

<code>yarn build</code>

<p>to build the server. You can also run</p>

<code>yarn build:watch</code>

<p>to keep monitoring for changes and recompiling to pick

up those changes.</p>

<pre>yarn

yarn build</pre>

<p>Finally, run</p>

<code>yarn start</code>

<p>to start the server.</p>

<pre>yarn start</pre>

<h1>Deploying the server to prod</h1>

<p>You can find a public docker image in</p>

<code>quay.io/decentraland/collaborative-editor-server</code>

<p>.</p>

<pre>docker pull quay.io/decentraland/collaborative-editor-server:latest

docker run -p 8080:3000 -n collab-editor quay.io/decentraland/collaborative-editor-server:latest</pre>

<p>Please remember this API is in alpha state; it can change without any heads up.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<strong>marianogoldman</strong>

<strong>dependabot[bot]</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/lamb2

# URL: https://github.com/decentraland/lamb2

<title>GitHub - decentraland/lamb2</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/lamb2</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>40</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>208</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/notificator

# URL: https://github.com/decentraland/notificator

<title>GitHub - decentraland/notificator: Notification producer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Notification producer</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/notificator</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Notificator server</h1>

<p>This is a simple server that implements monitors important events (such as

transactions in the blockchain, bids in the auction, etc) and generates

notifications for users.</p>

<h1>Running the server</h1>

<h2>For development</h2>

<p>For development purposes, just clone this repository, build the project and run:</p>

<pre>git clone https://github.com/decentraland/notificator.git

yarn

yarn build

yarn start</pre>

<p>There should be a server running on port 3000.</p>

<h2>For production</h2>

<p>For running a production server, it is recommended to use the docker image

published by this repository. It is important to provide proper values for

LiveKit configuration using</p>

<code>--env</code>

<p>CLI options, as follows:</p>

<pre>docker pull quay.io/decentraland/notificator

docker run --name notificator -p 3000:3000 quay.io/decentraland/notificator</pre>

<h2>About</h2>

<p>Notification producer</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-stats

# URL: https://github.com/decentraland/catalyst-stats

<title>GitHub - decentraland/catalyst-stats</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-stats</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>101</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/content-validator

# URL: https://github.com/decentraland/content-validator

<title>GitHub - decentraland/content-validator</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/content-validator</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>96</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>240</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/content-validator</h1>

<p>Contains all validations to run against entity deployments.</p>

<h2>Getting Started</h2>

<p>Install dependencies and run tests:</p>

<code>> yarn

> yarn build

> yarn test</code>

<h3>Debugging tests</h3>

<p>In case you are using VS Code, you can install recommended extensions and debug them using Jest extension which adds UI support.</p>

<h2>Adding new entities</h2>

<p>Before adding any validation to new entities, ensure you have defined a schema on</p>

<p>and added the relation on</p>

<p>.</p>

<p>To make Catalysts accept deployments of new entity types, they must have defined how access is checked and that means to add them in</p>

<p>.</p>

<h3>In steps</h3>

<li>Create entity schema on</li>

<li>.</li>

<li>Add entity type and schema on</li>

<li>.</li>

<li>Add entity type and access checker in</li>

<li>.

a. Verify entity pointers can be resolved. If required add a new resolver in</li>

<li>.</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>10</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/common-schemas

# URL: https://github.com/decentraland/common-schemas

<title>GitHub - decentraland/schemas: Common schemas for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Common schemas for Decentraland</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/schemas</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>30</strong>

<strong>180</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>253</strong>

<h2>Files</h2>

<button>View code</button>

<h1>common-schemas</h1>

<p>Decentraland data structure interfaces and validators for TypeScript-based projects.</p>

<p>Install it with:</p>

<pre>npm i @dcl/schemas</pre>

<h2>Design Guidelines</h2>

<li>Prevent type problems across projects</li>

<li>Fail as early as possible, aim for compile-time</li>

<li>Preserve user optionality through runtime helpers</li>

<li>Prefer no-cost implementations and allow no-dependency import</li>

<li>Code is written once, read hundreds of times</li>

<p>Implementation decisions:</p>

<li>The main entrypoint should only export types</li>

<li>Every type is also a namespace</li>

<li>Type names are PascalCase</li>

<li>Validators and schemas are camelCase</li>

<h3>Collaborator's Guide</h3>

<h4>Generating types, validators and schemas</h4>

<p>This library export types that also act as values. This is achieved through TypeScript's</p>

<code>namespaces</code>

<p>. This means that every type imported from this library can also be used as a JS object. These types will include two properties named</p>

<code>schema</code>

<p>and</p>

<code>validate</code>

<p>.</p>

<code>namespaces</code>

<p>in typescript can be considered "</p>

<code>cost</code>

<p>imports".</p>

<h4>Example Type Definition</h4>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>MyType can now be both used as type</p>

<code>const a: MyType</code>

<p>or as an object</p>

<code>MyType.validate(a)</code>

<p>.</p>

<p>Beware that</p>

<code>validate</code>

<p>has type</p>

<code>ValidateFunction<T></code>

<p>which</p>

<code>ajv</code>

<p>creates automatically. When writing new validations always try to implement it as an ajv validation, even if custom code is needed. See</p>

<p>.</p>

<p>Particularly, beware of using the library like this, because reports by the</p>

<code>validator.validate</code>

<p>function are lost and never returned to the caller.</p>

<pre>:</pre>

<h4>Code ownership</h4>

<p>Please add types and schemas of your domain into the</p>

<code>src/<team></code>

<p>folder, also add your team to the</p>

<p>repository to make sure nobody accidentally changes it without your team noticing it.</p>

<h4>Informing changes</h4>

<p>Please notify about changes to the schemas to relevant teams by adding the whole team (i.e.</p>

<code>@decentraland/dapps</code>

<p>) as reviewers of the pull requests.</p>

<p>It is recommended to subscribe to this repository (using the</p>

<code>Watch</code>

<p>function) if you use any internal part of the Decentraland ecosystem.</p>

<h4>Making changes</h4>

<p>To make sure the relevant persons and groups are aware of changes in these types, there's an api-extraction process executed with</p>

<p>that creates</p>

<p>for review between commits. It gets included as part of PRs for easier read.</p>

<p>To generate the file before submitting a PR, run</p>

<code>npm run refresh-api</code>

<p>. This is executed by the CI by runnig</p>

<code>npm run check-api</code>

<p>. It also verifies that the generated file matches the exported types.</p>

<h2>Versioning and Publishing</h2>

<p>Versions are handled manually using Github releases and semver.</p>

<p>Main branch is automatically published to the</p>

<code>@next</code>

<p>dist tag to test integrations before final releases happen.</p>

<h2>About</h2>

<p>Common schemas for Decentraland</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>14</strong>

<h3>Forks</h3>

<strong>9</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/schemas

# URL: https://github.com/decentraland/schemas

<title>GitHub - decentraland/schemas: Common schemas for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Common schemas for Decentraland</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/schemas</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>30</strong>

<strong>180</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>253</strong>

<h2>Files</h2>

<button>View code</button>

<h1>common-schemas</h1>

<p>Decentraland data structure interfaces and validators for TypeScript-based projects.</p>

<p>Install it with:</p>

<pre>npm i @dcl/schemas</pre>

<h2>Design Guidelines</h2>

<li>Prevent type problems across projects</li>

<li>Fail as early as possible, aim for compile-time</li>

<li>Preserve user optionality through runtime helpers</li>

<li>Prefer no-cost implementations and allow no-dependency import</li>

<li>Code is written once, read hundreds of times</li>

<p>Implementation decisions:</p>

<li>The main entrypoint should only export types</li>

<li>Every type is also a namespace</li>

<li>Type names are PascalCase</li>

<li>Validators and schemas are camelCase</li>

<h3>Collaborator's Guide</h3>

<h4>Generating types, validators and schemas</h4>

<p>This library export types that also act as values. This is achieved through TypeScript's</p>

<code>namespaces</code>

<p>. This means that every type imported from this library can also be used as a JS object. These types will include two properties named</p>

<code>schema</code>

<p>and</p>

<code>validate</code>

<p>.</p>

<code>namespaces</code>

<p>in typescript can be considered "</p>

<code>cost</code>

<p>imports".</p>

<h4>Example Type Definition</h4>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>MyType can now be both used as type</p>

<code>const a: MyType</code>

<p>or as an object</p>

<code>MyType.validate(a)</code>

<p>.</p>

<p>Beware that</p>

<code>validate</code>

<p>has type</p>

<code>ValidateFunction<T></code>

<p>which</p>

<code>ajv</code>

<p>creates automatically. When writing new validations always try to implement it as an ajv validation, even if custom code is needed. See</p>

<p>.</p>

<p>Particularly, beware of using the library like this, because reports by the</p>

<code>validator.validate</code>

<p>function are lost and never returned to the caller.</p>

<pre>:</pre>

<h4>Code ownership</h4>

<p>Please add types and schemas of your domain into the</p>

<code>src/<team></code>

<p>folder, also add your team to the</p>

<p>repository to make sure nobody accidentally changes it without your team noticing it.</p>

<h4>Informing changes</h4>

<p>Please notify about changes to the schemas to relevant teams by adding the whole team (i.e.</p>

<code>@decentraland/dapps</code>

<p>) as reviewers of the pull requests.</p>

<p>It is recommended to subscribe to this repository (using the</p>

<code>Watch</code>

<p>function) if you use any internal part of the Decentraland ecosystem.</p>

<h4>Making changes</h4>

<p>To make sure the relevant persons and groups are aware of changes in these types, there's an api-extraction process executed with</p>

<p>that creates</p>

<p>for review between commits. It gets included as part of PRs for easier read.</p>

<p>To generate the file before submitting a PR, run</p>

<code>npm run refresh-api</code>

<p>. This is executed by the CI by runnig</p>

<code>npm run check-api</code>

<p>. It also verifies that the generated file matches the exported types.</p>

<h2>Versioning and Publishing</h2>

<p>Versions are handled manually using Github releases and semver.</p>

<p>Main branch is automatically published to the</p>

<code>@next</code>

<p>dist tag to test integrations before final releases happen.</p>

<h2>About</h2>

<p>Common schemas for Decentraland</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>14</strong>

<h3>Forks</h3>

<strong>9</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/urn-resolver

# URL: https://github.com/decentraland/urn-resolver

<title>GitHub - decentraland/urn-resolver</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/urn-resolver</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>21</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>74</strong>

<h2>Files</h2>

<button>View code</button>

<code>@dcl/urn-resolver</code>

<p>Resolves Asset URN for the</p>

<code>urn:decentraland</code>

<p>namespace following the definition of</p>

<pre>npm i @dcl/urn-resolver</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h1>Registered routes</h1>

<code>decentraland:off-chain:{registry}:{name}</code>

<li>: Resolve static offchain assets (i.e. base wearables, not in any blockchain)</li>

<code>decentraland:{network}:collections-v1:{contract(0x[a-fA-F0-9]+)}:{name}</code>

<li>: Resolve an ethereum wearables collection asset by contract address (v1)</li>

<code>decentraland:{network}:collections-v1:{contract(0x[a-fA-F0-9]+)}:{name}:{tokenId}</code>

<li>: Resolve an ethereum wearable item from collections v1 by contract address and token id</li>

<code>decentraland:{network}:collections-v1:{collection-name}:{name}</code>

<li>: Resolve an ethereum wearables collection asset by collection name (wearables API) (v1)</li>

<code>decentraland:{network}:collections-v1:{collection-name}:{name}:{tokenId}</code>

<li>: Resolve an ethereum wearable item from collections v1 by collection name and token id</li>

<code>decentraland:{network}:collections-v2:{contract(0x[a-fA-F0-9]+)}:{id}</code>

<li>: Resolve an ethereum wearables collection asset by contract address (v2)</li>

<code>decentraland:{network}:collections-v2:{contract(0x[a-fA-F0-9]+)}:{id}:{tokenId}</code>

<li>: Resolve an ethereum wearable item from collections v2 by contract address and token id</li>

<code>decentraland:{network}:LAND:{x},{y}</code>

<li>: Resolves the ethereum asset of a LAND position.</li>

<code>decentraland:{network}:LAND:{tokenId}</code>

<li>: Resolves the ethereum asset of a LAND by tokenId.</li>

<code>decentraland:{network}:collections-thirdparty:{thirdPartyName}:{collectionId}:{itemId}</code>

<li>: Resolves the ethereum asset of an item of a third party collection, currently only supported on polygon</li>

<code>decentraland:{network}:collections-thirdparty:{thirdPartyName}:{collectionId}</code>

<li>: Resolves the ethereum asset of a third party collection, currently only supported on polygon</li>

<code>decentraland:{network}:collections-thirdparty:{thirdPartyName}</code>

<li>: Resolves the ethereum asset of all collections from a third party, currently only supported on polygon</li>

<h1>DecentralandAssetIdentifier</h1>

<p>It is an union type defined in the file</p>

<p>, in that file you can find all the possible return types for URN resolution in this package.</p>

<h1>Contribute</h1>

<h2>Install</h2>

<p>You will need to install</p>

<code>jq</code>

<p>. If you are using MacOS you can install it by running:</p>

<code>brew install jq</code>

<p>.</p>

<p>The lib is being</p>

<p>.</p>

<pre>make build</pre>

<h2>Test</h2>

<pre>make</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentralandassetidentifier

# Change to URL: https://github.com/decentraland/profile-images

# URL: https://github.com/decentraland/profile-images

<title>GitHub - decentraland/profile-images: Service to generate and profile images of avatars</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Service to generate and profile images of avatars</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/profile-images</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h3>Profile Images</h3>

<p>The profile image services consists of two services:</p>

<strong>Producer</strong>

<p>: polls a target catalyst to fetch the latest profiles that have changes, and it adds them as jobs into SQS.</p>

<strong>Consumer</strong>

<p>: receives messages from the queue and for each job it generates the profile images of the requested profile, and puts them into an S3 bucket.</p>

<h3>Local Development</h3>

<p>You will need a few dependencies to run Amazon's SQS and S3 services locally:</p>

<li>You need to have</li>

<li>installed in your machine, you can run</li>

<code>brew install --cask docker</code>

<li>in MacOS.</li>

<li>Install</li>

<li>, you can run</li>

<code>brew install localstack/tap/localstack-cli</code>

<li>in MacOS.</li>

<li>Install</li>

<code>awslocal CLI</code>

<li>, you can run</li>

<code>pip3 install awscli --upgrade --user</code>

<li>in MacOS. You might need add the Python binaries to your PATH so you can run</li>

<code>awslocal</code>

<li>on the terminal:</li>

<code>export PATH=/Users/<your-user-name>/Library/Python/<version>/bin/:$PATH</code>

<li>. Replace</li>

<code><your-user-name></code>

<li>with your unix username and</li>

<code><version></code>

<li>with the python version (only major and minor, like</li>

<code>3.9</code>

<li>, you can check the version installed by running</li>

<code>python3 --version</code>

<li>).</li>

<p>Once you have everything above setup, do the following:</p>

<li>Run</li>

<code>localstack start</code>

<li>on a separate terminal an leave it running</li>

<li>Run</li>

<code>awslocal sqs create-queue --queue-name profile-images-queue</code>

<li>to create an SQS</li>

<li>Run</li>

<code>awslocal s3api create-bucket --bucket profile-images-bucket</code>

<li>to create an S3</li>

<p>Now copy the env variables from the example:</p>

<li>Run</li>

<code>cp .env.example .env</code>

<p>Finally, start build and start the consumer service</p>

<li>Run</li>

<code>yarn start</code>

<li>Run</li>

<code>yarn build</code>

<p>And run the producer service to start adding jobs to the queue</p>

<li>Run</li>

<code>yarn run start:producer</code>

<h2>About</h2>

<p>Service to generate and profile images of avatars</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-gatsby

# URL: https://github.com/decentraland/decentraland-gatsby

<title>GitHub - decentraland/decentraland-gatsby: Opinionated All-in-one Web Framework</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Opinionated All-in-one Web Framework</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-gatsby</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>41</strong>

<strong>738</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,727</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Gatsby</h1>

<h2>Get started</h2>

<p>You can use our</p>

<p>if you need to create a new repository.</p>

<h2>Node 16?</h2>

<p>If you are using node 16 you may need to install</p>

<code>isomorphic-fetch</code>

<p>in order to avoid a</p>

<code>ReferenceError: fetch is not defined</code>

<pre>npm install --save isomorphic-fetch

npm install --save-dev isomorphic-fetch</pre>

<p>and imported in your</p>

<code>src/server.ts</code>

<h2>Start project</h2>

<pre>npm start</pre>

<p>If it's the first time that you run a decentraland-gatsby project you may run it as sudo in order to create https files</p>

<h2>Project structure</h2>

<code>src/    ............................... source code

â

â£  @types/  ......................... typescript custom types

â

â£  migrations/  ..................... migrations

â   â [date]-[migration-name].ts .... files created with `npm run migrate`

â

â£  components/  ..................... react components

â

â£  hooks/  .......................... react hooks

â

â£  entities/  ....................... server side entities

â   â [Entity] ...................... entity name

â       â£ job.ts .................... background handler (runs periodically in without expose an endpoint)

â       â£ metrics.ts ................ metrics collectors

â       â£ middleware.ts ............. connect middleware to reuse

â       â£ model.ts .................. database model

â       â£ routes.ts ................. express routes

â       â£ utils.ts .................. entity helper function (should be front compatible)

â       â types.ts .................. entity types (should be front compatible)

â

â£  images/      ..................... render image

â

â£  intl/        ..................... language files

â   â [en|es|...].json

â

â£  pages/ ........................... route files

â   â£ 404.tsx     ................... not found page

â   â£ index.tsx   ................... index page

â   â£ index.css   ................... index styles

â   â£ [route].tsx ................... page render component

â   â [route].css ................... page styles

â

â£  html.js      ..................... gatsby html template

â  server.ts    ..................... server entry point

static/ ................ gatsby static files

.env.example ........... environment variables

.env.development ....... environment variables for development

.env.staging ........... environment variables for staging

.env.production ........ environment variables for production

.gitlab-ci.yml    ...... CI configuration file

.eslintrc.js      ...... eslint and plugins config file

.prettierignore   ...... prettier files

.prettierrc

Dockerfile     ......... Docker files

entrypoint.sh  ......... Bash script executed when the container starts

gatsby-browser.js  ..... gatsby configuration

gatsby-config.js

gatsby-node.js

gatsby-ssr.js

tsconfig.json   ........ tsconfig default configuration</code>

<p>Environment variables</p>

<h2>Project commands</h2>

<p>Development</p>

<pre>npm run migrate create [migration_name]</pre>

<pre>npm run migrate up</pre>

<pre>npm run migrate down</pre>

<pre>npm start</pre>

<pre>npm run develop</pre>

<pre>npm run server</pre>

<pre>npm run format</pre>

<pre>npm</pre>

<p>Production</p>

<pre>npm run build</pre>

<pre>npm run production</pre>

<h2>ESLint and plugins configuration</h2>

<p>In order to understand the steps to install ESLint and the plugins needed to order the imports please follow this</p>

<h2>About</h2>

<p>Opinionated All-in-one Web Framework</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>11</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>20</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-gatsby

# Change to URL: https://github.com/decentraland/decentraland-gatsby-template

# Change to URL: https://github.com/decentraland/client-sdk-unity

# URL: https://github.com/decentraland/client-sdk-unity

<title>GitHub - decentraland/client-sdk-unity</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/client-sdk-unity</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>45</strong>

<h2>Files</h2>

<button>View code</button>

<h1>LiveKit Unity SDK</h1>

<g-emoji>â ï¸</g-emoji>

<p>Warning</p>

<p>This SDK is currently in Developer Preview mode and not ready for production use. There will be bugs and APIs may change during this period.</p>

<p>We welcome and appreciate any feedback or contributions. You can create issues here or chat live with us in the #rust-developer-preview channel within the</p>

<p>.</p>

<article>Use this SDK to add real-time video, audio and data features to your Unity app. By connecting to a self- or cloud-hosted</article>

<article>server, you can quickly build applications like interactive live streaming or video calls with just a few lines of code.</article>

<h2>Platform Support</h2>

<li>Windows</li>

<li>MacOS</li>

<li>Linux</li>

<li>iOS</li>

<li>Android</li>

<li>WebGL</li>

<p>We plan to support all Unity platforms with this SDK. WebGL is currently supported with</p>

<p>.</p>

<h2>Installation</h2>

<p>Follow this</p>

<p>using the</p>

<code>https://github.com/livekit/client-sdk-unity.git</code>

<p>link.

You can then directly import the samples into the package manager.</p>

<p>This repo uses</p>

<p>, please ensure it's installed when cloning the repo.</p>

<h2>Examples</h2>

<h3>Connect to a room:</h3>

<pre>LiveKit</pre>

<pre>IEnumerator</pre>

<pre>Room</pre>

<pre>room</pre>

<pre>TrackSubscribed</pre>

<pre>room</pre>

<pre>connect</pre>

<pre>IsError</pre>

<pre>Debug</pre>

<pre>room</pre>

<pre>Name</pre>

<h3>Publishing microphone</h3>

<pre>source</pre>

<pre>clip</pre>

<pre>Microphone</pre>

<pre>source</pre>

<pre>loop</pre>

<pre>Ssurce</pre>

<pre>RtcAudioSource</pre>

<pre>Source</pre>

<pre>LocalAudioTrack</pre>

<pre>rtcSource</pre>

<pre>TrackPublishOptions</pre>

<pre>options</pre>

<pre>Source</pre>

<pre>TrackSource</pre>

<pre>SourceMicrophone</pre>

<pre>room</pre>

<pre>LocalParticipant</pre>

<pre>track</pre>

<pre>options</pre>

<pre>publish</pre>

<pre>IsError</pre>

<pre>Debug</pre>

<h3>Publishing a texture (e.g Unity Camera)</h3>

<pre>UnityEngine</pre>

<pre>RenderTexture</pre>

<pre>RenderTextureFormat</pre>

<pre>ARGB32</pre>

<pre>rt</pre>

<pre>Camera</pre>

<pre>main</pre>

<pre>targetTexture</pre>

<pre>TextureVideoSource</pre>

<pre>rt</pre>

<pre>LocalVideoTrack</pre>

<pre>source</pre>

<pre>TrackPublishOptions</pre>

<pre>options</pre>

<pre>VideoCodec</pre>

<pre>VideoCodec</pre>

<pre>H264</pre>

<pre>options</pre>

<pre>Source</pre>

<pre>TrackSource</pre>

<pre>SourceCamera</pre>

<pre>_room</pre>

<pre>LocalParticipant</pre>

<pre>track</pre>

<pre>options</pre>

<pre>publish</pre>

<pre>IsError</pre>

<pre>Debug</pre>

<h3>Receiving tracks</h3>

<pre>IEnumerator</pre>

<pre>Room</pre>

<pre>room</pre>

<pre>TrackSubscribed</pre>

<pre>room</pre>

<pre>track</pre>

<pre>RemoteVideoTrack videoTrack</pre>

<pre>VideoStream</pre>

<pre>videoTrack</pre>

<pre>stream</pre>

<pre>TextureReceived</pre>

<pre>StartCoroutine</pre>

<pre>stream</pre>

<pre>track</pre>

<pre>RemoteAudioTrack audioTrack</pre>

<pre>AudioStream</pre>

<pre>audioTrack</pre>

<pre>source</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ui

# URL: https://github.com/decentraland/ui

<title>GitHub - decentraland/ui: ð¦ Decentraland UI</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¦ Decentraland UI</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ui</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>35</strong>

<strong>375</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<code>15df8af</code>

<h2>Git stats</h2>

<strong>588</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland UI</h1>

<p>This is basically</p>

<code>semantic-ui-react</code>

<p>themed with Decentrland's look & feel + some of our own components</p>

<p>See:</p>

<h2>Usage</h2>

<p>Install it:</p>

<pre>npm install --save decentraland-ui</pre>

<p>Import Decentraland UI's styles in your App's entry point</p>

<p>Now you can use Decentraland UI's components:</p>

<pre>Sabe</pre>

<h3>Without React</h3>

<p>You can also use</p>

<code>decentraland-ui</code>

<p>as a CSS framework just by adding this tag in your</p>

<code><head></code>

<p>:</p>

<pre>="</pre>

<pre>"</pre>

<pre>="</pre>

<pre>" /></pre>

<p>And then using</p>

<p>classes like this:</p>

<pre>="</pre>

<pre>"</pre>

<pre>Click me!</pre>

<p>ð</p>

<h2>Minimizing bundle size</h2>

<p>You can import just the essential component and reduce the size of your bundles, like this:</p>

<h2>Alternative themes</h2>

<p>You can use one of our alternative themes by importing in after Decentraland UI's styles, like this:</p>

<p>Or you can create your own theme like this:</p>

<pre>{</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>solid</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>);</pre>

<pre>}</pre>

<h2>Development</h2>

<p>Prerequisites: Node.js v16 (or compatible)</p>

<p>Install dependencies and start Storybook:</p>

<code>$ npm install

$ npm start</code>

<h2>CI/CD</h2>

<p>We deploy automatically to</p>

<p>and release a new version via</p>

<code>semantic-release</code>

<h2>About</h2>

<p>ð¦ Decentraland UI</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>194</strong>

<h3>Watchers</h3>

<strong>24</strong>

<h3>Forks</h3>

<strong>90</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-ui--

# Change to URL: https://github.com/decentraland/godot-explorer

# URL: https://github.com/decentraland/godot-explorer

<title>GitHub - decentraland/godot-explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/godot-explorer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>44</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>110</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Godot Rust</h1>

<h2>Set up project</h2>

<p>Clone the repo using</p>

<code>git clone https://github.com/decentraland/godot-explorer</code>

<p>Install</p>

<p>Download and install third party libraries</p>

<strong>Linux</strong>

<li>(apt-get based):</li>

<li>Install alsa and udev:</li>

<code>sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev</code>

<li>Install ffmpeg deps:</li>

<code>sudo apt install -y --no-install-recommends clang curl pkg-config libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev</code>

<li>Install Livekit deps:</li>

<code>sudo apt update -y; sudo apt install -y libssl-dev libx11-dev libgl1-mesa-dev libxext-dev</code>

<strong>MacOS</strong>

<li>:</li>

<code>brew install ffmpeg pkg-config</code>

<strong>Windows</strong>

<li>:</li>

<li>download and unzip</li>

<code>https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z</code>

<li>set</li>

<code>LIBCLANG_PATH</code>

<li>=</li>

<code>path to LLVM\x64\bin</code>

<li>(this is packaged with visual studio, or can be downloaded separately)</li>

<li>set</li>

<code>FFMPEG_DIR</code>

<li>=</li>

<code>root folder where ffmpeg has been unzipped</code>

<li>add</li>

<code>ffmpeg\bin</code>

<li>to your</li>

<code>PATH</code>

<li>the</li>

<code>.github/workflows/ci.yml</code>

<li>file can be useful to guide you</li>

<p>Go to</p>

<code>rust/xtask</code>

<p>folder, and run</p>

<code>cargo run -- install</code>

<p>.</p>

<h2>Running and editting the project</h2>

<li>Ensure you are in</li>

<code>rust/xtask</code>

<li>folder first</li>

<li>You can run</li>

<code>cargo run -- run</code>

<li>to build the Rust library and execute the client.</li>

<li>With adding</li>

<code>-r</code>

<li>it builds the library in release mode. Note: the Godot executable is an editor, so it's a</li>

<code>release_debug</code>

<li>build, see the Target section</li>

<li>for more infromation.</li>

<li>With adding</li>

<code>-e</code>

<li>it also builds the library, but the project edition is executed instead of the client.</li>

<h2>Contributing</h2>

<p>More details on</p>

<h2>Debugging the library</h2>

<p>This repos is set up to be opened with Visual Studio Code. In the section</p>

<code>Run and Debug</code>

<p>in the Activity bar, you can find the configuration for your platform.</p>

<h2>Run test with coverage</h2>

<li>Ensure you are in</li>

<code>rust/xtask</code>

<li>folder first</li>

<li>Run</li>

<code>cargo run -- coverage --dev</code>

<li>. It'll create a</li>

<code>coverage</code>

<li>folder with the index.html with the all information. For running this commands you need to have lvvm tools and grcov, you can install them with</li>

<code>rustup component add llvm-tools-preview</code>

<li>and</li>

<code>cargo install grcov</code>

<li>.</li>

<h1>Mobile targets</h1>

<p>See</p>

<code>rust/decentraland-godot-lib/builds.md</code>

<p>Powered by the Decentraland DAO</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>9</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<strong>leanmendoza</strong>

<strong>kuruk-mm</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-godot-rust

# Change to URL: https://github.com/decentraland/bevy-explorer

# URL: https://github.com/decentraland/bevy-explorer

<title>GitHub - decentraland/bevy-explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/bevy-explorer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>63</strong>

<strong>11</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>92</strong>

<h2>Files</h2>

<button>View code</button>

<h1>bevy-explorer</h1>

<p>A forward-looking implementation of the Decentraland protocol.</p>

<p>This implementation uses</p>

<p>and the</p>

<p>engine, and targets desktop clients.</p>

<p>This project's goals are to:</p>

<li>document current and future protocol standards</li>

<li>experiment with changes to the protocol</li>

<li>increase the field of alternative Explorers</li>

<li>prioritize solid fundamentals, extensibility, and the use of modern open-source frameworks</li>

<h1>Building and Running</h1>

<li>Clone the repo using</li>

<code>git clone https://github.com/decentraland/bevy-explorer</code>

<li>Install</li>

<li>download and install third party libraries</li>

<li>on linux:</li>

<li>Install alsa and udev:</li>

<code>sudo apt-get update; sudo apt-get install --no-install-recommends libasound2-dev libudev-dev</code>

<li>Install ffmpeg deps:</li>

<code>sudo apt install -y --no-install-recommends clang curl pkg-config libavcodec-dev libavformat-dev libavutil-dev libavfilter-dev libavdevice-dev</code>

<li>Install Livekit deps:</li>

<code>sudo apt update -y; sudo apt install -y libssl-dev libx11-dev libgl1-mesa-dev libxext-dev</code>

<li>on macos:</li>

<code>brew install ffmpeg pkg-config</code>

<li>on windows:</li>

<li>download and unzip</li>

<code>https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-full-shared.7z</code>

<li>set</li>

<code>LIBCLANG_PATH</code>

<li>=</li>

<code>path to LLVM\x64\bin</code>

<li>(this is packaged with visual studio, or can be downloaded separately)</li>

<li>set</li>

<code>FFMPEG_DIR</code>

<li>=</li>

<code>root folder where ffmpeg has been unzipped</code>

<li>add</li>

<code>ffmpeg\bin</code>

<li>to your</li>

<code>PATH</code>

<li>Install</li>

<code>cargo run --release</code>

<h1>Arguments</h1>

<code>cargo run --release -- [--server serverpath] [--location location] [--vsync true|false] [--log_fps true|false] [--msaa 1|2|4|8] [--threads u32] [--distance f32]</code>

<code>--server https://sdk-test-scenes.decentraland.zone</code>

<li>specify the content server, defaults to the sdk test server.</li>

<code>--location 52,-52</code>

<li>specify the parcel at which to spawn.</li>

<code>--vsync (true|false)</code>

<li>disable/enable vsync. defaults to off.</li>

<code>--fps (number)</code>

<li>set target fps. defaults to 60. if vsync is true this will be overridden by the vsync refresh rate. also accessible via console</li>

<code>/fps</code>

<li>command.</li>

<code>--msaa [1,2,4,8]</code>

<li>set the number of multisamples. higher values make for nicer graphics but takes more gpu power. defaults to 4.</li>

<code>--threads n</code>

<li>set the max simultaneous thread count for scene javascript execution. higher will allow better performance for distant scenes, but requires more cpu power. defaults to 4.</li>

<li>also accessible via console command</li>

<code>/scene_threads</code>

<code>--distance n</code>

<li>set the distance (in meters) at which scenes will be loaded. defaults to 100.0.</li>

<li>also accessible via console command</li>

<code>/scene_distance</code>

<code>--no_gltf</code>

<li>disable gltf loading.</li>

<code>--no_avatar</code>

<li>disable avatar rendering.</li>

<code>--no_fog</code>

<li>disable distance fog</li>

<code>--inspect <scene_hash></code>

<li>when the scene with the input hash is first loaded, the js runtime will pause waiting for a debugger session (such as</li>

<code>chrome://inspect</code>

<li>) to connect, and allow you to debug the scene code. requires a build with --features "inspect"</li>

<h1>Testing</h1>

<code>cargo test</code>

<p>executes all the tests.</p>

<p>Powered by the Decentraland DAO</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk7-goerli-plaza

# URL: https://github.com/decentraland/sdk7-goerli-plaza

<title>GitHub - decentraland/sdk7-goerli-plaza</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk7-goerli-plaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>43</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>199</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Goerli Plaza</h1>

<h1>Adding a new scene</h1>

<p>Check the parcel usage running</p>

<code>node scripts/checkParcelsCollision.js</code>

<p>. The plaza is a rect from 72,-9 to 81,10.</p>

<p>Visit the collection of all the scenes in this repo deployed at</p>

<h2>Before commit</h2>

<p>You will need to make sure the workspace is in good shape for the CI. TO do so, run:</p>

<code>npm run update-parcels && npm run sync && npm run test && npm run format</code>

<li>Then commit</li>

<p>This project uses NPM workspaces, that means all scenes must have their own package.json with an unique name</p>

<h2>Testing pull requests</h2>

<p>Each pull request generates a permanent new realm in</p>

<code>offline:offline</code>

<p>mode. The instructions to enter the realm are posted as a PR comment after passes. The realm is stored in a static CDN, and its name takes the commit hash of the repository. Making realms easy to access even if the PR was merged.</p>

<p>To keep consistent code styles, there is an automated CI step. If the build fails, please make sure to run</p>

<code>npm run format</code>

<p>and commit the changes.</p>

<h2>Testing main branch</h2>

<p>In a Decentraland explorer execute:</p>

<code>/changerealm https://sdk-team-cdn.decentraland.org/ipfs/goerli-plaza-main</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>15</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/deployments-to-sqs

# URL: https://github.com/decentraland/deployments-to-sqs

<title>GitHub - decentraland/deployments-to-sqs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/deployments-to-sqs</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>28</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Deployments to SQS</h1>

<p>This service continuously monitor for deployments that have been made on any Foundation Catalyst.</p>

<p>The service checks for new deployments by sending GET requests to the specified API endpoint</p>

<p>. This continuous monitoring ensures prompt identification of any deployment changes.</p>

<p>When a new deployment delta is detected, the service publishes its data to the configured Amazon SNS topic (</p>

<code>deployments-sns-${env}</code>

<p>). Therefore, any stakeholder that need to react over these deployments can subscribe to this topic and start receiving notifications about new deployments.</p>

<h2>Deployments being informed by this service</h2>

<p>As of the time of writing, this service identifies and reports deployments of:</p>

<li>Wearables</li>

<li>Emotes</li>

<li>Scenes</li>

<p>Deployments of entities not listed here, such as profiles, are excluded. These other entities are ignored because, as of the time of writing, there is no need to react to their deployments.</p>

<h2>Foundation Catalysts</h2>

<p>As of the time of writing, the following nodes are the ones being fetched to check for any new deployments:</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/builder

# URL: https://github.com/decentraland/builder

<title>GitHub - decentraland/builder: ð Build scenes for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Build scenes for Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/builder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>49</strong>

<strong>251</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,625</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Builder</h1>

<p>You can create beautiful scenes for</p>

<p>even if you don't own a parcel.</p>

<h1>How to run</h1>

<p>The builder is a SPA or single page application built with</p>

<p>. It uses an</p>

<code>.env</code>

<p>file as configuration for a few things, you'll need to create that first.</p>

<p>After that, to run this app you have two options:</p>

<strong>Development Server</strong>

<li>: run</li>

<code>npm start</code>

<li>from the</li>

<code>root</code>

<li>path</li>

<strong>Production</strong>

<li>: run</li>

<code>npm run build</code>

<li>and host the resulting index.html file with your server of choice, for example</li>

<code>python -m SimpleHTTPServer 5000</code>

<p>For more information, check the</p>

<p>repo.</p>

<h2>Environment</h2>

<p>This project depends on a few environment variables to work, as well as external services for some features.

The front-end connects to these services via URLs set via environment variables.</p>

<strong>Creating an environment file</strong>

<p>You'll need Create an</p>

<code>.env</code>

<p>file on the</p>

<code>root</code>

<p>folder and fill it following the</p>

<code>.env.example</code>

<p>file found there.</p>

<p>You will need to specify</p>

<code>NODE_PATH</code>

<p>to be</p>

<code>src</code>

<p>.</p>

<p>Here are the basic requirements to run the project:</p>

<code># .env

NODE_PATH=src</code>

<h2>About</h2>

<p>ð Build scenes for Decentraland</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>146</strong>

<h3>Watchers</h3>

<strong>26</strong>

<h3>Forks</h3>

<strong>79</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-builder-

# Change to URL: https://github.com/decentraland/avatar-assets

# URL: https://github.com/decentraland/avatar-assets

<title>GitHub - decentraland/avatar-assets: ð Collection of 3D models for Decentraland avatars</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Collection of 3D models for Decentraland avatars</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/avatar-assets</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>890</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>ð Collection of 3D models for Decentraland avatars</p>

<h3>License</h3>

<h3>Stars</h3>

<strong>88</strong>

<h3>Watchers</h3>

<strong>27</strong>

<h3>Forks</h3>

<strong>85</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/documentation

# URL: https://github.com/decentraland/documentation

<title>GitHub - decentraland/documentation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/documentation</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>46</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>376</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Docs web</h1>

<h1>Set up local environment</h1>

<li>Clone this repository (including the submodules)</li>

<code>git clone --recurse-submodules https://github.com/decentraland/documentation.git</code>

<li>Run</li>

<code>hugo serve</code>

<li>to preview changes locally and follow the instructions in the terminal to open a browser</li>

<h1>Links syntax</h1>

<code>[Link to page]({{< ref "/content/subsection/page.md" >}})</code>

<p>More info:</p>

<pre>To publish</pre>

<pre>publish</pre>

<pre>({{< ref "/content/creator/scenes/publishing/publishing.md" >}}) your scene bla bla bla</pre>

<h3>Debugging pages values</h3>

<p>To debug the current context of Hugo (the site renderer) you may use this snippet</p>

<p>{{- printf "%#v" . -}}</p>

<p>or</p>

<p>{{- printf "%#v" $ -}}</p>

<h3>Multi platform tabs</h3>

<p>Tabs should be used to list content for different platforms as seen in</p>

<pre>{{< tabs "open-terminal" >}}

{{< tab "Windows" >}} Right click on the Start button, then search for "</pre>

<pre>cmd</pre>

<pre>" and select the "Command Prompt". {{< /tab >}}

{{< tab "MacOS" >}} Open the Launchpad (Cmd+space) and look for "</pre>

<pre>Terminal</pre>

<pre>" {{< /tab >}}

{{< tab "Linux" >}} You already know how to do it {{< /tab >}}

{{< /tabs >}}</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>69</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=2

# URL: https://github.com/orgs/decentraland/repositories?page=2

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>ð¢ Governance platform of the Decentraland DAO</p>

<p>ðï¸ Decentraland's NFT Marketplace</p>

<p>Toolchain to build JS & TS scenes for Decentraland</p>

<p>ð  Common modules for dApps</p>

<p>Connect your Ethereum wallet from different providers</p>

<p>Unity implementation of Decentraland Client</p>

<p>Architecture Decisions Records</p>

<p>Profile dApp</p>

<p>ð Transfer and bridge MANA across networks</p>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<p>ð Ethereum connector for Decentraland scenes and applications</p>

<p>A package to manage configurations for different environment in frontends</p>

<p>Common schemas for Decentraland</p>

<p>Builder app backend</p>

<p>Public ops command line to interact with Decentraland nodes</p>

<p>Templates for the Builder</p>

<p>Collection of command line tools to do massive Airdrops of Decentraland Wearables on Matic</p>

<p>Tap for importing OpenSea events</p>

<p>Decentraland ESlint config</p>

<p>SDK 7 Utils Library</p>

<p>Quests Client for SDK7</p>

<p>VSCode extension for Decentraland SDK7 projects</p>

<em>2</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/governance

# URL: https://github.com/decentraland/governance

<title>GitHub - decentraland/governance: ð¢ Governance platform of the Decentraland DAO</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¢ Governance platform of the Decentraland DAO</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/governance</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>118</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,216</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland DAO Governance dApp</h1>

<p>The governance hub for the Decentraland ecosystem. Create and vote on proposals that help shape the future of the metaverse via the Decentraland DAO (Decentralized Autonomous Organization).</p>

<h1>Setup</h1>

<p>Before you start make sure you have installed:</p>

<h3>Node version</h3>

<p>use node >=</p>

<code>16</code>

<p>If you are starting from scratch and you don't have Node installed in your computer, we recommend using a Node version manager like</p>

<p>to install Node.js and npm instead of the Node installer.</p>

<code>nvm install v16.14.2</code>

<p>will install node version 16 and the corresponding npm version.</p>

<strong>NOTE</strong>

<p>If you are using WSL (Windows Subsystem for Linux) as your development environment, clone the repository into the WSL filesystem. If you clone it inside the Windows filesystem, the project will not work.</p>

<p>Run</p>

<code>npm install</code>

<p>to install all the dependencies needed to run the project.</p>

<h2>Environment setup</h2>

<p>Create a copy of</p>

<code>.env.example</code>

<p>and name it as</p>

<code>.env.development</code>

<pre>cp .env.example .env.development</pre>

<p>to know more about this file see</p>

<p>If you are running this project locally you only need to check the following environment variables:</p>

<code>CONNECTION_STRING</code>

<li>: make sure it points to a valid database (see how to create one in the 'Database Setup' section)</li>

<code>COMMITTEE_ADDRESSES</code>

<li>: list of eth addresses separated by</li>

<code>,</code>

<li>that will be able to enact finished proposals</li>

<code>DISCOURSE_API_KEY</code>

<li>: the api key use to publish the proposals on the forum</li>

<code>RPC_PROVIDER_URL</code>

<li>: the rpc provider to get the latest block</li>

<li>Snapshot env vars: see snapshot setup</li>

<p>These environment variables are used by the application backend. The environment variables for the frontend are located in</p>

<code>src/config/env</code>

<p>.</p>

<h3>Setup the required voting power to pass</h3>

<p>The minimum amount of voting power require to pass a proposal of each type it's defined in these variables, if they are not defined or are not numbers</p>

<code>0</code>

<p>will be used instead</p>

<pre>GATSBY_VOTING_POWER_TO_PASS_LINKED_WEARABLES=0

GATSBY_VOTING_POWER_TO_PASS_CATALYST=0

GATSBY_VOTING_POWER_TO_PASS_BAN_NAME=0

GATSBY_VOTING_POWER_TO_PASS_POI=0

GATSBY_VOTING_POWER_TO_PASS_POLL=0</pre>

<h2>Database setup</h2>

<p>Make sure you have Postgres installed and running:</p>

<pre>brew install postgresql@14

brew services start postgresql@14

createdb</pre>

<p>You can create a DB from scratch, or you can use the</p>

<code>import-db.sh</code>

<p>script to create a new DB using the</p>

<code>development.dump</code>

<p>dump.</p>

<h3>Importing DB dump</h3>

<pre>scripts/

bash ./import-db.sh USERNAME [DATABASE_NAME] [DUMP_FILE]</pre>

<p>If no DATABASE_NAME and DUMP_FILE arguments are given, the script will use the default values and create a</p>

<code>governance</code>

<p>db using the</p>

<code>development.dump</code>

<p>dump.

The CONNECTION_STRING should look like this:</p>

<pre>postgres://USERNAME:PASSWORD@localhost:5432/governance</pre>

<p>(the default password should be</p>

<code>postgres</code>

<p>)</p>

<h3>Creating DB from scratch</h3>

<p>To create a DB, run in the terminal</p>

<pre>createdb -U YOUR_USER DATABASE_NAME</pre>

<p>The default postgres user is</p>

<code>postgres</code>

<p>or your username, and the default password is</p>

<code>postgres</code>

<p>.

Use your user and password for the connection string variable, it should look like this:</p>

<pre>postgres://YOUR_USER:YOUR_PASSWORD@localhost:5432/DATABASE_NAME</pre>

<p>Once you have a</p>

<code>CONNECTION_STRING</code>

<p>you can set up your database tables using the following command:</p>

<pre>npm run migrate up</pre>

<h2>Snapshot Setup</h2>

<code>GATSBY_SNAPSHOT_SPACE</code>

<li>: the snapshot space where the proposals will be published</li>

<code>SNAPSHOT_PRIVATE_KEY</code>

<li>,</li>

<code>GATSBY_SNAPSHOT_ADDRESS</code>

<li>: a pair address/key with permissions to publish at that snapshot space</li>

<li>The configured SNAPSHOT_PROPOSAL_TYPE for the project is 'single-choice', which means each voter may select only one choice. See</li>

<h3>Creating a Snapshot space</h3>

<p>You are going to need to register an ENS name in the network you'll create the space in.

For this purpose, you are going to need ETH / Goerli ETH. Use the faucet to get it:</p>

<p>Then follow instructions on</p>

<h4>Strategy</h4>

<p>DCL Governance uses several strategies:</p>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

],</pre>

<pre>:</pre>

<pre>}</pre>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}</pre>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}</pre>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}</pre>

<p>-</p>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>}

]

}</pre>

<p>If you need MANA for testing you can get it by interacting with the contract on etherscan</p>

<p>Connect your wallet and use the</p>

<code>setBalance</code>

<p>method on the</p>

<code>Contract -> Write Contract</code>

<p>section</p>

<code>to (address)</code>

<li>is your address</li>

<code>amount (uint256)</code>

<li>is whatever you want. Take into account that</li>

<code>1000000000000000000 = 1 MANA</code>

<p>Take into account that the voting power distribution response from snapshot returns an array with each voting power.

The order in which each value is returned depends on the order in which strategies are added to the space on the</p>

<h4>Current Strategies Order</h4>

<li>WMANA</li>

<li>LAND</li>

<li>ESTATE</li>

<li>MANA</li>

<li>NAMES</li>

<li>DELEGATED</li>

<li>WEARABLE</li>

<h1>Test</h1>

<p>To run the tests you can do</p>

<pre>npm</pre>

<p>or create a run configuration in your IDE with</p>

<code>jest --no-cache --no-watchman --runInBand</code>

<p>Also, you can try adding the</p>

<code>--verbose</code>

<p>option.</p>

<p>The</p>

<code>--runInBand</code>

<p>parameter runs the tests in a single thread, which is usually faster, but you can try without it

and see what works best for you.</p>

<h1>Run</h1>

<p>Once you setup this project you can start it using the following command</p>

<pre>npm start</pre>

<p>Note 1: this project run over</p>

<code>https</code>

<p>, if it is your first time you might need to run it with</p>

<code>sudo</code>

<p>Note 2: you can disabled</p>

<code>https</code>

<p>removing the</p>

<code>--https</code>

<p>flag in the</p>

<code>develop</code>

<p>script of your</p>

<code>package.json</code>

<p>the app should be running at</p>

<h1>Clear</h1>

<p>To clear cache and update localization and internationalization renders, run</p>

<pre>npm run clean</pre>

<p>or</p>

<pre>rm -r .cache</pre>

<h1>About</h1>

<h3>Project's structure</h3>

<p>You can find a full documentation about the project's structure in the</p>

<code>decentraland-gatsby</code>

<h3>Back and Front ends</h3>

<p>this project runs gatsby as front-end and a nodejs server as back-end both connected through a proxy</p>

<li>locally this proxy is defined in</li>

<code>gatsby-config.js</code>

<code>proxy</code>

<h3>Routes</h3>

<strong>front-end</strong>

<p>routes are defined using</p>

<p>+</p>

<p>, you can find each page in the</p>

<code>src/pages</code>

<p>directory</p>

<strong>back-end</strong>

<p>routes are defined using</p>

<code>express</code>

<p>you can find each route in</p>

<code>src/back/routes</code>

<p>and those are imported at</p>

<code>src/server.ts</code>

<h3>Types and Utils</h3>

<p>Types and Utils contain functions and types that will be accessible to both the backend and the frontend.</p>

<p>Be careful with what goes in here, because when webpack tries to compile everything for the frontend it won't have all the backend dependencies, which could result in an error (e.g.</p>

<code>ERROR #98123 WEBPACK</code>

<p>)</p>

<h3>Proposals statuses</h3>

<li>Proposals are created in pending, and automatically passed to active</li>

<li>After a voting period of 1 week, they are automatically marked as finished, passed, or rejected, depending on the kind of proposal and of the voting results.</li>

<li>If proposal is in finished status, a committee user can pass/reject it, with a comment.</li>

<li>Once passed, a proposal can be enacted by a committee user, with a comment.</li>

<h3>Voting results</h3>

<li>Voting results are calculated in two different ways, for different purposes:</li>

<code>Votes/utils.ts</code>

<li>calculates the results in a user-friendly way, so they can be displayed in the frontend. These results are rounded up for clarity.</li>

<code>Proposal/jobs.ts</code>

<li>has a more exact calculation, and is used to evaluate the real result of the voting</li>

<h2>Copyright & License</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>ð¢ Governance platform of the Decentraland DAO</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Security policy</h3>

<h3>Stars</h3>

<strong>43</strong>

<h3>Watchers</h3>

<strong>10</strong>

<h3>Forks</h3>

<strong>35</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-dao-governance-dapp

# Change to URL: https://github.com/decentraland/marketplace

# URL: https://github.com/decentraland/marketplace

<title>GitHub - decentraland/marketplace: ðï¸ Decentraland's NFT Marketplace</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ðï¸ Decentraland's NFT Marketplace</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/marketplace</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>83</strong>

<strong>193</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,070</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Marketplace</h1>

<p>Decentraland's Marketplace</p>

<h2>Frontend</h2>

<p>The Marketplace is a React static site. Its code can be found under the</p>

<p>directory.</p>

<h2>Backend</h2>

<p>It can be found under</p>

<p>.</p>

<h2>How to contribute</h2>

<p>Contributing to the Marketplace is easy, you just need to go through the following process:</p>

<li>Look for issues in the</li>

<li>or create a new one with the proposed changes. We classify issues with the âEnhancementâ, âBugâ or âGood first issueâ tags. Feel free to check one of those first.</li>

<li>Contact team members via the GitHub issue or use the</li>

<li>. Itâs important to at least check on the issue status before starting.</li>

<li>and sign all commits in your branch.</li>

<li>Read the</li>

<li>and the</li>

<li>to produce code that fits the project standards.</li>

<li>Create a PR with the changes, linking the PR to the created issue. If there are visual changes in the PR, attach images.</li>

<h2>Copyright & License</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<p>.</p>

<h2>About</h2>

<p>ðï¸ Decentraland's NFT Marketplace</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Security policy</h3>

<h3>Stars</h3>

<strong>1.1k</strong>

<h3>Watchers</h3>

<strong>60</strong>

<h3>Forks</h3>

<strong>677</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/js-sdk-toolchain

# URL: https://github.com/decentraland/js-sdk-toolchain

<title>GitHub - decentraland/js-sdk-toolchain: Toolchain to build JS & TS scenes for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Toolchain to build JS & TS scenes for Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/js-sdk-toolchain</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>64</strong>

<strong>97</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>695</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland SDK 7</h1>

<p>Use the Decentraland Software Development Kit v7 to create experiences for the Decentraland ecosystem.</p>

<h2>Create a scene and preview it locally</h2>

<li>Run</li>

<code>npx @dcl/sdk-commands init</code>

<li>on an empty folder.</li>

<li>Preview it with</li>

<code>npm run start</code>

<li>!</li>

<h2>Repository guide</h2>

<p>This repository consists of the following components, packaged for the</p>

<code>nodejs</code>

<p>/</p>

<code>npm</code>

<p>ecosystem (find them under the respective subfolder in</p>

<code>packages</code>

<p>):</p>

<code>@dcl/react-ecs</code>

<li>: a framework to create scenes using the</li>

<li>framework</li>

<code>@dcl/sdk</code>

<li>: contains all the packages that a scene needs to work.</li>

<code>@dcl/ecs</code>

<li>: an engine used to render things on screen</li>

<code>@dcl/sdk-commands</code>

<li>: contains the command line interface</li>

<code>@dcl/inspector</code>

<li>: Editor interface.</li>

<p>And some internal or maybe useful packages if you're digging deeper into how the Decentraland runtime works:</p>

<code>@dcl/js-runtime</code>

<li>: the</li>

<code>js-runtime</code>

<li>contains the typings for the environment variables available in the sandboxed execution environment for scenes</li>

<code>@dcl/playground-assets</code>

<li>: contains the files needed by the playground.</li>

<h3>Versioning notes</h3>

<p>When</p>

<code>@dcl/sdk</code>

<p>is built, as it depends on new versions of</p>

<code>@dcl/ecs</code>

<p>, these are built first and</p>

<code>@dcl/sdk</code>

<p>includes the new versions.</p>

<h3>ECS 6 dev support</h3>

<p>The ECS 6 lives in the</p>

<code>6.x.x</code>

<p>branch, there will no longer be new features but it's available for fixes or patches.

With a PR to</p>

<code>6.x.x</code>

<p>, you can test the build with the S3 publish, but it'll be necessary to create a release for propagating under</p>

<code>decentraland-ecs@latest</code>

<p>.</p>

<h3>Updating golden files (.crdt)</h3>

<p>We use golden files to create snapshots for a series of test scenes. Most changes to the codebase impose a change in the amount of opcodes executed in the actual scene. We use a QuickJS virtual machine to benchmark how many opcodes are required. Even though this is not representative of the reallity of optimized JIT virual machines, it is a good approximation of the impact that the change would imposes on scene developers.</p>

<p>To re-create these golden files, run</p>

<code>make build update-snapshots</code>

<p>. In some cases, this will generate some discrepancies with the clean environment used by the continuous integration we use (CircleCI). If you run into this issue, please run</p>

<code>make deep-clean-and-snapshot</code>

<p>to invalidate all cached calculations.</p>

<strong>Be careful</strong>

<p>: it will clean all local changes on your git</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the LICENSE file.</p>

<h2>About</h2>

<p>Toolchain to build JS & TS scenes for Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>35</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>16</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-sdk-7

# Change to URL: https://github.com/decentraland/scene-explorer-tests

# URL: https://github.com/decentraland/scene-explorer-tests

<title>GitHub - decentraland/scene-explorer-tests</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/scene-explorer-tests</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>49</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Alternative Explorers - Unit Tests</h1>

<h2>Introduction:</h2>

<p>This tool under construction will be used to test the different components of the SDK7.</p>

<p>The main objective of the tests is to ensure that the different clients under development (Godot and Bevy) work in accordance with the foundation client.

As a consequence we will also collect and report unexpected behaviors that we observe in the foundation client.</p>

<h2>How to clean directory:</h2>

<code>git clean -xdf</code>

<h2>Build and run:</h2>

<h3>For all components:</h3>

<p>In root folder:</p>

<code>npm run build

npm start</code>

<p>note: this way doesn't have hot reload</p>

<h3>For a specific component:</h3>

<code>cd component-test-folder-scene

npm run build

npm start</code>

<p>note: this way does have reload</p>

<h2>To test in Godot Explorer:</h2>

<h3>For all componentes:</h3>

<code>cargo run -- run -- --rendering-driver opengl3 --scene-test "[[52,-52],[52,-54],[52,-56],[52,-58],[52,-60],[52,-62],[52,-64],[52,-66],[52,-68],[54,-52],[54,-54],[54,-56],[54,-58],[54,-60]]" --realm "http://localhost:8000"</code>

<h3>For specific components:</h3>

<code>cargo run -- run -- --rendering-driver opengl3 --scene-test "[[coord.x,coord.y]]" --realm "http://localhost:8000"</code>

<p>where coord.x and coord.y are the scene coordinates</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-alternative-explorers---unit-tests

# Change to URL: https://github.com/decentraland/decentraland-dapps

# URL: https://github.com/decentraland/decentraland-dapps

<title>GitHub - decentraland/decentraland-dapps: ð  Common modules for dApps</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð  Common modules for dApps</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-dapps</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>30</strong>

<strong>384</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>861</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland dApps</h1>

<p>Common modules for our dApps.</p>

<h1>Table of Contents</h1>

<h1>Modules</h1>

<p>Common redux modules for dApps.</p>

<h2>Wallet</h2>

<p>This module takes care of connecting to MetaMask/Ledger, and insert in the state some useful information like address, network, mana and derivationPath.</p>

<h3>Usage</h3>

<p>You can use the following selectors importing them from</p>

<code>decentraland-dapps/dist/modules/wallet/selectors</code>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Also you can hook to the following actions from your reducers/sagas by importing them from</p>

<code>decentraland-dapps/dist/modules/wallet/actions</code>

<p>:</p>

<p>Also you can import types for those actions from that same file:</p>

<p>This is an example of how you can wait for the</p>

<code>CONNECT_WALLET_SUCCESS</code>

<p>action to trigger other actions:</p>

<pre>:</pre>

<h3>Installation</h3>

<p>In order to install this module you will need to add a provider, a reducer and a saga to your dapps.</p>

<strong>Provider</strong>

<p>:</p>

<p>Add the</p>

<code><WalletProvider></code>

<p>as a child of your</p>

<code>redux</code>

<p>provider. If you use</p>

<code>react-router-redux</code>

<p>or</p>

<code>connected-react-router</code>

<p>make sure the</p>

<code><ConnectedRouter></code>

<p>is a child of the</p>

<code><WalletProvider></code>

<p>and not the other way around, like this:</p>

<strong>Reducer</strong>

<p>:</p>

<p>Import the</p>

<code>walletReducer</code>

<p>and add it at the root level of your dApp's reducer as</p>

<code>wallet</code>

<p>, like this:</p>

<pre>wallet</pre>

<strong>Saga</strong>

<p>:</p>

<p>You will need to create a</p>

<code>walletSaga</code>

<p>and add it to your</p>

<code>rootSaga</code>

<p>:</p>

<h3>Advanced Usage</h3>

<p>You'll need to supply in which chain you're going to work. It won't affect wallets like Metamask, where you can choose which network to use on the wallet itself, but's necesary for things like email/phone based wallets.

If you're using the</p>

<p>container, this chain will determine in which chain the user</p>

<strong>must be</strong>

<p>. If they're on the incorrect chain (using a network picker with Metamask for example), a modal will pop up blocking the dapp until the state changes.</p>

<p>Remember that the chain id is the number that represents a particular network, 1 being</p>

<code>mainnet</code>

<p>, 3 being</p>

<code>ropsten</code>

<p>, etc.</p>

<summary>Learn More</summary>

<p>Instead of importing</p>

<code>walletSaga</code>

<p>, use</p>

<code>createWalletSaga</code>

<p>:</p>

<strong>Saga</strong>

<p>:</p>

<pre>:</pre>

<strong>Actions</strong>

<p>:</p>

<p>If you want to hook a callback to connect the wallet, there're two things to keep in mind. The process of connecting a wallet consists in two steps, first</p>

<code>enabling</code>

<p>it and then properly connecting it. The set of actions to keep in mind are the following (all from</p>

<code>decentraland-dapps/dist/modules/wallet/actions</code>

<p>):</p>

<p>With it's corresponding actions and types from the same file:</p>

<p>The wallet saga will listen for</p>

<code>ENABLE_WALLET_SUCCESS</code>

<p>and automatically call</p>

<code>CONNECT_WALLET_REQUEST</code>

<p>. If you use</p>

<code>connect wallet</code>

<p>without enabling first it will only work if you enabled first and it'll stop working once the user disconnects the wallet from the site (if she ever does).</p>

<p>All of this is handled by</p>

<p>behind the scenes, so you can just use that instead. Remember to add</p>

<p>.</p>

<h2>Storage</h2>

<p>The storage module allows you to save parts of the redux store in localStorage to make them persistent and migrate it from different versions without loosing it.

This module is required to use other modules like</p>

<code>Transaction</code>

<p>,</p>

<code>Translation</code>

<p>and</p>

<code>Wallet</code>

<p>.</p>

<h3>Installation</h3>

<p>You need to add a middleware and two reducers to your dApp.</p>

<strong>Middleware</strong>

<p>:</p>

<p>You will need to create a</p>

<code>storageMiddleware</code>

<p>and add apply it along with your other middlewares:</p>

<pre>storageMiddleware</pre>

<pre>loadStorageMiddleware</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Migrations</strong>

<p>:</p>

<code>migrations</code>

<p>looks like</p>

<code>migrations.ts</code>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<p>Where every</p>

<code>key</code>

<p>represent a migration and every</p>

<code>method</code>

<p>should return the new localstorage data:</p>

<p>You don't need to care about updating the version of the migration because it will be set automatically.</p>

<strong>Reducer</strong>

<p>:</p>

<p>You will need to add</p>

<code>storageReducer</code>

<p>as</p>

<code>storage</code>

<p>to your</p>

<code>rootReducer</code>

<p>and then wrap the whole reducer with</p>

<code>storageReducerWrapper</code>

<pre>storage</pre>

<h3>Advanced Usage</h3>

<p>This module is necessary to use other modules like</p>

<code>Transaction</code>

<p>,</p>

<code>Translation</code>

<p>and</p>

<code>Wallet</code>

<p>, but you can also use it to make other parts of your dApp's state persistent</p>

<summary>Learn More</summary>

<p>The first parameter of</p>

<code>createStorageMiddleware</code>

<p>is the key used to store the state data in localStorage (required).</p>

<p>The second parameter is an array of paths from the state that you want to be stored, ie:</p>

<p>That will make</p>

<code>state.invites</code>

<p>and</p>

<code>state.user.name</code>

<p>persistent. This parameter is optional and you don't have to configure it to use the</p>

<code>Transaction</code>

<p>and/or</p>

<code>Translation</code>

<p>modules.</p>

<p>The third parameter is an array of action types that will trigger a SAVE of the state in localStorage, ie:</p>

<p>This parameter is optional and is and you don't have to configure it to use the</p>

<code>Transaction</code>

<p>and/or</p>

<code>Translation</code>

<p>modules.</p>

<h2>Transaction</h2>

<p>The transaction module allows you to watch for pending transactions and keep track of the transaction history.</p>

<h3>Dependencies</h3>

<p>This module requires you to install the</p>

<p>module in order to work.</p>

<h3>Usage</h3>

<p>When you have an action that creates a transaction and you want to watch it, you can do with</p>

<code>buildTransactionPayload</code>

<p>:</p>

<pre>:</pre>

<pre>address</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>address</pre>

<pre>address</pre>

<pre>:</pre>

<pre>:</pre>

<pre>address</pre>

<pre>errorMessage</pre>

<p>Or</p>

<code>buildTransactionWithReceiptPayload</code>

<p>if you need the tx event logs</p>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>address</pre>

<pre>address</pre>

<p>It will save the event logs inside</p>

<code>{ receipt: { logs: [] } }</code>

<p>after the tx was confirmed</p>

<p>Then you can use the selectors</p>

<code>getPendingTransactions</code>

<p>and</p>

<code>getTransactionHistory</code>

<p>from</p>

<code>decentraland-dapps/dist/modules/transaction/selectors</code>

<p>to get the list of pending transactions and the transaction history.</p>

<h3>Installation</h3>

<p>You need to add a middleware, a reducer and a saga to use this module.</p>

<strong>Middleware</strong>

<p>:</p>

<p>Create the</p>

<code>transactionMiddleware</code>

<p>and apply it</p>

<strong>Reducer</strong>

<p>:</p>

<p>Add</p>

<code>transactionReducer</code>

<p>as</p>

<code>transaction</code>

<p>to your</p>

<code>rootReducer</code>

<pre>transaction</pre>

<strong>Saga</strong>

<p>:</p>

<p>Add</p>

<code>transactionSaga</code>

<p>to your</p>

<code>rootSaga</code>

<h3>Advanced Usage</h3>

<p>You can make your reducers listen to confirmed transactions and update your state accordingly</p>

<summary>Learn More</summary>

<p>Taking the example of the</p>

<code>SEND_INVITE_SUCCESS</code>

<p>action type shown in the</p>

<code>Usage</code>

<p>section above, let's say we want to decrement the amount of available invites after the transaction is mined, we can do so by adding the</p>

<code>FETCH_TRANSACTION_SUCCESS</code>

<p>action type in our reducer:</p>

<pre>// modules/invite/reducer

import { AnyAction } from 'redux'

import { loadingReducer } from 'decentraland-dapps/dist/modules/loading/reducer'

import {

FETCH_INVITES_REQUEST,

FETCH_INVITES_SUCCESS,

FETCH_INVITES_FAILURE,

FetchInvitesSuccessAction,

FetchInvitesFailureAction,

FetchInvitesRequestAction,</pre>

<pre>} from './actions'</pre>

<pre>export type InviteState = {

loading: AnyAction[]

data: {

[address: string]: number

}

error: null | string

}

export type InviteReducerAction =

| FetchInvitesRequestAction

| FetchInvitesSuccessAction

| FetchInvitesFailureAction</pre>

<pre>export const INITIAL_STATE: InviteState = {

loading: [],

data: {},

error: null

}

export function invitesReducer(

state: InviteState = INITIAL_STATE,

action: InviteReducerAction

): InviteState {

switch (action.type) {

case FETCH_INVITES_REQUEST: {

return {

...state,

loading: loadingReducer(state.loading, action)

}

}

case FETCH_INVITES_SUCCESS: {

return {

loading: loadingReducer(state.loading, action),

data: {

...state.data,

[action.payload.address]: action.payload.amount

},

error: null

}

}

case FETCH_INVITES_FAILURE: {

return {

...state,

loading: loadingReducer(state.loading, action),

error: action.payload.errorMessage

}

}</pre>

<pre>default: {

return state

}

}

}</pre>

<h2>Authorization</h2>

<p>This module allows you to grant/revoke approvals to a token. It works for both allowance and approval for all.</p>

<h3>Dependencies</h3>

<p>This module depends on the</p>

<p>and the</p>

<p>module</p>

<h3>Usage</h3>

<p>After</p>

<p>the module, you'll need to initialize the authorizations you want to query using the following action:</p>

<pre>:</pre>

<p>That action will query the blockchain for each authorization and update the state so you can check it later. You can hook to:</p>

<p>Once you have this hooked up, you can either grant or revoke a token by using:</p>

<pre>:</pre>

<pre>:</pre>

<p>You can hook to the following actions:</p>

<p>Keep in mind that each of these actions send a transaction, so if you wan't to check if they're done, check the action type of the</p>

<code>FETCH_TRANSACTION_SUCCESS</code>

<p>action. More info on the</p>

<p>module</p>

<h3>Installation</h3>

<strong>Reducer</strong>

<p>Add the</p>

<code>authorizationReducer</code>

<p>as</p>

<code>authorization</code>

<p>to your</p>

<code>rootReducer</code>

<p>:</p>

<pre>authorization</pre>

<strong>Sagas</strong>

<p>Add the</p>

<code>authorizationSaga</code>

<p>to the</p>

<code>rootSaga</code>

<p>:</p>

<h2>Translation</h2>

<p>This module allows you to do i18n.</p>

<h3>Dependencies</h3>

<p>This module has an optional dependency on</p>

<p>module to cache translations and boot the application faster. To learn more read the</p>

<code>Advanced Usage</code>

<p>section of this module.</p>

<h3>Usage</h3>

<p>Using the helper</p>

<code>t()</code>

<p>you can add translations to your dApp</p>

<p>Then you just have to provide locale files like this:</p>

<em>en.json</em>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<em>es.json</em>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<p>Yon can dispatch the</p>

<code>changeLocale(locale: string)</code>

<p>action from</p>

<code>decentraland-dapps/dist/modules/translation/actions</code>

<p>to change the language</p>

<h3>Installation</h3>

<p>You will need to add a provider, a reducer and a saga to use this module</p>

<strong>Provider</strong>

<p>:</p>

<p>Add the</p>

<code><TranslationProvider></code>

<p>as a child of your</p>

<code>redux</code>

<p>provider, passing the</p>

<code>locales</code>

<p>that you want to support. If you use</p>

<code>react-router-redux</code>

<p>or</p>

<code>connected-react-router</code>

<p>make sure the</p>

<code><ConnectedRouter></code>

<p>is a child of the</p>

<code><TranslationProvider></code>

<p>and not the other way around, like this:</p>

<strong>Reducer</strong>

<p>:</p>

<p>Add the</p>

<code>translationReducer</code>

<p>as</p>

<code>translation</code>

<p>to your</p>

<code>rootReducer</code>

<p>:</p>

<pre>translation</pre>

<strong>Saga</strong>

<p>:</p>

<p>Create a</p>

<code>translationSaga</code>

<p>and add it to your</p>

<code>rootSaga</code>

<p>. You need to provide an object containing all the translations, or a function that takes the</p>

<code>locale</code>

<p>and returns a</p>

<code>Promise</code>

<p>of the translations for that locale (you can use that to fetch the translations from a server instead of bundling them in the app). Here are examples for the two options:</p>

<li>Bundling the translations in the dApp:</li>

<em>en.json</em>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<em>es.json</em>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<em>translations.ts</em>

<em>sagas.ts</em>

<pre>translations</pre>

<li>Fetching translations from server</li>

<em>sagas.ts</em>

<pre>:</pre>

<p>Read the</p>

<code>Advanced Usage</code>

<p>section below to learn how to cache translations and make your application boot faster.</p>

<h3>Advanced Usage</h3>

<p>You can use the</p>

<p>module to cache translations (read</p>

<code>2. Fetching translations from server</code>

<p>above).</p>

<summary>Learn More</summary>

<p>After</p>

<p>you can persist the translations by adding</p>

<code>'translation'</code>

<p>to your storage middleware paths:</p>

<pre>storageMiddleware</pre>

<pre>loadStorageMiddleware</pre>

<pre>:</pre>

<pre>:</pre>

<p>This will store the translation module in</p>

<code>localStorage</code>

<p>, so next time your application is started it will boot with all the translations populated before even fetching them from the server.</p>

<h2>Analytics</h2>

<p>The analytics module let's integrate Segment into your dApp.</p>

<p>You need to have the</p>

<code>Wallet</code>

<p>module installed in order to send</p>

<code>identify</code>

<p>events.</p>

<p>This module will import the segment snippet into your dApp. Be aware that the middleware must be loaded before using segment methods.</p>

<p>To send</p>

<code>track</code>

<p>events, add an</p>

<code>analytics.ts</code>

<p>file and require it from your entry point, and use the</p>

<code>add()</code>

<p>helper to add actions that you want to track:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The first parameter is the action type that you want to track (required).</p>

<p>The second parameter is the event name for that action (it will show up with that name in Segment). If none provided the action type will be used as the event name.</p>

<p>The third parameter is a function that takes the action and returns the data that you want to associate with that event (it will be sent to Segment). If none is provided the whole action will be sent.</p>

<h3>Installation</h3>

<p>You need to apply a middleware and a saga to use this module</p>

<strong>Middleware</strong>

<p>:</p>

<strong>Saga</strong>

<p>:</p>

<p>This uses by default the</p>

<code>'@@router/LOCATION_CHANGE'</code>

<p>action type to track page changes. If you need to use a different action type, you can do the following:</p>

<pre>:</pre>

<h3>Advanced Usage</h3>

<p>You can use the same redux action type to generate different Segment events if you pass a function as the second parameter instead of a string:</p>

<pre>?</pre>

<pre>:</pre>

<h2>Loading</h2>

<p>The loading module is used to keep track of async actions in the state.</p>

<h3>Usage</h3>

<p>You can use the selectors</p>

<code>isLoading(state)</code>

<p>and</p>

<code>isLoadingType(state, ACTION_TYPE)</code>

<p>from</p>

<code>decentraland-dapps/dist/modules/loading/selectors</code>

<p>to know if a domain has pending actions or if a specific action is still pending</p>

<p>In order to use these selectors you need to use the</p>

<code>loadingReducer</code>

<p>within your domain reducers, here is an example:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Now we can for example use the selector</p>

<code>isLoadingType(state.invite.loading, FETCH_INVITES_REQUEST)</code>

<p>to know if that particular action is still pending, or</p>

<code>isLoading(states.invite)</code>

<p>to know if there's any pending action for that domain.</p>

<p>Also, all the pending actions are stored in an array in</p>

<code>state.invite.loading</code>

<p>so we can use that information in the UI if needed (i.e. disable a button)</p>

<h2>Modal</h2>

<p>Leverages redux state and provides actions to open and close each modal by name. It provides a few simple actions:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>It also provides a selector to get the open modals:</p>

<code>getOpenModals(state): ModalState</code>

<h3>Installation</h3>

<p>In order to use this module you need to add a reducer and a provider.</p>

<strong>Provider</strong>

<p>:</p>

<p>Add the</p>

<code><ModalProvider></code>

<p>as a parent of your routes. It takes an object of</p>

<code>{ {modalName: string]: React.Component }</code>

<p>as a prop (</p>

<code>components</code>

<p>). It'll use it to render the appropiate modal when you call</p>

<code>openModal(name: string)</code>

<p>where</p>

<code>modals</code>

<p>could look like this:</p>

<p>Each modal will receive the properties defined on the</p>

<code>ModalComponent</code>

<p>type, found on</p>

<code>modules/modal/types</code>

<p>, so for example:</p>

<pre>name</pre>

<pre>metadata</pre>

<pre>onClose</pre>

<p>If want to use</p>

<p>but you don't want to repeat the</p>

<code>open</code>

<p>,</p>

<code>className</code>

<p>and</p>

<code>onClose</code>

<p>props, you can use this module's</p>

<strong>Reducer</strong>

<p>:</p>

<p>Add the</p>

<code>modalReducer</code>

<p>as</p>

<code>modal</code>

<p>to your</p>

<code>rootReducer</code>

<p>:</p>

<pre>modal</pre>

<h3>Advanced Usage</h3>

<p>You can have add more strict typing to the actions:</p>

<summary>Learn More</summary>

<p>The modal actions allow for a generic type for the name. So say you want to type the name of your available modals, you can create a `modal` module in your dApp and add the following files:</p>

<strong>Types</strong>

<p>:</p>

<strong>Actions</strong>

<p>:</p>

<pre>openModal</pre>

<pre>closeModal</pre>

<pre>toggleModal</pre>

<h2>Toasts</h2>

<p>Leverages redux state and provides actions to show and hide toasts. It provides a few simple actions:</p>

<pre>:</pre>

<pre>:</pre>

<p>You can check the properties a toast has</p>

<p>. It extends the props already defined on</p>

<p>It also provides a selector to get the open toasts:</p>

<code>getToasts(state): Toast[]</code>

<h3>Installation</h3>

<p>In order to use this module you need to add a reducer, a provider and a saga.</p>

<strong>Provider</strong>

<p>:</p>

<p>Add the</p>

<code><ToastProvider></code>

<p>as a parent of your routes. It takes an optional</p>

<code>position</code>

<p>param to set where you want the toasts to appear. It'll default to</p>

<code>top left</code>

<strong>Reducer</strong>

<p>:</p>

<p>Add the</p>

<code>toastReducer</code>

<p>as</p>

<code>toast</code>

<p>to your</p>

<code>rootReducer</code>

<p>:</p>

<pre>toast</pre>

<strong>Saga</strong>

<p>:</p>

<p>You will need to create a</p>

<code>toastSaga</code>

<p>and add it to your</p>

<code>rootSaga</code>

<p>:</p>

<p>Toasts themselves do not do any async action, but this is needed to render each toast properly, without overloading the redux state with unnecesary information.</p>

<h2>Profile</h2>

<p>Leverages the redux state and provides actions and selectors to work with profiles.</p>

<h3>Actions</h3>

<p>The module exposes the following actions:</p>

<p>The</p>

<code>loadProfileRequest</code>

<p>action will trigger a profile fetch through the profile sagas that will result, if successful, in the profile metadata being loaded. The success and failure actions of the request action are also included and will be used to signal a successful or a failing request.</p>

<p>The</p>

<code>setProfileAvatarDescriptionRequest</code>

<p>action will trigger a change in the first avatar of the user's profile, that will result in a new entity being deployed for that profile, with the description of the avatar changed for the one specified in the action. The success and failure actions of the request action are also included and will be used to signal a successful or a failing request.</p>

<p>The</p>

<code>clearProfileError</code>

<p>action will clear any profile request errors from the store.</p>

<h3>Installation</h3>

<p>To install the profile module, just import it and add it to the store by combining the existing reducers with the one provided in the profile module.</p>

<pre>:</pre>

<pre>profile</pre>

<pre>otherReducer</pre>

<h1>Lib</h1>

<p>Common libraries for dApps</p>

<h2>API</h2>

<p>The</p>

<code>BaseAPI</code>

<p>class can be extended to make requests and it handles the unwrapping of responses by</p>

<code>decentraland-server</code>

<h3>Usage</h3>

<h2>ETH</h2>

<p>Ethereum helpers</p>

<h3>Pristine Provider</h3>

<p>Get user's connected provider without being wrapped by any library</p>

<h3>Eth instance</h3>

<p>Get an Eth instance with your lib of choice</p>

<h3>Helpers</h3>

<code>isCucumberProvider</code>

<li>: Check if the provider is a</li>

<code>cucumberProvider</code>

<li>.</li>

<code>isCoinbaseProvider</code>

<li>: Check if the provider is a</li>

<code>coinbaseProvider</code>

<li>.</li>

<code>isDapperProvider</code>

<li>: Check if the provider is a</li>

<em>dapper's</em>

<li>provider.</li>

<code>isValidChainId</code>

<li>: Check if the chain id is valid.</li>

<h2>Entities</h2>

<p>The entities library provides a set of methods to retrieve or deploy entities.</p>

<h3>Usage</h3>

<p>The</p>

<code>deployEntity</code>

<p>method does everything needed to deploy an entity that doesn't have new files. It pre-procceses the entity to prepare it for the deployment, it creates the auth chain and asks the user to sign the deployment of the entity and then deploys it.</p>

<pre>...</pre>

<p>The</p>

<code>getProfileEntity</code>

<p>gets the first profile of all the profiles an address has.</p>

<h1>Containers</h1>

<p>Common containers for dApps</p>

<h2>Navbar</h2>

<p>The</p>

<code><Navbar></code>

<p>container can be used in the same way as the</p>

<code><Navbar></code>

<p>component from</p>

<p>but it's already connected to the redux store. You can override any</p>

<code>NavbarProp</code>

<p>if you want to connect differently, and you can pass all the regular</p>

<code>NavbarProps</code>

<p>to it.</p>

<h3>Dependencies</h3>

<p>This container requires you to install the</p>

<p>. It also has support for i18n out of the box if you include the</p>

<p>module.</p>

<h3>Usage</h3>

<p>This is an example of a</p>

<code>SomePage</code>

<p>component that uses the</p>

<code><Navbar></code>

<p>container:</p>

<pre>:</pre>

<pre>children</pre>

<p>This</p>

<code><Navbar></code>

<p>will show the user's blockie and mana balance because it is connected to the store.</p>

<h3>i18n</h3>

<p>If you are using the</p>

<p>module, the</p>

<code>Navbar</code>

<p>contatiner comes with support for the 6 languages supported by the library.</p>

<h3>Advanced Usage</h3>

<p>You can override any of the default translations for any locale if you need to</p>

<summary>Learn More</summary>

<p>Say you want to override some translations in English, just include any or all of the following translations in your</p>

<code>en.json</code>

<p>locale file:</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: {</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

}

}</pre>

<h2>Footer</h2>

<p>The</p>

<code><Footer></code>

<p>container can be used in the same way as the</p>

<code><Footer></code>

<p>component from</p>

<p>but it's already connected to the redux store. You can override any</p>

<code>FooterProps</code>

<p>if you want to connect differently, and you can pass all the regular</p>

<code>FooterProps</code>

<p>to it.</p>

<h3>Dependencies</h3>

<p>The</p>

<code><Footer></code>

<p>container has support for i18n out of the box if you include the</p>

<p>module.</p>

<h3>Usage</h3>

<p>This is an example of a</p>

<code>SomePage</code>

<p>component that uses the</p>

<code><Footer></code>

<p>container:</p>

<pre>children</pre>

<p>This</p>

<code><Footer></code>

<p>will show only English and Spanish as the options in the language dropdown. If you don't provide any it will use only English.</p>

<h3>i18n</h3>

<p>If you are using the</p>

<p>module, the</p>

<code>Footer</code>

<p>contatiner comes with support for the 6 languages supported by the library.</p>

<h3>Advanced Usage</h3>

<p>You can override any of the default translations for any locale if you need to</p>

<summary>Learn More</summary>

<p>Say you want to override some translations in English, just include any or all of the following translations in your</p>

<code>en.json</code>

<p>locale file:</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: {</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

}

}</pre>

<h2>SignInPage</h2>

<p>The</p>

<code><SignInPage></code>

<p>container can be used in the same way as the</p>

<code><SignIn></code>

<p>component from</p>

<p>but it's already connected to the redux store. You can override any</p>

<code>SignInProp</code>

<p>if you want to connect differently, and you can pass all the regular</p>

<code>SignInProps</code>

<p>to it.</p>

<h3>Dependencies</h3>

<p>This container requires you to install the</p>

<p>. It also has support for i18n out of the box if you include the</p>

<p>module.</p>

<h3>Usage</h3>

<p>You can import the</p>

<code><SignInPage></code>

<p>container and use it on your routes:</p>

<pre>...</pre>

<h3>i18n</h3>

<p>If you are using the</p>

<p>module, the</p>

<code>SignInPage</code>

<p>contatiner comes with support for the 6 languages supported by the library.</p>

<h3>Advanced Usage</h3>

<p>You can override any of the default translations for any locale if you need to</p>

<summary>Learn More</summary>

<p>Say you want to override some translations in English, just include any or all of the following translations in your</p>

<code>en.json</code>

<p>locale file:</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

}

}</pre>

<h2>Modal</h2>

<p>The</p>

<code><Modal></code>

<p>it's a shorthand for some common features used by modals provided to</p>

<p>.</p>

<h3>Usage</h3>

<pre>name</pre>

<pre>name</pre>

<p>Behind the scenes Modal is setting the following properties:</p>

<pre>true</pre>

<pre>name</pre>

<h2>TransactionLink</h2>

<p>The</p>

<code><TransactionLink></code>

<p>can be used to link a transaction hash to Etherscan.io, and it connects to the redux store to know on which network the user is on.</p>

<h3>Dependencies</h3>

<p>This container requires you to install the</p>

<p>module</p>

<h3>Usage</h3>

<pre>You sent an</pre>

<pre>invite</pre>

<h1>Components</h1>

<p>Common Components for dApps</p>

<h2>Intercom</h2>

<p>The</p>

<code><Intercom></code>

<p>will add an</p>

<p>widget to your app.</p>

<h3>Usage</h3>

<h2>About</h2>

<p>ð  Common modules for dApps</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>107</strong>

<h3>Watchers</h3>

<strong>23</strong>

<h3>Forks</h3>

<strong>58</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-dapps

# Change to URL: https://github.com/decentraland/decentraland-connect

# URL: https://github.com/decentraland/decentraland-connect

<title>GitHub - decentraland/decentraland-connect: Connect your Ethereum wallet from different providers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Connect your Ethereum wallet from different providers</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-connect</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>88</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>170</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Connect</h1>

<p>Connect to the Ethereum network with ease</p>

<h1>Table of contents</h1>

<h1>API</h1>

<p>The API surface is fairly small, you'll mainly be using the exported</p>

<code>connection</code>

<p>object, which is an instance of the also exported</p>

<code>ConnectionManager</code>

<p>using the default</p>

<code>LocalStorage</code>

<p>.</p>

<h2>ConnectionManager</h2>

<p>Handles the connection to the Ethereum network. It takes a</p>

<code>Storage</code>

<p>as the only argument, which will be used to store the last used connection.</p>

<h3>.connect()</h3>

<p>Connects to the supplied provider type and chain. It'll default to</p>

<code>mainnet</code>

<p>if no chain is supplied. After a successfull call the params will be stored using the supplied</p>

<p>, which will allow you to call</p>

<code>tryPreviousConnection()</code>

<p>.</p>

<strong>Definition</strong>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Usage</strong>

<h3>.tryPreviousConnection()</h3>

<p>Will try to connect to the provider and chain stored from the last successfull</p>

<code>.connect()</code>

<p>. It'll throw otherwise.</p>

<strong>Definition</strong>

<pre>:</pre>

<strong>Usage</strong>

<h3>.disconnect()</h3>

<p>Disconnects the previous connection and clears the storage. It'll do nothing if no connection is found.</p>

<strong>Definition</strong>

<strong>Usage</strong>

<h3>.getConnectionData()</h3>

<p>Returns the data used for the last successfull</p>

<p>call. It's used by</p>

<p>to determine which connection to use. Check</p>

<p>for more info on the returned type</p>

<strong>Definition</strong>

<pre>:</pre>

<strong>Usage</strong>

<h3>.getAvialableProviders()</h3>

<p>Returns the providers available for connection. If for example no</p>

<code>window</code>

<p>object is found,</p>

<code>ProviderType.INJECTED</code>

<p>will not be returned on the list</p>

<strong>Definition</strong>

<pre>:</pre>

<strong>Usage</strong>

<h3>.getProvider()</h3>

<p>Get's the currently connected provider. It'll throw if no connection was made, similar to calling</p>

<code>.connect()</code>

<p>without params the first time</p>

<strong>Definition</strong>

<pre>:</pre>

<strong>Usage</strong>

<h3>.createProvider()</h3>

<p>It creates a new provider using the supplied arguments. Similar to calling</p>

<code>.connect()</code>

<p>but without actually connecting.</p>

<strong>Definition</strong>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Usage</strong>

<h2>connection</h2>

<p>Instance of</p>

<code>ConnectionManager</code>

<p>, using</p>

<code>LocalStorage</code>

<p>as it's internal storage engine, which translates to:</p>

<h2>Storage</h2>

<p>Abstract class that defines the methods needed to create a new Storage engine. It only defines two methods:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>: any</pre>

<pre>:</pre>

<pre>:</pre>

<h3>LocalStorage</h3>

<p>An implementation of the Storage engine which uses</p>

<code>window.localStorage</code>

<p>to store data</p>

<h2>Types</h2>

<h3>ProviderType</h3>

<p>Represents the different types of connectors to the Ethereum Network</p>

<h3>ChainId</h3>

<p>Different Ethereum chains</p>

<h3>ConnectionResponse</h3>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>ConnectionData</h3>

<pre>:</pre>

<pre>:</pre>

<h1>Example</h1>

<pre>:</pre>

<pre>:</pre>

<pre>provider</pre>

<h1>Development</h1>

<p>To run the project you simply need to</p>

<pre>npm i

npm run</pre>

<pre>npm run build</pre>

<p>you can also check the test report using</p>

<pre>npm run test:report</pre>

<h1>Copyright</h1>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Connect your Ethereum wallet from different providers</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>12</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-connect

# Change to URL: https://github.com/decentraland/worlds-content-server

# URL: https://github.com/decentraland/worlds-content-server

<title>GitHub - decentraland/worlds-content-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/worlds-content-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>25</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>204</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Worlds Content Server</h1>

<p>This is a simple content server API needed to deploy and retrieve scenes.</p>

<p>It uses the</p>

<code>@dcl/catalyst-storage</code>

<p>library to store the deployments either on the disk or S3.</p>

<h1>Running a Worlds Content Server</h1>

<h2>For development</h2>

<p>For development purposes, just clone this repository, build the project and

run:</p>

<pre>git clone https://github.com/decentraland/worlds-content-server.git

yarn

yarn build

yarn start</pre>

<p>There should be a server running on port 3000.</p>

<h2>For production</h2>

<p>For running a production server, it is recommended to use the docker image

published by this repository. It is important to provide proper values for

LiveKit configuration using</p>

<code>--env</code>

<p>CLI options, as follows:</p>

<pre>docker pull quay.io/decentraland/worlds-content-server

docker run --name wcs -p 3000:3000 --env COMMS_ADAPTER=livekit --env LIVEKIT_HOST=</pre>

<pre>your livekit url</pre>

<pre>--env LIVEKIT_API_KEY=</pre>

<pre>your api key</pre>

<pre>--env LIVEKIT_API_SECRET=</pre>

<pre>your secret</pre>

<pre>quay.io/decentraland/worlds-content-server</pre>

<h1>Deploying entities to this server</h1>

<p>For a deployment to be accepted by this server, the wallet deploying must own a DCL name.</p>

<p>The scene must specify the name of the world in</p>

<code>scene.json</code>

<p>, and that DCL name must be owned by the wallet signing the deployment.</p>

<p>For more details on deploying scenes please check out</p>

<p>.</p>

<h2>Deploying using the CLI tool</h2>

<p>Once your signer address is added to the allow-list, then you should be able to deploy to this server. The recommended approach is by the CLI tool. You must specify the URL of this server as</p>

<code>--content-server</code>

<p>to make it work, like this:</p>

<pre>my-scene</pre>

<pre>DCL_PRIVATE_KEY=0x....

dcl deploy --target-content https://worlds-content-server.decentraland.org</pre>

<p>Upon successful deployment, the latest version of the CLI should print some helpful information about how to preview the scene along with the addressable URN of the deployment.</p>

<h3>Addressable URN</h3>

<p>A deployment in Decentraland can live anywhere as long as it complies with the format. To consistently identify deployments and their location in servers, the concept of addressable URN is introduced.</p>

<p>Let a valid deployment URN be:</p>

<code>urn:decentraland:entity:bafkreihpipyhrt75xyquwrynrtjadwb373xfosy7a5rhlh5vogjajye3im</code>

<p>That deployment will be downloaded from the configured content server by default. But for testing purposes, the content servers are not always the most straight forward way to test. To help the operations, a baseUrl query parameter can be added:</p>

<code>?baseUrl=https://worlds-content-server.decentraland.org/contents/</code>

<p>yielding a full URN like this:</p>

<code>urn:decentraland:entity:bafkreihpipyhrt75xyquwrynrtjadwb373xfosy7a5rhlh5vogjajye3im?=&baseUrl=https://worlds-content-server.decentraland.org/contents/</code>

<p>Now the explorers know where to look for when downloading that entity, bypassing the content servers. Or more precisely, pointing to this server which acts as content server.</p>

<h1>Using Addressable URNs</h1>

<p>As of the moment of writing this document, there are two ways to use the addressable URNs: as global portable experiences and as single scene instead of loading the genesis city.</p>

<p>The first one is used to generate experiences for all users, like the pride event calendar. It can be tested by adding the</p>

<code>GLOBAL_PX=<urn></code>

<p>query parameter to the explorer. Like this</p>

<p>The second use case is to load a singular scene instead of the full genesis city. Likewise, it is done via adding a</p>

<code>SPACE=<urn></code>

<p>query parameter, like this:</p>

<p>Portable experiences and single scenes (spaces) can be used at the same time to generate dynamic experiences.</p>

<p>These flows are designed to improve the user experience in the areas like onboarding experiences, helper calendars for events, and for debugging purposes among others.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-renderer

# URL: https://github.com/decentraland/unity-renderer

<title>GitHub - decentraland/unity-renderer: Unity implementation of Decentraland Client</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Unity implementation of Decentraland Client</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-renderer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>180</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5,082</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Unity Renderer</h1>

<p>This repository contains the reference implementation of the</p>

<p>. It includes two main big components, located in the folders:</p>

<code>unity-renderer</code>

<li>which contains the main 3D experience and UI</li>

<code>browser-interface</code>

<li>to connect to the different aspects requiring of a web browser, such as connection with a wallet and WebRTC communications</li>

<h1>Running the Explorer</h1>

<h2>Main Dependencies</h2>

<p>Install images and binary files using</p>

<code>git lfs</code>

<p>(</p>

<p>). These can be installed from bash or PowerShell by typing:</p>

<p>git lfs install

git lfs pull</p>

<p>The</p>

<p>engine and IDE, currently using version 2021.3.14f1</p>

<p>, version 16 or later</p>

<h3>Steps</h3>

<p>Check:</p>

<li>Download and install Unity 2022.3.6f1</li>

<li>Open the scene named</li>

<code>InitialScene</code>

<li>Within the scene, select the</li>

<code>DebugConfig</code>

<li>GameObject.</li>

<li>On</li>

<code>DebugConfig</code>

<li>inspector, make sure that</li>

<code>Base url mode</code>

<li>is set to</li>

<code>Custom</code>

<li>and</li>

<code>Base url custom</code>

<li>is set to</li>

<code>https://play.decentraland.zone/?</code>

<li>Run the Initial Scene in the Unity editor</li>

<li>A browser tab with</li>

<code>explorer</code>

<li>should open automatically and steal your focus, don't close it! Login with your wallet, go back to Unity and explorer should start running on the</li>

<code>Game View</code>

<li>.</li>

<li>As you can see,</li>

<code>DebugConfig</code>

<li>has other special options like the starting position, etc. You are welcome to use them as you see fit, but you'll have to close the tab and restart the scene for them to make effect.</li>

<h3>Troubleshooting</h3>

<h4>Missing git lfs extension</h4>

<p>If while trying to compile the Unity project you get an error regarding some libraries that can not be added (for instance Newtonsoft

Json.NET or Google Protobuf), please execute the following command in the root folder:</p>

<code>git lfs install

git lfs pull</code>

<p>Then, on the Unity editor, click on</p>

<code>Assets > Reimport All</code>

<h2>Testing your branch using automated builds</h2>

<p>To test against a build made on this repository, you can use a link with this format:</p>

<code>https://play.decentraland.zone/?explorer-branch=<branch-name></code>

<h1>Links for Contributors</h1>

<h1>Advanced debugging scenarios</h1>

<h2>Running the browser-interface</h2>

<p>In order to run browser interface in any platform follow the next instructions</p>

<h3>How to run</h3>

<code>make watch</code>

<li>Open browser-interface with</li>

<code>Visual Studio Code</code>

<li>Make sure you have the</li>

<code>devcontainers</code>

<li>extension installed</li>

<li>Make sure</li>

<li>is running</li>

<code>At Visual Studio Code</code>

<li>press</li>

<code>F1</code>

<li>execute</li>

<code>Reopen in Container</code>

<li>and wait for it to finish.</li>

<li>Go to</li>

<code>Terminal > New Terminal</code>

<li>menu and run</li>

<code>make watch</code>

<li>command.</li>

<h2>How to run browser-interface unit tests</h2>

<li>Follow the previous process to run</li>

<code>make watch</code>

<li>Open</li>

<code>localhost:8080/test</code>

<li>in your browser</li>

<li>Watch the results</li>

<h2>Debug with Unity Editor + local Browser Interface</h2>

<p>Use this approach when working on any features that need both Browser Interface and Unity modifications, and you need to watch Unity code changes fast without the need of injecting a wasm targeted build in the browser.</p>

<p>When the steps are followed, you will be able to test your changes by just pressing the "Play" button within Unity. This will open a tab running the local Browser Interface build and Unity will connect to it using websocket.</p>

<p>This is the most useful debugging scenario for advanced feature implementation.</p>

<h3>Steps</h3>

<li>Make sure you have the proper Unity version up and running</li>

<li>Make sure you are running browser-interface through</li>

<code>make watch</code>

<li>command on</li>

<code>browser-interface</code>

<li>path.</li>

<li>Back in unity editor, open the</li>

<code>DebugConfig</code>

<li>component inspector of</li>

<code>InitialScene</code>

<li>Make sure that the component is setup correctly</li>

<li>Hit 'Play' button</li>

<h2>Debug with browsers + local Unity build</h2>

<p>This approach works when your Unity modifications run well in the wasm targeted unity build, but you don't want to wait for the CI to kick in. This is also useful for remote profiling.</p>

<p>When the steps are followed, you will be able to run the local Unity build by going to</p>

<code>localhost:3000</code>

<p>without the need of CI.</p>

<h3>Steps</h3>

<li>Make sure you have the proper Unity version up and running</li>

<li>Make sure you are running browser-interface through</li>

<code>make watch</code>

<li>command.</li>

<li>Produce a Unity wasm targeted build using the Build menu.</li>

<li>When the build finishes, copy all the files inside the resulting</li>

<code>/build</code>

<li>folder (</li>

<code>unity.loader.js</code>

<li>is not necessary as we use a modified loader) and paste them inside</li>

<code>browser-interface/node_modules/@dcl/unity-renderer</code>

<li>.</li>

<li>Run the browser explorer through</li>

<code>localhost:8080&ENABLE_WEB3</code>

<li>. Now, it should use your local Unity build. Don't mind the white screen at the beginning, that's because the website repo is not being used and it's only loading Browser Interface with the build.</li>

<li>If you need a Unity re-build, you can just replace the files and reload the browser without restarting the</li>

<code>make watch</code>

<li>process.</li>

<p>Alternatively you can go through these 2 steps after step 3 and load the build locally using</p>

<code>localhost:3000</code>

<li>Make sure you have the</li>

<li>cloned.</li>

<li>Make sure you have the local website up and running by executing</li>

<code>npm run start:linked</code>

<li>in the cloned repo directory (</li>

<code>npm i</code>

<li>first just in case).</li>

<li>When the WebGL build finishes, copy all the files inside the resulting</li>

<code>/build</code>

<li>folder (</li>

<code>unity.loader.js</code>

<li>is not necessary as we use a modified loader) and paste them inside</li>

<code>explorer-website/node_modules/@dcl/unity-renderer</code>

<li>.</li>

<li>Access using</li>

<code>localhost:3000</code>

<h3>Troubleshooting</h3>

<h4>MacOS: Missing xcrun</h4>

<p>If you get the "missing xcrun" error when trying to run the</p>

<code>make watch</code>

<p>command, you should download the latest command line tools for macOS, either by downloading them from</p>

<p>or by re-installing XCode</p>

<h4>MacOS: Build fails throwing</h4>

<code>System.ComponentModel.Win32Exception (2): No such file or directory...</code>

<p>If the local WebGL build always fails with the error</p>

<code>System.ComponentModel.Win32Exception (2): No such file or directory...</code>

<p>it's because you are missing Python needed version (MacOS 12.3 onwards removes the previously-integrated python installation). So to solve this issue just install this</p>

<p>.</p>

<h2>Frameworks and Tools</h2>

<h2>Technical how-to guides and explainers</h2>

<li>For more advanced topics, don't forget to check out our</li>

<li>(ADR) repository.</li>

<h2>Setup CircleCI</h2>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in

the</p>

<p>file.</p>

<h2>About</h2>

<p>Unity implementation of Decentraland Client</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>127</strong>

<h3>Watchers</h3>

<strong>13</strong>

<h3>Forks</h3>

<strong>87</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-unity-renderer

# Change to URL: https://github.com/decentraland/explorer-website

# URL: https://github.com/decentraland/explorer-website

<title>GitHub - decentraland/explorer-website: This is the repository for the website served in play.decentraland.org</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This is the repository for the website served in play.decentraland.org</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-website</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>20</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>181</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland explorer-website</h1>

<p>This repository holds the application shell that launches the web version of Decentraland Explorer.</p>

<p>The responsibility of this repository is to generate the React UI to configure the ethereum providers, handle analytics and ultimately load and start the</p>

<p>.</p>

<p>Keep in mind that the interaction with the Wallet the user's using is partly being handled by the</p>

<p>and it's dependencies (like</p>

<p>). This repository is reponsible for creating a provider using</p>

<p>and handing that down to the Explorer.</p>

<h2>Consistent versions</h2>

<p>To enable consistent versioning, this repository embeds</p>

<code>decentraland-ecs</code>

<p>which is used locally by the scene, wearables and other content developers to create and debug Decentraland scenes.</p>

<p>To get a working Decentraland Explorer that is fully compliant with a specific version of the SDK (</p>

<code>decentraland-ecs</code>

<p>) please do install stable versions of the library via</p>

<code>npm install decentraland-ecs@latest</code>

<p>.</p>

<h2>How to test</h2>

<pre>npm ci

npm run start</pre>

<p>You must test that the application works both in</p>

<p>and in</p>

<p>since it provides a CDN-like environment.</p>

<h2>How to test with local Explorer</h2>

<p>The website has the</p>

<p>as a dependency. To be able to run the site locally, you have a few options:</p>

<li>Edit</li>

<code>.env.development</code>

<li>to point the</li>

<code>EXPLORER_PATH</code>

<li>env var to your local explorer folder</li>

<li>Run</li>

<code>npm run postinstall</code>

<li>to update the .env files</li>

<li>Run</li>

<code>npm run start:linked</code>

<p>If the linking is not working you can try one of two things:</p>

<li>Check the path the build is trying to use to find the Explorer by reading the error page. It might look something like</li>

<code>../unity-renderer/browser-interface/static/index.js</code>

<li>Create the directory structure needed, in this case</li>

<code>mkdir ../unity-renderer/browser-interface/static</code>

<li>Get the index.js from the BrowserInterface dependency installed on node_modules:</li>

<code>cp ./node_modules/@dcl/explorer/index.js ../unity-renderer/browser-interface/static</code>

<p>Another choice is to:</p>

<li>Clone the</li>

<li>project</li>

<li>Make sure the folder is located where the linking error is trying to find it, usually</li>

<code>../unity-renderer/browser-interface</code>

<li>Build it locally (check the</li>

<li>)</li>

<h2>About</h2>

<p>This is the repository for the website served in play.decentraland.org</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>18</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-explorer-website

# Change to URL: https://github.com/decentraland/eth-connect

# URL: https://github.com/decentraland/eth-connect

<title>GitHub - decentraland/eth-connect: ð Ethereum connector for Decentraland scenes and applications</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Ethereum connector for Decentraland scenes and applications</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/eth-connect</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>21</strong>

<strong>20</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>161</strong>

<h2>Files</h2>

<button>View code</button>

<h1>eth-connect</h1>

<em>eth-connect</em>

<p>is a TypeScript-based</p>

<p>library alternative which implements the</p>

<p>spec as well.</p>

<p>You can follow the</p>

<p>until TypeScript docs are released.</p>

<h2>Design goals</h2>

<li>A Typed web3.js alternative</li>

<li>Have as few convention-invented functions as possible (by following the RPC specs as much as possible)</li>

<li>Leverage WS and HTTP providers</li>

<li>Portable (support and work equally in both browser and node)</li>

<li>Painless</li>

<code>eth</code>

<li>usage: Using contract factories, well-split event types (block, transaction and contracts plus topics)</li>

<code>async/await</code>

<li>out of the box</li>

<h2>Installation</h2>

<p>Using NPM:</p>

<pre>npm i eth-connect</pre>

<p>Importing as a browser module:</p>

<pre>="</pre>

<pre>"</pre>

<h2>Examples</h2>

<p>Below are some simple illustrative examples.

You can also find more complete examples are in the integration</p>

<code>/tests</code>

<p>folder.</p>

<h3>Initialize with a provider</h3>

<p>or</p>

<h3>Initialize a contract</h3>

<h3>Get the accounts</h3>

<h2>Build the project</h2>

<p>Clone this project and run the following in the terminal:</p>

<pre>make build</pre>

<h2>Run tests</h2>

<pre>make test-local</pre>

<h2>Comparison</h2>

<code>web3</code>

<code>eth-connect</code>

<td>Browser support</td>

<td>â</td>

<td>â</td>

<td>Promise API</td>

<td>â</td>

<td>â</td>

<td>Strict type checks</td>

<td>â</td>

<td>â</td>

<td>TS/JS Docs</td>

<td>â</td>

<td>â</td>

<td>Wiki Docs</td>

<td>â</td>

<td>?</td>

<td>Coverage</td>

<td>Dependents</td>

<td>Install size</td>

<h2>Full documentation</h2>

<p>Follow this link to read the full documentation for eth-connect</p>

<p>.</p>

<h2>Project Status</h2>

<p>You may find issues while using this library, as it's still under development. Please report any issues you come accross.</p>

<h2>About</h2>

<p>ð Ethereum connector for Decentraland scenes and applications</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>47</strong>

<h3>Watchers</h3>

<strong>22</strong>

<h3>Forks</h3>

<strong>16</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/adr

# URL: https://github.com/decentraland/adr

<title>GitHub - decentraland/adr: Architecture Decisions Records</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Architecture Decisions Records</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/adr</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>368</strong>

<h2>Files</h2>

<button>View code</button>

<th>layout</th>

<th>slug</th>

<th>title</th>

<th>states</th>

<th>spdx-license</th>

<h2>What is an ADR?</h2>

<p>ADR stands for</p>

<em>Architecture Decision Record</em>

<p>. An ADR is a design document providing information to the Decentraland community, or describing a new feature for Decentraland or its processes or environment. The ADR should provide a concise technical specification of the feature and a rationale for the feature. The ADR author is responsible for building consensus within the community and documenting dissenting opinions.</p>

<h2>How do ADRs work?</h2>

<p>Read</p>

<p>for a detailed explaination.</p>

<h3>ADR Process</h3>

<p>The following is the standardization process for all ADRs in all tracks:</p>

<pre>flowchart TB

Draft --> Withdrawn

Idea --> Draft

Review <--> Living

Draft --> Review

Review <--> LastCall

LastCall --> Final

Review --> Withdrawn

LastCall --> Withdrawn

LastCall <--> Stagnant

Review <--> Stagnant

Draft <--> Stagnant</pre>

<h2>ADR Types</h2>

<p>There are three types of ADRs:</p>

<p>A</p>

<strong>Standards Track</strong>

<p>ADR describes any change that affects most or all Decentraland implementations, such asâa change to the synchronzation protocol, a change in deployments validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Decentraland. Standards Track ADRs consist of three partsâa design document, an implementation, and (if warranted) an update to the</p>

<p>.</p>

<p>A</p>

<strong>Meta</strong>

<p>ADR describes a process surrounding Decentraland or proposes a change to (or an event in) a process. Process ADRs are like Standards Track ADRs but apply to areas other than the Decentraland protocol itself.</p>

<p>An</p>

<strong>RFC</strong>

<p>describes a Decentraland design issue, or provides general guidelines or information to the Decentraland community. RFCs do not necessarily represent Decentraland community consensus or a recommendation, so users and implementers are free to ignore RFCs or follow their advice.</p>

<h2>About</h2>

<p>Architecture Decisions Records</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>21</strong>

<h3>Watchers</h3>

<strong>8</strong>

<h3>Forks</h3>

<strong>11</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/yellowpaper

# URL: https://github.com/decentraland/yellowpaper

<title>decentraland/yellowpaper Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h3>This repository is empty.</h3>

<p>Care to check out the</p>

<p>while you wait?</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/profile

# URL: https://github.com/decentraland/profile

<title>GitHub - decentraland/profile: Profile dApp</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Profile dApp</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/profile</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>23</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>230</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Profile UI</h1>

<p>The Decentraland Profile UI repository contains the UI code to belonging to the</p>

<p>site.</p>

<h2>About</h2>

<p>Profile dApp</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-profile-ui

# Change to URL: https://github.com/decentraland/godot-explorer-android-template

# URL: https://github.com/decentraland/godot-explorer-android-template

<title>GitHub - decentraland/godot-explorer-android-template</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/godot-explorer-android-template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/account

# URL: https://github.com/decentraland/account

<title>GitHub - decentraland/account: ð Transfer and bridge MANA across networks</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Transfer and bridge MANA across networks</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/account</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>31</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>573</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Account</h1>

<p>A Dapp where users can manage their Decentraland account.</p>

<h2>About</h2>

<p>ð Transfer and bridge MANA across networks</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>7</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-account

# Change to URL: https://github.com/decentraland/protocol

# URL: https://github.com/decentraland/protocol

<title>GitHub - decentraland/protocol</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/protocol</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>34</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>162</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Protocol definitions</h1>

<p>This module is intended to be installed as a node_module via</p>

<code>npm install @dcl/protocol</code>

<p>.</p>

<p>It is recommended that every project compiles the needed files only as part of its build process. Some imports are required:</p>

<code>-I=$(pwd)/node_modules/@dcl/protocol/public</code>

<code>-I=$(pwd)/node_modules/@dcl/protocol/proto</code>

<p>An example compilation looks like this:</p>

<pre>protoc \

--plugin=./node_modules/.bin/protoc-gen-dcl_ts_proto \

--dcl_ts_proto_opt=esModuleInterop=true,returnObservable=false,outputServices=generic-definitions,fileSuffix=.gen \

--dcl_ts_proto_out=</pre>

<pre>\

-I=</pre>

<pre>\

-I=</pre>

<pre>\</pre>

<h1>Style Guidelines</h1>

<li>All .proto files are snake_case.proto.</li>

<li>For pascal or camel case usage, please make a deterministic one from the snake case. Example: nft_shape will transform to NftShape.</li>

<li>See</li>

<li>. The most of other styles are taken from there, the Buf configuration is in proto/buf.yml.</li>

<li>Use public/ folder only for .proto with protocol exposing, that is only for files with</li>

<code>import public</code>

<li>. This folder is not processed by the linter.</li>

<h1>Dev with Decentraland Repositories</h1>

<p>Many repositories depend on this protocol definition and that sometimes implies some merge order. We don't have to worry much about compatibility because the checks are running with each PR, if you break something, the CI will warn you. But, in some cases, it's desirable to merge the implementation in a specific order to avoid unexpected behavior in the corner cases (multiple repositories are waiting for the build at the same time).</p>

<strong>Important Note: Avoid Merging Protocol PR Without Completed Unity Implementation</strong>

<p>Please don't merge a protocol PR into the main branch unless the corresponding implementation in Unity has been completed. This is important to avoid any potential issues or build failures in Unity.</p>

<p>The ideal order for introducing breaking changes in the protocol is as follows:</p>

<li>Create a PR in the Protocol repository.</li>

<li>Use the npm test link from the CI of the protocol PR in the protocol-dependent application for development.</li>

<li>Once both the protocol PR and the protocol-dependent application (e.g. unity-renderer) PR are ready for merging, synchronize their merging as follows:</li>

<li>Merge the protocol PR.</li>

<li>Modify protocol-dependent application PR to use the</li>

<code>@dcl/protocol@next</code>

<li>package to stop using the PR npm test link.</li>

<li>Merge the protocol-dependent application PR.</li>

<p>Some dev-cases are described here:</p>

<h2>SDK: New component or component modification</h2>

<p>Repositories:</p>

<p>and</p>

<p>At the protocol level both operations shouldn't be a problem, but</p>

<code>js-sdk-toolchain</code>

<p>CI will fail if the component is not tested. This can happen if the PR</p>

<code>A</code>

<p>from the protocol is merged, and you update your PR</p>

<code>B</code>

<p>from</p>

<code>js-sdk-toolchain</code>

<p>with the changes before the PR</p>

<code>A</code>

<p>from</p>

<code>js-sdk-toolchain</code>

<p>is merged.</p>

<p>Some guidelines and testing before merge:</p>

<li>The protocol package is uploaded to S3 while developing in a PR. This can be used in the target repositories</li>

<li>Testing in the playground: Playground allows us to test by adding query parameters:</li>

<code>https://playground.decentraland.org/?&renderer-branch=**feat/my-new-component**&sdk-branch=**feat/new-component-approach**</code>

<li>Testing locally: you can write an example scene and install the package</li>

<code>@dcl/sdk</code>

<li>uploaded to S3 commented in the PR comments.</li>

<li>Testing in the Unity Editor: if you need to test with the editor opened, write the</li>

<code>ws</code>

<li>query parameter in your local or playground test.</li>

<li>Start merging when the three PRs are already to merge: first merge the Protocol one, then update the other two with the version @next and merge them at the same time.</li>

<h2>SDK: New APIs or APIs modifications</h2>

<p>Repositories:</p>

<p>,</p>

<p>and</p>

<p>In this case, there is no problem with when each PR is merged. It's recommendable to merge first the rpc server-side (in this case, Kernel), second the</p>

<code>scene-runtime</code>

<p>(and this would require a second update from</p>

<code>kernel</code>

<p>) and last the</p>

<code>js-sdk-toolchain</code>

<p>.</p>

<h2>Comms</h2>

<p>TODO</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/dev-with-decentraland-repositories

# Change to URL: https://github.com/decentraland/crashbot

# URL: https://github.com/decentraland/crashbot

<title>GitHub - decentraland/crashbot</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/crashbot</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>96</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and components (ports).</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic and adapters.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our adapters (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/cast

# URL: https://github.com/decentraland/cast

<title>GitHub - decentraland/cast: Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/cast</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>128</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL Cast</h1>

<p>DCL Cast dApp</p>

<h2>About</h2>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>60</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/places

# URL: https://github.com/decentraland/places

<title>GitHub - decentraland/places</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/places</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>172</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<code>6ae1f0f</code>

<h2>Git stats</h2>

<strong>764</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Places</h1>

<p>Brief description of this project.</p>

<h2>Setup</h2>

<h3>environment setup</h3>

<p>create a copy of</p>

<code>.env.example</code>

<p>and name it as</p>

<code>.env.development</code>

<pre>cp .env.example .env.development</pre>

<p>to know more about this file see</p>

<p>if you are running this project locally you only need to check the following environment variables:</p>

<code>CONNECTION_STRING</code>

<li>: make sure it is point to a valid database</li>

<h3>database setup</h3>

<p>once you have a</p>

<code>CONNECTION_STRING</code>

<p>you can setup you database tables using the following command</p>

<pre>npm run migrate up</pre>

<h3>clear database</h3>

<p>to clear database to restart the project as is where new run the following SQL</p>

<pre>truncate places;

truncate place_activities;

truncate place_activity_daily;

truncate entities_places;

truncate tasks;</pre>

<pre>deployment_tracks</pre>

<pre>;</pre>

<h2>Run</h2>

<p>once you setup this project you can start it using the following command</p>

<pre>npm start</pre>

<p>Note 1: this project run over</p>

<code>https</code>

<p>, if it is your first time you might need to run it with</p>

<code>sudo</code>

<p>Note 2: you can disabled</p>

<code>https</code>

<p>removing the</p>

<code>--https</code>

<p>flag in the</p>

<code>develop</code>

<p>script of your</p>

<code>package.json</code>

<h2>Project's structure</h2>

<p>You can find a full documentation about the project's structure in the</p>

<code>decentraland-gatsby</code>

<h3>back and front ends</h3>

<p>this project runs gatsby as front-end and a nodejs server as back-end both connected through a proxy</p>

<li>locally this proxy is defined in</li>

<code>gatsby-config.js</code>

<code>proxy</code>

<li>at servers this proxy is defined in</li>

<code>Pulumi.ts</code>

<li>(</li>

<code>servicePaths</code>

<li>prop)</li>

<h3>routes</h3>

<strong>front-end</strong>

<p>routes are defined using</p>

<p>+</p>

<p>, you can find each page in the</p>

<code>src/pages</code>

<p>directory</p>

<strong>back-end</strong>

<p>routes are defined using</p>

<code>express</code>

<p>you can find each route in</p>

<code>src/entities/{Entity}/routes.ts</code>

<p>and those are imported ar</p>

<code>src/server.ts</code>

<h2>Re-Populate</h2>

<code>place_positions</code>

<pre>TRUNCATE</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>.</pre>

<pre>, unnest(</pre>

<pre>.</pre>

<pre>)</pre>

<pre>places p</pre>

<pre>.</pre>

<pre>IS FALSE</pre>

<pre>.</pre>

<pre>IS FALSE</pre>

<h2>Content Entity Scene</h2>

<p>These are the entities that contain all the necessary information to create each of the Places. By means of a SQS queue the EntityId and the Url of the Content server are obtained in order to obtain the information. Next we are going to describe the steps to test this locally.</p>

<h3>Install local SQS</h3>

<p>To do this you will need</p>

<p>.</p>

<h3>Prerequisites</h3>

<p>Please make sure to install the following tools on your machine before moving ahead:</p>

<code>python (Python 3.7 up to 3.10 is supported)

pip (Python package manager)

docker</code>

<h3>Installation</h3>

<p>Install localstack using the Python package manager.</p>

<code>$ python3 -m pip install localstack</code>

<p>Then follow the steps to install the</p>

<p>.</p>

<h3>Run</h3>

<p>After opening the Docker, start the localstack</p>

<code>localstack start -d</code>

<p>Then create the sqs queue to use</p>

<code>awslocal sqs create-queue --queue-name places_test</code>

<p>This will return the url of the queue</p>

<code>{

"QueueUrl": "http://localhost:4566/000000000000/places_test"

}</code>

<h3>Usage</h3>

<p>The message to be received from the SQS must be sent using</p>

<code>awslocal</code>

<p>. This message must have the following format</p>

<code>{

"Message": {

"entity": {

"entityId": "bafkreietumuqvq6kyy5k3dnn4z57j45isf5e2rjn46w2hrcpfghwmausvy",

"authChain": "authChain"

},

"contentServerUrls": ["https://peer.decentraland.org/content"]

}

}</code>

<p>And this must be sent as a message body like this using awslocal</p>

<code>awslocal sqs send-message --queue-url {queue-url} --message-body {message}</code>

<p>like:</p>

<code>$ awslocal sqs send-message --queue-url http://localhost:4566/00000000000/places_test --message-body '{"Message":"{\"entity\":{\"entityId\":\"bafkreietumuqvq6kyy5k3dnn4z57j45isf5e2rjn46w2hrcpfghwmausvy\",\"authChain\":\"authChain\"},\"contentServerUrls\":[\"https://peer.decentraland.org/content\"]}"}'</code>

<p>This will answer with a JSON with the message id like</p>

<code>{

"MD5OfMessageBody": "c2bdcb767c73f8afeac400d8f738749d",

"MessageId": "c17636c0-f37e-4c6f-a4ab-112fa250a8c6"

}</code>

<p>To return the messages set in the SQS, a curl command can be executed</p>

<code>http://localhost:4566/_aws/sqs/messages?QueueUrl={queue-url}</code>

<p>like:</p>

<code>$ curl -H "Accept: application/json" \

"http://localhost:4566/_aws/sqs/messages?QueueUrl=http://queue.localhost.localstack.cloud:4566/000000000000/places_test"</code>

<p>And the response should be something like</p>

<code>{

"ReceiveMessageResponse":{

"ReceiveMessageResult":{

"Message":{

"MessageId":"9a192624-b5b3-44e7-907e-0f5a5458ccb5",

"MD5OfBody":"c2bdcb767c73f8afeac400d8f738749d",

"Body":"{Message:{\\entity\\:{\\entityId\\:\\bafkreietumuqvq6kyy5k3dnn4z57j45isf5e2rjn46w2hrcpfghwmausvy\\,\\authChain\\:\\authChain\\},\\contentServerUrls\\:[\\https://peer.decentraland.org/content\\]}}",

"Attribute":[

{

"Name":"SenderId",

"Value":"000000000000"

},

{

"Name":"SentTimestamp",

"Value":"1679598003529"

},

{

"Name":"ApproximateReceiveCount",

"Value":"0"

},

{

"Name":"ApproximateFirstReceiveTimestamp",

"Value":"1679598013330"

}

],

"ReceiptHandle":"SQS/BACKDOOR/ACCESS"

}

},

"ResponseMetadata":{

"RequestId":"DN4HZ3U16MG9FHFY2G48IXBZUI721VFFUQ9SWEZFKIS79VGMG7XN"

}

}

}</code>

<p>Finally to purge the SQS</p>

<code>awslocal sqs purge-queue --queue-url {queue_url}</code>

<code>$ awslocal sqs purge-queue --queue-url http://localhost:4566/00000000000/places_test</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ui-env

# URL: https://github.com/decentraland/ui-env

<title>GitHub - decentraland/ui-env: A package to manage configurations for different environment in frontends</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A package to manage configurations for different environment in frontends</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ui-env</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>30</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ui-env</h1>

<p>This package can be used to generate configurations for different environments for web apps and frontends in general. This is handy for frontends that have a single build that is deployed to different envs (such as rollouts).</p>

<h2>Installation</h2>

<pre>npm i @dcl/ui-env</pre>

<h2>Usage</h2>

<p>You need to create a</p>

<code>config</code>

<p>instance passing the different variables for all the desired envs.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>And then you can get the values for variables from other parts of your code base</p>

<p>You can pass default values as the second argument</p>

<p>The config will pick the value from the right environment by checking the top level domain:</p>

<code>Env.DEVELOPMENT</code>

<li>: If TLD is</li>

<code>.io</code>

<li>or</li>

<code>.zone</code>

<code>Env.STAGING</code>

<li>: If TLD is</li>

<code>.net</code>

<li>or</li>

<code>.today</code>

<code>Env.PRODUCTION</code>

<li>: If TLD is</li>

<code>.org</code>

<p>You can override this logic by passing a query param</p>

<code>env</code>

<p>with the values</p>

<code>dev</code>

<p>,</p>

<code>stg</code>

<p>or</p>

<code>prod</code>

<p>. The param name and its value can be either uppercase or lowercase.</p>

<p>For example:</p>

<code>https://builder.decentraland.io?env=prod</code>

<li>: This will use</li>

<code>Env.PRODUCTION</code>

<code>http://localhost:3000?env=dev</code>

<li>: This will use</li>

<code>Env.DEVELOPMENT</code>

<p>If no TLD is found and there is no query param, the default environment will be used, which is</p>

<code>Env.PRODUCTION</code>

<p>.</p>

<p>If you want to override the default environment you can use the environment var</p>

<code>DCL_DEFAULT_ENV</code>

<p>or</p>

<code>REACT_APP_DCL_DEFAULT_ENV</code>

<p>and set it with the values</p>

<code>dev</code>

<p>,</p>

<code>stg</code>

<p>or</p>

<code>prod</code>

<p>.</p>

<p>This can be useful to configure the local environment or for deployments to other non-decentraland domains such as Vercel's.</p>

<p>For example:</p>

<pre>REACT_APP_DCL_DEFAULT_ENV=dev</pre>

<p>Now</p>

<code>http://localhost:3000</code>

<p>uses the</p>

<code>Env.DEVELOPMENT</code>

<p>configuration without having to pass a query param.</p>

<h2>Test</h2>

<pre>npm</pre>

<p>Or with coverage reports</p>

<pre>npm run test:coverage</pre>

<h2>Build</h2>

<pre>npm run build</pre>

<h2>Release</h2>

<p>To release a new version of this package create a</p>

<p>via GitHub</p>

<h2>About</h2>

<p>A package to manage configurations for different environment in frontends</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/builder-server

# URL: https://github.com/decentraland/builder-server

<title>GitHub - decentraland/builder-server: Builder app backend</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Builder app backend</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/builder-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>24</strong>

<strong>67</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>669</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Builder Server</h1>

<p>Exposes endpoints for the Builder.</p>

<h2>RUN</h2>

<p>Check</p>

<code>.env.example</code>

<p>and create your own</p>

<code>.env</code>

<p>file. Some properties have defaults.</p>

<pre>createdb</pre>

<pre>DatabaseName</pre>

<pre>npm i

npm run migrate up</pre>

<pre>npx ts-node ./scripts/parseS3Pools.ts

npx ts-node ./scripts/updateProjectThumbnails.ts</pre>

<pre>npm run seed</pre>

<pre>npm start</pre>

<h1>Rewrites to S3</h1>

<code>GET /v1/storage/assetPacks/:filename</code>

<li>=></li>

<li>(for the thumbnail, :id.png)</li>

<code>GET /v1/storage/contents/:hash</code>

<li>=></li>

<h1>Also S3 but behind auth</h1>

<code>GET /v1/projects/:id/manifest</code>

<li>=></li>

<code>GET /v1/pools/:id/manifest</code>

<li>=></li>

<code>GET /v1/projects/:id/media/:filename</code>

<li>=></li>

<p>Take into account that</p>

<code>/v1/</code>

<p>correspond to the version that you specify in the file</p>

<code>.env</code>

<p>with</p>

<code>API_VERSION</code>

<h1>S3 structure</h1>

<pre>projects</pre>

<pre>____PROJECT_ID</pre>

<pre>____manifest.json</pre>

<pre>____pool.json</pre>

<pre>____east.png</pre>

<pre>____north.png</pre>

<pre>____preview.png</pre>

<pre>____south.png</pre>

<pre>____thumbnail.png</pre>

<pre>____west.png

asset_packs</pre>

<pre>____ASSET_PACK_ID.png

contents</pre>

<pre>____HASH1</pre>

<pre>____HASH2</pre>

<pre>____HASH3</pre>

<p>#Extra Info

If you are using windows subsystem, you will need to start the postgresql service each time</p>

<code>sudo service postgresql start</code>

<h1>Running external services locally with Docker Compose</h1>

<p>If you have docker running on your machine and want to have external dependencies running locally on your machine,

you can use the</p>

<code>docker-compose</code>

<p>file present in the repo to do it in a simple and centralized way and avoid the hassle of

configuring each one of them independantly.</p>

<p>First, run all services simultaneously with:</p>

<code>docker-compose up -d</code>

<code>-d or --detach</code>

<p>will run the processes on the background instead of running on the terminal which executed the command.

You can ignore this flag if you don't care about it.</p>

<p>Before running the</p>

<code>builder-server</code>

<p>, make sure that the following</p>

<code>.env</code>

<p>variables are set correctly so the services run by docker-compose work as expected.</p>

<code>CONNECTION_STRING='postgres://admin:password@localhost:5432/builder-server'

AWS_ACCESS_KEY=admin

AWS_ACCESS_SECRET=password

AWS_BUCKET_NAME=builder-server

AWS_STORAGE_URL=http://localhost:9000</code>

<p>You can then run the</p>

<code>builder-service</code>

<p>normally as instructed in</p>

<p>This method also provides some utilities to facilitate developer experience with a database viewer that can be accessed in</p>

<p>, as well as an object storage viewer in</p>

<h2>About</h2>

<p>Builder app backend</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>20</strong>

<h3>Watchers</h3>

<strong>15</strong>

<h3>Forks</h3>

<strong>20</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/opscli

# URL: https://github.com/decentraland/opscli

<title>GitHub - decentraland/opscli: Public ops command line to interact with Decentraland nodes</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Public ops command line to interact with Decentraland nodes</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/opscli</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>18</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>50</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/opscli</h1>

<p>Operations command line tool.</p>

<h2>Commands</h2>

<h3>Validate deployment consistency</h3>

<p>Check the active deployment by pointer on every catalyst, usage:</p>

<code>npx @dcl/opscli pointer-consistency --pointer "0,0"</code>

<h3>Schedule asset bundle conversion</h3>

<code>npx @dcl/opscli queue-ab-conversion \

--pointer "0,0" \

--pointer "110,10" \

--cid "110,10" \

--token <ACCESS_TOKEN> \

[--ab-server https://asset-bundle-converter.decentraland.org] \

[--content-server https://peer.decentraland.org/content]</code>

<h3>Schedule asset bundle conversion from custom about</h3>

<code>npx @dcl/opscli queue-ab-conversion-about \

--token <ACCESS_TOKEN> \

--about-url https://sdk-team-cdn.decentraland.org/ipfs/goerli-plaza-main/about \

[--ab-server https://asset-bundle-converter.decentraland.org]</code>

<h3>Check status of conversion</h3>

<code>npx @dcl/opscli check-ab-conversion \

--pointer "0,0" \

--pointer "110,10" \

[--cid "bafy....."]</code>

<code>query-rollout</code>

<p>Usage:</p>

<code>$ npx @dcl/opscli query-rollout --domain play.decentraland.zone --rolloutName _site

Current rollouts for domain "play.decentraland.zone" for this request

âââââââââââââââââââââââ¬âââââââââââââ¬ââââââââââââââââââââââââââ¬ââââââââââââââââââââââââââââââââââââ

â       (index)       â percentage â         prefix          â              version              â

âââââââââââââââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââ¼ââââââââââââââââââââââââââââââââââââ¤

â        _site        â    100     â '@dcl/explorer-website' â '0.0.1-1133229304.commit-901ee9a' â

â     @dcl/kernel     â    100     â      '@dcl/kernel'      â '1.0.0-1133249286.commit-a9ca05e' â

â @dcl/unity-renderer â    100     â  '@dcl/unity-renderer'  â            '1.0.10553'            â

âââââââââââââââââââââââ´âââââââââââââ´ââââââââââââââââââââââââââ´ââââââââââââââââââââââââââââââââââââ

Raw data for rollout "_site" for domain "play.decentraland.zone"

âââââââââââ¬âââââââââââââ¬ââââââââââââââââââââââââââââââââââââ

â (index) â percentage â              version              â

âââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââââââââââââ¤

â    0    â    100     â '0.0.1-1133229304.commit-901ee9a' â

â    1    â    100     â '0.0.1-1129066963.commit-a6c2178' â

â    2    â    100     â '0.0.1-1125482159.commit-645a9e8' â

â    3    â    100     â '0.0.1-1124920935.commit-57e48a2' â

â    4    â    100     â '0.0.1-1121248349.commit-0568cf7' â

â    5    â    100     â '0.0.1-1120296389.commit-cd95321' â

â    6    â    100     â '0.0.1-1120045215.commit-7d17a4e' â

â    7    â    100     â '0.0.1-1117962007.commit-cd75435' â

â    8    â    100     â '0.0.1-1117258971.commit-bee96ab' â

â    9    â    100     â '0.0.1-1114103774.commit-cfe9ba9' â

â   10    â    100     â '0.0.1-1114086203.commit-cc86da6' â

â   11    â    100     â '0.0.1-1105802712.commit-80b54a0' â

â   12    â    100     â '0.0.1-1105772932.commit-ff46bfb' â

â   13    â    100     â '0.0.1-1105284880.commit-32d26de' â

â   14    â    100     â '0.0.1-1094578839.commit-e8461eb' â

â   15    â    100     â '0.0.1-1092142520.commit-746716e' â

â   16    â    100     â '0.0.1-1091984380.commit-77a1383' â

âââââââââââ´âââââââââââââ´ââââââââââââââââââââââââââââââââââââ</code>

<code>download-entity</code>

<p>Downloads a specific entity from a content server, as specified in</p>

<p>It creates an extra file named</p>

<code>.metadata</code>

<p>including the deployment metadata. Which in some cases (wearables) is not present as a file in the deployed entity.</p>

<p>In the specified folder, it will create one</p>

<code>$ npx @dcl/opscli download-entity \

--content-server https://play.decentraland.org/content \

--pointer=0,0 \

--pointer=urn:decentraland:off-chain:base-avatars:brown_pants \

--out ~/Downloads</code>

<code>deploy-entity</code>

<p>Deploys an entity to a content server</p>

<code>--pointer</code>

<li>Pointers of the entities, can be used many times, e.g.</li>

<code>--pointer=0,0 --pointer=0,1</code>

<code>--entity-type</code>

<li>Entity type</li>

<code>--private-key</code>

<li>or</li>

<code>PRIVATE_KEY</code>

<li>env var</li>

<code>--dry</code>

<li>do everything except publishing the entity</li>

<code>--folder</code>

<li>to deploy, root level paths starting with</li>

<code>.</code>

<li>will be ignored, i.e. for .git folder. the</li>

<code>.metadata</code>

<li>file is required to create the entity</li>

<code>$ npx @dcl/opscli deploy-entity \

--dry \

--content-server https://peer.decentraland.org/content \

--entity-type wearable \

--folder=urn:decentraland:off-chain:base-avatars:brown_pants \

--pointer=urn:decentraland:off-chain:base-avatars:brown_pants \

--private-key=bde921a4a4abc644cced18f632aed0b3d34b1b36bc16fd97721ade1b7178cfff</code>

<code>query-rollout</code>

<p>Usage:</p>

<code>$ npx @dcl/opscli query-rollout --domain play.decentraland.zone --rolloutName _site

Current rollouts for domain "play.decentraland.zone" for this request

âââââââââââââââââââââââ¬âââââââââââââ¬ââââââââââââââââââââââââââ¬ââââââââââââââââââââââââââââââââââââ

â       (index)       â percentage â         prefix          â              version              â

âââââââââââââââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââ¼ââââââââââââââââââââââââââââââââââââ¤

â        _site        â    100     â '@dcl/explorer-website' â '0.0.1-1133229304.commit-901ee9a' â

â     @dcl/kernel     â    100     â      '@dcl/kernel'      â '1.0.0-1133249286.commit-a9ca05e' â

â @dcl/unity-renderer â    100     â  '@dcl/unity-renderer'  â            '1.0.10553'            â

âââââââââââââââââââââââ´âââââââââââââ´ââââââââââââââââââââââââââ´ââââââââââââââââââââââââââââââââââââ

Raw data for rollout "_site" for domain "play.decentraland.zone"

âââââââââââ¬âââââââââââââ¬ââââââââââââââââââââââââââââââââââââ

â (index) â percentage â              version              â

âââââââââââ¼âââââââââââââ¼ââââââââââââââââââââââââââââââââââââ¤

â    0    â    100     â '0.0.1-1133229304.commit-901ee9a' â

â    1    â    100     â '0.0.1-1129066963.commit-a6c2178' â

â    2    â    100     â '0.0.1-1125482159.commit-645a9e8' â

â    3    â    100     â '0.0.1-1124920935.commit-57e48a2' â

â    4    â    100     â '0.0.1-1121248349.commit-0568cf7' â

â    5    â    100     â '0.0.1-1120296389.commit-cd95321' â

â    6    â    100     â '0.0.1-1120045215.commit-7d17a4e' â

â    7    â    100     â '0.0.1-1117962007.commit-cd75435' â

â    8    â    100     â '0.0.1-1117258971.commit-bee96ab' â

â    9    â    100     â '0.0.1-1114103774.commit-cfe9ba9' â

â   10    â    100     â '0.0.1-1114086203.commit-cc86da6' â

â   11    â    100     â '0.0.1-1105802712.commit-80b54a0' â

â   12    â    100     â '0.0.1-1105772932.commit-ff46bfb' â

â   13    â    100     â '0.0.1-1105284880.commit-32d26de' â

â   14    â    100     â '0.0.1-1094578839.commit-e8461eb' â

â   15    â    100     â '0.0.1-1092142520.commit-746716e' â

â   16    â    100     â '0.0.1-1091984380.commit-77a1383' â

âââââââââââ´âââââââââââââ´ââââââââââââââââââââââââââââââââââââ</code>

<h2>About</h2>

<p>Public ops command line to interact with Decentraland nodes</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/builder-templates

# URL: https://github.com/decentraland/builder-templates

<title>GitHub - decentraland/builder-templates: Templates for the Builder</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Templates for the Builder</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/builder-templates</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>29</strong>

<h2>Files</h2>

<button>View code</button>

<h1>builder-templates</h1>

<p>Install dependencies:</p>

<pre>npm install</pre>

<p>Build:</p>

<pre>npm run build</pre>

<h3>Add new templates</h3>

<p>To add a new template just add a new directory in the</p>

<code>templates</code>

<p>folder, with a</p>

<code>data.json</code>

<p>,</p>

<code>preview.png</code>

<p>and</p>

<code>preview.mp4</code>

<p>files.</p>

<p>The</p>

<code>data.json</code>

<p>must include the following properties:</p>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}</pre>

<p>When the</p>

<code>"repo"</code>

<p>property is missing, the template is added a</p>

<code>"coming_soon"</code>

<p>and will be shown grayed out in the Builder.</p>

<h3>Release</h3>

<p>The CI will publish the</p>

<code>@dcl/builder-templates</code>

<p>package automatically.</p>

<p>Every push into</p>

<code>main</code>

<p>does a release under the</p>

<code>@next</code>

<p>tag and uploads the assets to the DEV and STG environments (.zone and .today)</p>

<p>Every GitHub release publishes a new version as</p>

<code>@latest</code>

<p>and uploads the assets to the PRD environment (.org)</p>

<h2>About</h2>

<p>Templates for the Builder</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/l2-airdrop

# URL: https://github.com/decentraland/l2-airdrop

<title>GitHub - decentraland/l2-airdrop: Collection of command line tools to do massive Airdrops of Decentraland Wearables on Matic</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Collection of command line tools to do massive Airdrops of Decentraland Wearables on Matic</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/l2-airdrop</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>15</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h1>L2 Airdrop</h1>

<p>This repository is a collection of command line tools to do massive Airdrops of Decentraland Wearables on Matic</p>

<h2>Index</h2>

<g-emoji>â ï¸</g-emoji>

<code>environment</code>

<li>: Check current environment configuration</li>

<code>send</code>

<li>: Send wearables to a list of addresses</li>

<code>tx</code>

<li>: Inspect, cancel or speed up transactions</li>

<li>: watch a beginner's video tutorial by DOCTORdripp on how to use this script</li>

<h2>Requirements</h2>

<p>Before to start make sure you have</p>

<code>>=12</code>

<pre>node -v</pre>

<h2>Installation</h2>

<pre>git clone git@github.com:decentraland/l2-airdrop.git</pre>

<pre>l2-airdrop</pre>

<pre>npm install</pre>

<h2>Setup</h2>

<p>Before you start to do airdrops you need to setup your environment,</p>

<h3>Create a new</h3>

<code>.env</code>

<h3>file</h3>

<pre>cp .env.example .env</pre>

<h3>Create a private key that would be use to mint your wearables</h3>

<pre>openssl rand -hex 32</pre>

<h3>Save your new private key in your</h3>

<code>.env</code>

<h3>file</h3>

<pre>CHAIN_ID=137

ACCOUNT_PRIVATE_KEY=111...999</pre>

<p>You can use multiples private keys separated by</p>

<code>,</code>

<p>(ACCOUNT_PRIVATE_KEY=111...999,222...888)</p>

<p>Now you can see your new address using the following command</p>

<pre>npm run environment</pre>

<pre>CHAIN_ID:  137

ACCOUNT_WALLETS:  [</pre>

<pre>]</pre>

<h3>Send</h3>

<code>MATIC</code>

<h3>to your new address</h3>

<p>You need to have MATIC in your new address to pay for fees on Polygon (which are really cheap with</p>

<code>1 MATIC</code>

<p>you can mint thousands of wearables)</p>

<h3>Add your new address as minter on your builder collection</h3>

<p>Go to</p>

<code>https://builder.decentraland.org/collections</code>

<p>, open the collection you want yo airdrop and add your new address as a minter</p>

<h2>Warnings</h2>

<g-emoji>â ï¸</g-emoji>

<h3>Cancelling the command line execution doesn't cancel those transactions sent with it</h3>

<p>If for any reason you cancel the execution of the command line please take into account the any transaction sent is still running, if you restart the airdrop it will fail until all pending transactions complete.</p>

<h2>Tutorial</h2>

<p>A video demonstration and beginner's tutorial by DOCTORdripp. Learn how to bulk airdrop using this script now.</p>

<h2>About</h2>

<p>Collection of command line tools to do massive Airdrops of Decentraland Wearables on Matic</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>9</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>17</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-opensea

# URL: https://github.com/decentraland/tap-opensea

<title>GitHub - decentraland/tap-opensea: Tap for importing OpenSea events</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Tap for importing OpenSea events</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-opensea</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>35</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-opensea</h1>

<code>tap-opensea</code>

<p>is a Singer tap for opensea.</p>

<p>Built with the Meltano</p>

<p>for Singer Taps.</p>

<h2>Installation</h2>

<code>Developer TODO:</code>

<li>Update the below as needed to correctly describe the install procedure. For instance, if you do not have a PyPi repo, or if you want users to directly install from your git repo, you can modify this step as appropriate.</li>

<pre>pipx install tap-opensea</pre>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<code>Developer TODO:</code>

<li>Provide a list of config options accepted by the tap.</li>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-opensea --about</pre>

<h3>Source Authentication and Authorization</h3>

<code>Developer TODO:</code>

<li>If your tap requires special access on the source system, or any special authentication requirements, provide those here.</li>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-opensea</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-opensea --version

tap-opensea --help

tap-opensea --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<code>Developer TODO:</code>

<li>As a first step, scan the entire project for the text "</li>

<code>TODO:</code>

<li>" and complete any recommended steps, deleting the "TODO" references once completed.</li>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_opensea/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-opensea</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-opensea --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Your project comes with a custom</p>

<code>meltano.yml</code>

<p>project file already created. Open the</p>

<code>meltano.yml</code>

<p>and follow any</p>

<em>"TODO"</em>

<p>items listed in

the file.</p>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-opensea

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-opensea --version</pre>

<pre>meltano elt tap-opensea target-jsonl</pre>

<h3>SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>Tap for importing OpenSea events</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/eslint-config

# URL: https://github.com/decentraland/eslint-config

<title>GitHub - decentraland/eslint-config: Decentraland ESlint config</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland ESlint config</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/eslint-config</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>21</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>65</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL ESLint & Prettier Config</h1>

<h2>Installation</h2>

<pre>npm install -D @dcl/eslint-config</pre>

<h2>Usage</h2>

<p>In</p>

<code>eslintrc.json</code>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>License</h2>

<p>Apache 2.0</p>

<h2>About</h2>

<p>Decentraland ESlint config</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk7-utils

# URL: https://github.com/decentraland/sdk7-utils

<title>GitHub - decentraland/sdk7-utils: SDK 7 Utils Library</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>SDK 7 Utils Library</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk7-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>10</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>56</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl-sdk/utils</h1>

<p>This library includes a number of helpful pre-built tools that offer simple solutions to common scenarios that you're likely to run into.</p>

<h2>Using the Utils library</h2>

<p>To use any of the helpers provided by the utils library you must install it in your Decentrland project.</p>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you've</p>

<p>.</p>

<li>Open your scene's folder using Visual Studio Code.</li>

<strong>ð Note</strong>

<p>: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project's currently installed dependencies.</p>

<p>Click the</p>

<code>+</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write</p>

<code>@dcl-sdk/utils</code>

<p>and hit enter. The dependency is then installed to your scene.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h3>Via the CLI</h3>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl-sdk/utils</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Debug helpers</h2>

<h3>Label</h3>

<p>Add a text label floating over an entity using</p>

<code>utils.addLabel</code>

<p>. It has two required arguments:</p>

<code>text</code>

<li>: The string of text to display.</li>

<code>parent</code>

<li>: The entity to set the label on.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addLabel</code>

<p>also lets you set the following:</p>

<code>billboard</code>

<li>: If true, label turns to always face player. True by default.</li>

<code>color</code>

<li>: Text color. Black by default.</li>

<code>size</code>

<li>: Text font size, 3 by default.</li>

<code>textOffset</code>

<li>: Offset from parent entity's position. By default 1.5 meters above the parent.</li>

<p>Tip:</p>

<code>utils.addLabel</code>

<p>returns the created entity used for the text. You can then tweak this entity in any way you choose.</p>

<h3>Debug cube</h3>

<p>Render a simple clickable cube to use as a trigger when debugging a scene with</p>

<code>utils.addTestCube</code>

<p>. It has two required arguments:</p>

<code>transform</code>

<li>: The position, rotation and/or scale of the cube, expressed as a</li>

<code>TransformType</code>

<li>object, as gets passed when creating a</li>

<code>Transform</code>

<li>component.</li>

<code>triggeredFunction</code>

<li>: A function that gets called every time the cube is clicked.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addTestCube</code>

<p>also lets you set the following:</p>

<code>label</code>

<li>: An optional label to display floating over the cube.</li>

<code>color</code>

<li>: A color for the cube's material.</li>

<code>sphere</code>

<li>: If true, it renders as a Sphere instead of a cube.</li>

<code>noCollider</code>

<li>: If true, the cube won't have a collider and will let players walk through it.</li>

<p>Tip:</p>

<code>utils.addTestCube</code>

<p>returns the created entity for the cube. You can then tweak this entity in any way you choose.</p>

<h2>Tweens</h2>

<h3>Translate an entity</h3>

<p>To change entity's position over a period of time, use the</p>

<code>utils.tweens.startTranslation</code>

<p>.</p>

<p>This example moves an entity from one position to another over 2 seconds:</p>

<h3>Rotate an entity</h3>

<p>To rotate an entity over a period of time, from one direction to another, use</p>

<code>utils.tweens.startRotation</code>

<p>.</p>

<p>This example rotates an entity from one directions to another over 2 seconds:</p>

<h3>Scale an entity</h3>

<p>To adjust the scale of an entity over a period of time, from one size to another, use</p>

<code>utils.tweens.startScaling</code>

<p>.</p>

<p>This example scales an entity from one size to another over 2 seconds:</p>

<h3>Non-linear changes</h3>

<p>All tweens accept an optional argument which sets the rate of change. By default, translation, rotation, or scaling occur at a linear rate, but this can be set to other options.</p>

<code>utils.InterpolationType</code>

<p>enumeration lists all available interpolation types.</p>

<p>The following example moves a box following a quadratic ease-in rate:</p>

<h3>Stopping tweens and callbacks</h3>

<code>utils.tweens.stopTranslation</code>

<p>,</p>

<code>utils.tweens.stopRotation</code>

<p>and</p>

<code>utils.tweens.stopScaling</code>

<p>stop translation, rotation and scaling respectively.</p>

<p>In the following example tweens affecting a box are stopped when player clicks on a sphere:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>All tweens accept an optional argument</p>

<code>onFinishCallback</code>

<p>which is executed when a tween is complete. It is not executed if a tween was explicitly stopped via stop methods. Use</p>

<code>utils.tweens.getTranslationOnFinishCallback</code>

<p>,</p>

<code>utils.tweens.getRotationOnFinishCallback</code>

<p>and</p>

<code>utils.tweens.getScalingOnFinishCallback</code>

<p>to obtain tween's callback and call it before stopping a tween, if required.</p>

<p>The following example logs a message when the box finishes its movement.</p>

<h2>Perpetual motions</h2>

<h3>Perpetual rotation</h3>

<p>To rotate an entity continuously, use</p>

<code>utils.perpetualMotions.startRotation</code>

<p>. The entity will keep rotating forever until it's explicitly stopped.</p>

<code>rotationVelocity</code>

<p>argument is a quaternion describing the desired rotation to perform each second second. For example</p>

<code>Quaternion.fromEulerDegrees(0, 45, 0)</code>

<p>rotates the entity on the Y axis at a speed of 45 degrees per second, meaning that it makes a full turn every 8 seconds.</p>

<p>Rotation can be stopped by calling</p>

<code>utils.perpetualMotions.stopRotation</code>

<p>.</p>

<p>In the following example, a cube rotates continuously until clicked:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Path following</h2>

<h3>Straight path</h3>

<p>To move an entity over several points of a path over a period of time, use</p>

<code>utils.paths.startStraightPath</code>

<p>. Along with an entity which will follow a path you must specify two arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that form the path.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<p>There is one optional argument:</p>

<code>faceDirection</code>

<li>: When set to true, an entity will be rotated to face the direction of its movement.</li>

<p>This example moves an entity through four points over 10 seconds:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Smooth path</h3>

<p>To make an entity follow a smooth path over a period of time, use</p>

<code>utils.paths.startSmoothPath</code>

<p>. The smooth path is composed of multiple straight line segments put together. You only need to supply a series of fixed path points and a smooth curve is drawn to pass through all of these. You must specify an amount of segments via</p>

<code>segmentCount</code>

<p>argument.</p>

<code>faceDirection</code>

<p>argument works for smooth paths too.</p>

<p>This example makes entity follow a smooth path that's subdivided into 20 segments, over a period of 10 seconds. The curve passes through four key points.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>If the first and last points of a smooth path are identical, the library tries to facilitate smooth orientation change during movement over a loop. In the example below a box loops through three points forever.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Stopping paths and callbacks</h3>

<p>Just like tweens, paths can be stopped: use</p>

<code>utils.paths.stopPath</code>

<p>for that purpose. Again, like tweens, path starting functions accept optional</p>

<code>onFinishCallback</code>

<p>argument which is executed after a path finishes. If a path was explicitly stopped via</p>

<code>utils.paths.stopPath</code>

<p>, callback is not executed. Use</p>

<code>utils.paths.getOnFinishCallback</code>

<p>to obtain a callback and call it before stopping a path, if required.</p>

<p>Paths also accept optional</p>

<code>onPointReachedCallback</code>

<p>argument which is executed when a path reaches one of its milestones (</p>

<code>points</code>

<p>).</p>

<p>The following example logs a messages when the box finishes each segment of the path, and another when the entire path is done.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Toggle</h2>

<code>utils.toggles.*</code>

<p>family of functions enables switching an entity between two possible states, running a specified callback on every transition.</p>

<code>utils.toggles.addToggle</code>

<p>assigns an initial state (either</p>

<code>utils.ToggleState.On</code>

<p>or</p>

<code>utils.ToggleState.Off</code>

<p>) to an entity and the function to be run on a state change.</p>

<code>utils.toggles.removeToggle</code>

<p>removes the toggle from an entity.</p>

<p>Entity's state can be set explicitly via</p>

<code>utils.toggles.set</code>

<p>or flipped via</p>

<code>utils.toggles.flip</code>

<p>. Query entity's state by calling</p>

<code>utils.toggles.isOn</code>

<p>: it returns a boolean, where</p>

<code>true</code>

<p>means ON.</p>

<p>Callback can be changed by calling</p>

<code>utils.toggles.setCallback</code>

<p>.</p>

<p>The following example switches the color of a box between two colors each time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Combine toggle with a tween</h3>

<p>This example combines a toggle with a tween to switch an entity between two positions every time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Timers</h2>

<p>These tools are all related to the passage of time in the scene.</p>

<h3>Delay a function</h3>

<p>Use</p>

<code>utils.timers.setTimeout</code>

<p>to delay the execution of a function by a given amount of milliseconds.</p>

<p>This example delays the logging of a message by 1000 milliseconds.</p>

<h3>Repeat at an interval</h3>

<p>Use</p>

<code>utils.timers.setInterval</code>

<p>to execute a function every</p>

<code>n</code>

<p>milliseconds.</p>

<p>This example creates an entity that changes its scale to a random size every 2 seconds.</p>

<h3>Canceling execution</h3>

<p>Both</p>

<code>utils.timers.setInterval</code>

<p>and</p>

<code>utils.timers.setTimeout</code>

<p>return a unique</p>

<code>TimerId</code>

<p>which can be used to cancel delayed or repeated execution by calling</p>

<code>utils.timers.clearInterval</code>

<p>and</p>

<code>utils.timers.clearTimeout</code>

<p>respectively. In the example below a box keep changing its color every second until it's clicked on.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Triggers</h2>

<code>utils.triggers.*</code>

<p>family of functions powers trigger areas which can be added to entities and which report when intersections with other trigger areas arise or cease.</p>

<h3>Create a trigger</h3>

<p>Use</p>

<code>utils.triggers.addTrigger</code>

<p>to add a trigger area to an entity. It has the following arguments:</p>

<code>entity</code>

<li>: Trigger's owner entity. Trigger area's coordinates depend on</li>

<code>entity</code>

<li>'s Transform component.</li>

<code>layerMask</code>

<li>: Specificies layers to which this trigger belongs to. The library provides eight layers:</li>

<code>utils.LAYER_1</code>

<li>, ...</li>

<code>utils.LAYER_8</code>

<li>. If an entity is supposed to belong to multiple layers, for example layer 1 and layer 3, set</li>

<code>layerMask</code>

<li>to a combination of layer constants separated by</li>

<code>|</code>

<li>(bitwise OR):</li>

<code>utils.LAYER_1 | utils.LAYER_3</code>

<li>. If an entity is supposed to belong to all 8 layers, set</li>

<code>layerMask</code>

<li>to</li>

<code>utils.ALL_LAYERS</code>

<li>. Default value of</li>

<code>layerMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity does not belong to any layer and won't be able to trigger other entities (it still can be triggered by others, see</li>

<code>triggeredByMask</code>

<li>below).</li>

<code>triggeredByMask</code>

<li>: Specifies layers which can trigger an entity. For example, if an entity is supposed to be triggered by entities that belong to either or both layer 2 and layer 4, set</li>

<code>triggeredByMask</code>

<li>to</li>

<code>utils.LAYER_2 | utils.LAYER_4</code>

<li>. Default value of</li>

<code>triggeredByMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity won't be triggered by other entities at all. When set to</li>

<code>utils.ALL_LAYERS</code>

<li>an entity will be triggered by all entities that belong to at least one layer.</li>

<code>areas</code>

<li>: An array of shapes (either boxes or spheres) which describes trigger area. A box is indicated by the object</li>

<code>{type: 'box', position?: Vector3, scale?: Vector3}</code>

<li>, and a sphere by the object</li>

<code>{type: 'sphere', position?: Vector3, radius?: number}</code>

<li>.</li>

<code>position</code>

<li>,</li>

<code>scale</code>

<li>and</li>

<code>radius</code>

<li>fields are optional and default to</li>

<code>{x: 0, y: 0, z: 0}</code>

<li>,</li>

<code>{x: 1, y: 1, z: 1}</code>

<li>and</li>

<code>1</code>

<li>respectively. Please note that box's or sphere's coordinates are relative to</li>

<code>entity</code>

<li>'s Transform. Additionally, box areas always stay axis-aligned, disregarding</li>

<code>entity</code>

<li>'s rotation.</li>

<code>onEnterCallback</code>

<li>: This function will be called when a trigger's area intersects with an area of another, layer-compatible trigger. It will receive an entity which owns intersecting trigger as a single argument.</li>

<code>onExitCallback</code>

<li>: This function will be called when a trigger's area no longer intersects with an area of another trigger. It will receive an entity which owns formerly intersecting trigger as a single argument.</li>

<code>debugColor</code>

<li>: Defines a color of trigger area's shapes when debug visualization is active: call</li>

<code>utils.triggers.enableDebugDraw(true)</code>

<li>to enable it.</li>

<p>The following example creates a trigger that changes its position randomly when triggered by the player. Please note that the library automatically creates a trigger area for the player entity: it's a box closely matching avatar's shape with</p>

<code>layerMask</code>

<p>set to</p>

<code>utils.LAYER_1</code>

<p>and</p>

<code>triggeredByMask</code>

<p>set to</p>

<code>utils.NO_LAYERS</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Tip: to set a custom shape and other parameters of player's trigger first remove a default trigger via</p>

<code>utils.triggers.removeTrigger(engine.PlayerEntity)</code>

<p>and then specify your own trigger via</p>

<code>utils.triggers.addTrigger(engine.PlayerEntity, ...)</code>

<p>.</p>

<h3>Disable a trigger</h3>

<p>You can temporarily disable a trigger by calling</p>

<code>utils.triggers.enableTrigger(entity, false)</code>

<p>. Enable it again by calling</p>

<code>utils.triggers.enableTrigger(entity, true)</code>

<p>. Remove trigger altogether by calling</p>

<code>utils.triggers.removeTrigger(entity)</code>

<p>.</p>

<h3>One time Trigger</h3>

<p>As a shortcut for creating a trigger area that is only actioned once when the player first walks in or out, use the</p>

<code>utils.triggers.oneTimeTrigger</code>

<p>. This function has same arguments as</p>

<code>utils.triggers.addTrigger</code>

<p>, apart for</p>

<code>onExitCallback</code>

<p>. This function is especially useful for optimizing the loading of a scene, so that certain elements aren't loaded till a player walks into an area.</p>

<p>In the example below, the trigger area will only display welcome message the first time a player walks in. After that, the entity is removed from the scene.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Trigger layers</h3>

<p>You can define different layers for triggers, and set which other layers can trigger it.</p>

<p>The following example creates a scene that has:</p>

<li>food (green box)</li>

<li>mouse (blue sphere)</li>

<li>cat (red sphere)</li>

<p>Food is triggered (or eaten) by both cat and mouse. Also, mice are eaten by cats, so a mouse's trigger area is triggered only by a cat.</p>

<p>Cat and mouse always move towards the food. When food or mouse are eaten, they respawn in a random location.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Math</h2>

<h3>Remap</h3>

<code>utils.remap</code>

<p>maps a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum. It takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min1</code>

<li>: Minimum value in the range of the input.</li>

<code>max1</code>

<li>: Maximum value in the range of the input.</li>

<code>min2</code>

<li>: Minimum value in the range of the output.</li>

<code>max2</code>

<li>: Maximum value in the range of the output.</li>

<p>The following example maps the value</p>

<em>5</em>

<p>from a scale of 0 to 10 to a scale of 300 to 400. The resulting value is 350, as it keeps the same proportion relative to the new maximum and minimum values.</p>

<h3>World position</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform position will be relative to its parent. To find what its global position is, taking into account any parents, use</p>

<code>utils.getWorldPosition</code>

<p>. It returns a</p>

<code>Vector3</code>

<p>object, with the resulting position of adding the given entity and all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world position.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>World rotation</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform rotation will be relative to its parent. To find what its global rotation is, taking into account any parents, use</p>

<code>utils.getWorldRotation</code>

<p>. It returns a</p>

<code>Quaternion</code>

<p>object, with the resulting rotation of multiplying the given entity to all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world rotation.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>##Â Other helpers</p>

<p>The library offers a few other functions that may be useful as shortcuts for common use cases.</p>

<p>##Â Get entity parent</p>

<p>Returns an entity that is the parent of the provided entity.</p>

<h2>Get entities with parent</h2>

<p>Returns an array of entities that all share the provided entity as parent.</p>

<h2>Get player position</h2>

<p>Returns the position of the player's avatar.</p>

<p>Note: Always call this function inside the main() function, a function called indirectly by it, or a system. Otherwise, you might be attempting to fetch data that doesn't yet exist.</p>

<h2>Play sound</h2>

<p>Plays a sound from an audio file, at a given location in the scene. This saves you from having to create an entity and give it a position and AudioSource component.</p>

<h2>Action sequence</h2>

<p>Use an action sequence to play a series of actions one after another.</p>

<h3>IAction</h3>

<p>The</p>

<code>actions.IAction</code>

<p>interface defines the actions that can be added into a sequence. It includes:</p>

<code>hasFinished</code>

<li>: Boolean for the state of the action, wether it has finished its execution or not.</li>

<code>onStart()</code>

<li>: First method that is called upon the execution of the action.</li>

<code>update()</code>

<li>: Called on every frame on the action's internal update.</li>

<code>onFinish()</code>

<li>: Called when the action has finished executing.</li>

<h3>Sequence builder</h3>

<p>This object creates action sequences, using simple building blocks.</p>

<p>The</p>

<code>actions.SequenceBuilder</code>

<p>exposes the following methods:</p>

<code>then()</code>

<li>: Enqueue an action so that it's executed when the previous one finishes.</li>

<code>if()</code>

<li>: Use a condition to branch the sequence</li>

<code>else()</code>

<li>: Used with if() to create an alternative branch</li>

<code>endIf()</code>

<li>: Ends the definition of the conditional block</li>

<code>while()</code>

<li>: Keep running the actions defined in a block until a condition is no longer met.</li>

<code>breakWhile()</code>

<li>: Ends the definition of the while block</li>

<h3>Sequence runner</h3>

<p>The</p>

<code>actions.SequenceRunner</code>

<p>object takes care of running sequences created by</p>

<code>actions.SequenceBuilder</code>

<p>. It exposes the following methods:</p>

<code>startSequence()</code>

<li>: Starts a sequence of actions</li>

<code>setOnFinishCallback()</code>

<li>: Sets a callback for when the whole sequence is finished</li>

<code>isRunning()</code>

<li>: Returns a boolean that determines if the sequence is running</li>

<code>stop()</code>

<li>: Stops a running the sequence</li>

<code>resume()</code>

<li>: Resumes a stopped sequence</li>

<code>reset()</code>

<li>: Resets a sequence so that it starts over</li>

<code>destroy()</code>

<li>: Removes a sequence from the engine</li>

<h3>Full example</h3>

<p>The following example creates a box that changes its scale until clicked. Then it resets its scale and moves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<p>SDK 7 Utils Library</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/quests-client

# URL: https://github.com/decentraland/quests-client

<title>GitHub - decentraland/quests-client: Quests Client for SDK7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Quests Client for SDK7</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/quests-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>4</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>27</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Quests Client - SDK7</h1>

<p>Quests Client for SDK7 is a</p>

<p>which interacts with the</p>

<p>to track quests states and send events to make progress.</p>

<h1>Setup</h1>

<p>If you want to contribute to this project, you will need to install the dependencies and build the project.</p>

<p>Start by installing NPM dependecies:</p>

<pre>$</pre>

<p>The project uses the Quests Service</p>

<p>to generate the code required to compile, so before start the development, make sure you run:</p>

<pre>$</pre>

<h1>Usage</h1>

<p>This library is intended to be used in a Decentraland Scene and uses SDK7 features like user authentication to initialize the client.</p>

<p>You can find the documentation to start using the library</p>

<p>.</p>

<h2>Install</h2>

<p>Add dependency to your project</p>

<pre>$</pre>

<h2>Example</h2>

<p>Create the Quests Client inside the</p>

<code>executeTask</code>

<p>and if the wallet based authentication is OK you will be ready to use the client to subscribe to updates or send new events that may make progress on a quest.</p>

<p>For this example we registered two observables to make use of the client from any other part of your code:</p>

<code>questEventsObservable</code>

<p>and</p>

<code>questStartObservable</code>

<pre>action</pre>

<h3>Scene Example: Quests Tracking</h3>

<p>In this</p>

<p>you may find a scene that makes use of all the Quests Client features.</p>

<p>Or you can go and check out the library documentation</p>

<h2>About</h2>

<p>Quests Client for SDK7</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rpc

# URL: https://github.com/decentraland/rpc

<title>GitHub - decentraland/rpc</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rpc</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>10</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>43</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/rpc</h1>

<h2>Main engine of change</h2>

<code>decentraland-rpc</code>

<p>was the first repository we build to create the decentraland explorer (the game client and SDK).

It is probably the only thing that is left from that time, even though it passed the test of time very well we often make suboptimal decisions because the way it works.

It is time to start reconsidering what things we have been sacrificing, even without noticing, that may be of a greater value in the future 5 years of Decentraland.</p>

<p>This is a non-exhaustive list of considerations for this new protocol:</p>

<li>Most of the time, it will be a in-memory transport, that is, communication between processes or threads. Not over a network wire.</li>

<li>While we use an in-browser approach for the Explorer, browser optimizations must be taken into account</li>

<li>Transferable objects between Workers and Renderer threads,</li>

<code>SharedArrayBuffers</code>

<li>when possible.</li>

<li>Not serialize everything to JSON back-and-forth</li>

<li>Remove stacked layers, optimize function calls and object allocations</li>

<li>Copying slices of ArrayBuffers is heavily optimized in browsers</li>

<li>Unity will only care about ArrayBuffers written to its memory, there will be no need to use JSON in the main threads</li>

<li>We may want to run several scenes in the same worker, multiplexing should be part of the initial design.</li>

<li>To maintain a healthy anti corruption layer (ACL), any kind of application should find the the RPC library useful. Not only the decentraland Explorer and scenes.</li>

<h3>Design requirements</h3>

<li>Notifications will evolve into streams, nowadays subscribing to an event is difficult to reason and hard to code</li>

<li>RPC Definition may leverage GRPC code generation to document the protocol itself</li>

<li>Remote procedures must be initialized by requesting a module</li>

<li>Module-based remote calls did prove themselves useful with time, to organize the remote calls we may continue using modules. Rename classes to modules.</li>

<h3>Notice</h3>

<li>Even though this document will be written using protocol buffers, the implementation may use a smaller and faster hand-made protocol for performance.</li>

<li>Message payloads may or may not use protocol buffers</li>

<h4>Start a RPC session and load a module to call a remote procedure</h4>

<code>participant Client as C

participant Server (Remote) as S

note over C: Port lifecycle

C->C: createPort(name)

C->S: CreatePort {message_id,name}

S->S: createPortAdapter(port_id, name)\nConfigure modules for the named port

S->C: CreatePortResponse {message_id,port_id}

note over C: Modules lifecycle

C->S: LoadModule {port_id,module_name}

S->C: LoadModuleResponse {port_id,module_id,procedures[]}

C->C: Create wrapper for module_id\nusing all the exposed procedures</code>

<h2>RPC messages</h2>

<p>The RPC communications resemble JSON-RPC, the main differences are:</p>

<li>The</li>

<code>method</code>

<li>field is now called</li>

<code>procedure_id</code>

<li>(and it is a number)</li>

<code>module_id</code>

<li>was removed</li>

<code>payload</code>

<li>can be anything (serialized)</li>

<h4>Regular RPC call from Scene to Kernel</h4>

<code>participant Scene (client) as C

participant Kernel (server) as S

C->S: Request {procedure_id, payload}

S->C: Response {message_id, payload}</code>

<h4>Getting an async stream (closed by client)</h4>

<code>participant Scene (client) as C

participant Kernel (server) as S

C->S: Request {message_id}

S->C: Response {message_id,streaming=true,seqId=0}

C->C: Generate async iterator for {message_id}

C->S: StreamMessage {ack=true,message_id,seqId=0}

note over C: Ask for a new item to be generated using ack=true

S-->C: StreamMessage {message_id,payload,seqId=1}

C->S: StreamMessage {ack=true,message_id,seqId=1}

note over C: Close the message by responding\nthe last ACK with ack=true,closed=true

S-->C: StreamMessage {message_id,payload,seqId=2}

C->S: StreamMessage {ack=true,message_id,seqId=2,closed=true}

S->S: Close async Generator

C->C: Close async Iterator

S-->C: StreamMessage {message_id,closed=true}

C->C: Close async iterator</code>

<h4>Getting an async stream (closed by server)</h4>

<p>The server will send a special StreamMessage with a new SeqId to tell the client that a stream (generator)

was closed</p>

<h1>Implementation of the interfaces</h1>

<p>Nowadays the current RPC uses classes in the server side to keep track of the methods that can be called.

The classes are requested from the client using a similar mechanism as the previously defined, we now call them modules.

The classes used to implement a special interface in order to comply with the library, the semantics and the conventions of

those interfaces are hard to get while reading the code. The approach of this new library will be more

"verbosic" in order to allow the developers to understand what happens behind the curtain, and placing

them in control of the combinatorial semantics of the library.</p>

<h2>Simplest use case - Remote jobs</h2>

<h2>Advanced use cases</h2>

<h2>Design considerations</h2>

<li>The transport is the abstraction (represents the media layer)</li>

<li>Every packet has a</li>

<code>port_id</code>

<li>, to route the message to its correspondent instances (session layer, cluster management)</li>

<li>Default cluster coordinator uses</li>

<code>port_id = 0</code>

<li>Every message sends a blob payload. Code may be generated to understand the blob (application layer)</li>

<h2>Semantics of stream messages</h2>

<li>Streams share the same</li>

<code>messageId</code>

<li>Every message of the stream has an incremental</li>

<code>sequenceId</code>

<li>Streams have ACKs for each</li>

<code>sequenceId*messageId</code>

<li>The ACK message is an algebraic type:</li>

<code>Ack(messageId,sequenceId)</code>

<li>and</li>

<code>AckClose(messageId,sequenceId)</code>

<li>Messages of the stream are implemented using generators in mind, that is to support backpressure and to avoid network congestion</li>

<li>The first message of a stream also carries the first element of the stream</li>

<li>The</li>

<code>AckClose(messageId,sequenceId)</code>

<li>message carries no element, it is emitted right after the last element in the stream</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/pickup-quest-scene

# URL: https://github.com/decentraland/pickup-quest-scene

<title>GitHub - decentraland/pickup-quest-scene: Pick Up Example Quest Scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Pick Up Example Quest Scene</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/pickup-quest-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Quests Scene - SDK7</h1>

<p>This is a Decentraland Scene example using SDK7 and the</p>

<p>where you can see how it's used to show some information about the current Quests or to send events based on what's happening on the Explorer session.</p>

<h2>Start</h2>

<p>Use preview mode to test the feature:</p>

<pre>$</pre>

<h2>Quests Client in action</h2>

<p>In this example you will see:</p>

<strong>Quests Client creation</strong>

<p>: user is authenticated based on the signed headers provided by the SDK7</p>

<strong>Quests tracking UI</strong>

<p>:</p>

<li>Simple Quest Tracker UI that shows current state for each active Quest</li>

<li>Listen to Quest events to update the UI</li>

<strong>Quests Progress</strong>

<p>:</p>

<li>Systems reading the World state</li>

<li>Check when the user arrived to a parcel and send the Position event</li>

<li>Check when the user emotes and send the event</li>

<strong>Note</strong>

<p>:</p>

<em>Quests client</em>

<p>will check if the event to send applies to any active quest before sending it to the server.</p>

<h2>Quest Definition</h2>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

]

},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

]

},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

]

}

]

},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

]

}

]

}

],</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]

}

}</pre>

<h2>About</h2>

<p>Pick Up Example Quest Scene</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/editor-sdk7

# URL: https://github.com/decentraland/editor-sdk7

<title>GitHub - decentraland/editor-sdk7: VSCode extension for Decentraland SDK7 projects</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>VSCode extension for Decentraland SDK7 projects</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/editor-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>52</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>131</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Editor SDK7</h1>

<p>This extension allows you to build Decentraland scenes. A scene is a Decentraland project that is spatially delimited, and is mapped to one or several LAND parcels, or to a NAME in a Decentraland world. If a scene is deployed to the Decentraland map, players can experience it by visiting the sceneâs coordinates. If a scene is deployed to a NAME, players can visit it by going to the corresponding world.</p>

<p>This extension provides an easy UI for performing the following tasks from the development workflow:</p>

<strong>Create projects</strong>

<li>: Scaffold a new scene project.</li>

<strong>Run scenes</strong>

<li>: Preview your scenes within VSCode, or launch in a browser.</li>

<strong>Debug scenes</strong>

<li>: Set breakpoints, use the debugger to stop/resume execution, see and modify the values of the variables in the scope, step over or step into your code line by line.</li>

<strong>Publish scenes</strong>

<li>: Publish your scene to the Genesis City, your own World, or a private/custom server.</li>

<strong>Manage dependencies</strong>

<li>: Add, remove, update, and list the libraries and dependencies that your project is using.</li>

<strong>Preview models</strong>

<li>: View an interactive preview window when selecting a</li>

<code>.gltf</code>

<li>or</li>

<code>.glb</code>

<li>model.</li>

<p>To learn how to work with this extension to create content for Decentralnad, check out the</p>

<p>and the</p>

<p>on the Decentraland</p>

<p>.</p>

<h2>About</h2>

<p>VSCode extension for Decentraland SDK7 projects</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-editor-sdk7

# Change to URL: https://github.com/decentraland/block-indexer

# URL: https://github.com/decentraland/block-indexer

<title>GitHub - decentraland/block-indexer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/block-indexer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>4</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>65</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Block Indexer</h1>

<p>A component to find the block in the blockchain that was the tip of the blockchain at a given timestamp.</p>

<h2>Usage</h2>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/collection-proxy-verifier

# URL: https://github.com/decentraland/collection-proxy-verifier

<title>GitHub - decentraland/collection-proxy-verifier</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/collection-proxy-verifier</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>35</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Collection Proxy Verifier</h1>

<p>Verify decentraland collections as proxies without the hassle of doing it manually.</p>

<h2>Usage</h2>

<p>Install dependencies with</p>

<code>npm ci</code>

<p>.</p>

<p>Copy the</p>

<code>.env.default</code>

<p>file into</p>

<code>.env</code>

<p>and fill the fields.</p>

<p>Run with</p>

<code>npm start</code>

<h2>Notes</h2>

<p>The application will attempt to verified collections from the oldest (created with the collection factory v3) to the newest.</p>

<p>The first time you run the application, a</p>

<code>./data.json</code>

<p>file will be created and filled with information about the verification attempts for each collection.</p>

<p>The second time you run the application, it will attempt to verify collections that have not been verified yet.</p>

<p>For example if we have collections A, B, C, D, E and we stopped the execution after C, the second execution will start at D.</p>

<p>You can try to verify collections that failed any previous attempt by running</p>

<code>npm run start:failed</code>

<p>.</p>

<p>Always commit the</p>

<code>data.json</code>

<p>file so anyone can continue the progress of the previous person.</p>

<h2>25/07/2022</h2>

<p>~700 collections were verified directly by the PolygonScan team. This had to be done by them because API keys only have the capability of doing 100 per day.</p>

<p>The latest verified collection proxy was</p>

<p>which was indexed with a</p>

<code>createdAt</code>

<p>of</p>

<code>1658747198</code>

<p>The</p>

<code>.env.example</code>

<p>already has that value (+1 second so that collection is ignored) for CREATED_AT_GTE but make sure the copied</p>

<code>.env</code>

<p>has that same value too so older collections are not re-verified.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=1

# URL: https://github.com/orgs/decentraland/repositories?page=1

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Unity project for converting GLTFs to AssetBundles</p>

<p>Decentraland Auth UI</p>

<p>Code for the server dedicated to auth stuff</p>

<p>A client to query and perform changes on Decentraland's catalyst servers</p>

<p>Notification producer</p>

<p>API definition for the Catalyst Server implementation</p>

<p>ð§ Content server for Decentraland</p>

<p>Service to generate and profile images of avatars</p>

<p>Opinionated All-in-one Web Framework</p>

<p>ð¦ Decentraland UI</p>

<p>ð Build scenes for Decentraland</p>

<p>ð Collection of 3D models for Decentraland avatars</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=3

# URL: https://github.com/orgs/decentraland/repositories?page=3

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Service that acts as a Third Party Integrations resolver exposing only the healthy ones.</p>

<p>A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</p>

<p>Platform's Http Server Common utils</p>

<p>Storage engines for catalyst projects</p>

<p>Signatures server implementation</p>

<p>Scene entities manifest builder for the LODs solution for Decentraland's new Explorer</p>

<p>Builder asset packs</p>

<p>Quests Desginer React Component</p>

<p>A collection of handy functions for crypto operations in Decentraland scenes</p>

<p>This website hosts a dApp used to upload and see what others are organizing inside the Decentraland virtual world.</p>

<p>An implementation of StreamingFast's substreams for dcl contracts</p>

<p>A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</p>

<p>Everything necessary for catalyst owners to deploy their own node</p>

<p>Scene runtime for JS environments</p>

<p>Adaption Layer between from SDK6 to SDK7</p>

<p>This is the repository for the website served in play.decentraland.org</p>

<p>Hashing utilities for Decentraland</p>

<em>3</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/third-party-providers-resolver

# URL: https://github.com/decentraland/third-party-providers-resolver

<title>GitHub - decentraland/third-party-providers-resolver: Service that acts as a Third Party Integrations resolver exposing only the healthy ones.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Service that acts as a Third Party Integrations resolver exposing only the healthy ones.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/third-party-providers-resolver</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>20</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Third Party Providers Resolver</h1>

<p>This service filters and returns the</p>

<p>that are in a healthy state.</p>

<h2>Implementation</h2>

<p>What this service does:</p>

<li>Retrieves all Third Party Providers from TheGraph</li>

<li>Checks the health of each Third Party Provider by fetching the endpoint required in the</li>

<li>Caches the providers that are healthy in a memory storage (</li>

<em>LRU cache</em>

<li>)</li>

<li>Returns the healthy providers every time the endpoint</li>

<code>GET /providers</code>

<li>is called</li>

<h3>What healthy means on this service's context?</h3>

<p>If any Third Party Provider's endpoint returns a</p>

<code>200 OK</code>

<p>status code when fetched, it will be regarded as</p>

<strong>healthy</strong>

<p>.</p>

<h2>Exposed endpoints</h2>

<p>This service only exposes</p>

<code>GET /providers</code>

<p>endpoint which returns a JSON containing the healthy providers (</p>

<em>the unhealthy providers are not returned on this endpoint</em>

<p>). Response example:</p>

<pre>{</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}

}

]

}</pre>

<h2>About</h2>

<p>Service that acts as a Third Party Integrations resolver exposing only the healthy ones.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/platform-crypto-middleware

# URL: https://github.com/decentraland/platform-crypto-middleware

<title>GitHub - decentraland/platform-crypto-middleware: A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/platform-crypto-middleware</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>43</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Platform Authentication Middleware</h1>

<p>Platform's fork of</p>

<h2>About</h2>

<p>A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-crypto-middleware

# URL: https://github.com/decentraland/decentraland-crypto-middleware

<title>GitHub - decentraland/decentraland-crypto-middleware: A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-crypto-middleware</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>37</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Authentication Middleware</h1>

<p>A multi framework middleware to authenticate request signed with</p>

<code>@decentraland/SignedFetch</code>

<h2>Index</h2>

<h2>Install</h2>

<pre>npm install -s decentraland-crypto-middleware</pre>

<h2>Use with</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Use with</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Use with</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Use with</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Options</h2>

<code>name</code>

<code>type</code>

<code>description</code>

<code>optional</code>

<code>boolean</code>

<td>if</td>

<code>false</code>

<td>request will fail if there is no signature or if is invalid (default:</td>

<code>false</code>

<td>)</td>

<code>expiration</code>

<code>number</code>

<td>time in milliseconds where a signature is considered valid (default:</td>

<code>60_000</code>

<td>)</td>

<code>catalyst</code>

<code>string</code>

<td>catalyst url to validate contract wallet signatures (default:</td>

<code>https://peer-lb.decentraland.org/</code>

<td>)</td>

<code>onError</code>

<code>(err: Error & { statusCode: number }) => any</code>

<td>formats the response body when an error occurred (default:</td>

<code>(err) => ({ ok: false, message: err.message })</code>

<td>)</td>

<h3>Auth Chain Generator</h3>

<p>If you want to simulate signed headers you can use the</p>

<code>Auth Chain Generator</code>

<h2>Develop</h2>

<p>If you want to contribute make you will need to setup</p>

<code>husky</code>

<p>otherwise your commit may fail because is not following the format standard</p>

<pre>npm run husky-setup</pre>

<h2>About</h2>

<p>A multi framework middleware to authenticate request signed with @decentraland/SignedFetch</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>10</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-authentication-middleware

# Change to URL: https://github.com/decentraland/catalyst-contracts

# URL: https://github.com/decentraland/catalyst-contracts

<title>GitHub - decentraland/catalyst-contracts</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-contracts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>32</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>57</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Catalyst Contracts</h1>

<p>A set of utilities for Catalyst nodes, related to interacting with the DAO</p>

<h2>Contributing</h2>

<p>Please read</p>

<p>so that you can understand what actions will and will not be tolerated.</p>

<p>Read our</p>

<p>to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes.</p>

<h2>Release</h2>

<li>Create a tag release in Git</li>

<li>It will trigger the CI job which publishes a new docker image version under</li>

<code>@latest</code>

<li>tag</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>12</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/scene-state-server

# URL: https://github.com/decentraland/scene-state-server

<title>GitHub - decentraland/scene-state-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/scene-state-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>9</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>27</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Running locally</h1>

<p>Create a</p>

<code>.env</code>

<p>file with the var</p>

<code>LOCAL_SCENE_PATH</code>

<p>pointed to your scene compiled game file. For example:</p>

<code>LOCAL_SCENE_PATH=../moving-platforms-multiplayer-test/bin/game.js</code>

<p>Run</p>

<code>yarn</code>

<p>to install dependencies,</p>

<code>yarn build</code>

<p>to build the server, and every time you compile your scene the server should be started running</p>

<code>yarn start</code>

<h1>Deploying the server to prod</h1>

<p>You can find a public docker image in</p>

<code>quay.io/decentraland/scene-state-server</code>

<p>, or build it yourself.</p>

<code>LOCAL_SCENE_PATH</code>

<p>should not be included in the deployed environment. You can specify a world server url with</p>

<code>WORLD_SERVER_URL</code>

<p>, and you</p>

<em>must</em>

<p>specify a</p>

<code>DEBUGGING_SECRET</code>

<p>.</p>

<p>Once the server is running and before be able to use the server in a world, you need to request the server to load the world's scene:</p>

<code>curl -H "Content-Type: application/json" -X POST --data '{"secret": <secret>, "name": "<world name>"}' https://<server url>/debugging/reload</code>

<p>you can use the same command to restart the scene state.</p>

<p>Please remember this API is alpha, eventually, we would like to integrate new worlds deployment in a more straightforward way.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/matchmaking-server

# URL: https://github.com/decentraland/matchmaking-server

<title>GitHub - decentraland/matchmaking-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/matchmaking-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/platform-server-commons

# URL: https://github.com/decentraland/platform-server-commons

<title>GitHub - decentraland/platform-server-commons: Platform's Http Server Common utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Platform's Http Server Common utils</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/platform-server-commons</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Platform Http Server Commons</h1>

<h2>About</h2>

<p>Platform's Http Server Common utils</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-storage

# URL: https://github.com/decentraland/catalyst-storage

<title>GitHub - decentraland/catalyst-storage: Storage engines for catalyst projects</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Storage engines for catalyst projects</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-storage</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>16</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>51</strong>

<h2>Files</h2>

<button>View code</button>

<h1>base-ts-project</h1>

<p>Use this project as template for TypeScript libraries</p>

<h2>About</h2>

<p>Storage engines for catalyst projects</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk-content-server

# URL: https://github.com/decentraland/sdk-content-server

<title>GitHub - decentraland/sdk-content-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-content-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK Content Server</h1>

<p>This is the simplest content server API needed to deploy and retrieve scenes.</p>

<p>It uses the</p>

<code>@dcl/catalyst-storage</code>

<p>library to store the deployments directly on the disk or S3.</p>

<h1>Deploying entities to this server</h1>

<p>The deployments accepted by this server only run one validation: Allowlist of signer address.</p>

<p>The validations are performed against</p>

<p>, this can be easily configured in the file</p>

<p>Besides the schema and hashing validity of the entities, no other ownership or file size checks are performed.</p>

<h2>Deploying using the CLI tool</h2>

<p>Once your signer address is added to the allow-list, then you should be able to deploy to this server. The recommended approach is by the CLI tool. You must specify the URL of this server as</p>

<code>--content-server</code>

<p>to make it work, like this:</p>

<pre>my-scene</pre>

<pre>DCL_PRIVATE_KEY=0x....

dcl deploy --target-content https://sdk-content-server.decentraland.org</pre>

<p>Upon successful deployment, the latest version of the CLI should print some helpful information about how to preview the scene along with the addressable URN of the deployment.</p>

<h3>Addressable URN</h3>

<p>A deployment in Decentraland can live anywhere as long as it complies with the format. To consistently identify deployments and their location in servers, the concept of addressable URN is introduced.</p>

<p>Let a valid deployment URN be:</p>

<code>urn:decentraland:entity:bafkreihpipyhrt75xyquwrynrtjadwb373xfosy7a5rhlh5vogjajye3im</code>

<p>That deployment will be downloaded from the configured content server by default. But for testing purposes, the content servers are not always the most straight forward way to test. To help the operations, a baseUrl query parameter can be added:</p>

<code>?baseUrl=https://sdk-content-server.decentraland.org/ipfs/</code>

<p>yielding a full URN like this:</p>

<code>urn:decentraland:entity:bafkreihpipyhrt75xyquwrynrtjadwb373xfosy7a5rhlh5vogjajye3im?baseUrl=https://sdk-content-server.decentraland.org/ipfs/</code>

<p>Now the explorers know where to look for when downloading that entity, bypassing the content servers. Or more precisely, pointing to this server which acts as content server.</p>

<h1>Using Addressable URNs</h1>

<p>As of the moment of writing this document, there are two ways to use the addressable URNs: as global portable experiences and as single scene instead of loading the genesis city.</p>

<p>The first one is used to generate experiences for all users, like the pride event calendar. It can be tested by adding the</p>

<code>GLOBAL_PX=<urn></code>

<p>query parameter to the explorer. Like this</p>

<p>The second use case is to load a singular scene instead of the full genesis city. Likewise, it is done via adding a</p>

<code>SPACE=<urn></code>

<p>query parameter, like this:</p>

<p>Portable experiences and single scenes (spaces) can be used at the same time to generate dynamic experiences.</p>

<p>These flows are designed to improve the user experience in the areas like onboarding experiences, helper calendars for events, and for debugging purposes among others.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/signatures-server

# URL: https://github.com/decentraland/signatures-server

<title>GitHub - decentraland/signatures-server: Signatures server implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Signatures server implementation</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/signatures-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>13</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>340</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Signatures server</h1>

<p>The signatures server is a REST API that provides a way to store and retrieve contract signatures.</p>

<h2>Getting started</h2>

<li>Set up the</li>

<code>.env</code>

<li>file taking as a reference, the</li>

<code>.env.default</code>

<li>file.</li>

<li>Install the dependencies using</li>

<code>npm ci</code>

<li>.</li>

<li>Build the project using</li>

<code>npm run build</code>

<li>.</li>

<h2>About</h2>

<p>Signatures server implementation</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/scene-lod-entities-manifest-builder

# URL: https://github.com/decentraland/scene-lod-entities-manifest-builder

<title>GitHub - decentraland/scene-lod-entities-manifest-builder: Scene entities manifest builder for the LODs solution for Decentraland's new Explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Scene entities manifest builder for the LODs solution for Decentraland's new Explorer</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/scene-lod-entities-manifest-builder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<p>This LODs Manifest Builder was created based on the experimental</p>

<p>.</p>

<p>Original implementation commits history can be found in</p>

<p>.</p>

<h1>IMPORTANT</h1>

<p>To be able to use the tool,</p>

<code>node</code>

<p>version</p>

<code>v18.14.2</code>

<p>is mandatory (newer or older versions may not work).</p>

<h2>What this tool does</h2>

<p>Based on a target scene, the manifest builder fetches its main file (</p>

<code>game.js</code>

<p>/</p>

<code>index.js</code>

<p>/</p>

<code>main.crdt</code>

<p>), runs it for some frames with a very basic version of the sdk7 core runtime and outputs a manifest JSON file with the rendereable entities information.</p>

<p>Information gathered:</p>

<li>Transform component data</li>

<li>GLTFContainer component data</li>

<li>MeshRenderer component data</li>

<li>Material component data</li>

<h2>SDK6 Scenes support</h2>

<p>This tool supports targetting SDK6 scenes as it uses the</p>

<p>when a non SDK7 scene is detected.</p>

<h2>Running the scene entities lod manifest builder</h2>

<p>Run</p>

<code>npm i</code>

<p>(on first installation/cloning).</p>

<p>Run</p>

<code>npm run build</code>

<p>to build the tool after any modification (or first install).</p>

<h3>For remote target scene</h3>

<li>Run</li>

<code>npm run start --coords=COORDS-GO-HERE</code>

<li>to run the tool.</li>

<p>Example</p>

<code>npm run start --coords=100,100</code>

<h3>For local target scene (useful for debugging)</h3>

<li>Run</li>

<code>npm run start --path="PATH-GOES-HERE"</code>

<li>to run the tool.</li>

<p>Example</p>

<code>npm run start --path="../sdk7-scene-template/bin/index.js"</code>

<h2>Output</h2>

<p>When the manifest builder finishes, the output manifest file will appear as</p>

<code>/output-manifests/${sceneId}-lod-manifest.json</code>

<p>.</p>

<p>By default the manifest builder doesn't overwrite a manifest that has already been built, this is done by checking the existent manifest filename with the target scene id.</p>

<p>Since scene ids change every time a scene is deployed to the catalyst/content-servers, by having the scene id in the manifest file name we can avoid creating a new manifest unnecessarily (e.g. if a service passes through every LAND coordinate and runs this tool, the manifest won't be re-generated for scenes that contain more than 1 LAND).</p>

<p>Overwriting existing manifests can be enabled by passing the</p>

<code>--overwrite</code>

<p>argument e.g.</p>

<code>npm run start --coords=0,0 --overwrite</code>

<p>.</p>

<h2>Alternative workflow with</h2>

<code>.env</code>

<h2>local file</h2>

<p>CLI arguments take priority over reading the</p>

<code>.env</code>

<p>file, so this other workflow only works if there is no CLI argument for that same setting.</p>

<h3>Configuring REMOTE target scene</h3>

<p>Create or modify the</p>

<code>.env</code>

<p>file with the var</p>

<code>REMOTE_SCENE_COORDS</code>

<p>specifying the target scene coordiantes. For example:</p>

<code>REMOTE_SCENE_COORDS=-129,-77</code>

<h3>Configuring LOCAL target scene</h3>

<p>Create or modify the</p>

<code>.env</code>

<p>file with the var</p>

<code>LOCAL_SCENE_PATH</code>

<p>specifying the target scene local path. For example:</p>

<code>LOCAL_SCENE_PATH=../sdk7-scene-template/bin/index.js</code>

<p>The</p>

<code>.env</code>

<p>file can be changed to target a different scene and then</p>

<code>npm run start</code>

<p>is needed again (no need to rebuild if there are no changes to the manifest builder sourcecode).</p>

<h2>About</h2>

<p>Scene entities manifest builder for the LODs solution for Decentraland's new Explorer</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dynamic-ui

# URL: https://github.com/decentraland/dynamic-ui

<title>GitHub - decentraland/dynamic-ui</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dynamic-ui</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl-sdk/utils</h1>

<p>This library includes a number of helpful pre-built tools that offer simple solutions to common scenarios that you're likely to run into.</p>

<h2>Using the Utils library</h2>

<p>To use any of the helpers provided by the utils library you must install it in your Decentrland project.</p>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you've</p>

<p>.</p>

<li>Open your scene's folder using Visual Studio Code.</li>

<strong>ð Note</strong>

<p>: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project's currently installed dependencies.</p>

<p>Click the</p>

<code>+</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write</p>

<code>@dcl-sdk/utils</code>

<p>and hit enter. The dependency is then installed to your scene.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h3>Via the CLI</h3>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl-sdk/utils</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Debug helpers</h2>

<h3>Label</h3>

<p>Add a text label floating over an entity using</p>

<code>utils.addLabel</code>

<p>. It has two required arguments:</p>

<code>text</code>

<li>: The string of text to display.</li>

<code>parent</code>

<li>: The entity to set the label on.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addLabel</code>

<p>also lets you set the following:</p>

<code>billboard</code>

<li>: If true, label turns to always face player. True by default.</li>

<code>color</code>

<li>: Text color. Black by default.</li>

<code>size</code>

<li>: Text font size, 3 by default.</li>

<code>textOffset</code>

<li>: Offset from parent entity's position. By default 1.5 meters above the parent.</li>

<p>Tip:</p>

<code>utils.addLabel</code>

<p>returns the created entity used for the text. You can then tweak this entity in any way you choose.</p>

<h3>Debug cube</h3>

<p>Render a simple clickable cube to use as a trigger when debugging a scene with</p>

<code>utils.addTestCube</code>

<p>. It has two required arguments:</p>

<code>transform</code>

<li>: The position, rotation and/or scale of the cube, expressed as a</li>

<code>TransformType</code>

<li>object, as gets passed when creating a</li>

<code>Transform</code>

<li>component.</li>

<code>triggeredFunction</code>

<li>: A function that gets called every time the cube is clicked.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addTestCube</code>

<p>also lets you set the following:</p>

<code>label</code>

<li>: An optional label to display floating over the cube.</li>

<code>color</code>

<li>: A color for the cube's material.</li>

<code>sphere</code>

<li>: If true, it renders as a Sphere instead of a cube.</li>

<code>noCollider</code>

<li>: If true, the cube won't have a collider and will let players walk through it.</li>

<p>Tip:</p>

<code>utils.addTestCube</code>

<p>returns the created entity for the cube. You can then tweak this entity in any way you choose.</p>

<h2>Tweens</h2>

<h3>Translate an entity</h3>

<p>To change entity's position over a period of time, use the</p>

<code>utils.tweens.startTranslation</code>

<p>.</p>

<p>This example moves an entity from one position to another over 2 seconds:</p>

<h3>Rotate an entity</h3>

<p>To rotate an entity over a period of time, from one direction to another, use</p>

<code>utils.tweens.startRotation</code>

<p>.</p>

<p>This example rotates an entity from one directions to another over 2 seconds:</p>

<h3>Scale an entity</h3>

<p>To adjust the scale of an entity over a period of time, from one size to another, use</p>

<code>utils.tweens.startScaling</code>

<p>.</p>

<p>This example scales an entity from one size to another over 2 seconds:</p>

<h3>Non-linear changes</h3>

<p>All tweens accept an optional argument which sets the rate of change. By default, translation, rotation, or scaling occur at a linear rate, but this can be set to other options.</p>

<code>utils.InterpolationType</code>

<p>enumeration lists all available interpolation types.</p>

<p>The following example moves a box following a quadratic ease-in rate:</p>

<h3>Stopping tweens and callbacks</h3>

<code>utils.tweens.stopTranslation</code>

<p>,</p>

<code>utils.tweens.stopRotation</code>

<p>and</p>

<code>utils.tweens.stopScaling</code>

<p>stop translation, rotation and scaling respectively.</p>

<p>In the following example tweens affecting a box are stopped when player clicks on a sphere:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>All tweens accept an optional argument</p>

<code>onFinishCallback</code>

<p>which is executed when a tween is complete. It is not executed if a tween was explicitly stopped via stop methods. Use</p>

<code>utils.tweens.getTranslationOnFinishCallback</code>

<p>,</p>

<code>utils.tweens.getRotationOnFinishCallback</code>

<p>and</p>

<code>utils.tweens.getScalingOnFinishCallback</code>

<p>to obtain tween's callback and call it before stopping a tween, if required.</p>

<p>The following example logs a message when the box finishes its movement.</p>

<h2>Perpetual motions</h2>

<h3>Perpetual rotation</h3>

<p>To rotate an entity continuously, use</p>

<code>utils.perpetualMotions.startRotation</code>

<p>. The entity will keep rotating forever until it's explicitly stopped.</p>

<code>rotationVelocity</code>

<p>argument is a quaternion describing the desired rotation to perform each second second. For example</p>

<code>Quaternion.fromEulerDegrees(0, 45, 0)</code>

<p>rotates the entity on the Y axis at a speed of 45 degrees per second, meaning that it makes a full turn every 8 seconds.</p>

<p>Rotation can be stopped by calling</p>

<code>utils.perpetualMotions.stopRotation</code>

<p>.</p>

<p>In the following example, a cube rotates continuously until clicked:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Path following</h2>

<h3>Straight path</h3>

<p>To move an entity over several points of a path over a period of time, use</p>

<code>utils.paths.startStraightPath</code>

<p>. Along with an entity which will follow a path you must specify two arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that form the path.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<p>There is one optional argument:</p>

<code>faceDirection</code>

<li>: When set to true, an entity will be rotated to face the direction of its movement.</li>

<p>This example moves an entity through four points over 10 seconds:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Smooth path</h3>

<p>To make an entity follow a smooth path over a period of time, use</p>

<code>utils.paths.startSmoothPath</code>

<p>. The smooth path is composed of multiple straight line segments put together. You only need to supply a series of fixed path points and a smooth curve is drawn to pass through all of these. You must specify an amount of segments via</p>

<code>segmentCount</code>

<p>argument.</p>

<code>faceDirection</code>

<p>argument works for smooth paths too.</p>

<p>This example makes entity follow a smooth path that's subdivided into 20 segments, over a period of 10 seconds. The curve passes through four key points.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>If the first and last points of a smooth path are identical, the library tries to facilitate smooth orientation change during movement over a loop. In the example below a box loops through three points forever.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Stopping paths and callbacks</h3>

<p>Just like tweens, paths can be stopped: use</p>

<code>utils.paths.stopPath</code>

<p>for that purpose. Again, like tweens, path starting functions accept optional</p>

<code>onFinishCallback</code>

<p>argument which is executed after a path finishes. If a path was explicitly stopped via</p>

<code>utils.paths.stopPath</code>

<p>, callback is not executed. Use</p>

<code>utils.paths.getOnFinishCallback</code>

<p>to obtain a callback and call it before stopping a path, if required.</p>

<p>Paths also accept optional</p>

<code>onPointReachedCallback</code>

<p>argument which is executed when a path reaches one of its milestones (</p>

<code>points</code>

<p>).</p>

<p>The following example logs a messages when the box finishes each segment of the path, and another when the entire path is done.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Toggle</h2>

<code>utils.toggles.*</code>

<p>family of functions enables switching an entity between two possible states, running a specified callback on every transition.</p>

<code>utils.toggles.addToggle</code>

<p>assigns an initial state (either</p>

<code>utils.ToggleState.On</code>

<p>or</p>

<code>utils.ToggleState.Off</code>

<p>) to an entity and the function to be run on a state change.</p>

<code>utils.toggles.removeToggle</code>

<p>removes the toggle from an entity.</p>

<p>Entity's state can be set explicitly via</p>

<code>utils.toggles.set</code>

<p>or flipped via</p>

<code>utils.toggles.flip</code>

<p>. Query entity's state by calling</p>

<code>utils.toggles.isOn</code>

<p>: it returns a boolean, where</p>

<code>true</code>

<p>means ON.</p>

<p>Callback can be changed by calling</p>

<code>utils.toggles.setCallback</code>

<p>.</p>

<p>The following example switches the color of a box between two colors each time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Combine toggle with a tween</h3>

<p>This example combines a toggle with a tween to switch an entity between two positions every time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Timers</h2>

<p>These tools are all related to the passage of time in the scene.</p>

<h3>Delay a function</h3>

<p>Use</p>

<code>utils.timers.setTimeout</code>

<p>to delay the execution of a function by a given amount of milliseconds.</p>

<p>This example delays the logging of a message by 1000 milliseconds.</p>

<h3>Repeat at an interval</h3>

<p>Use</p>

<code>utils.timers.setInterval</code>

<p>to execute a function every</p>

<code>n</code>

<p>milliseconds.</p>

<p>This example creates an entity that changes its scale to a random size every 2 seconds.</p>

<h3>Canceling execution</h3>

<p>Both</p>

<code>utils.timers.setInterval</code>

<p>and</p>

<code>utils.timers.setTimeout</code>

<p>return a unique</p>

<code>TimerId</code>

<p>which can be used to cancel delayed or repeated execution by calling</p>

<code>utils.timers.clearInterval</code>

<p>and</p>

<code>utils.timers.clearTimeout</code>

<p>respectively. In the example below a box keep changing its color every second until it's clicked on.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Triggers</h2>

<code>utils.triggers.*</code>

<p>family of functions powers trigger areas which can be added to entities and which report when intersections with other trigger areas arise or cease.</p>

<h3>Create a trigger</h3>

<p>Use</p>

<code>utils.triggers.addTrigger</code>

<p>to add a trigger area to an entity. It has the following arguments:</p>

<code>entity</code>

<li>: Trigger's owner entity. Trigger area's coordinates depend on</li>

<code>entity</code>

<li>'s Transform component.</li>

<code>layerMask</code>

<li>: Specificies layers to which this trigger belongs to. The library provides eight layers:</li>

<code>utils.LAYER_1</code>

<li>, ...</li>

<code>utils.LAYER_8</code>

<li>. If an entity is supposed to belong to multiple layers, for example layer 1 and layer 3, set</li>

<code>layerMask</code>

<li>to a combination of layer constants separated by</li>

<code>|</code>

<li>(bitwise OR):</li>

<code>utils.LAYER_1 | utils.LAYER_3</code>

<li>. If an entity is supposed to belong to all 8 layers, set</li>

<code>layerMask</code>

<li>to</li>

<code>utils.ALL_LAYERS</code>

<li>. Default value of</li>

<code>layerMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity does not belong to any layer and won't be able to trigger other entities (it still can be triggered by others, see</li>

<code>triggeredByMask</code>

<li>below).</li>

<code>triggeredByMask</code>

<li>: Specifies layers which can trigger an entity. For example, if an entity is supposed to be triggered by entities that belong to either or both layer 2 and layer 4, set</li>

<code>triggeredByMask</code>

<li>to</li>

<code>utils.LAYER_2 | utils.LAYER_4</code>

<li>. Default value of</li>

<code>triggeredByMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity won't be triggered by other entities at all. When set to</li>

<code>utils.ALL_LAYERS</code>

<li>an entity will be triggered by all entities that belong to at least one layer.</li>

<code>areas</code>

<li>: An array of shapes (either boxes or spheres) which describes trigger area. A box is indicated by the object</li>

<code>{type: 'box', position?: Vector3, scale?: Vector3}</code>

<li>, and a sphere by the object</li>

<code>{type: 'sphere', position?: Vector3, radius?: number}</code>

<li>.</li>

<code>position</code>

<li>,</li>

<code>scale</code>

<li>and</li>

<code>radius</code>

<li>fields are optional and default to</li>

<code>{x: 0, y: 0, z: 0}</code>

<li>,</li>

<code>{x: 1, y: 1, z: 1}</code>

<li>and</li>

<code>1</code>

<li>respectively. Please note that box's or sphere's coordinates are relative to</li>

<code>entity</code>

<li>'s Transform. Additionally, box areas always stay axis-aligned, disregarding</li>

<code>entity</code>

<li>'s rotation.</li>

<code>onEnterCallback</code>

<li>: This function will be called when a trigger's area intersects with an area of another, layer-compatible trigger. It will receive an entity which owns intersecting trigger as a single argument.</li>

<code>onExitCallback</code>

<li>: This function will be called when a trigger's area no longer intersects with an area of another trigger. It will receive an entity which owns formerly intersecting trigger as a single argument.</li>

<code>debugColor</code>

<li>: Defines a color of trigger area's shapes when debug visualization is active: call</li>

<code>utils.triggers.enableDebugDraw(true)</code>

<li>to enable it.</li>

<p>The following example creates a trigger that changes its position randomly when triggered by the player. Please note that the library automatically creates a trigger area for the player entity: it's a box closely matching avatar's shape with</p>

<code>layerMask</code>

<p>set to</p>

<code>utils.LAYER_1</code>

<p>and</p>

<code>triggeredByMask</code>

<p>set to</p>

<code>utils.NO_LAYERS</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Tip: to set a custom shape and other parameters of player's trigger first remove a default trigger via</p>

<code>utils.triggers.removeTrigger(engine.PlayerEntity)</code>

<p>and then specify your own trigger via</p>

<code>utils.triggers.addTrigger(engine.PlayerEntity, ...)</code>

<p>.</p>

<h3>Disable a trigger</h3>

<p>You can temporarily disable a trigger by calling</p>

<code>utils.triggers.enableTrigger(entity, false)</code>

<p>. Enable it again by calling</p>

<code>utils.triggers.enableTrigger(entity, true)</code>

<p>. Remove trigger altogether by calling</p>

<code>utils.triggers.removeTrigger(entity)</code>

<p>.</p>

<h3>One time Trigger</h3>

<p>As a shortcut for creating a trigger area that is only actioned once when the player first walks in or out, use the</p>

<code>utils.triggers.oneTimeTrigger</code>

<p>. This function has same arguments as</p>

<code>utils.triggers.addTrigger</code>

<p>, apart for</p>

<code>onExitCallback</code>

<p>. This function is especially useful for optimizing the loading of a scene, so that certain elements aren't loaded till a player walks into an area.</p>

<p>In the example below, the trigger area will only display welcome message the first time a player walks in. After that, the entity is removed from the scene.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Trigger layers</h3>

<p>You can define different layers for triggers, and set which other layers can trigger it.</p>

<p>The following example creates a scene that has:</p>

<li>food (green box)</li>

<li>mouse (blue sphere)</li>

<li>cat (red sphere)</li>

<p>Food is triggered (or eaten) by both cat and mouse. Also, mice are eaten by cats, so a mouse's trigger area is triggered only by a cat.</p>

<p>Cat and mouse always move towards the food. When food or mouse are eaten, they respawn in a random location.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Math</h2>

<h3>Remap</h3>

<code>utils.remap</code>

<p>maps a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum. It takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min1</code>

<li>: Minimum value in the range of the input.</li>

<code>max1</code>

<li>: Maximum value in the range of the input.</li>

<code>min2</code>

<li>: Minimum value in the range of the output.</li>

<code>max2</code>

<li>: Maximum value in the range of the output.</li>

<p>The following example maps the value</p>

<em>5</em>

<p>from a scale of 0 to 10 to a scale of 300 to 400. The resulting value is 350, as it keeps the same proportion relative to the new maximum and minimum values.</p>

<h3>World position</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform position will be relative to its parent. To find what its global position is, taking into account any parents, use</p>

<code>utils.getWorldPosition</code>

<p>. It returns a</p>

<code>Vector3</code>

<p>object, with the resulting position of adding the given entity and all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world position.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>World rotation</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform rotation will be relative to its parent. To find what its global rotation is, taking into account any parents, use</p>

<code>utils.getWorldRotation</code>

<p>. It returns a</p>

<code>Quaternion</code>

<p>object, with the resulting rotation of multiplying the given entity to all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world rotation.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>##Â Other helpers</p>

<p>The library offers a few other functions that may be useful as shortcuts for common use cases.</p>

<p>##Â Get entity parent</p>

<p>Returns an entity that is the parent of the provided entity.</p>

<h2>Get entities with parent</h2>

<p>Returns an array of entities that all share the provided entity as parent.</p>

<h2>Get player position</h2>

<p>Returns the position of the player's avatar.</p>

<p>Note: Always call this function inside the main() function, a function called indirectly by it, or a system. Otherwise, you might be attempting to fetch data that doesn't yet exist.</p>

<h2>Play sound</h2>

<p>Plays a sound from an audio file, at a given location in the scene. This saves you from having to create an entity and give it a position and AudioSource component.</p>

<h2>Action sequence</h2>

<p>Use an action sequence to play a series of actions one after another.</p>

<h3>IAction</h3>

<p>The</p>

<code>actions.IAction</code>

<p>interface defines the actions that can be added into a sequence. It includes:</p>

<code>hasFinished</code>

<li>: Boolean for the state of the action, wether it has finished its execution or not.</li>

<code>onStart()</code>

<li>: First method that is called upon the execution of the action.</li>

<code>update()</code>

<li>: Called on every frame on the action's internal update.</li>

<code>onFinish()</code>

<li>: Called when the action has finished executing.</li>

<h3>Sequence builder</h3>

<p>This object creates action sequences, using simple building blocks.</p>

<p>The</p>

<code>actions.SequenceBuilder</code>

<p>exposes the following methods:</p>

<code>then()</code>

<li>: Enqueue an action so that it's executed when the previous one finishes.</li>

<code>if()</code>

<li>: Use a condition to branch the sequence</li>

<code>else()</code>

<li>: Used with if() to create an alternative branch</li>

<code>endIf()</code>

<li>: Ends the definition of the conditional block</li>

<code>while()</code>

<li>: Keep running the actions defined in a block until a condition is no longer met.</li>

<code>breakWhile()</code>

<li>: Ends the definition of the while block</li>

<h3>Sequence runner</h3>

<p>The</p>

<code>actions.SequenceRunner</code>

<p>object takes care of running sequences created by</p>

<code>actions.SequenceBuilder</code>

<p>. It exposes the following methods:</p>

<code>startSequence()</code>

<li>: Starts a sequence of actions</li>

<code>setOnFinishCallback()</code>

<li>: Sets a callback for when the whole sequence is finished</li>

<code>isRunning()</code>

<li>: Returns a boolean that determines if the sequence is running</li>

<code>stop()</code>

<li>: Stops a running the sequence</li>

<code>resume()</code>

<li>: Resumes a stopped sequence</li>

<code>reset()</code>

<li>: Resets a sequence so that it starts over</li>

<code>destroy()</code>

<li>: Removes a sequence from the engine</li>

<h3>Full example</h3>

<p>The following example creates a box that changes its scale until clicked. Then it resets its scale and moves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/social-service

# URL: https://github.com/decentraland/social-service

<title>GitHub - decentraland/social-service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/social-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>13</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>130</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Social Service</h1>

<p>The social service is an enabler of social interactions for decentraland, it stores the friendships between users, has the logic for managing friend requests, and has logic on top of the chat to make sure it's being used correctly (sets a max amount of friends or channels a user can have).</p>

<h2>Collaboration</h2>

<h3>Setting up Rust</h3>

<h4>Rust Installation</h4>

<p>The preferred way to install Rust</p>

<p>:</p>

<pre>curl --proto</pre>

<pre>--tlsv1.2 -sSf https://sh.rustup.rs</pre>

<pre>sh</pre>

<p>This will by default install the stable toolchain, but will also enable you to install beta and nightly toolchains as well as new platforms (e.g. WASM) and update all toolchains to their latest versions.</p>

<h4>Rust update</h4>

<p>Run</p>

<pre>rustup update</pre>

<h4>Editor & Tooling</h4>

<p>There are two recommended editors/IDEs at the moment:</p>

<li>VS Code with</li>

<li>support</li>

<h4>Debug Rust in VS Code</h4>

<li>Follow the instructions</li>

<li>to add the extension for VS Code for debugging LLVM programs in VS Code</li>

<h3>Building the server</h3>

<p>This project will run an HTTP Server and a WebSocket Server.</p>

<p>The WebSocket server implements the protocol definition defined in</p>

<p>which is automatically downloaded from GitHub during the build time. If a build fails, it could be related to that.</p>

<h3>Requirements</h3>

<p>You need to have protoc installed</p>

<code>brew install protobuf</code>

<h3>Running the server</h3>

<code>make run</code>

<p>Running this command will run a dockerized Postgres DB and run the server on port</p>

<code>8080</code>

<p>. You should have Docker installed on your computer and running.</p>

<p>For development, you can use this command:</p>

<code>make dev</code>

<p>Running this command will run a dockerized Postgres DB and run the server on port</p>

<code>8080</code>

<p>but in watch mode, so every change you make will be watched and the server will restart.</p>

<h3>Running Tests locally</h3>

<pre>make</pre>

<h3>Database & Migrations</h3>

<p>Migrations or pending migrations run when the server starts programmatically using the</p>

<p>API.</p>

<p>In order to create a new migration, you have to run:</p>

<code>make migration name={YOUR_MIGRATION_NAME}</code>

<p>This command will create the migration SQL files (up and down) with the given name</p>

<h4>Enter in the DB</h4>

<code>docker exec -ti social_service_db psql -U postgres -d social_service</code>

<h3>Configuration</h3>

<p>There's a configuration file (</p>

<code>configuration.toml</code>

<p>) that allows configuring the following variables but you can ignore this file, if you use the above</p>

<code>make</code>

<p>commands:</p>

<code>host: Host address where the server will run

port: Port where the server will be exposed</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-social-service

# Change to URL: https://github.com/decentraland/asset-packs

# URL: https://github.com/decentraland/asset-packs

<title>GitHub - decentraland/asset-packs: Builder asset packs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Builder asset packs</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/asset-packs</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>19</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>161</strong>

<h2>Files</h2>

<button>View code</button>

<h2>asset-packs</h2>

<p>This repo holds all the asset packs for the Editor and Web Editor. When the repo is deployed, all the files are hashed and uploaded to an S3 bucket under</p>

<code>contents/:hash</code>

<p>and an npm package</p>

<code>@dcl/asset-packs</code>

<p>is published with a</p>

<code>catalog.json</code>

<p>that holds all the asset packs and assets data, and their contents point to the hashes in the bucket. Also a</p>

<code>bin/index.js</code>

<p>is compiled and published along in the npm package, which must be included in scenes that make use of Smart Items. The bucket is accessible through the</p>

<code>builder-items.decentraland.*</code>

<p>via Cloudflare.</p>

<h3>Production</h3>

<p>npm:</p>

<code>@dcl/asset-packs@latest</code>

<p>cdn:</p>

<code>https://builder-items.decentraland.org/contents/:hash</code>

<h3>Development</h3>

<p>npm:</p>

<code>@dcl/asset-packs@next</code>

<p>cdn:</p>

<code>https://builder-items.decentraland.zone/contents/:hash</code>

<h3>Deployment</h3>

<p>Every push to the</p>

<code>main</code>

<p>branch will be deployed to the development environemnt.</p>

<p>Every</p>

<p>will be deployed to the production environment.</p>

<h3>Local Development</h3>

<p>You can develop this repo locally and test it within the Web Editor by doing the following:</p>

<p>Go to this repo in your machine and do this:</p>

<li>Run</li>

<code>npm run start</code>

<li>to watch for changes and start the SDK7 dev server (on port</li>

<code>8000</code>

<li>by default).</li>

<li>On a new terminal, run</li>

<code>docker-compose up</code>

<li>to start the local content server on</li>

<code>http://localhost:9000/asset-packs</code>

<li>On a new terminal, run</li>

<code>npm run upload</code>

<li>to upload all assets to your local content server (copy the</li>

<code>.env.example</code>

<li>into</li>

<code>.env</code>

<li>if you haven't done that before).</li>

<li>Run</li>

<code>npm link</code>

<li>to allow other projects to symlink to this one.</li>

<li>Copy the path to the</li>

<code>bin/index.js</code>

<li>in this repo (something like</li>

<code>/Users/my-user/path/to/asset-packs/bin/index.js</code>

<li>).</li>

<p>Go the</p>

<code>js-sdk-toolchain</code>

<p>repo in your machine and do this:</p>

<li>Run</li>

<code>cd packages/@dcl/inspector</code>

<li>.</li>

<li>Run</li>

<code>npm link @dcl/asset-packs</code>

<li>to symlink to your local repository</li>

<li>Run</li>

<code>npm start</code>

<li>to start a local dev server. It should start by default on port</li>

<code>8000</code>

<li>but since we are already using it for the SDK7 dev server, it will start on port</li>

<code>8001</code>

<li>.</li>

<p>Go to the</p>

<code>builder</code>

<p>repo in your machine and do this:</p>

<li>Set the</li>

<code>REACT_APP_INSPECTOR_PORT</code>

<li>env var in</li>

<code>.env</code>

<li>to be</li>

<code>8001</code>

<li>(this is the</li>

<code>@dcl/inspector</code>

<li>dev server we started in the previous section).</li>

<li>Set the</li>

<code>REACT_APP_BIN_INDEX_JS_DEV_PORT</code>

<li>to the port where the SDK7 started running in the first section (by defualt</li>

<code>8000</code>

<li>).</li>

<li>Set the</li>

<code>REACT_APP_BIN_INDEX_JS_DEV_PATH</code>

<li>env var in</li>

<code>.env</code>

<li>to the path to the</li>

<code>bin/index.js</code>

<li>that you copied in the first section.</li>

<li>Set the</li>

<code>INSPECTOR_CONTENT_URL</code>

<li>variable in</li>

<code>src/config/env/[dev|stg|prod].json</code>

<li>to be</li>

<code>http://localhost:9000/asset-packs</code>

<li>(this is the content server we started in the first section).</li>

<li>Run</li>

<code>npm start</code>

<li>to start the builder local server which should start on port</li>

<code>3000</code>

<p>Now you are all set, you can start developing the SDK7 scene in this repo, use it from the local Builder and test it by previewing the scene, which should use your local Builder Server serving the development javascript files.</p>

<h2>About</h2>

<p>Builder asset packs</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/quests-designer

# URL: https://github.com/decentraland/quests-designer

<title>GitHub - decentraland/quests-designer: Quests Desginer React Component</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Quests Desginer React Component</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/quests-designer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>16</strong>

<strong>5</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Quests Designer</h1>

<p>Component to design a Quest for</p>

<p>.</p>

<h2>Setup</h2>

<p>If you want to contribute to the package, you can clone the repository and install the dependencies of the project with:</p>

<pre>$ npm i</pre>

<p>And you're ready to start contributing.</p>

<p>You can build the package with:</p>

<pre>$ make build</pre>

<p>and run the tests with:</p>

<pre>$ make</pre>

<h2>Usage</h2>

<p>To use this package in your project, you can install it with:</p>

<pre>$ npm i @dcl/quests-designer@latest</pre>

<p>And then you can start using it in your code:</p>

<pre>:</pre>

<pre>:</pre>

<h2>Example</h2>

<p>You can see an example of the package in action by running:</p>

<pre>$ npm run example</pre>

<p>This will start a local server with a simple example of the package.</p>

<p>Also this component is used in the</p>

<p>.</p>

<h2>About</h2>

<p>Quests Desginer React Component</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/base-ts-project

# URL: https://github.com/decentraland/base-ts-project

<title>GitHub - decentraland/base-ts-project</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/base-ts-project</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>36</strong>

<h2>Files</h2>

<button>View code</button>

<h1>base-ts-project</h1>

<p>Use this project as template for TypeScript libraries</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/quests-manager

# URL: https://github.com/decentraland/quests-manager

<title>GitHub - decentraland/quests-manager: Quests Manager dApp</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Quests Manager dApp</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/quests-manager</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>5</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>31</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Quests Manager</h1>

<p>A Decentraland dApp to handle all your Quest that you build for</p>

<p>.</p>

<p>You can create, edit, update, deactivate and activate all your Quests using this Application through the</p>

<p>.</p>

<h2>Setup</h2>

<p>To start contributing, you should run:</p>

<pre>$ npm i</pre>

<p>And if you may want to have a local version of the Quests Service, you can go to</p>

<p>and follow the steps to have a one running locally.</p>

<p>Or if you want to use the deployed versions of the Quests Service, you can choose the environment through the URL, adding a search parameter:</p>

<code>?env=dev</code>

<p>or</p>

<code>?env=prod</code>

<p>.</p>

<p>To start the dApp, you should run;</p>

<pre>$ npm start</pre>

<p>And it'll run the application on localhost:8000.</p>

<h2>Usage</h2>

<p>As it's mentioned, you can use the Quests Manager through the</p>

<p>by running:</p>

<pre>$ npx @dcl/sdk-commands quests -m</pre>

<p>or</p>

<pre>$ npx @dcl/sdk-commands quests --manager</pre>

<p>This will open up a browser window with the Quests Manager.</p>

<h2>About</h2>

<p>Quests Manager dApp</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/quests

# URL: https://github.com/decentraland/quests

<title>GitHub - decentraland/quests: Decentraland's Quests System</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland's Quests System</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/quests</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>117</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Quests</h1>

<p>The Quests System is an important feature that facilitates users to explore the world, unlock achievements and potentially receive rewards. A quest is a series of steps or tasks that a user has to complete. Each step or task has an acceptance criteria to consider it as done. A quest designer has to define the steps and the order or the path to the end, so the quest is finished when those steps are completed.</p>

<h1>Setup</h1>

<p>Before start, make sure you have these installed:</p>

<strong>Rust</strong>

<li>| you can use this</li>

<strong>docker-compose</strong>

<li>| used for DB and Redis</li>

<h1>Run</h1>

<p>Before running the Quests server you need Postgres and Redis instances, you can start both by running:</p>

<pre>$</pre>

<p>In order to run the Quests Server:</p>

<pre>$</pre>

<p>Also, you can run it in watch mode by installing</p>

<code>cargo-watch</code>

<p>and using the command to run the server:</p>

<pre>$</pre>

<pre>$</pre>

<h2>Logging</h2>

<p>The</p>

<code>RUST_LOG</code>

<p>environment variable can be used to specify the log level, for example:</p>

<pre>$</pre>

<em>See</em>

<em>to understand the possible values.</em>

<h2>Testing</h2>

<p>You can use</p>

<code>cargo test</code>

<p>or leverage on the</p>

<em>Makefile</em>

<p>to guarantee services tear up and down (DB and Redis):</p>

<code>make tests</code>

<li>: run all tests</li>

<code>make test-server</code>

<li>: run server specific tests</li>

<code>make test-db</code>

<li>: run database specific tests</li>

<code>make test-protocol</code>

<li>: run protocol specific tests</li>

<code>make message-broker</code>

<li>: run message broker specific tests</li>

<code>make test-system</code>

<li>: run system specific tests</li>

<h1>Architecture</h1>

<p>Here is a highlevel architecture overview that can help to understand the project strucuture and components:</p>

<h2>About</h2>

<p>Decentraland's Quests System</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-quests

# Change to URL: https://github.com/decentraland/dcl-crypto-toolkit

# URL: https://github.com/decentraland/dcl-crypto-toolkit

<title>GitHub - decentraland/dcl-crypto-toolkit: A collection of handy functions for crypto operations in Decentraland scenes</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A collection of handy functions for crypto operations in Decentraland scenes</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-crypto-toolkit</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Crypto Toolkit</h1>

<p>This library includes a number of helpful pre-built tools that help you deal with common requirements that involve and interacting with data on the blockchain.</p>

<h2>Using the Crypto library</h2>

<p>To use any of the helpers provided by the utils library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm i dcl-crypto-toolkit</code>

<li>Import the library into the scene's script. Add this line at the start of your</li>

<code>game.ts</code>

<li>file, or any other TypeScript files that require it:</li>

<li>In your TypeScript file, write</li>

<code>crypto.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>MANA Operations</h2>

<p>As MANA is Decentraland's main currency, this library provides tools to make it especially easy to use in a scene.</p>

<h3>Send MANA to an address</h3>

<p>To make players in your scene send MANA to a specific address, use the</p>

<code>send()</code>

<p>function. This function requires the following arguments:</p>

<code>toAddress</code>

<li>: What ethereum address to send the MANA to</li>

<code>amount</code>

<li>: How many MANA tokens to send</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requests players to make a MANA payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, paying the required MANA sum plus an ETH gas fee dictated by the market at that time.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Get a player's MANA Balance</h3>

<p>Look up how much MANA a player has in their wallet. This is useful to know in advance if a player will be able to pay a fee or buy something from the Marketplace.</p>

<p>Check the current player's balance with</p>

<code>myBalance()</code>

<p>. This function doesn't require any arguments.</p>

<p>Check the balance of any other wallet with</p>

<code>balance()</code>

<p>. This function just requires the wallet address to check, as a string.</p>

<h2>Other Currencies</h2>

<p>Any currency token that adheres to the ERC20 standard can be handled by this library.</p>

<h3>Send</h3>

<p>To make players in your scene send a currency token to a specific address, use the</p>

<code>send()</code>

<p>function. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be sent</li>

<code>toAddress</code>

<li>: What ethereum address to send the tokens to</li>

<code>amount</code>

<li>: How many tokens to send</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requests players to make a DAI payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, paying the required DAI sum plus an ETH gas fee dictated by the market at that time. Once that transaction is accepted on Metamask, the door opens.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Check balance</h3>

<p>Look up how much of a coin a player has in their wallet. This is useful to know in advance if a player will be able to pay a fee or buy something in the scene.</p>

<p>Check the balance of any other wallet with</p>

<code>balance()</code>

<p>. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: Addess of the token's smart contract.</li>

<code>address</code>

<li>: Wallet address that you want to check the balance of.</li>

<h3>Other functions</h3>

<p>Call any functions that are available in a token's contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass the token's address as a parameter.</p>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<h2>NFTs</h2>

<p>Any non-fungible token that adheres to the ERC721 standard can be handled by this library. Other tokens that don't adhere to the standard but that share common methods with it can also have those methods accessed through the functions in this library.</p>

<h3>Transfer an NFT</h3>

<p>To make players in your scene transfer an NFT to a specific address, use the</p>

<code>transfer()</code>

<p>function. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be sent</li>

<code>toAddress</code>

<li>: What ethereum address to send the tokens to</li>

<code>tokenId</code>

<li>: The id of the specific token to send within the smart contract</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requires sending any wearable item to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to transfer the token.</p>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, transfering the NFT token plus paying an ETH gas fee dictated by the market at that time. Once that transaction is accepted on Metamask, the door opens.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Check player for Tokens</h3>

<p>Check if a player holds any specific tokens in their wallet using</p>

<code>checkTokens()</code>

<p>. You can either check for any token that belogs to a given contract (eg: any cryptokitty), or for particular token IDs within that contract (eg: only for cryptokitty number 500 or 501).</p>

<p>This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be checked</li>

<code>tokenIds</code>

<li>: One or multiple token IDs to check player ownership. This can be a single number, or an array of multiple numbers.</li>

<p>The function returns</p>

<em>true</em>

<p>or</p>

<em>false</em>

<p>depending on if the player's wallet owns any of the indicated tokens.</p>

<h3>Other functions</h3>

<p>Call any functions that are available in a token's contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass the token's address as a parameter.</p>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<h2>Signing Messages</h2>

<p>Request a player to use the private key of their Ethereum wallet to sign a message using the</p>

<em>EIP 712</em>

<p>standard.</p>

<p>This is a valuable security measure to validate that the player who owns that wallet was truly there, since the signature of a private key can't be forged. Several smart contracts also require passing signed strings as parameters.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Whenever the</p>

<code>signMessageAdvanced()</code>

<p>funcition is called, Metamask will open on the player's browser to request to accept signing the message.</p>

<p>The</p>

<code>signMessageAdvanced()</code>

<p>function requires the following parameters:</p>

<code>messageToSign</code>

<li>: Object to sign, containing a series of key-value pairs</li>

<code>messageName</code>

<li>: A name for the message, to display when requesting confirmation from the player</li>

<code>messageType</code>

<li>: A type definition for messageToSign</li>

<code>domainData</code>

<li>: An object with data about the operation, incluind name, version, and chainid.</li>

<p>The</p>

<code>signMessageAdvanced()</code>

<p>function returns an object that contains:</p>

<code>message</code>

<li>: The original message that was signed, preceded by the string</li>

<code># DCL Signed messageâµmsg:</code>

<code>signature</code>

<li>: The string generated from encrypting the original message through the player's private key</li>

<h2>Decentraland contracts</h2>

<p>This library includes an enum list of all official Decentraland-released smart contracts, to easily refer to them when using the different functions.</p>

<p>A separate list exists for contracts on</p>

<code>mainnet</code>

<p>,</p>

<code>ropsten</code>

<p>,</p>

<code>kovan</code>

<p>and</p>

<code>rinkeby</code>

<p>networks.</p>

<h2>The Marketplace</h2>

<p>This library exposes several functions that allow players to interact directly with the Decentraland marketplace from inside a scene.</p>

<h3>Buy an item from the marketplace</h3>

<p>A player can buy an item that's on sale on the Decentraland marketplace without leaving a Decentraland scene, using the</p>

<code>executeOrder()</code>

<p>function.</p>

<p>This function takes three arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token being sold. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<code>price</code>

<li>:</li>

<em>number</em>

<li>The price being paid for the item, in MANA. This number is expressed in full MANA units, not in Wei.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The item needs to be currently published on sale in the Decentraland marketplace.</p>

<p>To buy the item, the player must give the Decentraland Marketplace permissions to operate with MANA on their behalf. If the player doesn't have these permissions set, the</p>

<code>executeOrder()</code>

<p>will ask for two transactions: one to set these permissions and one to do buy the item.</p>

<p>TIP: You can check to see if your wallet has these permissions set by going to the</p>

<p>and seeing if this checkbox is checked:</p>

<strong>Authorize the Marketplace contract to operate MANA on your behalf</strong>

<h3>Check the player's authorizations</h3>

<p>Before a player can buy on the Decentraland Marketplace, they need to give the Marketplace contract permissions to operate with MANA on their behalf. Before a player posts a new order to sell an item, they also need to give the Marketplace permissions to handle items of the contract that items belongs to.</p>

<p>If a player tries to run the</p>

<code>executeOrder()</code>

<p>function without the necessary permissions, the function will handle adding those permissions first.</p>

<p>To check if a player has the necessary permissions to buy with the Marketplace and has enough MANA in their balance, use</p>

<code>isAuthorizedAndHasBalance()</code>

<p>. This function requires one field:</p>

<code>price</code>

<li>:</li>

<em>string</em>

<li>How much MANA the player should have in their balance. This number is expressed in full MANA units, not in Wei.</li>

<p>This function returns</p>

<em>true</em>

<p>only if the player has MANA authorized for the Marketplace, and holds enough MANA currently.</p>

<p>To make the player approve MANA for spending in the Marketplace, you can use the</p>

<code>setApproval()</code>

<p>function of the</p>

<code>currency</code>

<p>section of this library, like so:</p>

<p>To check if a player has all of the possible permissions set up for the Marketplace, run the</p>

<code>isAuthorizedAll()</code>

<p>function. This function has one optional parameter</p>

<code>address</code>

<li>:</li>

<em>string</em>

<li>(optional) What player address to check for permissions. If no value is provided, it uses the current player running the scene.</li>

<p>This function returns an object with three main objects,</p>

<code>bidding</code>

<p>,</p>

<code>buying</code>

<p>, and</p>

<code>selling</code>

<p>. Each of these contains a field for each of the available contracts that might have permissions for that purpose, and for each of these contracts, there's an object containing the address and a boolean for the</p>

<code>authorized</code>

<p>status of that contract for that purpose.</p>

<p>Below is an extract of part of what the response looks like:</p>

<pre>{</pre>

<pre>}</pre>

<p>If permissions are missing, they can be added with the</p>

<code>setApproval()</code>

<p>function from the</p>

<code>currency</code>

<p>or the</p>

<code>nft</code>

<p>section of the library, depending on the case.</p>

<h3>Sell from a scene</h3>

<p>A player can put an item on sale on the Marketplace from within a Decentraland scene using the</p>

<code>createOrder()</code>

<p>function.</p>

<p>This function takes three arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token to sell. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<code>price</code>

<li>:</li>

<em>number</em>

<li>The price to set for the order, in MANA. This number is expressed in full MANA units, not in Wei.</li>

<code>expireAt</code>

<li>:</li>

<em>number</em>

<li>(optional) When to expire this offer, expressed as milliseconds since January 1, 1970, 00:00:00 UTC. If a value is not set, it defaults to one month from the present time.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The player creating the order needs to own the token being put on sale. The player must also have permissions set to allow the Marketplace contract to operate with this specific token contract. If it's a wearable, the player must have granted permissions for that specific wearable collection.</p>

<h3>Cancel the selling of a token</h3>

<p>A token that's on sale on the Marketplace can be taken off sale from within a scene, by using the</p>

<code>cancelOrder()</code>

<p>function.</p>

<p>This function takes two arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token to sell. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The player cancelling the order needs to be the creator of the order in the Marketplace and own the token being put on sale. The player must also have permissions set to allow the Marketplace contract to operate with this specific token contract. If it's a wearable, the player must have granted permissions for that specific wearable collection.</p>

<h2>Third parties operating tokens</h2>

<p>You can check if a given contract is allowed to handle a given token for a player, and otherwise carry out a transaction to allow it to.</p>

<p>Many smart contracts require to be given explicit permission by a wallet owner to operate with the token on their behalf, especially when the contract has the ability to remove tokens from the owner's balance.</p>

<h3>Currencies</h3>

<p>To check if a contract has permissions to handle a specific currency token for a player, use the</p>

<code>isApproved()</code>

<p>function. This function takes 3 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>owner</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<p>The</p>

<code>isApproved()</code>

<p>function returns a boolean indicating wether permissions are there or not.</p>

<p>To check how much is the maximum allowance that a contract has to handle a specific currency token for a player, use the</p>

<code>allowance()</code>

<p>function. This function takes three arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>owner</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<p>The</p>

<code>allowance()</code>

<p>function returns a string with the number of allowed currency, expressed in wei units.</p>

<p>To grant permissions to a contract to handle a specific currency token for a player, use the</p>

<code>setApproval()</code>

<p>function. This function takes 4 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, resolve promise when the transaction is mined on the blockchain</li>

<code>amount</code>

<li>:</li>

<em>string</em>

<li>(optional) Maximum amount of the currency to allow the spender to spend</li>

<h3>NFTs</h3>

<p>To check if a contract has permissions to handle a specific type of NFT for a player, use the</p>

<code>isApprovedForAll()</code>

<p>function. This function takes 3 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>assetHolder</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>operator</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to handle the token</li>

<p>The</p>

<code>isApproved()</code>

<p>function returns a boolean indicating wether permissions are there or not.</p>

<p>To grant permissions to a contract to handle a specific NFT for a player, use the</p>

<code>setApprovalForAll()</code>

<p>function. This function takes 4 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>operator</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<code>approved</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If</li>

<em>true</em>

<li>, sets the contract as approved for this NFT, if</li>

<em>false</em>

<li>, it removes these same approvals.</li>

<em>true</em>

<li>by default.</li>

<h2>Call functions from any contract</h2>

<p>Call any functions that are available in any smart contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass:</p>

<code>contractAdress</code>

<li>: The token's Ethereum smart contract address.</li>

<code>abi</code>

<li>: The ABI definition for the contract, where all of its functions and parameters are listed</li>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<p>You can obtain the ABI of a contract on etherscan. For example, if you go to the Etherscan page for the</p>

<p>, you can find the ABI by picking the</p>

<em>Contract</em>

<p>tab in the bottom section and then scrolling down. You can export the ABI to JSON, and add that as a file in your scene's project, or paste its contents into a</p>

<em>.ts</em>

<p>file in your scene's project.</p>

<h2>Avatar</h2>

<h3>Get data of all wearables</h3>

<p>To fetch a list of wearables supported by Decentraland, including their full names, categories, contracts, etc, call the</p>

<code>getListOfWearables()</code>

<p>. This function supports the following filters:</p>

<pre>collectionIds:</pre>

<pre>wearableIds:</pre>

<pre>textSearch:</pre>

<pre>:</pre>

<p>This function returns an array of wearables.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/crypto-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<p>A collection of handy functions for crypto operations in Decentraland scenes</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-crypto-toolkit

# Change to URL: https://github.com/decentraland-contracts

# Change to URL: https://github.com/decentraland/events

# URL: https://github.com/decentraland/events

<title>GitHub - decentraland/events: This website hosts a dApp used to upload and see what others are organizing inside the Decentraland virtual world.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This website hosts a dApp used to upload and see what others are organizing inside the Decentraland virtual world.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/events</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>47</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,097</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Community Events</h1>

<p>This website hosts a dApp used to upload and see what others are organizing inside the Decentraland virtual world.</p>

<h2>License</h2>

<p>Copyright 2020 by the Decentraland Foundation</p>

<h2>About</h2>

<p>This website hosts a dApp used to upload and see what others are organizing inside the Decentraland virtual world.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/godot-docker-builder

# URL: https://github.com/decentraland/godot-docker-builder

<title>GitHub - decentraland/godot-docker-builder</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/godot-docker-builder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Godot Explorer - Docker Builder</h1>

<p>Build and push Docker Images for compiling the Decentraland Godot Explorer</p>

<p>Platforms:</p>

<li>Android</li>

<li>VR</li>

<li>iOS</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-godot-explorer---docker-builder

# Change to URL: https://github.com/decentraland/decentraland-substreams

# URL: https://github.com/decentraland/decentraland-substreams

<title>GitHub - decentraland/decentraland-substreams: An implementation of StreamingFast's substreams for dcl contracts</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>An implementation of StreamingFast's substreams for dcl contracts</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-substreams</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>15</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>100</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-substreams</h1>

<p>An implementation of StreamingFast's substreams for dcl contracts</p>

<h1>Substreams</h1>

<p>Developer preview</p>

<p>Substreams is a powerful blockchain indexing technology, developed for The Graph Network.</p>

<p>Substreams enables developers to write Rust modules, composing data streams alongside the community, and provides extremely high performance indexing by virtue of parallelization, in a streaming-first fashion.</p>

<p>Substreams has all the benefits of StreamingFast Firehose, like low-cost caching and archiving of blockchain data, high throughput processing, and cursor-based reorgs handling.</p>

<h1>Running the substreams</h1>

<p>First, compile the substreams modules:</p>

<code>cargo build --release --target wasm32-unknown-unknown</code>

<p>Then, run the module that you want:</p>

<code>substreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml map_collection_created --start-block 10000001 --stop-block +1</code>

<h1>Running the sink module</h1>

<p>You'll need to have the</p>

<p>cli installed. I recommend using the</p>

<code>go</code>

<p>installation:</p>

<code>go install github.com/streamingfast/substreams-sink-postgres/cmd/substreams-sink-postgres@latest.</code>

<p>Check if you have the GOPATH as part of your</p>

<code>PATH</code>

<p>. If not, add it:</p>

<code>export PATH=$PATH:$(go env GOPATH)/bin</code>

<p>Finally, run the sink</p>

<code>substreams-sink-postgres run \

"psql://db_user:db_pass@localhost:5432/db_name?sslmode=disable" \

"polygon.streamingfast.io:443" \

"substreams.yaml" \

db_out</code>

<h3>Compile protos</h3>

<p>If there are changes in the proto definitions, to update run:</p>

<code>./substreams protogen ./substreams.yaml --show-generated-buf-gen --exclude-paths="sf/substreams,google"</code>

<h2>About</h2>

<p>An implementation of StreamingFast's substreams for dcl contracts</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-substreams

# Change to URL: https://github.com/decentraland/sdk-empty-scene-template

# URL: https://github.com/decentraland/sdk-empty-scene-template

<title>GitHub - decentraland/sdk-empty-scene-template</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-empty-scene-template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>sdk-empty-scene-template</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-crypto-fetch

# URL: https://github.com/decentraland/decentraland-crypto-fetch

<title>GitHub - decentraland/decentraland-crypto-fetch</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-crypto-fetch</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>30</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-crypto-fetch</h1>

<p>Make requests signed using a</p>

<h2>Install</h2>

<pre>npm install decentraland-crypto-fetch</pre>

<h2>Usage</h2>

<p>This library preserves the native</p>

<code>fetch</code>

<p>API and works on browsers and nodejs, you only need an Identity generate with</p>

<code>@dcl/crypto</code>

<pre>:</pre>

<pre>identity</pre>

<p>you can send signed metadata using the</p>

<code>metadata</code>

<p>property</p>

<pre>:</pre>

<pre>:</pre>

<pre>identity</pre>

<pre>metadata</pre>

<p>You can also inject sign headers into an existing request</p>

<pre>:</pre>

<pre>:</pre>

<pre>identity</pre>

<pre>metadata</pre>

<h3>Auth Chain Generator</h3>

<p>If you want to simulate signed headers you can use the</p>

<code>Auth Chain Generator</code>

<h3>Identity Generator</h3>

<p>If you need an ephemeral identity you can generate one using the</p>

<code>Identity Generator</code>

<h2>Inject fetcher</h2>

<p>If your environment doesn't have a global</p>

<code>fetch</code>

<p>function, you can create a signedFetch injecting your own implementations as follow</p>

<pre>Headers</pre>

<pre>Request</pre>

<pre>fetch</pre>

<h2>Server</h2>

<p>If you want to build services that accept Signed Request you use</p>

<code>decentraland-crypto-middleware</code>

<h2>CLI</h2>

<pre>npm run fetch -- --help

Fetch the contents of the URL and sign the request with and identity</pre>

<pre>there is any

Options:

--help      Show</pre>

<pre>[boolean]

--version   Show version number                                                          [boolean]

-X, --method    Specifies a custom request method to use when communicating with the HTTP server.

[choices:</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>]

[default:</pre>

<pre>]

-i, --include   Include the HTTP response headers</pre>

<pre>the output. The HTTP response headers can include

things like server name, cookies, date of the document, HTTP version and more...                                                                            [boolean]

--identity  Path to the identity file uses to sign the request                            [string]

-H, --header    Extra header to include</pre>

<pre>the request when sending HTTP to a server.          [array]

-d, --data      Sends the specified data</pre>

<pre>a POST request to the HTTP server                 [string]

--no-color  Disabled color output                                                        [boolean]</pre>

<h2>Develop</h2>

<p>If you want to contribute make you will need to setup</p>

<code>husky</code>

<p>otherwise your commit may fail because is not following the format standard</p>

<pre>npm run husky-setup</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>10</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-crypto-fetch

# Change to URL: https://github.com/decentraland/decentraland-crypto

# URL: https://github.com/decentraland/decentraland-crypto

<title>GitHub - decentraland/decentraland-crypto: DCL auth crypto lib</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>DCL auth crypto lib</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-crypto</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>35</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>118</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL Auth Crypto Lib</h1>

<h2>How to Install</h2>

<pre>npm i @dcl/crypto</pre>

<h2>Create a new Identity using Ethers</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Create a new Identity using Web3x</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<p>DCL auth crypto lib</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>18</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/intercom-chat-page

# URL: https://github.com/decentraland/intercom-chat-page

<title>GitHub - decentraland/intercom-chat-page</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/intercom-chat-page</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Intercom Chat Page</h1>

<h2>How to open it</h2>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/scene-runtime

# URL: https://github.com/decentraland/scene-runtime

<title>GitHub - decentraland/scene-runtime: Scene runtime for JS environments</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Scene runtime for JS environments</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/scene-runtime</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>20</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>48</strong>

<h2>Files</h2>

<button>View code</button>

<h1>scene-runtime</h1>

<h2>About</h2>

<p>Scene runtime for JS environments</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk7-adaption-layer

# URL: https://github.com/decentraland/sdk7-adaption-layer

<title>GitHub - decentraland/sdk7-adaption-layer: Adaption Layer between from SDK6 to SDK7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Adaption Layer between from SDK6 to SDK7</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk7-adaption-layer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>20</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Adaption Layer</h1>

<p>Adaption Layer from SDK6 to SDK7.</p>

<p>This project is an SDK7 scene that implements SDK6 and provides the parity for SDK7.</p>

<p>The Scene Runtime from the Renderers can use this Scene to inject it when it detects an SDK6 Scene, so they need to implement SDK7.</p>

<h2>Debug - How to run your SDK6 Scene with SDK7</h2>

<p>Copy your SDK6 Scene Assets to the root directory and the built script to</p>

<code>sdk6-tests/game.js</code>

<p>and</p>

<code>sdk6-tests/scene.js</code>

<p>. Then run the SDK7 scene with</p>

<code>npm run start</code>

<p>, and you should see your SDK6 Scene running with SDK7.</p>

<h1>Download script</h1>

<p>The script is available on the following links</p>

<h2>About</h2>

<p>Adaption Layer between from SDK6 to SDK7</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/single-sign-on-client

# URL: https://github.com/decentraland/single-sign-on-client

<title>GitHub - decentraland/single-sign-on-client</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/single-sign-on-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>16</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Single Sign On Client</h1>

<p>Repo containing the @dcl/single-sign-on-client library code as well as a demo.</p>

<p>The README for the library can be found</p>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dae-unit-tests

# URL: https://github.com/decentraland/dae-unit-tests

<title>GitHub - decentraland/dae-unit-tests</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dae-unit-tests</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Alternative Explorers - Unit Tests</h1>

<h2>Introduction:</h2>

<p>This tool under construction will be used to test the different components of the SDK7.</p>

<p>The main objective of the tests is to ensure that the different clients under development (Godot and Bevy) work in accordance with the foundation client.

As a consequence we will also collect and report strange behaviors that we observe in the foundation client.</p>

<h2>How choice the component tests:</h2>

<p>To run the test you must import the one you want to run in the file</p>

<code>src/index.ts</code>

<p>for example:</p>

<pre>`</pre>

<pre>`</pre>

<h2>How to start:</h2>

<p>You can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/hashing

# URL: https://github.com/decentraland/hashing

<title>GitHub - decentraland/hashing: Hashing utilities for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Hashing utilities for Decentraland</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/hashing</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>11</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>42</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/hashing</h1>

<p>Hashing functions to calculate Decentraland Content Identifiers</p>

<code>hashV1(arg): Promise<string></code>

<li>:</li>

<code>ba</code>

<li>prefixed hashes</li>

<em>are</em>

<li>IPFSv1 hashes. Calculating hashes for files should generate the same result as an IPFS node.</li>

<strong>DEPRECATED</strong>

<code>hashV0(arg): Promise<string></code>

<li>:</li>

<code>Qm</code>

<li>prefixed hashes</li>

<em>are not</em>

<li>IPFSv0 hashes, although it uses the same encoding (Qm...). These</li>

<code>npm i @dcl/hashing</code>

<h2>About</h2>

<p>Hashing utilities for Decentraland</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=4

# URL: https://github.com/orgs/decentraland/repositories?page=4

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>DCL auth crypto lib</p>

<p>ECS 7 Template</p>

<p>Render an interactive preview of a wearable</p>

<p>Services for Decentraland In World camera feature</p>

<p>A consumer of the dapps substreams output</p>

<p>Create transactions to be relayed</p>

<p>ðº A server for the atlas map</p>

<p>Verified Partners Registry</p>

<p>Quests Manager dApp</p>

<p>A four-day celebration of music, culture and creativity in the virtual social world of Decentraland, the Metaverse Festival is a grand collision of light, sound and portable toilets.</p>

<p>ð Decentraland's vesting dashboard</p>

<p>PM repository for SDK</p>

<p>Build Unity projects for different platforms</p>

<p>NFT Server</p>

<p>Decentraland's Quests System</p>

<p>Library to collect and expose Prometheus metrics from an HTTP Rust server.</p>

<p>A server that handles the substreams reorgs</p>

<p>ð Decentraland contract addresses</p>

<p>DCL status page</p>

<em>4</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk7-scene-template

# URL: https://github.com/decentraland/sdk7-scene-template

<title>GitHub - decentraland/sdk7-scene-template: ECS 7 Template</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ECS 7 Template</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk7-scene-template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>23</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>65</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Template scene</h1>

<h2>Try it out</h2>

<strong>Previewing the scene</strong>

<p>Download this repository.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>What's new on SDK 7</h2>

<p>Below are some basic concepts about the SDK 7 syntax. For more details, see the</p>

<p>.</p>

<h3>Entities</h3>

<p>An Entity is just an ID. It is an abstract concept not represented by any data structure. There is no "class Entity". Just a number that is used as a reference to group different components.</p>

<p>Note: Note that it's no longer necessary to separately create an entity and then add it to the engine, this is all done in a single act.</p>

<h3>Components</h3>

<p>The component is just a data container, WITHOUT any functions.</p>

<p>To add a component to an entity, the entry point is now the component type, not the entity.</p>

<p>This is different from how the syntax was in SDK6:</p>

<h4>Base Components</h4>

<p>Base components already come packed as part of the SDK. Most of them interact directly with the renderer in some way. This is the full list of currently supported base components:</p>

<li>Transform</li>

<li>Animator</li>

<li>Material</li>

<li>MeshRenderer</li>

<li>MeshCollider</li>

<li>AudioSource</li>

<li>AudioStream</li>

<li>AvatarAttach</li>

<li>AvatarModifierArea</li>

<li>AvatarShape</li>

<li>Billboard</li>

<li>CameraMode</li>

<li>CameraModeArea</li>

<li>GltfContainer</li>

<li>NftShape</li>

<li>PointerEventsResult</li>

<li>PointerHoverFeedback</li>

<li>PointerLock</li>

<li>Raycast</li>

<li>RaycastResult</li>

<li>TextShape</li>

<li>VisibilityComponent</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Custom Components</h4>

<p>Each component must have a unique number ID. If a number is repeated, the engine or another player receiving updates might apply changes to the wrong component. Note that numbers 1-2000 are reserved for the base components.</p>

<p>When creating a custom component you declare the schema of the data to be stored in it. Every field in a component MUST belong to one of the built-in special schemas provided as part of the SDK. These special schemas include extra functionality that allows them to be serialized/deserialized.</p>

<p>Currently, the names of these special schemas are:</p>

<h5>Primitives</h5>

<code>Schemas.Boolean</code>

<li>: true or false (serialized as a Byte)</li>

<code>Schemas.String</code>

<li>: UTF8 strings (serialized length and content)</li>

<code>Schemas.Float</code>

<li>: single precission float</li>

<code>Schemas.Double</code>

<li>: double precision float</li>

<code>Schemas.Byte</code>

<li>: a single byte, integer with range 0..255</li>

<code>Schemas.Short</code>

<li>: 16 bits signed-integer with range -32768..32767</li>

<code>Schemas.Int</code>

<li>: 32 bits signed-integer with range -2Â³Â¹..(2Â³Â¹-1)</li>

<code>Schemas.Int64</code>

<li>: 64 bits signed-integer</li>

<code>Schemas.Number</code>

<li>: an alias to Schemas.Float</li>

<h5>Specials</h5>

<code>Schemas.Entity</code>

<li>: a wrapper to int32 that casts the type to</li>

<code>Entity</code>

<code>Schemas.Vector3</code>

<li>: a Vector3 with { x, y, z }</li>

<code>Schemas.Quaternion</code>

<li>: a Quaternion with { x, y, z, w}</li>

<code>Schemas.Color3</code>

<li>: a Color3 with { r, g, b }</li>

<code>Schemas.Color4</code>

<li>: a Colo4 with { r, g, b, a }</li>

<h5>Schema generator</h5>

<code>Schemas.Enum</code>

<li>: passing the serialization Schema and the original Enum as generic</li>

<code>Schemas.Array</code>

<li>: passing the item Schema</li>

<code>Schemas.Map</code>

<li>: passing a Map with Schemas as values</li>

<code>Schemas.Optional</code>

<li>: passing the schema to serialize</li>

<p>Below are some examples of how these schemas can be declared.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To then create a custom component using one of these schemas, use the following syntax:</p>

<p>For contrast, below is an example of how components were constructed prior to SDK 7.</p>

<pre>@</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Systems</h3>

<p>Systems are pure & simple functions.

All your logic comes here.

A system might hold data which is relevant to the system itself, but no data about the entities it processes.</p>

<p>To add a system, all you need to do is define a function and add it to the engine. The function may optionally include a</p>

<code>dt</code>

<p>parameter with the delay since last frame, just like in prior versions of the SDK.</p>

<pre>:</pre>

<h4>Query components</h4>

<p>The way to group/query the components inside systems is using the method getEntitiesWith.</p>

<code>engine.getEntitiesWith(...components)</code>

<p>.</p>

<pre>:</pre>

<h3>Mutability</h3>

<p>Mutability is now an important distinction. We can choose to deal with mutable or with immutable versions of a component. We should use</p>

<code>getMutable</code>

<p>only when we plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can't change any of the properties on it.</p>

<p>To fetch the mutable version of a component, call it via</p>

<code>ComponentDefinition.getMutable()</code>

<p>. For example:</p>

<h2>About</h2>

<p>ECS 7 Template</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>8</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/wearable-preview

# URL: https://github.com/decentraland/wearable-preview

<title>GitHub - decentraland/wearable-preview: Render an interactive preview of a wearable</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Render an interactive preview of a wearable</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/wearable-preview</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>43</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>286</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Wearable Preview</h1>

<p>This webapp renders an interactive 3D preview of a wearable or an avatar. It can be configured via query params or via</p>

<code>postMessage</code>

<p>:</p>

<code>contract</code>

<li>: The contract address of the wearable collection.</li>

<code>item</code>

<li>: The id of the item in the collection.</li>

<code>token</code>

<li>: The id of the token (to preview a specific NFT).</li>

<code>profile</code>

<li>: an ethereum address of a profile to load as the base avatar. It can be set to</li>

<code>default</code>

<li>to use a default profile.</li>

<code>urn</code>

<li>: a URN of a wearable or an emote to load. If it is a wearable, it will override anything loaded from a profile. It can be used many times.</li>

<code>url</code>

<li>: a URL of a wearable or an emote to load. If it is a wearable, it will override anything loaded from a profile. It can be used many times. The url will be fetched and must return a valid definition following the</li>

<code>WearableDefinition</code>

<li>or</li>

<code>EmoteDefinition</code>

<li>types.</li>

<code>base64</code>

<li>: a wearable or an emote to load, encoded in base64. If it is a wearable, it will override anything loaded from a profile. It can be used many times. Once parsed it should be a valid definition following the</li>

<code>WearableDefinition</code>

<li>or</li>

<code>EmoteDefinition</code>

<li>types.</li>

<code>skin</code>

<li>: a color to be used by the skin material, it must be in hex.</li>

<code>hair</code>

<li>: a color to be used by the hair material, it must be in hex.</li>

<code>eyes</code>

<li>: a color to be used by the eyes tint, it must be in hex.</li>

<code>bodyShape</code>

<li>: which body shape to use, possible values are</li>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<li>or</li>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<li>.</li>

<code>emote</code>

<li>: the emote that the avatar will play. Default value is</li>

<code>idle</code>

<li>, other possible values are:</li>

<code>clap</code>

<li>,</li>

<code>dab</code>

<li>,</li>

<code>dance</code>

<li>,</li>

<code>fashion</code>

<li>,</li>

<code>fashion-2</code>

<li>,</li>

<code>fashion-3</code>

<li>,</li>

<code>fashion-4</code>

<li>,</li>

<code>love</code>

<li>,</li>

<code>money</code>

<li>,</li>

<code>fist-pump</code>

<li>and</li>

<code>head-explode</code>

<li>.</li>

<code>zoom</code>

<li>: the level of zoom, it must be a number between 1 and 100.</li>

<code>zoomScale</code>

<li>: a multiplier for the zoom level. By default is</li>

<code>1</code>

<li>but it can be increased to get extra zoom.</li>

<code>camera</code>

<li>: which camera type to use, either</li>

<code>interactive</code>

<li>or</li>

<code>static</code>

<li>. By default it uses the</li>

<code>interactive</code>

<li>one.</li>

<code>projection</code>

<li>: which projection type to use, either</li>

<code>orthographic</code>

<li>or</li>

<code>perspective</code>

<li>. By default it uses the</li>

<code>perspective</code>

<li>one.</li>

<code>offsetX</code>

<li>: apply an offset in the X position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>offsetY</code>

<li>: apply an offset in the Y position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>offsetZ</code>

<li>: apply an offset in the Z position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>cameraX</code>

<li>: set the X position of the camera.</li>

<code>cameraY</code>

<li>: set the Y position of the camera.</li>

<code>cameraZ</code>

<li>: set the Z position of the camera.</li>

<code>wheelZoom</code>

<li>: a multiplier of how much the user can zoom with the mouse wheel. By default is</li>

<code>1</code>

<li>, which means the wheel doesn't do any zoom. If the value were</li>

<code>2</code>

<li>the user would be able to zoom up to 2x.</li>

<code>wheelPrecision</code>

<li>: the higher the value, the slower the wheel zooms when scrolled. By default is</li>

<code>100</code>

<li>.</li>

<code>wheelStart</code>

<li>: a value between 0 and 100 which determines how zoomed in or out the wheel starts. By default is</li>

<code>50</code>

<li>, so the user can zoom in or out. If the value were</li>

<code>0</code>

<li>the zoom would start at minimum and the user would be able to zoom in. If the value were</li>

<code>100</code>

<li>the zoom would start at max and the user would be able to zoom out.</li>

<code>background</code>

<li>: the color of the background in hex, ie:</li>

<code>ff0000</code>

<li>.</li>

<code>peerUrl</code>

<li>: set a custom url for a Catalyst peer.</li>

<code>nftServerUrl</code>

<li>: set a custom url for the NFT API.</li>

<code>type</code>

<li>: set a custom PreviewType to render standalone items passed as urn, url or base64. currently only supports</li>

<code>wearable</code>

<li>.</li>

<code>disableBackground</code>

<li>: if</li>

<code>true</code>

<li>it will make the background transparent.</li>

<code>disableAutoRotate</code>

<li>: if</li>

<code>true</code>

<li>it will disable the auto-rotate behaviour of the camera.</li>

<code>disableAutoCenter</code>

<li>: if</li>

<code>true</code>

<li>it will disable the auto-center around the bounding box.</li>

<code>disableFace</code>

<li>: if</li>

<code>true</code>

<li>it will disable the facial features.</li>

<code>disableDefaultWearables</code>

<li>: if</li>

<code>true</code>

<li>it will not load the default wearables (it will only load the base body shape).</li>

<code>disableFadeEffect</code>

<li>: if</li>

<code>true</code>

<li>it will disable css transitions (the fade in / fade out effect). This is useful for automation tests.</li>

<code>disableDefaultEmotes</code>

<li>: if</li>

<code>true</code>

<li>and</li>

<code>emote</code>

<li>is not passed, it will not load the default IDLE emote.</li>

<code>showSceneBoundaries</code>

<li>: if</li>

<code>true</code>

<li>it will show a cylinder representing the recommended scene boundaries.</li>

<code>showThumbnailBoundaries</code>

<li>: if</li>

<code>true</code>

<li>it will show a square representing the thumbnail boundaries.</li>

<code>panning</code>

<li>: If</li>

<code>true</code>

<li>, enables the panning capability. By default it's</li>

<code>true</code>

<li>.</li>

<code>lockAlpha</code>

<li>: If</li>

<code>true</code>

<li>, locks the alpha rotation, preventing the users from rotating the camera around alpha (in simpler terms, "horizontally").</li>

<code>lockBeta</code>

<li>: If</li>

<code>true</code>

<li>, locks the beta rotation, preventing the users from rotating the camera around beta (in simpler terms, "vertically").</li>

<code>lockRadius</code>

<li>: If</li>

<code>true</code>

<li>, locks the radius rotation, preventing the users from rotating the camera around radius (in simpler terms, "how far or close it is").</li>

<code>env</code>

<li>: The environment to use, it can be</li>

<code>prod</code>

<li>(uses mainnet wearables and catalysts) or</li>

<code>dev</code>

<li>(uses testnet wearables and catalysts).</li>

<p>Example:</p>

<code>iframe</code>

<h3>API:</h3>

<p>It's possible to load the</p>

<code>wearable-preview</code>

<p>in an iframe and communicate with it via</p>

<code>postMessage</code>

<p>:</p>

<h4>Update/override options</h4>

<p>If you want to update some options without having to reload the iframe, you can send an</p>

<code>update</code>

<p>message with the options and their new values:</p>

<pre>:</pre>

<pre>:</pre>

<code>iframe</code>

<h3>events:</h3>

<p>You can listen to events sent by the iframe via</p>

<code>postMessage</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>message</pre>

<pre>:</pre>

<pre>type</pre>

<pre>payload</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>controller</code>

<h3>RPC</h3>

<p>The</p>

<code>controller</code>

<p>allows to take screenshots and get metrics from the scene, and also control the emote animations (play/pause/stop/goTo).</p>

<p>To use the controller you can send</p>

<code>controller_request</code>

<p>messages and the response will arrive via a</p>

<code>controller_response</code>

<p>message.</p>

<p>The available methods are:</p>

<li>namespace:</li>

<code>scene</code>

<li>method:</li>

<code>getScreenshot</code>

<li>params:</li>

<code>[width: number, height: number]</code>

<li>result:</li>

<code>string</code>

<li>method:</li>

<code>getMetrics</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>Metrics</code>

<li>namespace:</li>

<code>emote</code>

<li>method:</li>

<code>play</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>pause</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>stop</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>goTo</code>

<li>params:</li>

<code>[seconds: number]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>getLength</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>number</code>

<li>method:</li>

<code>isPlaying</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>boolean</code>

<li>method:</li>

<code>changeZoom</code>

<li>params:</li>

<code>[zoom: number]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>changeCameraPosition</code>

<li>params:</li>

<code>[position: { alpha?: number, beta?: number, radius?: number }]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>panCamera</code>

<li>params:</li>

<code>[offset: { x?: number, y?: number, z?: number }]</code>

<li>result:</li>

<code>void</code>

<p>This is an example of an RPC:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>id</pre>

<pre>namespace</pre>

<pre>method</pre>

<pre>params</pre>

<pre>:</pre>

<pre>id</pre>

<p>Now you can use it like this:</p>

<h3>Setup</h3>

<code>npm ci</code>

<h3>Development</h3>

<code>npm run start</code>

<h3>Build</h3>

<code>npm run build</code>

<h2>About</h2>

<p>Render an interactive preview of a wearable</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/linker-server

# URL: https://github.com/decentraland/linker-server

<title>GitHub - decentraland/linker-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/linker-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>20</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/camera-reel-service

# URL: https://github.com/decentraland/camera-reel-service

<title>GitHub - decentraland/camera-reel-service: Services for Decentraland In World camera feature</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Services for Decentraland In World camera feature</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/camera-reel-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>49</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Camera Reel Service</h1>

<p>The Camera Reel Service is a simple solution designed specifically for uploading and retrieving camera images taken from Decentraland Explorer. This service enables users to capture and store images with additional metadata, providing valuable context to enhance their visual content.</p>

<h1>Setup</h1>

<p>Before start, make sure you have these installed:</p>

<strong>Rust</strong>

<li>| you can use this</li>

<strong>docker-compose</strong>

<li>| used for DB and MinIO (local S3)</li>

<strong>just</strong>

<li>(optional) | A command runner - use</li>

<code>cargo install just</code>

<li>or follow the</li>

<h1>Run</h1>

<p>Before running the Camera Reel service you need Postgres and MinIO (local S3) instances, you can start both by running:</p>

<pre>$</pre>

<pre>$</pre>

<p>In order to run the Camera Reel service:</p>

<pre>$</pre>

<p>Also, you can run it in watch mode by installing</p>

<code>cargo-watch</code>

<p>and using the command to run the server:</p>

<pre>$</pre>

<pre>$</pre>

<p>In order to run the tests:</p>

<pre>$</pre>

<h2>Logging</h2>

<p>The</p>

<code>RUST_LOG</code>

<p>environment variable can be used to specify the log level, for example:</p>

<pre>$</pre>

<em>See</em>

<em>to understand the possible values.</em>

<h2>API Docs</h2>

<p>The</p>

<code>utoipa</code>

<p>is used to generate the OpenAPI Documentation and a UI.</p>

<code>{server}/api/docs/ui</code>

<li>: Swagger UI with endpoints and schemas</li>

<code>{server}/api/docs/openapi.json</code>

<li>: OpenAPI json used by the UI</li>

<h2>Authentication</h2>

<p>Some endpoints may be authenticated based on the environment. The authentication method is the Signed Fetch and follows the</p>

<p>.</p>

<p>Those endpoints are:</p>

<li>POST</li>

<code>{server}/api/images/</code>

<li>DELETE</li>

<code>{server}/api/images/</code>

<li>GET</li>

<code>{server}/api/users/{address}</code>

<li>GET</li>

<code>{server}/api/users/{address}/images</code>

<p>There is an</p>

<p>, you can run it:</p>

<pre>$</pre>

<h1>Database Migrations</h1>

<p>To manage database migrations follow SQLX CLI instructions (</p>

<p>)</p>

<h1>Architecture</h1>

<p>Here is a highlevel architecture overview that can help to understand the project strucuture and components:</p>

<h2>About</h2>

<p>Services for Decentraland In World camera feature</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/single-sign-on

# URL: https://github.com/decentraland/single-sign-on

<title>GitHub - decentraland/single-sign-on</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/single-sign-on</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>15</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>84</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Single Sign On</h1>

<p>This webapp works as a centralized storage for shared data between different decentraland applications.</p>

<p>It is intended to be instantiated as an iframe inside the different dapps using the</p>

<p>.</p>

<h2>V1</h2>

<p>Supports storing, clearing and obtaining the user identity via post messages.</p>

<p>Version 0.1.0 or lower of the</p>

<code>@dcl/single-sign-on-client</code>

<p>has to be used to easily communicate with it.</p>

<p>This version will not receive future updates. As version 2 is the recommended one.</p>

<p>It is still currently supported by the SSO webapp to keep support applications that have not yet migrated to V2.</p>

<p>Handled messages follow the schema:</p>

<pre>:</pre>

<pre>:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<p>Responses have the schema:</p>

<pre>:</pre>

<pre>:</pre>

<pre>?:</pre>

<pre>?:</pre>

<h1>V2</h1>

<p>Latest and current version to be used.</p>

<p>It supports storing, clearing and obtaining the user identity, as well as the same for the user's connection data.</p>

<p>Handled messages have to follow the schema:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>?:</pre>

<p>Responses have the schema:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>?:</pre>

<h2>Allowed origins</h2>

<p>Depending on were this application is hosted, it will validate the origin of the messages received. If the application is hosted on a Decentraland subdomain (.decentraland.org, .decentraland.today, .decentraland.zone), it will validate that the origin of the received messages are from a decentraland subdomain on the same environment. For example, if this application is hosted on</p>

<p>, it will only allow messages from other https://*.decentraland.org sites.</p>

<p>If the application is hosted on another domain, being localhost or anything else, no origin validation takes place.</p>

<p>Works like this for both versions of the iframe.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/marketplace-server

# URL: https://github.com/decentraland/marketplace-server

<title>GitHub - decentraland/marketplace-server: A consumer of the dapps substreams output</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A consumer of the dapps substreams output</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/marketplace-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>14</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>74</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and components (ports).</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic and adapters.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our adapters (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<p>A consumer of the dapps substreams output</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk-dcl-cast-scene

# URL: https://github.com/decentraland/sdk-dcl-cast-scene

<title>GitHub - decentraland/sdk-dcl-cast-scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-dcl-cast-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL Cast Video streaming</h1>

<p>A scene with examples of some simple interactions. Perform the corresponding action on each cube to turn it green.</p>

<p>This scene shows you:</p>

<li>How to stream video into a scene from Decentraland Cast</li>

<li>How to play/pause a video stream</li>

<p>Learn more about</p>

<p>.</p>

<p>Learn more about streaming videos into a scene</p>

<p>.</p>

<h2>Try it out</h2>

<p>Download this full repository from</p>

<p>, including this and several other example scenes on SDK7.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<strong>Scene Usage</strong>

<li>Publish this scene to a Decentraland</li>

<li>Enter</li>

<li>to start streaming.</li>

<li>Run the scene by entiering your world. The live stream should be visible inside the stream for you and any other players there.</li>

<p>If there are any active streams on Decentraland Cast, you can select them from the Dropdown menu in the UI.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/atlas-server

# URL: https://github.com/decentraland/atlas-server

<title>GitHub - decentraland/atlas-server: ðº  A server for the atlas map</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ðº A server for the atlas map</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/atlas-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>22</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>187</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Atlas-server</h1>

<p>ðº A server for the atlas map</p>

<h2>Setup</h2>

<li>Run</li>

<code>npm install</code>

<li>Run</li>

<code>npm run build</code>

<li>Run</li>

<code>npm start</code>

<h2>Config</h2>

<p>The env variables and their default values are the following:</p>

<code>PORT=5000

HOST=0.0.0.0

SUBGRAPH_URL=https://api.thegraph.com/subgraphs/name/decentraland/marketplace

SUBGRAPH_COMPONENT_QUERY_TIMEOUT=30000

API_BATCH_SIZE=1000

API_CONCURRENCY=10

REFRESH_INTERVAL=60</code>

<p>You can</p>

<code>cp .env.example .env</code>

<p>and tweak the ones you want to change</p>

<h2>Endpoints</h2>

<h3>Tiles</h3>

<code>/v1/tiles</code>

<li>: Returns all the tiles in the map, with the legacy format:</li>

<code>{

type: number

x: number

y: number

owner?: string

estate_id?: string

name?: string

top?: number

left?: number

topLeft?: number

price?: number

}</code>

<p>This endpoint has been</p>

<strong>deprecated</strong>

<p>, you should use the</p>

<code>/v2/tiles</code>

<p>endpoint, more info below.</p>

<code>/v2/tiles</code>

<li>: Returns all the tiles in the map, with the following format:</li>

<code>{

id: string

x: number

y: number

type: 'owned' | 'unowned' | 'plaza' | 'road' | 'district'

top: boolean

left: boolean

topLeft: boolean

updatedAt: number

name?: string

owner?: string

estateId?: string

tokenId?: string

price?: number

}</code>

<strong>Filter</strong>

<p>: You can filter the results and the payloads using the following query params:</p>

<code>x1,y1,x2,y2</code>

<li>: You can request just a piece of the map, for example this will only return tiles between</li>

<code>10,10</code>

<li>and</li>

<code>20,20</code>

<li>:</li>

<code>/v2/tiles?x1=10&y1=10&x2=20&y2=20</code>

<code>include</code>

<li>: You can select which fields to include in each tile, for example this would include only</li>

<code>type</code>

<li>,</li>

<code>top</code>

<li>,</li>

<code>left</code>

<li>and</li>

<code>topLeft</code>

<li>:</li>

<code>/v2/tiles?include=type,top,left,topLeft</code>

<code>exclude</code>

<li>: The opposite to the filter above, the fields you pass in this filter will be excluded from each tile, for example if you don't cate about the</li>

<code>updatedAt</code>

<li>and</li>

<code>tokenId</code>

<li>fields you can do:</li>

<code>/v2/tiles?exclude=updatedAt,tokenId</code>

<h3>Map</h3>

<code>/v1/map.png</code>

<p>: This endpoint returns a PNG of the genesis map. You can customize the following via query params:</p>

<code>width</code>

<p>: The width in pixels of the image, ie:</p>

<code>?width=1024</code>

<code>height</code>

<p>: The height in pixels of the image, ie:</p>

<code>?height=1024</code>

<code>size</code>

<p>: The size in pixels of each tile, for instance if</p>

<code>size</code>

<p>is</p>

<code>10</code>

<p>, all the tiles will be 10x10px, ie:</p>

<code>?size=10</code>

<code>center</code>

<p>: The coords on which to center the map, ie:</p>

<code>?center=20,20</code>

<code>selected</code>

<p>: A list of coords to be highlighted, separated with semicolons, ie:</p>

<code>?selected=10,10;10,11;11,10;11,11</code>

<code>on-sale</code>

<p>: If true, the parcels and estates on sale will be displayed in blue.</p>

<p>Example:</p>

<code>/v1/map.png?center=23,-23&selected=23,-23&size=20&width=2048&height=2048</code>

<code>/v1/parcels/:x/:y/map.png</code>

<p>: This endpoint returns a PNG of the map already centered and highlighting a Parcel. You can also adjust</p>

<code>width</code>

<p>,</p>

<code>height</code>

<p>and</p>

<code>size</code>

<p>via query params</p>

<code>/v1/estates/:id/map.png</code>

<p>: This endpoint returns a PNG of the map already centered and highlighting an Estate. You can also adjust</p>

<code>width</code>

<p>,</p>

<code>height</code>

<p>and</p>

<code>size</code>

<p>via query params</p>

<code>/v2/parcels/:x/:y</code>

<p>: This endpoint returns metadata about a parcel by passing its coordinates. The metadata uses the</p>

<p>.</p>

<code>/v2/estates/:id</code>

<p>: This endpoint returns metadata about an estate by passing its id. The metadata uses the</p>

<p>.</p>

<code>/v2/contracts/:address/tokens/:id</code>

<p>: This endpoint returns metadata about a parcel or an estate, by passing the contract address and the token id. The contract address for LAND on mainnet is</p>

<code>0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d</code>

<p>and the contract address for Estate on mainnet is</p>

<code>0x959e104e1a4db6317fa58f8295f586e1a978c297</code>

<p>. The metadata uses the</p>

<p>.</p>

<code>/v2/districts</code>

<p>: Returns a list of all Districts in Genesis City.</p>

<code>/v2/districts/:id</code>

<p>: Returns a specific district by</p>

<code>id</code>

<p>.</p>

<code>/v2/addresses/:address/contributions</code>

<p>: Returns a list of contributions made by specific address. Each contribution includes the amount of parcels and the district</p>

<code>id</code>

<p>they were contributed to.</p>

<h3>Troubleshooting</h3>

<li>Installing</li>

<code>node-canvas</code>

<li>on Apple M1:</li>

<p>If the</p>

<code>npm install</code>

<p>fails on the dependency</p>

<code>node-canvas</code>

<p>and you are running on an Apple M1 chip, try installing these dependencies via brew:</p>

<code>brew install pkg-config cairo pango libpng jpeg giflib librsvg</code>

<p>.</p>

<h2>About</h2>

<p>ðº A server for the atlas map</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>18</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>14</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/studios

# URL: https://github.com/decentraland/studios

<title>GitHub - decentraland/studios: Verified Partners Registry</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Verified Partners Registry</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/studios</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>290</strong>

<h2>Files</h2>

<button>View code</button>

<p>This is a</p>

<p>project bootstrapped with</p>

<code>create-next-app</code>

<p>.</p>

<p>The CMS backend is running on an instance of Directus. The .env file entry</p>

<code>NEXT_PUBLIC_PARTNERS_DATA_URL</code>

<p>points to it's public endpoint.</p>

<h2>Getting Started</h2>

<p>First, run the development server:</p>

<pre>npm run dev</pre>

<pre>yarn dev</pre>

<p>Open</p>

<p>with your browser to see the result.</p>

<h2>Environment variables</h2>

<p>You will need to create a local .env.local next to .env file containing the following variables:</p>

<pre>NEXT_PUBLIC_METABASE_KEY=

NEXT_PUBLIC_INTERCOM_APP_ID=

API_ACCESS_TOKEN=

SENDGRID_ACCESS_TOKEN=

TELEGRAM_BOT_TOKEN=

TELEGRAM_CHAT_ID=</pre>

<h2>Deploy on Cloudflare Pages</h2>

<p>This project is optimized for running on a Cloudflare Pages instance by using</p>

<p>library.</p>

<p>Cloudflare build settings:</p>

<code>Framework preset: none

Build command: npx @cloudflare/next-on-pages@pre-v1 --experimental-minify

Build output directory: .vercel/output/static</code>

<p>Environment variables in addition to the listed before:</p>

<code>NODE_VERSION= 14</code>

<p>Functions Compatibility date:</p>

<code>2022-11-30</code>

<p>Functions Compatibility flags:</p>

<code>nodejs_compat</code>

<h2>About</h2>

<p>Verified Partners Registry</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-monitor

# URL: https://github.com/decentraland/catalyst-monitor

<title>GitHub - decentraland/catalyst-monitor</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-monitor</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>115</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>15</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://decentraland.github.io/catalyst-monitor/?includeDevServers

# URL: https://decentraland.github.io/catalyst-monitor/?includeDevServers

<title>Catalyst Nodes Monitor</title>

# Change to URL: https://github.com/decentraland/dcl-godot-cli

# URL: https://github.com/decentraland/dcl-godot-cli

<title>GitHub - decentraland/dcl-godot-cli</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-godot-cli</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Godot CLI</h1>

<h2>Requirement</h2>

<p>It only works on Linux, it requires Xvfb installed.

Dockerfile working.</p>

<h3>Docker quick local commands</h3>

<p>Build docker image:</p>

<pre>docker build -t dcl-godot-cli</pre>

<p>Run tests:</p>

<pre>docker run -v</pre>

<pre>:/app dcl-godot-cli</pre>

<h2>Examples</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-godot-cli

# Change to URL: https://github.com/decentraland/set-rollout-action

# URL: https://github.com/decentraland/set-rollout-action

<title>GitHub - decentraland/set-rollout-action</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/set-rollout-action</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>set-rollout-action</h1>

<p>Usage:</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-shared-dependencies

# URL: https://github.com/decentraland/unity-shared-dependencies

<title>GitHub - decentraland/unity-shared-dependencies</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-shared-dependencies</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>19</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>27</strong>

<h2>Files</h2>

<button>View code</button>

<h1>unity-shared-dependencies</h1>

<p>The sole purpose of this repository is to hold a unity package that contains the following content:</p>

<li>GLTF Importer wrappers</li>

<li>Custom Shaders</li>

<p>This package is a dependency for</p>

<code>unity-renderer</code>

<p>and</p>

<code>asset-bundle-converter</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/reels

# URL: https://github.com/decentraland/reels

<title>GitHub - decentraland/reels</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/reels</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>28</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>60</strong>

<h2>Files</h2>

<button>View code</button>

<h1>reels</h1>

<p>This is the reels project</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/themetaversefestival

# URL: https://github.com/decentraland/themetaversefestival

<title>GitHub - decentraland/themetaversefestival: A four-day celebration of music, culture and creativity in the virtual social world of Decentraland, the Metaverse Festival is a grand collision of light, sound and portable toilets.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A four-day celebration of music, culture and creativity in the virtual social world of Decentraland, the Metaverse Festival is a grand collision of light, sound and portable toilets.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/themetaversefestival</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>17</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>171</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCLMF 2023 - Decentraland Music Festival</h1>

<h2>About</h2>

<p>A four-day celebration of music, culture and creativity in the virtual social world of Decentraland, the Metaverse Festival is a grand collision of light, sound and portable toilets.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/dclmf-2023---decentraland-music-festival

# Change to URL: https://github.com/decentraland/vesting-dashboard

# URL: https://github.com/decentraland/vesting-dashboard

<title>GitHub - decentraland/vesting-dashboard: ð  Decentraland's vesting dashboard</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Decentraland's vesting dashboard</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/vesting-dashboard</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>11</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>247</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Vesting Dashboard</h1>

<p>Decentraland's</p>

<p>This web UI works with any MANA, DAI, USDC or USDT Vesting Contract</p>

<h3>Desktop</h3>

<h3>Mobile</h3>

<h2>Running the project</h2>

<p>First copy the</p>

<code>.env.example</code>

<p>file to</p>

<code>.env</code>

<p>using:</p>

<pre>cp .env.example .env</pre>

<p>and, in</p>

<code>.env</code>

<p>, change any variable you need.</p>

<p>Then:</p>

<pre>npm install</pre>

<pre>npm start</pre>

<p>You will have to provide the vesting contract's address in the url, like:</p>

<code>http://localhost:3000/#/0x92f08...6fb12</code>

<h2>Deployment</h2>

<p>Every commit to the</p>

<code>master</code>

<p>branch will deploy automatically to the dev (</p>

<p>) and staging</p>

<p>) environments.</p>

<p>To deploy to prod, you will need to first create a</p>

<p>and then run the rollout manually from</p>

<p>. Input the version of the newly created release, select the</p>

<code>org</code>

<p>env and kick it ð</p>

<h2>About</h2>

<p>ð Decentraland's vesting dashboard</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>13</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk

# URL: https://github.com/decentraland/sdk

<title>GitHub - decentraland/sdk: PM repository for SDK</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>PM repository for SDK</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<pre>Signed-off-by: Aga <aga@besz.me></pre>

<code>c8d25d0</code>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>PM repository for SDK</p>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/protocol-squad

# URL: https://github.com/decentraland/protocol-squad

<title>GitHub - decentraland/protocol-squad</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/protocol-squad</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h1>State of the Protocol Squad</h1>

<p>Welcome to the State of the Protocol Squad document. This document is updated periodically with the status and plan of each implementation and documentation.</p>

<p>The current team members are:</p>

<li>@leanmendoza - Godot implementation leader</li>

<li>@menduz - Babylon implementation leader, technical coordination</li>

<li>@robtfm - Bevy implementation leader</li>

<li>@slezica - Documentation & technical writing</li>

<p>The Protocol Squad has two objectives:</p>

<li>Publish an extensive and detailed documentation of the Decentraland protocol</li>

<li>Create alternative implementations of the World Explorer</li>

<p>There are currently three implementations being developed, each implementation has their own different objectives and tints in development.</p>

<strong>Current objective</strong>

<p>: ð Render interactive scenes.</p>

<strong>Next objective</strong>

<p>: ð Connect the explorers together and see eachother in-world.</p>

<p>The team also focuses on documenting the protocol in the shape of</p>

<p>and as contributions to the</p>

<h2>Babylon.js + Typescript</h2>

<strong>Repository</strong>

<p>:</p>

<strong>Objective</strong>

<p>: It is the educational implementation of Decentraland. Its main objective is to provide a clear standard/reference implementation that implements the Decentraland protocol in the most readable and correct way possible. Even though it contains many performance optimizations, complex optimizations are left for other explorers to optimize this one for readability. The test coverage of this implementation should be the highest and its objective is to be the "reference implementation" when implementing new explorers from scratch.</p>

<strong>Current state</strong>

<p>: ON TRACK ð¢</p>

<h2>Bevy + Rust</h2>

<strong>Repository</strong>

<p>:</p>

<strong>Objective</strong>

<p>: Rust may be the greatest language for the coming decades, and its open source nature is very aligned with Decentraland's mission. The same happens with Bevy (the engine). Internally, Bevy is already implemented using an ECS, at the moment of writing this document, creating a Decentraland Explorer in this technology seems to be the best decision long term.</p>

<strong>Current state</strong>

<p>: ON TRACK ð¢</p>

<h2>Godot 4 + GDScript + Rust</h2>

<strong>Repository</strong>

<p>:</p>

<strong>Objective</strong>

<p>: Its objective is to be a production ready (or ready-to-fork) Decentraland Explorer. Godot (fully open source) has been gaining traction in the industry and more and more titles are being published and developed on Godot as time passes.</p>

<strong>Current state</strong>

<p>: ON TRACK - Started deferred ð </p>

<h2>Unity + C#</h2>

<strong>Current state</strong>

<p>: â CANCELLED, replaced by Godot. The Decentraland Foundation will take the lead with a</p>

<h1>Implementation, part 1. Render interactive scenes</h1>

<p>At this stage, the implementations will focus on loading and unloading scenes, render their content in the world and oferring basic interactivity.</p>

<th>Feature</th>

<th>Specification</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<code>CI Tests</code>

<td>Continous automated testing in commits and pull requests</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Continous release</code>

<td>Continous release of testable artifacts</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Load and unload scenes</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Scene Runtime</code>

<td>(Living)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>CRDT protocol</code>

<td>(Living)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Scene Tick</code>

<td>(Living)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Load static realm/world</code>

<td>(Living)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Resolve realm base URL</code>

<td>(Review)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Static entitites for SDK</code>

<td>(Draft)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Player Locomotion</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>âââ Colliders</code>

<code>MeshCollider</code>

<td>&</td>

<code>GltfContainer</code>

<td>â</td>

<td>1/2</td>

<td>â</td>

<code>âââ First Person Camera</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<th>SDK Component</th>

<th>Specification</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<th>SDK</th>

<code>Transform</code>

<td>(Living)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>MeshRenderer</code>

<td>PENDING</td>

<td>Partially</td>

<td>Partially</td>

<td>Partially</td>

<td>â</td>

<code>MeshCollider</code>

<td>PENDING</td>

<td>Partially</td>

<td>Partially</td>

<td>Partially</td>

<td>â</td>

<code>Billboard</code>

<td>(Living)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Raycast</code>

<td>(Draft)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>PointerEvents</code>

<td>(Draft)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>GltfContainer</code>

<td>(Draft)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>GltfContainerLoadingState</code>

<td>(Draft)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Animator</code>

<td>ADR-216 (PENDING)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>EngineInfo</code>

<td>(Living)</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<h1>Implementation, part 2: Seeing other people</h1>

<th>Feature</th>

<th>Specification</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<code>Load a global scene (AvatarsScene)</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Create ephemeral identity</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Connect to WebSocket transport</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>âââTransport implementation</code>

<td>â</td>

<td>â</td>

<td>â</td>

<code>âââExpose transport to SDK</code>

<td>PENDING</td>

<th>SDK Component</th>

<th>Specification</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<th>SDK</th>

<code>AvatarShape</code>

<td>PENDING Render avatars with custom wearables and emotes</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<h1>Implementation, part 3: Full SDK implementation</h1>

<th>Feature</th>

<th>Specification</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<code>Player Locomotion</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<code>âââ Moving platforms</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<code>âââ Third person camera</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>âââ Jump</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>Only functionality</td>

<code>Traversal city loading</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>Scene boundaries checker</td>

<td>PENDING</td>

<th>Specification</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<th>Foundation Client</th>

<td>fetch</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>WebSocket</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<td>PortableExperiences</td>

<td>WIP</td>

<td>â</td>

<td>RestrictedActions</td>

<td>â</td>

<td>â</td>

<td>Runtime</td>

<td>â</td>

<td>Partially</td>

<td>â</td>

<td>SignedFetch</td>

<td>â</td>

<td>WIP</td>

<td>â</td>

<td>CommsApi</td>

<td>â</td>

<th>SDK Component</th>

<th>Specification</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<th>Foundation Client</th>

<code>CameraMode</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>CameraModeArea</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<code>Material</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>Partially</td>

<td>â</td>

<code>AvatarAttach</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>TextShape</code>

<td>PENDING</td>

<td>Partially</td>

<td>Partially</td>

<td>â</td>

<code>Visibility</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>AudioSource</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>AudioStream</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>VideoPlayer</code>

<td>PENDING</td>

<td>â</td>

<td>â</td>

<code>UiTransform</code>

<td>â</td>

<td>â</td>

<code>UiCanvasInformation</code>

<td>â</td>

<code>UiLabel</code>

<td>â</td>

<td>â</td>

<code>UiText</code>

<td>â</td>

<td>â</td>

<code>UiInput & UiInputResult</code>

<td>â</td>

<td>â</td>

<code>UiDropdown & UiDropdownResult</code>

<td>â</td>

<td>â</td>

<h1>Comms Support</h1>

<th>Feature</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<code>WebSocket Room</code>

<td>â</td>

<td>â</td>

<td>â</td>

<code>SignedLogin</code>

<td>â</td>

<td>â</td>

<td>â</td>

<code>LiveKit</code>

<td>â</td>

<td>PR</td>

<td>â</td>

<code>âââVoiceChat</code>

<td>â</td>

<td>PR</td>

<td>â</td>

<td>Archipelago</td>

<td>WIP</td>

<h1>Runtime 6 support (aka SDK6)</h1>

<th>Feature</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<th>Foundation Client</th>

<code>Native support</code>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Proxy support</code>

<td>â</td>

<td>â</td>

<h1>Proposal #2: implementation part 1</h1>

<h3>SDK Components</h3>

<th>SDK Component</th>

<th>Bevy</th>

<th>Godot</th>

<code>PointerLock</code>

<code>AvatarModifierArea</code>

<code>NftShape</code>

<code>VideoEvent</code>

<code>Tween</code>

<code>TweenSequence</code>

<code>TweenState</code>

<h3>Explorer functionality Components</h3>

<th>Web3 - Sign-in</th>

<th>Bevy</th>

<th>Godot</th>

<code>External wallet</code>

<code>Browser wallet</code>

<code>Web2 method</code>

<h1>Future Ideas</h1>

<th>Feature</th>

<th>Description</th>

<code>ReferenceMaterial</code>

<td>SDK Component</td>

<td>Reuse materials and reference an entity to use its material while reducing hundreds of CRDT messages</td>

<code>CinematicCamera</code>

<td>SDK Component</td>

<td>Ability to attach the camera to a specific entity while standing on a scene. Enables cinematic cameras and new game modes.</td>

<td>GameServers</td>

<td>Enables scenes to run inside a specialized server. The server connects to comms and is considered an authority. The scene can trust messages from the server and automatic entity synchronization can be configured.</td>

<td>Enable actors for comms</td>

<td>A novel communications architecture to enable third party actors to join the communications network of Decentraland. Unblocks game servers</td>

<td>Raycast from global scenes</td>

<h1>Links</h1>

<p>Governance proposal:</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/hammurabi

# URL: https://github.com/decentraland/hammurabi

<title>GitHub - decentraland/hammurabi: Repository to host the reference implementation made in Babylon.js by the Protocol Squad</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Repository to host the reference implementation made in Babylon.js by the Protocol Squad</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/hammurabi</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>37</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>38</strong>

<h2>Files</h2>

<button>View code</button>

<h1>hammurabi</h1>

<p>The reference/educational implementation of the Decentraland protocol.</p>

<p>This implementation uses the babylon.js framework and runs entirely on web browsers.</p>

<p>This project's goals are to:</p>

<li>document current and future protocol standards</li>

<li>experiment with changes to the protocol</li>

<li>guide new contributors into how Decentraland works</li>

<li>enable easy prototyping of new features</li>

<p>This repository is the companion material for the implementation guide (still work in progress, check out this</p>

<p>and</p>

<p>).</p>

<strong>Status: Proof of Concept, does not run</strong>

<h1>Commit Guide</h1>

<li>This commit sets up the tooling to build the project. It uses Typescript as language,</li>

<code>esbuild</code>

<li>to compile and build the project,</li>

<code>npm</code>

<li>for package management,</li>

<code>jest</code>

<li>for tests, and GitHub actions for continuous integrattion.</li>

<h1>Building and Running</h1>

<li>Clone the repo using</li>

<code>git clone https://github.com/decentraland/hammurabi</code>

<code>cd hammurabi</code>

<li>to move into the repo</li>

<code>make watch</code>

<li>to start the development web server</li>

<li>Open</li>

<code>https://localhost:7081</code>

<p>Additionally,</p>

<code>make build</code>

<p>builds the project into the</p>

<code>./static</code>

<p>folder, and</p>

<code>make test</code>

<p>executes all tests.</p>

<h2>Testing</h2>

<code>make test</code>

<li>executes all the tests</li>

<code>make test-watch</code>

<li>executes all the tests and watches for file changes to run the tests again</li>

<code>make test-watch TESTARGS='test/file.spec.ts'</code>

<li>runs the tests of</li>

<code>test/file.spec.ts</code>

<h2>Testing realm</h2>

<p>This repository includes a "testing realm". It is a set of scenes compiled and served statically as a regular realm. The file structure is generated by running the</p>

<code>sdk-commands export-static</code>

<p>command of the Decentraland SDK.</p>

<p>Since it uses the SDK out of the box, it is also possible to run the scenes in the embedded official Decentraland Explorer for compliance testing. You can do that by running</p>

<code>make sdk-watch</code>

<p>, it will first build the scenes and then launch a web server to use the explorer. It is important to notice that the babylon exlorer does not work with the "sdk-watch" mode yet, it only works with static the files generated by</p>

<code>make build-testing-realm</code>

<h2>About</h2>

<p>Repository to host the reference implementation made in Babylon.js by the Protocol Squad</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-builder

# URL: https://github.com/decentraland/unity-builder

<title>GitHub - decentraland/unity-builder: Build Unity projects for different platforms</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Build Unity projects for different platforms</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-builder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>434</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Unity - Builder</h1>

<p>(Not affiliated with Unity Technologies)</p>

<p>GitHub Action to</p>

<p>for different platforms.</p>

<p>Part of the</p>

<p>open source project.</p>

<h2>How to use</h2>

<p>Find the</p>

<p>on the GameCI</p>

<p>.</p>

<h2>Related actions</h2>

<p>Visit the

GameCI</p>

<p>status repository for related Actions.</p>

<h2>Community</h2>

<p>Feel free to join us on</p>

<p>and engage with the community.</p>

<h2>Contributing</h2>

<p>To help improve the documentation, please find the docs</p>

<p>.</p>

<p>To contribute to Unity Builder, kindly read the</p>

<p>.</p>

<h2>Support us</h2>

<p>GameCI is free for everyone forever.</p>

<p>You can support us at</p>

<p>.</p>

<h2>Licence</h2>

<p>This repository is</p>

<p>licensed.</p>

<p>This includes all contributions from the community.</p>

<h2>About</h2>

<p>Build Unity projects for different platforms</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>210</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/nft-server

# URL: https://github.com/decentraland/nft-server

<title>GitHub - decentraland/nft-server: NFT Server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>NFT Server</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/nft-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>22</strong>

<strong>27</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>271</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NFT Server</h1>

<p>This server is meant to aggregate data from different subgraphs under a single API.</p>

<h1>Run the project</h1>

<pre>npm install</pre>

<p>After that you'll need to up check the</p>

<code>.env.example</code>

<p>file and create your own</p>

<code>.env</code>

<p>file. Some properties have defaults. Once you're done, you can run the project!</p>

<pre>npm start</pre>

<pre>npm run start:watch</pre>

<h1>Modules</h1>

<h2>NFTs</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/nfts</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>name</code>

<li>,</li>

<code>recently_listed</code>

<li>,</li>

<code>recently_sold</code>

<li>,</li>

<code>cheapest</code>

<li>.</li>

<code>category</code>

<li>: Filter by</li>

<code>NFTCategory</code>

<li>. Possible values:</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>wearable</code>

<li>,</li>

<code>ens</code>

<li>.</li>

<code>owner</code>

<li>: Filter by owner. Type:</li>

<code>address</code>

<li>.</li>

<code>isOnSale</code>

<li>: Only return results that have an open, non-expired listing. Type:</li>

<code>boolean</code>

<li>.</li>

<code>search</code>

<li>: Free text search. Type:</li>

<code>string</code>

<li>.</li>

<code>isLand</code>

<li>: Only return results that their</li>

<code>category</code>

<li>is either</li>

<code>parcel</code>

<li>or</li>

<code>estate</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emoteGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>creator</code>

<li>: Filter results by the creator address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>itemRarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type</li>

<code>string</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>isOnRent</code>

<li>: Filter results by NFTs that are on rent. Possible values:</li>

<code>true</code>

<li>,</li>

<code>false</code>

<code>rentalStatus</code>

<li>: Filter results by</li>

<code>Rental status</code>

<li>. Can be used only when querying NFTs that are on rent using the</li>

<code>isOnRent</code>

<li>flag. Possible values:</li>

<code>open</code>

<li>,</li>

<code>executed</code>

<li>,</li>

<code>claimed</code>

<li>,</li>

<code>cancelled</code>

<li>.</li>

<code>minPrice</code>

<li>: Filter results by minimun price. Type:</li>

<code>number</code>

<code>maxPrice</code>

<li>: Filter results by max price. Type:</li>

<code>number</code>

<code>adjacentToRoad</code>

<li>: Filter land that is next to a road. Type:</li>

<code>boolean</code>

<code>minDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of minimun this value. Type:</li>

<code>number</code>

<code>maxDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of maximun this value. Type</li>

<code>number</code>

<code>minEstateSize</code>

<li>: Filter results by minimum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>maxEstateSize</code>

<li>: Filter results by maximum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>rentalDays</code>

<li>: Filter lands that have the possibility to be rented at least one of the days listed on rentalDays. Type:</li>

<code>number</code>

<li>. Repeatable</li>

<h2>Items</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/items</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>recently_reviewed</code>

<li>,</li>

<code>recently_sold</code>

<li>,</li>

<code>name</code>

<li>,</li>

<code>cheapest</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>rarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>isSoldOut</code>

<li>: Only return results that are sold out (all NFTs have been minted). Type:</li>

<code>boolean</code>

<li>.</li>

<code>isOnSale</code>

<li>: Only return results that can be bought (</li>

<code>CollectionStore</code>

<li>has been added as minter, and there's still available supply to mint). Type:</li>

<code>boolean</code>

<li>.</li>

<code>search</code>

<li>: Free text search. Type:</li>

<code>string</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emoteGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>id</code>

<li>: Filter results by id. It supports multiple values by adding the query param multiple times. Type:</li>

<code>contractAddress-itemId</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>minPrice</code>

<li>: Return only sales with a price higher than this. Type</li>

<code>number</code>

<li>.</li>

<code>maxPrice</code>

<li>: Return only sales with a price lower than this. Type</li>

<code>number</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>urn</code>

<li>: Filter results by URN. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<h2>Catalog</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/catalog</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>limit</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>offset</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>recently_sold</code>

<li>,</li>

<code>cheapest</code>

<li>,</li>

<code>most_expensive</code>

<li>,</li>

<code>recently_listed</code>

<li>.</li>

<code>sortDirection</code>

<li>: Sort direction results. Possible values:</li>

<code>asc</code>

<li>,</li>

<code>desc</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>rarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>isSoldOut</code>

<li>: Only return results that are sold out (all NFTs have been minted). Type:</li>

<code>boolean</code>

<li>.</li>

<code>isOnSale</code>

<li>: Only return results that can be bought (</li>

<code>CollectionStore</code>

<li>has been added as minter, and there's still available supply to mint). Type:</li>

<code>boolean</code>

<li>.</li>

<code>search</code>

<li>: Free text search. Type:</li>

<code>string</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>id</code>

<li>: Filter results by id. It supports multiple values by adding the query param multiple times. Type:</li>

<code>contractAddress-itemId</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>minPrice</code>

<li>: Return only sales with a price higher than this. Type</li>

<code>number</code>

<li>.</li>

<code>maxPrice</code>

<li>: Return only sales with a price lower than this. Type</li>

<code>number</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>onlyMinting</code>

<li>: Only return results that are only available for minting. Type</li>

<code>boolean</code>

<li>.</li>

<code>onlyListing</code>

<li>: Only return results that have opened listing and no minting. Type</li>

<code>boolean</code>

<li>.</li>

<h2>Orders</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/orders</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_listed</code>

<li>,</li>

<code>recently_updated</code>

<li>,</li>

<code>cheapest</code>

<li>.</li>

<code>marketplaceAddress</code>

<li>: Filter results by marketplace contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>owner</code>

<li>: Filter by owner. Type:</li>

<code>address</code>

<li>.</li>

<code>buyer</code>

<li>: Filter by buyer. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>status</code>

<li>: Filter results by</li>

<code>OrderStatus</code>

<li>. Possible values:</li>

<code>open</code>

<li>,</li>

<code>sold</code>

<li>,</li>

<code>cancelled</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Bids</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/bids</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_offered</code>

<li>,</li>

<code>recently_updated</code>

<li>,</li>

<code>most_expensive</code>

<li>.</li>

<code>bidAddress</code>

<li>: Filter results by bid contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>bidder</code>

<li>: Filter by bidder. Type:</li>

<code>address</code>

<li>.</li>

<code>seller</code>

<li>: Filter by seller. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>status</code>

<li>: Filter results by</li>

<code>BidStatus</code>

<li>. Possible values:</li>

<code>open</code>

<li>,</li>

<code>sold</code>

<li>,</li>

<code>cancelled</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Mints</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/mints</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_minted</code>

<li>,</li>

<code>most_expensive</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. Type:</li>

<code>address</code>

<li>.</li>

<code>beneficiary</code>

<li>: Filter by beneficiary. Type:</li>

<code>address</code>

<li>.</li>

<code>minter</code>

<li>: Filter by minter. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>issuedId</code>

<li>: Filter results by</li>

<code>issuedId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>isSale</code>

<li>: Return only mints that came from a sale.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Sales</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/sales</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_sold</code>

<li>,</li>

<code>most_expensive</code>

<li>.</li>

<code>type</code>

<li>: Filter by sale type. Possible values:</li>

<code>order</code>

<li>,</li>

<code>bid</code>

<li>,</li>

<code>mint</code>

<li>.</li>

<code>category</code>

<li>: Filter by NFT category. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>ens</code>

<li>,</li>

<code>wearable</code>

<li>.</li>

<code>seller</code>

<li>: Filter by seller. Type:</li>

<code>address</code>

<li>.</li>

<code>buyer</code>

<li>: Filter by buyer. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>from</code>

<li>: Return only sales that happened after this timestamp. Type</li>

<code>number</code>

<li>.</li>

<code>to</code>

<li>: Return only sales that happened before this timestamp. Type</li>

<code>number</code>

<li>.</li>

<code>minPrice</code>

<li>: Return only sales with a price higher than this. Type</li>

<code>number</code>

<li>.</li>

<code>maxPrice</code>

<li>: Return only sales with a price lower than this. Type</li>

<code>number</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Accounts</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/accounts</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>most_sales</code>

<li>,</li>

<code>most_purchases</code>

<li>,</li>

<code>most_spent</code>

<li>,</li>

<code>most_earned</code>

<li>,</li>

<code>most_royalties</code>

<li>.</li>

<code>id</code>

<li>: Filter by user address. Type:</li>

<code>string</code>

<li>.</li>

<code>address</code>

<li>: Currently the same as id, Filter by user address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Collections</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/collections</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>name</code>

<li>,</li>

<code>recently_reviewed</code>

<li>,</li>

<code>size</code>

<li>.</li>

<code>name</code>

<li>: Filter by the collection name. Type:</li>

<code>string</code>

<li>.</li>

<code>search</code>

<li>: Filter collections containing the search value in its name, case insensitive. Type:</li>

<code>string</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>isOnSale</code>

<li>: Return only collections are currently on sale. Type:</li>

<code>boolean</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Contracts</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/contracts</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>name</code>

<li>.</li>

<code>category</code>

<li>: Filter by</li>

<code>NFTCategory</code>

<li>. Possible values:</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>wearable</code>

<li>,</li>

<code>ens</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Analytics</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/analytics/:timeframe</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>URL Params</strong>

<p>:</p>

<code>timeframe</code>

<li>: The timeframe within the analytic data was gather. Possible values:</li>

<code>day</code>

<li>|</li>

<code>week</code>

<li>|</li>

<code>month</code>

<li>|</li>

<code>all</code>

<h2>Volume</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/volume/:timeframe</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>URL Params</strong>

<p>:</p>

<code>timeframe</code>

<li>: The timeframe within the analytic data was gather. Possible values:</li>

<code>day</code>

<li>|</li>

<code>week</code>

<li>|</li>

<code>month</code>

<li>|</li>

<code>all</code>

<h2>Trendings</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/trendings</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>size</code>

<li>: The amount of trending items to return</li>

<h2>Rankings</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/rankings/:timeframe</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>URL Params</strong>

<p>:</p>

<code>timeframe</code>

<li>: The timeframe within the analytic data was gather. Possible values:</li>

<code>day</code>

<li>|</li>

<code>week</code>

<li>|</li>

<code>month</code>

<li>|</li>

<code>all</code>

<code>entity</code>

<li>: The entity that wants to get ranked. Possible values:</li>

<code>items</code>

<li>|</li>

<code>creators</code>

<li>|</li>

<code>collectors</code>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type: number.</li>

<code>rarity</code>

<li>: Filter the results by the rarity. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>category</code>

<li>: Filter the results by wearable category. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>.</li>

<h2>Prices</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/prices</code>

<strong>Type</strong>

<p>:</p>

<strong>Query Params</strong>

<p>:</p>

<code>category</code>

<li>: Filter by</li>

<code>NFTCategory</code>

<li>. Possible values:</li>

<code>land</code>

<li>,</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>wearable</code>

<li>,</li>

<code>emote</code>

<li>and</li>

<code>ens</code>

<li>.</li>

<code>assetType</code>

<li>: Filter by</li>

<code>AssetType</code>

<li>. Possible values:</li>

<code>item</code>

<li>or</li>

<code>nft</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emoteGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>itemRarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>adjacentToRoad</code>

<li>: Filter land that is next to a road. Type:</li>

<code>boolean</code>

<code>minDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of minimun this value. Type:</li>

<code>number</code>

<code>maxDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of maximun this value. Type</li>

<code>number</code>

<code>minEstateSize</code>

<li>: Filter results by minimum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>maxEstateSize</code>

<li>: Filter results by maximum amount of parcels in the Estate. Type:</li>

<code>number</code>

<h2>Stats</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/stats/:category/:stat</code>

<strong>Type</strong>

<p>:</p>

<strong>URL Params</strong>

<p>:</p>

<code>category</code>

<li>: The category asking stats about. Possible values:</li>

<code>estate</code>

<li>.</li>

<code>stat</code>

<li>: The resource stat asked.</li>

<li>Possible values:</li>

<li>For resource</li>

<code>estate</code>

<li>:</li>

<code>size</code>

<strong>Query Params</strong>

<p>:</p>

<code>isOnSale</code>

<li>: Only return results that have an open, non-expired listing. Type:</li>

<code>boolean</code>

<li>.</li>

<code>adjacentToRoad</code>

<li>: Filter land that is next to a road. Type:</li>

<code>boolean</code>

<code>minDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of minimun this value. Type:</li>

<code>number</code>

<code>maxDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of maximun this value. Type</li>

<code>number</code>

<code>minEstateSize</code>

<li>: Filter results by minimum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>maxEstateSize</code>

<li>: Filter results by maximum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>minPrice</code>

<li>: Filter results by minimun price. Type:</li>

<code>number</code>

<code>maxPrice</code>

<li>: Filter results by max price. Type:</li>

<code>number</code>

<h2>About</h2>

<p>NFT Server</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>18</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>24</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-http-prom-metrics

# URL: https://github.com/decentraland/dcl-http-prom-metrics

<title>GitHub - decentraland/dcl-http-prom-metrics: Library to collect and expose Prometheus metrics from an HTTP Rust server.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Library to collect and expose Prometheus metrics from an HTTP Rust server.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-http-prom-metrics</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dcl-http-prom-metrics</h1>

<p>Library to collect and expose Prometheus metrics from an HTTP Rust server.</p>

<h2>Supported Frameworks</h2>

<li>Actix</li>

<h2>Usage</h2>

<h2>About</h2>

<p>Library to collect and expose Prometheus metrics from an HTTP Rust server.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/substreams-reorg-handler

# URL: https://github.com/decentraland/substreams-reorg-handler

<title>GitHub - decentraland/substreams-reorg-handler: A server that handles the substreams reorgs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A server that handles the substreams reorgs</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-reorg-handler</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Reorg Handler</h2>

<p>Endpoint:</p>

<code>/v1/reorg-handler</code>

<p>The Reorg Handler provides an endpoint to handle blockchain reorganizations. It takes in the last valid block number and the corresponding schema to handle the reorganization accordingly.</p>

<h3>Type</h3>

<p>This handler function does not specifically return a structured object. It returns an appropriate response based on the provided parameters.</p>

<h3>Query Params:</h3>

<code>last_valid_block</code>

<li>: The last block number that is considered valid. It's used to determine the point at which the reorganization must be handled. Type:</li>

<code>number</code>

<li>.</li>

<code>schema</code>

<li>: The schema to be used in handling the reorganization. Type:</li>

<code>string</code>

<li>.</li>

<h3>Request Headers:</h3>

<li>The request may include standard HTTP headers.</li>

<h3>Response:</h3>

<code>200 OK</code>

<li>: Successful handling of the reorganization.</li>

<code>400 BAD REQUEST</code>

<li>: If the</li>

<code>last_valid_block</code>

<li>or</li>

<code>schema</code>

<li>parameters are missing, the endpoint will return a 400 Bad Request status code with the message "Missing parameters."</li>

<h3>Example Usage:</h3>

<p>To invoke the reorg handler with a specific block number and schema, you can make an HTTP request to the endpoint:</p>

<h3>Code Implementation:</h3>

<p>The handler function for this endpoint is implemented in the</p>

<code>createReorgHandler</code>

<p>function, which accepts the reorg components and returns the request handler to process the reorganization.</p>

<h3>Note:</h3>

<p>Make sure to provide both the</p>

<code>last_valid_block</code>

<p>and</p>

<code>schema</code>

<p>parameters in the query string for the handler to process the reorganization correctly. If any of these parameters are missing, the handler will return a bad request response.</p>

<h2>About</h2>

<p>A server that handles the substreams reorgs</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/contracts

# URL: https://github.com/decentraland/contracts

<title>GitHub - decentraland/contracts: ð Decentraland contract addresses</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Decentraland contract addresses</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/contracts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>221</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Contract Addresses</h1>

<h2>See addresses</h2>

<p>To add new addresses edit</p>

<h2>About</h2>

<p>ð Decentraland contract addresses</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>23</strong>

<h3>Watchers</h3>

<strong>23</strong>

<h3>Forks</h3>

<strong>14</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/status-page

# URL: https://github.com/decentraland/status-page

<title>GitHub - decentraland/status-page: DCL status page</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>DCL status page</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/status-page</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>76</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL Status Page</h1>

<p>This repository contains the front end for the Decentraland Status page published at</p>

<h2>Build and Run</h2>

<p>Just run clone the repo and run</p>

<code>yarn install</code>

<p>and</p>

<code>yarn start</code>

<h2>Deploy</h2>

<p>The website is deployed using CloudFlare pages with each merge to the</p>

<code>main</code>

<p>branch.</p>

<h2>Dependencies</h2>

<strong>Incidents</strong>

<p>Details and history of the incidents come from the</p>

<p>expose at</p>

<strong>Public Metrics API</strong>

<p>This site uses the</p>

<p>at</p>

<p>to populate the Metrics content</p>

<h2>About</h2>

<p>DCL status page</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/public-metrics-exporter

# Change to URL: https://github.com/orgs/decentraland/repositories?page=5

# URL: https://github.com/orgs/decentraland/repositories?page=5

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Create simple client/server RPCs over a transport</p>

<p>Github Action to return a Unity pro license.</p>

<p>Exports data from Decentraland's subgraphs at</p>

<p>Shared knowledge base of incidents Root Cause Analysis</p>

<p>Tool for benchmarking RPC Servers of the Decentraland RPC implementation</p>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<p>Favorites server implementation</p>

<p>Pick Up Example Quest Scene</p>

<p>Proxy server that relays transactions to Biconomy, using some restrictions</p>

<p>ð½ Decentraland Collections Graph</p>

<p>Sends pointer deploymens via Server Sent Events</p>

<p>Decentraland RPC - Rust implementation</p>

<p>ð¡ Interact with Decentraland's users, send private messages and add friends.</p>

<p>Repository to host the reference implementation made in Babylon.js by the Protocol Squad</p>

<p>ð» Decentraland command-line interface</p>

<em>5</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/mini-rpc

# URL: https://github.com/decentraland/mini-rpc

<title>GitHub - decentraland/mini-rpc: Create simple client/server RPCs over a transport</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Create simple client/server RPCs over a transport</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/mini-rpc</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>9</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>16</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/mini-rpc</h1>

<p>This package can be used to create clients and servers over an abstract transport, and it includes some transport implementations.</p>

<h2>Installation</h2>

<pre>npm i @dcl/mini-rpc</pre>

<h2>Usage</h2>

<p>You need to define the methods, and optionally you can also add events</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Then you can implement the client by extending the</p>

<code>RPC</code>

<p>class and using the internal</p>

<code>request</code>

<p>method</p>

<pre>:</pre>

<pre>:</pre>

<pre>key</pre>

<pre>:</pre>

<pre>:</pre>

<pre>key</pre>

<pre>value</pre>

<pre>:</pre>

<pre>key</pre>

<pre>:</pre>

<pre>key</pre>

<strong>NOTE</strong>

<p>: You will need to pass an id to the</p>

<code>RPC</code>

<p>super constructor, in this case</p>

<code>"my-rpc"</code>

<p>you will need to use the same name for the server implementation. This is so multiples clients and servers can work over the same single transport.</p>

<p>To implement the server you do the same thing but use the internal</p>

<code>handle</code>

<p>to implement the methods</p>

<pre>:</pre>

<pre>key</pre>

<pre>key</pre>

<pre>value</pre>

<pre>key</pre>

<pre>path</pre>

<p>Now you can create a transport and use the client like this</p>

<pre>name</pre>

<p>And the server like this</p>

<pre>:</pre>

<h2>Test</h2>

<pre>npm</pre>

<p>Or with coverage reports</p>

<pre>npm run test:coverage</pre>

<h2>Build</h2>

<pre>npm run build</pre>

<h2>Release</h2>

<p>To release a new version of this package create a</p>

<p>via GitHub</p>

<h2>About</h2>

<p>Create simple client/server RPCs over a transport</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/social-rpc-client-js

# URL: https://github.com/decentraland/social-rpc-client-js

<title>GitHub - decentraland/social-rpc-client-js</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/social-rpc-client-js</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Social Service JS Client</h1>

<p>The Decentraland Social Service JS Client is a Websocket client which uses the</p>

<p>to communicate with the</p>

<p>.</p>

<h2>Collaboration</h2>

<h3>Setting up the development environment</h3>

<p>In order to build the client, you'll need to have</p>

<p>and</p>

<p>installed.</p>

<h3>Installing the dependencies</h3>

<p>Run the NPM install command to install all the dependencies needed to run the project.</p>

<pre>npm install</pre>

<h3>Building the client</h3>

<p>Run the NPM build command to build the client.</p>

<pre>npm build</pre>

<p>This command will:</p>

<li>Compile the protocol buffer's definitions for the RPC protocol of the Social Service, generating the corresponding TypeScript definitions.</li>

<li>Compile the TypeScript code of the client.</li>

<p>A distributable will be generated in the</p>

<code>dist</code>

<p>folder, containing all the client's code and types.</p>

<h2>Using the client</h2>

<h3>Basic setup and usage</h3>

<p>To use the client, install the package in your NPM project:</p>

<pre>npm install -S @dcl/social-rpc-client</pre>

<p>Import the client creator function from the installed package:</p>

<p>Create a new client instance by providing the client with:</p>

<li>A URL to the Social Service's REST API</li>

<li>A URL to the Social Service's Websocket endpoint</li>

<li>The user's address (the same as the one used to sign the identity)</li>

<li>An identity, signed with the user's wallet.</li>

<p>The</p>

<code>createSocialClient</code>

<p>will connect perform the required operations to connect to the Social Service and will return the connected client.</p>

<p>Use the client to interact with the Social Service:</p>

<p>The client exposes the methods available through the</p>

<p>and a disconnect method which disconnects the client from the Social Service.</p>

<h3>Generating an identity</h3>

<p>To authenticate users with the Social Service, you'll need to generate an identity for them. To do so, the</p>

<code>@dcl/crypto</code>

<p>library provides the</p>

<code>Authenticator.initializeAuthChain</code>

<p>method. Use it to generate an identity for your users:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-social-service-js-client

# Change to URL: https://github.com/decentraland/watermelon

# URL: https://github.com/decentraland/watermelon

<title>GitHub - decentraland/watermelon</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/watermelon</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>watermelon</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-return-license

# URL: https://github.com/decentraland/unity-return-license

<title>GitHub - decentraland/unity-return-license: Github Action to return a Unity pro license.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Github Action to return a Unity pro license.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-return-license</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Unity - Return license</h1>

<p>(Not affiliated with Unity Technologies)</p>

<p>GitHub Action to</p>

<p>.

Part of the</p>

<p>open source project.</p>

<h2>How to use</h2>

<p>Find the</p>

<p>on the GameCI</p>

<p>.</p>

<h2>Related actions</h2>

<p>Visit the

GameCI</p>

<p>status repository for related Actions.</p>

<h2>Community</h2>

<p>Feel free to join us on</p>

<p>and engage with the community.</p>

<h2>Contributing</h2>

<p>To help improve the documentation, please find the docs</p>

<p>.</p>

<p>To contribute to this project, kindly read the</p>

<p>.</p>

<h2>Licence</h2>

<h2>About</h2>

<p>Github Action to return a Unity pro license.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>11</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-decentraland-api

# URL: https://github.com/decentraland/tap-decentraland-api

<title>GitHub - decentraland/tap-decentraland-api</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-decentraland-api</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>27</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>135</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-decentraland-api</h1>

<code>tap-decentraland-api</code>

<p>is a Singer tap for the Decentraland API.</p>

<p>Build with the</p>

<p>.</p>

<h2>Installation</h2>

<pre>pipx install tap-decentraland-api</pre>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<p>You need to specify if you are trying to get test or production data by setting property</p>

<code>api_url</code>

<p>, configs are provided in the config folder.</p>

<h3>Executing the Tap Directly</h3>

<p>Use docker to debug this tap directly using target-jsonl like this:</p>

<pre>./docker-run.sh</pre>

<h2>Developer Resources</h2>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-decentraland-api

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-decentraland-api --version</pre>

<pre>meltano elt tap-decentraland-api target-jsonl</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/tap-decentraland-api

# Change to URL: https://github.com/decentraland/archipelago-prometheus-nats-exporter

# URL: https://github.com/decentraland/archipelago-prometheus-nats-exporter

<title>GitHub - decentraland/archipelago-prometheus-nats-exporter</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago-prometheus-nats-exporter</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-decentraland-thegraph

# URL: https://github.com/decentraland/tap-decentraland-thegraph

<title>GitHub - decentraland/tap-decentraland-thegraph: Exports data from Decentraland's subgraphs at https://thegraph.com/</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Exports data from Decentraland's subgraphs at</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-decentraland-thegraph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>28</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>123</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-decentraland-thegraph</h1>

<code>tap-decentraland-thegraph</code>

<p>is a Singer tap for DecentralandTheGraph.</p>

<p>Build with the</p>

<p>.</p>

<h2>Installation</h2>

<code>Developer TODO:</code>

<li>Update the below as needed to correctly describe the install procedure. For instance, if you do not have a PyPi repo, or if you want users to directly install from your git repo, you can modify this step as appropriate.</li>

<pre>pipx install tap-decentraland-thegraph</pre>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<code>Developer TODO:</code>

<li>Provide a list of config options accepted by the tap.</li>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-decentraland-thegraph --about</pre>

<h3>Source Authentication and Authorization</h3>

<code>Developer TODO:</code>

<li>If your tap requires special access on the source system, or any special authentication requirements, provide those here.</li>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-decentraland-thegraph</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-decentraland-thegraph --version

tap-decentraland-thegraph --help

tap-decentraland-thegraph --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<code>Developer TODO:</code>

<li>As a first step, scan the entire project for the text "</li>

<code>TODO:</code>

<li>" and complete any recommended steps, deleting the "TODO" references once completed.</li>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_decentraland_thegraph/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-decentraland-thegraph</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-decentraland-thegraph --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Your project comes with a custom</p>

<code>meltano.yml</code>

<p>project file already created. Open the</p>

<code>meltano.yml</code>

<p>and follow any</p>

<em>"TODO"</em>

<p>items listed in

the file.</p>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-decentraland-thegraph

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-decentraland-thegraph --version</pre>

<pre>meltano elt tap-decentraland-thegraph target-jsonl</pre>

<h3>Singer SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the Singer SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>Exports data from Decentraland's subgraphs at</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/tap-decentraland-thegraph

# Change to URL: https://github.com/decentraland/archipelago-nats

# URL: https://github.com/decentraland/archipelago-nats

<title>GitHub - decentraland/archipelago-nats</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago-nats</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rca

# URL: https://github.com/decentraland/rca

<title>GitHub - decentraland/rca: Shared knowledge base of incidents Root Cause Analysis</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Shared knowledge base of incidents Root Cause Analysis</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rca</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>95</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Root Cause Analysis</h1>

<p>When facing production incidents we usually need quick mitigation to put out the fire and there is no time to deeply look at the underlying causes, treating symptoms and not the problem.</p>

<p>The goal of an RCA process is to discover the real cause behind the incident to fully understand how to solve it, prevent it in the future and have a record of successful strategies in order to share knowledge and repeat things that worked.</p>

<em>Incidents could be defined as events that cause disruption to or a reduction in the quality of a production service or product feature which requires an emergency response.</em>

<p>In addition to discovering the root cause, we should strive to provide context and information that will result in an action or a decision: good analysis is actionable analysis.</p>

<p>The content on this repository should be shared once the incidents are mitigated or resolved so that potential vulnerabilities are not exposed.</p>

<p>In order to perform an Incident Analysis, you can choose the tool that better fits the situation, some common examples are:</p>

<p>,</p>

<p>(many potential causes, cause & effect) or</p>

<p>Incidents Severity is categorized on the following levels:</p>

<strong>SEV-1</strong>

<li>: Critical issues impacting more than 50% of our users (a.k.a âOh Fuck!â). The incident degrades the experience to a point in which the user decides to drop Decentraland Platform. Requires immediate resolution</li>

<strong>SEV-2</strong>

<li>: Critical system issue actively impacting a limited number of users. The users can still interact in Decentraland word but they get frustrated by the inability to live a full experience. Requires immediate resolution</li>

<strong>SEV-3</strong>

<li>: Stability or minor user impacting issue that requires immediate attention from the service owner, otherwise it might become a SEV-2 incident. Very restricted incident that is internally visible and should be mitigated as soon as possible; without extended user awareness and impacting non-critical flows</li>

<strong>SEV-4</strong>

<li>: Minor issue requiring action but not affecting the ability to use the platform</li>

<strong>SEV-5</strong>

<li>: Cosmetic issues or bugs not affecting the usersâ ability to use the platform, but it's relevant to give awareness to the other teams</li>

<p>To add new incidents use the date of the event as the Id with the following format</p>

<code>YYYY-MM-DD</code>

<p>. If there is more than one event on the same date you may need to use a suffix as part of the file name.</p>

<h2>Incidents Index</h2>

<li>Wearables not loading on some users backpack due to corrupted dropped wearable</li>

<li>CDN proxies stopped working affecting the ability to join Decentraland and some sites</li>

<li>Infura outage caused problem with different Services</li>

<li>Some issues were detected after the explorer release on</li>

<li>Social metrics tracking discrepancies</li>

<li>Catalyst node continuously rebooted after an update rollout</li>

<li>Cloudflare XSS protection prevented some users to deploy scenes or smart wearables</li>

<li>The Graph indexing delay prevented users from changing their wearables</li>

<li>Scenes not loading in Europe region</li>

<li>Users not able to save passport</li>

<li>Users not able to see or chat with each other</li>

<li>Some 3D models not rendering</li>

<li>Marketplace failed to display NFTs</li>

<li>3d models from other scenes appearing on other scense</li>

<li>Users joined to the #mvmf channel noticing huge lags</li>

<li>NFTs with animated gif thumbnails have stopped showing thumbnails</li>

<li>Changes in user profile not updating in peer perspective</li>

<li>Scenes MessageBus not working in production</li>

<li>Chat & Friends service unavailable</li>

<li>Some Realms show partial info of others</li>

<li>Higher than normal crashes on desktop platforms (windows)</li>

<li>Wrong online users metric on the status page</li>

<li>SDK Preview doesnât work</li>

<li>Desktop launcher doesn't launch correct version</li>

<li>Users unable to obtain their correct profiles</li>

<li>Users with many wearables are being shown an empty list</li>

<li>Some users are not able to list or make friend requests</li>

<li>Users unable to login to DG realm</li>

<li>Loading an avatar with Thunder Earrings is crashing the client</li>

<li>The teleport get freezed for all users using DEBUG_MODE</li>

<li>Transak widget not working</li>

<li>Social Service Migration</li>

<li>Reference client cannot be launched</li>

<li>Get Friends, Private Chat and Friends Requests not working</li>

<li>Ghost mode in builder</li>

<li>NFT names not displaying as alias</li>

<li>Chats showing out of order</li>

<li>User connections constantly reconnected to the same realm</li>

<li>Users are not visible in any realm other than Heimdallr</li>

<li>Some users are not loading</li>

<li>Cannot log in to Goerli network</li>

<li>Mic remains open when releasing the T key</li>

<li>Users are not able to join Decentraland</li>

<li>Marketplace search not working</li>

<h2>Vulnerabilities Index</h2>

<li>Potentially outdated prices provided by the implementation of ChainlinkOracle</li>

<li>Take over of broken or expired Links</li>

<li>Arbitrary Modification content stored on S3</li>

<li>Cloudflare bypass for Biz environment</li>

<li>Broken access control when deleting single items</li>

<li>Subdomain takeover of osquery.decentraland.org</li>

<li>Stored XSS - Execute Malicious Javascript on Victim's Browser</li>

<li>AWS Credentials leaked in Docker Image</li>

<li>SQL injection on governance API</li>

<li>Misconfigured SSO Function Allows Authenticated Access To Grafana</li>

<li>Dangling Call from wMana</li>

<h2>About</h2>

<p>Shared knowledge base of incidents Root Cause Analysis</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rpc-server-benchmarker

# URL: https://github.com/decentraland/rpc-server-benchmarker

<title>GitHub - decentraland/rpc-server-benchmarker: Tool for benchmarking RPC Servers of the Decentraland RPC implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Tool for benchmarking RPC Servers of the Decentraland RPC implementation</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rpc-server-benchmarker</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Benchmarking tool for RPC Servers</h1>

<p>Project structure:</p>

<li>benchmarker: RPC Client on Typescript. In charge of setting up multiple clients and making requests</li>

<li>rs-server: RPC Server on Rust. The rs-server will clone the rpc-rust repo because it's still not published as a package.</li>

<li>ts-server: RPC Server on Node.</li>

<code>tsc --init</code>

<li>project with minimum needed stuff.</li>

<li>api.proto: Where the protocol and service are defined, shared by the benchmarker, rs-server and ts-server.</li>

<li>book-large-content.txt: Large file that both servers use to store a book into an in-memory database which contains this large text in its</li>

<code>content</code>

<li>field.</li>

<h2>How to use it?</h2>

<p>Make sure you have</p>

<code>node</code>

<p>,</p>

<code>rust</code>

<p>and</p>

<code>cargo</code>

<p>installed.</p>

<h3>Prepare environment</h3>

<p>To have all ready to make benchmarks, you must run:</p>

<pre>make build-ts</pre>

<pre>make build-rs</pre>

<p>After both commands finished you are ready.</p>

<h3>Run the tool</h3>

<pre>make ab server={SERVER_TO_RUN} n={TOTAL_REQUEST_TO_DO} c={CONCURRENCY_LEVEL_FOR_REQUESTS}</pre>

<code>server</code>

<li>: Value could be</li>

<code>rs</code>

<li>for Rust and</li>

<code>ts</code>

<li>for Typescript (node).</li>

<code>n</code>

<li>: Refers to total requests to be done by the</li>

<code>benchmarker</code>

<li>. eg: 10000 (used for the presentation benchmarking)</li>

<code>c</code>

<li>: Refers to the concurrency level of the tool. eg: 100 (used for the presentation benchmarking)</li>

<p>After running the tool, a</p>

<code>.csv</code>

<p>file will be created with a the type of the metric measure and the elapsed time.</p>

<code>${type},${elapsed_time}</code>

<p>, there are two different types, one</p>

<code>WHOLECONNECTION</code>

<p>refers to the entire client connection and other one</p>

<code>GETLARGEBOOKREQUEST</code>

<p>that refers to just the request that fetches the book with a</p>

<code>content</code>

<p>field with 1MB.</p>

<p>The tool also throws an output with some stats similar to</p>

<code>Apache Benchmarking</code>

<p>-> mean, min, max, and percentiles (percentiles are just for the GetBook request). This output shows:</p>

<code>Handle Client time</code>

<li>metric: refers to the elapsed time for the entire client connection</li>

<code>Rpc Client</code>

<li>metric: refers to the elapsed time for the client creation and the connection is established with server.</li>

<code>Rpc Port</code>

<li>metric: refers to the elapsed time for the port creation, that it's also a request.</li>

<code>Request time</code>

<li>metric: refers to the elapsed time for the</li>

<code>GetBook</code>

<li>request (the same as</li>

<code>GETLARGEBOOKREQUEST</code>

<li>)</li>

<code>percentiles</code>

<li>metric: refers to the elapsed time percentiles for the</li>

<code>GetBook</code>

<li>request</li>

<p>Output example</p>

<pre>Total</pre>

<pre>duration: {NUMBER}

Request / Second: {NUMBER}

Handle Client</pre>

<pre>(mean): {NUMBER}

Rpc Client (mean):  {NUMBER}

Rpc Port (mean):  {NUMBER}

Request</pre>

<pre>(mean):  {NUMBER}

Handle Client</pre>

<pre>(min):  {NUMBER}

Rpc Client (min):  {NUMBER}

Rpc Port (min):  {NUMBER}

Request</pre>

<pre>(min):  {NUMBER}

Handle Client</pre>

<pre>(max):  {NUMBER}

Rpc Client (max):  {NUMBER}

Rpc Port (max):  {NUMBER}

Request</pre>

<pre>(max):  {NUMBER}

Percentiles:  {</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER} }</pre>

<h2>TODO:</h2>

<li>Adds a benchmarker-rs with the</li>

<code>RpcClient</code>

<li>written in Rust</li>

<li>Adds C# implementation for benchmarking</li>

<h2>About</h2>

<p>Tool for benchmarking RPC Servers of the Decentraland RPC implementation</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-gltf

# URL: https://github.com/decentraland/unity-gltf

<title>GitHub - decentraland/unity-gltf: This is a copy of https://github.com/atteneder/glTFast to avoid LTS fork quota</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<h3>License</h3>

<summary>Apache-2.0, Apache-2.0 licenses found</summary>

<h3>Licenses found</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-gltf</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>unity-gltf</h1>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<h2>About</h2>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<h3>Resources</h3>

<h3>License</h3>

<summary>Apache-2.0, Apache-2.0 licenses found</summary>

<h3>Licenses found</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Sponsor this project</h2>

<strong>tteneder</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/marketplace-favorites-server

# URL: https://github.com/decentraland/marketplace-favorites-server

<title>GitHub - decentraland/marketplace-favorites-server: Favorites server implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Favorites server implementation</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/marketplace-favorites-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>8</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>98</strong>

<h2>Files</h2>

<button>View code</button>

<h1>marketplace-favorites-server</h1>

<h2>About</h2>

<p>Favorites server implementation</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/builder-client

# Change to URL: https://github.com/decentraland/collections-graph

# URL: https://github.com/decentraland/collections-graph

<title>GitHub - decentraland/collections-graph: ð½ Decentraland Collections Graph</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð½ Decentraland Collections Graph</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/collections-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>274</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland collections graph</h1>

<th>Network</th>

<th>Provider</th>

<th>URL</th>

<th>Current</th>

<th>Previous</th>

<td>Mainnet</td>

<td>Satsuma</td>

<td>Qmf4SMTepdDoFh1ozcaAUMieGF83tnNa2G2Jr4KkH5jPRA</td>

<td>QmcyYqqmE3egvtZReHk1aVxmZawxRSECuj1PcZLgMVzHSp</td>

<td>Mainnet</td>

<td>Hosted Services</td>

<td>Qmf4SMTepdDoFh1ozcaAUMieGF83tnNa2G2Jr4KkH5jPRA</td>

<td>QmP2EQebbD9W8AaphRTzNUL7NLdMH8FdqNNWtqUiNg2VkB</td>

<td>Sepolia</td>

<td>Satsuma</td>

<td>QmSYyRTthY69mSHxkAY6ym3beCWQr97NwecWdpxjiHypKh</td>

<td>QmWQZiMSV5AnUPN34NFmAYtxGntxewMUUwuS9r5vBpc5Ys</td>

<td>Sepolia</td>

<td>Graph Studio</td>

<td>QmSYyRTthY69mSHxkAY6ym3beCWQr97NwecWdpxjiHypKh</td>

<td>QmWQZiMSV5AnUPN34NFmAYtxGntxewMUUwuS9r5vBpc5Ys</td>

<td>Goerli</td>

<td>Satsuma</td>

<td>QmZXxk89ZunJvXNsckSioadZNQW7VBydrGfXTqS2ivzHqU</td>

<td>QmUvtxgRKdFf1zcZZLrJ5nZ6HyoUYKPtByGQigP4rHxwSj</td>

<td>Goerli</td>

<td>Hosted Services</td>

<td>QmZXxk89ZunJvXNsckSioadZNQW7VBydrGfXTqS2ivzHqU</td>

<td>QmUvtxgRKdFf1zcZZLrJ5nZ6HyoUYKPtByGQigP4rHxwSj</td>

<td>Matic</td>

<td>Satsuma</td>

<td>QmPAV5PzFgu7iaiSYYmRTPGFR4ADGfeKSTPqTPt5eKVAVv</td>

<td>QmdavX3eGWLYCjjzYAZv924hyoLv8f9Rg6FxHD7kAJ4fXn</td>

<td>Matic</td>

<td>Hosted Services</td>

<td>QmPAV5PzFgu7iaiSYYmRTPGFR4ADGfeKSTPqTPt5eKVAVv</td>

<td>QmXEwSeNTT5xHRQPcTUDQJayjjfhcbaxYf2o7ycuYf8YF7</td>

<td>Matic Temp</td>

<td>Hosted Services</td>

<td>QmTKztw187jUHZ33S2pndtyo68K462XwewcvMVAVH7mwZR</td>

<td>Qmf3igvJs24gozdwCwnDyPNz9DEBQMPQRFmEhUzEvgxZSq</td>

<td>Mumbai</td>

<td>Satsuma</td>

<td>QmYVGaMGvqkcBMrJ4F5XrkzwCzhB3FfJvHRBERbtgovCai</td>

<td>QmRpCReFLwhB4tATJhur1MEjsPY1Rgo2yVrd5oinnjCrAy</td>

<td>Mumbai</td>

<td>Hosted Service</td>

<td>QmYVGaMGvqkcBMrJ4F5XrkzwCzhB3FfJvHRBERbtgovCai</td>

<td>QmegTREYw1Li3DYMAcCVJDcoBuquoCFKDUCzxrxyGhWwUW</td>

<p>Using</p>

<p>and</p>

<h3>Install</h3>

<pre>npm ci</pre>

<h3>Test</h3>

<p>Tests are defined inside the</p>

<code>./tests</code>

<p>directory and executed using:</p>

<pre>npm</pre>

<strong>Take into consideration:</strong>

<code>Postgres 14</code>

<p>is required to run tests locally because</p>

<code>graph-node</code>

<p>, the underlying engine to index the subgraph, needs it.</p>

<p>An alternative to run tests locally without installing Postgres is through `Docker. To run them, use the following command:</p>

<code>npm run test:docker</code>

<strong>CI Notice:</strong>

<p>Tests are run on the CI using</p>

<code>npm test</code>

<p>because the</p>

<code>ubuntu-latest</code>

<p>image used in the CI contains Postgres 14.</p>

<p>More about how to write subgraph tests can be found on the</p>

<p>.</p>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<p>The collection's</p>

<code>id</code>

<p>is the smart contract address of the collection.

The item's</p>

<code>id</code>

<p>is</p>

<code>{collection_contract_address}-{item_blochain_id}</code>

<p>. The</p>

<code>item_blockchain_id</code>

<p>is the index of the item in the collection. E.g: if you have a collection with 2 items, the first is</p>

<code>0</code>

<p>and the second one is</p>

<code>1</code>

<p>. Therefore, the id of the first item will be:</p>

<code>{contract_address}-0</code>

<p>Ethereum addresses should be passed lowercased:</p>

<code>0xB549B2442b2BD0a53795BC5cDcBFE0cAF7ACA9f8</code>

<li>â</li>

<code>0xb549b2442b2bd0a53795bc5cdcbfe0caf7aca9f8</code>

<li>â</li>

<h4>Get first 5 collections and items balances</h4>

<pre>:</pre>

<pre>:</pre>

<h3>Get Item Metadata</h3>

<pre>:</pre>

<h4>Get first 5 Collection NFTs</h4>

<p>Owner's</p>

<code>id</code>

<p>is the owner's Ethereum address</p>

<pre>:</pre>

<h4>Get first 5 Collection NFTs Orders</h4>

<pre>:</pre>

<h4>Get totals</h4>

<h2>About</h2>

<p>ð½ Decentraland Collections Graph</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>14</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-collections-graph

# Change to URL: https://github.com/decentraland/deployments-sse

# URL: https://github.com/decentraland/deployments-sse

<title>GitHub - decentraland/deployments-sse: Sends pointer deploymens via Server Sent Events</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Sends pointer deploymens via Server Sent Events</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/deployments-sse</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and components (ports).</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic and adapters.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our adapters (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<p>Sends pointer deploymens via Server Sent Events</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ownership-server

# URL: https://github.com/decentraland/ownership-server

<title>GitHub - decentraland/ownership-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ownership-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>22</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Ownership Server</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-run

# URL: https://github.com/decentraland/catalyst-run

<title>GitHub - decentraland/catalyst-run</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-run</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Example</h1>

<code>docker pull quay.io/decentraland/catalyst-run:next

docker run --env-file .env --env-file .env-database-content -e TARGET_CATALYST_URL=https://peer-ue-2.decentraland.zone --rm -it --network="catalyst-owner_default" --mount type=bind,src=/opt/ebs/contents,dst=/app/contents quay.io/decentraland/catalyst-run:next dist/sepolia-migration.js

docker run --env-file .env --env-file .env-database-content -e TARGET_CATALYST_URL=https://peer-ue-2.decentraland.zone -e MIGRATION_PRIVATE_KEY=xx --rm -it --network="catalyst-owner_default" --mount type=bind,src=/opt/ebs/contents,dst=/app/contents quay.io/decentraland/catalyst-run:next dist/sepolia-migration.js</code>

<p>Or just run a node cli:</p>

<code>docker run --env-file .env --env-file .env-database-content  --rm -it --network="catalyst-owner_default" quay.io/decentraland/catalyst-run:next</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/linker-dapp

# URL: https://github.com/decentraland/linker-dapp

<title>GitHub - decentraland/linker-dapp</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/linker-dapp</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>19</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>31</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Linker App.</h1>

<h3>Development</h3>

<p>For local development start the linker dApp using the CLI (ie.</p>

<code>dcl deploy</code>

<p>or</p>

<code>dcl world-acl</code>

<p>) and then point the</p>

<code>/api</code>

<p>calls to the local port where the CLI is serving the linker dApp (ie.</p>

<code>http://localhost:8000/api</code>

<p>instead of</p>

<code>/api</code>

<p>).</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>7</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rpc-rust

# URL: https://github.com/decentraland/rpc-rust

<title>GitHub - decentraland/rpc-rust: Decentraland RPC - Rust implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland RPC - Rust implementation</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rpc-rust</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>14</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>108</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dcl-rpc</h1>

<p>The Rust implementation of Decentraland RPC. At Decentraland, we have our own implementation of RPC for communications between the different services.</p>

<p>Currently, there are other implementations:</p>

<h2>Requirements</h2>

<li>Install Just</li>

<h3>Install Just for commands</h3>

<pre>cargo install just</pre>

<h2>Examples</h2>

<h3>Run the integration example</h3>

<p>RPC Client in Rust and RPC Server in Rust running Websocket transport example, Memory Transport example and example using different types of transports</p>

<code>just run-integration</code>

<h3>Run the integration example with an specific transport</h3>

<p>RPC Client in Rust and RPC Server in Rust running the example passed to the command</p>

<code>just run-integration {ws|memory|dyn}</code>

<h3>Run the multi language integration example</h3>

<p>RPC Client in Typescript and RPC Server in Rust using WebSockets</p>

<code>just run-multilang</code>

<p>You can find the code for these examples in the</p>

<code>examples/</code>

<p>directory.</p>

<h2>Usage</h2>

<h3>Import</h3>

<pre>[</pre>

<pre>]</pre>

<pre>=</pre>

<pre>[</pre>

<pre>]</pre>

<pre>=</pre>

<pre>=</pre>

<h3>Protobuf</h3>

<p>Create a file</p>

<code>app.proto</code>

<p>to define the messages that will be used, for example:</p>

<pre>;</pre>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>{</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>) {}

}</pre>

<p>Then, define a</p>

<code>build.rs</code>

<p>file to build the types of the message:</p>

<pre>std</pre>

<pre>io</pre>

<pre>-></pre>

<pre>conf = prost_build</pre>

<pre>conf</pre>

<pre>dcl_rpc</pre>

<pre>codegen</pre>

<pre>conf</pre>

<pre>?</pre>

<p>The</p>

<code>build.rs</code>

<p>script runs every time that your</p>

<code>.proto</code>

<p>changes. The script will generate a file in the</p>

<code>OUT_DIR</code>

<p>, named as the</p>

<code>package</code>

<p>field in the</p>

<code>.proto</code>

<p>file (if it's not declared, the name will be '_.rs'). This file will include:</p>

<li>All your declared messages in the</li>

<code>.proto</code>

<li>as Rust structs. *1</li>

<li>(</li>

<code>#[cfg(feature = "server")]</code>

<li>) A trait, named</li>

<code>{YOUR_RPC_SERVICE_NAME}Server: Send + Sync + 'static</code>

<li>, with the methods defined in your service for the server side. So you should use this trait to build an implementation with the business logic. *2</li>

<li>(</li>

<code>#[cfg(feature = "client")]</code>

<li>) A trait, named</li>

<code>{YOUR_RPC_SERVICE_NAME}ClientDefinition<T: Transport + 'static>: ServiceClient<T> + Send + Sync + 'static</code>

<li>, and an implementation of it for the client side, named</li>

<code>{YOUR_RPC_SERVICE_NAME}Client</code>

<li>. You could use this auto-generated implementation when using the</li>

<code>RpcClient</code>

<li>passing the implementation (struct with the trait implemented) as a generic in the</li>

<code>load_module</code>

<li>function, which it'll be in charge of requesting the procedures of your service. But you could also have your own implementation of the</li>

<code>{YOUR_RPC_SERVICE_NAME}ClientDefinition</code>

<li>trait, as long as the implementations meets with trait's and</li>

<code>RpcClient</code>

<li>requirements .  *3</li>

<li>(</li>

<code>#[cfg(feature = "server")]</code>

<li>)  A struct in charge of registering your declared service when a</li>

<code>RpcServerPort</code>

<li>is created. You should use this struct and its registering function inside the</li>

<code>RpcServer</code>

<li>port creation handler. *4</li>

<p>To import them you must add:</p>

<pre>concat!</pre>

<pre>env!</pre>

<pre>,</pre>

<p>This statement should be added to the</p>

<code>src/lib.rs</code>

<p>in order to make the auto-generated code part of your crate, otherwise it will treat every include as different types.</p>

<h3>Server Side</h3>

<pre>dcl_rpc</pre>

<pre>transports</pre>

<pre>web_socket</pre>

<pre>server</pre>

<pre>service_module_definition</pre>

<pre>ws_server =</pre>

<pre>connection_listener = ws_server</pre>

<pre>ctx =</pre>

<pre>server =</pre>

<pre>ctx</pre>

<pre>server</pre>

<pre>|</pre>

<pre>|</pre>

<pre>port</pre>

<pre>echo_service</pre>

<pre>server_events_sender = server</pre>

<pre>tokio</pre>

<pre>connection</pre>

<pre>= connection_listener</pre>

<pre>transport =</pre>

<pre>connection</pre>

<pre>server_events_sender</pre>

<pre>transport</pre>

<pre>_</pre>

<pre>=></pre>

<pre>_</pre>

<pre>=></pre>

<pre>server</pre>

<p>Implement the trait for your service</p>

<pre>-></pre>

<pre>request</pre>

<h3>Client Side</h3>

<p>Initiate a WebSocket Client Connection and send a Hello World message to the echo server.</p>

<pre>dcl_rpc</pre>

<pre>transports</pre>

<pre>web_socket</pre>

<pre>client</pre>

<pre>ws_rust</pre>

<pre>client_connection =</pre>

<pre>client_transport =</pre>

<pre>client_connection</pre>

<pre>client =</pre>

<pre>client_transport</pre>

<pre>port = client</pre>

<pre>module = port</pre>

<pre>response = module</pre>

<h2>About</h2>

<p>Decentraland RPC - Rust implementation</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rpc-csharp

# URL: https://github.com/decentraland/rpc-csharp

<title>GitHub - decentraland/rpc-csharp</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rpc-csharp</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>31</strong>

<h2>Files</h2>

<button>View code</button>

<h1>rpc-csharp</h1>

<p>rpc-csharp is a implementation of</p>

<p>in C#</p>

<p>Progress tracking in</p>

<p>The RPC Client is not implemented because it was not needed.</p>

<h1>Dependencies</h1>

<li>protoc (3.12 or later)</li>

<li>UniTask (2.25 or later)</li>

<h1>UPM Package</h1>

<p>Go to the Package Manager in Unity and add the following link:</p>

<code>https://github.com/decentraland/rpc-csharp.git?path=rpc-csharp/src</code>

<p>or add</p>

<code>"com": "https://github.com/Cysharp/UniTask.git?path=src/UniTask/Assets/Plugins/UniTask"</code>

<p>to Packages/manifest.json.</p>

<h1>Code generation</h1>

<p>To generate the code, you need to use the following plugin:</p>

<p>The built code is in this repo in the</p>

<code>dcl-protoc-csharp-plugin</code>

<p>folder.</p>

<h2>Usage</h2>

<code>protoc \

-I="$(pwd)" \

--plugin=protoc-gen-dclunity=../../dcl-protoc-csharp-plugin/index.js \

--dclunity_out="$(pwd)" \

"$(pwd)/api.proto"</code>

<h2>RPC Test project</h2>

<p>You can use the following project to test the RPC</p>

<p>This can connect the RPC Client with the RPC Server in the</p>

<code>rpc-csharp-demo</code>

<p>project</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/protoc-gen-csharp

# URL: https://github.com/decentraland/protoc-gen-csharp

<title>GitHub - decentraland/protoc-gen-csharp</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/protoc-gen-csharp</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>34</strong>

<h2>Files</h2>

<button>View code</button>

<h1>protoc-gen-dclunity</h1>

<pre>protoc \

-I=</pre>

<pre>/protos \

--dclunity_out=</pre>

<pre>/protos \</pre>

<pre>/protos/index.proto</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/substreams-sink-postgres-fork

# URL: https://github.com/decentraland/substreams-sink-postgres-fork

<title>GitHub - decentraland/substreams-sink-postgres-fork</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-sink-postgres-fork</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>166</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Substreams Sink PostgreSQL</h1>

<p>This is a command line tool to quickly sync a Substreams with a PostgreSQL database.</p>

<h3>Quickstart</h3>

<p>Install</p>

<code>substreams-sink-postgres</code>

<p>by using the pre-built binary release</p>

<p>. Extract</p>

<code>substreams-sink-postgres</code>

<p>binary into a folder and ensure this folder is referenced globally via your</p>

<code>PATH</code>

<p>environment variable.</p>

<strong>Note</strong>

<p>Or install from source directly</p>

<code>go install github.com/streamingfast/substreams-sink-postgres/cmd/substreams-sink-postgres@latest</code>

<p>.</p>

<p>Start Docker Compose:</p>

<pre>docker compose up</pre>

<strong>Note</strong>

<p>Feel free to skip this step if you already have a running Postgres instance accessible, don't forget to update the connection string in the command below.</p>

<p>Run the setup command:</p>

<pre>substreams-sink-postgres setup</pre>

<pre>docs/tutorial/schema.sql</pre>

<p>This will connect to the given database pointed by</p>

<code>psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable</code>

<p>, create the tables and indexes specified in the given</p>

<code><schema_file></code>

<p>, and will create the required tables to run the sink (e.g. the</p>

<code>cursors</code>

<p>table).</p>

<strong>Note</strong>

<p>For the sake of idempotency, we recommend that the schema file only contain</p>

<code>create table if not exists</code>

<p>statements.</p>

<p>Run the sink</p>

<p>Compile the</p>

<p>tutorial project first:</p>

<pre>docs/tutorial

cargo build --target wasm32-unknown-unknown --release</pre>

<pre>../..</pre>

<p>Once the compilation has completed, let launch the</p>

<code>sink</code>

<p>process.</p>

<strong>Note</strong>

<p>To connect to Substreams you will need an authentication token, follow this</p>

<p>to obtain one.</p>

<pre>substreams-sink-postgres run \</pre>

<pre>\</pre>

<pre>\</pre>

<pre>\

db_out</pre>

<h3>Output Module</h3>

<p>To be accepted by</p>

<code>substreams-sink-postgres</code>

<p>, your module output's type must be a</p>

<p>message. The Rust crate</p>

<p>contains bindings and helpers to implement it easily. Some project implementing</p>

<code>db_out</code>

<p>module for reference:</p>

<li>(some helpers found in</li>

<li>)</li>

<p>By convention, we name the</p>

<code>map</code>

<p>module that emits</p>

<p>output</p>

<code>db_out</code>

<p>.</p>

<p>Note that using prior versions (0.2.0, 0.1.*) of</p>

<code>substreams-database-change</code>

<p>, you have to use</p>

<code>substreams.database.v1.DatabaseChanges</code>

<p>in your</p>

<code>substreams.yaml</code>

<p>and put the respected version of the</p>

<code>spkg</code>

<p>in your</p>

<code>substreams.yaml</code>

<h3>PostgreSQL DSN</h3>

<p>The connection string is provided using a simple string format respecting the URL specification. The DSN format is:</p>

<code>psql://<user>:<password>@<host>/<dbname>[?<options>]</code>

<p>Where</p>

<code><options></code>

<p>is URL query parameters in</p>

<code><key>=<value></code>

<p>format, multiple options are separated by</p>

<code>&</code>

<p>signs. Supported options can be seen</p>

<p>. The options</p>

<code><user></code>

<p>,</p>

<code><password></code>

<p>,</p>

<code><host></code>

<p>and</p>

<code><dbname></code>

<p>should</p>

<strong>not</strong>

<p>be passed in</p>

<code><options></code>

<p>as they are automatically extracted from the DSN URL.</p>

<p>Moreover, the</p>

<code>schema</code>

<p>option key can be used to select a particular schema within the</p>

<code><dbname></code>

<p>database.</p>

<h3>Advanced Topics</h3>

<h4>High Throughput Injection</h4>

<p>Important</p>

<p>This method will be useful if you insert a lot of data into the database. If the standard ingestion speed satisfy your needs, continue to use it, the steps below are an advanced use case.</p>

<p>The</p>

<code>substreams-sink-postgres</code>

<p>contains a fast injection mechanism for cases where big data needs to be dump into the database. In those cases, it may be preferable to dump every files to CSV and then use</p>

<code>COPYFROM</code>

<p>to transfer data super quick to Postgres.</p>

<p>The idea is to first dump the Substreams data to</p>

<code>CSV</code>

<p>files using</p>

<code>substreams-sink-postgres generate-csv</code>

<p>command:</p>

<pre>substreams-sink-postgres generate-csv</pre>

<pre>mainnet.eth.streamingfast.io:443</pre>

<pre>spkg</pre>

<pre>db_out ./data/tables :14490000</pre>

<p>Note</p>

<p>We are using 14490000 as our stop block, pick you stop block close to chain's HEAD or smaller like us to perform an experiment, adjust to your needs.</p>

<p>This will generate block segmented CSV files for each table in your schema inside the folder</p>

<code>./data/tables</code>

<p>. Next step is to actually inject those CSV files into your database. You can use</p>

<code>psql</code>

<p>and inject directly with it.</p>

<p>We offer</p>

<code>substreams-sink-postgres inject-csv</code>

<p>command as a convenience. It's a per table invocation but feel free to run each table concurrently, your are bound by your database as this point, so it's up to you to decide you much concurrency you want to use. Here a small</p>

<code>Bash</code>

<p>command to loop through all tables and inject them all</p>

<pre>\

substreams-sink-postgres inject-csv</pre>

<pre>./data/tables</pre>

<pre>:14490000</pre>

<pre>\</pre>

<pre>[[</pre>

<pre>0 ]]</pre>

<pre>\</pre>

<p>Those files are then inserted in the database efficiently by doing a</p>

<code>COPY FROM</code>

<p>and reading the data from a network pipe directly.</p>

<p>The command above will also pick up the</p>

<code>cursors</code>

<p>table injection as it's a standard table to write. The table is a bit special as it contains a single file which is contains the</p>

<code>cursor</code>

<p>that will handoff between CSV injection and going back to "live" blocks. It's extremely important that you validate that this table has been properly populated. You can do this simply by doing:</p>

<pre>substreams-sink-postgres tools --dsn=</pre>

<pre>cursor</pre>

<pre>Module eaf2fc2ea827d6aca3d5fee4ec9af202f3d1b725: Block</pre>

<p>This should emit a single line, the</p>

<code>Module <hash></code>

<p>should fit the for</p>

<code>db_out</code>

<p>(check</p>

<code>substreams info <spkg></code>

<p>to see your module's hashes) and the block number should fit your last block you written.</p>

<p>Warning</p>

<p>Failure to properly populate will 'cursors' table will make the injection starts from scratch when you will do</p>

<code>substreams-sink-postgres run</code>

<p>to bridge with "live" blocks as no cursor will exist so we will start from scratch.</p>

<p>Once data has been injected and you validated the</p>

<code>cursors</code>

<p>table, you can then simply start streaming normally using:</p>

<pre>substreams-sink-postgres run</pre>

<pre>mainnet.eth.streamingfast.io:443</pre>

<pre>spkg</pre>

<pre>db_out</pre>

<p>This will start back at the latest block written and will start to handoff streaming to a "live" blocks.</p>

<h5>Performance Knobs</h5>

<p>When generating the CSV files, optimally choosing the</p>

<code>--buffer-max-size</code>

<p>configuration value can drastically increase your write throughput locally but even more if your target store is an Amazon S3, Google Cloud Storage or Azure bucket. The flag controls how many bytes of the files is to be held in memory. By having bigger amount of buffered bytes, data is transferred in big chunk to the storage layer leading to improve performance. In lots of cases, the full file can be held in memory leading to a single "upload" call being performed having even better performance.</p>

<p>When choosing this value you should consider 2 things:</p>

<li>One buffer exist by table in your schema, so if there is 12 tables and you have a 128 MiB buffer, you could have up to 1.536 GiB (</li>

<code>128 MiB * 12</code>

<li>) of RAM allocated to those buffers.</li>

<li>Amount of RAM you want to allocate.</li>

<p>Let's take a container that is going to have 8 GiB of RAM. We suggest leaving 512 MiB for other part of the</p>

<code>generate-csv</code>

<p>tasks, which mean we could dedicated 7.488 GiB to buffering. If your schema has 10 tables, you should use</p>

<code>--buffer-max-size=785173709</code>

<p>(</p>

<code>7.488 GiB / 10 = 748.8 MiB = 785173709</code>

<p>).</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/substreams-server

# URL: https://github.com/decentraland/substreams-server

<title>GitHub - decentraland/substreams-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>36</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and components (ports).</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic and adapters.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our adapters (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/renderer-bff

# URL: https://github.com/decentraland/renderer-bff

<title>GitHub - decentraland/renderer-bff</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/renderer-bff</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Renderer BFF</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-exercise-battle

# URL: https://github.com/decentraland/unity-exercise-battle

<title>GitHub - decentraland/unity-exercise-battle</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-exercise-battle</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Battle Simulator</h1>

<p>In this simulator, armies of varying units and sizes will battle using a set of very simple AI strategies.</p>

<h2>Launch Menu</h2>

<p>This is the simulator entry point, in which the following options can be set per army:</p>

<li>Warriors amount</li>

<li>Archers amount</li>

<li>Strategy type</li>

<p>Then, there's the "launch" button that will put the user on the battle phase.</p>

<h2>Battle</h2>

<p>In this phase, the two armies will fight for victory. The battle will start according to the options selected at the

launch menu.</p>

<h3>Basic Rules</h3>

<li>Units can't overlap other units</li>

<li>To avoid too much dispersion, units must be at least 80 meters close to the center point of all units</li>

<li>All units have attack, speed, and defense values. When any unit attacks, the hit formula

is</li>

<code>defender.health -= attacker.attack - defender.defense</code>

<li>.</li>

<li>Any unit must not move distances that surpass its own speed on a single frame.</li>

<li>All units have attack cooldown values. Any unit can't attack if the cooldown value is above zero.</li>

<li>If health falls under zero, a given unit dies.</li>

<li>When all the units for a given army dies, a ending menu is instantiated. This menu will have a button that can get the

user to the launch menu to start a new simulation.</li>

<p>Armies are composed by the following unit types:</p>

<h3>Warrior</h3>

<th>Attribute</th>

<th>Value</th>

<td>Attack range</td>

<td>2.5 meters</td>

<td>Attack cooldown</td>

<td>1 second</td>

<td>Attack amount</td>

<td>20 pts</td>

<td>Health</td>

<td>50 pts</td>

<td>Defense</td>

<td>5 pts</td>

<h3>Archer</h3>

<th>Attribute</th>

<th>Value</th>

<td>Attack range</td>

<td>20 meters</td>

<td>Attack cooldown</td>

<td>5 seconds</td>

<td>Post-attack delay</td>

<td>1 second</td>

<td>Attack amount</td>

<td>10 pts</td>

<td>Health</td>

<td>5 pts</td>

<td>Defense</td>

<td>0 pts</td>

<strong>Special rules:</strong>

<p>When the archer attacks, it spawns an arrow that flies in a straight direction and impacts the target

from a distance. After the archer attacks, it has a</p>

<code>postAttackDelay</code>

<p>attribute that prevents further movement for its

given time.</p>

<h3>Strategies</h3>

<p>There are only two strategies that are outlined below</p>

<strong>Basic</strong>

<p>Any Unit will just pick the nearest enemy, and advance to it. It will attack as soon the enemy falls within

its</p>

<code>attackRange</code>

<p>attribute.</p>

<strong>Defensive</strong>

<p>Any Unit will just pick the nearest enemy, and advance to it. Warriors will back off when their</p>

<code>attackCooldown > 0</code>

<p>.

Archers will try to get as far as possible but within their</p>

<code>attackRange</code>

<p>. If any enemy unit gets too near the Archer,

the Archer will try to move away but at the same time circle its foe.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>8</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/matrix-client

# URL: https://github.com/decentraland/matrix-client

<title>GitHub - decentraland/matrix-client: ð¡  Interact with Decentraland's users, send private messages and add friends.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¡ Interact with Decentraland's users, send private messages and add friends.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/matrix-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>