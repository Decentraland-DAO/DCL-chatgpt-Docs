

# Start of the information extracted from the URL: https://decentraland.org/

<title>Welcome to Decentraland</title>

<h1>Decentraland</h1>

<h1>SDK 7</h1>

<h1>Smart Wearables</h1>

<h3>In Decentraland</h3>

<h2>What's new?</h2>

<p>Decentraland is a world built by YOU where the only limit is your imagination. Create and sell Wearables & Emotes, construct captivating scenes and interactive experiences, or set up a personal space in your own World.</p>

<p>The dynamic, virtual social world of Decentraland is home to a vibrant community hosting diverse daily events, ranging from parties, art exhibitions, fashion shows, music festivals, and more to interactive experiences from renown brands like Netflix, Doritos, and Samsung. Make friends, play games, explore, and discover all Decentraland has to offer!</p>

<p>As a fully decentralized metaverse, Decentraland is owned and governed by its users. Join the Decentraland DAO to submit and vote on proposals that affect how the world operates or secure funding for your ideas by applying for grants.</p>

<h2>Trending Items</h2>

<h2>Browse LAND Available for Rent & Sale</h2>

<h2>Make your ideas a reality in the metaverse. Find a team to build with.</h2>

<h2>Worlds</h2>

<h3>Your Personal Space in the Metaverse</h3>

<p>With just a Decentraland NAME you can claim your own corner of the metaverse, separate from the open world of Decentraland, where you can build, experiment, host events—whatever you want, it’s your World!</p>

<h3>Learn more about Decentraland</h3>

<h2>Frequently Asked

Questions</h2>

<h4>What is Decentraland?</h4>

<h4>How do I enter Decentraland?</h4>

<h4>Do I need cryptocurrency or a crypto wallet to use Decentraland?</h4>

<h4>How do I become a Decentraland Creator?</h4>

<h4>What is a NAME?</h4>

<h4>What is the difference between LANDs and Worlds?</h4>

<h4>How can I get help and contact the Support Team?</h4>

<h3>Stay updated with Decentraland</h3>

<h2>RESOURCES</h2>

<h2>CONNECT</h2>

# End of the information extracted from the URL: https://decentraland.org/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/

<title>Let’s build the metaverse together | Decentraland Documentation</title>

<strong>Let’s build the metaverse together</strong>

<h1>Let’s build the metaverse together</h1>

<p>3D content in Decentraland is made up of scenes, each scene occupies a finite amount of space and is displayed one next to the other for players to freely walk through them.</p>

<p>The Decentraland SDK is a collection of tools to allow you to create scenes. The following are good places to start:</p>

<li>: follow this mini tutorial for a quick crash course.</li>

<li>: read this to understand the full process of creating a scene from start to end, incluing publishing and promoting it.</li>

<li>: dive right into working example scenes.</li>

<h3>The Decentraland Editor</h3>

<p>The Editor is an all-in-one content creation tool. It’s intended for users of any knowledge level, combining a graphical interface with code editing capabilities. Both technical and non-technical creators will benefit from using it.</p>

<p>.</p>

<h3>Other scene creation tools</h3>

<p>There are a number of tools that can help with arranging 3d models into position in a Decentraland scene. You still need to resort to the SDK to add interactivity to these items, but setting positions visually is a big help.</p>

<strong>DCL Edit</strong>

<p>: A community-built tool that allows you to drag and drop 3d models into your scene. You can then work on adding interactivity to the resulting scene using the SDK.</p>

<p>Read the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: If a scene is created by or modified by the SDK, you can’t import it into the Builder. You can only go from the Builder to the SDK, not in the other direction.</blockquote>

<h3>3D Modeling</h3>

<p>You can use any 3rd party modeling tool to create 3D models that can be used in Decentraland scenes. It’s easy to</p>

<p>.</p>

<p>See</p>

<p>for tips and tricks, and information about supported features and formats for 3D models.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/

# Start of the information extracted from the URL: https://decentraland.org

<title>Welcome to Decentraland</title>

<h1>Decentraland</h1>

<h1>SDK 7</h1>

<h1>Smart Wearables</h1>

<h3>In Decentraland</h3>

<h2>What's new?</h2>

<p>Decentraland is a world built by YOU where the only limit is your imagination. Create and sell Wearables & Emotes, construct captivating scenes and interactive experiences, or set up a personal space in your own World.</p>

<p>The dynamic, virtual social world of Decentraland is home to a vibrant community hosting diverse daily events, ranging from parties, art exhibitions, fashion shows, music festivals, and more to interactive experiences from renown brands like Netflix, Doritos, and Samsung. Make friends, play games, explore, and discover all Decentraland has to offer!</p>

<p>As a fully decentralized metaverse, Decentraland is owned and governed by its users. Join the Decentraland DAO to submit and vote on proposals that affect how the world operates or secure funding for your ideas by applying for grants.</p>

<h2>Trending Items</h2>

<h2>Browse LAND Available for Rent & Sale</h2>

<h2>Make your ideas a reality in the metaverse. Find a team to build with.</h2>

<h2>Worlds</h2>

<h3>Your Personal Space in the Metaverse</h3>

<p>With just a Decentraland NAME you can claim your own corner of the metaverse, separate from the open world of Decentraland, where you can build, experiment, host events—whatever you want, it’s your World!</p>

<h3>Learn more about Decentraland</h3>

<h2>Frequently Asked

Questions</h2>

<h4>What is Decentraland?</h4>

<h4>How do I enter Decentraland?</h4>

<h4>Do I need cryptocurrency or a crypto wallet to use Decentraland?</h4>

<h4>How do I become a Decentraland Creator?</h4>

<h4>What is a NAME?</h4>

<h4>What is the difference between LANDs and Worlds?</h4>

<h4>How can I get help and contact the Support Team?</h4>

<h3>Stay updated with Decentraland</h3>

<h2>RESOURCES</h2>

<h2>CONNECT</h2>

# End of the information extracted from the URL: https://decentraland.org

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/wearables/wearables-overview/

<title>Wearables Overview | Decentraland Documentation</title>

<strong>Wearables Overview</strong>

<h1>Wearables Overview</h1>

<h1>What Are Wearables?</h1>

<p>Wearables are the various items of clothing, accessories, and body features that can be used to customize the appearance of a Decentraland avatar. There is a selection of default wearables that are freely available to all avatars, but Decentraland also supports the creation and use of custom wearables that are represented by non-fungible tokens (or NFTs). This allows a finite amount of different wearables to be created, or minted, on the blockchain, similar to the LAND.</p>

<p>There’s a growing range of available wearables including cyberpunk themed sneakers, fashionable jackets, fun top hats, and more! All of these stylistic choices give users an exciting and meaningful way to invest in, and express, their own unique personalities. By allowing wearables to be minted, and then sold, as NFTs, Decentraland provides content creators with a fun way to monetize their creative work.</p>

<p>By default, Decentraland Wearables are minted on the Polygon/Matic side-chain so users can mint, buy, sell, or transfer items without having to pay gas fees.</p>

<h1>What Are Smart Wearables?</h1>

<p>Smart wearables are portable experiences that are turned on when the player puts on a certain item of clothing. Smart wearables can grant players new abilities, like a jetpack that lets them fly, or add a new layer of content on top of the rest of the world, like randomly placing coins to be collected throughout the whole of genesis city.</p>

<p>To know how to create</p>

<strong>Smart Wearables</strong>

<p>you can follow these</p>

<blockquote>Smart wearables, as a subset of wearables, possess the capability to integrate advanced interactions and functionalities. Consequently, proficient skills in coding are necessary to unlock their full potential and enhance their features.</blockquote>

<h1>Wearable Categories</h1>

<p>Each wearable has a specific category that determines which body part in the avatar system (e.g. head, upper body, etc.) the wearable will be applied to. Certain wearables will impact whether or not other wearables are rendered, depending on the specific category. Some wearables will entirely replace others with sometimes unexpected and surprising results. See the list below for details.</p>

<p>The different categories are:</p>

<strong>Skin:</strong>

<li>Replaces the entire avatar (head, upper body, lower body and feet except accessories)</li>

<strong>Head:</strong>

<strong>Mouth</strong>

<strong>Eyes</strong>

<strong>Eyebrows</strong>

<strong>Facial Hair</strong>

<strong>Hair</strong>

<strong>Upper Body</strong>

<strong>Lower Body</strong>

<strong>Handwear</strong>

<strong>Feet</strong>

<p>There are also accessories that can be applied to different areas of an avatar. Some of these accessories can impact other wearables. The accessories are:</p>

<strong>Mask</strong>

<strong>Eyewear</strong>

<strong>Earring</strong>

<strong>Tiara</strong>

<strong>Top Head</strong>

<strong>Hat</strong>

<strong>Helmet</strong>

<p>For a detailed description of each category, and how items within each category interact or replace one another, see</p>

<p>.</p>

<p>You can check some of the basic wearables here:</p>

<p>The following shared folder contains example wearables, base models, textures and other resources you can use:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/wearables/wearables-overview/

# Start of the information extracted from the URL: https://docs.decentraland.org

<title>Decentraland Documentation | Decentraland Documentation</title>

<h1>Decentraland Documentation</h1>

<p>The first-ever virtual world owned by its users</p>

<p>This site is maintained by the Decentraland Foundation.</p>

<p>The content in this site is divided into sections for different user profiles. Choose a section that matches your needs.</p>

<h3>For Players</h3>

<p>Discover how to experience Decentraland and get the most out of it</p>

<h3>For Content Creators</h3>

<p>Learn how to create content for others to experience in Decentraland</p>

<h3>For Contributors</h3>

<p>Learn how you can contribute to building the tools and infrastructure of Decentraland.</p>

# End of the information extracted from the URL: https://docs.decentraland.org

# Start of the information extracted from the URL: https://docs.decentraland.org/player

<title>Decentraland player documentation | Decentraland Documentation</title>

<strong>Decentraland player documentation</strong>

<h1>Decentraland player documentation</h1>

<h3>Find help about the various topics in each of these sections</h3>

<p>Find help about the various topics in each of these sections</p>

<h3>World</h3>

<p>General info for players</p>

<h3>Market</h3>

<p>Learn how to trade exclusive tokens.</p>

<h3>Ethereum Essentials</h3>

<p>Learn how we use the blockchain</p>

# End of the information extracted from the URL: https://docs.decentraland.org/player

# Start of the information extracted from the URL: https://docs.decentraland.org/creator

<title>Let’s build the metaverse together | Decentraland Documentation</title>

<strong>Let’s build the metaverse together</strong>

<h1>Let’s build the metaverse together</h1>

<p>3D content in Decentraland is made up of scenes, each scene occupies a finite amount of space and is displayed one next to the other for players to freely walk through them.</p>

<p>The Decentraland SDK is a collection of tools to allow you to create scenes. The following are good places to start:</p>

<li>: follow this mini tutorial for a quick crash course.</li>

<li>: read this to understand the full process of creating a scene from start to end, incluing publishing and promoting it.</li>

<li>: dive right into working example scenes.</li>

<h3>The Decentraland Editor</h3>

<p>The Editor is an all-in-one content creation tool. It’s intended for users of any knowledge level, combining a graphical interface with code editing capabilities. Both technical and non-technical creators will benefit from using it.</p>

<p>.</p>

<h3>Other scene creation tools</h3>

<p>There are a number of tools that can help with arranging 3d models into position in a Decentraland scene. You still need to resort to the SDK to add interactivity to these items, but setting positions visually is a big help.</p>

<strong>DCL Edit</strong>

<p>: A community-built tool that allows you to drag and drop 3d models into your scene. You can then work on adding interactivity to the resulting scene using the SDK.</p>

<p>Read the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: If a scene is created by or modified by the SDK, you can’t import it into the Builder. You can only go from the Builder to the SDK, not in the other direction.</blockquote>

<h3>3D Modeling</h3>

<p>You can use any 3rd party modeling tool to create 3D models that can be used in Decentraland scenes. It’s easy to</p>

<p>.</p>

<p>See</p>

<p>for tips and tricks, and information about supported features and formats for 3D models.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator

# Start of the information extracted from the URL: https://docs.decentraland.org/contributor

<title>Welcome! | Decentraland Documentation</title>

<strong>Welcome!</strong>

<h1>Welcome!</h1>

<p>Decentraland is a virtual world owned by its users, developed in the open and ready to grow with

the contributions of people all around the globe.</p>

<p>This documentation details the Decentraland open protocol, everything from the architectural

overview to the specific capabilities of each component. Here you’ll find the resources

you need to:</p>

<li>Design products and applications in the ecosystem</li>

<li>Conduct research and investigate the contents of the world</li>

<li>Create your own World Explorer</li>

<li>Pursue novel ideas that may end up in this list</li>

<strong>Let’s build the metaverse together!</strong>

<h2>Where to start?</h2>

<p>If you don’t know where to begin, it’s a good idea to look at the</p>

<p>of the Decentraland protocol, to learn about the different components and their general purpose before diving into more detailed sections.</p>

<h2>Other resources</h2>

<p>To get additional information and continue learning, you may want to check out:</p>

<p>The</p>

<p>, where members of the community can present questions, comments or concerns to technical teams at the Decentraland Foundation. They are hosted monthly, and you can attend freely!</p>

<p>The</p>

<p>, to see the current platform status, incident history and some metrics.</p>

<p>The</p>

<p>, a collection of design documents describing the state and evolution of different aspects of Decentraland.</p>

<p>The</p>

<p>, where all the open-source repositories are hosted.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/contributor

# Start of the information extracted from the URL: https://places.decentraland.org

<title>Places Overview</title>

<h3>Decentraland</h3>

# End of the information extracted from the URL: https://places.decentraland.org

# Start of the information extracted from the URL: https://decentraland.org/privacy

<title>Privacy Policy</title>

<h1>Privacy Policy</h1>

<h2>1. Introduction</h2>

<p>1.1 This Privacy Policy details important information regarding the collection, use and disclosure of User information collected on the Site and the Tools. The aim of this Privacy Policy is to help you understand how your personal information is used and your choices regarding said use. By using the Site or the Tools, you agree that the Foundation can collect, use, disclose, and process your information as described in this Privacy Policy. This Privacy Policy only applies to the Site and the Tools, and not to any other websites, products or services you may be able to access or link to via the Site or the Tools. We encourage you to read the privacy policies of any other websites you visit before providing your information to them.</p>

<p>The Site and the Tools may evolve over time, and this Privacy Policy will change to reflect that evolution. If changes are made, you will be notified by revising the date at the top of this Privacy Policy. In some cases, if significant changes are made, an statement may be placed in the homepage. We encourage you to review this Privacy Policy periodically to stay informed.</p>

<p>Some third-party providers may place cookies or pixels - small data files stored on your hard drive or in device memory - on your browser or hard drive. Note that this Privacy Policy does not cover the use of cookies or pixels by such third parties. Most web browsers are set to accept cookies and pixels by default, but you can usually set your browser to remove or reject browser cookies or pixels. If you do choose to remove or reject cookies or pixels, however, your ability to use the Site or the Tools might be affected.</p>

<p>1.2 This Privacy Policy should be read in conjunction with the Terms of Use. By accessing the Tools, you are consenting to the information collection and use practices described in this Privacy Policy.</p>

<p>1.3 Your use of the DCL Client and any personal information you provide through the Tools remains subject to the terms of this Privacy Policy and the Terms of Use, as each may be updated from time to time.</p>

<p>1.4 Any questions, comments or complaints that you might have should be emailed to</p>

<p>.</p>

<h2>2. Information Collected in the Site and the Tools</h2>

<p>The personal information collected from you generally may include:</p>

<p>2.1 Network information regarding transactions, including, among other things, the type of device you use, access times, hardware model, operating system and version, and other unique device identifiers.</p>

<p>2.2. Information about plugins you might be using, included but not limited to those related to the management of cryptocurrency assets and any information provided by them.</p>

<p>2.3. Your email and Ether address.</p>

<p>2.4 The DCL Client requires the highest level of browser permissions that could potentially lead to procurement of more personal information. Information on these permissions are used for a limited purpose, and why this is necessary, can be found in paragraph 3 below.</p>

<p>2.5 Your interactions with the Site are documented via Segment.io and that information is processed by Google.</p>

<h2>3. The Way your Personal Information is used</h2>

<p>3.1 As with nearly all interactions that take place on the World Wide Web, the servers may receive information by virtue of your interaction with them, including but not limited to IP Addresses.</p>

<p>3.2 The DCL Client requires full browser permissions that could potentially be used to access additional personal information. Such browser permissions are used for an extremely limited technical purpose for allowing the DCL Client to properly interact with your browser. No additional information is obtained beyond what is necessary to provide the DCL Client. No information received is shared with any third-party except as required for provision of the DCL Client.</p>

<p>3.3 Segment.io is used for purposes of monitoring web traffic. Any identifying information collected via Segment.io is controlled by Segment.io, Inc.</p>

<p>3.4 Public blockchains provide transparency into transactions and the Foundation is not responsible for preventing or managing information broadcasted on a blockchain.</p>

<h2>4. What Is Done With Your Information</h2>

<p>4.1 Your information may be used in the following ways:</p>

<p>To analyze trends for how the Site and Tools are being used;

To improve the Site and the Tools;

To help personalize your experience of the Site and the Tools; and

If you provide your contact information, you may receive technical notices, updates, confirmations, security alerts, to provide support to you, to tell you about other products and services that might interest you, or to respond to your comments or questions.

4.2 Your information may be shared with third parties who need to access it in order to do work related to the Site and the Tools, including doing things like helping make the Site or DCL Client available, or providing analytics services. These third parties only access and use your information as necessary to perform their functions.</p>

<p>4.3 Aggregations and anonymizations that contain your information may be created in a way that does not directly identify you. Those aggregations and anonymizations may be used or shared for a variety of purposes related to the Site and the DCL Client.</p>

<p>4.4 Your personal information may be disclosed to agents, businesses, or service providers who process your personal information for providing the Site and the Tools to you. The agreements with these service providers limit the kinds of information they can use or process and ensure they use reasonable efforts to keep your personal information secure.</p>

<p>4.5 The Foundation also reserves the right to disclose personal information that it believes, in good faith, is appropriate or necessary to enforce the Terms of Use, take precautions against liability or harm, to investigate and respond to third-party claims or allegations, to respond to court orders or official requests, to protect the security or integrity of the Site or the Tools, and to protect the rights, property, or safety of the Foundation, the Decentraland community of users and LAND owners, or others.</p>

<p>4.6 In the event that the Foundation is involved in a merger, acquisition, sale, bankruptcy, insolvency, reorganization, receivership, assignment for the benefit of creditors, or the application of laws or equitable principles affecting creditors’ rights generally, or other change of control, there may be a disclosure of your information to another entity related to such event.</p>

<h2>5. Your Choice</h2>

<p>Your personal information will be processed in accordance with this Privacy Policy, and as part of that you will have limited or no opportunity to otherwise modify how your information is used.</p>

<h2>6. Cookies</h2>

<p>The Site and the Tools do not use cookies at this time but they might do so in the future, in which case this Privacy Policy shall be updated accordingly.</p>

<h2>7. Information Not Collected</h2>

<p>Any other personally-identifiable information about you shall not be collected, unless you give it to the Foundation directly: by filling out a form, giving written feedback, communicating via third party social media sites, or otherwise communicating via the Site, the Tools or any other means.</p>

<h2>8. Information Security</h2>

<p>Whilst neither the Foundation, nor any other organization, can guarantee the security of information processed online, the Foundation has appropriate security measures in place to protect your personal information. For example, the personal information you provide is stored on computer systems with limited access, encryption, or both.</p>

<h2>9. Privacy Rights</h2>

<p>9.1 Subject to applicable law, you may have some or all of the following rights in respect of your personal information: (i) to obtain a copy of your personal information together with information about how and on what basis that personal information is processed; (ii) to rectify inaccurate personal information (including the right to have incomplete personal information completed); (iii) to erase your personal information (in limited circumstances, where it is no longer necessary in relation to the purposes for which it was collected or processed); (iv) to restrict processing of your personal information where: a. the accuracy of the personal information is contested; b. the processing is unlawful but you object to the erasure of the personal information; or c. we no longer require the personal information but it is still required for the establishment, exercise or defense of a legal claim; (v) to challenge processing which we have justified on the basis of a legitimate interest (as opposed to your consent, or to perform a contract with you); (vi) to prevent us from sending you direct marketing; (vii) to withdraw your consent to our processing of your personal information (where that processing is based on your consent); (viii) to object to decisions which are based solely on automated processing or profiling; (ix) in addition to the above, you have the right to file a complaint with the supervisory authority.</p>

<p>9.2. If you reside in California, you may request certain general information regarding our disclosure of personal information to third parties for their direct marketing purposes.</p>

<p>9.3. If you wish to investigate the exercising of any of these rights, please write to us at the following address:</p>

<p>.</p>

<h2>10. Changes and Updates</h2>

<p>10.1 This Privacy Policy may be revised periodically and this will be reflected by the “Last update posted” date above. Please revisit this page to stay aware of any changes. Your continued use of the DCL Client constitutes your agreement to this Privacy Policy and any future revisions.</p>

<p>10.2 Contact Information:</p>

<p>.</p>

# End of the information extracted from the URL: https://decentraland.org/privacy

# Start of the information extracted from the URL: https://decentraland.org/terms

<title>Terms of Use</title>

<h1>Terms of Use</h1>

<h2>1. Acceptance of Terms</h2>

<p>The Decentraland Foundation (the "Foundation"), acting for the benefit of the Decentraland community as a whole, holds the intellectual property rights over, and makes available, (a) the DCL Client, the Desktop Client, the SDK 5.0, the Marketplace (</p>

<p>), the Builder, the Blog, Events, Agora, Forum, the Land Manager, the Command Line Interface, DAO, the Developers’ Hub, the Rewards tool which, with any other features, tools and/or materials made available from time to time by the Foundation, are referred to herein as the "Tools" and (b) the website</p>

<p>(the "Site"). Please read these Terms of Use (the "Terms" or "Terms of Use") carefully before using the Tools and the Site. By using or otherwise accessing the Tools and the Site, you: (1) accept and agree to be bound by these Terms; (2) accept that the Tools are still in testing phase and that you use at your own risk, as further explained in Section 2 below; (3) represent that you are old enough to use the Tools and the Site pursuant to Sections 3 and 9 below; (4) consent to the collection, use, disclosure and other handling of information as described in the Privacy Policy, available here</p>

<p>; (5) accept and agree (5.1.) the Content Policy approved by the DAO, available here</p>

<p>, and (5.2.) any additional terms and conditions of participation issued by the Foundation from time to time. If you do not agree to the Terms, then you must not access or use the Tools or the Site.</p>

<p>As per the endowment received, the Foundation makes available the Tools and the Site free of charge in order to allow different interactions with the Decentraland platform ("Decentraland"), a decentralized virtual world. The Foundation does not own or control Decentraland, as ownership and governance is decentralized in the community through the DAO.</p>

<p>Decentraland is governed by a decentralized autonomous organization (the "DAO"). For further information please see</p>

<p>.</p>

<p>The Foundation has no continuing obligation to operate the Tools and the Site and may cease to operate one or more of the Tools in the future, at its exclusive discretion, with no liability whatsoever in connection thereto.</p>

<p>With respect to the source code of the software of the Tools that has been released under an open source license, such software code must be used in accordance with the applicable open source license terms and conditions as described in Section 13 below. Other similar tools might be developed in the future by the community or third parties.</p>

<h2>2. Disclaimer and Modification of Terms of Use</h2>

<p>The Tools are provided on an "as is" and "as available" basis and may contain defects and software bugs. You are advised to safeguard important data, property and content, to use caution, and not to rely in any way on the correct or secure functionality or performance of the Tools.</p>

<p>Except for Section 17, providing for binding arbitration and waiver of class action rights, as detailed in Section 7, the Foundation reserves the right, at the sole discretion of the DAO, to modify or replace the Terms of Use at any time. The most current version of these Terms will be posted on the Site. You shall be responsible for reviewing and becoming familiar with any such modifications. Use of the Tools by you after any modification to the Terms constitutes your acceptance of the Terms of Use as modified.</p>

<h2>3. Eligibility</h2>

<p>You hereby represent and warrant that you are fully able and competent to enter into the terms, conditions, obligations, affirmations, representations and warranties set forth in these Terms and to abide by and comply with these Terms. Decentraland is a global platform and by accessing the Content, the Site or Tools, you are representing and warranting that you are of the legal age of majority in your jurisdiction as is required to access such Tools and Content and enter into arrangements as provided by the Tools. You further represent that you are otherwise legally permitted to use the Tools in your jurisdiction including owning cryptographic tokens, and interacting with the Site, Tools or Content in any way. You further represent that you are responsible for ensuring compliance with the laws of your jurisdiction and acknowledge that the Foundation is not liable for your compliance or failure to comply with such laws. You further represent and warrant that all funds or assets used by you have been lawfully obtained by you in compliance with all applicable laws.</p>

<h2>4. Account Access and Security</h2>

<p>Access to the Tools is provided via a third party private key manager selected by you (e.g., a Web3 Provider, Metamask, a USB interface for Ledger Wallet, the Mist browser, or other). Security and secure access to each account in the Tools is provided solely by the third party private key manager you select to administer your private key. You and the third party private key manager you select are entirely responsible for security related to access of the Tools and all information provided by you to such third party provider (including without limitation, email or phone number). The DAO and/or the Foundation bear no responsibility for any breach of security or unauthorized access to your account (the "Account"). You are advised to: (a) avoid any use of the same password with your selected third party private key manager that you have ever used outside of the third party private key manager; and (b) keep your password and any related secret information secure and confidential and do not share them with anyone else.</p>

<p>You are solely responsible for all activities conducted through your Account whether or not you authorize the activity. In the event that fraud, illegality or other conduct that violates this Agreement is discovered or reported (whether by you or someone else) that is connected with your Account, the DAO may suspend or block your Account (or Accounts) as described in Section 15.</p>

<p>You are solely responsible for maintaining the confidentiality of your password and for restricting access to your devices. You are solely responsible for any harm resulting from your disclosure, or authorization of the disclosure, of your password or from any person's use of your password to gain access to your Account. You acknowledge that in the event of any unauthorized use of or access to your Account, password or other breach of security, you accept that due to the nature of the Tools and the platform itself, the DAO and/or the Foundation will be unable to remedy any issues that arise.</p>

<p>The DAO and/or the Foundation will not be liable for any loss or damage (of any kind and under any legal theory) to you or any third party arising from your inability or failure for any reason to comply with any of the foregoing obligations, or for any reason whatsoever, except fraud on our part.</p>

<p>The DAO and/or the Foundation cannot and will not be liable for any loss or damage arising from your sharing or other loss of your private key or related information, or any other damage or loss arising from unauthorized access to your Account.</p>

<p>Transactions that take place using the Tools are confirmed and managed via the Ethereum blockchain. You understand that your Ethereum public address will be made publicly visible whenever you engage in a transaction using the Tools.</p>

<p>If you reside in a jurisdiction where online gambling is banned (such as the United States of America, China and South Korea) you must refrain from accessing Content which includes online gambling.</p>

<h2>5. Representations and Risks</h2>

<h3>5.1 Disclaimer</h3>

<p>You acknowledge and agree that your use of the Tools and the Site is at your sole risk. The Tools and the Site are provided on an "AS IS" and "AS AVAILABLE" basis, without warranties of any kind, either express or implied, including, without limitation, implied warranties of merchantability, fitness for a particular purpose or non-infringement. You acknowledge and agree that the DAO and/or the Foundation has no obligation to take any action regarding: which users gain access to or use the Tools; what effects the Tools may have on you; the LAND you own; how you may interpret or use the Tools; or what actions you may take or fail to take as a result of having been exposed to the Tools. You release the DAO and/or the Foundation from all liability for your inability to access to the Site, Tools or any Content therein. The DAO and/or the Foundation is not and cannot be responsible for and makes no representations, warranties or covenants concerning any Content contained in or accessed through the Site, Tools, and the DAO and/or the Foundation will not be responsible or liable for the accuracy, copyright compliance, legality or decency of material contained in or accessed through the Tools. The Content Policy over Decentraland is established and enforced exclusively by the Decentraland community through the DAO.</p>

<h3>5.2 Sophistication and Risk of Cryptographic Systems</h3>

<p>By utilizing the Tools, the Site or interacting with the Tools or platform or anything contained or provided therein in any way, you represent that you understand the inherent risks associated with cryptographic systems; and warrant that you have an understanding of the usage, risks, potential bugs based on novel technology (where applicable), and intricacies of native cryptographic tokens, like Ether (ETH) and Bitcoin (BTC), smart contract based tokens such as those that follow the Ethereum Token Standard (</p>

<p>), MANA (the ERC-20 token that allows users to claim parcels of LAND and trade with each other within Decentraland), LAND (the ERC-721 token, associating each LAND parcel's x and y coordinates with a definition of a parcel's 3D scene that makes up the larger metaverse) and blockchain-based software systems.</p>

<h3>5.3 Risk of Regulatory Actions in One or More Jurisdictions</h3>

<p>The Foundation, MANA, LAND and ETH could be impacted by one or more regulatory inquiries or regulatory action, which could impede or limit your ability to access or use the Tools or Ethereum blockchain.</p>

<h3>5.4 Risk of Weaknesses or Exploits in the Field of Cryptography</h3>

<p>You acknowledge and agree that cryptography is a progressing field. Advances in code cracking or technical advances such as the development of quantum computers may present risks to smart contracts, cryptocurrencies and the Tools, which could result in the theft or loss of your cryptographic tokens or property, among other potential consequences. By using the Tools you acknowledge and agree to undertake these risks.</p>

<h3>5.5 Use of Crypto Assets</h3>

<p>Some Tools allow the use of MANA, ETH or other similar blockchain technologies. You acknowledge and agree that MANA, Ether and blockchain technologies and associated assets, and other assets are highly volatile due to many factors including but not limited to popularity, adoption, speculation, regulation, technology and security risks. You also acknowledge and agree that the cost of transacting on such technologies is variable and may increase at any time causing impact to any activities taking place on the Ethereum blockchain. The Foundation does not invite or make any offer to acquire, purchase, sell, transfer or otherwise deal in any crypto asset. Third parties may provide services involving the acquisition, purchase, sale, transfer or exchange of crypto-assets; the Foundation does not provide any such service and does not undertake any liability in connection thereto. You acknowledge and agree these risks and represent that the Foundation cannot be held liable for changes and fluctuations in value or increased costs.</p>

<p>There are risks associated with using an Internet-based currency, including, but not limited to, the risk of hardware, software and Internet connections failure or problems, the risk of malicious software introduction, and the risk that third parties may obtain unauthorized access to information stored within your wallet. You accept and acknowledge that the Foundation will not be responsible for any communication failures, disruptions, errors, distortions or delays you may experience when using the Ethereum network or any sidechain or similar device for processing transactions, however caused.</p>

<h3>5.6 Application Security</h3>

<p>You acknowledge and agree that the Site, the Tools and related applications are software code and are subject to flaws and acknowledge that you are solely responsible for evaluating any smart contract, code provided by the Site, Tools or Content and the trustworthiness of any third-party websites, products, smart-contracts, or Content you access or use through the Tools. You further expressly acknowledge and agree that Ethereum applications can be written maliciously or negligently, that the Foundation cannot be held liable for your interaction with such applications and that such applications may cause the loss of property or even identity. This warning and others later provided by the Foundation in no way evidence or represent an on-going duty to alert you to all of the potential risks of utilizing the Tools or the Site.</p>

<h3>5.7 Third Party Providers</h3>

<p>The Foundation and/or the DAO, neither own nor control MetaMask, Ledger Wallet, the Mist browser, Google Chrome, the Ethereum network, any Web3 Provider or any other third party site, product, or service that you might access, visit, or use for the purpose of enabling you to use the various features of the Tools. The Foundation and/or the DAO shall not be liable for the acts or omissions of any such third parties, nor shall the Foundation and/or the DAO be liable for any damage that you may suffer as a result of your transactions or any other interaction with any such third parties.</p>

<h3>5.8 Taxes</h3>

<p>You are solely responsible for determining what, if any, Taxes apply to your LAND parcel related transactions, and any other transaction conducted by you. The Foundation does not, and will not, have any insight into or control over any transactions conducted by you in Decentraland, and thus is not responsible for determining the Taxes that apply to your transactions entered through the Tools or otherwise involving any LAND parcel, or any other related transaction, and is not to act as a withholding Tax agent in any circumstances whatsoever.</p>

<h3>5.9 Uses of the Tools</h3>

<p>You acknowledge and agree that the Tools do not store, send, or receive LAND parcels. This is because LAND parcels exist only by virtue of the ownership record maintained on the Tools' supporting blockchain in the Ethereum network. Any transfer of a LAND parcel occurs within the supporting blockchain in the Ethereum network, and not within the Tools.</p>

<h3>5.10 Risks of Changes to Ethereum Platform</h3>

<p>Upgrades by Ethereum to the Ethereum platform, a hard fork in the Ethereum platform, or a change in how transactions are confirmed on the Ethereum platform may have unintended, adverse effects on all blockchains using the ERC-20 standard, ERC-721 standard, or any other future Ethereum standard.</p>

<h3>5.11 Wearables Curation Committee</h3>

<p>You acknowledge that the Wearables Curation Committee or any other committee may restrict or ban certain contents, polls or decisions. You acknowledge you will be exclusively liable for any content you make available on the platform. Neither the DAO Committee nor the Wearables Curation Committee has any obligation with respect to the content.</p>

<h2>6. Transactions and Feeds</h2>

<p>6.1 If you elect to purchase, trade, or sell a LAND parcel, Avatar, wearable or other non-fungible token ("NFT") with or from other users via the Tools, any financial transaction that you engage in will be conducted solely through the Ethereum network, Layer 2 solutions or other sidechains via Web3 providers. The Foundation will have no insight into or control over these payments or transactions, nor does it have the ability to reverse any transactions. With that in mind, the Foundation will have no liability to you or to any third party for any claims or damages that may arise as a result of any transactions that you engage in via the Tools, or any other transactions that you conduct via the Ethereum network, and other networks, sidechains, Layer 2 solutions or Web3 providers.</p>

<p>6.2 Ethereum requires the payment of a transaction fee (a "Gas Fee") for every transaction that occurs on the Ethereum network. The Gas Fee funds the network of computers that run the decentralized Ethereum network. This means that you will need to pay a Gas Fee for each transaction that occurs via the Tools. You accept that the payment of the Gas Fee is inherent to the nature of the Ethereum network and alien to the Foundation or due to the use of the Tools.</p>

<p>6.3 As per a DAO’s decision, transactions taking place in the Marketplace will be subject to a 2.5% MANA cost (the "Marketplace Transaction Cost") calculated over the amount of MANA involved in such transactions. Such MANA cost will be borne by the participants to the transaction. All MANA spent under the Marketplace Transaction Cost will be transferred to the treasury of the DAO. Please be aware that transactions in third-party NFT marketplaces (inside or outside Decentraland) may be subject to the fees charged by said third-party marketplaces as per the respective terms and conditions. The Foundation and/or the DAO shall have no liability whatsoever with regards to transactions conducted in third-party marketplaces.</p>

<p>6.4 You will be solely responsible to pay any and all sales, use, value-added and other taxes, duties, and assessments (except taxes that may apply on our net income) now or hereafter claimed or imposed by any governmental authority (collectively, "Taxes") associated with your use of the Tools (including, without limitation, any Taxes that may become payable as the result of your ownership, or transfer of any NFT and any activity conducted by you in Decentraland). Except for income taxes levied on the Foundation, you: (i) will pay or reimburse the Foundation for all national, federal, state, local or other taxes and assessments of any jurisdiction, including value added taxes and taxes as required by international tax treaties, customs or other import or export taxes, and amounts levied in lieu thereof based on charges set, services performed or payments made hereunder, as are now or hereafter may be imposed under the authority of any national, state, local or any other taxing jurisdiction; and (ii) shall not be entitled to deduct the amount of any such taxes, duties or assessments from payments made to the Foundation pursuant to these Terms.</p>

<h2>7. Changes</h2>

<p>The DAO may approve changes to the Terms from time to time. When the DAO approves changes, the Foundation will make available the updated Terms through the Site and update the "Last Updated" date at the beginning of these Terms accordingly. Please check these Terms periodically for changes. Any changes to the Terms will apply on the date that they are made, and your continued access to or use of the Tools or the Site after the Terms have been updated will constitute your binding acceptance of the updates. If you do not agree to any revised Terms, you must not access or use the Tools or the Site.</p>

<h2>8. Children</h2>

<p>You affirm that you are over the age of 13, as the Tools are not intended for children under ## 13. IF YOU ARE 13 OR OLDER BUT UNDER THE AGE OF 18, OR THE LEGAL AGE OF MAJORITY WHERE YOU RESIDE IF THAT JURISDICTION HAS AN OLDER AGE OF MAJORITY, THEN YOU AGREE TO REVIEW THESE TERMS WITH YOUR PARENT OR GUARDIAN TO MAKE SURE THAT BOTH YOU AND YOUR PARENT OR GUARDIAN UNDERSTAND AND AGREE TO THESE TERMS. YOU AGREE TO HAVE YOUR PARENT OR GUARDIAN REVIEW AND ACCEPT THESE TERMS ON YOUR BEHALF. IF YOU ARE A PARENT OR GUARDIAN AGREEING TO THE TERMS FOR THE BENEFIT OF A CHILD OVER 13, THEN YOU AGREE TO AND ACCEPT FULL RESPONSIBILITY FOR THAT CHILD'S USE OF THE TOOLS OR THE SITE, INCLUDING ALL FINANCIAL CHARGES AND LEGAL LIABILITY THAT HE OR SHE MAY INCUR.</p>

<p>TO ACCESS CERTAIN CONTENTS, YOU WILL NEED TO HAVE A MINIMUM AGE AS DETAILED IN THE CONTENT POLICY.</p>

<p>IN ALL CASES INVOLVING ONLINE GAMBLING YOU MUST BE OLDER THAN 18 YEARS (OR THE MINIMUM LEGAL AGE IN YOUR PLACE OF RESIDENCE).</p>

<h2>9. Indemnity</h2>

<p>You shall release and indemnify, defend and hold harmless the Foundation, the DAO, and its officers, directors, employees and representatives from and against any and all losses, liabilities, expenses, damages, costs (including attorneys' fees and court costs) claims or actions of any kind whatsoever arising or resulting from your use of the Tools or the Site, your violation of these Terms of Use, and any of your acts or omissions. The Foundation reserves the right, at its own expense, to assume exclusive defense and control of any matter otherwise subject to indemnification by you and, in such case, you agree to cooperate with the Foundation in the defense of such matter.</p>

<h2>10. Disclaimers</h2>

<p>10.1 YOU ACKNOWLEDGE AND AGREE THAT YOU ASSUME FULL RESPONSIBILITY FOR YOUR USE OF THE SITE AND TOOLS. YOU ACKNOWLEDGE AND AGREE THAT ANY INFORMATION YOU SEND OR RECEIVE DURING YOUR USE OF THE SITE AND TOOLS MAY NOT BE SECURE AND MAY BE INTERCEPTED OR LATER ACQUIRED BY UNAUTHORIZED PARTIES. YOU ACKNOWLEDGE AND AGREE THAT YOUR USE OF THE SITE AND TOOLS IS AT YOUR OWN RISK. YOU ACKNOWLEDGE AND AGREE THAT THE TOOLS ARE PROVIDED "AS IS" AND "AS AVAILABLE" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR IMPLIED. RECOGNIZING SUCH, YOU ACKNOWLEDGE AND AGREE THAT, TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, NEITHER THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES, THE DAO, NOR ITS SUPPLIERS OR LICENSORS WILL BE LIABLE TO YOU FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY OR OTHER DAMAGES OF ANY KIND, INCLUDING WITHOUT LIMITATION DAMAGES FOR LOSS OF PROFITS, GOODWILL, USE, DATA OR OTHER TANGIBLE OR INTANGIBLE LOSSES OR ANY OTHER DAMAGES BASED ON CONTRACT, TORT, STRICT LIABILITY, INFRINGEMENT OF INTELLECTUAL PROPERTY OR THEFT OR MISAPPROPRIATION OF PROPERTY OR ANY OTHER THEORY (EVEN IF THE FOUNDATION HAD BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES), RESULTING FROM THE SITE OR TOOLS; THE USE OR THE INABILITY TO USE THE SITE OR TOOLS; UNAUTHORIZED ACCESS TO OR ALTERATION OF YOUR TRANSMISSIONS OR DATA; STATEMENTS, CONTENT OR CONDUCT OF ANY THIRD PARTY ON THE SITE OR TOOLS; ANY ACTIONS THE FOUNDATION TAKES OR FAILS TO TAKE AS A RESULT OF COMMUNICATIONS YOU SEND; HUMAN ERRORS; TECHNICAL MALFUNCTIONS; FAILURES, INCLUDING PUBLIC UTILITY OR TELEPHONE OUTAGES; OMISSIONS, INTERRUPTIONS, LATENCY, DELETIONS OR DEFECTS OF ANY DEVICE OR NETWORK, PROVIDERS, OR SOFTWARE (INCLUDING, BUT NOT LIMITED TO, THOSE THAT DO NOT PERMIT PARTICIPATION IN THE TOOLS); ANY INJURY OR DAMAGE TO COMPUTER EQUIPMENT; INABILITY TO FULLY ACCESS THE SITE OR TOOLS OR ANY OTHER WEBSITE; THEFT, TAMPERING, DESTRUCTION, OR UNAUTHORIZED ACCESS TO, IMAGES OR OTHER CONTENT OF ANY KIND; DATA THAT IS PROCESSED LATE OR INCORRECTLY OR IS INCOMPLETE OR LOST; TYPOGRAPHICAL, PRINTING OR OTHER ERRORS, OR ANY COMBINATION THEREOF; OR ANY OTHER MATTER RELATING TO THE SITE OR TOOLS. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES OR THE LIMITATION OR EXCLUSION OF LIABILITY FOR INCIDENTAL OR CONSEQUENTIAL DAMAGES. ACCORDINGLY, SOME OF THE ABOVE LIMITATIONS MAY NOT APPLY TO YOU.</p>

<p>10.2 THE FOUNDATION HEREBY EXPRESSLY DISCLAIMS, WAIVES, RELEASES AND RENOUNCES ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, OR NON INFRINGEMENT.</p>

<p>10.3 WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE FOUNDATION, ITS DIRECTORS, OFFICERS, EMPLOYEES AND LICENSORS DO NOT REPRESENT OR WARRANT TO YOU THAT: (I) YOUR ACCESS TO OR USE OF THE TOOLS WILL MEET YOUR REQUIREMENTS, (II) YOUR ACCESS TO OR USE OF THE TOOLS WILL BE UNINTERRUPTED, TIMELY, SECURE OR FREE FROM ERROR, (III) USAGE DATA PROVIDED THROUGH THE TOOLS WILL BE ACCURATE, (III) THE TOOLS OR ANY CONTENT, SERVICES, OR FEATURES MADE AVAILABLE ON OR THROUGH THE TOOLS ARE FREE OF VIRUSES OR OTHER HARMFUL COMPONENTS, OR (IV) THAT ANY DATA THAT YOU DISCLOSE WHEN YOU USE THE TOOLS WILL BE SECURE.</p>

<p>10.4 YOU ACCEPT THE INHERENT SECURITY RISKS OF PROVIDING INFORMATION AND DEALING ONLINE OVER THE INTERNET, AND AGREE THAT THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES AND THE DAO HAVE NO LIABILITY OR RESPONSIBILITY FOR ANY BREACH OF SECURITY UNLESS IT IS DUE TO ITS GROSS NEGLIGENCE.</p>

<p>10.5 THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES AND THE DAO WILL NOT BE RESPONSIBLE OR LIABLE TO YOU FOR ANY LOSSES YOU INCUR AS THE RESULT OF YOUR USE OF THE ETHEREUM NETWORK OR THE METAMASK OR ANY OTHER ELECTRONIC WALLET, INCLUDING BUT NOT LIMITED TO ANY LOSSES, DAMAGES OR CLAIMS ARISING FROM: (A) USER ERROR, SUCH AS FORGOTTEN PASSWORDS OR INCORRECTLY CONSTRUED SMART CONTRACTS OR OTHER TRANSACTIONS; (B) SERVER FAILURE OR DATA LOSS; (C) CORRUPTED WALLET FILES; (D) INTELLECTUAL PROPERTY INFRINGEMENT BY THE USERS; (E) UNAUTHORIZED ACCESS OR ACTIVITIES BY THIRD PARTIES, INCLUDING BUT NOT LIMITED TO THE USE OF VIRUSES, PHISHING, BRUTEFORCING OR OTHER MEANS OF ATTACK AGAINST THE TOOLS, ETHEREUM NETWORK, OR THE METAMASK OR OTHER ELECTRONIC WALLET.</p>

<p>10.6 LAND PARCELS, WEARABLES AND ANY AND ALL ERC-721 TOKENS ARE INTANGIBLE DIGITAL ASSETS THAT EXIST ONLY BY VIRTUE OF THE OWNERSHIP RECORD MAINTAINED IN THE ETHEREUM NETWORK. ALL SMART CONTRACTS ARE CONDUCTED AND OCCUR ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM PLATFORM. THE FOUNDATION HAS NO CONTROL OVER AND MAKES NO GUARANTEES OR PROMISES WITH RESPECT TO THE OWNERSHIP RECORD OR SMART CONTRACTS.</p>

<p>10.7 MANA ARE INTANGIBLE DIGITAL ASSETS THAT EXIST ONLY BY VIRTUE OF THE OWNERSHIP RECORD MAINTAINED IN THE ETHEREUM NETWORK. ALL SMART CONTRACTS ARE CONDUCTED AND OCCUR ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM PLATFORM. THE FOUNDATION HAS NO CONTROL OVER AND MAKE NO GUARANTEES OR PROMISES WITH RESPECT TO THE OWNERSHIP RECORD OR SMART CONTRACTS. THE FOUNDATION MAKES NO OFFER OR INVITATION TO ACQUIRE, PURCHASE, TRANSFER, SELL OR OTHERWISE DEAL IN MANA.</p>

<p>10.8. THE FOUNDATION IS NOT RESPONSIBLE FOR LOSSES DUE TO BLOCKCHAIN OR ANY OTHER FEATURES OF THE ETHEREUM NETWORK OR THE METAMASK OR OTHER ELECTRONIC WALLET, INCLUDING BUT NOT LIMITED TO LATE REPORT BY DEVELOPERS OR REPRESENTATIVES (OR NO REPORT AT ALL) OF ANY ISSUES WITH THE BLOCKCHAIN SUPPORTING THE ETHEREUM NETWORK, INCLUDING FORKS, TECHNICAL NODE ISSUES, OR ANY OTHER ISSUES HAVING FUND LOSSES AS A RESULT.</p>

<p>10.9. SOME TOOLS, AS THE DESKTOP CLIENT PROVIDES YOU WITH FASTER ACCESS AND INTERACTION WITH DECENTRALAND. THE DOWNLOAD AND USE OF THE DESKTOP CLIENT MAY INCLUDE THE DOWNLOAD OF THE CONTENT CREATED BY THE USERS AND AVAILABLE AT DECENTRALAND TO YOUR DEVICE, WHICH MAY BE ILLEGAL IN YOUR COUNTRY OR OFFENSIVE. THE DAO AND THE FOUNDATION ARE NOT LIABLE FOR SUCH CONTENT. CONTENT AVAILABLE IN DECENTRALAND MAY REDIRECT YOU TO THIRD-PARTY LINKS FOR WHICH THE DAO AND/OR THE FOUNDATION ARE NOT RESPONSIBLE. YOU ARE SOLELY RESPONSIBLE FOR ALL DOWNLOADS OF THIRD-PARTY CONTENT AND DATA, AND FOR ALL THIRD-PARTY LINKS CLICKED ON. PLEASE NOTE THAT BY CREATING A USER ON THE APP YOU RELEASE THE DAO AND THE FOUNDATION FROM ANY AND ALL LIABILITY REGARDING THE ABOVE-MENTIONED CONTENT, DATA OR LINKS AND ASSUME THE RISKS DESCRIBED ABOVE.</p>

<h2>11. Limitation on Liability</h2>

<p>11.1 YOU UNDERSTAND AND AGREE THAT THE FOUNDATION, ITS OFFICERS, EMPLOYEES, DIRECTORS, THE DAO, AND LICENSORS WILL NOT BE LIABLE TO YOU OR TO ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR EXEMPLARY DAMAGES WHICH YOU MAY INCUR, HOWSOEVER CAUSED AND UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, ANY LOSS OF PROFITS (WHETHER INCURRED DIRECTLY OR INDIRECTLY), LOSS OF GOODWILL OR BUSINESS REPUTATION, LOSS OF DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, OR ANY OTHER INTANGIBLE LOSS, EVEN IF THE FOUNDATION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>

<p>11.2 YOU AGREE THAT THE FOUNDATION’S TOTAL, AGGREGATE LIABILITY TO YOU FOR ANY AND ALL CLAIMS ARISING OUT OF OR RELATING TO THESE TERMS OR YOUR ACCESS TO OR USE OF (OR YOUR INABILITY TO ACCESS OR USE) ANY PORTION OF THE TOOLS, WHETHER IN CONTRACT, TORT, STRICT LIABILITY, OR ANY OTHER LEGAL THEORY, IS LIMITED TO THE GREATER OF (A) THE AMOUNTS ACTUALLY PAID BY YOU TO THE FOUNDATION UNDER THESE TERMS IN THE 12 MONTH PERIOD PRECEDING THE DATE THE CLAIM AROSE, OR (B) $100.</p>

<p>11.3 YOU ACKNOWLEDGE AND AGREE THAT THE FOUNDATION HAS MADE THE TOOLS AVAILABLE TO YOU AND ENTERED INTO THESE TERMS IN RELIANCE UPON THE WARRANTY DISCLAIMERS AND LIMITATIONS OF LIABILITY SET FORTH HEREIN, WHICH REFLECT A REASONABLE AND FAIR ALLOCATION OF RISK BETWEEN THE PARTIES AND FORM AN ESSENTIAL BASIS OF THE BARGAIN BETWEEN US. THE FOUNDATION WOULD NOT BE ABLE TO PROVIDE THE TOOLS TO YOU WITHOUT THESE LIMITATIONS.</p>

<p>11.4 SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, AND SOME JURISDICTIONS ALSO LIMIT DISCLAIMERS OR LIMITATIONS OF LIABILITY FOR PERSONAL INJURY FROM CONSUMER PRODUCTS, SO THE ABOVE LIMITATIONS MAY NOT APPLY TO PERSONAL INJURY CLAIMS.</p>

<h2>12. Proprietary Rights</h2>

<p>12.1 All title, ownership and Intellectual Property Rights in and to the Site and the Tools are owned exclusively by the Foundation or its licensors. The Foundation holds these Intellectual Property Rights for the benefit of the Decentraland community as a whole. You acknowledge and agree that the Site and Tools contains proprietary and confidential information that is protected by applicable intellectual property and other laws. Except as expressly authorized in Section 13, you agree not to copy, modify, rent, lease, loan, sell, distribute, perform, display or create Derivative Works based on the Site and the Tools, in whole or in part. The Foundation's exclusive ownership shall include all elements of the Site and Tools, and all Intellectual Property Rights therein. The visual interfaces, graphics (including, without limitation, all art and drawings associated with Tools), design, systems, methods, information, computer code, software, "look and feel", organization, compilation of the content, code, data, and all other elements of the Site and the Tools (but excluding the Content submitted by Users) (collectively, the " Foundation Materials") are owned by the Foundation, and are protected by copyright, trade dress, patent, and trademark laws, international conventions, other relevant intellectual property and proprietary rights, and applicable laws. All the Foundation Materials are the copyrighted property of the Foundation or its licensors, and all trademarks, logos, service marks, and trade names contained in the Foundation Materials are proprietary to the Foundation or its licensors. Except as expressly set forth herein, your use of the Site and the Tools does not grant you ownership of or any other rights with respect to any content, code, data, or other materials that you may access on or through the Site and the Tools. The Foundation reserves all rights in and to the Foundation Materials not expressly granted to you in the Terms. For the sake of clarity, you understand and agree: (i) that any "purchase" of LAND, whether via the Tools or otherwise, does not give you any rights or licenses in or to the Foundation Materials (including, without limitation, the Foundation’s copyright in and to the art and drawings associated with the Tools and content therein) other than those expressly contained in these Terms; and (ii) that you do not have the right to reproduce, distribute, or otherwise commercialize any elements of the Foundation Materials (including, without limitation, the Foundation’s copyright in and to the art and drawings associated with the Tools and content therein) in any way without the Foundation’s prior written consent in each case, which consent the Foundation may withhold in its sole and absolute discretion.</p>

<p>12.2 You may choose to submit comments, bug reports, ideas or other feedback about the Site or the Tools, including without limitation about how to improve the Tools (collectively, "Feedback"). By submitting any Feedback, you agree that the Foundation is free to use such Feedback at the Foundation’s discretion and without additional compensation to you, and to disclose such Feedback to third parties (whether on a non-confidential basis, or otherwise), including the DAO. You hereby grant the Foundation and the DAO a perpetual, irrevocable, nonexclusive, worldwide license under all rights necessary for the Foundation and the DAO to incorporate and use your Feedback for any purpose.</p>

<p>12.3 You acknowledge and agree that you are responsible for your own conduct while accessing or using the Site and the Tools, and for any consequences thereof. You agree to use the Site and the Tools only for purposes that are legal, proper and in accordance with these Terms and any applicable laws or regulations. By way of example, and not as a limitation, you may not, and may not allow any third party to: (i) send, post, upload, transmit, distribute, disseminate or otherwise make available any Content in violation of the Content Policy approved by the DAO, including without limitation, Content that infringes the Intellectual Property Rights of any party and any Content that contains any hate-related or violent content or contains any other material or products that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third party rights; (ii) distribute viruses, worms, defects, Trojan horses, spyware, time bombs, cancelbots, corrupted files, hoaxes, or any other items of a destructive or deceptive nature, or that may harvest or collect any data or information about other users without their consent; (iii) impersonate another person (via the use of an email address or otherwise); (iv) use the Site or the Tools to violate the legal rights (such as rights of privacy and publicity) of others; (v) engage in, promote, or encourage illegal activity (including, without limitation, money laundering); (vi) interfere with other users' enjoyment of the Site or the Tools; (vii) exploit the Site or the Tools for any unauthorized commercial purpose; (viii) post or transmit unsolicited or unauthorized advertising, or promotional materials, that are in the nature of "junk mail," "spam," "chain letters," "pyramid schemes," or any other similar form of solicitation; (ix) modify, adapt, translate, or reverse engineer any portion of the Tools; (x) remove any copyright, trademark or other proprietary rights notices contained in or on the Site or the Tools or any part of it; (xi) reformat or frame any portion of the Site or the Tools; (xii) stalk, harass, or engage in any sexual, suggestive, lewd, lascivious, or otherwise inappropriate conduct with minors on the Site or the Tools; (xiii) use any robot, spider, site search/retrieval application, or other device to retrieve or index any portion of the Site, the Tools or the Content posted on the Tools, or to collect information about its users for any unauthorized purpose; (xiv) use any cheats, hacks, or any other unauthorized techniques or unauthorized third-party software to cheat in any competition or game that may be offered on the Tools by other Users, or to otherwise disrupt or modify the Tools or the experience of any users on the Tools; (xv) create user accounts by automated means or under false or fraudulent pretenses; (xvi) attempt to gain unauthorized access to any other user's Account, password or Content; or (xvii) access or use the Tools for the purpose of creating a product or service that is competitive with the Tools.</p>

<p>12.4 Ownership and management of LAND, Non-fungible tokens (NFTs) and Content created by users:</p>

<p>LAND: All title and ownership rights over each piece of LAND lies with its owner. Each LAND owner decides the Content to be included in the LAND and may impose its own terms and conditions and policies. In the case of Districts, the relationship between the District and District participants - in any capacity - is exclusively governed by the applicable plan approved by each community. You are advised to review any such terms, conditions and policies before entering into transactions in any LAND. The Foundation does not control the Content of each LAND parcel and does not assume any liability or obligation in connection thereto. All Content uploaded to LAND must comply with the Content Policy. The Foundation holds the Intellectual Property Rights over the LAND smart contract but does not have any Intellectual Property Right over the Content introduced by each user.</p>

<p>NFTs: All title, ownership and Intellectual Property Rights over NFTs, including without limitation, Wearables, belong to the creator of the NFT. Transactions for the sale of NFT through the Marketplace will convey said title, ownership and Intellectual Property Rights to the purchaser. To the fullest extent possible, the creator will waive any moral rights over the NFTs upon transfer to third parties. Neither the Foundation nor the DAO have any Intellectual Property Rights over NFTs created by users. All NFTs must comply with the Content Policy.</p>

<p>Content: All title, ownership and Intellectual Property Rights over the Content created by users belongs to the users who created said Content. Neither the Foundation nor the DAO have any Intellectual Property Rights over the user’s Content. The creator of the Content may impose its own terms, conditions and licenses for access to said Content. You are advised to review any such terms, conditions and policies before accessing any such Content. All Content must comply with the Content Policy.</p>

<p>12.5 The use of Decentraland logo and trademarks are regulated in the Terms of use available at</p>

<h2>13. Open Source License.</h2>

<h3>13.1 Grant of Copyright License.</h3>

<p>Subject to the terms and conditions of this License, each Contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. The following Tools are not subject to the provisions of this Section 13, and are of proprietary nature of the Foundation: Blog and Events. The Forum is of proprietary nature and is a development of Discourse; the DAO is based on an open source license of Aragon.</p>

<h3>13.2 Grant of Patent License.</h3>

<p>Subject to the terms and conditions of this License, each Contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this License for that Work shall terminate as of the date such litigation is filed.</p>

<h3>13.3 Redistribution.</h3>

<p>You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that you meet the following conditions: (i) modifications to the Work and the Derivative Works thereof shall not infringe the Privacy and Content Policies, nor allow the infringement of said policies or of Section 12.3 above, and require any further Contributor to abide by these limitations; (ii) any modifications to the Work or the Derivative Works can only take place until six (6) months have elapsed since the release of the relevant Work or Derivative Works by the Contributor to the general public; (iii) you must give any other recipients of the Work or Derivative Works a copy of this License; (iv) you must cause any modified files to carry prominent notices stating that you changed the files; (v) you must retain, in the Source form of any Derivative Works that you distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; (vi) if the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add your own attribution notices within Derivative Works that you distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</p>

<p>You may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such Derivative Works as a whole, provided your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>

<h3>13.4 Submission of Contributions.</h3>

<p>Unless explicitly stated otherwise, any Contribution intentionally submitted for inclusion in the Work by you to the Foundation and/or its licensors shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with the Foundation and/or its licensors regarding such Contributions.</p>

<h3>13.5 Trademarks.</h3>

<p>This License does not grant permission to use the trade names, logo, trademarks, service marks, or product names of the licensee and/or its licensors, except as provided in the Terms of Use for Decentraland´s Logo and Name.</p>

<h3>13.6 Disclaimer of Warranty.</h3>

<p>Unless required by applicable law or agreed to in writing, the Foundation and/or its licensors provide the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with your exercise of permissions under this License.</p>

<h3>13.7 Limitation of Liability.</h3>

<p>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p>

<h3>13.8 Accepting Warranty or Additional Liability.</h3>

<p>While redistributing the Work or Derivative Works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other Contributor, and only if you agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p>

<h2>14. Links</h2>

<p>The Site and the Tools provide, or third parties may provide, links to other World Wide Web or accessible sites, applications or resources. Because the Foundation has no control over such sites, applications and resources, you acknowledge and agree that the Foundation, its officers, employees and the DAO are not responsible for the availability of such external sites, applications or resources, and do not endorse and are not responsible or liable for any content, advertising, products or other materials on or available from such sites or resources. You further acknowledge and agree that the Foundation, its officers, employees and the DAO, shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such site or resource.</p>

<h2>15. Termination and Suspension</h2>

<p>You shall have a right to terminate your Account at any time by canceling and discontinuing your access to and use of the Tools. The DAO may decide to terminate or suspend all or part of the Site and the Tools and your access to the Site and the Tools immediately, without prior notice or liability. You will not receive any refunds if you cancel your Account, or if these Terms are otherwise terminated. You agree that the DAO, in its sole discretion and for any or no reason, may terminate these Terms and suspend your Account(s) for the Tools. You agree that any suspension of your access to the Site or the Tools may be without prior notice, and that the DAO and/or the Foundation (and its officers and employees)will not be liable to you or to any third party for any such suspension.</p>

<p>In the event of your breach of these Terms or any suspected fraudulent, abusive, or illegal activity, the DAO and/or the Foundation may, without limitation, suspend your Account, block any infringing Content and adopt any other action deemed necessary to prevent future breaches, in addition to any other remedies the DAO and/or the Foundation and/or any User may have at law or in equity.</p>

<p>Upon any termination or suspension of your Account, you may no longer have access to information that you have posted on the Tools or that is related to your Account, and you acknowledge that the DAO and/or the Foundation will have no obligation to maintain any such information in the relevant databases or to forward any such information to you or to any third party. Upon termination of your Account, your right to use the Tools will immediately cease. The following provisions of these Terms survive any termination of these Terms: REPRESENTATIONS AND RISKS; TRANSACTION AND FEES; INDEMNITY; DISCLAIMERS; LIMITATION ON LIABILITY; PROPRIETARY RIGHTS; LINKS; TERMINATION AND SUSPENSION; NO THIRD-PARTY BENEFICIARIES; BINDING ARBITRATION AND CLASS ACTION WAIVER; GENERAL INFORMATION.</p>

<h2>16. No Third-Party Beneficiaries</h2>

<p>You agree that, except as otherwise expressly provided in these Terms, there shall be no third-party beneficiaries to the Terms.</p>

<h2>17. Notice and Procedure for Making Claims of Copyright Infringement</h2>

<p>If you believe that your Intellectual Property Rights (as this term is defined in the Content Policy) or the Intellectual Property Rights of a person on whose behalf you are authorized to act has been infringed, you are encouraged to contact the infringing party directly. Additionally, you may also contact the Foundation providing the following information:</p>

<p>an electronic or physical signature of the person authorized to act on behalf of the owner of the Intellectual Property Right;</p>

<p>a description of the Intellectual Property Right that you claim has been infringed;</p>

<p>description of where the material that you claim is infringing is located on the Tools;</p>

<p>your address, telephone number, and email address;</p>

<p>a statement by you that you have a good faith belief that the disputed use is not authorized by the owner of the Intellectual Property Right, its agent, or the law;</p>

<p>a statement by you, made under penalty of perjury, that the above information in your Notice is accurate and that you are Intellectual Property owner or authorized to act on the owner's behalf.</p>

<p>The Foundation can be reached at email:</p>

<p>To the extent possible, the Foundation may try to reach the would-be infringing party to forward your concerns. The Foundation is not in a position to assess the legal merits of the claims.</p>

<p>As the Foundation does not control the Content being uploaded by the users, if the user does not agree with your claim and/or does not accept to withdraw the infringing content, the DAO, as per the votes of the community, may take any of the following measures, (i) block the infringing Content so as to render it inaccessible through the Tools (although it could be still accessible through other clients); (ii) block the infringing user's Account. Any further action, claim or remedy against the infringing user must be undertaken by the aggrieved user.</p>

<p>Although not at the core of its role or responsibilities, to the extent technically possible, the Foundation may also, at its sole discretion, (i) block any kind of Content uploaded by users; (ii) suspend user Accounts; and/or (iii) request documents evidencing the right of the contributor to use Intellectual Property Rights embedded in the Content.</p>

<h2>18. Binding Arbitration and Class Action Waiver</h2>

<p>PLEASE READ THIS SECTION CAREFULLY - IT MAY SIGNIFICANTLY AFFECT YOUR LEGAL RIGHTS, INCLUDING YOUR RIGHT TO FILE A LAWSUIT IN COURT</p>

<h3>18.1 Initial Dispute Resolution</h3>

<p>The parties shall use their best efforts to engage directly to settle any dispute, claim, question, or disagreement and engage in good faith negotiations which shall be a condition to either party initiating a lawsuit or arbitration.</p>

<h3>18.2 Binding Arbitration</h3>

<p>If the parties do not reach an agreed upon solution within a period of 30 days from the time informal dispute resolution under the Initial Dispute Resolution provision begins, then either party may initiate binding arbitration as the sole means to resolve claims, subject to the terms set forth below.</p>

<p>Specifically, any dispute that is not resolved under the Initial Dispute Resolution provision shall be finally settled under the Rules of Arbitration of the International Chamber of Commerce. The following shall apply in respect of such arbitration: (i) the number of arbitrators shall be three (one nominated by each party and one nominated by the ICC); (ii) the decision of the arbitrators will be binding and enforceable against the parties and a judgment upon any award rendered by the arbitrators may be entered in any court having jurisdiction thereto (provided that in no event will the arbitrator have the authority to make any award that provides for punitive or exemplary damages or to award damages excluded by these Terms or in excess of the limitations contained in these Terms); (iii) the seat, or legal place, of arbitration shall be the City of Panama, Panama; and (iv) the language to be used in the arbitral proceedings shall be English, any documents submitted as evidence that are in another language must be accompanied by an English translation and the award will be in the English language. Claimants and respondents shall bear its or their own costs of the arbitration, including attorney's fees, and share equally the arbitrators' fees and ICC's administrative costs. For purposes of cost sharing, all claimants shall be considered one party and all respondents shall be considered one party. The parties shall maintain strict confidentiality with respect to all aspects of any arbitration commenced pursuant to these Terms and shall not disclose the fact, conduct or outcome of the arbitration to any non-parties or non-participants, except to the extent required by applicable Law or to the extent necessary to recognize, confirm or enforce the final award or decision in the arbitration, without the prior written consent of all parties to the arbitration.</p>

<h3>18.3 Class Action Waiver</h3>

<p>The parties further agree that any arbitration shall be conducted in their individual capacities only and not as a class action or other representative action, and the parties expressly waive their right to file a class action or seek relief on a class basis. YOU AND THE FOUNDATION AGREE THAT EACH MAY BRING CLAIMS AGAINST THE OTHER ONLY IN YOUR OR ITS INDIVIDUAL CAPACITY, AND NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY PURPORTED CLASS OR REPRESENTATIVE PROCEEDING. If any court or arbitrator determines that the class action waiver set forth in this paragraph is void or unenforceable for any reason or that an arbitration can proceed on a class basis, then the arbitration provision set forth above shall be deemed null and void in its entirety and the parties shall be deemed to have not agreed to arbitrate disputes.</p>

<p>4-exception-litigation of Intellectual Property and Small Court Claims

Notwithstanding the parties' decision to resolve all disputes through arbitration, either party may bring an action in state or federal court to protect its Intellectual Property Rights. Either party may also seek relief in a small claims court for disputes or claims within the scope of that court's jurisdiction.</p>

<h3>18.5 30-day Right to Opt-Out</h3>

<p>You have the right to opt-out and not be bound by the arbitration and class action waiver provisions set forth above by sending written notice of your decision to opt-out to the following email address:</p>

<p>. Your notice must be sent within 30 days of your first use of the Tools, otherwise you shall be bound to arbitrate disputes in accordance with the terms of those paragraphs. If you opt-out of these arbitration provisions, the Foundation also will not be bound by them.</p>

<h3>18.6 Changes to this Section</h3>

<p>The Foundation will provide 60-days' notice of any changes to this section. Changes will become effective on the 60th day, and will apply prospectively only to any claims arising after the 60th day.</p>

<p>These Terms and the relationship between you and the Foundation shall be governed by the laws of Panama, without regard to conflict of law provisions.</p>

<p>For any dispute not subject to arbitration you and The Foundation agree to submit to the exclusive jurisdiction of the courts with seat in the city of Panama, Panama. You further agree to accept service of process by mail, and hereby waive any and all jurisdictional and venue defenses otherwise available.</p>

<h2>19. General Information</h2>

<h3>19.1 Entire Agreement</h3>

<p>These Terms (and any additional terms, rules and conditions of participation that the Foundation or the DAO may post on the Site or on the Tools) constitute the entire agreement between you and the Foundation with respect to the Tools and supersedes any prior agreements, oral or written, between you and the Foundation. In the event of a conflict between these Terms and the additional terms, rules and conditions of participation, the latter will prevail over the Terms to the extent of the conflict.</p>

<h3>19.2 Waiver and Severability of Terms</h3>

<p>The failure of the Foundation or the DAO to exercise or enforce any right or provision of the Terms shall not constitute a waiver of such right or provision. If any provision of the Terms is found by an arbitrator or court of competent jurisdiction to be invalid, the parties nevertheless agree that the arbitrator or court should endeavor to give effect to the parties' intentions as reflected in the provision, and the other provisions of the Terms remain in full force and effect.</p>

<h3>19.3 Statute of Limitations</h3>

<p>You agree that regardless of any statute or law to the contrary, any claim or cause of action arising out of or related to the use of the Site, the Tools or the Terms must be filed within one (1) year after such claim or cause of action arose or be forever barred.</p>

<h3>19.4 Section Titles</h3>

<p>The section titles in the Terms are for convenience only and have no legal or contractual effect.</p>

<h3>19.5 Communications</h3>

<p>Users with questions, complaints or claims with respect to the Site or the Tools may contact us using the relevant contact information set forth above and at</p>

<p>.</p>

<h2>20. Definitions</h2>

<p>The following definitions shall apply only to Section 13 of the Terms:</p>

<p>"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."</p>

<p>"Contributor" shall mean the Foundation and/or any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p>

<p>"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p>

<p>"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p>

<p>"License" shall mean the terms and conditions for the use, reproduction, and distribution of the open source, as defined by Section 13.</p>

<p>"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p>

<p>"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p>

<p>"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p>

<p>"Work" shall mean the work of authorship of the Tools, made available under the License, as indicated by a copyright notice that is included in or attached to the Work.</p>

# End of the information extracted from the URL: https://decentraland.org/terms

# Start of the information extracted from the URL: https://decentraland.org/content

<title>Content Policy</title>

<h1>Content Policy</h1>

<h2>1. Definitions</h2>

<strong>"Content"</strong>

<p>shall mean any work of authorship, creative works, graphics, images, textures, photos, logos, video, audio, text and interactive features, including without limitation NFTs, submitted by the Users of Decentraland.</p>

<strong>"Intellectual Property Rights"</strong>

<p>shall mean rights in, arising out of, or associated with intellectual property in any jurisdiction, including without limitation rights in or arising out of, or associated with (1) copyrights, mask work rights, and other rights in published and unpublished works of authorship, including without limitation computer programs, databases, graphics, user interfaces, and similar works; (2) patents, design rights, and other rights in inventions and discoveries, including without limitation articles of manufacture, business methods, compositions of matter, improvements, machines, methods, and processes; (3) trademarks, service marks, trade dress and other logos and similar indications of origin of, or association with, a group, business, good, product, or service; (4) trade secrets and other information that is not generally known or readily ascertainable by third parties through proper means, whether tangible or intangible, including without limitation algorithms, customer lists, ideas, designs, formulas, know-how, source code, methods, processes, programs, prototypes, systems, and techniques; (5) a person's name, voice, signature, photograph, or likeness, including without limitation rights of personality, privacy, and publicity; (6) attribution and integrity and other so-called moral rights of an author; (7) internet domain names; (8) data and databases; and (9) similar proprietary rights arising under the laws of any jurisdiction</p>

<strong>"NFT"</strong>

<p>means non-fungible token, including, LAND, Wearables and any other kind of NFTs available in Decentraland. All NFTs must comply with this Content Policy in accordance with section 12.4 of the Terms of Use.</p>

<h2>2. Prohibited Content</h2>

<p>All Content uploaded, posted, created, displayed, transmitted or made available by the User through the Tools must not include:</p>

<p>2.1. Content involving illegality, such as piracy, criminal activity, terrorism, obscenity, child pornography, gambling (subject to Section 3 below), and illegal drug use.</p>

<p>2.2. Content infringing third party Intellectual Property Rights.</p>

<p>2.3. Cruel or hateful Content that could harm, harass, promote or condone violence against, or that is primarily intended to incite hatred of, animals, or individuals or groups based on race or ethnic origin, religion, nationality, disability, gender, age, veteran status, or sexual orientation/gender identity.</p>

<p>2.4. Content that is libelous, false, inaccurate, misleading, or invades another person's privacy.</p>

<p>2.5. Content that breaches the Privacy Policy or applicable data privacy laws.</p>

<p>2.6. Content that promotes or could be construed as primarily intended to evade the limitations above.</p>

<h2>3. Gambling</h2>

<p>If your Content involves gambling, the following shall apply: (i) if you reside in a jurisdiction which requires a license for online gambling, you must obtain such license prior to making your Content available; (ii) you must be in full compliance with the regulations of your country of residence; (iii) you must geo-block your Content for IPs from jurisdictions where online gambling is banned (including, without limitation, the United States of America, South Korea and China) and (iv) you must include in the terms and conditions of use of your Content (if any) a release from liability in favor of the Foundation and the DAO to the fullest extent allowed by applicable law vis a vis you and the users of your Content.</p>

<h2>4. Breaches of this Policy</h2>

<p>Any Content in infringement of Section 2, may be blocked and upon blocking shall not be available to other users of the Tools. Moreover, infringing Content may result in suspension of the Account, court orders, civil actions, injunctions, criminal prosecutions and other legal consequences brought by the Foundation, the DAO or third parties against the creator, distributor and/or user of said infringing Content. The User's Account may also be terminated in accordance with Section 15 of the Terms of Use.</p>

<h2>5. Age-Restricted Content</h2>

<p>Any Content which qualifies as (i) intensely violent or graphic, (ii) gambling or (ii) sexually explicit, shall only be available to people aged 18 or older. If you upload, post, create, display, transmit or make available such Content on the Tools, you must provide sufficient warning as to this restriction. Failure to do so may result in termination of your Account pursuant to Section 15 of the Terms.</p>

<h2>6. User Representations and Warranties</h2>

<p>You represent and warrant that at any time you submit Content, you are at least the age of majority in the jurisdiction in which you reside and are the parent or legal guardian, or have all proper consents from the parent or legal guardian, of any minor who is depicted in or contributed to any Content you submit, and that, as to that Content, (a) you are the sole author and owner of the Intellectual Property Rights to such Content, or you have a lawful right to submit the Content, all without any obligation to obtain consent of any third party and without creating any obligation or liability for the Foundation; (b) the Content is accurate; (c) the Content does not and will not infringe any Intellectual Property Right of any third party; and (d) the User Content will not violate the Terms or this Content Policy, or cause injury or harm to any person.</p>

<p>You expressly acknowledge and accept that the Content you submit will be accessible to and viewable by other users and waive any claim with regards to the Foundation, its directors, officers, employees and affiliates in connection with said third party access. You can withdraw your Content at any time you wish.</p>

<p>Please remember that the Content that you submit will be accessible to and viewable by other users. Except as may be required to register and/or maintain your Account, do not submit personally identifiable information (e.g. first and last name together, password, phone number, address, credit or debit card number, medical information, e-mail address, or other contact information) on the Tools.</p>

<p>By submitting, posting or displaying content, and or through Decentraland and/or the Marketplace, you grant us a worldwide, non-exclusive, royalty-free perpetual, irrevocable, transferable right and license (with the right to sublicense) to use, copy, reproduce, process, adapt, modify, publish, transmit, display, develop, improve, distribute such Content, promote Decentraland, activities, Events, in any and all media or distribution methods (now known or later developed). You further grant Decentraland, the DAO and/or the Foundation, the right to use your name and trademarks, if any, in connection with our use of your Content available at the Platform and/or the Marketplace, from time to time.</p>

<h2>7. Storage</h2>

<p>You acknowledge that due to the decentralized nature of Decentraland and of the blockchain technology, all Content and information submitted by you is not stored in a centralized server, but in several decentralized nodes (the "Nodes"). Thus, the Foundation or the DAO are not liable for any loss of content or information.</p>

<p>The Nodes recognize and accept that in the event of any court order relating to the blocking, suspension or deletion of any Content, they will abide by any such court order.</p>

<h2>8. Limitations to Liability</h2>

<p>The Foundation, its officers, employees, and the DAO are not responsible or liable for the Content, conduct, or services of users or third parties. The Foundation, its officers, employees and the DAO do not control or endorse the Content of communications between users or users' interactions with each other or the Tools.</p>

<p>You acknowledge that you will be exposed to various aspects of the Tools involving the conduct, Content, and services of users, and that the Foundation does not control and is not responsible or liable for the quality, safety, legality, truthfulness or accuracy of any such user conduct, Content or user services. You acknowledge that the Foundation does not guarantee the accuracy of information submitted by any user of the Tools, nor any identity information about any user. Your interactions with other users and your use of Content are entirely at your own risk. The Foundation has no obligation to become involved in any dispute that you may have or claim to have with one or more users of the Tools, or in any manner in any resolution thereof.</p>

<p>THE TOOLS MAY CONTAIN LINKS TO OR OTHERWISE ALLOW CONNECTIONS TO THIRD-PARTY WEBSITES, SERVERS, AND ONLINE SERVICES OR ENVIRONMENTS THAT ARE NOT OWNED OR CONTROLLED BY THE FOUNDATION. THE FOUNDATION, ITS OFFICERS, EMPLOYEES AND THE DAO ARE NOT RESPONSIBLE OR LIABLE FOR THE CONTENT, POLICIES OR PRACTICES OF ANY THIRD-PARTY WEBSITES, SERVERS OR ONLINE SERVICES OR ENVIRONMENTS. Please consult any applicable terms of use and privacy policies provided by the third party for such websites, servers or online services or environments.</p>

<p>You acknowledge that the Content of the Tools is provided or made available to you under license from independent Content Providers, including other users of the Tools ("Content Providers"). You acknowledge and agree that except as expressly provided in this Agreement, the Intellectual Property Rights of other Content Providers in their respective Content are not licensed to you by your mere use of the Tools. You must obtain from the applicable Content Providers any necessary license rights in Content that you desire to use or access.</p>

<p>You copy and use Content at your own risk. You are solely responsible and liable for your use, reproduction, distribution, modification, display, or performance of any Content in violation of any Intellectual Property Rights. You agree that the Foundation will have no liability for, and you agree to defend, indemnify, and hold the Foundation harmless from, any claims, losses or damages arising out of or in connection with your use, reproduction, distribution, modification, display, or performance of any Content.</p>

<h2>9. Changes to this Policy.</h2>

<p>The DAO may change this Content Policy from time to time. All users have the obligation to be aware of the updated versions of this Policy.</p>

# End of the information extracted from the URL: https://decentraland.org/content

# Start of the information extracted from the URL: https://decentraland.org/ethics

<title>Code of Ethics</title>

<h1>Code of Ethics</h1>

<h2>1. DECENTRALAND’S CODE OF ETHICS</h2>

<p>This Code of Ethics applies to Decentraland and all of its affiliates or subsidiaries (the “Decentraland Group”). Our Values of integrity, responsibility, respect and pioneering are the simplest statement of who we are. They govern everything we do. Our reputation as a company that the users can trust is our most valuable asset, and it is up to all of us to make sure that we continually earn that trust. All of our communications and other interactions with our users should increase their trust in us, that’s why we publish this externally and expect all others who work with us to set themselves equally high principles.</p>

<h2>2. POLICIES AND PRINCIPLES</h2>

<p>These Policies and Principles we are talking about the ethical behaviors and guides that we all need to follow when working for Decentraland. They are mandatory for us, but we also publish them externally on our website in support of transparency. Compliance with these principles is an essential part of the way we conduct business. The Decentraland Compliance Team is responsible for guarantying the application of these Policies and Principles throughout the company. Keeping in mind the following Policies and Principles will help us to achieve the highest standards of compliance.</p>

<h3>2.1 Standard of Conduct</h3>

<p>We conduct all our operations and transactions with honesty, integrity and openness, and with respect for the human rights and interests of our employees and of all of those with whom we interact.</p>

<h3>2.2 Compliance with Law</h3>

<p>Decentraland Group and its employees are required to know, respect and comply the laws and regulations of the countries in which we operate. Every employee shall act ethically and in compliance with applicable laws and regulations while carrying out the Decentraland's business. Decentraland has a zero tolerance policy for violations of applicable laws.</p>

<h3>2.3 Financial Recordkeeping/Management</h3>

<p>All relevant transactions must be approved by the Compliance Team before being implemented. The accounting and cash handling procedures must be followed in order to avoid operational and legal risks.</p>

<h3>2.4 Reporting</h3>

<p>Any breaches of this Code must be reported to the Compliance Team, to the email account</p>

<p>. Provision has been made for employees to be able to report in confidence and no employee will suffer as a consequence of doing so no matter who he/she is reporting (even a superior). Decentraland aims to encourage employees to report potential breaches of the Codes of Ethics, not only once the act is committed.</p>

<h3>2.5 Monitoring and controlling</h3>

<p>Although we respect your privacy please be aware that for personal business you should use your personal devices. Decentraland will monitor and control the use of Decentraland’s property, which includes, but is not limited to, computer, tablet, cell phone and email accounts provided to you. All devices provided by Decentraland have a monitoring software to prevent the commission of illegal acts. Random checks will be made on all Decentraland’s devices</p>

<h3>2.6 Employees</h3>

<p>Decentraland is committed to a working environment that promotes diversity and equal opportunity and where there is mutual trust, respect for human rights and no discrimination. We are committed to working with employees to develop and enhance each individual’s skills and capabilities, respect them, and maintain good communication with them. This Code of Ethics will be annexed to all employments agreements.</p>

<h3>2.7 Equal Opportunity Employment</h3>

<p>Employment here is based exclusively upon individual merit and qualifications directly related to professional competence in the area where each employee is specialized. We strictly prohibit unlawful discrimination, harassment, bullying in any form – verbal, physical, or visual or any other characteristics protected by law (such as race, sex, marital status, medical condition, etc.). We also make all reasonable accommodations to meet our obligations under laws protecting the rights of the disabled.</p>

<h3>2.8 Health and Safety in the Workplace</h3>

<p>We are committed to a safe work environment, and we strongly procure full compliance with health and safety regulation. All employees will be receive training concerning safety procedures and fire drills. Furthermore, we encourage a healthy diet for our employees and we make available fruit and vegetables for snacking in the workplace.</p>

<h3>2.9 No Violence</h3>

<p>We are committed to a violence-free work environment, and we have zero tolerance for any level of violence, harassment or any other inappropriate behavior in the workplace.</p>

<h3>2.10 Drugs and Alcohol</h3>

<p>Substance abuse is incompatible with the health and safety of our employees, and we don’t permit it. Consumption of alcohol is banned at our offices, except for special events, where all employees should use a good judgment and never drink in a way that leads to impaired performance or inappropriate behavior, endangers the safety of others, or violates the law. Illegal drugs in our offices are strictly prohibited.</p>

<h3>2.11 The Environment</h3>

<p>Decentraland is committed to promote environmental care, increase understanding of environmental issues and disseminate good practice inside the company with recycling procedures.</p>

<h3>2.12 Records and Reports</h3>

<p>Open and effective cooperation requires correct and truthful reporting. This applies equally to the relationship with shareholders, employees, customers and the Decentraland Group as well as with the public and any governmental offices such as, for instance, supervisory authorities.</p>

<h3>2.13 Confidentiality</h3>

<p>Confidentiality must be maintained with regard to internal corporate matters which have not been made known to the public. We respect and protect the data privacy and security of the information that we received from any third party.</p>

<h2>3. THE COMPLIANCE TEAM</h2>

<p>The Compliance Team has a duty of supervision. The members of the Compliance Team must be diligent, proactive and ethical individuals whose role is to make sure that the Company is conducting its business in full compliance with this Code of Ethics and the applicable law.</p>

<h2>4. IMPLEMENTATION – TRAINING PROCEDURES</h2>

<p>Decentraland shall conduct regular training procedures to make sure that everyone knows and understands the Code of Ethics. Our employees are the face of our Company and we train them to respect the Company’s principles and standards not only while working but also in their own life.</p>

<h2>5. TREATMENT OF BUSINESS PARTNERS AND THIRD PARTIES/CONFLICTS OF INTEREST</h2>

<h3>5.1 Shareholders</h3>

<p>Decentraland will conduct its operations in accordance with internationally accepted principles of good corporate governance. We will provide timely, regular and reliable information on our activities, structure, financial situation and performance to all shareholders anytime they need it and also be in accordance between all the companies in the Decentraland Group.</p>

<h3>5.2 Competition</h3>

<p>Decentraland companies and employees will conduct their operations in accordance with the principles of fair competition and all applicable regulations. Every employee must comply with the laws of fair competition. Employees shall seek guidance from the legal department of their particular company within the Decentraland Group when in doubt.</p>

<h3>5.3 Business Integrity – Gifts</h3>

<p>Decentraland does not give or receive, whether directly or indirectly, bribes or other improper payments or advantages for business or financial gain. One of our principles is to avoid corruption, that’s why no employee may offer, give or receive any gift or payment which is, or may be construed as being, a bribe. Any demand for, or offer of, a bribe must be rejected immediately and reported to the Compliance Team. In cases of doubt, the recipient should be asked to obtain prior permission from the Compliance Team.</p>

<h3>5.4 Conflicts of Interests</h3>

<p>All employees and service providers working for Decentraland are expected to avoid personal activities and financial interests which could conflict with their responsibilities to the Company. No employee may directly or indirectly, neither in his/her country nor abroad, offer or grant unlawful benefits in connection with his/her business dealings.</p>

<h3>5.5 Public Activities</h3>

<p>Decentraland will co-operate with governments and other organizations, both directly and through bodies such as trade associations, in the development of proposed legislation and other regulations which may affect legitimate business interests.</p>

<h3>5.6 Contracts</h3>

<p>Inclusion of the Code of Ethics as an annex to all contracts of the company will be mandatory. All new contractors and partners will need to sign statement acknowledging and accepting the contents of the Code of Ethics to be sure that they know and respect our standards.</p>

<h3>5.7 Know your client</h3>

<p>Before entering into any contract a Know Your Client form should be completed by the relevant party. This should provide for the identification of directors, shareholders and final economic beneficiaries and this allows the company to have a real record of who are we dealing with.</p>

<h2>6. BASIC RULES OF CONDUCTS ON RISK MATTERS</h2>

<p>Decentraland and its employees will ensure that Decentraland does not receive the proceeds of criminal activities. All employees must be alert to the suspicious transactions such as when third parties (i) make or ask for payments in a form outside the ordinary course of business; (ii) split payments from several companies to our company; (iii) make or ask for payments in cash when they are usually made by check or wire transfer; or (iv) make or ask for payments in advance when are not customary or required by contract.</p>

<p>Employees involved in engaging or contracting with third parties such as new clients or investors must:</p>

<p>Ensure that the third parties in question are subject to screening to assess their identity and legitimacy before contracts are signed or transactions occur;

Carefully consider if it is necessary to consult with the Company’s Compliance Team before deciding whether to do business with the third party.

Certain decisions that could involve risks pursuant to the risk matters mentioned should be backed by legal opinions issued by attorneys of the relevant jurisdiction.</p>

<h2>7. BREACHES TO THE CODE</h2>

<p>Breaching the Code of Ethics could have very serious consequences for Decentraland and for individuals involved. Where illegal conduct is involved, these could include significant fines for Decentraland, imprisonment for individuals and significant damage to our reputation.</p>

<p>Regardless of the sanctions imposed by the law, any employee guilty of a violation of the law or of this Code of Ethics while carrying out the Decentraland Group’s business will be subject to disciplinary measures up to and including termination when applicable.</p>

# End of the information extracted from the URL: https://decentraland.org/terms

# Start of the information extracted from the URL: https://dao.decentraland.org

<title>Decentraland DAO</title>

<h1>Decentraland DAO</h1>

<h3>The virtual world in your hands</h3>

<p>By signing up you are subscribing to news about Decentraland DAO.</p>

<h2>What is the Decentraland DAO?</h2>

<p>DAO stands for "Decentralized Autonomous Organization". The Decentraland DAO owns the most important smart contracts and assets that make up Decentraland – the LAND Contract, the Estates Contract, Wearables, Content Servers and the Marketplace. It also owns a substantial purse of MANA which allows it to be truly autonomous as well as subsidize various operations and initiatives throughout Decentraland.</p>

<h2>Why has the DAO been created? How is it relevant to me?</h2>

<p>Decentraland is the first fully decentralized virtual world. It was always part of the original vision to hand over control to the people who create and play in this virtual space. In short – you, the users. Through the DAO, you are in control of the policies created to determine how the world behaves: for example, what kinds of wearable items are allowed (or disallowed) after the launch of the DAO, moderation of content, LAND policy and auctions, among others.</p>

<h2>How does the DAO work?</h2>

<p>The community will propose and vote on policy updates, future LAND auctions, whitelisting of NFT contracts to be allowed inside the World, Builder and Marketplace, and whatever the community deems relevant. Voting takes place on the Decentraland DAO's governance interface, powered by Aragon.</p>

<h2>What kinds of things will you get to determine?</h2>

<p>Over the coming year we’ll be scheduling votes to decide on a range of issues, including (but not limited to)</p>

<h2>What is the Decentraland Grants Program?</h2>

<p>Submit your project through the grants program for the DAO to vote. Grantees receive funding, support and help showcasing their initiative.</p>

<h3>What about MANA?</h3>

<p>MANA has already been fully decentralized, in the sense that the private key that controlled its smart contract</p>

<h2>More Info</h2>

<h3>Security Advisory Board? What’s that?</h3>

<p>The DAO is supported by the Security Advisory Board (SAB). The SAB acts as the guarantor of contract security, tasked with the job of providing a swift response to bug reports. The Board will be able to quickly upgrade the smart contract implementation of the LAND and Estate contracts and replace it with a bug-free version upon receiving a responsible disclosure bug report. All contract updates must be unanimous. Comprising 5 members, the Board will be made up of several expert entities or individuals initially chosen by the Decentraland team and later appointed by the community.</p>

<h3>How can SAB members be changed?</h3>

<p>Members can be changed by the Aragon DAO – a vote must be started to remove or install a new member. This is an action that will involve the community using wMANA. A member of the SAB creates a vote for the community to add or remove a member of the SAB and community members use wMANA to cast their vote. "You can</p>

<p>."</p>

<h3>How do I elevate a Vote?</h3>

<p>Initially, until fraud risk is reduced to its minimum extent possible, votes will only be created and scheduled by the Security Advisory Board (SAB).</p>

# End of the information extracted from the URL: https://decentraland.org/terms

# Start of the information extracted from the URL: https://decentraland.org/brand

<title>Terms of Use for Decentraland's Logo and Name</title>

<h1>Terms of Use for Decentraland's Logo and Name</h1>

<p>Terms of Use for Decentraland's Logo and Name

Decentraland is a decentralized virtual world governed by its users and as such strongly supports user generated content (UGC). People may use the Decentraland logo and name in their creations within Decentraland, but must follow the following terms.</p>

<h2>1. Allowable Usage</h2>

<p>Users shall comply with these terms as well as Decentraland's Terms of Use (</p>

<p>) and Content Policy (</p>

<p>) in order to be allowed to use the Decentraland name and logo within Decentraland.</p>

<h2>2. Logo and name ownership</h2>

<p>The Decentraland Foundation is the registered owner of the Decentraland name and logo, acting for the benefit of the DAO. This is because currently the DAO lacks formal legal status.</p>

<h2>3. Wearables and user names in Decentraland</h2>

<p>Users may create wearables and names using the Decentraland logo and name on the Decentraland platform, provided that they don't violate the platform's Content Policy and Terms of Use. As far as the Decentraland Foundation is concerned, you are not prevented from monetizing or obtaining profits from the sale of said wearables or user names. The NFT must be unique in design.</p>

<p>The Decentraland Foundation has the right to deny the use of the Decentraland name and logo at its sole discretion in any case and at any time.</p>

<h2>4. NFTs and other uses outside the Decentraland platform</h2>

<p>The Decentraland Foundation does not authorize the creation of NFTs using the Decentraland name or logo outside the Decentraland platform. The use of the Decentraland name or logo is not allowed in other virtual platforms different from Decentraland or in the real world.</p>

<h2>5. Disclaimer</h2>

<p>In all written materials relating to your product, including websites, publications, etc. it must be made clear that you do not have any kind of affiliation, business partnerships or other official association with Decentraland, the DAO or the Decentraland Foundation.</p>

<h2>6. Press Releases</h2>

<p>Any press releases that you distribute through social networks, media or news services should clearly state that you do not have any kind of affiliation, business partnerships or other official association with Decentraland, the DAO or the Decentraland Foundation.</p>

<h2>7. Advertisements</h2>

<p>Any paid advertisement that uses the Decentraland name or logo is generally not allowed and must first be approved by the Decentraland Foundation or the DAO. To seek such approval, you can send an email to:</p>

<p>or through a DAO proposal.</p>

<h2>8. The Name "Decentraland"</h2>

<p>Subject to these terms you can use the name "Decentraland" to promote your game(s) or wearables as long as it doesn't confuse consumers and as long as it is not used as the name of an app or any kind of merchandise or product. In other words, you can refer to "Decentraland" as the name of the platform, and you can use the name to show your interest in or affection for the Decentraland platform.</p>

<h2>9. The Logo "Decentraland"</h2>

<p>Subject to these terms, you are only allowed to use the logo design that is available at the following link</p>

<p>. The Decentraland Foundation or the DAO may alter the form of this design from time to time. You are allowed to resize the logo as long as you do not modify the proportions. But otherwise, you cannot modify the logo design in any way and must abide by these terms.</p>

<h2>10. Additional Rules</h2>

<p>THE USE OF DECENTRALAND LOGO AND NAME CANNOT BE ASSOCIATED WITH ANYTHING THAT VIOLATES THE RIGHTS OF OTHER THIRD PARTIES IP, CREATES BRAND CONFUSION, HAS HARMFUL OR OBJECTIONABLE ASPECTS OR DOES NOT COMPLY WITH APPLICABLE LAWS OR ANY OF DECENTRALAND GUIDELINES, TERMS OR RULES. THE DAO AND THE DECENTRALAND FOUNDATION HAVE THE RIGHT TO DECIDE (IN THEIR SOLE DISCRETION) WHETHER THE USE IS ACCEPTABLE.</p>

<p>YOU MUST NOT USE THE DECENTRALAND NAME OR LOGO IN ANY MANNER THAT IS LIKELY TO HAVE AN ADVERSE EFFECT ON THE REPUTATION OF DECENTRALAND (AS THE DAO OR DECENTRALAND FOUNDATION MAY DETERMINE IN THEIR SOLE DISCRETION). YOU MAY NOT USE THE DECENTRALAND NAME OR LOGO IN ANY WAY THAT SUGGESTS THAT YOU ARE AFFILIATED WITH DECENTRALAND, THE DAO OR THE DECENTRALAND FOUNDATION, OR IN ANY WAY THAT SUGGESTS THAT DECENTRALAND, THE DAO OR THE DECENTRALAND FOUNDATION SPONSORS OR ENDORSES YOUR USAGE.</p>

<p>These terms grant you permission to use the Decentraland trademarks only in the ways described above. The Decentraland Foundation or the DAO may withdraw or change this permission at any time for any reason.</p>

<p>Other uses of the Decentraland logo and name require the express approval of the Decentraland Foundation or the DAO.</p>

# End of the information extracted from the URL: https://decentraland.org/brand

# Start of the information extracted from the URL: https://decentraland.org/terms/

<title>Terms of Use</title>

<h1>Terms of Use</h1>

<h2>1. Acceptance of Terms</h2>

<p>The Decentraland Foundation (the "Foundation"), acting for the benefit of the Decentraland community as a whole, holds the intellectual property rights over, and makes available, (a) the DCL Client, the Desktop Client, the SDK 5.0, the Marketplace (</p>

<p>), the Builder, the Blog, Events, Agora, Forum, the Land Manager, the Command Line Interface, DAO, the Developers’ Hub, the Rewards tool which, with any other features, tools and/or materials made available from time to time by the Foundation, are referred to herein as the "Tools" and (b) the website</p>

<p>(the "Site"). Please read these Terms of Use (the "Terms" or "Terms of Use") carefully before using the Tools and the Site. By using or otherwise accessing the Tools and the Site, you: (1) accept and agree to be bound by these Terms; (2) accept that the Tools are still in testing phase and that you use at your own risk, as further explained in Section 2 below; (3) represent that you are old enough to use the Tools and the Site pursuant to Sections 3 and 9 below; (4) consent to the collection, use, disclosure and other handling of information as described in the Privacy Policy, available here</p>

<p>; (5) accept and agree (5.1.) the Content Policy approved by the DAO, available here</p>

<p>, and (5.2.) any additional terms and conditions of participation issued by the Foundation from time to time. If you do not agree to the Terms, then you must not access or use the Tools or the Site.</p>

<p>As per the endowment received, the Foundation makes available the Tools and the Site free of charge in order to allow different interactions with the Decentraland platform ("Decentraland"), a decentralized virtual world. The Foundation does not own or control Decentraland, as ownership and governance is decentralized in the community through the DAO.</p>

<p>Decentraland is governed by a decentralized autonomous organization (the "DAO"). For further information please see</p>

<p>.</p>

<p>The Foundation has no continuing obligation to operate the Tools and the Site and may cease to operate one or more of the Tools in the future, at its exclusive discretion, with no liability whatsoever in connection thereto.</p>

<p>With respect to the source code of the software of the Tools that has been released under an open source license, such software code must be used in accordance with the applicable open source license terms and conditions as described in Section 13 below. Other similar tools might be developed in the future by the community or third parties.</p>

<h2>2. Disclaimer and Modification of Terms of Use</h2>

<p>The Tools are provided on an "as is" and "as available" basis and may contain defects and software bugs. You are advised to safeguard important data, property and content, to use caution, and not to rely in any way on the correct or secure functionality or performance of the Tools.</p>

<p>Except for Section 17, providing for binding arbitration and waiver of class action rights, as detailed in Section 7, the Foundation reserves the right, at the sole discretion of the DAO, to modify or replace the Terms of Use at any time. The most current version of these Terms will be posted on the Site. You shall be responsible for reviewing and becoming familiar with any such modifications. Use of the Tools by you after any modification to the Terms constitutes your acceptance of the Terms of Use as modified.</p>

<h2>3. Eligibility</h2>

<p>You hereby represent and warrant that you are fully able and competent to enter into the terms, conditions, obligations, affirmations, representations and warranties set forth in these Terms and to abide by and comply with these Terms. Decentraland is a global platform and by accessing the Content, the Site or Tools, you are representing and warranting that you are of the legal age of majority in your jurisdiction as is required to access such Tools and Content and enter into arrangements as provided by the Tools. You further represent that you are otherwise legally permitted to use the Tools in your jurisdiction including owning cryptographic tokens, and interacting with the Site, Tools or Content in any way. You further represent that you are responsible for ensuring compliance with the laws of your jurisdiction and acknowledge that the Foundation is not liable for your compliance or failure to comply with such laws. You further represent and warrant that all funds or assets used by you have been lawfully obtained by you in compliance with all applicable laws.</p>

<h2>4. Account Access and Security</h2>

<p>Access to the Tools is provided via a third party private key manager selected by you (e.g., a Web3 Provider, Metamask, a USB interface for Ledger Wallet, the Mist browser, or other). Security and secure access to each account in the Tools is provided solely by the third party private key manager you select to administer your private key. You and the third party private key manager you select are entirely responsible for security related to access of the Tools and all information provided by you to such third party provider (including without limitation, email or phone number). The DAO and/or the Foundation bear no responsibility for any breach of security or unauthorized access to your account (the "Account"). You are advised to: (a) avoid any use of the same password with your selected third party private key manager that you have ever used outside of the third party private key manager; and (b) keep your password and any related secret information secure and confidential and do not share them with anyone else.</p>

<p>You are solely responsible for all activities conducted through your Account whether or not you authorize the activity. In the event that fraud, illegality or other conduct that violates this Agreement is discovered or reported (whether by you or someone else) that is connected with your Account, the DAO may suspend or block your Account (or Accounts) as described in Section 15.</p>

<p>You are solely responsible for maintaining the confidentiality of your password and for restricting access to your devices. You are solely responsible for any harm resulting from your disclosure, or authorization of the disclosure, of your password or from any person's use of your password to gain access to your Account. You acknowledge that in the event of any unauthorized use of or access to your Account, password or other breach of security, you accept that due to the nature of the Tools and the platform itself, the DAO and/or the Foundation will be unable to remedy any issues that arise.</p>

<p>The DAO and/or the Foundation will not be liable for any loss or damage (of any kind and under any legal theory) to you or any third party arising from your inability or failure for any reason to comply with any of the foregoing obligations, or for any reason whatsoever, except fraud on our part.</p>

<p>The DAO and/or the Foundation cannot and will not be liable for any loss or damage arising from your sharing or other loss of your private key or related information, or any other damage or loss arising from unauthorized access to your Account.</p>

<p>Transactions that take place using the Tools are confirmed and managed via the Ethereum blockchain. You understand that your Ethereum public address will be made publicly visible whenever you engage in a transaction using the Tools.</p>

<p>If you reside in a jurisdiction where online gambling is banned (such as the United States of America, China and South Korea) you must refrain from accessing Content which includes online gambling.</p>

<h2>5. Representations and Risks</h2>

<h3>5.1 Disclaimer</h3>

<p>You acknowledge and agree that your use of the Tools and the Site is at your sole risk. The Tools and the Site are provided on an "AS IS" and "AS AVAILABLE" basis, without warranties of any kind, either express or implied, including, without limitation, implied warranties of merchantability, fitness for a particular purpose or non-infringement. You acknowledge and agree that the DAO and/or the Foundation has no obligation to take any action regarding: which users gain access to or use the Tools; what effects the Tools may have on you; the LAND you own; how you may interpret or use the Tools; or what actions you may take or fail to take as a result of having been exposed to the Tools. You release the DAO and/or the Foundation from all liability for your inability to access to the Site, Tools or any Content therein. The DAO and/or the Foundation is not and cannot be responsible for and makes no representations, warranties or covenants concerning any Content contained in or accessed through the Site, Tools, and the DAO and/or the Foundation will not be responsible or liable for the accuracy, copyright compliance, legality or decency of material contained in or accessed through the Tools. The Content Policy over Decentraland is established and enforced exclusively by the Decentraland community through the DAO.</p>

<h3>5.2 Sophistication and Risk of Cryptographic Systems</h3>

<p>By utilizing the Tools, the Site or interacting with the Tools or platform or anything contained or provided therein in any way, you represent that you understand the inherent risks associated with cryptographic systems; and warrant that you have an understanding of the usage, risks, potential bugs based on novel technology (where applicable), and intricacies of native cryptographic tokens, like Ether (ETH) and Bitcoin (BTC), smart contract based tokens such as those that follow the Ethereum Token Standard (</p>

<p>), MANA (the ERC-20 token that allows users to claim parcels of LAND and trade with each other within Decentraland), LAND (the ERC-721 token, associating each LAND parcel's x and y coordinates with a definition of a parcel's 3D scene that makes up the larger metaverse) and blockchain-based software systems.</p>

<h3>5.3 Risk of Regulatory Actions in One or More Jurisdictions</h3>

<p>The Foundation, MANA, LAND and ETH could be impacted by one or more regulatory inquiries or regulatory action, which could impede or limit your ability to access or use the Tools or Ethereum blockchain.</p>

<h3>5.4 Risk of Weaknesses or Exploits in the Field of Cryptography</h3>

<p>You acknowledge and agree that cryptography is a progressing field. Advances in code cracking or technical advances such as the development of quantum computers may present risks to smart contracts, cryptocurrencies and the Tools, which could result in the theft or loss of your cryptographic tokens or property, among other potential consequences. By using the Tools you acknowledge and agree to undertake these risks.</p>

<h3>5.5 Use of Crypto Assets</h3>

<p>Some Tools allow the use of MANA, ETH or other similar blockchain technologies. You acknowledge and agree that MANA, Ether and blockchain technologies and associated assets, and other assets are highly volatile due to many factors including but not limited to popularity, adoption, speculation, regulation, technology and security risks. You also acknowledge and agree that the cost of transacting on such technologies is variable and may increase at any time causing impact to any activities taking place on the Ethereum blockchain. The Foundation does not invite or make any offer to acquire, purchase, sell, transfer or otherwise deal in any crypto asset. Third parties may provide services involving the acquisition, purchase, sale, transfer or exchange of crypto-assets; the Foundation does not provide any such service and does not undertake any liability in connection thereto. You acknowledge and agree these risks and represent that the Foundation cannot be held liable for changes and fluctuations in value or increased costs.</p>

<p>There are risks associated with using an Internet-based currency, including, but not limited to, the risk of hardware, software and Internet connections failure or problems, the risk of malicious software introduction, and the risk that third parties may obtain unauthorized access to information stored within your wallet. You accept and acknowledge that the Foundation will not be responsible for any communication failures, disruptions, errors, distortions or delays you may experience when using the Ethereum network or any sidechain or similar device for processing transactions, however caused.</p>

<h3>5.6 Application Security</h3>

<p>You acknowledge and agree that the Site, the Tools and related applications are software code and are subject to flaws and acknowledge that you are solely responsible for evaluating any smart contract, code provided by the Site, Tools or Content and the trustworthiness of any third-party websites, products, smart-contracts, or Content you access or use through the Tools. You further expressly acknowledge and agree that Ethereum applications can be written maliciously or negligently, that the Foundation cannot be held liable for your interaction with such applications and that such applications may cause the loss of property or even identity. This warning and others later provided by the Foundation in no way evidence or represent an on-going duty to alert you to all of the potential risks of utilizing the Tools or the Site.</p>

<h3>5.7 Third Party Providers</h3>

<p>The Foundation and/or the DAO, neither own nor control MetaMask, Ledger Wallet, the Mist browser, Google Chrome, the Ethereum network, any Web3 Provider or any other third party site, product, or service that you might access, visit, or use for the purpose of enabling you to use the various features of the Tools. The Foundation and/or the DAO shall not be liable for the acts or omissions of any such third parties, nor shall the Foundation and/or the DAO be liable for any damage that you may suffer as a result of your transactions or any other interaction with any such third parties.</p>

<h3>5.8 Taxes</h3>

<p>You are solely responsible for determining what, if any, Taxes apply to your LAND parcel related transactions, and any other transaction conducted by you. The Foundation does not, and will not, have any insight into or control over any transactions conducted by you in Decentraland, and thus is not responsible for determining the Taxes that apply to your transactions entered through the Tools or otherwise involving any LAND parcel, or any other related transaction, and is not to act as a withholding Tax agent in any circumstances whatsoever.</p>

<h3>5.9 Uses of the Tools</h3>

<p>You acknowledge and agree that the Tools do not store, send, or receive LAND parcels. This is because LAND parcels exist only by virtue of the ownership record maintained on the Tools' supporting blockchain in the Ethereum network. Any transfer of a LAND parcel occurs within the supporting blockchain in the Ethereum network, and not within the Tools.</p>

<h3>5.10 Risks of Changes to Ethereum Platform</h3>

<p>Upgrades by Ethereum to the Ethereum platform, a hard fork in the Ethereum platform, or a change in how transactions are confirmed on the Ethereum platform may have unintended, adverse effects on all blockchains using the ERC-20 standard, ERC-721 standard, or any other future Ethereum standard.</p>

<h3>5.11 Wearables Curation Committee</h3>

<p>You acknowledge that the Wearables Curation Committee or any other committee may restrict or ban certain contents, polls or decisions. You acknowledge you will be exclusively liable for any content you make available on the platform. Neither the DAO Committee nor the Wearables Curation Committee has any obligation with respect to the content.</p>

<h2>6. Transactions and Feeds</h2>

<p>6.1 If you elect to purchase, trade, or sell a LAND parcel, Avatar, wearable or other non-fungible token ("NFT") with or from other users via the Tools, any financial transaction that you engage in will be conducted solely through the Ethereum network, Layer 2 solutions or other sidechains via Web3 providers. The Foundation will have no insight into or control over these payments or transactions, nor does it have the ability to reverse any transactions. With that in mind, the Foundation will have no liability to you or to any third party for any claims or damages that may arise as a result of any transactions that you engage in via the Tools, or any other transactions that you conduct via the Ethereum network, and other networks, sidechains, Layer 2 solutions or Web3 providers.</p>

<p>6.2 Ethereum requires the payment of a transaction fee (a "Gas Fee") for every transaction that occurs on the Ethereum network. The Gas Fee funds the network of computers that run the decentralized Ethereum network. This means that you will need to pay a Gas Fee for each transaction that occurs via the Tools. You accept that the payment of the Gas Fee is inherent to the nature of the Ethereum network and alien to the Foundation or due to the use of the Tools.</p>

<p>6.3 As per a DAO’s decision, transactions taking place in the Marketplace will be subject to a 2.5% MANA cost (the "Marketplace Transaction Cost") calculated over the amount of MANA involved in such transactions. Such MANA cost will be borne by the participants to the transaction. All MANA spent under the Marketplace Transaction Cost will be transferred to the treasury of the DAO. Please be aware that transactions in third-party NFT marketplaces (inside or outside Decentraland) may be subject to the fees charged by said third-party marketplaces as per the respective terms and conditions. The Foundation and/or the DAO shall have no liability whatsoever with regards to transactions conducted in third-party marketplaces.</p>

<p>6.4 You will be solely responsible to pay any and all sales, use, value-added and other taxes, duties, and assessments (except taxes that may apply on our net income) now or hereafter claimed or imposed by any governmental authority (collectively, "Taxes") associated with your use of the Tools (including, without limitation, any Taxes that may become payable as the result of your ownership, or transfer of any NFT and any activity conducted by you in Decentraland). Except for income taxes levied on the Foundation, you: (i) will pay or reimburse the Foundation for all national, federal, state, local or other taxes and assessments of any jurisdiction, including value added taxes and taxes as required by international tax treaties, customs or other import or export taxes, and amounts levied in lieu thereof based on charges set, services performed or payments made hereunder, as are now or hereafter may be imposed under the authority of any national, state, local or any other taxing jurisdiction; and (ii) shall not be entitled to deduct the amount of any such taxes, duties or assessments from payments made to the Foundation pursuant to these Terms.</p>

<h2>7. Changes</h2>

<p>The DAO may approve changes to the Terms from time to time. When the DAO approves changes, the Foundation will make available the updated Terms through the Site and update the "Last Updated" date at the beginning of these Terms accordingly. Please check these Terms periodically for changes. Any changes to the Terms will apply on the date that they are made, and your continued access to or use of the Tools or the Site after the Terms have been updated will constitute your binding acceptance of the updates. If you do not agree to any revised Terms, you must not access or use the Tools or the Site.</p>

<h2>8. Children</h2>

<p>You affirm that you are over the age of 13, as the Tools are not intended for children under ## 13. IF YOU ARE 13 OR OLDER BUT UNDER THE AGE OF 18, OR THE LEGAL AGE OF MAJORITY WHERE YOU RESIDE IF THAT JURISDICTION HAS AN OLDER AGE OF MAJORITY, THEN YOU AGREE TO REVIEW THESE TERMS WITH YOUR PARENT OR GUARDIAN TO MAKE SURE THAT BOTH YOU AND YOUR PARENT OR GUARDIAN UNDERSTAND AND AGREE TO THESE TERMS. YOU AGREE TO HAVE YOUR PARENT OR GUARDIAN REVIEW AND ACCEPT THESE TERMS ON YOUR BEHALF. IF YOU ARE A PARENT OR GUARDIAN AGREEING TO THE TERMS FOR THE BENEFIT OF A CHILD OVER 13, THEN YOU AGREE TO AND ACCEPT FULL RESPONSIBILITY FOR THAT CHILD'S USE OF THE TOOLS OR THE SITE, INCLUDING ALL FINANCIAL CHARGES AND LEGAL LIABILITY THAT HE OR SHE MAY INCUR.</p>

<p>TO ACCESS CERTAIN CONTENTS, YOU WILL NEED TO HAVE A MINIMUM AGE AS DETAILED IN THE CONTENT POLICY.</p>

<p>IN ALL CASES INVOLVING ONLINE GAMBLING YOU MUST BE OLDER THAN 18 YEARS (OR THE MINIMUM LEGAL AGE IN YOUR PLACE OF RESIDENCE).</p>

<h2>9. Indemnity</h2>

<p>You shall release and indemnify, defend and hold harmless the Foundation, the DAO, and its officers, directors, employees and representatives from and against any and all losses, liabilities, expenses, damages, costs (including attorneys' fees and court costs) claims or actions of any kind whatsoever arising or resulting from your use of the Tools or the Site, your violation of these Terms of Use, and any of your acts or omissions. The Foundation reserves the right, at its own expense, to assume exclusive defense and control of any matter otherwise subject to indemnification by you and, in such case, you agree to cooperate with the Foundation in the defense of such matter.</p>

<h2>10. Disclaimers</h2>

<p>10.1 YOU ACKNOWLEDGE AND AGREE THAT YOU ASSUME FULL RESPONSIBILITY FOR YOUR USE OF THE SITE AND TOOLS. YOU ACKNOWLEDGE AND AGREE THAT ANY INFORMATION YOU SEND OR RECEIVE DURING YOUR USE OF THE SITE AND TOOLS MAY NOT BE SECURE AND MAY BE INTERCEPTED OR LATER ACQUIRED BY UNAUTHORIZED PARTIES. YOU ACKNOWLEDGE AND AGREE THAT YOUR USE OF THE SITE AND TOOLS IS AT YOUR OWN RISK. YOU ACKNOWLEDGE AND AGREE THAT THE TOOLS ARE PROVIDED "AS IS" AND "AS AVAILABLE" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR IMPLIED. RECOGNIZING SUCH, YOU ACKNOWLEDGE AND AGREE THAT, TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, NEITHER THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES, THE DAO, NOR ITS SUPPLIERS OR LICENSORS WILL BE LIABLE TO YOU FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY OR OTHER DAMAGES OF ANY KIND, INCLUDING WITHOUT LIMITATION DAMAGES FOR LOSS OF PROFITS, GOODWILL, USE, DATA OR OTHER TANGIBLE OR INTANGIBLE LOSSES OR ANY OTHER DAMAGES BASED ON CONTRACT, TORT, STRICT LIABILITY, INFRINGEMENT OF INTELLECTUAL PROPERTY OR THEFT OR MISAPPROPRIATION OF PROPERTY OR ANY OTHER THEORY (EVEN IF THE FOUNDATION HAD BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES), RESULTING FROM THE SITE OR TOOLS; THE USE OR THE INABILITY TO USE THE SITE OR TOOLS; UNAUTHORIZED ACCESS TO OR ALTERATION OF YOUR TRANSMISSIONS OR DATA; STATEMENTS, CONTENT OR CONDUCT OF ANY THIRD PARTY ON THE SITE OR TOOLS; ANY ACTIONS THE FOUNDATION TAKES OR FAILS TO TAKE AS A RESULT OF COMMUNICATIONS YOU SEND; HUMAN ERRORS; TECHNICAL MALFUNCTIONS; FAILURES, INCLUDING PUBLIC UTILITY OR TELEPHONE OUTAGES; OMISSIONS, INTERRUPTIONS, LATENCY, DELETIONS OR DEFECTS OF ANY DEVICE OR NETWORK, PROVIDERS, OR SOFTWARE (INCLUDING, BUT NOT LIMITED TO, THOSE THAT DO NOT PERMIT PARTICIPATION IN THE TOOLS); ANY INJURY OR DAMAGE TO COMPUTER EQUIPMENT; INABILITY TO FULLY ACCESS THE SITE OR TOOLS OR ANY OTHER WEBSITE; THEFT, TAMPERING, DESTRUCTION, OR UNAUTHORIZED ACCESS TO, IMAGES OR OTHER CONTENT OF ANY KIND; DATA THAT IS PROCESSED LATE OR INCORRECTLY OR IS INCOMPLETE OR LOST; TYPOGRAPHICAL, PRINTING OR OTHER ERRORS, OR ANY COMBINATION THEREOF; OR ANY OTHER MATTER RELATING TO THE SITE OR TOOLS. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES OR THE LIMITATION OR EXCLUSION OF LIABILITY FOR INCIDENTAL OR CONSEQUENTIAL DAMAGES. ACCORDINGLY, SOME OF THE ABOVE LIMITATIONS MAY NOT APPLY TO YOU.</p>

<p>10.2 THE FOUNDATION HEREBY EXPRESSLY DISCLAIMS, WAIVES, RELEASES AND RENOUNCES ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, OR NON INFRINGEMENT.</p>

<p>10.3 WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE FOUNDATION, ITS DIRECTORS, OFFICERS, EMPLOYEES AND LICENSORS DO NOT REPRESENT OR WARRANT TO YOU THAT: (I) YOUR ACCESS TO OR USE OF THE TOOLS WILL MEET YOUR REQUIREMENTS, (II) YOUR ACCESS TO OR USE OF THE TOOLS WILL BE UNINTERRUPTED, TIMELY, SECURE OR FREE FROM ERROR, (III) USAGE DATA PROVIDED THROUGH THE TOOLS WILL BE ACCURATE, (III) THE TOOLS OR ANY CONTENT, SERVICES, OR FEATURES MADE AVAILABLE ON OR THROUGH THE TOOLS ARE FREE OF VIRUSES OR OTHER HARMFUL COMPONENTS, OR (IV) THAT ANY DATA THAT YOU DISCLOSE WHEN YOU USE THE TOOLS WILL BE SECURE.</p>

<p>10.4 YOU ACCEPT THE INHERENT SECURITY RISKS OF PROVIDING INFORMATION AND DEALING ONLINE OVER THE INTERNET, AND AGREE THAT THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES AND THE DAO HAVE NO LIABILITY OR RESPONSIBILITY FOR ANY BREACH OF SECURITY UNLESS IT IS DUE TO ITS GROSS NEGLIGENCE.</p>

<p>10.5 THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES AND THE DAO WILL NOT BE RESPONSIBLE OR LIABLE TO YOU FOR ANY LOSSES YOU INCUR AS THE RESULT OF YOUR USE OF THE ETHEREUM NETWORK OR THE METAMASK OR ANY OTHER ELECTRONIC WALLET, INCLUDING BUT NOT LIMITED TO ANY LOSSES, DAMAGES OR CLAIMS ARISING FROM: (A) USER ERROR, SUCH AS FORGOTTEN PASSWORDS OR INCORRECTLY CONSTRUED SMART CONTRACTS OR OTHER TRANSACTIONS; (B) SERVER FAILURE OR DATA LOSS; (C) CORRUPTED WALLET FILES; (D) INTELLECTUAL PROPERTY INFRINGEMENT BY THE USERS; (E) UNAUTHORIZED ACCESS OR ACTIVITIES BY THIRD PARTIES, INCLUDING BUT NOT LIMITED TO THE USE OF VIRUSES, PHISHING, BRUTEFORCING OR OTHER MEANS OF ATTACK AGAINST THE TOOLS, ETHEREUM NETWORK, OR THE METAMASK OR OTHER ELECTRONIC WALLET.</p>

<p>10.6 LAND PARCELS, WEARABLES AND ANY AND ALL ERC-721 TOKENS ARE INTANGIBLE DIGITAL ASSETS THAT EXIST ONLY BY VIRTUE OF THE OWNERSHIP RECORD MAINTAINED IN THE ETHEREUM NETWORK. ALL SMART CONTRACTS ARE CONDUCTED AND OCCUR ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM PLATFORM. THE FOUNDATION HAS NO CONTROL OVER AND MAKES NO GUARANTEES OR PROMISES WITH RESPECT TO THE OWNERSHIP RECORD OR SMART CONTRACTS.</p>

<p>10.7 MANA ARE INTANGIBLE DIGITAL ASSETS THAT EXIST ONLY BY VIRTUE OF THE OWNERSHIP RECORD MAINTAINED IN THE ETHEREUM NETWORK. ALL SMART CONTRACTS ARE CONDUCTED AND OCCUR ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM PLATFORM. THE FOUNDATION HAS NO CONTROL OVER AND MAKE NO GUARANTEES OR PROMISES WITH RESPECT TO THE OWNERSHIP RECORD OR SMART CONTRACTS. THE FOUNDATION MAKES NO OFFER OR INVITATION TO ACQUIRE, PURCHASE, TRANSFER, SELL OR OTHERWISE DEAL IN MANA.</p>

<p>10.8. THE FOUNDATION IS NOT RESPONSIBLE FOR LOSSES DUE TO BLOCKCHAIN OR ANY OTHER FEATURES OF THE ETHEREUM NETWORK OR THE METAMASK OR OTHER ELECTRONIC WALLET, INCLUDING BUT NOT LIMITED TO LATE REPORT BY DEVELOPERS OR REPRESENTATIVES (OR NO REPORT AT ALL) OF ANY ISSUES WITH THE BLOCKCHAIN SUPPORTING THE ETHEREUM NETWORK, INCLUDING FORKS, TECHNICAL NODE ISSUES, OR ANY OTHER ISSUES HAVING FUND LOSSES AS A RESULT.</p>

<p>10.9. SOME TOOLS, AS THE DESKTOP CLIENT PROVIDES YOU WITH FASTER ACCESS AND INTERACTION WITH DECENTRALAND. THE DOWNLOAD AND USE OF THE DESKTOP CLIENT MAY INCLUDE THE DOWNLOAD OF THE CONTENT CREATED BY THE USERS AND AVAILABLE AT DECENTRALAND TO YOUR DEVICE, WHICH MAY BE ILLEGAL IN YOUR COUNTRY OR OFFENSIVE. THE DAO AND THE FOUNDATION ARE NOT LIABLE FOR SUCH CONTENT. CONTENT AVAILABLE IN DECENTRALAND MAY REDIRECT YOU TO THIRD-PARTY LINKS FOR WHICH THE DAO AND/OR THE FOUNDATION ARE NOT RESPONSIBLE. YOU ARE SOLELY RESPONSIBLE FOR ALL DOWNLOADS OF THIRD-PARTY CONTENT AND DATA, AND FOR ALL THIRD-PARTY LINKS CLICKED ON. PLEASE NOTE THAT BY CREATING A USER ON THE APP YOU RELEASE THE DAO AND THE FOUNDATION FROM ANY AND ALL LIABILITY REGARDING THE ABOVE-MENTIONED CONTENT, DATA OR LINKS AND ASSUME THE RISKS DESCRIBED ABOVE.</p>

<h2>11. Limitation on Liability</h2>

<p>11.1 YOU UNDERSTAND AND AGREE THAT THE FOUNDATION, ITS OFFICERS, EMPLOYEES, DIRECTORS, THE DAO, AND LICENSORS WILL NOT BE LIABLE TO YOU OR TO ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR EXEMPLARY DAMAGES WHICH YOU MAY INCUR, HOWSOEVER CAUSED AND UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, ANY LOSS OF PROFITS (WHETHER INCURRED DIRECTLY OR INDIRECTLY), LOSS OF GOODWILL OR BUSINESS REPUTATION, LOSS OF DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, OR ANY OTHER INTANGIBLE LOSS, EVEN IF THE FOUNDATION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>

<p>11.2 YOU AGREE THAT THE FOUNDATION’S TOTAL, AGGREGATE LIABILITY TO YOU FOR ANY AND ALL CLAIMS ARISING OUT OF OR RELATING TO THESE TERMS OR YOUR ACCESS TO OR USE OF (OR YOUR INABILITY TO ACCESS OR USE) ANY PORTION OF THE TOOLS, WHETHER IN CONTRACT, TORT, STRICT LIABILITY, OR ANY OTHER LEGAL THEORY, IS LIMITED TO THE GREATER OF (A) THE AMOUNTS ACTUALLY PAID BY YOU TO THE FOUNDATION UNDER THESE TERMS IN THE 12 MONTH PERIOD PRECEDING THE DATE THE CLAIM AROSE, OR (B) $100.</p>

<p>11.3 YOU ACKNOWLEDGE AND AGREE THAT THE FOUNDATION HAS MADE THE TOOLS AVAILABLE TO YOU AND ENTERED INTO THESE TERMS IN RELIANCE UPON THE WARRANTY DISCLAIMERS AND LIMITATIONS OF LIABILITY SET FORTH HEREIN, WHICH REFLECT A REASONABLE AND FAIR ALLOCATION OF RISK BETWEEN THE PARTIES AND FORM AN ESSENTIAL BASIS OF THE BARGAIN BETWEEN US. THE FOUNDATION WOULD NOT BE ABLE TO PROVIDE THE TOOLS TO YOU WITHOUT THESE LIMITATIONS.</p>

<p>11.4 SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, AND SOME JURISDICTIONS ALSO LIMIT DISCLAIMERS OR LIMITATIONS OF LIABILITY FOR PERSONAL INJURY FROM CONSUMER PRODUCTS, SO THE ABOVE LIMITATIONS MAY NOT APPLY TO PERSONAL INJURY CLAIMS.</p>

<h2>12. Proprietary Rights</h2>

<p>12.1 All title, ownership and Intellectual Property Rights in and to the Site and the Tools are owned exclusively by the Foundation or its licensors. The Foundation holds these Intellectual Property Rights for the benefit of the Decentraland community as a whole. You acknowledge and agree that the Site and Tools contains proprietary and confidential information that is protected by applicable intellectual property and other laws. Except as expressly authorized in Section 13, you agree not to copy, modify, rent, lease, loan, sell, distribute, perform, display or create Derivative Works based on the Site and the Tools, in whole or in part. The Foundation's exclusive ownership shall include all elements of the Site and Tools, and all Intellectual Property Rights therein. The visual interfaces, graphics (including, without limitation, all art and drawings associated with Tools), design, systems, methods, information, computer code, software, "look and feel", organization, compilation of the content, code, data, and all other elements of the Site and the Tools (but excluding the Content submitted by Users) (collectively, the " Foundation Materials") are owned by the Foundation, and are protected by copyright, trade dress, patent, and trademark laws, international conventions, other relevant intellectual property and proprietary rights, and applicable laws. All the Foundation Materials are the copyrighted property of the Foundation or its licensors, and all trademarks, logos, service marks, and trade names contained in the Foundation Materials are proprietary to the Foundation or its licensors. Except as expressly set forth herein, your use of the Site and the Tools does not grant you ownership of or any other rights with respect to any content, code, data, or other materials that you may access on or through the Site and the Tools. The Foundation reserves all rights in and to the Foundation Materials not expressly granted to you in the Terms. For the sake of clarity, you understand and agree: (i) that any "purchase" of LAND, whether via the Tools or otherwise, does not give you any rights or licenses in or to the Foundation Materials (including, without limitation, the Foundation’s copyright in and to the art and drawings associated with the Tools and content therein) other than those expressly contained in these Terms; and (ii) that you do not have the right to reproduce, distribute, or otherwise commercialize any elements of the Foundation Materials (including, without limitation, the Foundation’s copyright in and to the art and drawings associated with the Tools and content therein) in any way without the Foundation’s prior written consent in each case, which consent the Foundation may withhold in its sole and absolute discretion.</p>

<p>12.2 You may choose to submit comments, bug reports, ideas or other feedback about the Site or the Tools, including without limitation about how to improve the Tools (collectively, "Feedback"). By submitting any Feedback, you agree that the Foundation is free to use such Feedback at the Foundation’s discretion and without additional compensation to you, and to disclose such Feedback to third parties (whether on a non-confidential basis, or otherwise), including the DAO. You hereby grant the Foundation and the DAO a perpetual, irrevocable, nonexclusive, worldwide license under all rights necessary for the Foundation and the DAO to incorporate and use your Feedback for any purpose.</p>

<p>12.3 You acknowledge and agree that you are responsible for your own conduct while accessing or using the Site and the Tools, and for any consequences thereof. You agree to use the Site and the Tools only for purposes that are legal, proper and in accordance with these Terms and any applicable laws or regulations. By way of example, and not as a limitation, you may not, and may not allow any third party to: (i) send, post, upload, transmit, distribute, disseminate or otherwise make available any Content in violation of the Content Policy approved by the DAO, including without limitation, Content that infringes the Intellectual Property Rights of any party and any Content that contains any hate-related or violent content or contains any other material or products that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third party rights; (ii) distribute viruses, worms, defects, Trojan horses, spyware, time bombs, cancelbots, corrupted files, hoaxes, or any other items of a destructive or deceptive nature, or that may harvest or collect any data or information about other users without their consent; (iii) impersonate another person (via the use of an email address or otherwise); (iv) use the Site or the Tools to violate the legal rights (such as rights of privacy and publicity) of others; (v) engage in, promote, or encourage illegal activity (including, without limitation, money laundering); (vi) interfere with other users' enjoyment of the Site or the Tools; (vii) exploit the Site or the Tools for any unauthorized commercial purpose; (viii) post or transmit unsolicited or unauthorized advertising, or promotional materials, that are in the nature of "junk mail," "spam," "chain letters," "pyramid schemes," or any other similar form of solicitation; (ix) modify, adapt, translate, or reverse engineer any portion of the Tools; (x) remove any copyright, trademark or other proprietary rights notices contained in or on the Site or the Tools or any part of it; (xi) reformat or frame any portion of the Site or the Tools; (xii) stalk, harass, or engage in any sexual, suggestive, lewd, lascivious, or otherwise inappropriate conduct with minors on the Site or the Tools; (xiii) use any robot, spider, site search/retrieval application, or other device to retrieve or index any portion of the Site, the Tools or the Content posted on the Tools, or to collect information about its users for any unauthorized purpose; (xiv) use any cheats, hacks, or any other unauthorized techniques or unauthorized third-party software to cheat in any competition or game that may be offered on the Tools by other Users, or to otherwise disrupt or modify the Tools or the experience of any users on the Tools; (xv) create user accounts by automated means or under false or fraudulent pretenses; (xvi) attempt to gain unauthorized access to any other user's Account, password or Content; or (xvii) access or use the Tools for the purpose of creating a product or service that is competitive with the Tools.</p>

<p>12.4 Ownership and management of LAND, Non-fungible tokens (NFTs) and Content created by users:</p>

<p>LAND: All title and ownership rights over each piece of LAND lies with its owner. Each LAND owner decides the Content to be included in the LAND and may impose its own terms and conditions and policies. In the case of Districts, the relationship between the District and District participants - in any capacity - is exclusively governed by the applicable plan approved by each community. You are advised to review any such terms, conditions and policies before entering into transactions in any LAND. The Foundation does not control the Content of each LAND parcel and does not assume any liability or obligation in connection thereto. All Content uploaded to LAND must comply with the Content Policy. The Foundation holds the Intellectual Property Rights over the LAND smart contract but does not have any Intellectual Property Right over the Content introduced by each user.</p>

<p>NFTs: All title, ownership and Intellectual Property Rights over NFTs, including without limitation, Wearables, belong to the creator of the NFT. Transactions for the sale of NFT through the Marketplace will convey said title, ownership and Intellectual Property Rights to the purchaser. To the fullest extent possible, the creator will waive any moral rights over the NFTs upon transfer to third parties. Neither the Foundation nor the DAO have any Intellectual Property Rights over NFTs created by users. All NFTs must comply with the Content Policy.</p>

<p>Content: All title, ownership and Intellectual Property Rights over the Content created by users belongs to the users who created said Content. Neither the Foundation nor the DAO have any Intellectual Property Rights over the user’s Content. The creator of the Content may impose its own terms, conditions and licenses for access to said Content. You are advised to review any such terms, conditions and policies before accessing any such Content. All Content must comply with the Content Policy.</p>

<p>12.5 The use of Decentraland logo and trademarks are regulated in the Terms of use available at</p>

<h2>13. Open Source License.</h2>

<h3>13.1 Grant of Copyright License.</h3>

<p>Subject to the terms and conditions of this License, each Contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. The following Tools are not subject to the provisions of this Section 13, and are of proprietary nature of the Foundation: Blog and Events. The Forum is of proprietary nature and is a development of Discourse; the DAO is based on an open source license of Aragon.</p>

<h3>13.2 Grant of Patent License.</h3>

<p>Subject to the terms and conditions of this License, each Contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this License for that Work shall terminate as of the date such litigation is filed.</p>

<h3>13.3 Redistribution.</h3>

<p>You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that you meet the following conditions: (i) modifications to the Work and the Derivative Works thereof shall not infringe the Privacy and Content Policies, nor allow the infringement of said policies or of Section 12.3 above, and require any further Contributor to abide by these limitations; (ii) any modifications to the Work or the Derivative Works can only take place until six (6) months have elapsed since the release of the relevant Work or Derivative Works by the Contributor to the general public; (iii) you must give any other recipients of the Work or Derivative Works a copy of this License; (iv) you must cause any modified files to carry prominent notices stating that you changed the files; (v) you must retain, in the Source form of any Derivative Works that you distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; (vi) if the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add your own attribution notices within Derivative Works that you distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</p>

<p>You may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such Derivative Works as a whole, provided your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>

<h3>13.4 Submission of Contributions.</h3>

<p>Unless explicitly stated otherwise, any Contribution intentionally submitted for inclusion in the Work by you to the Foundation and/or its licensors shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with the Foundation and/or its licensors regarding such Contributions.</p>

<h3>13.5 Trademarks.</h3>

<p>This License does not grant permission to use the trade names, logo, trademarks, service marks, or product names of the licensee and/or its licensors, except as provided in the Terms of Use for Decentraland´s Logo and Name.</p>

<h3>13.6 Disclaimer of Warranty.</h3>

<p>Unless required by applicable law or agreed to in writing, the Foundation and/or its licensors provide the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with your exercise of permissions under this License.</p>

<h3>13.7 Limitation of Liability.</h3>

<p>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p>

<h3>13.8 Accepting Warranty or Additional Liability.</h3>

<p>While redistributing the Work or Derivative Works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other Contributor, and only if you agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p>

<h2>14. Links</h2>

<p>The Site and the Tools provide, or third parties may provide, links to other World Wide Web or accessible sites, applications or resources. Because the Foundation has no control over such sites, applications and resources, you acknowledge and agree that the Foundation, its officers, employees and the DAO are not responsible for the availability of such external sites, applications or resources, and do not endorse and are not responsible or liable for any content, advertising, products or other materials on or available from such sites or resources. You further acknowledge and agree that the Foundation, its officers, employees and the DAO, shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such site or resource.</p>

<h2>15. Termination and Suspension</h2>

<p>You shall have a right to terminate your Account at any time by canceling and discontinuing your access to and use of the Tools. The DAO may decide to terminate or suspend all or part of the Site and the Tools and your access to the Site and the Tools immediately, without prior notice or liability. You will not receive any refunds if you cancel your Account, or if these Terms are otherwise terminated. You agree that the DAO, in its sole discretion and for any or no reason, may terminate these Terms and suspend your Account(s) for the Tools. You agree that any suspension of your access to the Site or the Tools may be without prior notice, and that the DAO and/or the Foundation (and its officers and employees)will not be liable to you or to any third party for any such suspension.</p>

<p>In the event of your breach of these Terms or any suspected fraudulent, abusive, or illegal activity, the DAO and/or the Foundation may, without limitation, suspend your Account, block any infringing Content and adopt any other action deemed necessary to prevent future breaches, in addition to any other remedies the DAO and/or the Foundation and/or any User may have at law or in equity.</p>

<p>Upon any termination or suspension of your Account, you may no longer have access to information that you have posted on the Tools or that is related to your Account, and you acknowledge that the DAO and/or the Foundation will have no obligation to maintain any such information in the relevant databases or to forward any such information to you or to any third party. Upon termination of your Account, your right to use the Tools will immediately cease. The following provisions of these Terms survive any termination of these Terms: REPRESENTATIONS AND RISKS; TRANSACTION AND FEES; INDEMNITY; DISCLAIMERS; LIMITATION ON LIABILITY; PROPRIETARY RIGHTS; LINKS; TERMINATION AND SUSPENSION; NO THIRD-PARTY BENEFICIARIES; BINDING ARBITRATION AND CLASS ACTION WAIVER; GENERAL INFORMATION.</p>

<h2>16. No Third-Party Beneficiaries</h2>

<p>You agree that, except as otherwise expressly provided in these Terms, there shall be no third-party beneficiaries to the Terms.</p>

<h2>17. Notice and Procedure for Making Claims of Copyright Infringement</h2>

<p>If you believe that your Intellectual Property Rights (as this term is defined in the Content Policy) or the Intellectual Property Rights of a person on whose behalf you are authorized to act has been infringed, you are encouraged to contact the infringing party directly. Additionally, you may also contact the Foundation providing the following information:</p>

<p>an electronic or physical signature of the person authorized to act on behalf of the owner of the Intellectual Property Right;</p>

<p>a description of the Intellectual Property Right that you claim has been infringed;</p>

<p>description of where the material that you claim is infringing is located on the Tools;</p>

<p>your address, telephone number, and email address;</p>

<p>a statement by you that you have a good faith belief that the disputed use is not authorized by the owner of the Intellectual Property Right, its agent, or the law;</p>

<p>a statement by you, made under penalty of perjury, that the above information in your Notice is accurate and that you are Intellectual Property owner or authorized to act on the owner's behalf.</p>

<p>The Foundation can be reached at email:</p>

<p>To the extent possible, the Foundation may try to reach the would-be infringing party to forward your concerns. The Foundation is not in a position to assess the legal merits of the claims.</p>

<p>As the Foundation does not control the Content being uploaded by the users, if the user does not agree with your claim and/or does not accept to withdraw the infringing content, the DAO, as per the votes of the community, may take any of the following measures, (i) block the infringing Content so as to render it inaccessible through the Tools (although it could be still accessible through other clients); (ii) block the infringing user's Account. Any further action, claim or remedy against the infringing user must be undertaken by the aggrieved user.</p>

<p>Although not at the core of its role or responsibilities, to the extent technically possible, the Foundation may also, at its sole discretion, (i) block any kind of Content uploaded by users; (ii) suspend user Accounts; and/or (iii) request documents evidencing the right of the contributor to use Intellectual Property Rights embedded in the Content.</p>

<h2>18. Binding Arbitration and Class Action Waiver</h2>

<p>PLEASE READ THIS SECTION CAREFULLY - IT MAY SIGNIFICANTLY AFFECT YOUR LEGAL RIGHTS, INCLUDING YOUR RIGHT TO FILE A LAWSUIT IN COURT</p>

<h3>18.1 Initial Dispute Resolution</h3>

<p>The parties shall use their best efforts to engage directly to settle any dispute, claim, question, or disagreement and engage in good faith negotiations which shall be a condition to either party initiating a lawsuit or arbitration.</p>

<h3>18.2 Binding Arbitration</h3>

<p>If the parties do not reach an agreed upon solution within a period of 30 days from the time informal dispute resolution under the Initial Dispute Resolution provision begins, then either party may initiate binding arbitration as the sole means to resolve claims, subject to the terms set forth below.</p>

<p>Specifically, any dispute that is not resolved under the Initial Dispute Resolution provision shall be finally settled under the Rules of Arbitration of the International Chamber of Commerce. The following shall apply in respect of such arbitration: (i) the number of arbitrators shall be three (one nominated by each party and one nominated by the ICC); (ii) the decision of the arbitrators will be binding and enforceable against the parties and a judgment upon any award rendered by the arbitrators may be entered in any court having jurisdiction thereto (provided that in no event will the arbitrator have the authority to make any award that provides for punitive or exemplary damages or to award damages excluded by these Terms or in excess of the limitations contained in these Terms); (iii) the seat, or legal place, of arbitration shall be the City of Panama, Panama; and (iv) the language to be used in the arbitral proceedings shall be English, any documents submitted as evidence that are in another language must be accompanied by an English translation and the award will be in the English language. Claimants and respondents shall bear its or their own costs of the arbitration, including attorney's fees, and share equally the arbitrators' fees and ICC's administrative costs. For purposes of cost sharing, all claimants shall be considered one party and all respondents shall be considered one party. The parties shall maintain strict confidentiality with respect to all aspects of any arbitration commenced pursuant to these Terms and shall not disclose the fact, conduct or outcome of the arbitration to any non-parties or non-participants, except to the extent required by applicable Law or to the extent necessary to recognize, confirm or enforce the final award or decision in the arbitration, without the prior written consent of all parties to the arbitration.</p>

<h3>18.3 Class Action Waiver</h3>

<p>The parties further agree that any arbitration shall be conducted in their individual capacities only and not as a class action or other representative action, and the parties expressly waive their right to file a class action or seek relief on a class basis. YOU AND THE FOUNDATION AGREE THAT EACH MAY BRING CLAIMS AGAINST THE OTHER ONLY IN YOUR OR ITS INDIVIDUAL CAPACITY, AND NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY PURPORTED CLASS OR REPRESENTATIVE PROCEEDING. If any court or arbitrator determines that the class action waiver set forth in this paragraph is void or unenforceable for any reason or that an arbitration can proceed on a class basis, then the arbitration provision set forth above shall be deemed null and void in its entirety and the parties shall be deemed to have not agreed to arbitrate disputes.</p>

<p>4-exception-litigation of Intellectual Property and Small Court Claims

Notwithstanding the parties' decision to resolve all disputes through arbitration, either party may bring an action in state or federal court to protect its Intellectual Property Rights. Either party may also seek relief in a small claims court for disputes or claims within the scope of that court's jurisdiction.</p>

<h3>18.5 30-day Right to Opt-Out</h3>

<p>You have the right to opt-out and not be bound by the arbitration and class action waiver provisions set forth above by sending written notice of your decision to opt-out to the following email address:</p>

<p>. Your notice must be sent within 30 days of your first use of the Tools, otherwise you shall be bound to arbitrate disputes in accordance with the terms of those paragraphs. If you opt-out of these arbitration provisions, the Foundation also will not be bound by them.</p>

<h3>18.6 Changes to this Section</h3>

<p>The Foundation will provide 60-days' notice of any changes to this section. Changes will become effective on the 60th day, and will apply prospectively only to any claims arising after the 60th day.</p>

<p>These Terms and the relationship between you and the Foundation shall be governed by the laws of Panama, without regard to conflict of law provisions.</p>

<p>For any dispute not subject to arbitration you and The Foundation agree to submit to the exclusive jurisdiction of the courts with seat in the city of Panama, Panama. You further agree to accept service of process by mail, and hereby waive any and all jurisdictional and venue defenses otherwise available.</p>

<h2>19. General Information</h2>

<h3>19.1 Entire Agreement</h3>

<p>These Terms (and any additional terms, rules and conditions of participation that the Foundation or the DAO may post on the Site or on the Tools) constitute the entire agreement between you and the Foundation with respect to the Tools and supersedes any prior agreements, oral or written, between you and the Foundation. In the event of a conflict between these Terms and the additional terms, rules and conditions of participation, the latter will prevail over the Terms to the extent of the conflict.</p>

<h3>19.2 Waiver and Severability of Terms</h3>

<p>The failure of the Foundation or the DAO to exercise or enforce any right or provision of the Terms shall not constitute a waiver of such right or provision. If any provision of the Terms is found by an arbitrator or court of competent jurisdiction to be invalid, the parties nevertheless agree that the arbitrator or court should endeavor to give effect to the parties' intentions as reflected in the provision, and the other provisions of the Terms remain in full force and effect.</p>

<h3>19.3 Statute of Limitations</h3>

<p>You agree that regardless of any statute or law to the contrary, any claim or cause of action arising out of or related to the use of the Site, the Tools or the Terms must be filed within one (1) year after such claim or cause of action arose or be forever barred.</p>

<h3>19.4 Section Titles</h3>

<p>The section titles in the Terms are for convenience only and have no legal or contractual effect.</p>

<h3>19.5 Communications</h3>

<p>Users with questions, complaints or claims with respect to the Site or the Tools may contact us using the relevant contact information set forth above and at</p>

<p>.</p>

<h2>20. Definitions</h2>

<p>The following definitions shall apply only to Section 13 of the Terms:</p>

<p>"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."</p>

<p>"Contributor" shall mean the Foundation and/or any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p>

<p>"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p>

<p>"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p>

<p>"License" shall mean the terms and conditions for the use, reproduction, and distribution of the open source, as defined by Section 13.</p>

<p>"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p>

<p>"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p>

<p>"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p>

<p>"Work" shall mean the work of authorship of the Tools, made available under the License, as indicated by a copyright notice that is included in or attached to the Work.</p>

# End of the information extracted from the URL: https://decentraland.org/brand

# Start of the information extracted from the URL: https://decentraland.org/content/

<title>Content Policy</title>

<h1>Content Policy</h1>

<h2>1. Definitions</h2>

<strong>"Content"</strong>

<p>shall mean any work of authorship, creative works, graphics, images, textures, photos, logos, video, audio, text and interactive features, including without limitation NFTs, submitted by the Users of Decentraland.</p>

<strong>"Intellectual Property Rights"</strong>

<p>shall mean rights in, arising out of, or associated with intellectual property in any jurisdiction, including without limitation rights in or arising out of, or associated with (1) copyrights, mask work rights, and other rights in published and unpublished works of authorship, including without limitation computer programs, databases, graphics, user interfaces, and similar works; (2) patents, design rights, and other rights in inventions and discoveries, including without limitation articles of manufacture, business methods, compositions of matter, improvements, machines, methods, and processes; (3) trademarks, service marks, trade dress and other logos and similar indications of origin of, or association with, a group, business, good, product, or service; (4) trade secrets and other information that is not generally known or readily ascertainable by third parties through proper means, whether tangible or intangible, including without limitation algorithms, customer lists, ideas, designs, formulas, know-how, source code, methods, processes, programs, prototypes, systems, and techniques; (5) a person's name, voice, signature, photograph, or likeness, including without limitation rights of personality, privacy, and publicity; (6) attribution and integrity and other so-called moral rights of an author; (7) internet domain names; (8) data and databases; and (9) similar proprietary rights arising under the laws of any jurisdiction</p>

<strong>"NFT"</strong>

<p>means non-fungible token, including, LAND, Wearables and any other kind of NFTs available in Decentraland. All NFTs must comply with this Content Policy in accordance with section 12.4 of the Terms of Use.</p>

<h2>2. Prohibited Content</h2>

<p>All Content uploaded, posted, created, displayed, transmitted or made available by the User through the Tools must not include:</p>

<p>2.1. Content involving illegality, such as piracy, criminal activity, terrorism, obscenity, child pornography, gambling (subject to Section 3 below), and illegal drug use.</p>

<p>2.2. Content infringing third party Intellectual Property Rights.</p>

<p>2.3. Cruel or hateful Content that could harm, harass, promote or condone violence against, or that is primarily intended to incite hatred of, animals, or individuals or groups based on race or ethnic origin, religion, nationality, disability, gender, age, veteran status, or sexual orientation/gender identity.</p>

<p>2.4. Content that is libelous, false, inaccurate, misleading, or invades another person's privacy.</p>

<p>2.5. Content that breaches the Privacy Policy or applicable data privacy laws.</p>

<p>2.6. Content that promotes or could be construed as primarily intended to evade the limitations above.</p>

<h2>3. Gambling</h2>

<p>If your Content involves gambling, the following shall apply: (i) if you reside in a jurisdiction which requires a license for online gambling, you must obtain such license prior to making your Content available; (ii) you must be in full compliance with the regulations of your country of residence; (iii) you must geo-block your Content for IPs from jurisdictions where online gambling is banned (including, without limitation, the United States of America, South Korea and China) and (iv) you must include in the terms and conditions of use of your Content (if any) a release from liability in favor of the Foundation and the DAO to the fullest extent allowed by applicable law vis a vis you and the users of your Content.</p>

<h2>4. Breaches of this Policy</h2>

<p>Any Content in infringement of Section 2, may be blocked and upon blocking shall not be available to other users of the Tools. Moreover, infringing Content may result in suspension of the Account, court orders, civil actions, injunctions, criminal prosecutions and other legal consequences brought by the Foundation, the DAO or third parties against the creator, distributor and/or user of said infringing Content. The User's Account may also be terminated in accordance with Section 15 of the Terms of Use.</p>

<h2>5. Age-Restricted Content</h2>

<p>Any Content which qualifies as (i) intensely violent or graphic, (ii) gambling or (ii) sexually explicit, shall only be available to people aged 18 or older. If you upload, post, create, display, transmit or make available such Content on the Tools, you must provide sufficient warning as to this restriction. Failure to do so may result in termination of your Account pursuant to Section 15 of the Terms.</p>

<h2>6. User Representations and Warranties</h2>

<p>You represent and warrant that at any time you submit Content, you are at least the age of majority in the jurisdiction in which you reside and are the parent or legal guardian, or have all proper consents from the parent or legal guardian, of any minor who is depicted in or contributed to any Content you submit, and that, as to that Content, (a) you are the sole author and owner of the Intellectual Property Rights to such Content, or you have a lawful right to submit the Content, all without any obligation to obtain consent of any third party and without creating any obligation or liability for the Foundation; (b) the Content is accurate; (c) the Content does not and will not infringe any Intellectual Property Right of any third party; and (d) the User Content will not violate the Terms or this Content Policy, or cause injury or harm to any person.</p>

<p>You expressly acknowledge and accept that the Content you submit will be accessible to and viewable by other users and waive any claim with regards to the Foundation, its directors, officers, employees and affiliates in connection with said third party access. You can withdraw your Content at any time you wish.</p>

<p>Please remember that the Content that you submit will be accessible to and viewable by other users. Except as may be required to register and/or maintain your Account, do not submit personally identifiable information (e.g. first and last name together, password, phone number, address, credit or debit card number, medical information, e-mail address, or other contact information) on the Tools.</p>

<p>By submitting, posting or displaying content, and or through Decentraland and/or the Marketplace, you grant us a worldwide, non-exclusive, royalty-free perpetual, irrevocable, transferable right and license (with the right to sublicense) to use, copy, reproduce, process, adapt, modify, publish, transmit, display, develop, improve, distribute such Content, promote Decentraland, activities, Events, in any and all media or distribution methods (now known or later developed). You further grant Decentraland, the DAO and/or the Foundation, the right to use your name and trademarks, if any, in connection with our use of your Content available at the Platform and/or the Marketplace, from time to time.</p>

<h2>7. Storage</h2>

<p>You acknowledge that due to the decentralized nature of Decentraland and of the blockchain technology, all Content and information submitted by you is not stored in a centralized server, but in several decentralized nodes (the "Nodes"). Thus, the Foundation or the DAO are not liable for any loss of content or information.</p>

<p>The Nodes recognize and accept that in the event of any court order relating to the blocking, suspension or deletion of any Content, they will abide by any such court order.</p>

<h2>8. Limitations to Liability</h2>

<p>The Foundation, its officers, employees, and the DAO are not responsible or liable for the Content, conduct, or services of users or third parties. The Foundation, its officers, employees and the DAO do not control or endorse the Content of communications between users or users' interactions with each other or the Tools.</p>

<p>You acknowledge that you will be exposed to various aspects of the Tools involving the conduct, Content, and services of users, and that the Foundation does not control and is not responsible or liable for the quality, safety, legality, truthfulness or accuracy of any such user conduct, Content or user services. You acknowledge that the Foundation does not guarantee the accuracy of information submitted by any user of the Tools, nor any identity information about any user. Your interactions with other users and your use of Content are entirely at your own risk. The Foundation has no obligation to become involved in any dispute that you may have or claim to have with one or more users of the Tools, or in any manner in any resolution thereof.</p>

<p>THE TOOLS MAY CONTAIN LINKS TO OR OTHERWISE ALLOW CONNECTIONS TO THIRD-PARTY WEBSITES, SERVERS, AND ONLINE SERVICES OR ENVIRONMENTS THAT ARE NOT OWNED OR CONTROLLED BY THE FOUNDATION. THE FOUNDATION, ITS OFFICERS, EMPLOYEES AND THE DAO ARE NOT RESPONSIBLE OR LIABLE FOR THE CONTENT, POLICIES OR PRACTICES OF ANY THIRD-PARTY WEBSITES, SERVERS OR ONLINE SERVICES OR ENVIRONMENTS. Please consult any applicable terms of use and privacy policies provided by the third party for such websites, servers or online services or environments.</p>

<p>You acknowledge that the Content of the Tools is provided or made available to you under license from independent Content Providers, including other users of the Tools ("Content Providers"). You acknowledge and agree that except as expressly provided in this Agreement, the Intellectual Property Rights of other Content Providers in their respective Content are not licensed to you by your mere use of the Tools. You must obtain from the applicable Content Providers any necessary license rights in Content that you desire to use or access.</p>

<p>You copy and use Content at your own risk. You are solely responsible and liable for your use, reproduction, distribution, modification, display, or performance of any Content in violation of any Intellectual Property Rights. You agree that the Foundation will have no liability for, and you agree to defend, indemnify, and hold the Foundation harmless from, any claims, losses or damages arising out of or in connection with your use, reproduction, distribution, modification, display, or performance of any Content.</p>

<h2>9. Changes to this Policy.</h2>

<p>The DAO may change this Content Policy from time to time. All users have the obligation to be aware of the updated versions of this Policy.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/contributor

# Start of the information extracted from the URL: https://places.decentraland.org/places

<title>Places Overview</title>

<h3>Decentraland</h3>

# End of the information extracted from the URL: https://docs.decentraland.org/contributor

# Start of the information extracted from the URL: https://places.decentraland.org/worlds

<title>Places</title>

<h3>Decentraland</h3>

<p>Your own 3D Space in the Metaverse. A place for Decentraland citizens to build, experiment, and host events and even interactive experiences without owning LAND.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/contributor

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq

<title>Places FAQ | Decentraland Documentation</title>

<strong>Places FAQ</strong>

<h1>Places FAQ</h1>

<p>Below you can find the</p>

<strong>frequently asked questions</strong>

<p>about</p>

<p>.</p>

<h2>Editing Your Place</h2>

<strong>How do I edit the title, description or image of my Place?</strong>

<p>The title, description and image of your Place are taken from the scene metadata. Find out more about editing the</p>

<p>.</p>

<strong>How does my Place get updated?</strong>

<p>When you re-upload your scene, the Places website will update any metadata automatically.</p>

<strong>What happens if I change my Place significantly?</strong>

<p>Each Place is assigned a unique ID. When certain conditions are met, your Place may be deemed “new”, resulting in a new ID assignment. This change will cause your Place to lose any accumulated favorites and likes. For details on these conditions, please refer to</p>

<p>.</p>

<h2>Like Percentage</h2>

<strong>How is the like percentage calculated?</strong>

<p>In order to prevent abuse, the like percentage is calculated from likes and dislikes from users who have at least 100</p>

<p>. Anyone with an account can like or dislike, but only qualifying votes are used to calculate the like percentage.</p>

<p>Increase your chances of getting a good rating by making sure your Place has a title, description and thumbnail.</p>

<h2>Points of Interest</h2>

<strong>How can my Place become a Point of Interest?</strong>

<p>Points of interest are notable locations in Decentraland. These “POIs” are promoted in several areas of the virtual world’s UI, and are promoted as good places for users to explore, especially people new to Decentraland.</p>

<p>You can create a</p>

<p>in the</p>

<p>to nominate your Place as a Point of Interest.</p>

<h2>Worlds</h2>

<strong>Which Worlds appear in the Worlds tab?</strong>

<p>As defined in the</p>

<em>Worlds 1.0 - Short-Term Plan</em>

<p>, we allow discoverability of Worlds deployed to Foundation’s World Content Server only for NAME owners that also hold LAND or an active LAND rental contract.</p>

<h1>More help</h1>

<p>For more help, join the</p>

<p>and post a question in the Support section.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq

# Start of the information extracted from the URL: https://events.decentraland.org

<title>Decentraland Events</title>

<h3>TRENDING</h3>

<h3>January</h3>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq

# Start of the information extracted from the URL: https://places.decentraland.org/

<title>Places Overview</title>

<h3>Decentraland</h3>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-metadata/

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary for the Decentraland client.</p>

<p>You’re also free to add any fields that you wish. In the future, custom fields can then be checked by alternative clients, or other scripts embedded in interactive inventory items.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>dcl coords</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>dcl coords <parcel></code>

<p>For example:</p>

<code>dcl coords 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>dcl coords <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>dcl coords 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>dcl coords <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>dcl coords</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>Give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these when they select the parcels of your scene on the map, they will also see these in a confirmation screen when being</p>

<p>there by another scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Define a</blockquote>

<blockquote>for the</blockquote>

<strong>x</strong>

<blockquote>and</blockquote>

<strong>z</strong>

<blockquote>locations to prevent users spawning all together in the same spot.</blockquote>

<p>If your scene does not define any spawn points, users might appear at any random location within the base parcel. In the past, the reference client always spawned users in the</p>

<strong>0,0</strong>

<p>position. Make sure you update your scene.json if this is not the behavior you expect.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is useful to limit the overlapping of players if they all visit a scene at the same time. To have many spawn points, simply list them as an array.</p>

<p>Spawn points marked as</p>

<code>default</code>

<p>are given preference. When there are multiple spawn points marked as</p>

<code>default</code>

<p>, one of them will be picked randomly from the list.</p>

<strong>📔 Note</strong>

<blockquote>: In future releases, when a player tries to spawn into a scene and the default spawn points are occupied by other players, the player will be sent to another of the listed locations. This will open the door to allowing players to teleport to a spawn point based on the spawn point’s name, as described in the</blockquote>

<code>scene.json</code>

<blockquote>.</blockquote>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on all content:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<p>Portable experiences and smart wearables are also affected by the following permissions:</p>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<strong>📔 Note</strong>

<blockquote>: In future releases, when a player enters a scene that has items listed in the</blockquote>

<code>requiredPermissions</code>

<blockquote>property, the scene will prompt the player to grant these permissions. The player will be able to decline these permissions for that scene.</blockquote>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>dissabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Worlds Configuration</h2>

<p>When you are planning to upload yor scene to a Decentraland</p>

<p>instead of Genesis City, you must specify the NAME that you are going to target. On the other hand, if your world meets the requirements to be listed on</p>

<p>(owning a LAND or having an active LAND rental contract), and you prefer not to list your scene, you can also configure it accordingly.</p>

<code>{

"worldConfiguration" : {

"name": "my-name.dcl.eth",

"placesConfig": {

"optOut": true

}

}

}</code>

<strong>📔 Note</strong>

<blockquote>: Attempting to upload a scene with the `worldConfiguration`` section to a Catalyst will result in the deployment being rejected.</blockquote>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for smart items, where the smart item’s code might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>ParcelIdentity</code>

<p>library to your scene:</p>

<p>Then you can call the</p>

<code>getParcel()</code>

<p>function from this library, which returns a json object that includes much of the contents of the scene.json file.</p>

<p>The example bleow shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getParcel()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.</blockquote>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re intreseted in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene will be listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-metadata/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/publishing/

<title>Publishing a scene | Decentraland Documentation</title>

<strong>Publishing a scene</strong>

<h1>Publishing a scene</h1>

<h2>Before you begin</h2>

<p>Make sure of the following:</p>

<p>Your scene complies with all of the</p>

<p>. Most of these are validated each time you run a preview of your scene.</p>

<p>You have a</p>

<p>account, or another wallet that’s accessible via Wallet Connect, and that your LAND parcels are owned by that account or have permissions.</p>

<p>You own or have permissions to the necessary amount of adjacent LAND parcels. Otherwise you can purchase LAND in the</p>

<p>.</p>

<p>You may also choose to publish your scene to a Decentraland</p>

<p>, in this case, you must own a NAME which you can mint on the</p>

<p>and your scene must comply with the World limits.</p>

<strong>📔 Note</strong>

<blockquote>: Multi-parcel scenes can only be deployed to adjacent parcels.</blockquote>

<h2>Check scene data</h2>

<p>When deploying, Decentraland uses information from</p>

<em>scene.json</em>

<p>to know where to deploy your scene to.</p>

<p>Open your scene’s</p>

<em>scene.json</em>

<p>file and complete the following data:</p>

<strong>title</strong>

<p>: The title is displayed on the UI under the mini-map, whenever players enter your scene. It also shows on the teleport popup.</p>

<strong>description</strong>

<p>: A description of what players will find in your scene. This is displayed on the teleport popup.</p>

<strong>navmapThumbnail</strong>

<p>: An image that represents your scene. This is displayed on the teleport popup. The image should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels.</p>

<strong>Parcels</strong>

<p>: The coordinates of the parcels that will be occupied by your scene</p>

<strong>Base</strong>

<p>: The coordinates of the parcel that will be considered the [0,0] coordinate of the scene. If your scene has multiple parcels, it should be the bottom-left (South-West) parcel.</p>

<strong>spawnPoints</strong>

<p>: A set of coordinates inside the scene (relative to the scene’s base parcel) where players spawn into. By default players spawn onto the</p>

<em>0,0,0</em>

<p>location of the scene (bottom-left corner). Use this to start out in a specific location, set a region to prevent players from overlapping with each other when they first appear.</p>

<strong>tags</strong>

<p>: A set of tags that describe your scene. These are used to help players and users explore Decentraland in a better way since they are able to find the content that they may be interested in.</p>

<p>.</p>

<strong>rating</strong>

<p>: This is used to classify the content of your scene based on its appropriateness for different age groups (</p>

<code>T</code>

<p>for Teens or</p>

<code>A</code>

<p>for Adults). It helps in filtering content for players.</p>

<strong>📔 Note</strong>

<blockquote>: See</blockquote>

<blockquote>for more details on how to set these parameters.</blockquote>

<h2>To publish the scene</h2>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you’ve</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Deployment to Worlds is not yet supported from the Editor.</blockquote>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Editor’s menu, by clicking the Decentraland logo on the tabs on the left. Then click</p>

<strong>Publish scene</strong>

<p>.</p>

<p>This opens a new tab in Visual Studio, showing what parcels you’re deploying to.</p>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<h3>Via the CLI</h3>

<p>Log into your Metamask account with the same public address associated with your parcels in Decentraland.</p>

<p>Run</p>

<code>dcl deploy</code>

<p>from the scene’s folder.</p>

<strong>💡 Tip</strong>

<blockquote>: If there are files in your project folder that you don’t want to deploy, list them in the</blockquote>

<em>.dclignore</em>

<blockquote>file before deploying.</blockquote>

<p>Optionally, you can also use the</p>

<code>--target-content</code>

<p>parameter with a World server URL in order to upload the scene to a World instead of to the Genesis City, for example</p>

<code>dcl deploy --target-content https://worlds-content-server.decentraland.org</code>

<p>.</p>

<p>A browser tab will open, showing what parcels you’re deploying to. Click</p>

<strong>Sign and Deploy</strong>

<p>.</p>

<p>Metamask opens, notifying you that your signature is requested. Click</p>

<strong>Sign</strong>

<p>to confirm this action.</p>

<strong>💡 Tip</strong>

<blockquote>: If you’re implementing a continuous integration flow, where changes to your scene are deployed automatically, then you can set the</blockquote>

<code>export DCL_PRIVATE_KEY</code>

<blockquote>environment variable to the private key of an account that has deploy permissions.</blockquote>

<strong>💡 Tip</strong>

<blockquote>:</blockquote>

<code>dcl deploy</code>

<blockquote>runs a</blockquote>

<code>dcl build</code>

<blockquote>, which checks the scene for type errors more strictly than running</blockquote>

<code>dcl start</code>

<blockquote>. If these errors can’t be avoided (eg: they happen in an external library) and they don’t impact the scene, you can use</blockquote>

<code>dcl deploy --skip-build</code>

<blockquote>to skip the</blockquote>

<code>dcl build</code>

<blockquote>step and deploy the scene as it is.</blockquote>

<h2>Publish from a hardware wallet</h2>

<p>Instead of storing your LAND tokens in a Metamask account, you may find it more secure to store them in a hardware wallet device, such as a</p>

<p>or a</p>

<p>, that’s physically plugged in to your computer.</p>

<p>If you’re using one of these devices, you can link the hardware wallet to Metamask to enable signing messages, while keeping the tokens more secure. See</p>

<p>for instructions to connect your account.</p>

<p>Once your hardware wallet can be used via Metamask, you can deploy following the same steps as if your tokens were on a Metamask account.</p>

<h2>Scene overwriting</h2>

<p>When a new scene is deployed, it overwrites older content that existed on the parcels it occupies.</p>

<p>If a scene that takes up multiple parcels is only partially overwritten by another, all of its parcels are either overwritten or erased.</p>

<p>Suppose you deployed your scene</p>

<em>A</em>

<p>over two parcels</p>

<em>[100, 100]</em>

<p>and</p>

<em>[100, 101]</em>

<p>. Then you sell parcel</p>

<em>[100, 101]</em>

<p>to a user who owns adjacent land and that deploys a large scene (</p>

<em>B</em>

<p>) to several parcels, including</p>

<em>[100, 101]</em>

<p>.</p>

<p>Your scene</p>

<em>A</em>

<p>can’t be partially rendered in just one parcel, so</p>

<em>[100, 100]</em>

<p>won’t display any content. You must build a new version of scene</p>

<em>A</em>

<p>that only takes up one parcel and deploy it to only parcel</p>

<em>[100, 100]</em>

<p>.</p>

<h2>What are the content servers</h2>

<p>The content servers are a network of community-owned servers with a filesystem that’s content-addressed, meaning that each file is identified by its contents, not by an arbitrary file name.</p>

<p>We use the content servers to host and distribute all scene content in a similar way to BitTorrent, keeping the Decentraland network distributed.</p>

<li>The content servers store and distribute all of the assets required to render your scenes.</li>

<li>The</li>

<code>dcl deploy</code>

<li>command links these assets to the LAND parcel specified in your</li>

<strong>scene.json</strong>

<li>file. Whenever you redeploy your scene, the CLI will update your LAND smart contract, if needed, to point to the most recent content available on the content servers.</li>

<p>The information on each copy of the server is verifiable, as each scene is signed by the LAND owner’s hash. This means that someone hosting a copy of the server won’t be able to tamper with the content to display something illegitimate. The community can also vote to approve or remove any of these servers using the DAO.</p>

<h2>The test server</h2>

<p>You can deploy content to the test catalyst server to run full tests with multiple users, the sourrounding scenes, and an environment that is identical to production. The test server is identical to all other catalyst servers, the difference is that the content that is deployed to this server isn’t propagated to the others. Content deployed to other servers on the other hand does get propagated to this server, so surrounding scenes should look as they will in production.</p>

<strong>📔 Note</strong>

<blockquote>: To deploy to parcels in the test server, you must have the same permissions required to deploy to those parcels in the main network.</blockquote>

<p>Players are never directed to this server, the only way to access it is to explicitly provide a URL parameter to connect to it.</p>

<p>If you’re working in a confidential project that you don’t want to unveil until launch, note that the test server is relatively hidden from players, but anyone explicitly using the test server’s URL could potentially run into it.</p>

<h3>Via the Decentraland Editor</h3>

<p>To deploy a scene to the test server:</p>

<p>Open VSCode in a Decentraland scene project.</p>

<p>Click on the Decentraland icon on the left sidebar.</p>

<p>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</p>

<code>Publish scene to test server</code>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<em>play.decentraland.org/?&CATALYST=peer-testing.decentraland.org</em>

<h3>Via the CLI</h3>

<p>To deploy to the test server, run:</p>

<code>dcl deploy --target peer-testing.decentraland.org</code>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<h2>Verify deployment success</h2>

<p>Once you deployed your scene, these changes will take a few minutes to be propagated throughout the various content servers in the network. If you enter Decentraland right after deploying, you might still see the previous version of your content, depending of what realm you enter.</p>

<p>After you sign to authorize the deployment of your scene, the signing dapp will start displaying confirmations that the new version of your content has been propagated throughout all of the servers in the network,</p>

<p>You’ll see a list of each of the servers that make up Decentraland’s content network. For each server, it specifies the timestamp of the last uploaded change on that parcel. Each one of these servers refers to a different realm, you can reference how these server names map to realm names in the</p>

<p>.</p>

<p>You can also obtain this information at any time by running the following command on the command line console:</p>

<code>npx @dcl/opscli pointer-consistency --pointer '0,0'</code>

<strong>📔 Note</strong>

<blockquote>: Use the coordinates of your scene instead of</blockquote>

<code>0,0</code>

<blockquote>. If your scene has multiple parcels, any one of its parcels will produce the same output. If the coordinates start with a negative number, add a</blockquote>

<code>\</code>

<blockquote>at the start of the coordinates to prevent the</blockquote>

<code>-</code>

<blockquote>character from being misinterpreted by the command line.</blockquote>

<h2>Automatic deployments</h2>

<p>If you regularly make changes to your scene’s content and want to implement a streamlined publication pipeline, you can automate the deployment of your scene via a GitHub action.</p>

<p>For this, you must first store your scene in a GitHub project. You can then set a</p>

<p>with the following script, which runs every time there’s a merge to the</p>

<code>main</code>

<p>branch. The script installs any dependencies, builds the project and then deploys it to Decentraland.</p>

<p>Important: For this process to run, you must set a wallet’s private key as an environment variable in GitHub, this is used to sign the deployment. As always, be very careful with keeping the private keys secure. Do NOT use the private key of the account that actually owns the land tokens, as that would have very big risks. Instead, delegate operator rights to a disposable wallet that owns no valuable tokens. If this private key is ever leaked somehow, you can easily revoke those operator rights from the account and set up a new wallet.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/publishing/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-limitations/

<title>Scene limitations | Decentraland Documentation</title>

<strong>Scene limitations</strong>

<h1>Scene limitations</h1>

<p>In order to improve performance in the metaverse, we have established a set of limits that every scene must follow. If a

scene exceeds these limitations, then the parcel won’t be loaded and the preview will display an error message.</p>

<p>For a straight-forward reference of what limitations you’ll have for a specific number of parcels, check the following table:</p>

<h2>Scene limitation rules</h2>

<p>Below are the maximum number of elements that a scene is allowed to render at the same time:</p>

<em>n</em>

<p>represents the number of parcels that a scene occupies.</p>

<strong>Triangles:</strong>

<code>n x 10000</code>

<p>Total amount of triangles for all the models in the scene.</p>

<strong>Entities:</strong>

<code>n x 200</code>

<p>Amount of entities in the scene.</p>

<strong>Bodies:</strong>

<code>n x 300</code>

<p>Amount of meshes in the scene.</p>

<strong>Materials:</strong>

<code>log2(n+1) x 20</code>

<p>Amount of materials in the scene. It includes materials imported as part of models.</p>

<strong>Textures:</strong>

<code>log2(n+1) x 10</code>

<p>Amount of textures in the scene. It includes textures imported as part of models.</p>

<strong>Height:</strong>

<code>log2(n+1) x 20</code>

<p>Height in meters.</p>

<p>Important: Only entities that are currently being rendered in the scene are counted for these limits. If your scene switches between 3D models, what matters is the rendered models at any point in time, not the total sum. Player avatars and any items brought by a player from outside the scene don’t count for calculating these limits either.</p>

<strong>File size:</strong>

<code>15 MB per parcel - 300 MB max</code>

<p>Total size of the files uploaded to the content server. Includes 3D models and audio. Doesn’t include files that aren’t uploaded, such as node.js packages.</p>

<strong>File count:</strong>

<code>200 files per parcel</code>

<p>Total count of the files uploaded. Includes 3D models and audio. Doesn’t include files that aren’t uploaded, such as node.js packages.</p>

<strong>Max file size</strong>

<code>50 MB per file</code>

<p>No individual file of any type in the scene can exceed 50 MB, no matter how many parcels the scene has.</p>

<h2>Optimizing</h2>

<p>See</p>

<p>for tips about how you can keep your scene below these limits and make it run smoother for players.</p>

<h2>Scene boundaries</h2>

<p>When running a preview, any content that is located outside the parcel boundaries is highlighted in red when rendered. If any content is outside these boundaries, you won’t be allowed to deploy this scene to Decentraland.</p>

<p>If the tip of a large object leaves the boundaries, this object is considered out of bounds too.</p>

<p>A single parcel scene measures 16 meters x 16 meters. If the scene has multiple parcels, the dimensions vary depending on the arrangement of the parcels.</p>

<p>It’s possible to position entities underground, to either hide them or to have only a portion of them emerge. A scene can’t have tunnels that go below the default ground height, players can’t travel below the</p>

<code>y = 0</code>

<p>height.</p>

<h2>Shader limitations</h2>

<p>3D models used in decentraland must use supported shaders and materials. See</p>

<p>for a list of supported shaders.</p>

<h2>Lighting</h2>

<p>The scene’s lighting conditions can’t be changed from the default setting.</p>

<h2>Texture size constraints</h2>

<p>Texture sizes must use width and height numbers (in pixels) that match the following numbers:</p>

<code>1, 2, 4, 8, 16, 32, 64, 128, 256, 512</code>

<p>This sequence is made up of powers of two:</p>

<code>f(x) = 2 ^ x</code>

<p>. 512 is the maximum number we allow for a texture size. This is a fairly common requirement among other rendering engines, it’s there due internal optimizations of the graphics processors.</p>

<p>The width and height don’t need to have the same number, but they both need to belong to this sequence.</p>

<strong>The recommended size for textures is 512x512</strong>

<p>, we have found this to be the optimal size to be transported through domestic networks and to provide reasonable loading/quality experiences.</p>

<p>Examples of other valid sizes:</p>

<code>32x32

64x32

512x256

512x512</code>

<strong>📔 Note</strong>

<blockquote>: Although textures of arbitrary sizes sometimes work, they are also often rendered with bugs and are more unstable. We strongly advise that all your textures match these sizes.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-limitations/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/performance-optimization/

<title>Performance optimization | Decentraland Documentation</title>

<strong>Performance optimization</strong>

<h1>Performance optimization</h1>

<p>There are several aspects you can optimize in your scenes to ensure the best possible experience for players who visit them. This document covers some best practices that can make a big difference in how fast your scene loads and how smoothly it runs for players that are on it or on neighboring scenes.</p>

<p>Keep in mind that many players may be visiting Decentraland using hardware that is not built for gaming, and via the browser, which limits how much of the hardware’s processing power is available to use. The experience of visiting your scene should be smooth for everyone.</p>

<p>The Decentraland explorer enforces many optimizations at engine level. These optimizations make a big difference, but the challenge of rendering multiple user-generated experiences simultaneously in a browser is a big one. We need your help to make things run smoothly.</p>

<h2>Timing</h2>

<h4>Video playing</h4>

<p>Playing videos is one of the most expensive things for the engine to handle. If your scene includes videos, make sure that only</p>

<em>ONE</em>

<p>VideoTexture is in use at a time. You can have dozens of planes sharing the same VideoTexture without significant impact on performance, but as soon as you add a second VideoTexture, its effects on framerate become very noticeable.</p>

<p>You should also avoid having videos playing in regions where they can’t be seen. For example, if you have a screen indoors, toggle the video using a trigger area based on when the player walks in and out.</p>

<strong>💡 Tip</strong>

<blockquote>: A trick several scenes have used is to stream a single video with multiple regions that are mapped differently to different planes. Each video screen uses</blockquote>

<blockquote>to only show a distinct part of the VideoTexture. Thanks to this, it can appear that there are separate videos playing without the cost of multiple VideoTextures.</blockquote>

<strong>💡 Tip</strong>

<blockquote>: When players are standing outside your scene, VideoTextures are not updated on every frame. This helps reduce the impact for surrounding scenes. It’s nevertheless ideal only turn on the playing of any videos when players</blockquote>

<blockquote>.</blockquote>

<h4>Lazy loading</h4>

<p>If your scene is large, or has indoor areas that are not always visible, you can choose to not load the entire set of entities from the very start. Instead, load the content by region as the player visits different parts of the scene. This can significantly reduce the load time of the scene, and also the amount of textures and 3d content that the engine needs to handle on every frame.</p>

<p>For example, the main building of a museum could load from the start, but the paintings on each floor only load for each player as they visit each floor.</p>

<p>See</p>

<p>for how that might work.</p>

<p>For the best result in terms of avoiding hiccups, hide entities by switching their shape’s</p>

<code>visible</code>

<p>property to false. With this approach, you add them to the engine when creating them, but you simply don’t make their models visible.</p>

<p>An alternative is to not add the entities to the engine until needed. This may result in some hiccups when the entities appear for the first time, and they might also take a couple of seconds to become visible. The advantage of this approach is that it’s a valid way to get around the</p>

<p>. Keep in mind that the scene limitations count is for the content that is being rendered in the scene at any given time, not for the total content that could be rendered. Loading and unloading parts of the scene should allow you to work around those limitations.</p>

<strong>📔 Note</strong>

<blockquote>: Entities that are not visible but are added to the engine do count towards the scene limitations.</blockquote>

<p>You can also toggle animations on or off for entities that are far or occluded. For example, for an NPC that plays a very subtle idle animation, you could make it only play that animation when the player is at less than 20 meters away. Use a trigger area around the NPC and toggle its animations on or off accordingly.</p>

<strong>💡 Tip</strong>

<blockquote>: When an entity is far away and small enough, it’s culled by the engine. This culling helps at a drawcall level, removing entities from the engine is always better. This culling also doesn’t take occlusion by other entities into account, so entities that are not so small but hidden by a wall are still rendered.</blockquote>

<h4>Async blocks</h4>

<p>Blocks of</p>

<p>are processed in a separate thread from the rest of the scene, to prevent blocking the progress of everything else.</p>

<p>Any processes that rely on responses from asynchronous services, such as</p>

<code>getPlayerData()</code>

<p>or</p>

<code>getCurrentRealm()</code>

<p>should always run in async blocks, as they otherwise block the rest of the scene’s loading while waiting for a response. The same applies to any calls to third party servers.</p>

<p>Note that the scene will be considered fully loaded when everything that isn’t async is done. Async processes might still be running when the player enters the scene. Avoid situations where an async process results in the loading of an entity that could potentially get the player stuck inside of its geometry.</p>

<h4>Rely on Events</h4>

<p>Try to make the scene’s logic rely on listening to</p>

<p>as much as possible, instead of running checks every frame.</p>

<p>The</p>

<code>update()</code>

<p>function in a</p>

<p>runs on every frame, 30 times per second (ideally). Avoid doing recurring checks if you can instead subscribe to an event.</p>

<p>For example, instead of constantly checking the player’s wearables, you can subscribe to the</p>

<code>onProfileChanged</code>

<p>event, and check the player’s wearables only when they’ve changed.</p>

<p>If you must use a system, avoid doing checks or adjustments on every single frame. You can include a timer as part of the update function and only run the check once per every full second, or whatever period makes sense.</p>

<h2>Optimize 3d models</h2>

<p>There are several ways in which your 3d models can be optimized to be lighter.</p>

<li>When possible, share textures across 3d models. A good practice is to use a single texture as an atlas map, shared across all models in the scene. It’s better to have 1 large shared texture of 1024x1024 pixels instead of several small ones.</li>

<strong>📔 Note</strong>

<blockquote>: Avoid using the same image file for both the albedo texture and the normal map or the emissive map of a material. Use separate files, even if identical. Assigning a same image file to different types of texture properties may introduce unwanted visual artifacts when compressed to asset bundles.</blockquote>

<em>.glb</em>

<p>is a compressed format, it will always weigh less than a</p>

<em>.gltf</em>

<p>. On the other hand, with</p>

<em>.gltf</em>

<p>it’s easy to share texture images by exporting textures as a separate file. You can have the best of both worlds by using the</p>

<p>, that allows you to have</p>

<em>.glb</em>

<p>models with external texture files.</p>

<p>Avoid using blended transparencies. Blended transparencies have to bypass quite a few of the rendering optimizations. If possible, favor opaque or alpha tested geometry.</p>

<p>Avoid skinned meshes. They can drag down the performance significantly.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more on 3d model best practices in the</blockquote>

<h4>Asset Bundle conversion</h4>

<p>About once a day, the Decentraland content servers run a process to compress every</p>

<em>.gltf</em>

<p>and</p>

<em>.glb</em>

<p>model in every newly deployed scene to asset bundle format. This format is</p>

<em>significantly</em>

<p>lighter, making scenes a lot faster to load and smoother to run on the browser.</p>

<strong>💡 Tip</strong>

<blockquote>: When planning an event in Decentraland, make sure you deploy your scene a day in advance, so that the models are all converted to asset bundles by then. If you don’t want to spoil the surprize before the event, you can deploy a version of your scene that includes all the final 3d models in the project folder, but where these are not visible or where their size is set to 0.</blockquote>

<strong>📔 Note</strong>

<blockquote>: If you make</blockquote>

<em>any</em>

<blockquote>change to a 3d model file, even if just a name change, it will be considered a new file, and must be converted to asset bundle format again.</blockquote>

<h2>Connectivity</h2>

<p>If your scene connects to any 3rd party servers or uses the</p>

<p>to send messages between players, there are also some things you might want to keep in mind.</p>

<li>Your scene should only have one active WebSockets connection at a time.</li>

<li>HTTP calls are funneled by the engine so that only one is handled at a time. Any additional requests are queued internally and must wait till other requests are completed. This queuing process is handled automatically, you don’t need to do anything.</li>

<li>When using the</li>

<li>to send messages between players, be mindful that all messages are sent to all other players in the server island. Avoid situations where an incoming message directly results in sending another message, as the number of messages can quickly grow exponentially when there’s a crowd in the scene.</li>

<h2>Scene UI</h2>

<p>Scene UIs can become costly to render when they are made up of many individual elements. Keep in mind that each UI element requires a separate drawcall on the engine.</p>

<strong>💡 Tip</strong>

<blockquote>: Try to merge multiple elements into one single image. For example if you have a menu with multiple text elements, it’s ideal to have the text from the tiles and any additional images baked into the background image. That saves the engine from doing one additional drawcall per frame for each text element.</blockquote>

<p>Avoid making adjustments to the UI on every frame, those are especially costly and can end up getting queued. For example, if there’s a health bar in your UI that should shrink over period of time, players would probably not notice a difference between if it updates at 10 FPS instead of at 30 FPS (on every frame). The system that updates this bar can use a brief timer that counts 100 milliseconds, and only affect the UI when this timer reaches 0.</p>

<p>Avoid having many hidden UI elements, these also have an effect on performance even if not being rendered. When possible, try to create UI components on demand.</p>

<h2>Monitor Performance</h2>

<p>The best metric to know how well a scene is performing is the FPS (Frames Per Second). In preview, you can see the current scene FPS in the debug panel. You should aim to always have 30 FPS or more.</p>

<p>In the deployed scene, you can toggle the panel that shows these metrics by writing</p>

<code>/showfps</code>

<p>into the chat window.</p>

<p>One of the main bottlenecks in a scene’s performance is usually the sending of messages between the scene’s code and the engine.</p>

<p>When you run a scene in preview, note that on the top-right corner it says “Y = Toggle Panel”. Hit Y on the keyboard to open a panel with some useful information that gets updated in real time.</p>

<p>As you interact with things that involve messages between the SDK and the engine, you’ll notice the ‘Processed Messages’ number grows. You should closely watch the ‘Pending on Queue’ number, it should always be 0 or close to 0. This tells you how many of these messages didn’t get to be processed, and got pushed to a queue. If the ‘Pending on Queue’ count starts to grow, then you’ve entered the danger zone and should think about doing more optimizations to your scene.</p>

<strong>📔 Note</strong>

<blockquote>: Don’t keep the panel open while you’re not using it, since it has a negative impact on performance.</blockquote>

<p>Keep in mind that the performance you experience in preview may differ from that in production:</p>

<li>Surrounding neighboring scenes might have a negative impact</li>

<li>The compression of the scenes’ 3d models into asset bundles can have a positive impact</li>

<li>Some players visiting your scene may be running on less powerful hardware</li>

<p>It’s always a good practice to try deploying your scene first to the</p>

<p>to do some more thorough testing.</p>

<p>Always ask players for feedback. Never take for granted that how you experience the scene is the same for everyone else.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/performance-optimization/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/materials/#using-textures

<title>Materials via code | Decentraland Documentation</title>

<strong>Materials via code</strong>

<h1>Materials via code</h1>

<h2>Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by setting them as a component.</p>

<p>You can either set a</p>

<code>Material</code>

<p>or a</p>

<code>BasicMaterial</code>

<p>component. Each entity can only have one of these. Both components have several fields that allow you to configure the properties of the material, add a texture and set the texture’s mapping.</p>

<p>You can’t add material components to</p>

<em>glTF</em>

<p>models.</p>

<em>glTF</em>

<p>models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See</p>

<p>for more details.</p>

<h2>Create and apply a material</h2>

<p>The following example creates a material, sets some of its fields to give it a red color and metallic properties, and then applies the material to an entity that also has a</p>

<code>boxShape</code>

<p>component.</p>

<p>See</p>

<p>) for a full list of all the fields that can be configured in a</p>

<code>Material</code>

<p>of</p>

<code>BasicMaterial</code>

<p>component.</p>

<h2>Basic materials</h2>

<p>Instead of the</p>

<code>Material</code>

<p>component, you can define a material through the</p>

<code>BasicMaterial</code>

<p>entity. This creates materials that are shadeless and are not affected by light. This is useful for creating user interfaces that should be consistently bright, it can also be used to give your scene a more minimalist look.</p>

<strong>📔 Note</strong>

<blockquote>: Basic materials have some property names that are different from those in normal materials. For example it uses</blockquote>

<code>texture</code>

<blockquote>instead of</blockquote>

<code>albedoTexture</code>

<blockquote>.</blockquote>

<h2>Material colors</h2>

<p>Give a material a plain color. In a</p>

<code>BasicMaterial</code>

<p>component, you set the</p>

<code>color</code>

<p>field. In a</p>

<code>Material</code>

<p>component, you set the</p>

<code>albedoColor</code>

<p>field. Albedo colors respond to light and can include shades on them.</p>

<p>All color fields are either of type</p>

<code>Color3</code>

<p>or</p>

<code>Color4</code>

<p>.</p>

<code>Color3</code>

<p>holds three values, for</p>

<em>Red</em>

<p>,</p>

<em>Green</em>

<p>and</p>

<em>Blue</em>

<p>. Each of these numbers is between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>.</p>

<code>Color4</code>

<p>holds those same three values and a fourth value for</p>

<em>Alpha</em>

<p>, also between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>, where</p>

<em>0</em>

<p>is completely transparent and</p>

<em>1</em>

<p>is completely opaque.</p>

<strong>📔 Note</strong>

<blockquote>: If you set any color in</blockquote>

<code>albedoColor</code>

<blockquote>to a value higher than</blockquote>

<em>1</em>

<blockquote>, it will appear as</blockquote>

<em>emissive</em>

<blockquote>, with more intensity the higher the value. So for example,</blockquote>

<code>new Color3(15, 0, 0)</code>

<blockquote>produces a very bright red glowing color.</blockquote>

<p>You can also pick predetermined colors using the following functions of the</p>

<code>Color3</code>

<p>object:</p>

<p>You can otherwise pick a random color using the following function:</p>

<p>If you prefer to specify a color using hexadecimal values, as is often done in JavaScript web development, you can do so using the</p>

<code>.FromHexString()</code>

<p>function</p>

<p>The</p>

<code>Color3</code>

<p>object also includes a lot of other functions to add, substract, compare, lerp, or convert the format of colors.</p>

<p>You can also edit the following fields in a</p>

<code>Material</code>

<p>component to fine-tune how its color is percieved:</p>

<em>emissiveColor</em>

<li>: The color emitted from the material.</li>

<em>ambientColor</em>

<li>: AKA</li>

<em>Diffuse Color</em>

<li>in other nomenclature.</li>

<em>reflectionColor</em>

<li>: The color reflected from the material.</li>

<em>reflectivityColor</em>

<li>: AKA</li>

<em>Specular Color</em>

<li>in other nomenclature.</li>

<h4>Change a color gradually</h4>

<p>Change a color gradually with linear interpolation between two colors, using the</p>

<code>.Lerp()</code>

<p>function.</p>

<p>The example above changes the color of a material from red to yellow, incrementally shifting it on every frame.</p>

<h2>Using textures</h2>

<p>Reference an image file as a texture by creating a</p>

<code>Texture</code>

<p>component. You can then reference this texture component in the fields of both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>components.</p>

<p>In a</p>

<code>Material</code>

<p>component, you can set the</p>

<code>albedoTexture</code>

<p>field to a texture image. Albedo textures respond to light and can include shades on them.</p>

<p>While creating a texture, you can also pass additional parameters:</p>

<code>samplingMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered</li>

<code>wrap</code>

<li>: Determines how a texture is tiled onto an object (see</li>

<li>)</li>

<h4>Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<p>The URL must start with</p>

<code>https</code>

<p>,</p>

<code>http</code>

<p>URLs aren’t supported. The site where the image is hosted should also have</p>

<p>that permit externally accessing it.</p>

<h4>Textures on basic materials</h4>

<p>In a</p>

<code>BasicMaterial</code>

<p>component, you can set the</p>

<code>texture</code>

<p>field to an image texture. This will render a texture that isn’t affected by lighting.</p>

<h4>Multi-layered textures</h4>

<p>It also allows you to use several image files as layers to compose more realistic textures, for example including a</p>

<code>bumpTexture</code>

<p>and a</p>

<code>refractionTexture</code>

<p>.</p>

<p>In the example above, the image for the material is located in a</p>

<code>materials</code>

<p>folder, which is located at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<p>: We recommend keeping your texture image files separate in a</p>

<code>/materials</code>

<p>folder inside your scene.</p>

<p>A material can have multiple layers of texture, you can see what these are on a source code editor by clicking</p>

<code>.</code>

<p>and letting the autocomplete menu show you the list.</p>

<h4>Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure</p>

<em>uv</em>

<p>properties on the</p>

<p>.</p>

<p>You set</p>

<em>u</em>

<p>and</p>

<em>v</em>

<p>coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more</p>

<em>uv</em>

<p>coordinates need to be defined on the texture, a plane for example needs to have 8</p>

<em>uv</em>

<p>points defined, 4 for each of its two faces.</p>

<p>The following example includes a function that simplifies the setting of uvs. The</p>

<code>setUVs</code>

<p>function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<p>For setting the UVs for a</p>

<code>BoxShape</code>

<p>component, the same structure applies. Each of the 6 faces of the cube takes 4 values, one for each corner. All of these 24 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The</p>

<code>Texture</code>

<p>component lets you configure the wrapping mode by setting the</p>

<code>wrap</code>

<p>field. The wrapping mode can be</p>

<code>CLAMP</code>

<p>,</p>

<code>WRAP</code>

<p>or</p>

<code>MIRROR</code>

<p>.</p>

<code>CLAMP</code>

<li>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>

<code>WRAP</code>

<li>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>

<code>MIRROR</code>

<li>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>wrap</code>

<blockquote>property must be set when instancing the texture, after that it’s a read-only property.</blockquote>

<p>The example above sets the wrapping mode to</p>

<code>MIRROR</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Uv properties are currently only available on</blockquote>

<code>PlaneShape</code>

<blockquote>and on</blockquote>

<code>BoxShape</code>

<blockquote>components.</blockquote>

<h4>Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various</p>

<p>algorithms that exist to compensate for this in different ways. The</p>

<code>Texture</code>

<p>object uses the</p>

<em>bilinear</em>

<p>algorithm by default, but it lets you configure it to use the</p>

<em>nearest neighbor</em>

<p>or</p>

<em>trilinear</em>

<p>algorithms instead by setting the</p>

<code>samplingMode</code>

<p>property.</p>

<p>The example above uses a nearest neighbor algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</p>

<h2>Avatar Portraits</h2>

<p>To display a thumbnail image of any player, create an</p>

<code>AvatarTexture</code>

<p>, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<h2>Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a</p>

<code>Color4</code>

<p>, and set the 4th value to something between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. The closer to</p>

<em>1</em>

<p>, the more opaque it will be.</p>

<p>To make a material with texture transparent:</p>

<li>Set an image in</li>

<code>alphaTexture</code>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</blockquote>

<li>Optionally set the</li>

<code>transparencyMode</code>

<li>to: -</li>

<code>OPAQUE</code>

<li>: No transparency at all -</li>

<code>ALPHATEST</code>

<li>: Each pixel is either completely opaque or completely transparent, based on a threshold. -</li>

<code>ALPHABLEND</code>

<li>: Intermediate values are possible based on the value of each pixel.</li>

<li>If you set the</li>

<code>transparencyMode</code>

<li>to</li>

<code>ALPHATEST</code>

<li>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the</li>

<code>alphaTest</code>

<li>property between</li>

<em>0</em>

<li>and</li>

<em>1</em>

<li>. By default its value is</li>

<em>0.5</em>

<li>.</li>

<h2>Casting no shadows</h2>

<p>To prevent a material from casting shadows over other objects, both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>have a</p>

<code>castShadows</code>

<p>property that you can set to</p>

<em>false</em>

<p>. This property is always</p>

<em>true</em>

<p>by default.</p>

<h2>Reuse materials</h2>

<p>If multiple entities in your scene use a same material, there’s no need to create an instance of the material component for each. All entities can share one same instance, this keeps your scene lighter to load and prevents you from exceeding the maximum amount of materials per scene.</p>

<h2>Video playing</h2>

<p>To stream video from a URL into a material, or play a video from a file stored in the scene, see</p>

<p>.</p>

<p>The video is used as a texture on a material, you can set any of the other properties of materials to alter how the video screen looks.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/materials/#using-textures

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/materials/

<title>Materials | Decentraland Documentation</title>

<strong>Materials</strong>

<h1>Materials</h1>

<p>Materials are embedded into a</p>

<em>.gltf</em>

<p>or</p>

<em>.glb</em>

<p>file.</p>

<p>This document refers to materials that are imported in a 3D model. For materials defined via code to apply onto primitive shapes, see</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: You can’t currently dynamically change the materials of a 3D model from your scene’s code, unless this is a primitive shape.</blockquote>

<strong>Shader Support</strong>

<p>Not all shaders can be used in models that are imported into Decentraland. Make sure you use one of the following:</p>

<strong>Standard materials:</strong>

<li>any shaders are supported, for example diffuse, specular, transparency, etc.</li>

<strong>PBR (Physically Based Rendering) materials</strong>

<li>: This shader is more flexible, as it includes properties like diffuse, roughness, metalness and emission that allow you to configure how a material interacts with light.</li>

<p>The image below shows two identical models, created with the same colors and textures. The model on the left uses all</p>

<em>PBR</em>

<p>materials, some of them include</p>

<em>metalness</em>

<p>,</p>

<em>transparency</em>

<p>, and</p>

<em>emissiveness</em>

<p>. The model on the right uses all</p>

<em>standard</em>

<p>materials, some including</p>

<em>transparency</em>

<p>and</p>

<em>emissiveness</em>

<p>.</p>

<strong>PBR Properties that currently works with Decentraland Engine</strong>

<li>Base Color</li>

<li>Metallic</li>

<li>Roughness</li>

<li>Specular</li>

<li>Emissive</li>

<li>Emission Strength</li>

<li>Alpha</li>

<li>Normal</li>

<p>In order to visualize how these properties behavies in world you can go to this</p>

<p>to find different objects and materials and how they interact with lights and world environment.</p>

<strong>Base/Diffuse Color</strong>

<p>Defines the the base color of the object surface. By itself it doesn’t have any affectance by the lightning, that’s why it is combined to other nodes such as roughness, metallic, specular, etc.</p>

<strong>Metallic</strong>

<p>A metallic shader refers to a type of rendering technique used to simulate the appearance of metallic surfaces. A metallic shader takes into account the physical properties of metals and how they interact with light to produce the characteristic shiny and reflective qualities of metal.</p>

<strong>Roughness</strong>

<p>Roughness materials are related to realistic simulation of how light interacts with the material’s surface. Normally the roughness maps are used to give to the models a range of “smoothness” or “roughness” in their surfaces. A grayscale value texture map is normally used to provide information of this type.</p>

<p>This property blends between a non-metallic and metallic material model. A value of 1.0 gives a fully specular reflection tinted with the base color, without diffuse reflection or transmission. At 0.0 the material consists of a diffuse or transmissive base layer, with a specular reflection layer on top.</p>

<strong>Specular</strong>

<p>In a Physically-Based Rendering (PBR) shader, the specular properties refer to how light interacts with a surface in terms of its reflectivity and shininess. Specular reflection is the mirror-like reflection of light off a surface. In PBR, this property is used to control how much light a surface reflects in a mirror-like manner. Materials like metals typically have high specular reflection, creating sharp, bright highlights, while non-metallic materials like plastics have lower specular reflection, resulting in broader and softer highlights.</p>

<strong>Alpha</strong>

<p>You can set a material to be</p>

<em>transparent</em>

<p>. Transparent materials can be seen through to varying degrees, depending on their</p>

<em>alpha</em>

<p>. To do this, activate the transparency property of the material and then set its</p>

<em>alpha</em>

<p>to the desired amount. An alpha of 1 will make the material completely opaque, an alpha of 0 will make it invisible.</p>

<p>The image below shows two identical models created with standard materials. The one on the left uses only opaque materials, the one on the right uses both transparent and opaque materials in some of its parts.</p>

<blockquote>💡 Remember that using transparent materials is always more expensive in terms of performance than diffuse materials. Always try to keep the transparent materials as low as you can.</blockquote>

<p>There are two main different transparency modes:</p>

<em>Alpha Clip</em>

<p>and</p>

<em>Alpha Blend</em>

<p>. The main differences are:</p>

<strong>Alpha Clip:</strong>

<li>Alpha Clip render absolut values being 0 or 1 given a clip threshold of a grayscale value. The previous color will be overwritten by the surface color, but only if the alpha value is above the Clip Threshold value.</li>

<strong>Alpha Blend:</strong>

<li>Alpha Blend interpolates the values between 0 and 1. You can use alpha blending to overlay the surface color on top of the previous color.</li>

<strong>🔥Optimization Tip🔥</strong>

<blockquote>Unless you specifically want to be able to have an intermediate level of transparency,</blockquote>

<strong>it’s always more performant for rendering to use</strong>

<em>Alpha Clip</em>

<strong>instead of</strong>

<em>Alpha Blend</em>

<strong>.</strong>

<strong>⚠️ Sorting Issues</strong>

<p>When you use transparent blend modes in your game, it’s crucial to consider the order in which the color blending takes place. This is because the final output color can be significantly impacted by the blending order. Currently, the engine only supports per-object sorting, which means that it automatically sorts all transparent surfaces based on object origin. However, per-fragment (pixel) sorting and per-triangle sorting are not currently supported.</p>

<p>To avoid issues related to sorting, it’s best to avoid using objects with both alpha clip and alpha blend on the same mesh. This can help prevent unexpected blending artifacts and ensure that your game looks its best.</p>

<strong>Emissive</strong>

<p>You can also make a material</p>

<em>emissive</em>

<p>. Emissive materials cast their own light. Note that when rendered, they don’t actually illuminate nearby objects in the scene, they just seem to have a blurred glow around them.</p>

<p>The image below shows two identical models created with standard materials. The one on the right has glowing emissive materials on some of its surfaces.</p>

<em>To make a material emissive in Blender, simply add an</em>

<code>emission</code>

<em>shader to the material.</em>

<strong>Emissive Strenght</strong>

<p>Strength of the emitted light. A value of 1.0 will ensure that the object in the image has the exact same color as the Emission Color, i.e. make it ‘shadeless’.</p>

<em>You can check in the</em>

<em>how the emission strenght behavies in world</em>

<strong>Normal</strong>

<p>The “normal” node in a PBR shader is a fundamental component used to control the surface normals of a material. Normals are vectors that define the direction perpendicular to a surface at a specific point, and they play a crucial role in determining how light interacts with the surface.</p>

<strong>Vertex Painting</strong>

<p>Vertex painting of 3D models isn’t currently supported by Decentraland’s engine.</p>

<strong>Material Limitations</strong>

<p>Take into account that material limits per parcel are:</p>

<p>log2(n+1) x 20 Amount of materials in the scene. It includes materials imported as part of models.</p>

<p>It’s important to take into account that each material represent one draw call per objetc so it’s crucial to keep the materials as minimun as possible and try to reutilize materials as much as possible doing techniques like Texture Atlases, this also is going to benefit the scene having a cohesive style between the assets of your scene.</p>

<strong>Material Naming</strong>

<p>In order to have an organized and healthy art pipeline we recommend to name your materials properly. One way to do it is using this convention method.</p>

<code><Object>_<Classification>_<Sub-Classification(optional)>_<_MAT></code>

<p>So for example, let’s say we did 2 different trees, one that is emissive and glowy for spring and another cold and metallic for winter. We could name the materials:</p>

<em>“TreeSpring_Emissive_MAT”</em>

<p>and another one</p>

<em>“TreeWinter_Metallic_MAT”</em>

<p>In conclusion,</p>

<li>🟢</li>

<strong>Prefer</strong>

<li>using names starting with the object and clasification:</li>

<em>“Wood_Oak_MAT”</em>

<li>,</li>

<em>“SciFiFence_Metallic_MAT”</em>

<li>, etc.</li>

<li>🔴</li>

<strong>Avoid</strong>

<li>using names like</li>

<em>“Material009”</em>

<li>,</li>

<em>“material1”</em>

<li>, which makes the scene and models really difficult to track and analize.</li>

<strong>Best Practices For Materials</strong>

<li>If your scene includes multiple models that use the same texture, reference the texture as an external file instead of having it embedded in the 3D model.</li>

<p>Embedded textures get duplicated for each model and add to the scene’s size.</p>

<em>.glb</em>

<p>files have their textures embedded by default, but you can use</p>

<p>to extract it outside.</p>

<p>Note: After referencing a file for a texture that won’t be embedded, make sure that file won’t be moved or renamed, as otherwise the reference to the file will be lost. The file must also be inside the scene folder so that it’s uploaded together with the scene.</p>

<li>When setting transparency of a material, try to always use</li>

<em>Alpha clip</em>

<li>rather than</li>

<em>Alpha blend</em>

<li>, unless you specifically need to have a material that’s partially transparent (like glass). This will avoid problems where the engine renders the wrong model in front of the other.</li>

<li>As a rule of thumbs remember to always set</li>

<em>backface culling</em>

<li>in your materials. This will make your scene more perfermant giving that the engine is going to render only the visible face of your models. Only untoggle</li>

<em>backface culling</em>

<li>in case you need a model to be renderer in both sides (for example, a group of leafs of a tree made by 3D planes).</li>

<li>Use the Decentraland</li>

<li>, which are pre-loaded by players, making your assets render a lot faster.</li>

<li>Read</li>

<li>for a detailed overview of a full art pipeline that uses PBR textures in glTF models.</li>

<li>You can find a detailed reference about how to create glTF compatible materials with Blender in</li>

<li>.</li>

<li>Find free, high quality PBR textures in</li>

<li>.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/materials/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/materials/

<title>Materials via code | Decentraland Documentation</title>

<strong>Materials via code</strong>

<h1>Materials via code</h1>

<h2>Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by setting them as a component.</p>

<p>You can either set a</p>

<code>Material</code>

<p>or a</p>

<code>BasicMaterial</code>

<p>component. Each entity can only have one of these. Both components have several fields that allow you to configure the properties of the material, add a texture and set the texture’s mapping.</p>

<p>You can’t add material components to</p>

<em>glTF</em>

<p>models.</p>

<em>glTF</em>

<p>models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See</p>

<p>for more details.</p>

<h2>Create and apply a material</h2>

<p>The following example creates a material, sets some of its fields to give it a red color and metallic properties, and then applies the material to an entity that also has a</p>

<code>boxShape</code>

<p>component.</p>

<p>See</p>

<p>) for a full list of all the fields that can be configured in a</p>

<code>Material</code>

<p>of</p>

<code>BasicMaterial</code>

<p>component.</p>

<h2>Basic materials</h2>

<p>Instead of the</p>

<code>Material</code>

<p>component, you can define a material through the</p>

<code>BasicMaterial</code>

<p>entity. This creates materials that are shadeless and are not affected by light. This is useful for creating user interfaces that should be consistently bright, it can also be used to give your scene a more minimalist look.</p>

<strong>📔 Note</strong>

<blockquote>: Basic materials have some property names that are different from those in normal materials. For example it uses</blockquote>

<code>texture</code>

<blockquote>instead of</blockquote>

<code>albedoTexture</code>

<blockquote>.</blockquote>

<h2>Material colors</h2>

<p>Give a material a plain color. In a</p>

<code>BasicMaterial</code>

<p>component, you set the</p>

<code>color</code>

<p>field. In a</p>

<code>Material</code>

<p>component, you set the</p>

<code>albedoColor</code>

<p>field. Albedo colors respond to light and can include shades on them.</p>

<p>All color fields are either of type</p>

<code>Color3</code>

<p>or</p>

<code>Color4</code>

<p>.</p>

<code>Color3</code>

<p>holds three values, for</p>

<em>Red</em>

<p>,</p>

<em>Green</em>

<p>and</p>

<em>Blue</em>

<p>. Each of these numbers is between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>.</p>

<code>Color4</code>

<p>holds those same three values and a fourth value for</p>

<em>Alpha</em>

<p>, also between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>, where</p>

<em>0</em>

<p>is completely transparent and</p>

<em>1</em>

<p>is completely opaque.</p>

<strong>📔 Note</strong>

<blockquote>: If you set any color in</blockquote>

<code>albedoColor</code>

<blockquote>to a value higher than</blockquote>

<em>1</em>

<blockquote>, it will appear as</blockquote>

<em>emissive</em>

<blockquote>, with more intensity the higher the value. So for example,</blockquote>

<code>new Color3(15, 0, 0)</code>

<blockquote>produces a very bright red glowing color.</blockquote>

<p>You can also pick predetermined colors using the following functions of the</p>

<code>Color3</code>

<p>object:</p>

<p>You can otherwise pick a random color using the following function:</p>

<p>If you prefer to specify a color using hexadecimal values, as is often done in JavaScript web development, you can do so using the</p>

<code>.FromHexString()</code>

<p>function</p>

<p>The</p>

<code>Color3</code>

<p>object also includes a lot of other functions to add, substract, compare, lerp, or convert the format of colors.</p>

<p>You can also edit the following fields in a</p>

<code>Material</code>

<p>component to fine-tune how its color is percieved:</p>

<em>emissiveColor</em>

<li>: The color emitted from the material.</li>

<em>ambientColor</em>

<li>: AKA</li>

<em>Diffuse Color</em>

<li>in other nomenclature.</li>

<em>reflectionColor</em>

<li>: The color reflected from the material.</li>

<em>reflectivityColor</em>

<li>: AKA</li>

<em>Specular Color</em>

<li>in other nomenclature.</li>

<h4>Change a color gradually</h4>

<p>Change a color gradually with linear interpolation between two colors, using the</p>

<code>.Lerp()</code>

<p>function.</p>

<p>The example above changes the color of a material from red to yellow, incrementally shifting it on every frame.</p>

<h2>Using textures</h2>

<p>Reference an image file as a texture by creating a</p>

<code>Texture</code>

<p>component. You can then reference this texture component in the fields of both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>components.</p>

<p>In a</p>

<code>Material</code>

<p>component, you can set the</p>

<code>albedoTexture</code>

<p>field to a texture image. Albedo textures respond to light and can include shades on them.</p>

<p>While creating a texture, you can also pass additional parameters:</p>

<code>samplingMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered</li>

<code>wrap</code>

<li>: Determines how a texture is tiled onto an object (see</li>

<li>)</li>

<h4>Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<p>The URL must start with</p>

<code>https</code>

<p>,</p>

<code>http</code>

<p>URLs aren’t supported. The site where the image is hosted should also have</p>

<p>that permit externally accessing it.</p>

<h4>Textures on basic materials</h4>

<p>In a</p>

<code>BasicMaterial</code>

<p>component, you can set the</p>

<code>texture</code>

<p>field to an image texture. This will render a texture that isn’t affected by lighting.</p>

<h4>Multi-layered textures</h4>

<p>It also allows you to use several image files as layers to compose more realistic textures, for example including a</p>

<code>bumpTexture</code>

<p>and a</p>

<code>refractionTexture</code>

<p>.</p>

<p>In the example above, the image for the material is located in a</p>

<code>materials</code>

<p>folder, which is located at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<p>: We recommend keeping your texture image files separate in a</p>

<code>/materials</code>

<p>folder inside your scene.</p>

<p>A material can have multiple layers of texture, you can see what these are on a source code editor by clicking</p>

<code>.</code>

<p>and letting the autocomplete menu show you the list.</p>

<h4>Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure</p>

<em>uv</em>

<p>properties on the</p>

<p>.</p>

<p>You set</p>

<em>u</em>

<p>and</p>

<em>v</em>

<p>coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more</p>

<em>uv</em>

<p>coordinates need to be defined on the texture, a plane for example needs to have 8</p>

<em>uv</em>

<p>points defined, 4 for each of its two faces.</p>

<p>The following example includes a function that simplifies the setting of uvs. The</p>

<code>setUVs</code>

<p>function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<p>For setting the UVs for a</p>

<code>BoxShape</code>

<p>component, the same structure applies. Each of the 6 faces of the cube takes 4 values, one for each corner. All of these 24 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The</p>

<code>Texture</code>

<p>component lets you configure the wrapping mode by setting the</p>

<code>wrap</code>

<p>field. The wrapping mode can be</p>

<code>CLAMP</code>

<p>,</p>

<code>WRAP</code>

<p>or</p>

<code>MIRROR</code>

<p>.</p>

<code>CLAMP</code>

<li>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>

<code>WRAP</code>

<li>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>

<code>MIRROR</code>

<li>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>wrap</code>

<blockquote>property must be set when instancing the texture, after that it’s a read-only property.</blockquote>

<p>The example above sets the wrapping mode to</p>

<code>MIRROR</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Uv properties are currently only available on</blockquote>

<code>PlaneShape</code>

<blockquote>and on</blockquote>

<code>BoxShape</code>

<blockquote>components.</blockquote>

<h4>Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various</p>

<p>algorithms that exist to compensate for this in different ways. The</p>

<code>Texture</code>

<p>object uses the</p>

<em>bilinear</em>

<p>algorithm by default, but it lets you configure it to use the</p>

<em>nearest neighbor</em>

<p>or</p>

<em>trilinear</em>

<p>algorithms instead by setting the</p>

<code>samplingMode</code>

<p>property.</p>

<p>The example above uses a nearest neighbor algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</p>

<h2>Avatar Portraits</h2>

<p>To display a thumbnail image of any player, create an</p>

<code>AvatarTexture</code>

<p>, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<h2>Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a</p>

<code>Color4</code>

<p>, and set the 4th value to something between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. The closer to</p>

<em>1</em>

<p>, the more opaque it will be.</p>

<p>To make a material with texture transparent:</p>

<li>Set an image in</li>

<code>alphaTexture</code>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</blockquote>

<li>Optionally set the</li>

<code>transparencyMode</code>

<li>to: -</li>

<code>OPAQUE</code>

<li>: No transparency at all -</li>

<code>ALPHATEST</code>

<li>: Each pixel is either completely opaque or completely transparent, based on a threshold. -</li>

<code>ALPHABLEND</code>

<li>: Intermediate values are possible based on the value of each pixel.</li>

<li>If you set the</li>

<code>transparencyMode</code>

<li>to</li>

<code>ALPHATEST</code>

<li>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the</li>

<code>alphaTest</code>

<li>property between</li>

<em>0</em>

<li>and</li>

<em>1</em>

<li>. By default its value is</li>

<em>0.5</em>

<li>.</li>

<h2>Casting no shadows</h2>

<p>To prevent a material from casting shadows over other objects, both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>have a</p>

<code>castShadows</code>

<p>property that you can set to</p>

<em>false</em>

<p>. This property is always</p>

<em>true</em>

<p>by default.</p>

<h2>Reuse materials</h2>

<p>If multiple entities in your scene use a same material, there’s no need to create an instance of the material component for each. All entities can share one same instance, this keeps your scene lighter to load and prevents you from exceeding the maximum amount of materials per scene.</p>

<h2>Video playing</h2>

<p>To stream video from a URL into a material, or play a video from a file stored in the scene, see</p>

<p>.</p>

<p>The video is used as a texture on a material, you can set any of the other properties of materials to alter how the video screen looks.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/materials/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/shape-components/

<title>Shape components | Decentraland Documentation</title>

<strong>Shape components</strong>

<h1>Shape components</h1>

<p>Three dimensional scenes in Decentraland are based on the</p>

<p>model, where everything in a scene is an</p>

<em>entity</em>

<p>, and each entity can include</p>

<em>components</em>

<p>that shape its characteristics and functionality.</p>

<p>The rendered shape of an entity is determined by what component it uses. Each entity can have only one shape component assigned to it.</p>

<h2>Primitive shapes</h2>

<p>Several basic shapes, often called</p>

<em>primitives</em>

<p>, can be added to an entity.</p>

<p>The following primitive shape components are available:</p>

<code>BoxShape</code>

<code>SphereShape</code>

<code>PlaneShape</code>

<code>CylinderShape</code>

<code>ConeShape</code>

<p>Each of these components has certain fields that are specific to that shape, for example the</p>

<em>cylinder</em>

<p>shape has</p>

<code>arc</code>

<p>,</p>

<code>radiusTop</code>

<p>,</p>

<code>radiusBottom</code>

<p>, etc.</p>

<p>To apply a component to an entity, you can instance a new component and assign it all in one operation:</p>

<p>Or you can first create the component instance and then assign it to the entity.</p>

<p>Primitive shapes don’t include materials. To give it a color or a texture, you must assign a</p>

<p>to the same entity.</p>

<h2>3D models</h2>

<p>For more complex shapes, you can build a 3D model in an external tool like Blender and then import them in</p>

<em>.glTF</em>

<p>or</p>

<em>.glb</em>

<p>(binary</p>

<em>.glTF</em>

<p>).</p>

<p>(GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies.</p>

<p>To add an external model into a scene, add a</p>

<code>GLTFShape</code>

<p>component to an entity and set its</p>

<code>src</code>

<p>to the path of the glTF file containing the model.</p>

<p>Since the</p>

<code>src</code>

<p>field is required, you must give it a value when constructing the component.</p>

<p>In the example above, the model is located in a</p>

<code>models</code>

<p>folder at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<blockquote>: We recommend keeping your models separate in a</blockquote>

<code>/models</code>

<blockquote>folder inside your scene.</blockquote>

<p>glTF models can include their own embedded textures, materials, colliders and animations. See</p>

<p>for more information on this.</p>

<p>Keep in mind that all models, their shaders and their textures must be within the parameters of the</p>

<p>.</p>

<h3>Free libraries for 3D models</h3>

<p>Instead of building your own 3d models, you can also download them from several free or paid libraries.</p>

<p>To get you started, below is a list of libraries that have free or relatively inexpensive content:</p>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<strong>📔 Note</strong>

<blockquote>: Pay attention to the license restrictions that the content you download has.</blockquote>

<p>Note that in several of these sites, you can choose what format to download the model in. Always choose</p>

<em>.glTF</em>

<p>format if available. If not available, you must convert them to</p>

<em>glTF</em>

<p>before you can use them in a scene. For that, we recommend importing them into Blender.</p>

<h2>Collisions</h2>

<p>Entities that have collisions enabled occupy space and block a player’s path, entities without collisions can be walked through by a player`s avatar.</p>

<p>Collision settings currently don’t affect how other entities interact with each other, entities can always overlap. Collision settings only affect how the entity interacts with the player’s avatar.</p>

<p>Decentraland currently doesn’t have a physics engine, so if you want entities to fall, crash or bounce, you must code this behavior into the scene.</p>

<p>Entities don’t use collisions by default. Depending on the type of the shape component it has, collisions are enabled as follows:</p>

<p>For</p>

<em>primitive</em>

<p>shapes (boxes, spheres, planes etc), you enable collisions by setting the</p>

<code>withCollisions</code>

<p>field of the shape component to</p>

<em>true</em>

<p>.</p>

<p>This example defines a box entity that can’t be walked through.</p>

<p>Note: Planes only block movement in one direction.</p>

<p>To use collisions in a</p>

<em>glTF</em>

<p>shape, you can either:</p>

<li>Overlay an invisible entity with a primitive shape and the</li>

<code>withCollisions</code>

<li>field set to</li>

<em>true</em>

<li>.</li>

<li>Edit the model in an external tool like Blender to include a</li>

<em>collider object</em>

<li>. The collider must be named</li>

<em>x_collider</em>

<li>, where</li>

<em>x</em>

<li>is the name of the model. So for a model named</li>

<em>house</em>

<li>, the collider must be named</li>

<em>house_collider</em>

<li>.</li>

<p>A</p>

<em>collider</em>

<p>is a set of geometric shapes or planes that define which parts of the model are collided with. This allows for much greater control and is a lot less demanding on the system, as the collision object is usually a lot simpler (with less vertices) than the original model.</p>

<p>See</p>

<p>for more details on how to add colliders to a 3D model.</p>

<h2>Pointer blocking</h2>

<p>All shapes block player</p>

<p>by default, so that for example a player can’t click through a wall, or pick something up that is locked inside a chest.</p>

<p>You can however disable this behavior on any shape, no matter if it’s a primitive or an imported 3D model.</p>

<p>To do so, set the</p>

<code>isPointerBlocker</code>

<p>property of the shape component to</p>

<em>false</em>

<p>.</p>

<p>By using this property, you could for example have an invisible wall that players can’t walk through, but that does allow them to click on items on the other side of the wall.</p>

<h2>Make invisible</h2>

<p>You can make an entity invisible by setting the</p>

<code>visible</code>

<p>field in its shape component. Doing this is especially useful when using the shape as a collider.</p>

<p>All components for primitive shape and 3D models are visible by default.</p>

<p>If an entity is invisible, its collider can block a player’s path, but it can’t be clicked. To make an entity that’s both invisible and clickable, keep the</p>

<code>visible</code>

<p>property set to</p>

<em>true</em>

<p>, and instead give it a</p>

<p>with 100% transparency.</p>

<h2>Optimize 3D models</h2>

<p>To ensure that 3D models in your scene load faster and take up less memory, follow these best practices:</p>

<li>Save your models in</li>

<em>.glb</em>

<li>format, which is a lighter version of</li>

<em>.gltf</em>

<li>.</li>

<li>If you have multiple models that share the same textures, export your models with textures in a separate file. That way multiple models can refer to a single texture file that only needs to be loaded once.</li>

<li>If you have multiple entities using the same 3D model, instance a single</li>

<code>GLTFShape</code>

<li>component and assign that same one to the entities that will use it.</li>

<li>If your scene has entities that appear and disappear, it might be a good idea to pool these entities and keep them already defined but removed from the engine until needed. This will help them appear faster, the trade-off is that they will occupy memory when not in use. See</li>

<h2>Reuse shapes</h2>

<p>If multiple entities in your scene use a same primitive or 3D model, there’s no need to create an instance of the shape component for each. All entities can share one same instance.</p>

<p>This keeps your scene lighter to load and prevents you from exceeding the</p>

<p>of</p>

<em>bodies</em>

<p>per scene.</p>

<strong>📔 Note</strong>

<blockquote>: Reused shapes are added to the</blockquote>

<em>triangle</em>

<blockquote>count of the scene. So it is possible to exceed the triangle limit by reusing shapes.</blockquote>

<p>Each entity that shares a shape can apply different scales, rotations or even materials (in the case of primitives) without affecting how the other entities are being rendered.</p>

<p>Entities that share a 3D model instance can also have animations that run independently of each other. Each must have a separate</p>

<code>Animator</code>

<p>component, with separate</p>

<code>AnimationState</code>

<p>objects to keep track of what part of the animation is currently being played. See</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/shape-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/3d-models/

<title>3D Model Essentials | Decentraland Documentation</title>

<strong>3D Model Essentials</strong>

<h1>3D Model Essentials</h1>

<p>When importing 3D models into Decentraland, it’s important to make sure they’re in either glTF format. These models can include a variety of supported features. This section is all about how to make them compatible with Decentraland and following best practices.</p>

<p>Please note that all models, shaders, and textures must comply with the</p>

<p>.</p>

<strong>Supported 3D Model Formats</strong>

<p>All 3D models in Decentraland must be in glTF format.</p>

<p>(GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies.</p>

<p>glTF models can have either a</p>

<em>.gltf</em>

<p>or a</p>

<em>.glb</em>

<p>extension. glTF files are human-readable, you can open one in a text editor and read it like a JSON file. This is useful, for example, to verify that animations are properly attached and to check for their names. glb files are binary, so they’re not readable but they are considerably smaller in size, which is good for the scene’s performance.</p>

<p>We recommend using</p>

<em>.gltf</em>

<p>while you’re working on a scene, but then switching to</p>

<em>.glb</em>

<p>when uploading it.</p>

<p>The following aspects of a 3D model can either be embedded in a</p>

<em>glTF</em>

<p>file or referenced externally:</p>

<li>Textures can either be embedded or referenced from an external image file.</li>

<li>Binary data about geometry, animations, and other buffer-related aspects of the model can either be embedded or referenced from an external</li>

<em>.bin</em>

<li>file.</li>

<strong>📔 Note</strong>

<p>: Animations</p>

<em>must</em>

<p>be embedded inside the</p>

<em>glTF</em>

<p>file to use in Decentraland.</p>

<strong>Why We Use glTF</strong>

<p>We use glTF because it provides a powerful set of features that includes:</p>

<li>Hierarchical objects</li>

<li>Skeletal structure and animation</li>

<li>Robust pipeline for materials and shaders</li>

<li>Scene information such light sources and cameras (which can be used in future developments).</li>

<p>Compared to</p>

<em>COLLADA</em>

<p>, the supported features are very similar. However, because glTF focuses on providing a “transmission format” rather than an editor format, it is more interoperable with web technologies.</p>

<strong>Export And Convert glTF</strong>

<strong>Export To glTF From Blender</strong>

<p>Blender has a native gltf exporter.</p>

<p>To export select the models you want to be contained on the .glb file then go to File - Export - glTF 2.0</p>

<em>On the side panel check “Selected Objects” in case you want to export only the selected objects in the scene. Also, on the Mesh Dropdown select Apply Modifiers (if they were), then Export.</em>

<strong>Export To glTF From 3D Studio Max</strong>

<p>3D Studio Max doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<li>Download the plugin from</li>

<li>.</li>

<li>Install the plugin by following</li>

<li>.</li>

<li>Export glTF files using the plugin by following</li>

<li>.</li>

<strong>Export To glTF From Maya</strong>

<p>Maya doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<li>Install the plugin by following</li>

<li>.</li>

<li>Export glTF files using the plugin by following</li>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: As an alternative, you can try</blockquote>

<blockquote>too.</blockquote>

<strong>Export To glTF From Unity</strong>

<p>Unity doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<p>Download the plugin from</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: As an alternative, you can try</blockquote>

<blockquote>too.</blockquote>

<strong>Export To glTF From SketchUp</strong>

<p>SketchUp doesn’t support exporting to glTF by default, but you can install a plugin to enable it.</p>

<p>Download the plugin from</p>

<p>.</p>

<strong>Convert FBX Into glTF</strong>

<em>.fbx</em>

<p>is a very popular standard for 3D models. It’s not supported by our engine, but you can easily export an</p>

<em>.fbx</em>

<p>model to</p>

<em>.gltf</em>

<p>format.</p>

<p>We recommend using these tools:</p>

<li>: An easy way to convert .fbx to glTF is by importing the .fbx to a scene using Blender and then export it from there.</li>

<li>: this is the most robust alternative, but requires using the command line.</li>

<li>: This the most complete web based tool. Less robust than the CLI, but a lot easier to use.</li>

<li>: Another easy-to-use web based tool.</li>

<strong>Preview a glTF Model</strong>

<p>A quick and easy way to preview the contents of a glTF model before importing it into a scene is to use the</p>

<p>. Just drag and drop the glTF file (and its</p>

<em>.bin</em>

<p>file if applicable) into the canvas to view the model.</p>

<p>In the sandbox you can also preview the animations that are embedded in the model, select which to display by picking it out of a dropdown menu.</p>

<strong>Analyse glTF</strong>

<p>One great tool to analyze your glTFs is using</p>

<p>. This tool allows you to inspect channels, textures, reaction to different light environments, preview animations and so much more! Ideal for single models.</p>

<p>Another helpful tool is</p>

<p>. Simply drag and drop your models onto the website to view the contents of the glTF package and assess which parts of the model can be optimized.</p>

<p>This tool can be especially useful for large files containing multiple models, textures, and animations. For instance, by organizing textures by size, you can easily identify which textures are using up the most resources.</p>

<strong>Optimize a glTF</strong>

<p>The following tool offers some optimizations that will make 3D models lighter and faster to download for players in your scene.</p>

<p>Among other things, it converts</p>

<em>.gltf</em>

<p>format into</p>

<em>.glb</em>

<p>, which is binary and so occupies a lot less. It also places texture files outside the 3D model, which allows you to use the same texture on multiple models.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<em>.glb</em>

<blockquote>format by default always has textures embedded in the file. The engine can’t recognize two embedded textures as the same, they need to be external files that share a same hash.</blockquote>

<h2>See also</h2>

<p>The following pages also cover topics related to 3D models for Decentraland:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/3d-models/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/meshes/

<title>Meshes | Decentraland Documentation</title>

<strong>Meshes</strong>

<h1>Meshes</h1>

<p>3D models have a</p>

<em>mesh</em>

<p>composed of triangular</p>

<em>faces</em>

<p>. These faces meet each other on</p>

<em>edges</em>

<p>(the lines along which they touch) and</p>

<em>vertices</em>

<p>(the points where their corners join).</p>

<strong>Space Limitations</strong>

<p>All 3D models in your scene must fit within the limits of its parcels. If they extend beyond these limits when running a preview, the meshes will be marked in red by a bounding box.</p>

<p>For performance reasons, Decentraland checks the positions of the</p>

<em>bounding boxes</em>

<p>around meshes (not the vertices in the meshes themselves) to verify that they are within the scene’s limits.</p>

<p>If you have a model that has all of its vertices neatly inside the scene area, but that has large bounding boxes that are mostly empty and extend beyond the scene limits, the entire model will be marked as outside the scene limits.</p>

<p>To avoid this problem, you can clean up your 3D models to reset positions and rotations of meshes so that bounding boxes don’t extend beyond the meshes they wrap.</p>

<em>On Blender you can do that by selecting the objects, pressing Ctrl+A and then Apply “All transforms”.</em>

<strong>Bounding Boxes</strong>

<p>Every mesh has a bounding box, that surrounds the limits of the shape. Keep in mind that the bounding boxes of all 3D models in a Decentraland scene must fit inside the scene limits, see</p>

<p>for more details.</p>

<p>To make a 3D model more usable inside Decentraland, make sure that its bounding boxes don’t extend beyond the model more than necessary.</p>

<p>For example, be cautious when rotating a sub-mesh near the border of your model. Since bounding boxes are cubes, even if the mesh is round, the corners of its bounding box might end up sticking out after rotating it 45°.</p>

<p>We recommend that you bake the rotation and scale of every mesh in the model, to make sure that there are no unwanted bounding boxes extending beyond the size they need to have.</p>

<strong>Triangle Limitations</strong>

<p>Because Decentraland is an open world full of different scenes and objects that are being downloaded on the fly (in the same 3D space) is important to optimize our meshes in order to have a good performance while playing. In that sense, there are some scene limitations that we always need to keep in mind when it comes to meshes:</p>

<p>n represents the number of parcels that a scene occupies.</p>

<strong>Triangles:</strong>

<li>n x 10000 Total amount of triangles for all the models in the scene.</li>

<strong>Height:</strong>

<li>log2(n+1) x 20 Height in meters.</li>

<strong>File size:</strong>

<li>15 MB per parcel - 300 MB max Total size of the files uploaded to the content server. Includes 3D models and audio. Doesn’t include files that aren’t uploaded, such as node.js packages.</li>

<strong>Max file size 50 MB per file</strong>

<li>No individual file of any type in the scene can exceed 50 MB, no matter how many parcels the scene has.</li>

<p>For more information check all the scene limitations</p>

<strong>🔥Optimization Tip🔥: Add Polygon Count</strong>

<blockquote>A valuable tip is to always keep on track of the polycount of your models. To do that in blender you need to turn on statistics on the viewport overlays panel.</blockquote>

<strong>Meshes On Large Scenes</strong>

<p>When creating meshes, we should keep in mind these 2 best practices:</p>

<strong>Modularity:</strong>

<p>Break down large meshes into smaller, modular parts. For example, instead of having a single mesh for an entire building, the building could be divided into separate meshes for each wall, floor, and section of the building. This allows Unity’s frustum culling to work more effectively, as only the visible parts need to be considered for rendering.

It will also improve memory foot-print, because one mesh can be re-used several time for same object in different locations (to achieve this you will need to reference same mesh in your SDK7 scene definition or use instances instead of duplicated objects when exporting the scene from Blender).</p>

<strong>Bounding Volume</strong>

<p>: Ensure that the bounding volume of each object fits as tightly as possible. Extraneous space in the bounding volume can cause objects to be rendered when they’re not visible.</p>

<strong>What is Frustrum Culling?</strong>

<p>Frustum Culling is an optimization technique that disables the renderers (meshes) for objects that are outside the camera’s viewing area. See these 2 examples:</p>

<em>A maze-like indoor level. This normal scene view shows all visible Game Objects.</em>

<em>Regular frustum culling only renders objects within the camera’s view. This is automatic and always happens.</em>

<strong>Instancing Objects vs Duplicating Objects</strong>

<p>In Blender, duplicating an object creates a completely separate copy of the object, while instancing an object creates a duplicate that shares the same data as the original object.</p>

<p>When an object is duplicated, it creates a new object with a completely independent set of data, including all of its geometry, materials, and animations. This means that any changes made to the original object will not be reflected in the duplicate object, and vice versa.</p>

<p>On the other hand, when an object is instanced, any changes made to the original object will be reflected in all of its instances, and vice versa. This is because all of the instances share the same underlying data.</p>

<p>In terms of performance, instancing can be much more efficient than duplicating, especially when working with complex scenes or large numbers of objects. This is because instancing uses less memory than duplicating, since it doesn’t create new data for each instance. Additionally, instancing can allow Blender to optimize the rendering process by treating all of the instances as a single object, rather than rendering each duplicate separately.</p>

<p>Overall, instancing can be a powerful tool for improving performance and workflow efficiency in Blender and on your Decentraland Scene, especially when working with large, complex scenes.</p>

<p>In some cases, when duplicating objects like trees, plants, and light posts, instancing can significantly improve performance compared to duplicating them. For example, this scene has fourteen light posts, all of them are exactly the same. We know that each light post has two different textures, one for the post and another one for the light. So in this case we will have two draw calls, one per texture.</p>

<p>On Blender, when you are at the stage of cloning and positioning elements on the space, you have three options. Duplicate, Instance or Merge objects.</p>

<p>Let’s analyze what are the pros and cons of each procedure.</p>

<strong>Duplicate Objects</strong>

<th>Menu:</th>

<th>Object ‣ Duplicate Objects</th>

<td>Hotkey:</td>

<td>Shift-D</td>

<p>This will create a visually-identical copy of the selected object but they will be treated as different objects. So when you export it will have 2 draw calls per object, 2 * 14 = 28 draw calls, and a total disk usage of 320kb.</p>

<strong>Instancing Objects</strong>

<th>Panel:</th>

<th>Toolbar ‣ Tools ‣ Edit ‣ Duplicate Linked</th>

<td>Menu:</td>

<td>Object ‣ Duplicate Linked</td>

<td>Hotkey:</td>

<td>Alt-D</td>

<p>This will create a new object with all of its data linked to the original object. If you modify one of the linked objects in Edit Mode, all linked copies are modified. Transform properties still remain copies, not links, so you still can rotate, scale, and move freely without affecting the other copies.</p>

<em>When we export these models, we will still have the same number of draw calls (28). However, note that we now have only one mesh, which significantly reduces disk usage (41 kb).</em>

<em>To keep things organized you can simply instance collections in your scene, this way allows you to control all instances from one single folder and source.</em>

<strong>Mesh Naming</strong>

<p>Use meaningful names for your meshes. Name should give context of where the asset is used or to which part of the object it relates.</p>

<p>For asset naming use mix of</p>

<code>PascalCase</code>

<p>and</p>

<code>snake_case</code>

<p>, which we can call</p>

<code>PascalSnake_case</code>

<p>. Basic rules there - new word or word after separator (</p>

<code>_</code>

<p>) starts with</p>

<strong>Capital letter.</strong>

<li>Use meaningful names for your meshes</li>

<strong>Examples:</strong>

<li>🟢</li>

<strong>Prefer</strong>

<li>names -</li>

<code>Theater</code>

<li>,</li>

<code>Tram</code>

<li>🔴</li>

<strong>Avoid</strong>

<li>names -</li>

<code>Untitiled.008</code>

<li>,</li>

<code>primitive(1)</code>

<li>,</li>

<code>Cylinder.091</code>

<li>,</li>

<code>_sphere-AB</code>

<li>Use underscore</li>

<code>_</code>

<li>as a separator to bring more context to the name. Put more common things first and specifics at the end.</li>

<strong>Examples:</strong>

<li>🟢</li>

<strong>Prefer</strong>

<li>names -</li>

<code>FountainStatue</code>

<li>,</li>

<code>TheaterMainWall</code>

<li>,</li>

<code>TramWheelLeft</code>

<li>🔴</li>

<strong>Avoid</strong>

<li>names -</li>

<code>North_MainWall_Theater</code>

<li>,</li>

<code>Tram_LeftFront_Wheel</code>

<p>If there is more than one object with the same name add a number after the word:</p>

<code>FountainStatue01, FountainStatue02, etc.</code>

<strong>Tools For Creating Models</strong>

<p>There are lots of addons and externals tools that facilitate the work when creating assets to make the pipeline faster and more efficient, some of they are free and some to purchase, to name a few:</p>

<strong>Decimate</strong>

<p>This is a well known modifier that can be used to reduce the amount of tris of your mesh while keeping the surface structure of the model. While this is a very powerful tool to optimize models take into account that once the model is decimated the topology may be affected causing a bad topology (because it breaks the geometry into unpredictable pieces). In another hand, decimation will convert the quads of your mesh into triangles making it difficult to modify it after being used. In that regard</p>

<strong>decimation can be useful for static models but is not preferred for animated models.</strong>

<p>Another way to optimize your meshes using decimation is to decimate the model and then do a proper retopology. This way you can assure a more predictable result and clean topology.</p>

<p>Some retopology addons that can be useful are (some of them are paid):</p>

<strong>Simplygon:</strong>

<strong>Speedretopo:</strong>

<strong>Retopoflow:</strong>

<strong>Mirror Modifier</strong>

<p>The Mirror Modifier in Blender is a tool used for creating symmetrical models by mirroring one half of an object to any direction (X,Y,Z). It’s a great tool when you have symetrical models because it reduces the time of 3D modeling, doing UV Unwrapping (because you will need only to unwrapp one part of the model and the rest will share the same UV coordinates) and also optimize your textures avoiding wasting texture resolution on parts that are essentially mirrored.</p>

<strong>Batch Rename</strong>

<p>A very handy tool to change name conventions in an easy way is using the Batch Rename that Blender has integrated in their toolkit. To access it go to</p>

<em>Edit</em>

<p>and then</p>

<em>Batch Rename</em>

<p>.</p>

<p>Select the objects you want to change the name and just replace the default object name for the new one. This tool provides different methods and type of asset to rename so it’s very flexible to change the names also for meshes, animations, bones, etc.</p>

<strong>Best practices for geometries</strong>

<li>Be mindful of how many faces you add to your 3D models, as more faces make its rendering more demanding. See</li>

<li>for the limits imposed by a scene.</li>

<li>Make sure there are no hidden faces that can’t be seen but that add to the triangle count.</li>

<li>For shapes that should have rounded sides, set them to be</li>

<em>smooth</em>

<li>rather than adding additional faces.</li>

<li>Make sure the</li>

<em>normals</em>

<li>of all faces are facing outwards instead of inwards. If there are faces in your model that seem not to be there when you render it, this is most likely the cause.</li>

<li>Bake the rotation and scale of your meshes, so that their bounding boxes don’t extend out unnecessarily.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/meshes/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entity-positioning/#scene-boundaries

<title>Set entity positions | Decentraland Documentation</title>

<strong>Set entity positions</strong>

<h1>Set entity positions</h1>

<p>You can set the</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>of an entity by using the</p>

<code>Transform</code>

<p>component. This can be used on any entity, which can also a primitive shape component (cube, sphere, plane, etc) or a 3D model component (</p>

<code>GLTFShape</code>

<p>).</p>

<p>For brevity, you can also create a</p>

<code>Transform</code>

<p>entity and give it initial values in a single statement, passing it an object that can optionally include</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>properties.</p>

<p>To move, rotate or resize an entity in your scene, change the values on this component incrementally, frame by frame. See</p>

<p>for more details and best practices. You can also use the helper functions in the</p>

<p>to achieve this more easily.</p>

<h2>Position</h2>

<code>position</code>

<p>is a</p>

<em>3D vector</em>

<p>, it sets the position of the entity’s center on all three axes, stored as a</p>

<code>Vector3</code>

<p>object.</p>

<strong>📔 Note</strong>

<blockquote>: When setting the value of the position with an object, you can either use a</blockquote>

<code>Vector3</code>

<blockquote>object, or any other object with</blockquote>

<em>x</em>

<blockquote>,</blockquote>

<em>y</em>

<blockquote>and</blockquote>

<em>z</em>

<blockquote>fields.</blockquote>

<p>When setting a position, keep the following considerations in mind:</p>

<p>The numbers in a position vector represent</p>

<em>meters</em>

<p>(unless the entity is a child of a scaled entity).</p>

<p>A scene that is made up of a single parcel measures 16m x 16m. The center of the scene (at ground level) is at</p>

<code>x:8, y:0, z:8</code>

<p>. If the scene is made up of multiple parcels, then the center will vary depending on their arrangement.</p>

<code>x:0, y:0, z:0</code>

<p>refers to the</p>

<em>South-West</em>

<p>corner of the scene’s base parcel, at ground level.</p>

<p>Tip: When viewing a scene preview, a compass appears in the (0,0,0) point of the scene with labels for each axis as reference.</p>

<p>Tip: Take your</p>

<em>left</em>

<p>hand, your index finger (pointing forward) is the</p>

<em>z</em>

<p>axis, your middle finger (pointing sideways) is the</p>

<em>x</em>

<p>axis, and your thumb (pointing up) is the</p>

<em>y</em>

<p>axis.</p>

<p>Note: You can change the base parcel of a scene by editing the</p>

<code>base</code>

<p>attribute of</p>

<em>scene.json</em>

<p>.</p>

<p>If an entity is a child of another, then</p>

<code>x:0, y:0, z:0</code>

<p>refers to the center of its parent entity, wherever it is in the scene.</p>

<p>Every entity in your scene must be positioned within the bounds of the parcels it occupies at all times. If an entity leaves these boundaries, it will raise an error.</p>

<p>Tip: When viewing a scene in preview mode, entities that are out of bounds are highlighted in</p>

<em>red</em>

<p>.</p>

<p>Your scene is also limited in height. The more parcels that make up the scene, the higher you’re allowed to build. See</p>

<p>for more details.</p>

<h2>Rotation</h2>

<code>rotation</code>

<p>is stored as a</p>

<em>quaternion</em>

<p>, a system of four numbers,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>,</p>

<em>z</em>

<p>and</p>

<em>w</em>

<p>.</p>

<p>You can also set the rotation field with</p>

<em>Euler</em>

<p>, the more common</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>notation with numbers that go from 0 to 360 that most people are familiar with. To use Euler angles, use one of the following notations:</p>

<p>When using a</p>

<em>3D vector</em>

<p>to represent Euler angles,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>represent the rotation in that axis, measured in degrees. A full turn requires 360 degrees.</p>

<strong>📔 Note</strong>

<blockquote>: If you set the rotation using</blockquote>

<em>Euler</em>

<blockquote>angles, the rotation value is still stored internally as a quaternion.</blockquote>

<p>When you retrieve the rotation of an entity, it returns a quaternion by default. To obtain the rotation expressed as in Euler angles, get the</p>

<code>.eulerAngles</code>

<p>field:</p>

<h4>Add Rotations</h4>

<p>Another option is to perform a</p>

<code>rotate</code>

<p>operation on an existing transform, which adds to its current rotation. The</p>

<code>rotate</code>

<p>operation takes a vector that indicates a direction, and a number of degrees to rotate. In the following example, we’re tilting an entity 15 degrees along the X axis, which adds to whatever rotation it initially had:</p>

<p>The</p>

<code>rotate</code>

<p>operation is useful when dealing with an entity that’s rotated in multiple axis, for example both X and Y. The following example sets an original rotation in the Y axis, and then rotates the Transform along the X axis:</p>

<p>Note that this produces a different result than if you simply set the initial rotation to</p>

<code>(15, 90, 0)</code>

<p>. In the example, the rotation along the X axis doesn’t occur along the original X axis of the Transform, but instead it occurs along the</p>

<em>tilted</em>

<p>X axis that results from the initial rotation.</p>

<h2>Face the player</h2>

<p>Add a</p>

<em>Billboard</em>

<p>component to an entity so that it always rotates to face the player.</p>

<p>Billboards were a common technique used in 3D games of the 90s, where most entities were 2D planes that always faced the player. The same idea can also be used to rotate a 3D model.</p>

<p>You can choose which axis to rotate as a billboard. For example, if the Billboard of a cube only rotates in the Y axis, it will follow the player when moving at ground level, but the player will be able to look at it from above or from below.</p>

<p>The three optional parameters when creating a</p>

<code>Billboard</code>

<p>component are booleans that refer to the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>, and</p>

<em>z</em>

<p>axis. They are all</p>

<code>true</code>

<p>by default.</p>

<p>Tip: To rotate an entity so that it follows the player around while at ground level, give it</p>

<em>Y</em>

<p>axis rotation.</p>

<p>Billboards are also very handy to add to</p>

<em>text</em>

<p>entities, since it makes them always legible.</p>

<p>The</p>

<code>rotation</code>

<p>value of the entity’s</p>

<code>Transform</code>

<p>component doesn’t change as the billboard follows players around.</p>

<p>If an entity has both a</p>

<code>Billboard</code>

<p>component and</p>

<code>Transform</code>

<p>component with</p>

<code>rotation</code>

<p>values, players will see the entity rotating as a billboard. If the billboard doesn’t affect all axis, the remaining axis will be rotated according to the</p>

<code>Transform</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: If there are multiple players present at the same time, each will see the entities with billboard mode facing them.</blockquote>

<h2>Face a set of coordinates</h2>

<p>You can use</p>

<code>lookAt()</code>

<p>on the Transform component to orient an entity fo face a specific point in space by simply passing it that point’s coordinates. This is a way to avoid dealing with the math for calculating the necessary angles.</p>

<p>This field requires a</p>

<em>Vector3</em>

<p>object as a value, or any object with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>attributes. This vector indicates the coordinates of the position of the point in the scene to look at.</p>

<p>The</p>

<code>lookAt()</code>

<p>function has a second optional argument that sets the global direction for</p>

<em>up</em>

<p>to use as reference. For most cases, you won’t need to set this field.</p>

<h2>Scale</h2>

<code>scale</code>

<p>is also a</p>

<em>3D vector</em>

<p>, stored as a</p>

<code>Vector3</code>

<p>object, including the scale factor on the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>axis. The shape of the entity scaled accordingly, whether it’s a primitive or a 3D model.</p>

<p>You can either use the</p>

<code>set()</code>

<p>operation to provide a value for each of the three axis, or use</p>

<code>setAll()</code>

<p>to provide a single number and maintain the entity’s proportions as you scale it.</p>

<p>The default scale is 1, so assign a value larger to 1 to stretch an entity or smaller than 1 to shrink it.</p>

<p>You can either set each dimension individually, or use the</p>

<code>set</code>

<p>operation to set all dimensions.</p>

<p>When setting the value of the scale with an object, you can either use a</p>

<code>Vector3</code>

<p>object, or any other object with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>fields.</p>

<h2>Inherit transformations from parent</h2>

<p>When an entity is nested inside another, the child entities inherit components from the parents. This means that if a parent entity is positioned, scaled or rotated, its children are also affected. The position, rotation and scale values of children entities don’t override those of the parents, instead these are compounded.</p>

<p>If a parent entity is scaled, all position values of its children are also scaled.</p>

<p>You can use an invisible entity with no shape component to wrap a set of other entities. This entity won’t be visible in the rendered scene, but can be used to group its children and apply a transform to all of them.</p>

<strong>📔 Note</strong>

<blockquote>: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</blockquote>

<h2>Attach an entity to an avatar</h2>

<p>To fix an entity’s position to an avatar, add an</p>

<code>AttachToAvatar</code>

<p>component to the entity.</p>

<p>When creating an</p>

<code>AttachToAvatar</code>

<p>component, you must pass an object with the following data:</p>

<code>avatarId</code>

<li>: The ID of the player to attach to. This is the same as the player’s Ethereum address, for those players connected with an Ethereum wallet.</li>

<code>anchorPointId</code>

<li>: What anchor point on the avatar to attach the entity.</li>

<p>The following anchor points are available on the player:</p>

<code>NameTag</code>

<p>: Floats right above the player’s name tag, isn’t affected by the player’s animations.</p>

<p>Note: The name tag height is dynamically adjusted based on the height of the wearables a player has on. So a player wearing a tall hat will have their name tag a little bit higher than others.</p>

<code>Position</code>

<p>: The player’s overall position.</p>

<p>Note: The height of this anchor point currently may vary between the local player’s avatar and other players, this is subject to change in future versions. The NameTag anchor point should be more reliable.</p>

<strong>📔 Note</strong>

<blockquote>: Future SDK versions will include alternative anchor points on the avatar that will accompany the avatar animations.</blockquote>

<p>Entity rendering is locally determined on each instance of the scene. Attaching an entity on one player doesn’t make it visible to everyone seeing that player.</p>

<strong>📔 Note</strong>

<blockquote>: Entities attached to an avatar must stay within scene bounds to be rendered. If a player walks out of your scene, any attached entities stop being rendered until the player walks back in. Smart wearables don’t have this limitation.</blockquote>

<p>The</p>

<code>AttachToAvatar</code>

<p>component overwrites the</p>

<code>Transform</code>

<p>component, a single entity can’t have both an</p>

<code>AttachToAvatar</code>

<p>and a</p>

<code>Transform</code>

<p>component at the same time.</p>

<p>If you need to position an entity with an offset from the anchor point on the avatar, or a different rotation or scale, attach a parent entity to the anchor point. You can then set the visible model on a child entity to that parent, and give this child its own Transform component to describe its shifts from the anchor point.</p>

<h4>Obtain the avatarId</h4>

<p>To attach an entity to an avatar, you must provide the user’s ID in the field</p>

<code>avatarId</code>

<p>. There are</p>

<p>to obtain this data.</p>

<strong>📔 Note</strong>

<blockquote>: For those players connected with an Ethereum wallet, their</blockquote>

<code>userId</code>

<blockquote>is the same as their Ethereum address.</blockquote>

<li>Fetch the local player’s</li>

<code>userId</code>

<li>via</li>

<code>getUserData()</code>

<li>.</li>

<li>Fetch the</li>

<code>userId</code>

<li>for all other nearby players via</li>

<code>getConnectedPlayers()</code>

<p>See other ways to fetch other user’s IDs in</p>

<p>.</p>

<h4>Attach to player using Attachable (deprecated)</h4>

<p>Note: This method for attaching entities to the player is deprecated. Use the</p>

<code>AttachToAvatar</code>

<p>component instead.</p>

<p>Set an entity as a child of the</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>object to fix the entity to the player and follow the player’s movements.</p>

<p>If the attached entity has a Transform component, it will be positioned relative to the player’s position, and keep that relative position as the player moves or rotates.</p>

<p>To fix an entity’s rotation only in the</p>

<em>x</em>

<p>axis to the player, set an entity as a child of the</p>

<code>Attachable.AVATAR</code>

<p>object. The entity will then rotate with the player when looking around at ground level, but it won’t accompany the player’s rotation when looking up or down.</p>

<strong>📔 Note</strong>

<blockquote>: To set an entity as a child of</blockquote>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<blockquote>or</blockquote>

<code>Attachable.AVATAR</code>

<blockquote>, you need to first add the entity to the engine. If you attempt to set the entity as child of the player</blockquote>

<em>before</em>

<blockquote>adding it to the engine, it will raise an error.</blockquote>

<p>Both</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>and</p>

<code>Attachable.AVATAR</code>

<p>behave similarly, but have subtle differences:</p>

<p>With</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>:</p>

<li>The entity is at eye-level of the player</li>

<li>In 1st person: Entity rotates on all axis, staying in a fixed position on the camera.</li>

<li>In 3rd person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<p>With</p>

<code>Attachable.AVATAR</code>

<p>:</p>

<li>The entity is arm or waist level of the player</li>

<li>1st person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<li>3rd person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<p>This gif illustrates the difference in 1st person. The pink entity uses</p>

<code>Attachable.AVATAR</code>

<p>, the white object uses</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>.</p>

<p>If several players are in the same scene, they will each experience the entity as attached to themselves. They will not see the entity attached to other players.</p>

<p>For example, in a multiplayer scene where players can pick up boxes and move them around, the recommended approach is to make boxes that are being carried by other players invisible. So that only players that are currently carrying a box see them attached to themselves.</p>

<h2>Scene boundaries</h2>

<p>All entities in your scene must fit within the scene boundaries, as what’s outside those boundaries is parcels of land that are owned by other players.</p>

<p>When running a preview of your scene, any entities outside the scene’s parcels are colored red and their colliders are removed. When deployed to Decentraland, any entities outside the parcels will not be rendered at all by the engine.</p>

<p>The position of entities in your scene is constantly being checked as they move, if an entity leaves the scene and then returns it will be removed and then rendered normally again.</p>

<p>A grid on the scene’s ground shows the limits of the scene, which by default rage from 0 to 16 on the</p>

<em>x</em>

<p>and</p>

<em>z</em>

<p>axis, and up to 20 on the</p>

<em>y</em>

<p>axis. You’re free to place entities underground, below 0 on the</p>

<em>y</em>

<p>axis.</p>

<strong>💡 Tip</strong>

<blockquote>: If your scene needs more parcels, you can add them in the project’s</blockquote>

<code>scene.json</code>

<blockquote>file. See</blockquote>

<blockquote>for instructions. Once added, you should see the grid extend to cover the additional parcels.</blockquote>

<p>It’s important to note that the</p>

<em>entire</em>

<p>3D model must be within the scene’s bounds. This includes the model’s</p>

<em>bounding box</em>

<p>. Some 3D models may have bounding boxes that unnecessarily extend beyond the meshes themselves, and it can sometimes be tricky to tell when this happens. When an entity extends beyond the scene’s boundaries, in the preview you’ll see a cube that marks these bounding boxes. The entire cube must fit within your scene.</p>

<p>If an entity’s cube extends beyond the shape of its meshes, you might need to edit the 3D model in an external editor to reduce these margins, or to</p>

<em>bake</em>

<p>the rotation and scale of the meshes in the model.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entity-positioning/#scene-boundaries

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/move-entities/

<title>Move entities | Decentraland Documentation</title>

<strong>Move entities</strong>

<h1>Move entities</h1>

<p>To move, rotate or resize an entity in your scene, change the</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>values stored in an entity’s</p>

<code>Transform</code>

<p>component incrementally, frame by frame. This can be used on primitive shapes (cubes, spheres, planes, etc) as well as on 3D models (glTF).</p>

<p>You can easily perform these incremental changes by moving entities a small amount each time the</p>

<code>update()</code>

<p>function of a</p>

<p>is called.</p>

<strong>💡 Tip</strong>

<blockquote>: You can use the helper functions in the</blockquote>

<blockquote>to achieve most of the tasks described in this doc. The code shown in these examples is handled in the background by the library, so in most cases it only takes a single line of code to use them.</blockquote>

<h2>Move</h2>

<p>The easiest way to move an entity is to use the</p>

<code>translate()</code>

<p>function to change the</p>

<em>position</em>

<p>value stored in the</p>

<code>Transform</code>

<p>component.</p>

<p>In this example we’re moving an entity by 0.1 meters per frame.</p>

<code>Vector3.Forward()</code>

<p>returns a vector that faces forward and measures 1 meter in length. In this example we’re then scaling this vector down to 1/10 of its length with</p>

<code>scale()</code>

<p>. If our scene has 30 frames per second, the entity is moving at 3 meters per second in speed.</p>

<h2>Rotate</h2>

<p>The easiest way to rotate an entity is to use the</p>

<code>rotate()</code>

<p>function to change the values in the Transform component incrementally, and run this as part of the</p>

<code>update()</code>

<p>function of a system.</p>

<p>The</p>

<code>rotate()</code>

<p>function takes two arguments:</p>

<li>The direction in which to rotate (as a</li>

<em>Vector3</em>

<li>)</li>

<li>The amount to rotate, in</li>

<li>degrees (from 0 to 360)</li>

<strong>💡 Tip</strong>

<blockquote>: To make an entity always rotate to face the player, you can add a</blockquote>

<code>Billboard</code>

<blockquote>.</blockquote>

<h2>Rotate over a pivot point</h2>

<p>When rotating an entity, the rotation is always in reference to the entity’s center coordinate. To rotate an entity using another set of coordinates as a pivot point, create a second (invisible) entity with the pivot point as its position and make it a parent of the entity you want to rotate.</p>

<p>When rotating the parent entity, its children will be all rotated using the parent’s position as a pivot point. Note that the</p>

<code>position</code>

<p>of the child entity is in reference to that of the parent entity.</p>

<p>Note that in this example, the system is rotating the</p>

<code>pivot</code>

<p>entity, that’s a parent of the</p>

<code>door</code>

<p>entity.</p>

<strong>📔 Note</strong>

<blockquote>: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</blockquote>

<h2>Adjust movement to delay time</h2>

<p>Suppose that the player visiting your scene is struggling to keep up with the pace of the frame rate. That could result in the movement appearing jumpy, as not all frames are evenly timed but each moves the entity in the same amount.</p>

<p>You can compensate for this uneven timing by using the</p>

<code>dt</code>

<p>parameter to adjust the scale the movement.</p>

<p>The example above keeps movement at approximately the same speed as the movement example above, even if the frame rate drops. When running at 30 frames per second, the value of</p>

<code>dt</code>

<p>is 1/30.</p>

<p>You can also smoothen rotations in the same way by multiplying the rotation amount by</p>

<code>dt</code>

<p>.</p>

<h2>Move between two points</h2>

<p>If you want an entity to move smoothly between two points, use the</p>

<em>lerp</em>

<p>(linear interpolation) algorithm. This algorithm is very well known in game development, as it’s really useful.</p>

<p>The</p>

<code>lerp()</code>

<p>function takes three parameters:</p>

<li>The vector for the origin position</li>

<li>The vector for the target position</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the translation to do.</li>

<p>The linear interpolation algorithm finds an intermediate point in the path between both vectors that matches the provided amount.</p>

<p>For example, if the origin vector is</p>

<em>(0, 0, 0)</em>

<p>and the target vector is</p>

<em>(10, 0, 10)</em>

<p>:</p>

<li>Using an amount of 0 would return</li>

<em>(0, 0, 0)</em>

<li>Using an amount of 0.3 would return</li>

<em>(3, 0, 3)</em>

<li>Using an amount of 1 would return</li>

<em>(10, 0, 10)</em>

<p>To implement this</p>

<code>lerp()</code>

<p>in your scene, we recommend creating a custom component to store the necessary information. You also need to define a system that implements the gradual movement in each frame.</p>

<h2>Rotate between two angles</h2>

<p>To rotate smoothly between two angles, use the</p>

<em>slerp</em>

<p>(</p>

<em>spherical</em>

<p>linear interpolation) algorithm. This algorithm is very similar to a</p>

<em>lerp</em>

<p>, but it handles quaternion rotations.</p>

<p>The</p>

<code>slerp()</code>

<p>function takes three parameters:</p>

<li>The</li>

<li>angle for the origin rotation</li>

<li>The</li>

<li>angle for the target rotation</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the translation to do.</li>

<strong>💡 Tip</strong>

<blockquote>: You can pass rotation values in</blockquote>

<blockquote>degrees (from 0 to 360) by using</blockquote>

<code>Quaternion.Euler()</code>

<blockquote>.</blockquote>

<p>To implement this in your scene, we recommend storing the data that goes into the</p>

<code>Slerp()</code>

<p>function in a custom component. You also need to define a system that implements the gradual rotation in each frame.</p>

<strong>📔 Note</strong>

<blockquote>: You could instead represent the rotation with</blockquote>

<code>Vector3</code>

<blockquote>values and use a</blockquote>

<code>Lerp()</code>

<blockquote>function, but that would imply a conversion from</blockquote>

<code>Vector3</code>

<blockquote>to</blockquote>

<code>Quaternion</code>

<blockquote>on each frame. Rotation values are internally stored as quaternions in the</blockquote>

<code>Transform</code>

<blockquote>component, so it’s more efficient to work with quaternions.</blockquote>

<h2>Change scale between two sizes</h2>

<p>If you want an entity to change size smoothly and without changing its proportions, use the</p>

<em>lerp</em>

<p>(linear interpolation) algorithm of the</p>

<code>Scalar</code>

<p>object.</p>

<p>Otherwise, if you want to change the axis in different proportions, use</p>

<code>Vector3</code>

<p>to represent the origin scale and the target scale, and then use the</p>

<em>lerp</em>

<p>function of the</p>

<code>Vector3</code>

<p>.</p>

<p>The</p>

<code>lerp()</code>

<p>function of the</p>

<code>Scalar</code>

<p>object takes three parameters:</p>

<li>A number for the origin scale</li>

<li>A number for the target scale</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the scaling to do.</li>

<p>To implement this lerp in your scene, we recommend creating a custom component to store the necessary information. You also need to define a system that implements the gradual scaling in each frame.</p>

<h2>Move at irregular speeds between two points</h2>

<p>While using the lerp method, you can make the movement speed non-linear. In the previous example we increment the lerp amount by a given amount each frame, but we could also use a mathematical function to increase the number exponentially or in other measures that give you a different movement pace.</p>

<p>You could also use a function that gives recurring results, like a sine function, to describe a movement that comes and goes.</p>

<p>The example above is just like the linear lerp example we’ve shown before, but the</p>

<code>fraction</code>

<p>field is increased in a non-linear way, resulting in a curve moves the entity by greater increments on each frame.</p>

<h2>Follow a path</h2>

<p>A</p>

<code>Path3</code>

<p>object stores a series of vectors that describe a path. You can have an entity loop over the list of vectors, performing a lerp movement between each.</p>

<p>The example above defines a 3D path that’s made up of four 3D vectors. We also define a custom</p>

<code>PathData</code>

<p>component, that includes the same data used by the custom component in the</p>

<em>lerp</em>

<p>example above, but adds a</p>

<code>nextPathIndex</code>

<p>field to keep track of what vector to use next from the path.</p>

<p>The system is very similar to the system in the</p>

<em>lerp</em>

<p>example, but when a lerp action is completed, it sets the</p>

<code>target</code>

<p>and</p>

<code>origin</code>

<p>fields to new values. If we reach the end of the path, we return to the first value in the path.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/move-entities/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/systems/

<title>Systems | Decentraland Documentation</title>

<strong>Systems</strong>

<h1>Systems</h1>

<p>Decentraland scenes rely on</p>

<em>systems</em>

<p>to update the information stored in each entity’s</p>

<p>as the scene changes.</p>

<em>systems</em>

<p>are what make scenes dynamic, they’re able to execute functions periodically on every frame of the scene’s game loop, changing what will be rendered.</p>

<p>The following example shows a basic system declaration:</p>

<p>In the example above, the system</p>

<code>MoveSystem</code>

<p>executes the</p>

<code>update()</code>

<p>function of each frame of the game loop, changing position of every entity in the scene.</p>

<strong>📔 Note</strong>

<blockquote>: You must add a</blockquote>

<em>System</em>

<blockquote>to the engine before its functions can be called.</blockquote>

<p>All systems act upon entities, changing the values stored in the entity’s components.</p>

<strong>💡 Tip</strong>

<blockquote>: As a simpler alternative to create custom systems, you can use the helpers in the</blockquote>

<blockquote>. The library creates systems in the background that handle common tasks like moving or rotating entities. In most cases, this library only requires a single line of code to apply these behaviors.</blockquote>

<p>You can have multiple systems in your scene to decouple different behaviors, making your code cleaner and easier to scale. For example, one system might handle physics, another might make an entity move back and forth continuously, another could handle the AI of characters.</p>

<p>Multiple systems can act on a single entity, for example a non-player character might move on its own based on its AI but also be affected by gravity when trying to walk from off a cliff.</p>

<h2>The update method</h2>

<p>The</p>

<code>update()</code>

<p>method is a boilerplate function you can extend to define the functionality of a system. It’s meant to be overwritten and interfaces with the engine in pre-established ways.</p>

<p>The</p>

<code>update()</code>

<p>method of a system is executed periodically, once per every frame of the game loop. This happens automatically, you don’t need to explicitly call this function from anywhere in your code.</p>

<p>Typically, the</p>

<code>update()</code>

<p>method is where you add most of the logic implemented by the system.</p>

<p>In a Decentraland scene, you can think of the game loop as the aggregation of all the</p>

<code>update()</code>

<p>functions in your scene’s systems.</p>

<h2>Loop over a component group</h2>

<p>Most of the time, you won’t want a system’s update function to iterate over the entire set of entities in the scene, as this could be very costly in terms of processing power. To avoid this, you can create a</p>

<p>to keep track of which are the relevant entities, and then have your system iterate over that list.</p>

<p>For example, your scene can have a</p>

<code>PhysicsSystem</code>

<p>that calculates the effect of gravity over the entities of your scene. Some entities in your scene, such as trees, are fixed, so it would make sense to avoid wasting energy in calculating the effects of gravity on these. You can then define a component group that keeps track of entities that aren’t fixed and then have</p>

<code>PhysicsSystem</code>

<p>only deal with the entities in this group.</p>

<h2>Handle a single entity</h2>

<p>Some components and systems are meant for using only on one entity in the scene. For example, on an entity that stores a game’s score or perhaps on a gate of which there’s only one in the scene. To access one of those entities from a system, you don’t want to create a component group that holds just one single entity.</p>

<p>If you create the entity in the same file as you define the system, then you can simply refer to the entity or its components by name in the system’s functions.</p>

<p>For larger projects, we recommend that you keep system definitions on separate files from the instancing of entities. If you do that, then referring to the entity from the system is tougher, because you can’t just import the entity from</p>

<code>game.ts</code>

<p>to the module with the system.</p>

<p>Since systems are also objects, you are free to add variables to them, and also to define a constructor function to pass values to these variables.</p>

<p>When instancing the system in the</p>

<code>game.ts</code>

<p>file, you must pass it a reference to the component:</p>

<strong>📔 Note</strong>

<blockquote>: You could store this data in a custom object instead of an custom component, for more simplicity.</blockquote>

<h2>Execute when an entity is added</h2>

<code>onAddEntity()</code>

<p>is another boilerplate function of every system that you can overwrite with your own code.</p>

<p>Each time a new entity is added to the engine, this function is called once, passing the new entity as an argument.</p>

<h2>Execute when an entity is removed</h2>

<code>onRemoveEntity()</code>

<p>is another boilerplate function of every system that you can overwrite with your own code.</p>

<p>Each time an entity is removed from the engine, this function is called once, passing the removed entity as an argument.</p>

<h2>Execute when a system is activated</h2>

<p>The</p>

<code>activate()</code>

<p>function is another boilerplate function that is executed once when the system is activated.</p>

<p>This can be useful when you have a system that must first carry out some initial steps, for example creating a set of materials of different colors that the update function of the system then switches between. The advantage of using the</p>

<code>activate</code>

<p>function instead of just executing these steps as soon as the scene starts, is that if your scene never uses the system, these steps won’t be executed.</p>

<h2>Delta time between frames</h2>

<p>The</p>

<code>update()</code>

<p>method always receives an argument called</p>

<code>dt</code>

<p>of type</p>

<code>number</code>

<p>(representing</p>

<em>delta time</em>

<p>), even when this argument isn’t explicitly declared.</p>

<em>delta time</em>

<p>represents time that it took for the last frame to be processed, in seconds.</p>

<p>Decentraland scenes are updated by default at 30 frames per second. This means that the</p>

<code>dt</code>

<p>argument passed to all</p>

<code>update()</code>

<p>methods is generally equal to</p>

<em>30/1000</em>

<p>.</p>

<p>If the processing of a frame takes less time than this interval, then the engine will wait the remaining time to keep updates regularly paced and</p>

<code>dt</code>

<p>will remain equal to</p>

<em>30/1000</em>

<p>.</p>

<p>If the processing of a frame takes longer than</p>

<em>30/1000</em>

<p>seconds, the drawing of that frame is delayed. The engine then tries to finish that frame and show it as soon as possible. It then proceeds to the next frame and tries to show it</p>

<em>30/1000</em>

<p>seconds after the last frame. It doesn’t compensate for the previous delay.</p>

<p>Ideally, you should try to avoid having your scene reach this situation, as it causes a drop in framerate.</p>

<p>The</p>

<code>dt</code>

<p>variable becomes useful when frame processing exceeds the default time. Assuming that the current frame will take as much time as the previous, this information may be used to calculate how much to adjust change so that it remains steady and in proportion to the lag between frames.</p>

<p>See</p>

<p>for examples of how to use</p>

<code>dt</code>

<p>to make movement smoother.</p>

<h2>Loop at a timed interval</h2>

<p>If you want a system to execute something at a regular time interval, you can do this by combining the</p>

<code>dt</code>

<p>argument with a timer.</p>

<p>For more complex use cases, where there may be multiple loops being created dynamically, it’s worth creating a component to store the timer.</p>

<h2>System execution order</h2>

<p>In some cases, when you have multiple systems running</p>

<code>update()</code>

<p>functions, you might care about what system is executed first by your scene.</p>

<p>For example, you might have a</p>

<em>physics</em>

<p>system that updates the position of entities in the scene, and another</p>

<em>boundaries</em>

<p>system that ensures that none of the entities are positioned outside the scene boundaries. In this case, you want to make sure that the</p>

<em>boundaries</em>

<p>system is executed last. Otherwise, the</p>

<em>physics</em>

<p>system could move entities outside the bounds of the scene but the</p>

<em>boundaries</em>

<p>system won’t find out till it’s executed again in the next frame.</p>

<p>When adding a system to the engine, set an optional</p>

<code>priority</code>

<p>field to determine when the system is executed in relation to other systems.</p>

<p>Systems with a lower priority number are executed first, so a system with a priority of</p>

<em>1</em>

<p>is executed before one of priority</p>

<em>5</em>

<p>.</p>

<p>Systems that aren’t given an explicit priority have a default priority of</p>

<em>0</em>

<p>, so these are executed first.</p>

<p>If two systems have the same priority number, there’s no way to know for certain which of them will be executed first.</p>

<h2>Remove a system</h2>

<p>An instance of a system can be added or removed from the engine to turn it on or off.</p>

<p>If a system isn’t added to the engine, its functions aren’t called by the engine.</p>

<p>To remove a system, you must first create a pointer to it when instancing it, so that you can refer to the system later.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/systems/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entities-components/

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than a container that holds components. The entity itself has no properties or methods of its own, it simply groups several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>BoxShape</code>

<p>component gives the entity a box shape when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You could also create a custom</p>

<code>health</code>

<p>component to store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, the</blockquote>

<em>scene state</em>

<blockquote>was stored in an object that was separate from the entities themselves. As of version 5.0, the</blockquote>

<em>scene state</em>

<blockquote>is directly embodied by the components that are used by the entities in the scene.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough to change how the scene is rendered in the next frame.</p>

<p>Components are meant to store data about their parent entity. They only store this data, they shouldn’t modify it themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<p>See</p>

<p>for a reference of all the available constructors for predefined components.</p>

<h2>Syntax for entities and components</h2>

<p>Entities and components are declared as TypeScript objects. The example below shows some basic operations of declaring, configuring and assigning these.</p>

<h2>Add entities to the engine</h2>

<p>When you create a new entity, you’re instancing an object and storing it in memory. A newly created entity isn’t</p>

<em>rendered</em>

<p>and it won’t be possible for a player to interact with it until it’s added to the</p>

<em>engine</em>

<p>.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>In the example above, the newly created entity isn’t viewable by players on your scene until it’s added to the engine.</p>

<strong>📔 Note</strong>

<blockquote>: Entities aren’t added to</blockquote>

<blockquote>either until they are added to the engine.</blockquote>

<p>It’s sometimes useful to preemptively create entities and not add them to the engine until they are needed. This is especially true for entities that have elaborate geometries that might otherwise take long to load.</p>

<p>When an entity is added to the engine, its</p>

<code>alive</code>

<p>property is implicitly set to</p>

<em>true</em>

<p>. You can check if an entity is currently added to the engine via this property.</p>

<strong>📔 Note</strong>

<blockquote>: It’s always recommended to add a</blockquote>

<code>Transform</code>

<blockquote>component to an entity before adding it to the engine. Entities that don’t have a Transform component are rendered in the</blockquote>

<em>(0, 0, 0)</em>

<blockquote>position of the scene, so if the entity is added before it has a</blockquote>

<code>Transform</code>

<blockquote>, it will be momentarily rendered in that position, and with its original size and rotation.</blockquote>

<h2>Remove entities from the engine</h2>

<p>Entities that have been added to the engine can also be removed from it. When an entity is removed, it stops being rendered by the scene and players can no longer interact with it.</p>

<p>Note: Removed entities are also removed from all</p>

<p>.</p>

<p>If your scene has a pointer referencing a removed entity, it will remain in memory, allowing you to still access and change its component’s values and add it back.</p>

<p>If a removed entity has child entities, all children of that entity are removed too.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, simply use</p>

<code>.setParent()</code>

<p>:</p>

<strong>📔 Note</strong>

<blockquote>: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</blockquote>

<p>Once a parent is assigned, it can be read off the child entity with</p>

<code>.getParent()</code>

<p>.</p>

<p>If a parent entity has a</p>

<code>transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To remove an entity’s parent, you can assign the entity’s parent to</p>

<code>null</code>

<p>.</p>

<p>If you set a new parent to an entity that already had a parent, the new parent will overwrite the old one.</p>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique autogenrated</p>

<em>id</em>

<p>property. You can retrieve a specific entity from the engine based on this ID, by referring to the</p>

<code>engine.entities[]</code>

<p>array.</p>

<p>For example, if a player’s click or a raycast hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the entity that matches that id.</p>

<h2>Add a component to an entity</h2>

<p>When a component is added to an entity, the component’s values affect the entity.</p>

<p>One way of doing this is to first create the component instance, and then add it to an entity in a separate expression:</p>

<p>You can otherwise use a single expression to both create a new instance of a component and add it to an entity:</p>

<strong>📔 Note</strong>

<blockquote>: In the example above, as you never define a pointer to the entity’s material component, you need to refer to it through its parent entity using</blockquote>

<code>.getComponent()</code>

<blockquote>.</blockquote>

<h4>Add or replace a component</h4>

<p>By using</p>

<code>.addComponentOrReplace()</code>

<p>instead of</p>

<code>.addComponent()</code>

<p>you overwrite any existing components of the same kind on a specific entity.</p>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, simply use the entity’s</p>

<code>removeComponent()</code>

<p>method.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<p>A removed component might still remain in memory even after removed. If your scene adds new components and removes them regularly, these removed components will add up and cause memory problems. It’s advisable to instead use an</p>

<p>when possible to handle these components.</p>

<h2>Access a component from an entity</h2>

<p>You can reach components through their parent entity by using the entity’s</p>

<code>.getComponent()</code>

<p>function.</p>

<p>The</p>

<code>getComponent()</code>

<p>function fetches a reference to the component object. If you change the values of what’s returned by this function, you’re changing the component itself. For example, in the example above, we’re setting the</p>

<code>position</code>

<p>stored in the component to</p>

<em>(5, 0, 5)</em>

<p>.</p>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getComponentOrNull()</code>

<p>or</p>

<code>getComponentOrCreate()</code>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>getComponent()</code>

<li>returns an error.</li>

<code>getComponentOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<code>getComponentOrCreate()</code>

<li>instances a new component in its place and retrieves it.</li>

<p>When you’re dealing with</p>

<p>, you can also get a component by</p>

<em>space name</em>

<p>instead of by type. For example, both</p>

<code>BoxShape</code>

<p>and</p>

<code>SphereShape</code>

<p>occupy the</p>

<code>shape</code>

<p>space of an entity. If you don’t know which of these an entity has, you can fetch the</p>

<code>shape</code>

<p>of the entity, and it will return whichever component is occupying the</p>

<code>shape</code>

<p>space.</p>

<h2>Pooling entities and components</h2>

<p>If you plan to spawn and despawn similar entities from your scene, it’s often a good practice to keep a fixed set of entities in memory. Instead of creating new entities and deleting them, you could add and remove existing entities from the engine. This is an efficient way to deal with the player’s memory.</p>

<p>Entities that are not added to the engine aren’t rendered as part of the scene, but they are kept in memory, making them quick to load if needed. Their geometry doesn’t add up to the maximum triangle count for your scene while they aren’t being rendered.</p>

<p>When adding an entity to the engine, its</p>

<code>alive</code>

<p>field is implicitly set to</p>

<code>true</code>

<p>, when removing it, this field is set to</p>

<code>false</code>

<p>.</p>

<p>Using an object pool has the following benefits:</p>

<li>If your entity uses a complex 3D model or texture, it might take the scene some time to load it from the content server. If the entity is already in memory when it’s needed, then that delay won’t happen.</li>

<li>This is a solution to avoid a common problem, where each entity that’s removed could remain lingering in memory after being removed, and these unused entities could add up till they become too many to handle. By recycling the same entities, you ensure this won’t happen.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entities-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/component-groups/

<title>Component groups | Decentraland Documentation</title>

<strong>Component groups</strong>

<h1>Component groups</h1>

<p>Each component group keeps track of a list of entities that have all the required</p>

<p>.</p>

<p>The engine automatically updates this list every time that:</p>

<li>A new entity is added to the engine</li>

<li>An entity is removed from the engine</li>

<li>An entity in the engine adds a new component</li>

<li>An entity in the engine removes a component</li>

<strong>📔 Note</strong>

<blockquote>: Only entities that are added to the engine are eligible for component groups. Entities that have been created but not added to the engine, or that have been removed from the engine, aren’t listed in any group.</blockquote>

<p>After the group is created, you don’t need to add or remove entities manually from it, the engine takes care of that.</p>

<p>typically iterate over the entities in these groups in their update method, performing the same operations on each. Having a predefined group of valid entities is a great way to save resources, specially for functions that run on every frame like</p>

<code>update()</code>

<p>. If on every frame your system would have to iterate over every single entity in the scene looking for the ones it needs, that would be very time consuming.</p>

<p>You can access the entities in a component group in the following way: if the group name is</p>

<code>myGroup</code>

<p>, calling</p>

<code>myGroup.entities</code>

<p>returns an array containing all the entities in it.</p>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that component groups take up space in the local memory of the player’s machine. Usually, the benefit in speed you get from having a group is a tradeoff that is well worth it. However, for cases where you’d have a large group that you don’t access all that often, it might be better to not have one.</blockquote>

<h2>Required components</h2>

<p>When creating a component group, specify what components need to be present in every entity that’s added to the group. You can list as many components as you want, the component group will only accept entities that have</p>

<strong>all</strong>

<p>of the listed components.</p>

<strong>💡 Tip</strong>

<blockquote>: If your scene includes entities that have all the required components but that don’t need to be in your component group, create a custom component to act as a</blockquote>

<blockquote>. This component doesn’t need to have any properties in it. Add this component to the entities that you want the component group to handle.</blockquote>

<h2>Use component groups in a system</h2>

<p>In the example above,</p>

<code>PhysicsSystem</code>

<p>iterates over the entities in</p>

<code>myGroup</code>

<p>as part of the</p>

<code>update()</code>

<p>function, that is executed on every frame of the game loop.</p>

<p>If the scene has several</p>

<em>ball</em>

<p>entities, each with a</p>

<code>Position</code>

<p>and a</p>

<code>Physics</code>

<p>component, then they will be included in</p>

<code>myGroup</code>

<p>.</p>

<code>PhysicsSystem</code>

<p>will then update their position on every frame.</p>

<p>If your scene also has other entities like a</p>

<em>hoop</em>

<p>and a</p>

<em>scoreBoard</em>

<p>that only have a</p>

<code>Physics</code>

<p>component, then they won’t be in</p>

<code>myGroup</code>

<p>and won’t be affected by</p>

<code>PhysicsSystem</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>engine.getComponentGroup()</code>

<blockquote>is an expensive function to process, it should never be used inside the</blockquote>

<code>update</code>

<blockquote>of a system, as that would create a new group on every frame. When regularly checking the entities in a group, refer to an already created group, as in the example above. Once created, component groups are updated as entities and components are added and removed from the engine, so there’s no need to redeclare or update these groups.</blockquote>

<h2>Dealing with the entities</h2>

<p>The</p>

<code>entities</code>

<p>array of a component group contains elements of type</p>

<code>IEntity</code>

<p>, which is identical to</p>

<code>Entity</code>

<p>, but not recogized by Typescript as the same type. If a function expects an input of type</p>

<code>Entity</code>

<p>, you can simply force the argument’s type with</p>

<code>as Entity</code>

<p>.</p>

<h2>All entities</h2>

<p>You can access the full list of entities that have been added to the engine, regardless of what components they have, through</p>

<code>engine.entities</code>

<p>.</p>

<h2>Change a component group while iterating</h2>

<p>Component groups are mutable. You shouldn’t modify the component group while you’re iterating over it, because that could have unwanted consequences.</p>

<p>For example, if you iterate over a component group to remove each entity from the engine, the act of removing an entity displaces the other entities in the array, which can lead to some entities being skipped.</p>

<p>To overcome this problem, use the following code to remove all entities from the engine:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/component-groups/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entities-components/#components-as-flags

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than a container that holds components. The entity itself has no properties or methods of its own, it simply groups several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>BoxShape</code>

<p>component gives the entity a box shape when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You could also create a custom</p>

<code>health</code>

<p>component to store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, the</blockquote>

<em>scene state</em>

<blockquote>was stored in an object that was separate from the entities themselves. As of version 5.0, the</blockquote>

<em>scene state</em>

<blockquote>is directly embodied by the components that are used by the entities in the scene.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough to change how the scene is rendered in the next frame.</p>

<p>Components are meant to store data about their parent entity. They only store this data, they shouldn’t modify it themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<p>See</p>

<p>for a reference of all the available constructors for predefined components.</p>

<h2>Syntax for entities and components</h2>

<p>Entities and components are declared as TypeScript objects. The example below shows some basic operations of declaring, configuring and assigning these.</p>

<h2>Add entities to the engine</h2>

<p>When you create a new entity, you’re instancing an object and storing it in memory. A newly created entity isn’t</p>

<em>rendered</em>

<p>and it won’t be possible for a player to interact with it until it’s added to the</p>

<em>engine</em>

<p>.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>In the example above, the newly created entity isn’t viewable by players on your scene until it’s added to the engine.</p>

<strong>📔 Note</strong>

<blockquote>: Entities aren’t added to</blockquote>

<blockquote>either until they are added to the engine.</blockquote>

<p>It’s sometimes useful to preemptively create entities and not add them to the engine until they are needed. This is especially true for entities that have elaborate geometries that might otherwise take long to load.</p>

<p>When an entity is added to the engine, its</p>

<code>alive</code>

<p>property is implicitly set to</p>

<em>true</em>

<p>. You can check if an entity is currently added to the engine via this property.</p>

<strong>📔 Note</strong>

<blockquote>: It’s always recommended to add a</blockquote>

<code>Transform</code>

<blockquote>component to an entity before adding it to the engine. Entities that don’t have a Transform component are rendered in the</blockquote>

<em>(0, 0, 0)</em>

<blockquote>position of the scene, so if the entity is added before it has a</blockquote>

<code>Transform</code>

<blockquote>, it will be momentarily rendered in that position, and with its original size and rotation.</blockquote>

<h2>Remove entities from the engine</h2>

<p>Entities that have been added to the engine can also be removed from it. When an entity is removed, it stops being rendered by the scene and players can no longer interact with it.</p>

<p>Note: Removed entities are also removed from all</p>

<p>.</p>

<p>If your scene has a pointer referencing a removed entity, it will remain in memory, allowing you to still access and change its component’s values and add it back.</p>

<p>If a removed entity has child entities, all children of that entity are removed too.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, simply use</p>

<code>.setParent()</code>

<p>:</p>

<strong>📔 Note</strong>

<blockquote>: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</blockquote>

<p>Once a parent is assigned, it can be read off the child entity with</p>

<code>.getParent()</code>

<p>.</p>

<p>If a parent entity has a</p>

<code>transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To remove an entity’s parent, you can assign the entity’s parent to</p>

<code>null</code>

<p>.</p>

<p>If you set a new parent to an entity that already had a parent, the new parent will overwrite the old one.</p>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique autogenrated</p>

<em>id</em>

<p>property. You can retrieve a specific entity from the engine based on this ID, by referring to the</p>

<code>engine.entities[]</code>

<p>array.</p>

<p>For example, if a player’s click or a raycast hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the entity that matches that id.</p>

<h2>Add a component to an entity</h2>

<p>When a component is added to an entity, the component’s values affect the entity.</p>

<p>One way of doing this is to first create the component instance, and then add it to an entity in a separate expression:</p>

<p>You can otherwise use a single expression to both create a new instance of a component and add it to an entity:</p>

<strong>📔 Note</strong>

<blockquote>: In the example above, as you never define a pointer to the entity’s material component, you need to refer to it through its parent entity using</blockquote>

<code>.getComponent()</code>

<blockquote>.</blockquote>

<h4>Add or replace a component</h4>

<p>By using</p>

<code>.addComponentOrReplace()</code>

<p>instead of</p>

<code>.addComponent()</code>

<p>you overwrite any existing components of the same kind on a specific entity.</p>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, simply use the entity’s</p>

<code>removeComponent()</code>

<p>method.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<p>A removed component might still remain in memory even after removed. If your scene adds new components and removes them regularly, these removed components will add up and cause memory problems. It’s advisable to instead use an</p>

<p>when possible to handle these components.</p>

<h2>Access a component from an entity</h2>

<p>You can reach components through their parent entity by using the entity’s</p>

<code>.getComponent()</code>

<p>function.</p>

<p>The</p>

<code>getComponent()</code>

<p>function fetches a reference to the component object. If you change the values of what’s returned by this function, you’re changing the component itself. For example, in the example above, we’re setting the</p>

<code>position</code>

<p>stored in the component to</p>

<em>(5, 0, 5)</em>

<p>.</p>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getComponentOrNull()</code>

<p>or</p>

<code>getComponentOrCreate()</code>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>getComponent()</code>

<li>returns an error.</li>

<code>getComponentOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<code>getComponentOrCreate()</code>

<li>instances a new component in its place and retrieves it.</li>

<p>When you’re dealing with</p>

<p>, you can also get a component by</p>

<em>space name</em>

<p>instead of by type. For example, both</p>

<code>BoxShape</code>

<p>and</p>

<code>SphereShape</code>

<p>occupy the</p>

<code>shape</code>

<p>space of an entity. If you don’t know which of these an entity has, you can fetch the</p>

<code>shape</code>

<p>of the entity, and it will return whichever component is occupying the</p>

<code>shape</code>

<p>space.</p>

<h2>Pooling entities and components</h2>

<p>If you plan to spawn and despawn similar entities from your scene, it’s often a good practice to keep a fixed set of entities in memory. Instead of creating new entities and deleting them, you could add and remove existing entities from the engine. This is an efficient way to deal with the player’s memory.</p>

<p>Entities that are not added to the engine aren’t rendered as part of the scene, but they are kept in memory, making them quick to load if needed. Their geometry doesn’t add up to the maximum triangle count for your scene while they aren’t being rendered.</p>

<p>When adding an entity to the engine, its</p>

<code>alive</code>

<p>field is implicitly set to</p>

<code>true</code>

<p>, when removing it, this field is set to</p>

<code>false</code>

<p>.</p>

<p>Using an object pool has the following benefits:</p>

<li>If your entity uses a complex 3D model or texture, it might take the scene some time to load it from the content server. If the entity is already in memory when it’s needed, then that delay won’t happen.</li>

<li>This is a solution to avoid a common problem, where each entity that’s removed could remain lingering in memory after being removed, and these unused entities could add up till they become too many to handle. By recycling the same entities, you ensure this won’t happen.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/systems/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entity-positioning/

<title>Set entity positions | Decentraland Documentation</title>

<strong>Set entity positions</strong>

<h1>Set entity positions</h1>

<p>You can set the</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>of an entity by using the</p>

<code>Transform</code>

<p>component. This can be used on any entity, which can also a primitive shape component (cube, sphere, plane, etc) or a 3D model component (</p>

<code>GLTFShape</code>

<p>).</p>

<p>For brevity, you can also create a</p>

<code>Transform</code>

<p>entity and give it initial values in a single statement, passing it an object that can optionally include</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>properties.</p>

<p>To move, rotate or resize an entity in your scene, change the values on this component incrementally, frame by frame. See</p>

<p>for more details and best practices. You can also use the helper functions in the</p>

<p>to achieve this more easily.</p>

<h2>Position</h2>

<code>position</code>

<p>is a</p>

<em>3D vector</em>

<p>, it sets the position of the entity’s center on all three axes, stored as a</p>

<code>Vector3</code>

<p>object.</p>

<strong>📔 Note</strong>

<blockquote>: When setting the value of the position with an object, you can either use a</blockquote>

<code>Vector3</code>

<blockquote>object, or any other object with</blockquote>

<em>x</em>

<blockquote>,</blockquote>

<em>y</em>

<blockquote>and</blockquote>

<em>z</em>

<blockquote>fields.</blockquote>

<p>When setting a position, keep the following considerations in mind:</p>

<p>The numbers in a position vector represent</p>

<em>meters</em>

<p>(unless the entity is a child of a scaled entity).</p>

<p>A scene that is made up of a single parcel measures 16m x 16m. The center of the scene (at ground level) is at</p>

<code>x:8, y:0, z:8</code>

<p>. If the scene is made up of multiple parcels, then the center will vary depending on their arrangement.</p>

<code>x:0, y:0, z:0</code>

<p>refers to the</p>

<em>South-West</em>

<p>corner of the scene’s base parcel, at ground level.</p>

<p>Tip: When viewing a scene preview, a compass appears in the (0,0,0) point of the scene with labels for each axis as reference.</p>

<p>Tip: Take your</p>

<em>left</em>

<p>hand, your index finger (pointing forward) is the</p>

<em>z</em>

<p>axis, your middle finger (pointing sideways) is the</p>

<em>x</em>

<p>axis, and your thumb (pointing up) is the</p>

<em>y</em>

<p>axis.</p>

<p>Note: You can change the base parcel of a scene by editing the</p>

<code>base</code>

<p>attribute of</p>

<em>scene.json</em>

<p>.</p>

<p>If an entity is a child of another, then</p>

<code>x:0, y:0, z:0</code>

<p>refers to the center of its parent entity, wherever it is in the scene.</p>

<p>Every entity in your scene must be positioned within the bounds of the parcels it occupies at all times. If an entity leaves these boundaries, it will raise an error.</p>

<p>Tip: When viewing a scene in preview mode, entities that are out of bounds are highlighted in</p>

<em>red</em>

<p>.</p>

<p>Your scene is also limited in height. The more parcels that make up the scene, the higher you’re allowed to build. See</p>

<p>for more details.</p>

<h2>Rotation</h2>

<code>rotation</code>

<p>is stored as a</p>

<em>quaternion</em>

<p>, a system of four numbers,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>,</p>

<em>z</em>

<p>and</p>

<em>w</em>

<p>.</p>

<p>You can also set the rotation field with</p>

<em>Euler</em>

<p>, the more common</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>notation with numbers that go from 0 to 360 that most people are familiar with. To use Euler angles, use one of the following notations:</p>

<p>When using a</p>

<em>3D vector</em>

<p>to represent Euler angles,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>represent the rotation in that axis, measured in degrees. A full turn requires 360 degrees.</p>

<strong>📔 Note</strong>

<blockquote>: If you set the rotation using</blockquote>

<em>Euler</em>

<blockquote>angles, the rotation value is still stored internally as a quaternion.</blockquote>

<p>When you retrieve the rotation of an entity, it returns a quaternion by default. To obtain the rotation expressed as in Euler angles, get the</p>

<code>.eulerAngles</code>

<p>field:</p>

<h4>Add Rotations</h4>

<p>Another option is to perform a</p>

<code>rotate</code>

<p>operation on an existing transform, which adds to its current rotation. The</p>

<code>rotate</code>

<p>operation takes a vector that indicates a direction, and a number of degrees to rotate. In the following example, we’re tilting an entity 15 degrees along the X axis, which adds to whatever rotation it initially had:</p>

<p>The</p>

<code>rotate</code>

<p>operation is useful when dealing with an entity that’s rotated in multiple axis, for example both X and Y. The following example sets an original rotation in the Y axis, and then rotates the Transform along the X axis:</p>

<p>Note that this produces a different result than if you simply set the initial rotation to</p>

<code>(15, 90, 0)</code>

<p>. In the example, the rotation along the X axis doesn’t occur along the original X axis of the Transform, but instead it occurs along the</p>

<em>tilted</em>

<p>X axis that results from the initial rotation.</p>

<h2>Face the player</h2>

<p>Add a</p>

<em>Billboard</em>

<p>component to an entity so that it always rotates to face the player.</p>

<p>Billboards were a common technique used in 3D games of the 90s, where most entities were 2D planes that always faced the player. The same idea can also be used to rotate a 3D model.</p>

<p>You can choose which axis to rotate as a billboard. For example, if the Billboard of a cube only rotates in the Y axis, it will follow the player when moving at ground level, but the player will be able to look at it from above or from below.</p>

<p>The three optional parameters when creating a</p>

<code>Billboard</code>

<p>component are booleans that refer to the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>, and</p>

<em>z</em>

<p>axis. They are all</p>

<code>true</code>

<p>by default.</p>

<p>Tip: To rotate an entity so that it follows the player around while at ground level, give it</p>

<em>Y</em>

<p>axis rotation.</p>

<p>Billboards are also very handy to add to</p>

<em>text</em>

<p>entities, since it makes them always legible.</p>

<p>The</p>

<code>rotation</code>

<p>value of the entity’s</p>

<code>Transform</code>

<p>component doesn’t change as the billboard follows players around.</p>

<p>If an entity has both a</p>

<code>Billboard</code>

<p>component and</p>

<code>Transform</code>

<p>component with</p>

<code>rotation</code>

<p>values, players will see the entity rotating as a billboard. If the billboard doesn’t affect all axis, the remaining axis will be rotated according to the</p>

<code>Transform</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: If there are multiple players present at the same time, each will see the entities with billboard mode facing them.</blockquote>

<h2>Face a set of coordinates</h2>

<p>You can use</p>

<code>lookAt()</code>

<p>on the Transform component to orient an entity fo face a specific point in space by simply passing it that point’s coordinates. This is a way to avoid dealing with the math for calculating the necessary angles.</p>

<p>This field requires a</p>

<em>Vector3</em>

<p>object as a value, or any object with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>attributes. This vector indicates the coordinates of the position of the point in the scene to look at.</p>

<p>The</p>

<code>lookAt()</code>

<p>function has a second optional argument that sets the global direction for</p>

<em>up</em>

<p>to use as reference. For most cases, you won’t need to set this field.</p>

<h2>Scale</h2>

<code>scale</code>

<p>is also a</p>

<em>3D vector</em>

<p>, stored as a</p>

<code>Vector3</code>

<p>object, including the scale factor on the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>axis. The shape of the entity scaled accordingly, whether it’s a primitive or a 3D model.</p>

<p>You can either use the</p>

<code>set()</code>

<p>operation to provide a value for each of the three axis, or use</p>

<code>setAll()</code>

<p>to provide a single number and maintain the entity’s proportions as you scale it.</p>

<p>The default scale is 1, so assign a value larger to 1 to stretch an entity or smaller than 1 to shrink it.</p>

<p>You can either set each dimension individually, or use the</p>

<code>set</code>

<p>operation to set all dimensions.</p>

<p>When setting the value of the scale with an object, you can either use a</p>

<code>Vector3</code>

<p>object, or any other object with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>fields.</p>

<h2>Inherit transformations from parent</h2>

<p>When an entity is nested inside another, the child entities inherit components from the parents. This means that if a parent entity is positioned, scaled or rotated, its children are also affected. The position, rotation and scale values of children entities don’t override those of the parents, instead these are compounded.</p>

<p>If a parent entity is scaled, all position values of its children are also scaled.</p>

<p>You can use an invisible entity with no shape component to wrap a set of other entities. This entity won’t be visible in the rendered scene, but can be used to group its children and apply a transform to all of them.</p>

<strong>📔 Note</strong>

<blockquote>: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</blockquote>

<h2>Attach an entity to an avatar</h2>

<p>To fix an entity’s position to an avatar, add an</p>

<code>AttachToAvatar</code>

<p>component to the entity.</p>

<p>When creating an</p>

<code>AttachToAvatar</code>

<p>component, you must pass an object with the following data:</p>

<code>avatarId</code>

<li>: The ID of the player to attach to. This is the same as the player’s Ethereum address, for those players connected with an Ethereum wallet.</li>

<code>anchorPointId</code>

<li>: What anchor point on the avatar to attach the entity.</li>

<p>The following anchor points are available on the player:</p>

<code>NameTag</code>

<p>: Floats right above the player’s name tag, isn’t affected by the player’s animations.</p>

<p>Note: The name tag height is dynamically adjusted based on the height of the wearables a player has on. So a player wearing a tall hat will have their name tag a little bit higher than others.</p>

<code>Position</code>

<p>: The player’s overall position.</p>

<p>Note: The height of this anchor point currently may vary between the local player’s avatar and other players, this is subject to change in future versions. The NameTag anchor point should be more reliable.</p>

<strong>📔 Note</strong>

<blockquote>: Future SDK versions will include alternative anchor points on the avatar that will accompany the avatar animations.</blockquote>

<p>Entity rendering is locally determined on each instance of the scene. Attaching an entity on one player doesn’t make it visible to everyone seeing that player.</p>

<strong>📔 Note</strong>

<blockquote>: Entities attached to an avatar must stay within scene bounds to be rendered. If a player walks out of your scene, any attached entities stop being rendered until the player walks back in. Smart wearables don’t have this limitation.</blockquote>

<p>The</p>

<code>AttachToAvatar</code>

<p>component overwrites the</p>

<code>Transform</code>

<p>component, a single entity can’t have both an</p>

<code>AttachToAvatar</code>

<p>and a</p>

<code>Transform</code>

<p>component at the same time.</p>

<p>If you need to position an entity with an offset from the anchor point on the avatar, or a different rotation or scale, attach a parent entity to the anchor point. You can then set the visible model on a child entity to that parent, and give this child its own Transform component to describe its shifts from the anchor point.</p>

<h4>Obtain the avatarId</h4>

<p>To attach an entity to an avatar, you must provide the user’s ID in the field</p>

<code>avatarId</code>

<p>. There are</p>

<p>to obtain this data.</p>

<strong>📔 Note</strong>

<blockquote>: For those players connected with an Ethereum wallet, their</blockquote>

<code>userId</code>

<blockquote>is the same as their Ethereum address.</blockquote>

<li>Fetch the local player’s</li>

<code>userId</code>

<li>via</li>

<code>getUserData()</code>

<li>.</li>

<li>Fetch the</li>

<code>userId</code>

<li>for all other nearby players via</li>

<code>getConnectedPlayers()</code>

<p>See other ways to fetch other user’s IDs in</p>

<p>.</p>

<h4>Attach to player using Attachable (deprecated)</h4>

<p>Note: This method for attaching entities to the player is deprecated. Use the</p>

<code>AttachToAvatar</code>

<p>component instead.</p>

<p>Set an entity as a child of the</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>object to fix the entity to the player and follow the player’s movements.</p>

<p>If the attached entity has a Transform component, it will be positioned relative to the player’s position, and keep that relative position as the player moves or rotates.</p>

<p>To fix an entity’s rotation only in the</p>

<em>x</em>

<p>axis to the player, set an entity as a child of the</p>

<code>Attachable.AVATAR</code>

<p>object. The entity will then rotate with the player when looking around at ground level, but it won’t accompany the player’s rotation when looking up or down.</p>

<strong>📔 Note</strong>

<blockquote>: To set an entity as a child of</blockquote>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<blockquote>or</blockquote>

<code>Attachable.AVATAR</code>

<blockquote>, you need to first add the entity to the engine. If you attempt to set the entity as child of the player</blockquote>

<em>before</em>

<blockquote>adding it to the engine, it will raise an error.</blockquote>

<p>Both</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>and</p>

<code>Attachable.AVATAR</code>

<p>behave similarly, but have subtle differences:</p>

<p>With</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>:</p>

<li>The entity is at eye-level of the player</li>

<li>In 1st person: Entity rotates on all axis, staying in a fixed position on the camera.</li>

<li>In 3rd person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<p>With</p>

<code>Attachable.AVATAR</code>

<p>:</p>

<li>The entity is arm or waist level of the player</li>

<li>1st person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<li>3rd person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<p>This gif illustrates the difference in 1st person. The pink entity uses</p>

<code>Attachable.AVATAR</code>

<p>, the white object uses</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>.</p>

<p>If several players are in the same scene, they will each experience the entity as attached to themselves. They will not see the entity attached to other players.</p>

<p>For example, in a multiplayer scene where players can pick up boxes and move them around, the recommended approach is to make boxes that are being carried by other players invisible. So that only players that are currently carrying a box see them attached to themselves.</p>

<h2>Scene boundaries</h2>

<p>All entities in your scene must fit within the scene boundaries, as what’s outside those boundaries is parcels of land that are owned by other players.</p>

<p>When running a preview of your scene, any entities outside the scene’s parcels are colored red and their colliders are removed. When deployed to Decentraland, any entities outside the parcels will not be rendered at all by the engine.</p>

<p>The position of entities in your scene is constantly being checked as they move, if an entity leaves the scene and then returns it will be removed and then rendered normally again.</p>

<p>A grid on the scene’s ground shows the limits of the scene, which by default rage from 0 to 16 on the</p>

<em>x</em>

<p>and</p>

<em>z</em>

<p>axis, and up to 20 on the</p>

<em>y</em>

<p>axis. You’re free to place entities underground, below 0 on the</p>

<em>y</em>

<p>axis.</p>

<strong>💡 Tip</strong>

<blockquote>: If your scene needs more parcels, you can add them in the project’s</blockquote>

<code>scene.json</code>

<blockquote>file. See</blockquote>

<blockquote>for instructions. Once added, you should see the grid extend to cover the additional parcels.</blockquote>

<p>It’s important to note that the</p>

<em>entire</em>

<p>3D model must be within the scene’s bounds. This includes the model’s</p>

<em>bounding box</em>

<p>. Some 3D models may have bounding boxes that unnecessarily extend beyond the meshes themselves, and it can sometimes be tricky to tell when this happens. When an entity extends beyond the scene’s boundaries, in the preview you’ll see a cube that marks these bounding boxes. The entire cube must fit within your scene.</p>

<p>If an entity’s cube extends beyond the shape of its meshes, you might need to edit the 3D model in an external editor to reduce these margins, or to</p>

<em>bake</em>

<p>the rotation and scale of the meshes in the model.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entity-positioning/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/#get-player-data

<title>Player data | Decentraland Documentation</title>

<strong>Player data</strong>

<h1>Player data</h1>

<h2>Track player position and rotation</h2>

<p>The</p>

<code>Camera</code>

<p>object exposes information about the player’s point of view in your scene.</p>

<code>Camera.instance.position</code>

<li>returns a 3D vector with the coordinates of the avatar’s center, relative to the scene. When the player is on the ground, the height of this point is approximately</li>

<em>1.177</em>

<li>m. In 3rd person camera mode, this value refers also to the avatar’s center, not to the position of the 3rd person camera.</li>

<code>Camera.instance.feetPosition</code>

<li>returns a 3D vector with the coordinates of the player’s feet relative to the scene. When the player is at ground level, the height is nearly 0.155.</li>

<code>Camera.instance.worldPosition</code>

<li>returns a 3D vector with the coordinates of the player’s center, relative to the whole of Genesis City. For example, if the scene is in coordinates</li>

<em>100,-100</em>

<li>, and the player is standing on the bottom-left corner of that scene, the player’s world position will be about</li>

<em>1600, 1.177, -1600</em>

<code>Camera.instance.rotation</code>

<li>returns a quaternion with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<code>Camera.instance.rotation.eulerAngles</code>

<li>returns a Vector3 with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<p>The example above logs the player’s position and rotation.</p>

<p>The example above uses the player’s rotation to set that of a cube in the scene.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>Camera.instance</code>

<blockquote>data is updated at a throttled rate of 10 times per second. Due to this, positions & rotations may lag slightly in relation to the scene that runs at 30 FPS under ideal conditions.</blockquote>

<h2>Get player data</h2>

<p>The following data can be fetched from a player:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The player’s user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.</li>

<code>publicKey</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player’s Ethereum wallet. If the player logs in as a guest, with no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>hasConnectedWeb3</code>

<li>:</li>

<em>(boolean)</em>

<li>Indicates if the player has a public key.</li>

<em>True</em>

<li>if the player has one.</li>

<code>avatar</code>

<li>: A nested object with data about the player’s appearance.</li>

<code>version</code>

<li>:</li>

<em>(number)</em>

<li>A version number that increases by one every time the player changes any of their settings. Use this if you encounter conflicting data, to know what version is more recent.</li>

<strong>📔 Note</strong>

<blockquote>: For any Ethereum transactions with the player, always use the</blockquote>

<code>publicKey</code>

<blockquote>field, instead of the</blockquote>

<code>userId</code>

<blockquote>, to avoid dealing with non-existing wallets.</blockquote>

<p>The</p>

<code>avatar</code>

<p>object has the following nested information:</p>

<code>wearables</code>

<p>:</p>

<code>WearableId[]</code>

<p>An array of identifiers for each of the wearables that the player is currently wearing. For example</p>

<code>urn:decentraland:off-chain:base-avatars:green_hoodie</code>

<p>. All wearables have a similar identifier, even if they’re NFTs.</p>

<code>bodyShape</code>

<p>: An identifier for the avatar’s general body shape. Either</p>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<p>for female or</p>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<p>for male.</p>

<code>skinColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s skin color.</p>

<code>hairColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s hair color.</p>

<code>eyeColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s eye color.</p>

<code>snapshots</code>

<p>: A nested object with base64 representations of .jpg images of the player in various resolutions.</p>

<code>face256</code>

<li>:</li>

<em>string</em>

<li>The player’s face as a 256x256 pixel image.</li>

<code>body</code>

<li>:</li>

<em>string</em>

<li>The full resolution image of the player standing straight, with 512x1024 pixels.</li>

<strong>❗Warning</strong>

<blockquote>The snapshots of the avatar will be deprecated in the future and will no longer be returned as part of an avatar’s data. The recommended approach is to use</blockquote>

<code>AvatarTexture</code>

<blockquote>instead, see</blockquote>

<blockquote>).</blockquote>

<h4>Data from current player</h4>

<p>To obtain information from the current player that’s running the scene, use</p>

<code>getUserData()</code>

<p>.</p>

<p>The example below imports the</p>

<code>Identity</code>

<p>library and runs</p>

<code>getUserData()</code>

<p>.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getUserData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h4>Data from nearby players</h4>

<p>You can obtain data from other players that are nearby, by calling</p>

<code>getPlayerData()</code>

<p>, passing the id of a Decentraland account.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getPlayerData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getPlayerData()</code>

<p>can only fetch data from players who are currently nearby. They don’t have to be necessarily standing in the same scene, but in visual range, that’s because this information is being fetched from the local engine that’s rendering these avatars. To try this out in preview, open a second tab and log in with a different account.</p>

<strong>📔 Note</strong>

<blockquote>: User IDs must always be lowercase. If copying a wallet address, make sure all the characters are set to lowercase.</blockquote>

<p>To know what players are being rendered in the surroundings, use</p>

<code>getConnectedPlayers()</code>

<p>. This function returns an array with the ids of all the players that are currently being rendered, which are all eligible to call with</p>

<code>getPlayerData()</code>

<p>. You can pair this with listening for new players connecting and disconnecting by using</p>

<code>onPlayerConnectedObservable</code>

<p>and</p>

<code>onPlayerDisconnectedObservable</code>

<p>.</p>

<p>As an alternative, you can use</p>

<code>getPlayersInScene()</code>

<p>to only fetch the players that are standing within the scene boundaries and also being rendered. You can pair this with listening to new players entering and leaving the scene by using</p>

<code>onEnterSceneObservable</code>

<p>and</p>

<code>onLeaveSceneObservable</code>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more about</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>in</blockquote>

<blockquote>and about about</blockquote>

<code>onEnterSceneObservable</code>

<blockquote>and</blockquote>

<code>onLeaveSceneObservable</code>

<blockquote>in</blockquote>

<blockquote>.</blockquote>

<p>Listen for events when players connect and disconnect

As more players connect and disconnect, you can pic</p>

<h4>Data from any player</h4>

<p>To obtain information from any player, make a</p>

<p>to the content servers. This returns the same information as the</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>functions, detailed at the start of the section.</p>

<p>This information is exposed in the following URL, appending the player’s user id to the url parameter.</p>

<code>https://peer.decentraland.org/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<p>Unlike</p>

<code>getPlayerData()</code>

<p>, this option is not limited to just the players who are currently being rendered in the surroundings. With this approach you can fetch data from any player that has logged onto the servers in the past.</p>

<p>If you know which server the player you want to query is connected to, you can get more up-to-date data by sending your requests to that specific server. For example, if the player changes clothes, this information will be available instantly in the player’s server, but will likely take a couple of minutes to propagate to the</p>

<code>peer.decentraland.org</code>

<p>server.</p>

<code>https://<player server>/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: You can obtain the current player’s server by doing</blockquote>

<code>getCurrentRealm().domain</code>

<blockquote>.</blockquote>

<p>This example combines</p>

<code>getUserData()</code>

<p>and</p>

<code>getCurrentRealm()</code>

<p>to obtain the player’s data directly from the server that the player is on:</p>

<h2>Get player’s public Ethereum key</h2>

<p>As an alternative to</p>

<code>getUserData()</code>

<p>, you can obtain a player’s public Ethereum key by using</p>

<code>getUserPublicKey()</code>

<p>. You can then use this information to send payments to the player, or as a way to recognize players.</p>

<p>The example below imports the</p>

<code>Identity</code>

<p>library and runs</p>

<code>getUserPublicKey()</code>

<p>to get the public key of the player’s Ethereum account and log it to console. The player must be logged into their Metamask account on their browser for this to work.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getUserPublicKey()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h2>Get Decentraland Time</h2>

<p>Decentraland follows a day/night cycle that takes 2 hours to be completed, so there are 12 full cycles every day. Players can also change the settings to experience a specific fixed time of day, for example to always see Decentraland with a 10pm night sky. For this reason, Decentraland time may vary from one player to another.</p>

<p>Use</p>

<code>getDecentralandTime()</code>

<p>to fetch the time of day that the player is experiencing inside Decentraland.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getDecentralandTime()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getDecentralandTime()</code>

<p>returns an object with a</p>

<code>seconds</code>

<p>property. This property indicates how many seconds have passed (in Decentraland time) since the start of the day, assuming the full cycle lasts 24 hours. Divide the seconds value by 60 to obtain minutes, and by 60 again to obtain the hours since the start of the day. For example, if the</p>

<code>seconds</code>

<p>value is</p>

<em>36000</em>

<p>, it corresponds to</p>

<em>10 AM</em>

<p>.</p>

<p>In Decentraland time, the sun always rises at 6:15 and sets at 19:50.</p>

<p>You could use this information to change the scene accordingly, for example to play bird sounds when there’s daylight and crickets when it’s dark, or to turn the emissive materials on street lamps when it’s dark.</p>

<h2>Get player realm data</h2>

<p>Players in decentraland exist in several separate</p>

<em>realms</em>

<p>. Players in different realms can’t see each other, interact or chat with each other, even if they’re standing on the same parcels. Dividing players like this allows Decentraland to handle an unlimited amount of players without running into any limitations. It also pairs players who are in close regions, to ensure that ping times between players that interact are acceptable.</p>

<p>If your scene sends data to a</p>

<p>to sync changes between players in real time, then it’s often important that changes are only synced between players that are on the same realm. You should handle all changes that belong to one realm as separate from those on a different realm. Otherwise, players will see things change in a spooky way, without anyone making the change.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getCurrentRealm()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<p>Decentraland handles its communications between players (including player positions, chat, messageBus messages and smart item state changes) through a decentralized network of communication servers, each of these servers is called a</p>

<strong>Realm</strong>

<p>. Each one of these servers can support multiple separate</p>

<strong>rooms</strong>

<p>(also called</p>

<strong>islands</strong>

<p>), each grouping a different set of players that are near each other on the Decentraland map.</p>

<p>The</p>

<code>getCurrentRealm()</code>

<p>function returns the following information:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The full address of the realm, composed of the server + the room</li>

<code>domain</code>

<li>:</li>

<em>(string)</em>

<li>The URL of the server the player is connected to</li>

<code>serverName</code>

<li>:</li>

<em>(string)</em>

<li>The name of the server the player is connected to</li>

<code>room</code>

<li>:</li>

<em>(string)</em>

<li>The name of the room the player is connected to, in some versions of comms, this is a 1-to-1 map to the island name</li>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>layer</code>

<blockquote>property is deprecated, and should be avoided.</blockquote>

<p>As players move through the map, they may switch rooms to be grouped with those players who are now closest to them. Rooms also shift their borders dynamically to fit a manageable group of people, so even if a player stands still, as players enter and leave the world, the player could find themselves on another room. Players in a same</p>

<code>room</code>

<p>are communicated, and will share messages across the MessageBus even if they;re too far to see each other. Players in a same server but in different rooms are not currently communicating, but they might get communicated as they move around the map and change rooms.</p>

<p>See</p>

<p>for how to detect changes regarding the player’s realm or island.</p>

<strong>📔 Note</strong>

<blockquote>: When the scene first loads, there might not yet be a room assigned for the player. The explorer will eventually assign a room to the player, but this can sometimes occur a couple of seconds after the scene is loaded.</blockquote>

<h2>Get player platform</h2>

<p>Players can access Decentraland via various platforms, currently via the browser or via the native desktop app.</p>

<p>Use</p>

<code>getPlatform()</code>

<p>to know what platform the current player is running Decentraland on.</p>

<p>Players using the desktop app are likely to have a much smoother experience than those on the browser, since the browser imposes performance limitations on how much of the machine’s processing power the browser tab can use. You could use this information to render higher quality materials or other performance-heavy improvements only for players on desktop, as they are less likely to suffer bad frame rate from the extra content.</p>

<h2>Get Portable Experiences</h2>

<p>Portable experiences are essentially scenes that are not constrained to parcels of land. Players can carry these with them anywhere they go in Decentraland, adding a new layer of content over the world. Smart Wearables are examples of portable experiences. You may want to know if a player is wearing one of these, since a smart wearable may enable players to have abilities that could be considered cheating in a competitive game. For example, in a platform game, a player that wears a jetpack has a very unfair advantage over others.</p>

<p>As a scene creator, you may want to limit what players wearing portable experiences can do in your scene. Use</p>

<code>getPortableExperiencesLoaded()</code>

<p>to check if the player has any portable experiences currently activated.</p>

<code>getPortableExperiencesLoaded()</code>

<p>returns an array of objects, each of these objects includes an</p>

<code>id</code>

<p>attribute. In the case of wearables, the id is the wearable’s URN.</p>

<h2>Get detailed info about a player’s wearables</h2>

<p>The</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>return only a list of wearable ids, without information about each wearable. If instead of individual wearables you want to check for any wearable of a specific category (eg: hats), or any wearable of a specific rarity (eg: Mythic), then you’ll need to fetch more detailed information about the player’s wearables.</p>

<p>Make a</p>

<p>to the following URL, to obtain a full updated list of all wearables that are currently usable, with details about each.</p>

<code>${playerRealm.domain}/lambdas/collections/wearables-by-owner/${userData.userId}?includeDefinitions</code>

<strong>📔 Note</strong>

<blockquote>: To construct this URL, you must obtain the realm (likely with with</blockquote>

<code>getCurrentRealm()</code>

<blockquote>) and the player’s id (likely with</blockquote>

<code>getUserData()</code>

<blockquote>)</blockquote>

<p>This feature could be used together with fetching info about the player, to for example only allow players to enter a place if they are wearing any wearable from the halloween collection, or any wearable that is of</p>

<em>legendary</em>

<p>rarity.</p>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<h2>Check the player’s camera mode</h2>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>Camera.instance.cameraMode</code>

<blockquote>is currently deprecated and is not always reliable. The recommended approach is to track camera change events with</blockquote>

<code>onCameraModeChangedObservable</code>

<blockquote>. This event is fired once when the scene first obtains information about the player’s current camera mode, and then any time the player changes camera mode while in or around your scene. See</blockquote>

<blockquote>.</blockquote>

<p>Players can either be using a 1st or 3rd person camera when exploring Decentraland. Check which of these the player is using by checking the value</p>

<code>Camera.instance.cameraMode</code>

<p>.</p>

<p>The value of this property can either be</p>

<code>CameraMode.FirstPerson</code>

<p>or</p>

<code>CameraMode.ThirdPerson</code>

<p>.</p>

<p>The</p>

<code>Camera.instance.cameraMode</code>

<p>property is read-only, you can’t force the player to change camera mode.</p>

<strong>💡 Tip</strong>

<blockquote>: To encourage players to use a particular camera mode in your scene, display a UI message advising them to switch modes whenever they use the wrong one.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when in 3rd person.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/#get-player-data

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/materials/#avatar-portraits

<title>Materials via code | Decentraland Documentation</title>

<strong>Materials via code</strong>

<h1>Materials via code</h1>

<h2>Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by setting them as a component.</p>

<p>You can either set a</p>

<code>Material</code>

<p>or a</p>

<code>BasicMaterial</code>

<p>component. Each entity can only have one of these. Both components have several fields that allow you to configure the properties of the material, add a texture and set the texture’s mapping.</p>

<p>You can’t add material components to</p>

<em>glTF</em>

<p>models.</p>

<em>glTF</em>

<p>models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See</p>

<p>for more details.</p>

<h2>Create and apply a material</h2>

<p>The following example creates a material, sets some of its fields to give it a red color and metallic properties, and then applies the material to an entity that also has a</p>

<code>boxShape</code>

<p>component.</p>

<p>See</p>

<p>) for a full list of all the fields that can be configured in a</p>

<code>Material</code>

<p>of</p>

<code>BasicMaterial</code>

<p>component.</p>

<h2>Basic materials</h2>

<p>Instead of the</p>

<code>Material</code>

<p>component, you can define a material through the</p>

<code>BasicMaterial</code>

<p>entity. This creates materials that are shadeless and are not affected by light. This is useful for creating user interfaces that should be consistently bright, it can also be used to give your scene a more minimalist look.</p>

<strong>📔 Note</strong>

<blockquote>: Basic materials have some property names that are different from those in normal materials. For example it uses</blockquote>

<code>texture</code>

<blockquote>instead of</blockquote>

<code>albedoTexture</code>

<blockquote>.</blockquote>

<h2>Material colors</h2>

<p>Give a material a plain color. In a</p>

<code>BasicMaterial</code>

<p>component, you set the</p>

<code>color</code>

<p>field. In a</p>

<code>Material</code>

<p>component, you set the</p>

<code>albedoColor</code>

<p>field. Albedo colors respond to light and can include shades on them.</p>

<p>All color fields are either of type</p>

<code>Color3</code>

<p>or</p>

<code>Color4</code>

<p>.</p>

<code>Color3</code>

<p>holds three values, for</p>

<em>Red</em>

<p>,</p>

<em>Green</em>

<p>and</p>

<em>Blue</em>

<p>. Each of these numbers is between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>.</p>

<code>Color4</code>

<p>holds those same three values and a fourth value for</p>

<em>Alpha</em>

<p>, also between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>, where</p>

<em>0</em>

<p>is completely transparent and</p>

<em>1</em>

<p>is completely opaque.</p>

<strong>📔 Note</strong>

<blockquote>: If you set any color in</blockquote>

<code>albedoColor</code>

<blockquote>to a value higher than</blockquote>

<em>1</em>

<blockquote>, it will appear as</blockquote>

<em>emissive</em>

<blockquote>, with more intensity the higher the value. So for example,</blockquote>

<code>new Color3(15, 0, 0)</code>

<blockquote>produces a very bright red glowing color.</blockquote>

<p>You can also pick predetermined colors using the following functions of the</p>

<code>Color3</code>

<p>object:</p>

<p>You can otherwise pick a random color using the following function:</p>

<p>If you prefer to specify a color using hexadecimal values, as is often done in JavaScript web development, you can do so using the</p>

<code>.FromHexString()</code>

<p>function</p>

<p>The</p>

<code>Color3</code>

<p>object also includes a lot of other functions to add, substract, compare, lerp, or convert the format of colors.</p>

<p>You can also edit the following fields in a</p>

<code>Material</code>

<p>component to fine-tune how its color is percieved:</p>

<em>emissiveColor</em>

<li>: The color emitted from the material.</li>

<em>ambientColor</em>

<li>: AKA</li>

<em>Diffuse Color</em>

<li>in other nomenclature.</li>

<em>reflectionColor</em>

<li>: The color reflected from the material.</li>

<em>reflectivityColor</em>

<li>: AKA</li>

<em>Specular Color</em>

<li>in other nomenclature.</li>

<h4>Change a color gradually</h4>

<p>Change a color gradually with linear interpolation between two colors, using the</p>

<code>.Lerp()</code>

<p>function.</p>

<p>The example above changes the color of a material from red to yellow, incrementally shifting it on every frame.</p>

<h2>Using textures</h2>

<p>Reference an image file as a texture by creating a</p>

<code>Texture</code>

<p>component. You can then reference this texture component in the fields of both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>components.</p>

<p>In a</p>

<code>Material</code>

<p>component, you can set the</p>

<code>albedoTexture</code>

<p>field to a texture image. Albedo textures respond to light and can include shades on them.</p>

<p>While creating a texture, you can also pass additional parameters:</p>

<code>samplingMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered</li>

<code>wrap</code>

<li>: Determines how a texture is tiled onto an object (see</li>

<li>)</li>

<h4>Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<p>The URL must start with</p>

<code>https</code>

<p>,</p>

<code>http</code>

<p>URLs aren’t supported. The site where the image is hosted should also have</p>

<p>that permit externally accessing it.</p>

<h4>Textures on basic materials</h4>

<p>In a</p>

<code>BasicMaterial</code>

<p>component, you can set the</p>

<code>texture</code>

<p>field to an image texture. This will render a texture that isn’t affected by lighting.</p>

<h4>Multi-layered textures</h4>

<p>It also allows you to use several image files as layers to compose more realistic textures, for example including a</p>

<code>bumpTexture</code>

<p>and a</p>

<code>refractionTexture</code>

<p>.</p>

<p>In the example above, the image for the material is located in a</p>

<code>materials</code>

<p>folder, which is located at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<p>: We recommend keeping your texture image files separate in a</p>

<code>/materials</code>

<p>folder inside your scene.</p>

<p>A material can have multiple layers of texture, you can see what these are on a source code editor by clicking</p>

<code>.</code>

<p>and letting the autocomplete menu show you the list.</p>

<h4>Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure</p>

<em>uv</em>

<p>properties on the</p>

<p>.</p>

<p>You set</p>

<em>u</em>

<p>and</p>

<em>v</em>

<p>coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more</p>

<em>uv</em>

<p>coordinates need to be defined on the texture, a plane for example needs to have 8</p>

<em>uv</em>

<p>points defined, 4 for each of its two faces.</p>

<p>The following example includes a function that simplifies the setting of uvs. The</p>

<code>setUVs</code>

<p>function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<p>For setting the UVs for a</p>

<code>BoxShape</code>

<p>component, the same structure applies. Each of the 6 faces of the cube takes 4 values, one for each corner. All of these 24 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The</p>

<code>Texture</code>

<p>component lets you configure the wrapping mode by setting the</p>

<code>wrap</code>

<p>field. The wrapping mode can be</p>

<code>CLAMP</code>

<p>,</p>

<code>WRAP</code>

<p>or</p>

<code>MIRROR</code>

<p>.</p>

<code>CLAMP</code>

<li>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>

<code>WRAP</code>

<li>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>

<code>MIRROR</code>

<li>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>wrap</code>

<blockquote>property must be set when instancing the texture, after that it’s a read-only property.</blockquote>

<p>The example above sets the wrapping mode to</p>

<code>MIRROR</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Uv properties are currently only available on</blockquote>

<code>PlaneShape</code>

<blockquote>and on</blockquote>

<code>BoxShape</code>

<blockquote>components.</blockquote>

<h4>Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various</p>

<p>algorithms that exist to compensate for this in different ways. The</p>

<code>Texture</code>

<p>object uses the</p>

<em>bilinear</em>

<p>algorithm by default, but it lets you configure it to use the</p>

<em>nearest neighbor</em>

<p>or</p>

<em>trilinear</em>

<p>algorithms instead by setting the</p>

<code>samplingMode</code>

<p>property.</p>

<p>The example above uses a nearest neighbor algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</p>

<h2>Avatar Portraits</h2>

<p>To display a thumbnail image of any player, create an</p>

<code>AvatarTexture</code>

<p>, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<h2>Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a</p>

<code>Color4</code>

<p>, and set the 4th value to something between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. The closer to</p>

<em>1</em>

<p>, the more opaque it will be.</p>

<p>To make a material with texture transparent:</p>

<li>Set an image in</li>

<code>alphaTexture</code>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</blockquote>

<li>Optionally set the</li>

<code>transparencyMode</code>

<li>to: -</li>

<code>OPAQUE</code>

<li>: No transparency at all -</li>

<code>ALPHATEST</code>

<li>: Each pixel is either completely opaque or completely transparent, based on a threshold. -</li>

<code>ALPHABLEND</code>

<li>: Intermediate values are possible based on the value of each pixel.</li>

<li>If you set the</li>

<code>transparencyMode</code>

<li>to</li>

<code>ALPHATEST</code>

<li>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the</li>

<code>alphaTest</code>

<li>property between</li>

<em>0</em>

<li>and</li>

<em>1</em>

<li>. By default its value is</li>

<em>0.5</em>

<li>.</li>

<h2>Casting no shadows</h2>

<p>To prevent a material from casting shadows over other objects, both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>have a</p>

<code>castShadows</code>

<p>property that you can set to</p>

<em>false</em>

<p>. This property is always</p>

<em>true</em>

<p>by default.</p>

<h2>Reuse materials</h2>

<p>If multiple entities in your scene use a same material, there’s no need to create an instance of the material component for each. All entities can share one same instance, this keeps your scene lighter to load and prevents you from exceeding the maximum amount of materials per scene.</p>

<h2>Video playing</h2>

<p>To stream video from a URL into a material, or play a video from a file stored in the scene, see</p>

<p>.</p>

<p>The video is used as a texture on a material, you can set any of the other properties of materials to alter how the video screen looks.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/materials/#avatar-portraits

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/video-playing/

<title>Play videos | Decentraland Documentation</title>

<strong>Play videos</strong>

<h1>Play videos</h1>

<p>There are two different ways you can show a video in a scene. One is to stream the video from an external source, the other is to pack the video file with the scene and play it from there.</p>

<p>In both cases, you assign the video to a</p>

<code>VideoTexture</code>

<p>, which can be used on a</p>

<p>and then applied to any</p>

<p>like a plane, cube, or even a cone.</p>

<strong>💡 Tip</strong>

<blockquote>: Since the video is a texture that’s added to a material, you can also experiment with other properties of materials, like tinting it with a color, of adding other texture layers. for example to produce a dirty screen effect.</blockquote>

<h2>Show a video</h2>

<p>The following instructions apply both to streaming and to showing a video from a file:</p>

<p>Create a</p>

<code>VideoClip</code>

<p>object, either referencing a streaming URL or a path to a video file.</p>

<p>Create a</p>

<code>VideoTexture</code>

<p>object, and assign the</p>

<code>VideoClip</code>

<p>to it.</p>

<p>Create a</p>

<code>Material</code>

<p>or</p>

<code>BasicMaterial</code>

<p>, and set its</p>

<code>albedoTexture</code>

<p>or</p>

<code>texture</code>

<p>to the</p>

<code>VideoTexture</code>

<p>you created.</p>

<p>Then add that</p>

<code>Material</code>

<p>to an entity that has a primitive shape, like a</p>

<code>PlaneShape</code>

<p>or a</p>

<code>BoxShape</code>

<p>.</p>

<p>Play the video texture</p>

<p>This example uses a video stream:</p>

<p>To use a video file, just change the first step to reference the path to the file:</p>

<h2>Video Materials</h2>

<p>To many, the default properties of a material make the video look quite opaque for a screen, but you can enhance that by altering other properties of the material.</p>

<p>If you want the screen to glow a little, you can even set the</p>

<code>emissiveTexture</code>

<p>of the material to the same</p>

<code>VideoTexture</code>

<p>as the</p>

<code>albedoTexture</code>

<p>.</p>

<p>See</p>

<p>for more details.</p>

<h2>About Streaming</h2>

<p>The source of the streaming must be an</p>

<em>https</em>

<p>URL (</p>

<em>http</em>

<p>URLs aren’t supported), and the source should have</p>

<p>that permit externally accessing it. If this is not the case, you might need to set up a server to act as a proxy and expose the stream in a valid way.</p>

<p>To launch your own video streaming server, we recommend using a</p>

<p>, which provides most of what you need out of the box.</p>

<p>Keep in mind that streaming video demands a significant effort from the player’s machine. We recommend not having more than one video stream displayed at a time per scene. Also avoid streaming videos that are in very high resolution, don’t use anything above</p>

<em>HD</em>

<p>. We also recommend activating the stream only once the player performs an action or approaches the screen, to avoid affecting neighbouring scenes.</p>

<h2>About Video Files</h2>

<p>The following file formats are supported:</p>

<em>.mp4</em>

<em>.ogg</em>

<em>.webm</em>

<p>Keep in mind that a video file adds to the total size of the scene, which makes the scene take longer to download for players walking into your scene. The video size might also make you go over the</p>

<p>, as you have a maximum of 15 MB per parcel to use. We recommend compressing the video as much as possible, so that it’s less of a problem.</p>

<p>We also recommend starting to play the video when the player is near or performs an action to do that. Starting to play a video when your scene is loaded far in the horizon will unnecessarily affect performance while players visit neighboring scenes.</p>

<h2>Handle a video file</h2>

<p>When playing a video from a file, you can perform the following actions:</p>

<code>play()</code>

<p>: Plays the video. It will start from where the</p>

<code>seek</code>

<p>property indicates.</p>

<code>pause()</code>

<p>: Stops the video playing, but leaves its</p>

<code>seek</code>

<p>property where the video last was. The last played frame remains visible.</p>

<code>reset()</code>

<p>: Stops the video playing and sends its</p>

<code>seek</code>

<p>property back to the begining of the video. The first frame of the video is displayed.</p>

<code>seekTime()</code>

<p>: Sets the</p>

<code>seek</code>

<p>property to a specific value, so that the video plays from that point on. It’s expressed in seconds after the video’s original beginning.</p>

<p>You can also change the following properties:</p>

<code>loop</code>

<p>: Boolean that determines if the video is played continuously in a loop, or if it stops after playing once.</p>

<em>false</em>

<p>by default.</p>

<code>playbackRate</code>

<p>: Changes the speed at which the video is played.</p>

<em>1</em>

<p>by default.</p>

<code>volume</code>

<p>: Lets you change the volume of the audio.</p>

<em>1</em>

<p>by default.</p>

<code>seek</code>

<p>: Allows you to set a different starting position on the video. It’s expressed in seconds after the video’s original beginning.</p>

<em>-1</em>

<p>by default, which makes it start at the actual start of the video.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/#get-player-data

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/async-functions/

<title>Asynchronous code | Decentraland Documentation</title>

<strong>Asynchronous code</strong>

<h1>Asynchronous code</h1>

<h2>Overview</h2>

<p>Most of the code in your scene runs synchronously using a single thread. That means that commands are executed sequentially line by line. Each command must first wait for the previous command to finish executing before it can start.</p>

<p>Even the</p>

<code>update()</code>

<p>functions in your scene’s systems are executed one by one, following a</p>

<p>.</p>

<p>Running code synchronously ensures consistency, as you can always be sure you’ll know the order in which the commands in your code run.</p>

<p>On the other hand, your scene needs to be updated many times per second, building the next frame. If a part of your code takes too long to respond, then the whole main thread is stuck and this results in lagging frame rates.</p>

<p>That’s why, in some cases you want some commands to run asynchronously. This means that you can start off a task in a new thread, and meanwhile the main thread can keep running over the the next lines of code.</p>

<p>This is especially useful for tasks that rely on external services that could take time to respond, as you don’t want that idle time waiting for that response to block other tasks.</p>

<p>For example:</p>

<li>When playing a sound file</li>

<li>When retrieving data from a REST API</li>

<li>When performing a transaction on the blockchain</li>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that several frames of your scene might be rendered before the task finishes executing. Make sure your scene’s code is flexible enough to handle the in-between scenarios while the asynchronous task is being completed.</blockquote>

<h2>Run an async function</h2>

<p>Mark any function as</p>

<code>async</code>

<p>so that it runs on a separate thread from the scene’s main thread every time that it’s called.</p>

<h2>The executeTask function</h2>

<p>The</p>

<code>executeTask</code>

<p>function executes a lambda function asynchronously, in a separate thread from the scene’s main thread.</p>

<h2>The then function</h2>

<p>The</p>

<code>then</code>

<p>function takes in a lambda function as an argument, that only gets executed once the prior statement is finished. This lambda function can optionally have inputs that are mapped from whatever the prior statement returns.</p>

<strong>📔 Note</strong>

<blockquote>: It’s generally better to use the</blockquote>

<code>executeTask</code>

<blockquote>approach rather than the</blockquote>

<code>then</code>

<blockquote>function. In this example, the scene won’t be considered fully loaded by the explorer till the</blockquote>

<code>myAsyncTask()</code>

<blockquote>function is completed, which may affect load times. Also, if relying too much on the</blockquote>

<code>then</code>

<blockquote>function at multiple nested levels, you can end up with what’s known as “callback hell”, where the code can become very hard to read and maintain.</blockquote>

<h2>OnPointerDown functions</h2>

<p>You can add an</p>

<code>OnPointerDown</code>

<p>component to any entity to trigger an asynchronous lambda function every time that entity is clicked.</p>

<h2>Subscribe a listener</h2>

<p>Another way to run asynchronous code is to instance an event listener. Event listeners trigger the running of an asynchronous lambda function every time that a given event occurs.</p>

<p>The example above runs a function every time that the button</p>

<em>A</em>

<p>is pressed down.</p>

<h2>The await statement</h2>

<p>An</p>

<code>await</code>

<p>statement forces the execution to wait for a response before moving over to the next line of code.</p>

<code>await</code>

<p>statements can only be used inside an async block of code.</p>

<p>The example above executes a function that includes a</p>

<code>fetch()</code>

<p>operation to retrieve data from an external API. The</p>

<code>fetch()</code>

<p>operation is asynchronous, as we can’t predict how long the server will take to respond. However, the next line needs the output of this operation to be ready before we can parse it as a json. The</p>

<code>await</code>

<p>statement here ensures that the next line will only run once that operation has returned a value. Similarly, the</p>

<code>response.json()</code>

<p>function is also asynchronous, but the next line needs the json to be parsed before it can log it. The second</p>

<code>await</code>

<p>statement forces the next line to only be called once the parsing of the json is finished, however long it takes.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/async-functions/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/systems/#system-execution-order

<title>Systems | Decentraland Documentation</title>

<strong>Systems</strong>

<h1>Systems</h1>

<p>Decentraland scenes rely on</p>

<em>systems</em>

<p>to update the information stored in each entity’s</p>

<p>as the scene changes.</p>

<em>systems</em>

<p>are what make scenes dynamic, they’re able to execute functions periodically on every frame of the scene’s game loop, changing what will be rendered.</p>

<p>The following example shows a basic system declaration:</p>

<p>In the example above, the system</p>

<code>MoveSystem</code>

<p>executes the</p>

<code>update()</code>

<p>function of each frame of the game loop, changing position of every entity in the scene.</p>

<strong>📔 Note</strong>

<blockquote>: You must add a</blockquote>

<em>System</em>

<blockquote>to the engine before its functions can be called.</blockquote>

<p>All systems act upon entities, changing the values stored in the entity’s components.</p>

<strong>💡 Tip</strong>

<blockquote>: As a simpler alternative to create custom systems, you can use the helpers in the</blockquote>

<blockquote>. The library creates systems in the background that handle common tasks like moving or rotating entities. In most cases, this library only requires a single line of code to apply these behaviors.</blockquote>

<p>You can have multiple systems in your scene to decouple different behaviors, making your code cleaner and easier to scale. For example, one system might handle physics, another might make an entity move back and forth continuously, another could handle the AI of characters.</p>

<p>Multiple systems can act on a single entity, for example a non-player character might move on its own based on its AI but also be affected by gravity when trying to walk from off a cliff.</p>

<h2>The update method</h2>

<p>The</p>

<code>update()</code>

<p>method is a boilerplate function you can extend to define the functionality of a system. It’s meant to be overwritten and interfaces with the engine in pre-established ways.</p>

<p>The</p>

<code>update()</code>

<p>method of a system is executed periodically, once per every frame of the game loop. This happens automatically, you don’t need to explicitly call this function from anywhere in your code.</p>

<p>Typically, the</p>

<code>update()</code>

<p>method is where you add most of the logic implemented by the system.</p>

<p>In a Decentraland scene, you can think of the game loop as the aggregation of all the</p>

<code>update()</code>

<p>functions in your scene’s systems.</p>

<h2>Loop over a component group</h2>

<p>Most of the time, you won’t want a system’s update function to iterate over the entire set of entities in the scene, as this could be very costly in terms of processing power. To avoid this, you can create a</p>

<p>to keep track of which are the relevant entities, and then have your system iterate over that list.</p>

<p>For example, your scene can have a</p>

<code>PhysicsSystem</code>

<p>that calculates the effect of gravity over the entities of your scene. Some entities in your scene, such as trees, are fixed, so it would make sense to avoid wasting energy in calculating the effects of gravity on these. You can then define a component group that keeps track of entities that aren’t fixed and then have</p>

<code>PhysicsSystem</code>

<p>only deal with the entities in this group.</p>

<h2>Handle a single entity</h2>

<p>Some components and systems are meant for using only on one entity in the scene. For example, on an entity that stores a game’s score or perhaps on a gate of which there’s only one in the scene. To access one of those entities from a system, you don’t want to create a component group that holds just one single entity.</p>

<p>If you create the entity in the same file as you define the system, then you can simply refer to the entity or its components by name in the system’s functions.</p>

<p>For larger projects, we recommend that you keep system definitions on separate files from the instancing of entities. If you do that, then referring to the entity from the system is tougher, because you can’t just import the entity from</p>

<code>game.ts</code>

<p>to the module with the system.</p>

<p>Since systems are also objects, you are free to add variables to them, and also to define a constructor function to pass values to these variables.</p>

<p>When instancing the system in the</p>

<code>game.ts</code>

<p>file, you must pass it a reference to the component:</p>

<strong>📔 Note</strong>

<blockquote>: You could store this data in a custom object instead of an custom component, for more simplicity.</blockquote>

<h2>Execute when an entity is added</h2>

<code>onAddEntity()</code>

<p>is another boilerplate function of every system that you can overwrite with your own code.</p>

<p>Each time a new entity is added to the engine, this function is called once, passing the new entity as an argument.</p>

<h2>Execute when an entity is removed</h2>

<code>onRemoveEntity()</code>

<p>is another boilerplate function of every system that you can overwrite with your own code.</p>

<p>Each time an entity is removed from the engine, this function is called once, passing the removed entity as an argument.</p>

<h2>Execute when a system is activated</h2>

<p>The</p>

<code>activate()</code>

<p>function is another boilerplate function that is executed once when the system is activated.</p>

<p>This can be useful when you have a system that must first carry out some initial steps, for example creating a set of materials of different colors that the update function of the system then switches between. The advantage of using the</p>

<code>activate</code>

<p>function instead of just executing these steps as soon as the scene starts, is that if your scene never uses the system, these steps won’t be executed.</p>

<h2>Delta time between frames</h2>

<p>The</p>

<code>update()</code>

<p>method always receives an argument called</p>

<code>dt</code>

<p>of type</p>

<code>number</code>

<p>(representing</p>

<em>delta time</em>

<p>), even when this argument isn’t explicitly declared.</p>

<em>delta time</em>

<p>represents time that it took for the last frame to be processed, in seconds.</p>

<p>Decentraland scenes are updated by default at 30 frames per second. This means that the</p>

<code>dt</code>

<p>argument passed to all</p>

<code>update()</code>

<p>methods is generally equal to</p>

<em>30/1000</em>

<p>.</p>

<p>If the processing of a frame takes less time than this interval, then the engine will wait the remaining time to keep updates regularly paced and</p>

<code>dt</code>

<p>will remain equal to</p>

<em>30/1000</em>

<p>.</p>

<p>If the processing of a frame takes longer than</p>

<em>30/1000</em>

<p>seconds, the drawing of that frame is delayed. The engine then tries to finish that frame and show it as soon as possible. It then proceeds to the next frame and tries to show it</p>

<em>30/1000</em>

<p>seconds after the last frame. It doesn’t compensate for the previous delay.</p>

<p>Ideally, you should try to avoid having your scene reach this situation, as it causes a drop in framerate.</p>

<p>The</p>

<code>dt</code>

<p>variable becomes useful when frame processing exceeds the default time. Assuming that the current frame will take as much time as the previous, this information may be used to calculate how much to adjust change so that it remains steady and in proportion to the lag between frames.</p>

<p>See</p>

<p>for examples of how to use</p>

<code>dt</code>

<p>to make movement smoother.</p>

<h2>Loop at a timed interval</h2>

<p>If you want a system to execute something at a regular time interval, you can do this by combining the</p>

<code>dt</code>

<p>argument with a timer.</p>

<p>For more complex use cases, where there may be multiple loops being created dynamically, it’s worth creating a component to store the timer.</p>

<h2>System execution order</h2>

<p>In some cases, when you have multiple systems running</p>

<code>update()</code>

<p>functions, you might care about what system is executed first by your scene.</p>

<p>For example, you might have a</p>

<em>physics</em>

<p>system that updates the position of entities in the scene, and another</p>

<em>boundaries</em>

<p>system that ensures that none of the entities are positioned outside the scene boundaries. In this case, you want to make sure that the</p>

<em>boundaries</em>

<p>system is executed last. Otherwise, the</p>

<em>physics</em>

<p>system could move entities outside the bounds of the scene but the</p>

<em>boundaries</em>

<p>system won’t find out till it’s executed again in the next frame.</p>

<p>When adding a system to the engine, set an optional</p>

<code>priority</code>

<p>field to determine when the system is executed in relation to other systems.</p>

<p>Systems with a lower priority number are executed first, so a system with a priority of</p>

<em>1</em>

<p>is executed before one of priority</p>

<em>5</em>

<p>.</p>

<p>Systems that aren’t given an explicit priority have a default priority of</p>

<em>0</em>

<p>, so these are executed first.</p>

<p>If two systems have the same priority number, there’s no way to know for certain which of them will be executed first.</p>

<h2>Remove a system</h2>

<p>An instance of a system can be added or removed from the engine to turn it on or off.</p>

<p>If a system isn’t added to the engine, its functions aren’t called by the engine.</p>

<p>To remove a system, you must first create a pointer to it when instancing it, so that you can refer to the system later.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/#get-player-data

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/#player-connects-or-disconnects

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>When the player changes the camera mode between 1st and 3rd person in or near your scene, this creates an event you can listen to.</p>

<p>The values of the returned property can be:</p>

<code>CameraMode.FirstPerson</code>

<code>CameraMode.ThirdPerson</code>

<p>This event is fired once when the scene first obtains information about the player’s current camera mode, and then any time the player changes camera mode while in or around your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: To encourage players to use a particular camera mode in your scene, display a UI message advising them to switch modes whenever they use the wrong one.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<p>Note: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</p>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<p>Note: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</p>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<p>Tip: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</p>

<p>.</p>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player goes idle</h2>

<p>Whenever the player is inactive for a full minute, without interacting with any input being picked up by the Decentraland explorer, we can consider the player to be idle. Whenever this happens, it creates an event that you can listen to.</p>

<p>The</p>

<code>isIdle</code>

<p>property is a boolean value that is</p>

<em>true</em>

<p>when the player enters the idle mode and</p>

<em>false</em>

<p>when the player leaves the idle mode.</p>

<p>This event is especially useful for multiplayer scenes, when you might want to disconnect from the server players who are likely away from the machine or left Decentraland in a tab in the background.</p>

<strong>📔 Note</strong>

<blockquote>: The idle state is inferred based on the player not using the keyboard or mouse for a full minute. This can of course produce false positives, for example a player might be watching other players interact or watching a video stream, standing still but fully engaged. Be mindful of these corner cases and what the experience is like for a player who stands still for a while.</blockquote>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<strong>💡 Tip</strong>

<blockquote>: When this event is triggered, you can then use the</blockquote>

<blockquote>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</blockquote>

<code>getUserData()</code>

<blockquote>to ensure that the version this function returns is up to date.</blockquote>

<p>When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<h2>Video playing</h2>

<p>When a</p>

<code>VideoTexture</code>

<p>changes its playing status, the</p>

<code>onVideoEvent</code>

<p>observable receives an event.</p>

<p>The input of a video event contains the following properties:</p>

<code>videoClipId</code>

<p>(</p>

<em>string</em>

<p>): The ID for the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>componentId</code>

<p>(</p>

<em>string</em>

<p>): The ID of the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>currentOffset</code>

<p>(</p>

<em>number</em>

<p>): The current value of the</p>

<code>seek</code>

<p>property on the video. This value shows seconds after the video’s original beginning.</p>

<em>-1</em>

<p>by default.</p>

<code>totalVideoLength</code>

<p>(</p>

<em>number</em>

<p>): The length in seconds of the entire video.</p>

<em>-1</em>

<p>if length is unknown.</p>

<code>videoStatus</code>

<p>: The value for the new video status of the</p>

<code>VideoTexture</code>

<p>, expressed as a value from the</p>

<code>VideoStatus</code>

<p>enum. This enum can hold the following possible values:</p>

<code>VideoStatus.NONE</code>

<p>= 0,</p>

<code>VideoStatus.ERROR</code>

<p>= 1,</p>

<code>VideoStatus.LOADING</code>

<p>= 2,</p>

<code>VideoStatus.READY</code>

<p>= 3,</p>

<code>VideoStatus.PLAYING</code>

<p>= 4,</p>

<code>VideoStatus.BUFFERING</code>

<p>= 5</p>

<p>Learn more about playing videos in Decentraland in</p>

<p>.</p>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on a</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/#player-connects-or-disconnects

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/click-events/

<title>Button events | Decentraland Documentation</title>

<strong>Button events</strong>

<h1>Button events</h1>

<p>Decentraland accepts events from pointer clicks, a primary button and a secondary button.</p>

<p>Clicks can be done either with a mouse, a touch screen, a VR controller or some other device, these all generate the same type of event.</p>

<p>The primary and secondary buttons map respectively to the E and F key on a keyboard.</p>

<strong>📔 Note</strong>

<blockquote>: Entities that don’t have a shape component, or that have their shape’s</blockquote>

<code>visible</code>

<blockquote>field set to</blockquote>

<em>false</em>

<blockquote>don’t respond to pointer events.</blockquote>

<h2>Pointer event components</h2>

<h4>OnPointerDown</h4>

<p>The best way to handle pointer and button down events is to add an</p>

<code>OnPointerDown</code>

<p>component to an entity.</p>

<p>The component requires that you pass it a function as a main argument. This function declares what to do in the event of a button down event while the player points at the entity.</p>

<strong>💡 Tip</strong>

<blockquote>: To keep your code easier to read, the function in the</blockquote>

<code>OnPointerDown</code>

<blockquote>can consist of just a call to a separate function that contains all of the logic.</blockquote>

<p>The</p>

<code>OnPointerDown</code>

<p>component has a second optional parameter, this parameter is an object that can include multiple properties about the event. These properties are explained in greater detail in the next few sub-sections.</p>

<code>button</code>

<li>: Which key to listen for, from the</li>

<code>ActionButton</code>

<li>enum:</li>

<code>ActionButton.POINTER</code>

<li>(left mouse click on PC)</li>

<code>ActionButton.PRIMARY</code>

<li>(</li>

<em>E</em>

<li>on PC)</li>

<code>ActionButton.SECONDARY</code>

<li>(</li>

<em>F</em>

<li>on PC)</li>

<code>hoverText</code>

<li>: Hint text to display on the UI when pointing at the entity.</li>

<code>distance</code>

<li>: Maximum click distance.</li>

<h4>OnPointerUp</h4>

<p>Add an</p>

<code>OnPointerUp</code>

<p>component to track when a player releases the mouse button, the primary or the secondary button while pointing at the entity.</p>

<p>Like the</p>

<code>OnPointerDown</code>

<p>, the</p>

<code>OnPointerUp</code>

<p>component requires a</p>

<em>callback function</em>

<p>that declares what to do in the event of a button up event while pointing at the entity.</p>

<p>This component also takes a second argument that supports the same additional fields as teh</p>

<code>OnPointerDown</code>

<p>component.</p>

<h4>Specific button events</h4>

<p>The</p>

<code>OnPointerDown</code>

<p>and</p>

<code>OnPointerUp</code>

<p>components can respond to the following different buttons:</p>

<code>POINTER</code>

<li>(left mouse click on PC)</li>

<code>PRIMARY</code>

<li>(</li>

<em>E</em>

<li>on PC)</li>

<code>SECONDARY</code>

<li>(</li>

<em>F</em>

<li>on PC)</li>

<p>You can configure the components by setting the</p>

<code>button</code>

<p>field in the second argument of the component initializer.</p>

<p>If no button is specified,</p>

<code>ActionButton.ANY</code>

<p>is used as the default. This detects events from any of the available buttons on these components.</p>

<h4>Hint messages</h4>

<p>When a player hovers the cursor over an item with an</p>

<code>OnPointerDown</code>

<p>or</p>

<code>OnPointerUp</code>

<p>component, the cursor changes shape to hint to the player that the entity is interactive.</p>

<p>You can also display a toast message in the UI that lets the player know what happens when interacting with the entity.</p>

<p>In the example above, the second argument of the</p>

<code>OnPointerDown</code>

<p>component has an object with the following arguments:</p>

<code>button</code>

<li>: What button to respond to</li>

<code>showFeedback</code>

<li>: Boolean to turn the feedback on or off. It’s</li>

<em>true</em>

<li>by default.</li>

<code>hoverText</code>

<li>: String to display in the UI while the player points at the entity. By default, this string spells</li>

<em>Interact</em>

<li>, unless</li>

<code>showFeedback</code>

<li>is</li>

<em>false</em>

<li>.</li>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>hoverText</code>

<blockquote>string should describe the action that happens when interacting. For example</blockquote>

<code>Open</code>

<blockquote>,</blockquote>

<code>Activate</code>

<blockquote>,</blockquote>

<code>Grab</code>

<blockquote>,</blockquote>

<code>Select</code>

<blockquote>. These strings should be as short as possible, to avoid stealing too much focus from the player.</blockquote>

<p>The</p>

<code>hoverText</code>

<p>of an</p>

<code>OnPointerUp</code>

<p>component is only displayed while the player is already holding down the corresponding key and pointing at the entity.</p>

<p>If an entity has both an</p>

<code>OnPointerDown</code>

<p>and an</p>

<code>OnPointerUp</code>

<p>component, the hint for the</p>

<code>OnPointerDown</code>

<p>is shown while the button is not being pressed. The hint switches to the one from the</p>

<code>OnPointerUp</code>

<p>only when the button is pressed and remains pressed.</p>

<h4>Max click distance</h4>

<p>By default, entities are only clickable when the player is within a close range of the entity, at a maximum distance of</p>

<em>10 meters</em>

<p>. You can optionally configure the maximum distance through the</p>

<code>distance</code>

<p>parameter of the</p>

<code>OnPointerDown</code>

<p>and</p>

<code>OnPointerUp</code>

<p>components.</p>

<p>The example above sets the maximum distance to</p>

<em>8 meters</em>

<p>.</p>

<h4>Event arguments</h4>

<p>The</p>

<em>pointer down event</em>

<p>and the</p>

<em>pointer up event</em>

<p>objects are implicitly passed as parameters of the functions in the</p>

<code>OnPointerDown</code>

<p>and</p>

<code>OnPointerUp</code>

<p>components, respectively. This event object contains various properties that might be useful for the function. See</p>

<p>for more details.</p>

<h4>Multiple buttons on an entity</h4>

<p>You may want to make an entity respond to different buttons in different ways. Each entity can only have</p>

<em>one</em>

<code>OnPointerDown</code>

<p>component, and</p>

<em>one</em>

<code>OnPointerUp</code>

<p>component, but you can use</p>

<code>ActionButton.ANY</code>

<p>and then tell them apart within the function.</p>

<p>Check the</p>

<code>buttonId</code>

<p>field from the event data. The value of this field returns a number, which maps to the values in the</p>

<code>ActionButton</code>

<p>array, for example by</p>

<code>POINTER</code>

<p>maps to</p>

<em>0</em>

<p>,</p>

<code>PRIMARY</code>

<p>to</p>

<em>1</em>

<p>,</p>

<code>SECONDARY</code>

<p>to</p>

<em>2</em>

<p>, etc.</p>

<p>Players will see a single label when hovering over the entity, so make sure it’s clear that there are multiple ways to interact with it.</p>

<h2>Properties of button events</h2>

<p>The events from</p>

<code>OnPointerDown</code>

<p>and</p>

<code>OnPointerUp</code>

<p>components, as well as all the global button event objects, contain the following parameters:</p>

<code>origin</code>

<p>: Origin point of the ray, as a</p>

<em>Vector3</em>

<code>direction</code>

<p>: Direction vector of the ray, as a normalized</p>

<em>Vector3</em>

<p>that points in the same direction.</p>

<code>buttonId</code>

<p>: ID of the button that triggered the event (</p>

<em>POINTER</em>

<p>,</p>

<em>PRIMARY</em>

<p>or</p>

<em>SECONDARY</em>

<p>)</p>

<code>hit</code>

<p>:</p>

<em>(Optional)</em>

<p>Object describing the entity that was clicked on. If the click didn’t hit any specific entity, this field isn’t present. The</p>

<code>hit</code>

<p>object contains the following parameters:</p>

<code>length</code>

<li>: Length of the ray in meters, as a</li>

<em>number</em>

<code>hitPoint</code>

<li>: The intersection point between the ray and the entity’s mesh, as a</li>

<em>Vector3</em>

<code>meshName</code>

<li>: The name of the mesh, if applicable, as a</li>

<em>string</em>

<code>worldNormal</code>

<li>: The normal of the hit, in world space, as a</li>

<em>Vector3</em>

<code>entityId</code>

<li>: The ID of the entity, if applicable, as a</li>

<em>string</em>

<h4>Differentiate meshes inside a model</h4>

<p>Often,</p>

<em>.glTF</em>

<p>3D models are made up of multiple meshes, that each have an individual internal name. All button events events include the information of what specific mesh was clicked, so you can use this information to trigger different click behaviors in each case.</p>

<p>To see how the meshes inside the model are named, you must open the 3D model with an editing tool, like</p>

<p>for example.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also learn the name of the clicked mesh by logging it and reading it off console.</blockquote>

<p>You access the</p>

<code>meshName</code>

<p>property as part of the</p>

<code>hit</code>

<p>object, that’s returned by the click event.</p>

<p>In the example below we have a house model that includes a mesh named</p>

<code>firePlace</code>

<p>. We want to turn on the fireplace only when its corresponding mesh is clicked.</p>

<strong>📔 Note</strong>

<blockquote>: Since the</blockquote>

<code>OnPointerDown</code>

<blockquote>component belongs to the whole entity, the on-hover feedback would be seen when hovering over any part of the entity. In this case, any part of the house, not just the fireplace. For that reason, we set the</blockquote>

<code>showFeedback</code>

<blockquote>argument of the</blockquote>

<code>OnPointerDown</code>

<blockquote>component to</blockquote>

<em>false</em>

<blockquote>, so that no on-hover feedback is shown. For a better player experience, it’s recommended to instead have the fireplace as a separate entity and maintain the on-hover feedback.</blockquote>

<h2>Global button events</h2>

<p>The</p>

<em>BUTTON_DOWN</em>

<p>and</p>

<em>BUTTON_UP</em>

<p>events are fired whenever the player presses or releases an input controller button.</p>

<p>These events are triggered every time that the buttons are pressed or released, regardless of where the player’s pointer is pointing at, as long as the player is standing inside the scene’s boundaries.</p>

<p>It also tracks keys used for basic avatar movement whilst in the scene.</p>

<p>Instance an</p>

<code>Input</code>

<p>object and use its</p>

<code>subscribe()</code>

<p>method to initiate a listener that’s subscribed to one of the button events. Whenever the event is caught, it executes a provided function.</p>

<p>The</p>

<code>subscribe()</code>

<p>method takes four arguments:</p>

<code>eventName</code>

<p>: The type of action, this can be either</p>

<code>"BUTTON_DOWN"</code>

<p>or</p>

<code>"BUTTON_UP"</code>

<code>buttonId</code>

<p>: Which button to listen for.

The following buttons can be tracked for both BUTTON_DOWN and BUTTON_UP events:</p>

<code>- `POINTER` (left mouse click on PC)

- `PRIMARY` (_E_ on PC)

- `SECONDARY`(_F_ on PC)

- `JUMP`(_space bar_ on PC)

- `FORWARD`(_W_ on PC)

- `LEFT`(_A_ on PC)

- `RIGHT`(_D_ on PC)

- `BACK`(_S_ on PC)

- `WALK`(_Shift_ on PC)

- `ACTION_3`(_1_ on PC)

- `ACTION_4`(_2_ on PC)

- `ACTION_5`(_3_ on PC)

- `ACTION_6`(_4_ on PC)</code>

<code>useRaycast</code>

<p>: Boolean to define if raycasting will be used. If</p>

<code>false</code>

<p>, the button event will not contain information about any</p>

<code>hit</code>

<p>objects that align with the pointer at the time of the event. Avoid setting this field to</p>

<code>true</code>

<p>when information about hit objects is not required, as it involves extra calculations.</p>

<code>fn</code>

<p>: The function to execute each time the event occurs.</p>

<strong>📔 Note</strong>

<blockquote>: Other keys on the PC keyboard aren’t tracked for future cross-platform compatibility, as this limited set of keys can be mapped to a joystick. For detecting key-strokes when writing text, check the</blockquote>

<blockquote>.</blockquote>

<p>The example above logs messages and the contents of the event object every time the pointer button is pushed down or released.</p>

<p>The event objects of both the</p>

<code>BUTTON_DOWN</code>

<p>and the</p>

<code>BUTTON_UP</code>

<p>contain various useful properties. See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: The code for subscribing an input event only needs to be executed once, the</blockquote>

<code>subscribe()</code>

<blockquote>method keeps polling for the event. Don’t add this into a system’s</blockquote>

<code>update()</code>

<blockquote>function, as that would register a new listener on every frame.</blockquote>

<h4>Detect hit entities</h4>

<p>If the third argument of the</p>

<code>subscribe()</code>

<p>function (</p>

<code>useRaycast</code>

<p>)is true, and the player is pointing at an entity that has a collider, the event object includes a nested</p>

<code>hit</code>

<p>object. The</p>

<code>hit</code>

<p>object includes information about the collision and the entity that was hit.</p>

<p>Raycasting is not available when detecting basic movement keys. It’s only available when tracking the following buttons:</p>

<code>POINTER</code>

<code>PRIMARY</code>

<code>SECONDARY</code>

<code>ACTION_3</code>

<code>ACTION_4</code>

<code>ACTION_5</code>

<code>ACTION_6</code>

<p>The ray of a global button event only detects entities that have a collider mesh. Primitive shapes have a collider mesh on by default, 3D models need to have one built into them.</p>

<strong>💡 Tip</strong>

<blockquote>: See</blockquote>

<blockquote>for details on how to add collider meshes to a 3D model.</blockquote>

<p>The example above checks if any entities were hit, and if so it fetches the entity and applies a material component to it.</p>

<p>The event data returns a string for the</p>

<code>entityId</code>

<p>. If you want to reference the actual entity by that ID to affect it in some way, use</p>

<code>engine.entities[e.hit.entityId]</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: We recommend that when possible you use the approach of adding an</blockquote>

<code>OnPointerDown</code>

<blockquote>component to each entity you want to make interactive, instead of using a global button event. The scene’s code isn’t able to hint to a player that an entity is interactive when hovering on it unless the entity has an</blockquote>

<code>OnPointerDown</code>

<blockquote>,</blockquote>

<code>OnPointerUp</code>

<blockquote>, or</blockquote>

<code>OnClick</code>

<blockquote>component.</blockquote>

<h4>Tracking player movements</h4>

<p>In real-time multiplayer games where the timing of player movements is critical, you may want to keep track of each player’s position using a 3rd party server as the source of truth. You can improve response time by listening to the button in advance and predict their effects in your server before the avatar has shifted position.</p>

<p>This approach helps compensate for network delays, but is sure to result in discrepancies, so you should also regularly poll the player’s current position to make corrections. Balancing these predictions and corrections may require plenty of fine-tuning.</p>

<h2>Ray Obstacles</h2>

<p>Button events cast rays that only interact with the first entity on their path, as long as the entity is closer than its distance limit.</p>

<p>For an entity to be intercepted by the ray of a button event, the entity’s shape must either have a collider mesh, or the entity must have a component related to button events (</p>

<code>OnPointerDown</code>

<p>,</p>

<code>OnPointerUp</code>

<p>or</p>

<code>OnClick</code>

<p>).</p>

<p>If another entity’s collider is standing on the way of the entity that the player wants to click, the player won’t be able to click the entity that’s behind, unless the entity that’s in-front has a shape with its</p>

<code>isPointerBlocker</code>

<p>property set to false.</p>

<h2>OnHover Component</h2>

<p>Add</p>

<code>OnPointerHoverEnter</code>

<p>and</p>

<code>OnPointerHoverExit</code>

<p>components to an entity to run a callback function every time that the player’s cursor starts or stops pointing at the entity.</p>

<p>You can use this to hint that something is interactable in some custom way, like showing a glowing highlight around the entity, playing a subtle sound, etc. It could also be used for specific gameplay mechanics.</p>

<p>On the</p>

<code>OnPointerHoverEnter</code>

<p>component, you can set a maximum distance, to only trigger the callback when the player is near the entity.</p>

<strong>💡 Tip</strong>

<blockquote>: Note that all entities with an</blockquote>

<code>OnPointerDown</code>

<blockquote>component by default show a UI hint when hovered over. You can disable this UI hint by setting the</blockquote>

<code>showFeeback</code>

<blockquote>property on the</blockquote>

<code>OnPointerDown</code>

<blockquote>component to false.</blockquote>

<h2>Button state</h2>

<p>You can check for the button’s current state (up or down) using the</p>

<em>Input</em>

<p>object.</p>

<p>You can use the</p>

<code>.isButtonPressed</code>

<p>function to check for the states of any of the globally tracked buttons. The function returns an object that contains a</p>

<code>BUTTON_DOWN</code>

<p>boolean field, with the current state of the button.</p>

<p>As an example, you can implement this in a system’s</p>

<code>update()</code>

<p>function to check a button’s state regularly.</p>

<h2>OnClick Component - DEPRECATED</h2>

<p>As an alternative to</p>

<code>OnPointerDown</code>

<p>, you can use the</p>

<code>OnClick</code>

<p>component. This component only tracks button events from the</p>

<code>POINTER</code>

<p>, not from the primary or secondary buttons.</p>

<p>You declare what to do in the event of a click by writing a function in the</p>

<code>OnClick</code>

<p>component.</p>

<p>The</p>

<code>OnClick</code>

<p>component passes less event information than the</p>

<code>OnPointerDown</code>

<p>component, it lacks the click distance or the mesh name, for example.</p>

<strong>📔 Note</strong>

<blockquote>: Entities that don’t have a shape component, or that have their shape’s</blockquote>

<code>visible</code>

<blockquote>field set to</blockquote>

<em>false</em>

<blockquote>can’t be clicked.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/click-events/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/onscreen-ui/

<title>2D UI | Decentraland Documentation</title>

<strong>2D UI</strong>

<h1>2D UI</h1>

<p>There are several special component types that are meant for using in a 2D screen space as part of the UI, instead of in the 3D world space. These components are displayed fixed on the player’s screen.</p>

<p>UI elements are only visible when the player is standing inside the scene’s LAND parcels, as neighboring scenes might have their own UI to display. When the player clicks the</p>

<em>close UI</em>

<p>button, on the bottom-right corner of the screen, all UI elements go away.</p>

<p>The UI can also be triggered to open when certain events occur in the world-space, for example if the player clicks on a specific place.</p>

<p>The default Decentraland explorer UI includes a chat widget, a map, and other elements. These UI elements are always displayed on the top layer, above any scene-specific UI. So if your scene has UI elements that occupy the same screen space as these, they will be occluded.</p>

<h2>Add a Screenspace UI</h2>

<p>To add a screenspace UI to your scene, you must create a</p>

<code>UICanvas</code>

<p>component, this component doesn’t need to belong to any Entities to work. All the visible UI elements that you want the player to see are added as additional objects that are children of this parent component.</p>

<strong>📔 Note</strong>

<blockquote>: Create only one</blockquote>

<code>UICanvas</code>

<blockquote>per scene. To have different menus that appear at different times, make them all children of the same</blockquote>

<code>UICanvas</code>

<blockquote>, and set their visibility at that level.</blockquote>

<h2>Types of UI content</h2>

<p>There are several different types of UI elements you can add to the screenspace:</p>

<p>Images: Add a</p>

<code>UIImage</code>

<p>component to display any image. Use the</p>

<code>source</code>

<p>field to point to the path of the image.</p>

<p>Text: Add a</p>

<code>UIText</code>

<p>component to display text. The properties you can set are the same as in a</p>

<code>TextShape</code>

<p>component. See</p>

<p>.</p>

<li>Text input box: Add a</li>

<code>UIInputText</code>

<li>to have an input box where players can type in text with their keyboards or their mobile devices.</li>

<h2>Positioning</h2>

<p>All UI components have several fields you can set to determine the position of the component on the screenspace.</p>

<code>hAlign</code>

<p>horizontal alignment relative to the parent. Possible values:</p>

<code>left</code>

<p>,</p>

<code>right</code>

<p>,</p>

<code>center</code>

<p>.</p>

<code>vAlign</code>

<p>horizontal alignment relative to the parent. Possible values:</p>

<code>top</code>

<p>,</p>

<code>bottom</code>

<p>,</p>

<code>center</code>

<p>.</p>

<code>positionX</code>

<p>,</p>

<code>positionY</code>

<p>: the position of the top-left corner of the component, relative to the parent. By default, to the top-left corner of its parent. If the</p>

<code>hAlign</code>

<p>or</p>

<code>vAlign</code>

<p>properties are set, then</p>

<code>positionX</code>

<p>and</p>

<code>positionY</code>

<p>offset the UI component relative to the position of these alignment properties.</p>

<strong>💡 Tip</strong>

<blockquote>: When measuring from the top, the numbers for</blockquote>

<code>positionY</code>

<blockquote>should be negative. Example: to position a component leaving a margin of 20 pixels with respect to the parent on the top and left sides, set</blockquote>

<code>positionX</code>

<blockquote>to 20 and</blockquote>

<code>positionY</code>

<blockquote>to -20.</blockquote>

<code>paddingLeft</code>

<p>,</p>

<code>paddingRight</code>

<p>,</p>

<code>paddingTop</code>

<p>,</p>

<code>paddingBottom</code>

<p>: padding space to leave empty around. To set these fields in pixels, write the value as a number. To set these fields as a percentage of the parent’s measurements, write the value as a string that ends in “%”, for example</p>

<code>10 %</code>

<code>width</code>

<p>,</p>

<code>height</code>

<p>: Set the size of the component in the screen. To set these fields in pixels, write the value as a number. To set these fields as a percentage of the parent’s measurements, write the value as a string that ends in “%”, for example</p>

<code>10%</code>

<p>To determine the z position of UI elements, the UI uses the parenting hierarchy of the components. So, if a component is a child of another, it will appear in front of the other.</p>

<h2>Use parent elements for organizing</h2>

<p>Certain UI elements are there to help you organize how you place other elements.</p>

<p>For this, you can use the</p>

<code>UIContainerStack</code>

<p>and the</p>

<code>UIContainerRect</code>

<p>.</p>

<p>Both these shapes have properties to set their color, and line thickness.</p>

<p>Container components also have following properties:</p>

<code>adaptWidth</code>

<p>,</p>

<code>adaptHeight</code>

<p>: Set on parent components. If these are set to true, the width and height wrap the child components (plus padding). If these are true,</p>

<code>width</code>

<p>and</p>

<code>height</code>

<p>values are ignored</p>

<code>stackOrientation</code>

<p>: The</p>

<code>UIContainerStack</code>

<p>component has this property to set if the stack will expand vertically or horizontally.</p>

<h2>Set transparency</h2>

<p>You can make a UI element partly transparent by setting its</p>

<code>opacity</code>

<p>property to a value that’s less than 1.</p>

<p>Setting an element’s opacity also affects all of its children. If you don’t want its children to be transparent, for example you want the background to be transparent but not the text on it, you can set the color with a hex string that has four values, one of them being the alpha channel.</p>

<h2>Text</h2>

<p>The</p>

<code>UIText</code>

<p>component lets you add text. It has properties that are similar to the</p>

<code>TextShape</code>

<p>component. See</p>

<p>.</p>

<code>value</code>

<li>: The string to display.</li>

<code>color</code>

<li>:</li>

<code>Color4</code>

<li>For the text color.</li>

<code>fontSize</code>

<li>: Font size.</li>

<code>font</code>

<li>: Font to use.</li>

<code>lineSpacing</code>

<li>: Space between lines of text, expressed as a string. For example “30px”.</li>

<code>lineCount</code>

<li>: How many max lines of text.</li>

<code>textWrapping</code>

<li>: If text automatically occupies more lines.</li>

<code>outlineWidth</code>

<li>,</li>

<code>outlineColor</code>

<li>: Add an outline to the text.</li>

<code>shadowBlur</code>

<li>,</li>

<code>shadowOffsetX</code>

<li>,</li>

<code>shadowOffsetY</code>

<li>,</li>

<code>shadowColor</code>

<li>: Add a shadow to the text.</li>

<p>Fonts are set as a</p>

<em>Font object</em>

<p>. Font objects are initiated with a value from the</p>

<em>Fonts</em>

<p>enum, which contains all supported fonts. By default, all text components use</p>

<em>LiberationSans</em>

<p>font.</p>

<strong>💡 Tip</strong>

<blockquote>: If using VS studio or some other IDE, type</blockquote>

<code>Font.</code>

<blockquote>and you should see a list of suggestions with all of the available fonts.</blockquote>

<p>You can share a same instanced</p>

<code>Font</code>

<p>object accross multiple</p>

<code>UIText</code>

<p>components.</p>

<h4>Multiline text</h4>

<code>UIText</code>

<p>components by default adapt their width to the length of the provided string. To make a text span multiple lines, set the</p>

<code>textWrapping</code>

<p>property to</p>

<em>true</em>

<p>and</p>

<code>adaptWidth</code>

<p>to</p>

<em>false</em>

<p>, and also specify the desired width.</p>

<p>Alternatively, you can add line breaks into the string, using</p>

<code>\n</code>

<p>.</p>

<h2>Images from an image atlas</h2>

<p>You can use an image atlas to store multiple images and icons in a single image file. You then display rectangular parts of this image file in your UI based on pixel positions, pixel width, and pixel height inside the source image.</p>

<p>Below is an example of an image atlas with multiple icons arranged into a single file.</p>

<p>The</p>

<code>UIImage</code>

<p>component has the following fields to crop a sub-section of the original image:</p>

<code>sourceTop</code>

<li>: the</li>

<em>y</em>

<li>coordinate, in pixels, of the top of the selection</li>

<code>sourceLeft</code>

<li>: the</li>

<em>x</em>

<li>coordinate, in pixels, of the left side of the selection.</li>

<code>sourceWidth</code>

<li>: the width, in pixels, of the selected area</li>

<code>sourceHeight</code>

<li>: the height, in pixels, of the selected area</li>

<p>When constructing a</p>

<code>UIImage</code>

<p>component, you must pass a</p>

<code>Texture</code>

<p>component as an argument. Read more about</p>

<code>Texture</code>

<p>components in</p>

<p>.</p>

<p>You can change the texture being used by an existing</p>

<code>UIImage</code>

<p>component, set the</p>

<code>source</code>

<p>field.</p>

<h2>Clicking UI elements</h2>

<p>All UI elements have an</p>

<code>isPointerBlocker</code>

<p>property, that determines if they can be clicked. If this value is false, the pointer should ignore them and respond to whatever is behind the element.</p>

<p>Clickable UI elements also have an</p>

<code>OnClick</code>

<p>property, that lets you add a function to execute every time it’s clicked.</p>

<code>OnClick</code>

<p>properties must be followed by an</p>

<code>OnPointerDown(()=>{})</code>

<p>function, as seen below.</p>

<strong>📔 Note</strong>

<blockquote>: To click on a UI component, players must first unlock the cursor from the view control. They do this by clicking the</blockquote>

<em>right mouse button</em>

<blockquote>or hitting</blockquote>

<code>Esc</code>

<blockquote>.</blockquote>

<strong>💡 Tip</strong>

<blockquote>: If you want to add text over a button, keep in mind that the text needs to have the</blockquote>

<code>isPointerBlocker</code>

<blockquote>property set to</blockquote>

<code>false</code>

<blockquote>, otherwise players might be clicking the text instead of the button.</blockquote>

<h2>Input text</h2>

<p>Input boxes can be added to the UI to provide a place to type in text. You add a text box with an</p>

<code>UIInputText</code>

<p>component. Players must first click on this box before they can write into it.</p>

<p>Here are some of the main properties you can set:</p>

<code>focusedBackground</code>

<p>: You can change the background color to indicate that the input box is currently selected. Use this field to set an alternative color.</p>

<code>placeholder</code>

<p>: Set placeholder text to display on the box by default.</p>

<code>placeholderColor</code>

<p>: Make the placeholder a different color, to tell it apart. You’ll usually want to make it a paler shade of the color of text that the player writes.</p>

<p>When the player interacts with the component, you can use the following events to trigger the execution of code:</p>

<code>OnFocus()</code>

<li>: The player clicked on the UI component and has a cursor on it.</li>

<code>OnBlur()</code>

<li>: The player clicked away and the cursor is gone.</li>

<code>OnChanged()</code>

<li>: The player typed or deleted something to change the string on the component.</li>

<code>OnTextSubmit()</code>

<li>: The player hit the</li>

<code>Enter</code>

<li>key to submit this string.</li>

<h2>Open the UI</h2>

<p>You can have the code of your scene make the UI visible when specific events occurs, for example at the end of a game to display the final score.</p>

<p>To do this, simply set the</p>

<code>visible</code>

<p>property of the main</p>

<code>UICanvas</code>

<p>component that wraps the UI to</p>

<em>true</em>

<p>or</p>

<em>false</em>

<p>.</p>

<p>If the UI is clickable, or has clickable parts, you should also set the</p>

<code>isPointerBlocker</code>

<p>property to</p>

<em>true</em>

<p>or</p>

<em>false</em>

<p>, so that the player can freely click in the world space when the UI is not on the way.</p>

<p>The following code adds a cube to the world-space of the scene that opens the UI when clicked.</p>

<p>Players can close the UI by clicking the icon on the top-right corner. Note that when closing the UI in this way, they won’t see any more UI components appear in your scene, even if the code sets them to visible.</p>

<p>It’s a good practice to add a button on your UI elements for closing them in a way that doesn’t prevent other UI components from being visible in the future.</p>

<p>You might also want to close the UI automatically when a specific event occurs, for example when a new match of a game starts.</p>

<p>To do this, simply set the</p>

<code>visible</code>

<p>property of the main</p>

<code>UIScreenSpace</code>

<p>component that wraps the UI to</p>

<em>false</em>

<p>.</p>

<p>If the UI is clickable, or has clickable parts, you should also set the</p>

<code>isPointerBlocker</code>

<p>property to</p>

<em>false</em>

<p>, so that the player can freely click in the world space.</p>

<p>See</p>

<p>for more details on how to set colors.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/onscreen-ui/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/text/

<title>Text shapes | Decentraland Documentation</title>

<strong>Text shapes</strong>

<h1>Text shapes</h1>

<p>Add text to a scene using the</p>

<code>TextShape</code>

<p>component. This text sits in a position</p>

<p>Text in Decentraland supports all</p>

<em>utf8</em>

<p>characters, this includes oriental and special characters.</p>

<strong>📔 Note</strong>

<blockquote>: This component is useful for in-world labels and UIs that exist in the 3D space of the scene, not for the player’s 2D HUD UI.</blockquote>

<p>The</p>

<code>TextShape</code>

<p>component is mutually exclusive with other shape components like primitive shapes and glTF 3D models, see</p>

<p>for more details.</p>

<p>To add text as a label on an existing entity, you create a second entity that has the</p>

<code>TextShape</code>

<p>component and set it as a child of the other entity.</p>

<h2>Create a text component</h2>

<p>The following example shows how to create a</p>

<code>TextShape</code>

<p>component and add it to an entity.</p>

<strong>📔 Note</strong>

<blockquote>: If the entity with the text component is a child of another entity, then it will be affected by the parent’s scale. If the parent is scaled unevenly, this will result in the text also being stretched or compressed.</blockquote>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>TextShape</code>

<blockquote>components aren’t clickable.</blockquote>

<code>OnPointerDown</code>

<blockquote>,</blockquote>

<code>OnPointerUp</code>

<blockquote>,</blockquote>

<code>OnHoverEnter</code>

<blockquote>, and</blockquote>

<code>OnHoverExit</code>

<blockquote>comopnents aren’t activated when used on entites that have a</blockquote>

<code>TextShape</code>

<blockquote>component.</blockquote>

<h2>Change the text value</h2>

<p>When creating a new text component, you assign it a string to display. This string is stored in the</p>

<code>value</code>

<p>field.</p>

<p>If you want to change the string displayed by the component, you can do so at any time by changing the</p>

<code>value</code>

<p>field.</p>

<h2>Basic text properties</h2>

<p>The</p>

<code>TextShape</code>

<p>component has several properties that can be set to style the text. Below are some of the most common:</p>

<code>font</code>

<li>:</li>

<em>Font object</em>

<li>. Font objects are initiated with a value from the</li>

<em>Fonts</em>

<li>enum, which contains all supported fonts. By default uses</li>

<em>LiberationSans</em>

<li>.</li>

<code>fontSize</code>

<li>:</li>

<em>number</em>

<li>.</li>

<code>color</code>

<li>:</li>

<em>Color3</em>

<li>object.</li>

<em>Color3</em>

<li>objects store an</li>

<em>RBG</em>

<li>color as three numbers from 0 to 1.</li>

<code>opacity</code>

<li>:</li>

<em>number</em>

<li>. Set it to less than 1 to make the text translucid.</li>

<h2>Fonts</h2>

<p>By default, text in Decenrtaland uses the font</p>

<code>LiberationSans</code>

<p>. To use another font, you need to instance a new</p>

<code>Font</code>

<p>object and assign it to the</p>

<code>font</code>

<p>property of the</p>

<code>TextShape</code>

<p>object.</p>

<p>When instancing a</p>

<code>Font</code>

<p>, you need to pass it a value from the</p>

<code>Fonts</code>

<p>enum. This enum is a list that contains all the supported fonts.</p>

<p>The following fonts are currently supported:</p>

<li>LiberationSans</li>

<li>SansSerif</li>

<li>SansSerif_Bold</li>

<li>SansSerif_Heavy</li>

<li>SansSerif_Semibold</li>

<strong>💡 Tip</strong>

<blockquote>: If using VS studio or some other IDE, type</blockquote>

<code>Font.</code>

<blockquote>and you should see a list of suggestions with all of the available fonts.</blockquote>

<p>You can share a same instanced</p>

<code>Font</code>

<p>object accross multiple</p>

<code>TextShape</code>

<p>components.</p>

<h2>Text alignment and padding properties</h2>

<p>The</p>

<code>TextShape</code>

<p>component creates a text box that has a size, padding, etc.</p>

<code>hTextAlign</code>

<li>:</li>

<em>string</em>

<li>. Either</li>

<em>left</em>

<li>,</li>

<em>right</em>

<li>or</li>

<em>center</em>

<li>(default).</li>

<code>vTextAlign</code>

<li>: string. Either</li>

<em>top</em>

<li>,</li>

<em>bottom</em>

<li>or</li>

<em>center</em>

<li>(default).</li>

<code>width</code>

<li>:</li>

<em>number</em>

<li>. The width of the text box.</li>

<code>height</code>

<li>:</li>

<em>number</em>

<li>. The height of the text box.</li>

<code>paddingTop</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>paddingRight</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>paddingBottom</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>paddingLeft</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>zIndex</code>

<li>:</li>

<em>number</em>

<li>. Useful for when multiple flat entities occupy the same space, it determines which one to show in front.</li>

<strong>💡 Tip</strong>

<blockquote>: If a text is meant to float in space, it’s a good idea to add a</blockquote>

<code>Billboard</code>

<blockquote>so that the text rotates to always face the player and be legible.</blockquote>

<h2>Text shadow and outline properties</h2>

<p>The text has no shadow by default, but you can set the following values to give it a shadow-like effect.</p>

<code>shadowBlur</code>

<li>:</li>

<em>number</em>

<code>shadowOffsetX</code>

<li>:</li>

<em>number</em>

<code>shadowOffsetY</code>

<li>:</li>

<em>number</em>

<code>shadowColor</code>

<li>:</li>

<em>Color3</em>

<li>object.</li>

<em>Color3</em>

<li>objects store an</li>

<em>RBG</em>

<li>color as three numbers from 0 to 1.</li>

<p>Every letter can also have an outline in a different color surrounding its perimeter.</p>

<code>outlineWidth</code>

<li>:</li>

<em>number</em>

<li>. How many pixels wide the text outline will be, in all directions. By default</li>

<em>0</em>

<li>, which makes it invisible.</li>

<code>outlineColor</code>

<li>:</li>

<em>Color3</em>

<li>object.</li>

<em>Color3</em>

<li>objects store an</li>

<em>RBG</em>

<li>color as three numbers from 0 to 1.</li>

<h2>Multiple lines</h2>

<p>If you want your text to span multiple lines, use</p>

<code>\n</code>

<p>as part of the string. The following example has two separate lines of text:</p>

<p>You can also set up the following properties related to texts with multiple lines:</p>

<code>lineCount</code>

<li>:</li>

<em>number</em>

<li>. How many lines of text to fit into the textbox as a maximum. By default</li>

<em>1</em>

<li>. The</li>

<code>textWrapping</code>

<li>property must be</li>

<em>true</em>

<li>to use more than one line.</li>

<code>lineSpacing</code>

<li>:</li>

<em>string</em>

<li>. How much space between each line, expressed as a string. For example “30px”.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/text/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entity-positioning/#face-the-user

<title>Set entity positions | Decentraland Documentation</title>

<strong>Set entity positions</strong>

<h1>Set entity positions</h1>

<p>You can set the</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>of an entity by using the</p>

<code>Transform</code>

<p>component. This can be used on any entity, which can also a primitive shape component (cube, sphere, plane, etc) or a 3D model component (</p>

<code>GLTFShape</code>

<p>).</p>

<p>For brevity, you can also create a</p>

<code>Transform</code>

<p>entity and give it initial values in a single statement, passing it an object that can optionally include</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>properties.</p>

<p>To move, rotate or resize an entity in your scene, change the values on this component incrementally, frame by frame. See</p>

<p>for more details and best practices. You can also use the helper functions in the</p>

<p>to achieve this more easily.</p>

<h2>Position</h2>

<code>position</code>

<p>is a</p>

<em>3D vector</em>

<p>, it sets the position of the entity’s center on all three axes, stored as a</p>

<code>Vector3</code>

<p>object.</p>

<strong>📔 Note</strong>

<blockquote>: When setting the value of the position with an object, you can either use a</blockquote>

<code>Vector3</code>

<blockquote>object, or any other object with</blockquote>

<em>x</em>

<blockquote>,</blockquote>

<em>y</em>

<blockquote>and</blockquote>

<em>z</em>

<blockquote>fields.</blockquote>

<p>When setting a position, keep the following considerations in mind:</p>

<p>The numbers in a position vector represent</p>

<em>meters</em>

<p>(unless the entity is a child of a scaled entity).</p>

<p>A scene that is made up of a single parcel measures 16m x 16m. The center of the scene (at ground level) is at</p>

<code>x:8, y:0, z:8</code>

<p>. If the scene is made up of multiple parcels, then the center will vary depending on their arrangement.</p>

<code>x:0, y:0, z:0</code>

<p>refers to the</p>

<em>South-West</em>

<p>corner of the scene’s base parcel, at ground level.</p>

<p>Tip: When viewing a scene preview, a compass appears in the (0,0,0) point of the scene with labels for each axis as reference.</p>

<p>Tip: Take your</p>

<em>left</em>

<p>hand, your index finger (pointing forward) is the</p>

<em>z</em>

<p>axis, your middle finger (pointing sideways) is the</p>

<em>x</em>

<p>axis, and your thumb (pointing up) is the</p>

<em>y</em>

<p>axis.</p>

<p>Note: You can change the base parcel of a scene by editing the</p>

<code>base</code>

<p>attribute of</p>

<em>scene.json</em>

<p>.</p>

<p>If an entity is a child of another, then</p>

<code>x:0, y:0, z:0</code>

<p>refers to the center of its parent entity, wherever it is in the scene.</p>

<p>Every entity in your scene must be positioned within the bounds of the parcels it occupies at all times. If an entity leaves these boundaries, it will raise an error.</p>

<p>Tip: When viewing a scene in preview mode, entities that are out of bounds are highlighted in</p>

<em>red</em>

<p>.</p>

<p>Your scene is also limited in height. The more parcels that make up the scene, the higher you’re allowed to build. See</p>

<p>for more details.</p>

<h2>Rotation</h2>

<code>rotation</code>

<p>is stored as a</p>

<em>quaternion</em>

<p>, a system of four numbers,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>,</p>

<em>z</em>

<p>and</p>

<em>w</em>

<p>.</p>

<p>You can also set the rotation field with</p>

<em>Euler</em>

<p>, the more common</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>notation with numbers that go from 0 to 360 that most people are familiar with. To use Euler angles, use one of the following notations:</p>

<p>When using a</p>

<em>3D vector</em>

<p>to represent Euler angles,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>represent the rotation in that axis, measured in degrees. A full turn requires 360 degrees.</p>

<strong>📔 Note</strong>

<blockquote>: If you set the rotation using</blockquote>

<em>Euler</em>

<blockquote>angles, the rotation value is still stored internally as a quaternion.</blockquote>

<p>When you retrieve the rotation of an entity, it returns a quaternion by default. To obtain the rotation expressed as in Euler angles, get the</p>

<code>.eulerAngles</code>

<p>field:</p>

<h4>Add Rotations</h4>

<p>Another option is to perform a</p>

<code>rotate</code>

<p>operation on an existing transform, which adds to its current rotation. The</p>

<code>rotate</code>

<p>operation takes a vector that indicates a direction, and a number of degrees to rotate. In the following example, we’re tilting an entity 15 degrees along the X axis, which adds to whatever rotation it initially had:</p>

<p>The</p>

<code>rotate</code>

<p>operation is useful when dealing with an entity that’s rotated in multiple axis, for example both X and Y. The following example sets an original rotation in the Y axis, and then rotates the Transform along the X axis:</p>

<p>Note that this produces a different result than if you simply set the initial rotation to</p>

<code>(15, 90, 0)</code>

<p>. In the example, the rotation along the X axis doesn’t occur along the original X axis of the Transform, but instead it occurs along the</p>

<em>tilted</em>

<p>X axis that results from the initial rotation.</p>

<h2>Face the player</h2>

<p>Add a</p>

<em>Billboard</em>

<p>component to an entity so that it always rotates to face the player.</p>

<p>Billboards were a common technique used in 3D games of the 90s, where most entities were 2D planes that always faced the player. The same idea can also be used to rotate a 3D model.</p>

<p>You can choose which axis to rotate as a billboard. For example, if the Billboard of a cube only rotates in the Y axis, it will follow the player when moving at ground level, but the player will be able to look at it from above or from below.</p>

<p>The three optional parameters when creating a</p>

<code>Billboard</code>

<p>component are booleans that refer to the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>, and</p>

<em>z</em>

<p>axis. They are all</p>

<code>true</code>

<p>by default.</p>

<p>Tip: To rotate an entity so that it follows the player around while at ground level, give it</p>

<em>Y</em>

<p>axis rotation.</p>

<p>Billboards are also very handy to add to</p>

<em>text</em>

<p>entities, since it makes them always legible.</p>

<p>The</p>

<code>rotation</code>

<p>value of the entity’s</p>

<code>Transform</code>

<p>component doesn’t change as the billboard follows players around.</p>

<p>If an entity has both a</p>

<code>Billboard</code>

<p>component and</p>

<code>Transform</code>

<p>component with</p>

<code>rotation</code>

<p>values, players will see the entity rotating as a billboard. If the billboard doesn’t affect all axis, the remaining axis will be rotated according to the</p>

<code>Transform</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: If there are multiple players present at the same time, each will see the entities with billboard mode facing them.</blockquote>

<h2>Face a set of coordinates</h2>

<p>You can use</p>

<code>lookAt()</code>

<p>on the Transform component to orient an entity fo face a specific point in space by simply passing it that point’s coordinates. This is a way to avoid dealing with the math for calculating the necessary angles.</p>

<p>This field requires a</p>

<em>Vector3</em>

<p>object as a value, or any object with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>attributes. This vector indicates the coordinates of the position of the point in the scene to look at.</p>

<p>The</p>

<code>lookAt()</code>

<p>function has a second optional argument that sets the global direction for</p>

<em>up</em>

<p>to use as reference. For most cases, you won’t need to set this field.</p>

<h2>Scale</h2>

<code>scale</code>

<p>is also a</p>

<em>3D vector</em>

<p>, stored as a</p>

<code>Vector3</code>

<p>object, including the scale factor on the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>axis. The shape of the entity scaled accordingly, whether it’s a primitive or a 3D model.</p>

<p>You can either use the</p>

<code>set()</code>

<p>operation to provide a value for each of the three axis, or use</p>

<code>setAll()</code>

<p>to provide a single number and maintain the entity’s proportions as you scale it.</p>

<p>The default scale is 1, so assign a value larger to 1 to stretch an entity or smaller than 1 to shrink it.</p>

<p>You can either set each dimension individually, or use the</p>

<code>set</code>

<p>operation to set all dimensions.</p>

<p>When setting the value of the scale with an object, you can either use a</p>

<code>Vector3</code>

<p>object, or any other object with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>fields.</p>

<h2>Inherit transformations from parent</h2>

<p>When an entity is nested inside another, the child entities inherit components from the parents. This means that if a parent entity is positioned, scaled or rotated, its children are also affected. The position, rotation and scale values of children entities don’t override those of the parents, instead these are compounded.</p>

<p>If a parent entity is scaled, all position values of its children are also scaled.</p>

<p>You can use an invisible entity with no shape component to wrap a set of other entities. This entity won’t be visible in the rendered scene, but can be used to group its children and apply a transform to all of them.</p>

<strong>📔 Note</strong>

<blockquote>: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</blockquote>

<h2>Attach an entity to an avatar</h2>

<p>To fix an entity’s position to an avatar, add an</p>

<code>AttachToAvatar</code>

<p>component to the entity.</p>

<p>When creating an</p>

<code>AttachToAvatar</code>

<p>component, you must pass an object with the following data:</p>

<code>avatarId</code>

<li>: The ID of the player to attach to. This is the same as the player’s Ethereum address, for those players connected with an Ethereum wallet.</li>

<code>anchorPointId</code>

<li>: What anchor point on the avatar to attach the entity.</li>

<p>The following anchor points are available on the player:</p>

<code>NameTag</code>

<p>: Floats right above the player’s name tag, isn’t affected by the player’s animations.</p>

<p>Note: The name tag height is dynamically adjusted based on the height of the wearables a player has on. So a player wearing a tall hat will have their name tag a little bit higher than others.</p>

<code>Position</code>

<p>: The player’s overall position.</p>

<p>Note: The height of this anchor point currently may vary between the local player’s avatar and other players, this is subject to change in future versions. The NameTag anchor point should be more reliable.</p>

<strong>📔 Note</strong>

<blockquote>: Future SDK versions will include alternative anchor points on the avatar that will accompany the avatar animations.</blockquote>

<p>Entity rendering is locally determined on each instance of the scene. Attaching an entity on one player doesn’t make it visible to everyone seeing that player.</p>

<strong>📔 Note</strong>

<blockquote>: Entities attached to an avatar must stay within scene bounds to be rendered. If a player walks out of your scene, any attached entities stop being rendered until the player walks back in. Smart wearables don’t have this limitation.</blockquote>

<p>The</p>

<code>AttachToAvatar</code>

<p>component overwrites the</p>

<code>Transform</code>

<p>component, a single entity can’t have both an</p>

<code>AttachToAvatar</code>

<p>and a</p>

<code>Transform</code>

<p>component at the same time.</p>

<p>If you need to position an entity with an offset from the anchor point on the avatar, or a different rotation or scale, attach a parent entity to the anchor point. You can then set the visible model on a child entity to that parent, and give this child its own Transform component to describe its shifts from the anchor point.</p>

<h4>Obtain the avatarId</h4>

<p>To attach an entity to an avatar, you must provide the user’s ID in the field</p>

<code>avatarId</code>

<p>. There are</p>

<p>to obtain this data.</p>

<strong>📔 Note</strong>

<blockquote>: For those players connected with an Ethereum wallet, their</blockquote>

<code>userId</code>

<blockquote>is the same as their Ethereum address.</blockquote>

<li>Fetch the local player’s</li>

<code>userId</code>

<li>via</li>

<code>getUserData()</code>

<li>.</li>

<li>Fetch the</li>

<code>userId</code>

<li>for all other nearby players via</li>

<code>getConnectedPlayers()</code>

<p>See other ways to fetch other user’s IDs in</p>

<p>.</p>

<h4>Attach to player using Attachable (deprecated)</h4>

<p>Note: This method for attaching entities to the player is deprecated. Use the</p>

<code>AttachToAvatar</code>

<p>component instead.</p>

<p>Set an entity as a child of the</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>object to fix the entity to the player and follow the player’s movements.</p>

<p>If the attached entity has a Transform component, it will be positioned relative to the player’s position, and keep that relative position as the player moves or rotates.</p>

<p>To fix an entity’s rotation only in the</p>

<em>x</em>

<p>axis to the player, set an entity as a child of the</p>

<code>Attachable.AVATAR</code>

<p>object. The entity will then rotate with the player when looking around at ground level, but it won’t accompany the player’s rotation when looking up or down.</p>

<strong>📔 Note</strong>

<blockquote>: To set an entity as a child of</blockquote>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<blockquote>or</blockquote>

<code>Attachable.AVATAR</code>

<blockquote>, you need to first add the entity to the engine. If you attempt to set the entity as child of the player</blockquote>

<em>before</em>

<blockquote>adding it to the engine, it will raise an error.</blockquote>

<p>Both</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>and</p>

<code>Attachable.AVATAR</code>

<p>behave similarly, but have subtle differences:</p>

<p>With</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>:</p>

<li>The entity is at eye-level of the player</li>

<li>In 1st person: Entity rotates on all axis, staying in a fixed position on the camera.</li>

<li>In 3rd person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<p>With</p>

<code>Attachable.AVATAR</code>

<p>:</p>

<li>The entity is arm or waist level of the player</li>

<li>1st person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<li>3rd person: Entity rotates on only the</li>

<em>y</em>

<li>axis with the camera</li>

<p>This gif illustrates the difference in 1st person. The pink entity uses</p>

<code>Attachable.AVATAR</code>

<p>, the white object uses</p>

<code>Attachable.FIRST_PERSON_CAMERA</code>

<p>.</p>

<p>If several players are in the same scene, they will each experience the entity as attached to themselves. They will not see the entity attached to other players.</p>

<p>For example, in a multiplayer scene where players can pick up boxes and move them around, the recommended approach is to make boxes that are being carried by other players invisible. So that only players that are currently carrying a box see them attached to themselves.</p>

<h2>Scene boundaries</h2>

<p>All entities in your scene must fit within the scene boundaries, as what’s outside those boundaries is parcels of land that are owned by other players.</p>

<p>When running a preview of your scene, any entities outside the scene’s parcels are colored red and their colliders are removed. When deployed to Decentraland, any entities outside the parcels will not be rendered at all by the engine.</p>

<p>The position of entities in your scene is constantly being checked as they move, if an entity leaves the scene and then returns it will be removed and then rendered normally again.</p>

<p>A grid on the scene’s ground shows the limits of the scene, which by default rage from 0 to 16 on the</p>

<em>x</em>

<p>and</p>

<em>z</em>

<p>axis, and up to 20 on the</p>

<em>y</em>

<p>axis. You’re free to place entities underground, below 0 on the</p>

<em>y</em>

<p>axis.</p>

<strong>💡 Tip</strong>

<blockquote>: If your scene needs more parcels, you can add them in the project’s</blockquote>

<code>scene.json</code>

<blockquote>file. See</blockquote>

<blockquote>for instructions. Once added, you should see the grid extend to cover the additional parcels.</blockquote>

<p>It’s important to note that the</p>

<em>entire</em>

<p>3D model must be within the scene’s bounds. This includes the model’s</p>

<em>bounding box</em>

<p>. Some 3D models may have bounding boxes that unnecessarily extend beyond the meshes themselves, and it can sometimes be tricky to tell when this happens. When an entity extends beyond the scene’s boundaries, in the preview you’ll see a cube that marks these bounding boxes. The entire cube must fit within your scene.</p>

<p>If an entity’s cube extends beyond the shape of its meshes, you might need to edit the 3D model in an external editor to reduce these margins, or to</p>

<em>bake</em>

<p>the rotation and scale of the meshes in the model.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/onscreen-ui/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/color-types/

<title>Color types | Decentraland Documentation</title>

<strong>Color types</strong>

<h1>Color types</h1>

<p>Color values can passed as properties of different components, like</p>

<p>,</p>

<p>or different properties of</p>

<p>. Color values can either be of type</p>

<code>Color3</code>

<p>or</p>

<code>Color4</code>

<p>.</p>

<code>Color3</code>

<p>contains three properties,</p>

<em>red</em>

<p>,</p>

<em>green</em>

<p>, and</p>

<em>blue</em>

<p>.</p>

<code>Color4</code>

<p>has those same three plus</p>

<code>alpha</code>

<p>, for transparency values.</p>

<h2>Set a color</h2>

<p>You can make a color by using the</p>

<code>Color3.create()</code>

<p>or the</p>

<code>Color4.create()</code>

<p>functions.</p>

<p>You can also create certain predetermined colors that are part of the</p>

<code>Color3</code>

<p>and</p>

<code>Color4</code>

<p>namespaces.</p>

<strong>💡 Tip</strong>

<blockquote>: Write</blockquote>

<code>Color3.</code>

<blockquote>or</blockquote>

<code>Color4.</code>

<blockquote>and Visual Studio should suggest all the possible values in an intelligent dropdown.</blockquote>

<p>You can otherwise pick a random color using the following function:</p>

<p>If you prefer to describe a color in hexadecimal, use</p>

<code>Color3.fromHexString()</code>

<p>.</p>

<p>Any object value that includes numeric values for</p>

<code>r</code>

<p>,</p>

<code>g</code>

<p>, and</p>

<code>b</code>

<p>can be interpreted as a</p>

<code>Color3</code>

<p>value. Likewise, any object that includes those properties plus an</p>

<code>a</code>

<p>value can be interpreted as a</p>

<code>Color4</code>

<p>value. This allows you to also use the following syntax:</p>

<p>The following example uses a color property as part of a</p>

<code>TextShape</code>

<p>component, to set the text color.</p>

<strong>📔 Note</strong>

<p>:</p>

<code>Color3</code>

<p>and</p>

<code>Color4</code>

<p>must be imported via</p>

<code>import { Color3, Color4 } from "@dcl/sdk/math"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Transparency</h2>

<p>Use the</p>

<em>alpha</em>

<p>property of</p>

<code>Color4</code>

<p>to make a color translucid.</p>

<p>If alpha is 1, the color will be completely opaque, if it’s 0 it will be completely invisible. Anything in between results in a partially transparent tone.</p>

<h2>Lerp</h2>

<p>Use the</p>

<code>Color3.lerp()</code>

<p>or the</p>

<code>Color4.lerp()</code>

<p>function to define a color that’s somewhere between two other colors. These functions work similar to the</p>

<code>Vector3.lerp()</code>

<p>function.</p>

<p>Both</p>

<code>Color3.lerp()</code>

<p>or the</p>

<code>Color4.lerp()</code>

<p>take the following arguments:</p>

<code>left</code>

<li>: The first color to use as reference</li>

<code>right</code>

<li>: The second color to use as reference</li>

<code>amount</code>

<li>: A number from 0 to 1 to define how much of the</li>

<em>left</em>

<li>color to use in the mix. The closer to 0, the closer to the</li>

<em>left</em>

<li>color.</li>

<p>You can use a system to gradually change the</p>

<code>amount</code>

<p>parameter, to create a smooth transition.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/color-types/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/materials/

<title>Materials via code | Decentraland Documentation</title>

<strong>Materials via code</strong>

<h1>Materials via code</h1>

<h2>Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by adding a</p>

<code>Material</code>

<p>component. This component has several fields that allow you to configure the properties of the material, add a texture, etc.</p>

<p>You can’t add material components to</p>

<em>glTF</em>

<p>models.</p>

<em>glTF</em>

<p>models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See</p>

<p>for more details.</p>

<p>There are different types of supported materials:</p>

<li>PBR (Physically Based Rendering): The most common kind of material in Decentraland. It supports plain colors or textures, and different properties like metallic, emissive, transparency, etc. Read more about</li>

<li>.</li>

<li>Basic materials: They don’t respond to lights and shadows, which makes them ideal for displaying billboard images.</li>

<h2>Add a material</h2>

<p>The following example creates a PBR material and sets some of its fields to give it a red color and metallic properties. This material is added to an entity that also has a box shape, so it will color the box with this material.</p>

<p>To change the material of an entity that already has a</p>

<code>Material</code>

<p>component, run</p>

<code>Material.setPbrMaterial()</code>

<p>or any of the other helper functions and it will overwrite the original material. There’s no need to remove the original</p>

<code>Material</code>

<p>or to use the advanced syntax.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>Material</code>

<p>component must be imported via</p>

<code>import { Material } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Material colors</h2>

<p>Give a material a plain color. In a PBR Material, you set the</p>

<code>albedoColor</code>

<p>field. Albedo colors respond to light and can include shades on them.</p>

<p>Color values are of type</p>

<code>Color4</code>

<p>, composed of</p>

<em>r</em>

<p>,</p>

<em>g</em>

<p>and</p>

<em>b</em>

<p>values (red, green, and blue). Each of these takes values between 0 and 1. By setting different values for these, you can compose any visible color. For black, set all three to 0. For white, set all to 1.</p>

<strong>📔 Note</strong>

<blockquote>: If you set any color in</blockquote>

<code>albedoColor</code>

<blockquote>to a value higher than</blockquote>

<em>1</em>

<blockquote>, it will appear as</blockquote>

<em>emissive</em>

<blockquote>, with more intensity the higher the value. So for example,</blockquote>

<code>{r: 15, g: 0, b: 0}</code>

<blockquote>produces a very bright red glow.</blockquote>

<p>See</p>

<p>for more details on how to set colors.</p>

<p>You can also edit the following fields in a PBR Material to fine-tune how its color is perceived:</p>

<em>emissiveColor</em>

<li>: The color emitted from the material.</li>

<em>reflectivityColor</em>

<li>: AKA</li>

<em>Specular Color</em>

<li>in other nomenclature.</li>

<p>To create a plain color material that is not affected by light and shadows in the environment, create a basic material instead of a PBR material.</p>

<h2>Using textures</h2>

<p>Set an image file as a texture on a material by setting the</p>

<code>texture</code>

<p>parameter.</p>

<p>In the example above, the image for the material is located in a</p>

<code>materials</code>

<p>folder, which is located at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<blockquote>: We recommend keeping your texture image files separate in a</blockquote>

<code>/materials</code>

<blockquote>folder inside your scene.</blockquote>

<p>While creating a texture, you can also pass additional parameters:</p>

<code>filterMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered. This takes a value from the</li>

<code>TextureFilterMode</code>

<li>enum. See</li>

<li>.</li>

<code>wrapMode</code>

<li>: Determines how a texture is tiled onto an object. This takes a value from the</li>

<code>TextureWrapMode</code>

<li>enum. See</li>

<li>.</li>

<p>To create a texture that is not affected by light and shadows in the environment, create a basic material instead of a PBR material.</p>

<h4>Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<p>The URL must start with</p>

<code>https</code>

<p>,</p>

<code>http</code>

<p>URLs aren’t supported. The site where the image is hosted should also have</p>

<p>that permit externally accessing it.</p>

<h4>Multi-layered textures</h4>

<p>You can use several image files as layers to compose more realistic textures, for example including a</p>

<code>bumpTexture</code>

<p>and a</p>

<code>emissiveTexture</code>

<p>.</p>

<h4>Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure</p>

<em>uv</em>

<p>properties on the</p>

<p>.</p>

<p>You set</p>

<em>u</em>

<p>and</p>

<em>v</em>

<p>coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more</p>

<em>uv</em>

<p>coordinates need to be defined on the texture, a plane for example needs to have 8</p>

<em>uv</em>

<p>points defined, 4 for each of its two faces.</p>

<p>The following example includes a function that simplifies the setting of uvs. The</p>

<code>setUVs</code>

<p>function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<p>For setting the UVs for a</p>

<code>box</code>

<p>mesh shape, the same structure applies. Each of the 6 faces of the cube takes 4 pairs of coordinates, one for each corner. All of these 48 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The</p>

<code>texture</code>

<p>object lets you configure the wrapping mode by setting the</p>

<code>wrapMode</code>

<p>field. This property takes its values from the</p>

<code>TextureWrapMode</code>

<p>enum, which allows for the following values:</p>

<code>TextureWrapMode.TWM_CLAMP</code>

<li>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>

<code>TextureWrapMode.TWM_REPEAT</code>

<li>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>

<code>TextureWrapMode.TWM_MIRROR</code>

<li>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>

<p>The example above sets the wrapping mode to</p>

<code>TWM_MIRROR</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Uv properties are currently only available on</blockquote>

<code>plane</code>

<blockquote>and on</blockquote>

<code>box</code>

<blockquote>shapes.</blockquote>

<h4>Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various</p>

<p>algorithms that exist to compensate for this in different ways.</p>

<p>The</p>

<code>Material</code>

<p>object uses the</p>

<em>bilinear</em>

<p>algorithm by default, but it lets you configure it to use the</p>

<em>nearest neighbor</em>

<p>or</p>

<em>trilinear</em>

<p>algorithms instead by setting the</p>

<code>samplingMode</code>

<p>property of the texture. This takes a value from the</p>

<code>TextureFilterMode</code>

<p>enum:</p>

<code>TextureFilterMode.TFM_POINT</code>

<li>: Uses a “nearest neighbor” algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</li>

<code>TextureFilterMode.TFM_BILINEAR</code>

<li>: Uses a bilinear algorithm to estimate the color of each pixel.</li>

<code>TextureFilterMode.TFM_TRILINEAR</code>

<li>: Uses a trilinear algorithm to estimate the color of each pixel.</li>

<h2>Avatar Portraits</h2>

<p>To display a thumbnail image of any player, use</p>

<code>Material.Texture.Avatar</code>

<p>when setting the texture of your material, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<p>You can fetch the portrait of any Decentraland player, even if they’re not currently connected, and even if they don’t have a claimed Decentraland name.</p>

<p>The following properties are supported within the object you pass as an argument:</p>

<code>userId</code>

<li>: ID of the user who’s profile you want to display</li>

<code>filterMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered. This takes a value from the</li>

<code>TextureFilterMode</code>

<li>enum. See</li>

<li>.</li>

<code>wrapMode</code>

<li>: Determines how a texture is tiled onto an object. This takes a value from the</li>

<code>TextureWrapMode</code>

<li>enum. See</li>

<li>.</li>

<h2>Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a</p>

<code>Color4</code>

<p>, and set the 4th value to something between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. The closer to</p>

<em>1</em>

<p>, the more opaque it will be.</p>

<p>To make a material with a texture only transparent in regions of the texture:</p>

<p>Set an image in</p>

<code>alphaTexture</code>

<p>.</p>

<p>Note: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</p>

<p>Optionally set the texture normally, and set the</p>

<code>transparencyMode</code>

<p>to field.</p>

<p>The</p>

<code>transparencyMode</code>

<p>takes its value from the</p>

<code>MaterialTransparencyMode</code>

<p>enum, that can have the following values:</p>

<code>MaterialTransparencyMode.MTM_OPAQUE</code>

<li>: No transparency at all</li>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST</code>

<li>: Each pixel is either completely opaque or completely transparent, based on a threshold.</li>

<code>MaterialTransparencyMode.MTM_ALPHA_BLEND</code>

<li>: Intermediate values are possible based on the value of each pixel.</li>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND</code>

<li>: Uses a combination of both methods.</li>

<code>MaterialTransparencyMode.MTM_AUTO</code>

<li>: Determines the method based on the provided texture.</li>

<p>If you set the</p>

<code>transparencyMode</code>

<p>to</p>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST</code>

<p>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the</p>

<code>alphaTest</code>

<p>property between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. By default its value is</p>

<em>0.5</em>

<p>.</p>

<h2>Advanced syntax</h2>

<p>The complete syntax for creating a</p>

<code>Materials</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets Materials components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters. In the example above, the</p>

<code>box</code>

<p>type supports a</p>

<code>uvs</code>

<p>field.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>texture</code>

<code>avatarTexture</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

<p>To add a</p>

<code>Material</code>

<p>component to an entity that potentially already has an instance of this component, use</p>

<code>Material.createOrReplace()</code>

<p>. The helper functions like</p>

<code>MeshRenderer.setPbrMaterial()</code>

<p>handle overwriting existing instances of the component, but running</p>

<code>Material.create()</code>

<p>on an entity that already has this component returns an error.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/materials/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/coding-scenes/#imports

<title>Coding essentials | Decentraland Documentation</title>

<strong>Coding essentials</strong>

<h1>Coding essentials</h1>

<h2>The development tools</h2>

<p>At a very high level, the Decentraland</p>

<strong>Software Development Kit</strong>

<p>(SDK) allows you to do the following:</p>

<li>Generate a default</li>

<em>project</em>

<li>containing a Decentraland scene, including all the assets needed to render and run your content.</li>

<li>Build, test, and preview the content of your scene locally in your web browser - completely offline, and without having to make any Ethereum transactions or own LAND.</li>

<li>Write TypeScript code using the Decentraland API to add interactive and dynamic behavior to the scene.</li>

<li>Upload the content of your scene to the content server.</li>

<li>Link your LAND tokens to the URL of the content you have uploaded.</li>

<p>Our SDK includes the following components:</p>

<strong>The Decentraland Editor</strong>

<li>: An extension for Visual Studio Code that allows you to create scenes, preview and debug, and publish.</li>

<strong>The Decentraland ECS</strong>

<li>: A TypeScript package containing the framework of helper methods that allows you to create interactive experiences. Use it to create and manipulate objects in the scene and also to facilitate in-world transactions between players or other applications. (</li>

<li>)</li>

<strong>Scene examples</strong>

<li>: Take inspiration and coding best practices from the</li>

<li>.</li>

<h2>Requirements</h2>

<p>To develop a scene locally, you don’t need to own LAND tokens. Developing and testing a scene can be done completely offline, without the need to deploy a scene to the Ethereum network (the system Decentraland uses to establish ownership of LAND, of a Decentraland Name), or the content server.</p>

<p>You must have the following:</p>

<strong>Visual Studio Code</strong>

<p>: Dowload it</p>

<p>. Beyond hosting the Decentraland Editor extension, it helps you create scenes a lot faster and with less errors. A source code editor marks syntax errors, autocompletes while you write and even shows you smart suggestions that depend on the context that you’re in. You can also click on an object in the code to see the full definition of its class and what attributes it supports.</p>

<strong>The Decentraland Editor SDK7</strong>

<p>: An extension for Visual Studio code that exposes many common functionalities as buttons in the UI.</p>

<p>.</p>

<h2>Supported languages and syntax</h2>

<p>Decentraland employs</p>

<p>as the default language for writing scenes.</p>

<p>TypeScript is a superset of JavaScript, so if you’re familiar with JavaScript you’ll find it’s almost the same, but TypeScript includes type declarations. Thanks to type declarations, it’s possible to have features like autocomplete better debugging hints, these speed up development times and allow for the creation of a more solid codebase. These features are all key components to a positive developer experience.</p>

<p>When a scene is built, the Typescript code you wrote is compiled into minified Javascript, to make it lighter. The original source code in Typescript is never uploaded to the servers, only the compiled Javascript version.</p>

<h3>Other languages</h3>

<p>You can use another tool or language instead of TypeScript and compile it into JavaScript, as long as your compiled scripts are contained within a single JavaScript file named</p>

<em>game.js</em>

<p>. All provided type declarations are made in TypeScript, and other languages and transpilers are not officially supported.</p>

<h2>Scenes</h2>

<p>The content you deploy to your LAND is called a</p>

<strong>scene</strong>

<p>. A scene is an interactive program that renders 3D content, this could be a game, an interactive experience, an art gallery, whatever you want!</p>

<p>Scenes are deployed to virtual LAND in Decentraland. LAND is a scarce and non-fungible asset maintained in an Ethereum smart contract. Deploy to a single</p>

<strong>parcel</strong>

<p>, a 16 meter by 16 meter plot of LAND, or to multiple adjacent parcels.</p>

<p>When players visit Decentraland, they download and render the content of each scene as they walk through the map. They unload scenes as they walk away from them.</p>

<p>You can also run a scene locally on your machine by running a preview from the CLI. You can also</p>

<p>to run remotely on a 3rd party server to easily share your work with others.</p>

<h2>Entities and Components</h2>

<p>Three dimensional scenes in Decentraland are based on an</p>

<p>architecture, where everything in a scene is an</p>

<em>entity</em>

<p>. Entities have</p>

<em>components</em>

<p>, each component gives the entity it belongs to specific properties. A door entity is likely to have at least a Transform component (that sets position, rotation & scale) and another to provide it a shape. Components are just a place to store data, they don’t carry out any actions by themselves.</p>

<p>Entities may be nested inside other entities to form a tree structure. If you’re familiar with web development, you might find it useful to think of entities as elements in a DOM tree and of components as the attributes of each of these elements.</p>

<p>Entities are an abstract concept. An entity is just an id, that is used as a reference to group different components.</p>

<p>See</p>

<p>for an in-depth look of both these concepts and how they’re used by Decentraland scenes.</p>

<h3>Custom components</h3>

<p>The default set of components (like</p>

<code>Transform</code>

<p>,</p>

<code>GltfContainer</code>

<p>,</p>

<code>Material</code>

<p>, etc) are interpreted by the engine and have direct consequences on how the entity will look, its position, if it emits sounds, etc.</p>

<p>You can also define</p>

<em>custom components</em>

<p>to store data that might be useful to the mechanics in your scene. The engine won’t know how to interpret what the values on these components mean, they won’t have any direct consequences on how the scene is rendered. However, you can write logic in your scene’s code to monitor these values and respond to them. For example, you can define a custom “doorState” component to track the door’s open/closed state. In this case, the component is nothing more than a place to store a value that keeps track of this state. To see the door open and close in your scene, you have to then separately implement the logic that uses these values to affect the door’s rotation, a value from the</p>

<code>Transform</code>

<p>component that the engine does know how to interpret.</p>

<p>See</p>

<p>for more information.</p>

<h2>Systems</h2>

<p>Entities and components are places to store information about the objects in a scene.</p>

<em>Systems</em>

<p>hold functions that change the information that’s stored in components over time.</p>

<p>Systems are where we implement game logic, they carry out the actions that need to be updated or checked periodically on every tick of the game loop.</p>

<p>A system is a pure and simple function that gets called once on every tick (up to 30 times a second), following the</p>

<em>update pattern</em>

<p>.</p>

<p>A single scene can have 0 or many systems running at the same time. Systems can be turned on or off at different moments during the scene’s duration. It’s generally a good practice to keep independent behaviors in separate systems.</p>

<p>See</p>

<p>for more details about how systems are used in a scene.</p>

<h3>The game loop</h3>

<p>The</p>

<p>is the backbone of a Decentraland scene’s code. It cycles through part of the code at a regular interval and does the following:</p>

<li>Listen for player input</li>

<li>Update the scene</li>

<li>Re-render the scene</li>

<p>In most traditional software programs, all events are triggered directly by player actions. Nothing in the program’s state will change until the player clicks on a button, opens a menu, etc.</p>

<p>But interactive environments and games are different from that. Not all changes to the scene are necessarily caused by a player’s actions. Your scene could have animated objects that move on their own or even non-player characters that have their own AI. Some player actions might also take multiple ticks to be completed, for example if the opening of a door needs to take a whole second, the door’s rotation must be incrementally updated about 30 times as it moves.</p>

<p>We call each iteration over the loop a</p>

<em>tick</em>

<p>. Decentraland scenes are rendered at 30 ticks per second, whenever possible. If the machine is struggling to render each tick, it may result in less frequent updates.</p>

<p>In each tick, the scene is updated; then the scene is re-rendered, based on the updated values.</p>

<p>In Decentraland scenes, there is no explicitly declared game loop, but rather the</p>

<p>of the scene make up the game loop.</p>

<p>The compiling and rendering of the scene is carried out in the backend, you don’t need to handle that while developing your scene.</p>

<h2>Querying components</h2>

<p>You can</p>

<p>with the method</p>

<code>engine.getEntitiesWith(...components)</code>

<p>to keep track of all entities in the scene that have certain components.</p>

<p>It often makes sense to query components within a</p>

<p>, to then loop over each of the returned entities and perform a same set of actions on each.</p>

<p>If you attempt to iterate over all the entities in the scene on every tick of the game loop, that could have a significant cost in performance. By referring only to the entities returned by a query, you ensure you’re only dealing with those that are relevant.</p>

<h2>Scene lifecycle</h2>

<p>If you start writing code directly in</p>

<code>index.ts</code>

<p>, your code may be lacking some important context. For example, you might be trying to do something with the</p>

<code>PlayerEntity</code>

<p>, or you with an entity that was added via the Decentraland Editor’s UI, however at that point in time those things haven’t been loaded yet.</p>

<p>To avoid that scenario, it’s always recommended to write out your scene’s initial loading code using the</p>

<code>main()</code>

<p>function (on the</p>

<code>index.ts</code>

<p>file) as an entrypoint. This function runs only once all of the scene’s initial context is already loaded, this includes anything added via the Decentraland Editor’s UI.</p>

<p>You can write your code outside the</p>

<code>main()</code>

<p>function when:</p>

<li>The code is indirectly called by</li>

<code>main()</code>

<li>The code defines a system, or adds a system to the engine</li>

<li>The code is inside an</li>

<strong>📔 Note</strong>

<p>: By the time the code inside an async function or a system is first executed, everything in the scene is already properly initialized.</p>

<p>must always be written outside the</p>

<code>main()</code>

<p>function, in a separate file. They need to be interpreted before</p>

<code>main()</code>

<p>is executed.</p>

<h2>Mutability</h2>

<p>You can choose to deal with mutable or with immutable (read-only) versions of a component. The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can’t change any of the properties on it.</p>

<p>The</p>

<code>.getMutable()</code>

<p>function returns representation of the component that allows you to change its values. Use mutable versions only when you plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>See</p>

<p>for more details.</p>

<h2>Putting it all together</h2>

<p>The</p>

<em>engine</em>

<p>is what sits in between</p>

<em>entities</em>

<p>, and</p>

<em>components</em>

<p>on one hand and</p>

<em>systems</em>

<p>on the other.</p>

<p>All of the values stored in the components in the scene represent the scene’s state at that point in time. With every tick of the game loop, the engine runs the functions of each of the systems to update the values stored in the components.</p>

<p>After all the systems run, the components on each entity will have new values. When the engine renders the scene, it will use these new updated values and players will see the entities change to match their new states.</p>

<p>In the example above, a</p>

<code>cube</code>

<p>entity and a</p>

<code>rotationSystem</code>

<p>system are added to the engine. The</p>

<code>cube</code>

<p>entity has a</p>

<code>Transform</code>

<p>, and a</p>

<code>MeshRenderer</code>

<p>component. In every tick of the game loop, the</p>

<code>rotationSystem</code>

<p>system is called, and it changes the rotation values in the</p>

<code>Transform</code>

<p>component of the</p>

<code>cube</code>

<p>entity.</p>

<p>Note that most of the code above is executed just once, when loading the scene. The exception is the</p>

<code>rotationSystem</code>

<p>system, which is called on every tick of the game loop.</p>

<h2>Scene Decoupling</h2>

<p>Your scenes don’t run in the same context as the engine

(a.k.a. the main thread). We created the SDK in a way that is

entirely decoupled from the rendering engine. We designed it to be like this for both safety and performance reasons.</p>

<p>Because of this decoupling, your scene’s code doesn’t have access to the DOM or the</p>

<code>window</code>

<p>object, so you can’t access data like the player’s browser or geographical location.</p>

<p>The decoupling works by using RPC protocol, this protocol assigns a small part of the client to only render the scene and control events.</p>

<p>We have also abstracted the communication protocol. This allows us to run the scenes locally in a WebWorker.</p>

<p>We don’t want developers to intervene with the internals of the engine or even need to know what lies inside the engine. We need to ensure a consistent experience for players throughout the Decentraland map, and mistakes are more likely to happen at that “low” level.</p>

<p>This decoupling is also important to prevent neighbor scenes from interfering with the experience of players while they’re on someone else’s scene. A player might have multiple nearby scenes loaded at the same time, each running their own code. Some actions (like opening external links, or moving the player) are only permitted when the player is standing on that particular scene, not if the scene is loaded but the player is outside.</p>

<h2>Tree Shaking</h2>

<p>When converting the source code in TypeScript to the compiled code in minified JavaScript, the process performs</p>

<p>to ensure that only the parts of the code that are actually being used get converted. This helps keep the scene’s final code as lightweight as possible. It’s especially useful when using external libraries, since often these libraries include a lot of functionality that is not used that would otherwise bulk up the scene.</p>

<p>As a consequence of tree shaking, any code that you want your scene to run needs to be referenced one way or another by the entry points of your code: the</p>

<code>main()</code>

<p>function on</p>

<code>index.ts</code>

<p>. Systems can also alternatively be added to the engine on the</p>

<code>index.ts</code>

<p>file, without referencing</p>

<code>main()</code>

<p>. Any code that is not explicitly or indirectly referenced by these files, will not make it into the scene.</p>

<p>For example, suppose you have a file named</p>

<code>extraContent.ts</code>

<p>with the following content, the entity will not be rendered and the system will not start running:</p>

<p>To make it run as part of your scene, you can reference from</p>

<code>index.ts</code>

<p>in the following way:</p>

<p>The exception to this rule are the definitions of custom components. These must not be accessed via the</p>

<code>main()</code>

<p>function entry point, as they need to be interpreted before everything else.</p>

<h2>Imports</h2>

<p>All functions, objects, components and other elements used by the scene must be imported into each file to use them. This is a consequence of</p>

<p>, as it avoids packaging the entire SDK and instead only includes the parts the scene uses.</p>

<p>Snippets throughout the documentation omit the import lines at the start of every file to keep them clean, but for them to work you must add them to the scene.</p>

<p>When Using VS Studio Code to write your scenes, the smart auto-complete options should take care of handling imports for you when you write, without you having to be aware of this.</p>

<p>When you paste a snippet into your scene, however, you will likely see some elements marked in red, which are not imported into that file. To fix this:</p>

<li>Click on each underlined word</li>

<li>Click on the light-bulb icon on the left of the line</li>

<li>Select</li>

<strong>Add Import From</strong>

<li>An import line appears at the start of the file.</li>

<p>If there are many different things to import, you can also select</p>

<strong>Add all missing imports</strong>

<p>from the same dropdown.</p>

<p>Note that imports must be made to every file where an element is used.</p>

<p>VS Studio Code should be able to resolve the correct paths to your imports on its own. If for whatever reason its having trouble doing that, a trick is to paste the following empty import statements at the start of your file. VS Studio should be able to take it from there.</p>

<h2>SDK Versions</h2>

<p>When developing a new scene, you use the</p>

<code>@latest</code>

<p>stable SDK release by default.</p>

<p>You can install the</p>

<code>@next</code>

<p>SDK release if you want to leverage or preview upcoming features that didn’t yet make it into the latest stable release.</p>

<p>To do so, open the Decentraland Editor tab, and press the</p>

<code>+</code>

<p>sign to install the following:</p>

<code>@dcl/sdk@next</code>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that the @next version might suffer issues from time to time. The syntax and name of new features might change before it’s released in a stable version.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/coding-scenes/#imports

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/editor/

<title>Decentraland Editor | Decentraland Documentation</title>

<strong>Decentraland Editor</strong>

<h1>Decentraland Editor</h1>

<h2>Install the editor</h2>

<p>See the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: There are two versions of the editor, the</blockquote>

<strong>Decentraland Editor SDK6</strong>

<blockquote>and the</blockquote>

<strong>Decentraland Editor SDK7</strong>

<blockquote>. As their names suggest, each version of the editor is meant for working on Decentraland scenes built with different SDK versions. You can have both extensions installed in your same instance of Visual Studio Code, and use them accordingly depending on what project you’re working with.</blockquote>

<h2>About the Decentraland Editor</h2>

<p>The Decentraland editor is an extension of Visual Studio Code, built for easing the experience of creating Decentraland scenes.</p>

<p>Ultimately the editor will offer many no-code options for placing items, and setting component parameters via graphical UIs. The first version of the editor aims for simplifying the experience of coding scenes by removing the command line from the list of tools you need to use. It offers UI options for:</p>

<strong>Create projects</strong>

<li>: Scaffold a new project of various types: scene, library, portable experience, and smart item. See</li>

<li>.</li>

<strong>Run scenes</strong>

<li>: preview your scenes within VSCode, or launch in a browser. See</li>

<li>.</li>

<strong>Debug scenes</strong>

<li>: Add breakpoints to the code, to pause execution and see current state of all variables at that point in time. See</li>

<li>.</li>

<strong>Publish scenes</strong>

<li>: publish your scene to the world. See</li>

<li>.</li>

<strong>Manage dependencies</strong>

<li>: add, remove, and list the libraries and dependencies that your project is using. See</li>

<li>.</li>

<strong>Preview models</strong>

<li>: Open a gltf or .glb model to see an interactive preview.</li>

<strong>Drag and drop entities visually (Alpha)</strong>

<li>: Use the</li>

<strong>Inspector</strong>

<li>view to drag and drop entities into place, and configure some of their components via UI.</li>

<strong>Reference entities added visually in your code</strong>

<li>: Entities that are added using the inspector can then be referenced in your code to add interactivity to them. See</li>

<li>.</li>

<h2>Reporting issues</h2>

<p>If you run into any bugs, please report an issue in the</p>

<p>repository.</p>

<p>We ask you to please detail how to reproduce the issue as much as possible.</p>

<h2>Submit feedback</h2>

<p>Once you’ve had a chance to try the new editor, please fill in the</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/editor/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/installation-guide/#the-decentraland-editor

<title>Editor Installation Guide | Decentraland Documentation</title>

<strong>Editor Installation Guide</strong>

<h1>Editor Installation Guide</h1>

<p>The Decentraland Editor is a Visual Studio extension, that allows you to build, preview and deploy Decentraland scenes.</p>

<strong>📔 Note</strong>

<blockquote>: For a simple no-code scene creation tool that doesn’t require any installation, check out the</blockquote>

<blockquote>.</blockquote>

<p>To install the Decentraland Editor:</p>

<p>Install</p>

<p>, if you don’t have it already.</p>

<p>Open Visual Studio Code, and open the</p>

<strong>extensions</strong>

<p>marketplace.</p>

<p>Search for the</p>

<strong>Decentraland Editor SDK7</strong>

<p>extension and click</p>

<strong>Install</strong>

<p>. You’ll then need to restart Visual Studio to use the extension.</p>

<code>**📔 Note**: There are two versions of the editor, the **Decentraland Editor SDK6** and the **Decentraland Editor SDK7**. As their names suggest, each version of the editor is meant for working on Decentraland scenes built with different SDK versions. You can have both extensions active in your same installation of Visual Studio Code, and use them accordingly depending on what project you're working with.</code>

<p>You’ll then need to</p>

<strong>restart Visual Studio</strong>

<p>to use the extension.</p>

<h2>Troubleshooting</h2>

<p>If you run into issues, see the</p>

<p>section.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/installation-guide/#the-decentraland-editor

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/troubleshooting/

<title>Troubleshooting | Decentraland Documentation</title>

<strong>Troubleshooting</strong>

<h1>Troubleshooting</h1>

<h1>Issues when running preview</h1>

<h3>Issue: Can’t run any scene preview, error message says mentions</h3>

<strong>Permissions denied</strong>

<h3>or</h3>

<strong>EACCES</strong>

<p>Your operating system doesn’t allow you edit permissions on the folder where you want to run the project. When running the scene, some dependencies need to be installed, but it’s forbidden. You need to configure the folder’s permissions to allow your Windows/Mac/Linux user account to edit files in them.</p>

<p>Useful resources:</p>

<h3>Issue: Can’t run a particular scene preview, error says</h3>

<strong>Error: Error while building the project</strong>

<p>If you’re running a scene that was shared with you, make sure that this scene wasn’t shared containing a</p>

<code>node_modules</code>

<p>or</p>

<code>bin</code>

<p>folder, or a</p>

<code>package-lock.json</code>

<p>file. These files contain dependencies that use versions that are specific to your OS and machine, they should be generated when running the scene for the first time. Delete these folders & file manually, then run</p>

<code>npm run start</code>

<p>again.</p>

<h3>Issue: Running</h3>

<code>npm run start</code>

<h3>runs, no error message, but no browser window opens and no URL in the output to open the preview</h3>

<p>Make sure your Node version is up to date. It must be 16 or newer.</p>

<h3>Issue: Running</h3>

<code>npm run start</code>

<h3>opens a browser tab, but the loading screen never finishes loading, or I see a red error banner that says “critical error”.</h3>

<p>Make sure you have the latest version of the Decentraland SDK installed in your project. Run:</p>

<code>npm i @dcl/sdk"latest</code>

<h3>Issue: The scene runs, in the console I see</h3>

<code>Cyclic dependencies</code>

<h3>warnings.</h3>

<p>These refer to files in your scene that reference each other mutually. This is not necessarily a problem, but is not a recommendable pattern for writing software, as it can lead to hard to debug race conditions and other issues. Your scene is likely to work well in spite of these warnings.</p>

<p>Ideally, the loading of the code in your scene should follow a clear sequential order. Code that has cyclic dependencies might suffer a chicken & the egg problem, where the compiler doesn’t know which to initiate first. Often this is resolved without issues, but it’s a good practice to avoid.</p>

<p>To fix these dependencies, you often must resort to calling functions or object constructors passing references to already instanced entities/objects in the function arguments; Instead of hard-coding references to these entities/objects in the function, which may or may not already be instanced.</p>

<h2>Issues when running the Editor Inspector</h2>

<h3>Issue: The editor never finishes loading the scene, it may say something like “Can’t connect to server”.</h3>

<p>Make sure your Node version is up to date. It must be 16 or newer.</p>

<h1>Issues when deploying</h1>

<h3>Issue: You don’t have permissions to deploy to these parcels</h3>

<p>Make sure that the</p>

<code>scene.json</code>

<p>file of your scene correctly lists the coordinates where you want to deploy.</p>

<p>Make sure that Metamask is correctly set up to use the right wallet to sign the transaction. This may either be the wallet that owns the LAND tokens, or might have operator permissions granted by the owner.</p>

<h3>Issue: Running</h3>

<code>npm run deploy</code>

<h3>fails</h3>

<p>Check the spawn points of your scene, all three x,y,z coordinates of a spawn point must either be a number or a range. Either all three are numbers or all three are ranges. It’s not supported to have ranges for some but numbers for others.</p>

<p>For example this is not supported:</p>

<code>"position": {"x": [1,4], "y": 0, "z": [1,4]}</code>

<p>This is supported:</p>

<code>"position": {"x": [1,4], "y": [0,0], "z": [1,4]}</code>

<p>The default catalyst server that you’re assigned to deploy to might be down or having issues. You can force the</p>

<code>npm run deploy</code>

<p>command to deploy to a specific catalyst server instead. To deploy to a specific server, on the Decentraland Editor:</p>

<li>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</li>

<code>Deploy Scene To Custom Catalyst</code>

<li>Enter the address of the server, for example</li>

<code>peer-testing.decentraland.org</code>

<li>Approve the transaction</li>

<p>To do this via the CLI:</p>

<code>npm run deploy -- --target-content <server-name></code>

<p>For example:</p>

<code>npm run deploy -- --target-content peer-ec1.decentraland.org</code>

<p>See</p>

<p>for a status check of all the servers in the catalyst network. You can also copy the addresses of each one, from the top of each card.</p>

<p>Check your scene’s</p>

<code>package.json</code>

<p>. A common problem is that there’s a</p>

<code>bundleDependencies</code>

<p>and also a</p>

<code>bundledDependencies</code>

<p>(extra d) section. This can sometimes result from running different Node versions on the same project at different times, or from sharing the project between people that ran it with different Node versions installed. Delete</p>

<code>bundleDependencies</code>

<p>, which relates to older Node versions.</p>

<p>Also ensure you have your Node version up to date, at least version 16.</p>

<h3>Issue: Running</h3>

<code>npm run deploy</code>

<h3>or</h3>

<code>npm run build</code>

<h3>reports type errors</h3>

<p>Your scene might have type errors reported by TypeScript, for example stating that a certain variable might be type</p>

<code>any</code>

<p>or that</p>

<code>undefined</code>

<p>or</p>

<code>null</code>

<p>are not allowed. When running</p>

<code>npm run deploy</code>

<p>, it also runs</p>

<code>npm run build</code>

<p>, which is a bit more strict with these checks than</p>

<code>npm run start</code>

<p>.</p>

<p>Unlike JavaScript, TypeScript enforces strict typing of all variables. Even though your scene is written in such a way that for example a certain value will never be</p>

<code>undefined</code>

<p>, TypeScript needs to know what would happen in that scenario, or you need to explicitly clarify that the value can only be for example a string.</p>

<p>As an alternative, you can run</p>

<code>npm run deploy --skip-build</code>

<p>to skip the running of</p>

<code>npm run build</code>

<p>, and prevent these checks from running.</p>

<h3>Issue: I deployed my scene but I don’t see the changes when I enter Decentraland</h3>

<p>Keep in mind that it can take a few minutes for new content to be propagated throughout all of the servers in the catalyst network, give it a little time.</p>

<p>See</p>

<p>for instructions on how you can ensure that the content was properly propagated to all servers.</p>

<h3>Issue: Once deployed, some 3D models are missing</h3>

<li>Make sure the 3D models are all within the scene boundaries, even their bounding boxes. When running in preview, any 3D models that extend beyond the scene boundaries are marked in red and their bounding boxes are marked. In the deployed scene, these models aren’t rendered at all, as they could be intruding into the parcels of your neighbors.</li>

<h3>Issue: Once deployed, my 3D models look different</h3>

<p>If the textures look different, keep in mind that textures in 3D models are capped to a maximum size of 512x512 pixels. This conversion is carried out to ensure that Decentraland runs smoothly for everyone.</p>

<p>If models look different, there could be an issue with the conversion of the models to asset bundles. Read more about asset bundle compression</p>

<p>.</p>

<p>To validate this, try running the scene with the URL parameter</p>

<code>&DISABLE_ASSET_BUNDLES</code>

<p>. If the models look fine with this flag, the issue must be related to a bug in the conversion of the model.</p>

<p>Note that the generation of compressed asset-bundle versions of your models is a process that takes the servers time (about an hour). You can check if the models are being loaded as compressed asset bundles or not by writing the following command into the chat window</p>

<code>/detectabs</code>

<p>. Compressed models are tinted green, non-compressed are tinted red.</p>

<h3>Issue: My scene has poor FPS in production, even though it runs smoothly in preview.</h3>

<p>Your scene’s performance could be affected by neighboring scenes that follow bad practices, as they also run in parallel. You can validate that this is the case by opening the settings and setting the line of sight to a minimum, so that only 1 parcel around your current scene is loaded.</p>

<p>You can reduce the line of sight even further by running your scene with the parameter</p>

<code>&LOS=0</code>

<p>, to not load any surrounding scenes at all.</p>

<p>If you just deployed your scene, the burden when loading the scene might also be reduced once the servers convert the 3D models in the scene to compressed asset bundles. You can check if the models are being loaded as compressed asset bundles or not by writing the following command into the chat window</p>

<code>/detectabs</code>

<p>. Compressed models are tinted green, non-compressed are tinted red.</p>

<h2>Report a bug</h2>

<p>If you encounter a problem that is not with your scene, but instead with the Decentraland SDK in general, please see</p>

<p>.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/troubleshooting/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/#verify-deployment-success

<title>Preview your scene | Decentraland Documentation</title>

<strong>Preview your scene</strong>

<h1>Preview your scene</h1>

<p>Once you have</p>

<p>or downloaded a</p>

<p>you can preview it locally.</p>

<h2>Using the editor</h2>

<p>To run a scene preview using the Decentraland Editor:</p>

<p>Make sure you’ve</p>

<p>.</p>

<p>Open your scene’s folder using Visual Studio Code.</p>

<p>Note: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<strong>Run Scene</strong>

<p>button.</p>

<p>This opens a new tab in Visual Studio Code, running the Decentraland scene, just like in a web browser tab.</p>

<p>Optionally click</p>

<strong>Open in browser</strong>

<p>, over the top margin of the tab to run the preview in a web browser window.</p>

<h2>Using the CLI</h2>

<h3>Before you begin</h3>

<p>Please make sure you first install the CLI tools by running the following command:</p>

<p>See the</p>

<p>for more details instructions.</p>

<h3>Preview a scene</h3>

<p>To preview a scene run the following command on the scene’s main folder:</p>

<p>Any dependencies that are missing are installed and then the CLI opens the scene in a new browser tab automatically. It creates a local web server in your system and points the web browser tab to this local address.</p>

<p>Every time you make changes to the scene, the preview reloads and updates automatically, so there’s no need to run the command again.</p>

<strong>📔 Note</strong>

<blockquote>: Some scenes depend on communicating with an external server to carry out custom logic or store and retrieve data. When previewing one of these scenes, you’ll likely have to also run the server locally on another port. Check the scene’s readme for instructions on how to launch the server as well as the scene.</blockquote>

<h3>Parameters of the preview command</h3>

<p>You can add the following flags to the</p>

<code>npm run start</code>

<p>command to change its behavior:</p>

<code>--web3</code>

<li>Connects preview to browser wallet to use the associated avatar and account.</li>

<code>--skip-version-checks</code>

<li>Avoids checking if the scene’s SDK framework version matches your CLI version, and launches the preview anyway.</li>

<code>--desktop-client</code>

<li>Runs the preview in the Decentraland Desktop client.</li>

<code>--port</code>

<li>to assign a specific port to run the scene. Otherwise it will use whatever port is available.</li>

<code>--no-debug</code>

<li>Disable the debug panel, that shows scene and performance stats.</li>

<code>--no-browser</code>

<li>to prevent the preview from opening a new browser tab.</li>

<code>--w</code>

<li>or</li>

<code>--no-watch</code>

<li>to not open watch for filesystem changes and avoid hot-reload whenever the scene’s code changes.</li>

<code>--c</code>

<li>or</li>

<code>--ci</code>

<li>To run the parcel previewer on a remote unix server,</li>

<strong>📔 Note</strong>

<blockquote>: To preview old scenes that were built for older versions of the SDK, you must set the corresponding version of</blockquote>

<code>decentraland-ecs</code>

<blockquote>in your project’s</blockquote>

<code>package.json</code>

<blockquote>file.</blockquote>

<h2>Upload a scene to decentraland</h2>

<p>Once you’re happy with your scene, you can upload it and publish it to Decentraland, see</p>

<p>for instructions on how to do that.</p>

<p>You can also upload a preview to a free 3rd party server,</p>

<p>.</p>

<h2>Preview scene size</h2>

<p>The scene size shown in the preview is based on the scene’s configuration, you set this when building the scene using the CLI. By default, the scene occupies a single parcel (16 x 16 meters).</p>

<p>If you’re building a scene to be uploaded to several adjacent parcels, you can edit the</p>

<em>scene.json</em>

<p>file to reflect this, listing multiple parcels in the “parcels” field. Placing any entities outside the bounds of the listed parcels will display them in red.</p>

<p>You can also change the coordinates by running the</p>

<code>npx update-parcels</code>

<p>command from the command line, this is especially useful on large scenes with many parcels. See</p>

<p>for more details.</p>

<strong>💡 Tip</strong>

<blockquote>: While running the preview, the parcel coordinates don’t need to match those that your scene will really use, as long as they’re adjacent and are arranged into the same shape. You will have to replace these with the actual coordinates later when you</blockquote>

<blockquote>.</blockquote>

<h2>Run preview in Desktop</h2>

<p>To run a preview scene in the Desktop native client, instead of in the web browser:</p>

<p>Make sure you have downloaded and installed the</p>

<p>or</p>

<p>desktop client.</p>

<p>Run the preview with:</p>

<code>npm run start --desktop-client</code>

<p>Copy the URL provided by the console output under</p>

<strong>Desktop Client</strong>

<p>and paste in your browser.</p>

<p>Note: The Browser might ask you for permission to open an external executable: Decentraland. Select</p>

<strong>Open</strong>

<p>.</p>

<p>You’ll see the following screen. Check that the URL is correct, then click</p>

<strong>Continue</strong>

<p>to launch the preview.</p>

<p>If you need to manually add anything to the URL, to change the default way the scene runs, tick the box</p>

<strong>Add custom URL parameters</strong>

<p>and write those in the dialog below.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/#verify-deployment-success

# Start of the information extracted from the URL: https://docs.decentraland.org/#create-your-first-scene

<title>Decentraland Documentation | Decentraland Documentation</title>

<h1>Decentraland Documentation</h1>

<p>The first-ever virtual world owned by its users</p>

<p>This site is maintained by the Decentraland Foundation.</p>

<p>The content in this site is divided into sections for different user profiles. Choose a section that matches your needs.</p>

<h3>For Players</h3>

<p>Discover how to experience Decentraland and get the most out of it</p>

<h3>For Content Creators</h3>

<p>Learn how to create content for others to experience in Decentraland</p>

<h3>For Contributors</h3>

<p>Learn how you can contribute to building the tools and infrastructure of Decentraland.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/#verify-deployment-success

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/installation-guide/

<title>Editor Installation Guide | Decentraland Documentation</title>

<strong>Editor Installation Guide</strong>

<h1>Editor Installation Guide</h1>

<p>The Decentraland Editor is a Visual Studio extension, that allows you to build, preview and deploy Decentraland scenes.</p>

<strong>📔 Note</strong>

<blockquote>: For a simple no-code scene creation tool that doesn’t require any installation, check out the</blockquote>

<blockquote>.</blockquote>

<p>To install the Decentraland Editor:</p>

<p>Install</p>

<p>, if you don’t have it already.</p>

<p>Open Visual Studio Code, and open the</p>

<strong>extensions</strong>

<p>marketplace.</p>

<p>Search for the</p>

<strong>Decentraland Editor SDK7</strong>

<p>extension and click</p>

<strong>Install</strong>

<p>. You’ll then need to restart Visual Studio to use the extension.</p>

<code>**📔 Note**: There are two versions of the editor, the **Decentraland Editor SDK6** and the **Decentraland Editor SDK7**. As their names suggest, each version of the editor is meant for working on Decentraland scenes built with different SDK versions. You can have both extensions active in your same installation of Visual Studio Code, and use them accordingly depending on what project you're working with.</code>

<p>You’ll then need to</p>

<strong>restart Visual Studio</strong>

<p>to use the extension.</p>

<h2>Troubleshooting</h2>

<p>If you run into issues, see the</p>

<p>section.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/#verify-deployment-success

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing/

<title>Publishing a scene | Decentraland Documentation</title>

<strong>Publishing a scene</strong>

<h1>Publishing a scene</h1>

<h2>Before you begin</h2>

<p>Make sure of the following:</p>

<p>Your scene complies with all of the</p>

<p>. Most of these are validated each time you run a preview of your scene.</p>

<p>You have a</p>

<p>account, with your LAND parcels assigned to it.</p>

<p>You own the necessary amount of adjacent LAND parcels. Otherwise you can purchase LAND in the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Multi-parcel scenes can only be deployed to adjacent parcels.</blockquote>

<h2>Check scene data</h2>

<p>When deploying, the CLI reads information from the</p>

<em>scene.json</em>

<p>to know where to deploy your scene to.</p>

<p>Open your scene’s</p>

<em>scene.json</em>

<p>file and complete the following data:</p>

<strong>title</strong>

<p>: The title is displayed on the UI under the mini-map, whenever players enter your scene. It also shows on the teleport popup.</p>

<strong>description</strong>

<p>: A description of what players will find in your scene. This is displayed on the teleport popup.</p>

<strong>navmapThumbnail</strong>

<p>: An image that represents your scene. This is displayed on the teleport popup. The image should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels.</p>

<strong>Parcels</strong>

<p>: The coordinates of the parcels that will be occupied by your scene</p>

<strong>Base</strong>

<p>: The coordinates of the parcel that will be considered the [0,0] coordinate of the scene. If your scene has multiple parcels, it should be the bottom-left (South-West) parcel.</p>

<strong>spawnPoints</strong>

<p>: A set of coordinates inside the scene (relative to the scene’s base parcel) where players spawn into. By default players spawn onto the</p>

<em>0,0,0</em>

<p>location of the scene (bottom-left corner). Use this to start out in a specific location, set a region to prevent players from overlapping with each other when they first appear.</p>

<strong>tags</strong>

<p>: A set of tags that describe your scene. These are used to help players and users explore Decentraland in a better way since they are able to find the content that they may be interested in.</p>

<p>.</p>

<strong>rating</strong>

<p>: This is used to classify the content of your scene based on its appropriateness for different age groups (</p>

<code>T</code>

<p>for Teens or</p>

<code>A</code>

<p>for Adults). It helps in filtering content for players.</p>

<strong>📔 Note</strong>

<blockquote>: See</blockquote>

<blockquote>for more details on how to set these parameters.</blockquote>

<h2>To publish the scene</h2>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Editor’s menu, by clicking the Decentraland logo on the tabs on the left. Then click</p>

<strong>Publish scene</strong>

<p>.</p>

<p>This opens a new tab in Visual Studio, showing what parcels you’re deploying to.</p>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<h3>Via the CLI</h3>

<li>Log into your Metamask account with the same public address associated with your parcels in Decentraland.</li>

<li>Run</li>

<code>npm run deploy</code>

<li>from the scene’s folder.</li>

<strong>💡 Tip</strong>

<blockquote>: If there are files in your project folder that you don’t want to deploy, list them in the</blockquote>

<em>.dclignore</em>

<blockquote>file before deploying.</blockquote>

<li>A browser tab will open, showing what parcels you’re deploying to. Click</li>

<strong>Sign and Deploy</strong>

<li>.</li>

<li>Metamask opens, notifying you that your signature is requested. Click</li>

<strong>Sign</strong>

<li>to confirm this action.</li>

<strong>💡 Tip</strong>

<blockquote>: If you’re implementing a continuous integration flow, where changes to your scene are deployed automatically, then you can set the</blockquote>

<code>export DCL_PRIVATE_KEY</code>

<blockquote>environment variable to the private key of an account that has deploy permissions.</blockquote>

<strong>💡 Tip</strong>

<blockquote>:</blockquote>

<code>npm run deploy</code>

<blockquote>runs a</blockquote>

<code>npm run build</code>

<blockquote>, which checks the scene for type errors more strictly than running</blockquote>

<code>npm run start</code>

<blockquote>. If these errors can’t be avoided (eg: they happen in an external library) and they don’t impact the scene, you can use</blockquote>

<code>npm run deploy --skip-build</code>

<blockquote>to skip the</blockquote>

<code>npm run build</code>

<blockquote>step and deploy the scene as it is.</blockquote>

<p>When publishing to a</p>

<p>, use the following command instead:</p>

<code>npm run deploy -- --target-content https://worlds-content-server.decentraland.org</code>

<h2>Publish from a hardware wallet</h2>

<p>Instead of storing your LAND tokens in a Metamask account, you may find it more secure to store them in a hardware wallet device, such as a</p>

<p>or a</p>

<p>, that’s physically plugged in to your computer.</p>

<p>If you’re using one of these devices, you can link the hardware wallet to Metamask to enable signing messages, while keeping the tokens more secure. See</p>

<p>for instructions to connect your account.</p>

<p>Once your hardware wallet can be used via Metamask, you can deploy following the same steps as if your tokens were on a Metamask account.</p>

<h2>Scene overwriting</h2>

<p>When a new scene is deployed, it overwrites older content that existed on the parcels it occupies.</p>

<p>If a scene that takes up multiple parcels is only partially overwritten by another, all of its parcels are either overwritten or erased.</p>

<p>Suppose you deployed your scene</p>

<em>A</em>

<p>over two parcels</p>

<em>[100, 100]</em>

<p>and</p>

<em>[100, 101]</em>

<p>. Then you sell parcel</p>

<em>[100, 101]</em>

<p>to a user who owns adjacent land and that deploys a large scene (</p>

<em>B</em>

<p>) to several parcels, including</p>

<em>[100, 101]</em>

<p>.</p>

<p>Your scene</p>

<em>A</em>

<p>can’t be partially rendered in just one parcel, so</p>

<em>[100, 100]</em>

<p>won’t display any content. You must build a new version of scene</p>

<em>A</em>

<p>that only takes up one parcel and deploy it to only parcel</p>

<em>[100, 100]</em>

<p>.</p>

<h2>What are the content servers</h2>

<p>The content servers are a network of community-owned servers with a filesystem that’s content-addressed, meaning that each file is identified by its contents, not by an arbitrary file name.</p>

<p>We use the content servers to host and distribute all scene content in a similar way to BitTorrent, keeping the Decentraland network distributed.</p>

<li>The content servers store and distribute all of the assets required to render your scenes.</li>

<li>The</li>

<code>npm run deploy</code>

<li>command links these assets to the LAND parcel specified in your</li>

<strong>scene.json</strong>

<li>file. Whenever you redeploy your scene, the CLI will update your LAND smart contract, if needed, to point to the most recent content available on the content servers.</li>

<p>The information on each copy of the server is verifiable, as each scene is signed by the LAND owner’s hash. This means that someone hosting a copy of the server won’t be able to tamper with the content to display something illegitimate. The community can also vote to approve or remove any of these servers using the DAO.</p>

<h2>The test server</h2>

<p>You can deploy content to the test catalyst server to run full tests with multiple users, the sourrounding scenes, and an environment that is identical to production. The test server is identical to all other catalyst servers, the difference is that the content that is deployed to this server isn’t propagated to the others. Content deployed to other servers on the other hand does get propagated to this server, so surrounding scenes should look as they will in production.</p>

<strong>📔 Note</strong>

<blockquote>: To deploy to parcels in the test server, you must have the same permissions required to deploy to those parcels in the main network.</blockquote>

<p>Players are never directed to this server, the only way to access it is to explicitly provide a URL parameter to connect to it.</p>

<p>If you’re working in a confidential project that you don’t want to unveil until launch, note that the test server is relatively hidden from players, but anyone explicitly using the test server’s URL could potentially run into it.</p>

<h3>Via the Decentraland Editor</h3>

<p>To deploy a scene to the test server:</p>

<p>Open VSCode in a Decentraland scene project.</p>

<p>Click on the Decentraland icon on the left sidebar.</p>

<p>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</p>

<code>Publish scene to test server</code>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<em>play.decentraland.org/&CATALYST=peer-testing.decentraland.org</em>

<h3>Via the CLI</h3>

<p>To deploy to the test server, run:</p>

<code>npm run deploy -- --target peer-testing.decentraland.org</code>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<h2>Verify deployment success</h2>

<p>Once you deployed your scene, these changes will take a few minutes to be propagated throughout the various content servers in the network. If you enter Decentraland right after deploying, you might still see the previous version of your content, depending of what realm you enter.</p>

<p>After you sign to authorize the deployment of your scene, the signing dapp will start displaying confirmations that the new version of your content has been propagated throughout all of the servers in the network,</p>

<p>You’ll see a list of each of the servers that make up Decentraland’s content network. For each server, it specifies the timestamp of the last uploaded change on that parcel. Each one of these servers refers to a different realm, you can reference how these server names map to realm names in the</p>

<p>.</p>

<p>You can also obtain this information at any time by running the following command on the command line console:</p>

<code>npx @dcl/opscli pointer-consistency --pointer '0,0'</code>

<strong>📔 Note</strong>

<blockquote>: Use the coordinates of your scene instead of</blockquote>

<code>0,0</code>

<blockquote>. If your scene has multiple parcels, any one of its parcels will produce the same output. If the coordinates start with a negative number, add a</blockquote>

<code>\</code>

<blockquote>at the start of the coordinates to prevent the</blockquote>

<code>-</code>

<blockquote>character from being misinterpreted by the command line.</blockquote>

<h2>Automatic deployments</h2>

<p>If you regularly make changes to your scene’s content and want to implement a streamlined publication pipeline, you can automate the deployment of your scene via a GitHub action.</p>

<p>For this, you must first store your scene in a GitHub project. You can then set a</p>

<p>with the following script, which runs every time there’s a merge to the</p>

<code>main</code>

<p>branch. The script installs any dependencies, builds the project and then deploys it to Decentraland.</p>

<p>Important: For this process to run, you must set a wallet’s private key as an environment variable in GitHub, this is used to sign the deployment. As always, be very careful with keeping public keys secure. Do NOT use the public key of the account that actually owns the land tokens, as that would have very big risks. Instead, delegate operator rights to a disposable wallet that owns no valuable tokens. If this private key is ever leaked somehow, you can easily revoke those operator rights from the account and set up a new wallet.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-limitations/

<title>Scene limitations | Decentraland Documentation</title>

<strong>Scene limitations</strong>

<h1>Scene limitations</h1>

<p>In order to improve performance in the metaverse, we have established a set of limits that every scene must follow. If a

scene exceeds these limitations, then the parcel won’t be loaded and the preview will display an error message.</p>

<p>For a straight-forward reference of what limitations you’ll have for a specific number of parcels, check the following table:</p>

<h2>Scene limitation rules</h2>

<p>Below are the maximum number of elements that a scene is allowed to render at the same time:</p>

<em>n</em>

<p>represents the number of parcels that a scene occupies.</p>

<strong>Triangles:</strong>

<code>n x 10000</code>

<p>Total amount of triangles for all the models in the scene.</p>

<strong>Entities:</strong>

<code>n x 200</code>

<p>Amount of entities in the scene.</p>

<strong>Bodies:</strong>

<code>n x 300</code>

<p>Amount of meshes in the scene.</p>

<strong>Materials:</strong>

<code>log2(n+1) x 20</code>

<p>Amount of materials in the scene. It includes materials imported as part of models.</p>

<strong>Textures:</strong>

<code>log2(n+1) x 10</code>

<p>Amount of textures in the scene. It includes textures imported as part of models.</p>

<strong>Height:</strong>

<code>log2(n+1) x 20</code>

<p>Height in meters.</p>

<p>Important: Only entities that are currently being rendered in the scene are counted for these limits. If your scene switches between 3D models, what matters is the rendered models at any point in time, not the total sum. Player avatars and any items brought by a player from outside the scene don’t count for calculating these limits either.</p>

<strong>File size:</strong>

<code>15 MB per parcel - 300 MB max</code>

<p>Total size of the files uploaded to the content server. Includes 3D models and audio. Doesn’t include files that aren’t uploaded, such as node.js packages.</p>

<strong>File count:</strong>

<code>200 files per parcel</code>

<p>Total count of the files uploaded. Includes 3D models and audio. Doesn’t include files that aren’t uploaded, such as node.js packages.</p>

<strong>Max file size</strong>

<code>50 MB per file</code>

<p>No individual file of any type in the scene can exceed 50 MB, no matter how many parcels the scene has.</p>

<h2>Optimizing</h2>

<p>See</p>

<p>for tips about how you can keep your scene below these limits and make it run smoother for players.</p>

<h2>Scene boundaries</h2>

<p>When running a preview, any content that is located outside the parcel boundaries is highlighted in red when rendered. If any content is outside these boundaries, you won’t be allowed to deploy this scene to Decentraland.</p>

<p>If the tip of a large object leaves the boundaries, this object is considered out of bounds too.</p>

<p>A single parcel scene measures 16 meters x 16 meters. If the scene has multiple parcels, the dimensions vary depending on the arrangement of the parcels.</p>

<p>It’s possible to position entities underground, to either hide them or to have only a portion of them emerge. A scene can’t have tunnels that go below the default ground height, players can’t travel below the</p>

<code>y = 0</code>

<p>height.</p>

<h2>Shader limitations</h2>

<p>3D models used in decentraland must use supported shaders and materials. See</p>

<p>for a list of supported shaders.</p>

<h2>Lighting</h2>

<p>The scene’s lighting conditions can’t be changed from the default setting.</p>

<h2>Texture size constraints</h2>

<p>Texture sizes must use width and height numbers (in pixels) that match the following numbers:</p>

<code>1, 2, 4, 8, 16, 32, 64, 128, 256, 512</code>

<p>This sequence is made up of powers of two:</p>

<code>f(x) = 2 ^ x</code>

<p>. 512 is the maximum number we allow for a texture size. This is a fairly common requirement among other rendering engines, it’s there due internal optimizations of the graphics processors.</p>

<p>The width and height don’t need to have the same number, but they both need to belong to this sequence.</p>

<strong>The recommended size for textures is 512x512</strong>

<p>, we have found this to be the optimal size to be transported through domestic networks and to provide reasonable loading/quality experiences.</p>

<p>Examples of other valid sizes:</p>

<code>32x32

64x32

512x256

512x512</code>

<strong>📔 Note</strong>

<blockquote>: Although textures of arbitrary sizes sometimes work, they are also often rendered with bugs and are more unstable. We strongly advise that all your textures match these sizes.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-limitations/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/performance-optimization/

<title>Performance optimization | Decentraland Documentation</title>

<strong>Performance optimization</strong>

<h1>Performance optimization</h1>

<p>There are several aspects you can optimize in your scenes to ensure the best possible experience for players who visit them. This document covers some best practices that can make a big difference in how fast your scene loads and how smoothly it runs for players that are on it or on neighboring scenes.</p>

<p>Keep in mind that many players may be visiting Decentraland using hardware that is not built for gaming, and via the browser, which limits how much of the hardware’s processing power is available to use. The experience of visiting your scene should be smooth for everyone.</p>

<p>The Decentraland explorer enforces many optimizations at engine level. These optimizations make a big difference, but the challenge of rendering multiple user-generated experiences simultaneously in a browser is a big one. We need your help to make things run smoothly.</p>

<h2>Timing</h2>

<h4>Video playing</h4>

<p>Playing videos is one of the most expensive things for the engine to handle. If your scene includes videos, make sure that only</p>

<em>ONE</em>

<p>VideoTexture is in use at a time. You can have dozens of planes sharing the same VideoTexture without significant impact on performance, but as soon as you add a second VideoTexture, its effects on framerate become very noticeable.</p>

<p>You should also avoid having videos playing in regions where they can’t be seen. For example, if you have a screen indoors, toggle the video using a trigger area based on when the player walks in and out.</p>

<strong>💡 Tip</strong>

<blockquote>: A trick several scenes have used is to stream a single video with multiple regions that are mapped differently to different planes. Each video screen uses</blockquote>

<blockquote>to only show a distinct part of the VideoTexture. Thanks to this, it can appear that there are separate videos playing without the cost of multiple VideoTextures.</blockquote>

<strong>💡 Tip</strong>

<blockquote>: When players are standing outside your scene, VideoTextures are not updated on every frame. This helps reduce the impact for surrounding scenes. It’s nevertheless ideal only turn on the playing of any videos when players</blockquote>

<blockquote>.</blockquote>

<h4>Lazy loading</h4>

<p>If your scene is large, or has indoor areas that are not always visible, you can choose to not load the entire set of entities from the very start. Instead, load the content by region as the player visits different parts of the scene. This can significantly reduce the load time of the scene, and also the amount of textures and 3D content that the engine needs to handle on every frame.</p>

<p>For example, the main building of a museum could load from the start, but the paintings on each floor only load for each player as they visit each floor.</p>

<p>See</p>

<p>for how that might work.</p>

<p>For the best result in terms of avoiding hiccups, hide entities by switching their shape’s</p>

<code>visible</code>

<p>property to false. With this approach, you add them to the engine when creating them, but you simply don’t make their models visible.</p>

<p>An alternative is to not add the entities to the engine until needed. This may result in some hiccups when the entities appear for the first time, and they might also take a couple of seconds to become visible. The advantage of this approach is that it’s a valid way to get around the</p>

<p>. Keep in mind that the scene limitations count is for the content that is being rendered in the scene at any given time, not for the total content that could be rendered. Loading and unloading parts of the scene should allow you to work around those limitations.</p>

<strong>📔 Note</strong>

<blockquote>: Entities that are not visible but are added to the engine do count towards the scene limitations.</blockquote>

<p>You can also toggle animations on or off for entities that are far or occluded. For example, for an NPC that plays a very subtle idle animation, you could make it only play that animation when the player is at less than 20 meters away. Use a trigger area around the NPC and toggle its animations on or off accordingly.</p>

<strong>💡 Tip</strong>

<blockquote>: When an entity is far away and small enough, it’s culled by the engine. This culling helps at a drawcall level, removing entities from the engine is always better. This culling also doesn’t take occlusion by other entities into account, so entities that are not so small but hidden by a wall are still rendered.</blockquote>

<h4>Async blocks</h4>

<p>Blocks of</p>

<p>are processed in a separate thread from the rest of the scene, to prevent blocking the progress of everything else.</p>

<p>Any processes that rely on responses from asynchronous services, such as</p>

<code>getPlayerData()</code>

<p>or</p>

<code>getRealm()</code>

<p>should always run in async blocks, as they otherwise block the rest of the scene’s loading while waiting for a response. The same applies to any calls to third party servers.</p>

<p>Note that the scene will be considered fully loaded when everything that isn’t async is done. Async processes might still be running when the player enters the scene. Avoid situations where an async process results in the loading of an entity that could potentially get the player stuck inside of its geometry.</p>

<h4>Rely on Events</h4>

<p>Try to make the scene’s logic rely on listening to</p>

<p>as much as possible, instead of running checks every frame.</p>

<p>The</p>

<code>update()</code>

<p>function in a</p>

<p>runs on every frame, 30 times per second (ideally). Avoid doing recurring checks if you can instead subscribe to an event.</p>

<p>For example, instead of constantly checking the player’s wearables, you can subscribe to the</p>

<code>onProfileChanged</code>

<p>event, and check the player’s wearables only when they’ve changed.</p>

<p>If you must use a system, avoid doing checks or adjustments on every single frame. You can include a timer as part of the update function and only run the check once per every full second, or whatever period makes sense.</p>

<h2>Optimize 3D models</h2>

<p>There are several ways in which your 3D models can be optimized to be lighter.</p>

<p>When possible, share textures across 3D models. A good practice is to use a single texture as an atlas map, shared across all models in the scene. It’s better to have 1 large shared texture of 1024x1024 pixels instead of several small ones.</p>

<p>Note: Avoid using the same image file for both the albedo texture and the normal map or the emissive map of a material. Use separate files, even if identical. Assigning a same image file to different types of texture properties may introduce unwanted visual artifacts when compressed to asset bundles.</p>

<em>.glb</em>

<p>is a compressed format, it will always weigh less than a</p>

<em>.gltf</em>

<p>. On the other hand, with</p>

<em>.gltf</em>

<p>it’s easy to share texture images by exporting textures as a separate file. You can have the best of both worlds by using the</p>

<p>, that allows you to have</p>

<em>.glb</em>

<p>models with external texture files.</p>

<p>Avoid using blended transparencies. Blended transparencies have to bypass quite a few of the rendering optimizations. If possible, favor opaque or alpha tested geometry.</p>

<p>Avoid skinned meshes. They can drag down the performance significantly.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more on 3D model best practices in the [3D Modeling Section](/creator/3d-modeling/3d-models</blockquote>

<h4>Asset Bundle conversion</h4>

<p>About once a day, the Decentraland content servers run a process to compress every</p>

<em>.gltf</em>

<p>and</p>

<em>.glb</em>

<p>model in every newly deployed scene to asset bundle format. This format is</p>

<em>significantly</em>

<p>lighter, making scenes a lot faster to load and smoother to run on the browser.</p>

<strong>💡 Tip</strong>

<blockquote>: When planning an event in Decentraland, make sure you deploy your scene a day in advance, so that the models are all converted to asset bundles by then. If you don’t want to spoil the surprize before the event, you can deploy a version of your scene that includes all the final 3D models in the project folder, but where these are not visible or where their size is set to 0.</blockquote>

<strong>📔 Note</strong>

<blockquote>: If you make</blockquote>

<em>any</em>

<blockquote>change to a 3D model file, even if just a name change, it will be considered a new file, and must be converted to asset bundle format again.</blockquote>

<h2>Connectivity</h2>

<p>If your scene connects to any 3rd party servers or uses the</p>

<p>to send messages between players, there are also some things you might want to keep in mind.</p>

<li>Your scene should only have one active WebSockets connection at a time.</li>

<li>HTTP calls are funneled by the engine so that only one is handled at a time. Any additional requests are queued internally and must wait till other requests are completed. This queuing process is handled automatically, you don’t need to do anything.</li>

<li>When using the</li>

<li>to send messages between players, be mindful that all messages are sent to all other players in the server island. Avoid situations where an incoming message directly results in sending another message, as the number of messages can quickly grow exponentially when there’s a crowd in the scene.</li>

<h2>Scene UI</h2>

<p>Scene UIs can become costly to render when they are made up of many individual elements. Keep in mind that each UI element requires a separate drawcall on the engine.</p>

<strong>💡 Tip</strong>

<blockquote>: Try to merge multiple elements into one single image. For example if you have a menu with multiple text elements, it’s ideal to have the text from the tiles and any additional images baked into the background image. That saves the engine from doing one additional drawcall per frame for each text element.</blockquote>

<p>Avoid making adjustments to the UI on every frame, those are especially costly and can end up getting queued. For example, if there’s a health bar in your UI that should shrink over period of time, players would probably not notice a difference between if it updates at 10 FPS instead of at 30 FPS (on every frame). The system that updates this bar can use a brief timer that counts 100 milliseconds, and only affect the UI when this timer reaches 0.</p>

<p>Avoid having many hidden UI elements, these also have an effect on performance even if not being rendered. When possible, try to create UI components on demand.</p>

<h2>Monitor Performance</h2>

<p>The best metric to know how well a scene is performing is the FPS (Frames Per Second). In preview, you can see the current scene FPS in the debug panel. You should aim to always have 30 FPS or more.</p>

<p>In the deployed scene, you can toggle the panel that shows these metrics by writing</p>

<code>/showfps</code>

<p>into the chat window.</p>

<p>One of the main bottlenecks in a scene’s performance is usually the sending of messages between the scene’s code and the engine.</p>

<p>When you run a scene in preview, note that on the top-right corner it says “Y = Toggle Panel”. Hit Y on the keyboard to open a panel with some useful information that gets updated in real time.</p>

<p>As you interact with things that involve messages between the SDK and the engine, you’ll notice the ‘Processed Messages’ number grows. You should closely watch the ‘Pending on Queue’ number, it should always be 0 or close to 0. This tells you how many of these messages didn’t get to be processed, and got pushed to a queue. If the ‘Pending on Queue’ count starts to grow, then you’ve entered the danger zone and should think about doing more optimizations to your scene.</p>

<strong>📔 Note</strong>

<blockquote>: Don’t keep the panel open while you’re not using it, since it has a negative impact on performance.</blockquote>

<p>Keep in mind that the performance you experience in preview may differ from that in production:</p>

<li>Surrounding neighboring scenes might have a negative impact</li>

<li>The compression of the scenes’ 3D models into asset bundles can have a positive impact</li>

<li>Some players visiting your scene may be running on less powerful hardware</li>

<p>It’s always a good practice to try deploying your scene first to the</p>

<p>to do some more thorough testing.</p>

<p>Always ask players for feedback. Never take for granted that how you experience the scene is the same for everyone else.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/performance-optimization/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/materials/#using-textures

<title>Materials via code | Decentraland Documentation</title>

<strong>Materials via code</strong>

<h1>Materials via code</h1>

<h2>Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by adding a</p>

<code>Material</code>

<p>component. This component has several fields that allow you to configure the properties of the material, add a texture, etc.</p>

<p>You can’t add material components to</p>

<em>glTF</em>

<p>models.</p>

<em>glTF</em>

<p>models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See</p>

<p>for more details.</p>

<p>There are different types of supported materials:</p>

<li>PBR (Physically Based Rendering): The most common kind of material in Decentraland. It supports plain colors or textures, and different properties like metallic, emissive, transparency, etc. Read more about</li>

<li>.</li>

<li>Basic materials: They don’t respond to lights and shadows, which makes them ideal for displaying billboard images.</li>

<h2>Add a material</h2>

<p>The following example creates a PBR material and sets some of its fields to give it a red color and metallic properties. This material is added to an entity that also has a box shape, so it will color the box with this material.</p>

<p>To change the material of an entity that already has a</p>

<code>Material</code>

<p>component, run</p>

<code>Material.setPbrMaterial()</code>

<p>or any of the other helper functions and it will overwrite the original material. There’s no need to remove the original</p>

<code>Material</code>

<p>or to use the advanced syntax.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>Material</code>

<p>component must be imported via</p>

<code>import { Material } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Material colors</h2>

<p>Give a material a plain color. In a PBR Material, you set the</p>

<code>albedoColor</code>

<p>field. Albedo colors respond to light and can include shades on them.</p>

<p>Color values are of type</p>

<code>Color4</code>

<p>, composed of</p>

<em>r</em>

<p>,</p>

<em>g</em>

<p>and</p>

<em>b</em>

<p>values (red, green, and blue). Each of these takes values between 0 and 1. By setting different values for these, you can compose any visible color. For black, set all three to 0. For white, set all to 1.</p>

<strong>📔 Note</strong>

<blockquote>: If you set any color in</blockquote>

<code>albedoColor</code>

<blockquote>to a value higher than</blockquote>

<em>1</em>

<blockquote>, it will appear as</blockquote>

<em>emissive</em>

<blockquote>, with more intensity the higher the value. So for example,</blockquote>

<code>{r: 15, g: 0, b: 0}</code>

<blockquote>produces a very bright red glow.</blockquote>

<p>See</p>

<p>for more details on how to set colors.</p>

<p>You can also edit the following fields in a PBR Material to fine-tune how its color is perceived:</p>

<em>emissiveColor</em>

<li>: The color emitted from the material.</li>

<em>reflectivityColor</em>

<li>: AKA</li>

<em>Specular Color</em>

<li>in other nomenclature.</li>

<p>To create a plain color material that is not affected by light and shadows in the environment, create a basic material instead of a PBR material.</p>

<h2>Using textures</h2>

<p>Set an image file as a texture on a material by setting the</p>

<code>texture</code>

<p>parameter.</p>

<p>In the example above, the image for the material is located in a</p>

<code>materials</code>

<p>folder, which is located at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<blockquote>: We recommend keeping your texture image files separate in a</blockquote>

<code>/materials</code>

<blockquote>folder inside your scene.</blockquote>

<p>While creating a texture, you can also pass additional parameters:</p>

<code>filterMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered. This takes a value from the</li>

<code>TextureFilterMode</code>

<li>enum. See</li>

<li>.</li>

<code>wrapMode</code>

<li>: Determines how a texture is tiled onto an object. This takes a value from the</li>

<code>TextureWrapMode</code>

<li>enum. See</li>

<li>.</li>

<p>To create a texture that is not affected by light and shadows in the environment, create a basic material instead of a PBR material.</p>

<h4>Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<p>The URL must start with</p>

<code>https</code>

<p>,</p>

<code>http</code>

<p>URLs aren’t supported. The site where the image is hosted should also have</p>

<p>that permit externally accessing it.</p>

<h4>Multi-layered textures</h4>

<p>You can use several image files as layers to compose more realistic textures, for example including a</p>

<code>bumpTexture</code>

<p>and a</p>

<code>emissiveTexture</code>

<p>.</p>

<h4>Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure</p>

<em>uv</em>

<p>properties on the</p>

<p>.</p>

<p>You set</p>

<em>u</em>

<p>and</p>

<em>v</em>

<p>coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more</p>

<em>uv</em>

<p>coordinates need to be defined on the texture, a plane for example needs to have 8</p>

<em>uv</em>

<p>points defined, 4 for each of its two faces.</p>

<p>The following example includes a function that simplifies the setting of uvs. The</p>

<code>setUVs</code>

<p>function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<p>For setting the UVs for a</p>

<code>box</code>

<p>mesh shape, the same structure applies. Each of the 6 faces of the cube takes 4 pairs of coordinates, one for each corner. All of these 48 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The</p>

<code>texture</code>

<p>object lets you configure the wrapping mode by setting the</p>

<code>wrapMode</code>

<p>field. This property takes its values from the</p>

<code>TextureWrapMode</code>

<p>enum, which allows for the following values:</p>

<code>TextureWrapMode.TWM_CLAMP</code>

<li>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>

<code>TextureWrapMode.TWM_REPEAT</code>

<li>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>

<code>TextureWrapMode.TWM_MIRROR</code>

<li>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>

<p>The example above sets the wrapping mode to</p>

<code>TWM_MIRROR</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Uv properties are currently only available on</blockquote>

<code>plane</code>

<blockquote>and on</blockquote>

<code>box</code>

<blockquote>shapes.</blockquote>

<h4>Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various</p>

<p>algorithms that exist to compensate for this in different ways.</p>

<p>The</p>

<code>Material</code>

<p>object uses the</p>

<em>bilinear</em>

<p>algorithm by default, but it lets you configure it to use the</p>

<em>nearest neighbor</em>

<p>or</p>

<em>trilinear</em>

<p>algorithms instead by setting the</p>

<code>samplingMode</code>

<p>property of the texture. This takes a value from the</p>

<code>TextureFilterMode</code>

<p>enum:</p>

<code>TextureFilterMode.TFM_POINT</code>

<li>: Uses a “nearest neighbor” algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</li>

<code>TextureFilterMode.TFM_BILINEAR</code>

<li>: Uses a bilinear algorithm to estimate the color of each pixel.</li>

<code>TextureFilterMode.TFM_TRILINEAR</code>

<li>: Uses a trilinear algorithm to estimate the color of each pixel.</li>

<h2>Avatar Portraits</h2>

<p>To display a thumbnail image of any player, use</p>

<code>Material.Texture.Avatar</code>

<p>when setting the texture of your material, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<p>You can fetch the portrait of any Decentraland player, even if they’re not currently connected, and even if they don’t have a claimed Decentraland name.</p>

<p>The following properties are supported within the object you pass as an argument:</p>

<code>userId</code>

<li>: ID of the user who’s profile you want to display</li>

<code>filterMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered. This takes a value from the</li>

<code>TextureFilterMode</code>

<li>enum. See</li>

<li>.</li>

<code>wrapMode</code>

<li>: Determines how a texture is tiled onto an object. This takes a value from the</li>

<code>TextureWrapMode</code>

<li>enum. See</li>

<li>.</li>

<h2>Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a</p>

<code>Color4</code>

<p>, and set the 4th value to something between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. The closer to</p>

<em>1</em>

<p>, the more opaque it will be.</p>

<p>To make a material with a texture only transparent in regions of the texture:</p>

<p>Set an image in</p>

<code>alphaTexture</code>

<p>.</p>

<p>Note: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</p>

<p>Optionally set the texture normally, and set the</p>

<code>transparencyMode</code>

<p>to field.</p>

<p>The</p>

<code>transparencyMode</code>

<p>takes its value from the</p>

<code>MaterialTransparencyMode</code>

<p>enum, that can have the following values:</p>

<code>MaterialTransparencyMode.MTM_OPAQUE</code>

<li>: No transparency at all</li>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST</code>

<li>: Each pixel is either completely opaque or completely transparent, based on a threshold.</li>

<code>MaterialTransparencyMode.MTM_ALPHA_BLEND</code>

<li>: Intermediate values are possible based on the value of each pixel.</li>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND</code>

<li>: Uses a combination of both methods.</li>

<code>MaterialTransparencyMode.MTM_AUTO</code>

<li>: Determines the method based on the provided texture.</li>

<p>If you set the</p>

<code>transparencyMode</code>

<p>to</p>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST</code>

<p>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the</p>

<code>alphaTest</code>

<p>property between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. By default its value is</p>

<em>0.5</em>

<p>.</p>

<h2>Advanced syntax</h2>

<p>The complete syntax for creating a</p>

<code>Materials</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets Materials components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters. In the example above, the</p>

<code>box</code>

<p>type supports a</p>

<code>uvs</code>

<p>field.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>texture</code>

<code>avatarTexture</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

<p>To add a</p>

<code>Material</code>

<p>component to an entity that potentially already has an instance of this component, use</p>

<code>Material.createOrReplace()</code>

<p>. The helper functions like</p>

<code>MeshRenderer.setPbrMaterial()</code>

<p>handle overwriting existing instances of the component, but running</p>

<code>Material.create()</code>

<p>on an entity that already has this component returns an error.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/materials/#using-textures

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/shape-components/

<title>Shape components | Decentraland Documentation</title>

<strong>Shape components</strong>

<h1>Shape components</h1>

<p>Three dimensional scenes in Decentraland are based on the</p>

<p>model, where everything in a scene is an</p>

<em>entity</em>

<p>, and each entity can include</p>

<em>components</em>

<p>that shape its characteristics and functionality.</p>

<p>The rendered shape of an entity is determined by what component it uses.</p>

<h2>Primitive shapes</h2>

<p>Several basic shapes, often called</p>

<em>primitives</em>

<p>, can be added to an entity by giving the entity a</p>

<code>MeshRenderer</code>

<p>component.</p>

<p>The following shapes are available. Several shapes include optional additional fields, specific to that shape.</p>

<strong>box</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setBox()</code>

<p>, passing the entity. Pass</p>

<code>uvs</code>

<p>as an additional optional field, to map texture alignment. See</p>

<p>for more details.</p>

<strong>plane</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setPlane()</code>

<p>, passing the entity. Pass</p>

<code>uvs</code>

<p>as an additional optional field, to map texture alignment. See</p>

<p>for more details.</p>

<strong>sphere</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setSphere()</code>

<p>, passing the entity.</p>

<strong>cylinder</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setCylinder()</code>

<p>, passing the entity. Pass</p>

<code>radiusTop</code>

<p>and</p>

<code>radiusBottom</code>

<p>as additional optional fields, to modify the cylinder.</p>

<p>TIP: Set either</p>

<code>radiusTop</code>

<p>or</p>

<code>radiusBottom</code>

<p>to 0 to make a cone.</p>

<p>The following example creates a cube:</p>

<p>The following example creates a cylinder with a</p>

<code>radiusTop</code>

<p>of 0, which produces a cone:</p>

<p>Primitive shapes don’t include materials. To give it a color or a texture, you must assign a</p>

<p>to the same entity.</p>

<p>To make a primitive clickable, or to prevent players from walking through it, you must give the entity a</p>

<em>collider</em>

<p>via a</p>

<p>component.</p>

<p>To change the shape of an entity that already has a</p>

<code>MeshRenderer</code>

<p>component, run</p>

<code>MeshRenderer.setBox()</code>

<p>or any of the other helper functions and it will overwrite the original shape. There’s no need to remove the original</p>

<code>MeshRenderer</code>

<p>or to use the advanced syntax.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>MeshRenderer</code>

<p>component must be imported via</p>

<code>import { MeshRenderer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>3D models</h2>

<p>For more complex shapes, you can build a 3D model in an external tool like Blender and then import them in</p>

<em>.glTF</em>

<p>or</p>

<em>.glb</em>

<p>(binary</p>

<em>.glTF</em>

<p>).</p>

<p>(GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies.</p>

<p>To add an external model into a scene, add a</p>

<code>GltfContainer</code>

<p>component to an entity and set its</p>

<code>src</code>

<p>to the path of the glTF file containing the model.</p>

<p>The</p>

<code>src</code>

<p>field is required, you must give it a value when constructing the component. In the example above, the model is located in a</p>

<code>models</code>

<p>folder at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<blockquote>: We recommend keeping your models separate in a</blockquote>

<code>/models</code>

<blockquote>folder inside your scene.</blockquote>

<p>glTF models can include their own embedded textures, materials, colliders and animations. See</p>

<p>for more information on this.</p>

<p>To prevent players from walking through a 3D model, or to make a model clickable, you must have a</p>

<p>, which may be embedded in the model or provided via a</p>

<code>MeshCollider</code>

<p>component.</p>

<p>Keep in mind that all models, their shaders and their textures must be within the parameters of the</p>

<p>.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>GltfContainer</code>

<p>component must be imported via</p>

<code>import { GltfContainer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h3>Free libraries for 3D models</h3>

<p>Instead of building your own 3D models, you can also download them from several free or paid libraries.</p>

<p>To get you started, below is a list of libraries that have free or relatively inexpensive content:</p>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<strong>📔 Note</strong>

<blockquote>: Pay attention to the license restrictions that the content you download has.</blockquote>

<p>Note that in several of these sites, you can choose what format to download the model in. Always choose</p>

<em>.glTF</em>

<p>format if available. If not available, you must convert them to</p>

<em>glTF</em>

<p>before you can use them in a scene. For that, we recommend importing them into Blender and exporting as</p>

<em>.glTF</em>

<p>from there.</p>

<h3>Optimize 3D models</h3>

<p>To ensure that 3D models in your scene load faster and take up less memory, follow these best practices:</p>

<li>Save your models in</li>

<em>.glb</em>

<li>format, which is a lighter version of</li>

<em>.gltf</em>

<li>.</li>

<li>If you have multiple models that share the same textures, export your models with textures in a separate file. That way multiple models can refer to a single texture file that only needs to be loaded once.</li>

<li>If your scene has entities that appear and disappear, it might be a good idea to pool these entities and keep them underground, or at a scale of 0. This will help them appear faster, the trade-off is that they will occupy memory when not in use. See</li>

<h2>Stretching a shape</h2>

<p>Primitive shapes and 3D models have default dimensions that you can alter by changing the scale in the entity’s</p>

<code>Transform</code>

<p>component.</p>

<h2>Make invisible</h2>

<p>You can make an entity invisible by giving an entity a</p>

<code>VisibilityComponent</code>

<p>, with its</p>

<code>visible</code>

<p>property set to</p>

<em>false</em>

<p>.</p>

<p>The</p>

<code>VisibilityComponent</code>

<p>works the same for entities with primitive shapes and with</p>

<code>GLTFContainer</code>

<p>components.</p>

<p>If an entity is invisible, its collider can block a player’s path and/or prevent clicking entities that are behind it, depending on the collision layers assigned to the collider.</p>

<h2>Loading state</h2>

<p>If a 3D model is fairly large, it might take some noticeable time to be rendered, this time may vary depending on the player’s hardware and many other factors. Sometimes you need to make sure that a model finished loading before you perform another action. For example, if you want to teleport the player to a platform up in the sky, you need to first make sure the platform is fully rendered before moving the player there, or else the player might fall right through the platform.</p>

<p>To check if a 3D model is finished being rendered, check the entity’s</p>

<code>GltfContainerLoadingState</code>

<p>component. This component is meant to be read only, and exists on any entity that also has a</p>

<code>GltfContainer</code>

<p>component.</p>

<p>This component has a single property named</p>

<code>currentState</code>

<p>, holding a value from the</p>

<code>LoadingState</code>

<p>enum.</p>

<p>The following example uses a system to periodically check the loading state of an entity’s 3D model. If the state is</p>

<code>LoadingState.FINISHED</code>

<p>, you might want to perform custom logic there and end the execution of the system.</p>

<h2>Advanced syntax</h2>

<p>The complete syntax for creating a</p>

<code>MeshRenderer</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets MeshRenderer components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters. In the example above, the</p>

<code>box</code>

<p>type supports a</p>

<code>uvs</code>

<p>field.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>box</code>

<code>plane</code>

<code>sphere</code>

<code>cylinder</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

<p>To add a</p>

<code>MeshRenderer</code>

<p>component to an entity that potentially already has an instance of this component, use</p>

<code>MeshRenderer.createOrReplace()</code>

<p>. The helper functions like</p>

<code>MeshRenderer.setBox()</code>

<p>handle overwriting existing instances of the component, but running</p>

<code>MeshRenderer.create()</code>

<p>on an entity that already has this component returns an error.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/shape-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/colliders/

<title>Colliders | Decentraland Documentation</title>

<strong>Colliders</strong>

<h1>Colliders</h1>

<p>Entities that have colliders occupy space and block a player’s path, entities without colliders can be walked through by a player`s avatar.</p>

<p>Colliders are also needed to make an entity clickable. Button events are based on the collider shape of an entity, not on its visible shape.</p>

<p>There are separate collision layers for interacting with either the player’s physics, or with pointer events, colliders can be configured to only interact with one or the other. They can also be configured to interact with custom layers, that can be used with</p>

<p>to handle whatever makes sense to the scene.</p>

<strong>📔 Note</strong>

<blockquote>: Colliders don’t affect how other entities interact with each other, entities can always overlap. Collision settings only affect how the entity interacts with the player’s avatar and button events. Decentraland doesn’t have a native physics engine, so if you want entities to fall, crash or bounce, you must code this behavior into the scene, or import a library to handle that.</blockquote>

<h2>Colliders on primitive shapes</h2>

<p>Entities that have a</p>

<code>MeshRenderer</code>

<p>component to give them a</p>

<p>(boxes, spheres, planes etc) don’t have colliders by default. You must also give the entity a</p>

<code>MeshCollider</code>

<p>component.</p>

<p>The following collider shapes are available. Several shapes include optional additional fields, specific to that shape.</p>

<strong>box</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setBox()</code>

<p>, passing the entity.</p>

<strong>plane</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setPlane()</code>

<p>, passing the entity.</p>

<strong>sphere</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setSphere()</code>

<p>, passing the entity.</p>

<strong>cylinder</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setCylinder()</code>

<p>, passing the entity. Pass</p>

<code>radiusTop</code>

<p>and</p>

<code>radiusBottom</code>

<p>as additional optional fields, to modify the cylinder.</p>

<p>TIP: Set either</p>

<code>radiusTop</code>

<p>or</p>

<code>radiusBottom</code>

<p>to 0 to make a cone.</p>

<p>This example defines a box entity that can’t be walked through.</p>

<p>The shape used by the</p>

<code>MeshCollider</code>

<p>doesn’t need to necessarily match the one used by the</p>

<code>MeshRenderer</code>

<p>. You can also add a</p>

<code>MeshCollider</code>

<p>to an entity that has a 3D model from a</p>

<code>GLTFContainer</code>

<p>component, or to an entity that has no visible shape at all.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>MeshCollider</code>

<p>component and</p>

<code>ColliderLayer</code>

<p>must be imported via</p>

<code>import { MeshCollider, ColliderLayer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Colliders on 3D models</h2>

<p>3D models can be assigned colliders on two different geometry levels:</p>

<code>visibleMeshesCollisionMask</code>

<li>: Refers to the visible geometry of the model. By default this geometry has no colliders.</li>

<code>invisibleMeshesCollisionMask</code>

<li>: refers to the collider meshes, whose name end in</li>

<code>_collider</code>

<li>. By default, this geometry is treated as a collider for both physics and pointer events.</li>

<p>Any mesh embedded as part of a 3D model who’s name ends in</p>

<code>_collider</code>

<p>is treated as part of the</p>

<code>invisibleMeshesCollisionMask</code>

<p>layer, and interpreted as a collider by default.</p>

<p>Defining collider geometry as a separate invisible layer allows for much greater control and is a lot less demanding on the system than using the visible geometry, as the collision object is usually a lot simpler (with less vertices) than the original model.</p>

<p>If a model doesn’t have any collider geometry, and you want to make it affect the physics or the pointer events systems, you can either:</p>

<li>Assign collision layers directly to the visible geometry, via the</li>

<code>visibleMeshesCollisionMask</code>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: If the visible geometry of the object has many vertices, note that this may have more of a performance cost.</blockquote>

<li>Give the entity a</li>

<code>MeshCollider</code>

<li>component, to give it a primitive shape collider.</li>

<li>Overlay an invisible entity that has a</li>

<code>MeshCollider</code>

<li>component.</li>

<li>Edit the model in an external tool like Blender to include a</li>

<em>collider mesh</em>

<li>. The collider must be named</li>

<em>x_collider</em>

<li>, where</li>

<em>x</em>

<li>is the name of the model. So for a model named</li>

<em>house</em>

<li>, the collider must be named</li>

<em>house_collider</em>

<li>.</li>

<p>You might also want to assign the pointer events collision layer to the</p>

<code>visibleMeshesCollisionMask</code>

<p>in case you want the hover hints and pointer events to respond more accurately to the contour of the entity. Note that this is more demanding on performance.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you don’t have the same layer (physics, pointer events or custom layers) assigned to both</blockquote>

<code>visibleMeshesCollisionMask</code>

<blockquote>and</blockquote>

<code>invisibleMeshesCollisionMask</code>

<blockquote>, as that would be a very inefficient use of resources. You can have different layers on each, such as physics on the invisible layer and pointer events on the visible layer.</blockquote>

<p>See</p>

<p>for more details on how to add collider invisible geometry to a 3D model.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>GltfContainer</code>

<p>component and</p>

<code>ColliderLayer</code>

<p>must be imported via</p>

<code>import { GltfContainer, ColliderLayer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h3>Animated models</h3>

<p>When setting colliders to use the visible geometry on a model that includes</p>

<p>, the animations aren’t followed by colliders. The collider meshes keep their original shape. If an animation involves deforming a meshe’s geometry, the collider meshes retain the un-animated shape while the animation plays.</p>

<p>When playing animations that involve moving full meshes without changing their shape, these changes are accurately reflected by colliders. For example if a platform moves as part of an animation, the platform´s collider does move with the animation.</p>

<h2>Collision layers</h2>

<p>The scene can handle separate collision layers, that have different behaviors.</p>

<p>You can configure a</p>

<code>MeshCollider</code>

<p>component or the</p>

<code>GltfContainer</code>

<p>component to only respond to one kind of interaction, or to several of them, or none. To do this, on the</p>

<code>MeshCollider</code>

<p>set the</p>

<code>collisionMask</code>

<p>property, and on</p>

<code>GltfContainer</code>

<p>set the</p>

<code>visibleMeshesCollisionMask</code>

<p>or</p>

<code>invisibleMeshesCollisionMask</code>

<p>properties to one or several of the following values:</p>

<code>ColliderLayer.CL_PHYSICS</code>

<li>: Only blocks player movement (and doesn’t affect pointer events)</li>

<code>ColliderLayer.CL_POINTER</code>

<li>: Responds only to pointer events (and doesn’t block the player movement)</li>

<code>ColliderLayer.CL_CUSTOM1</code>

<li>through to</li>

<code>CL_CUSTOM8</code>

<li>: Can be used together with raycasts, so that a ray only detects collisions with one specific layer.</li>

<code>ColliderLayer.CL_NONE</code>

<li>: Doesn’t respond to collisions of any kind.</li>

<p>A single collision mask can respond to multiple collision layers. Use the</p>

<code>|</code>

<p>character as an</p>

<em>or</em>

<p>, to include as many layers as you need. The default value on a MeshCollider is</p>

<code>ColliderLayer.CL_PHYSICS | ColliderLayer.CL_POINTER</code>

<p>.</p>

<p>You can use the 8 different custom layers for whatever suits your scene best, for example one could be used for NPC line-of-sight calculations, whilst another for estimating trajectories of falling objects. Using different layers for different systems allows you to use less resources, as in each case you’ll only be checking collisions with the relevant entities.</p>

<p>See</p>

<p>for more on how to use custom collision layers.</p>

<h3>Pointer blocking</h3>

<p>Only shapes that have colliders can be activated with</p>

<p>. An entity also needs to have a collider to block pointer events from going through it and prevent hitting entities behind it. So for example, a player can’t pick something up that is locked inside a chest, if the chest has colliders around it. The player’s pointer events are only affected by meshes that are active in the</p>

<code>ColliderLayer.CL_POINTER</code>

<p>layer.</p>

<p>By default, a MeshCollider affects both the Physics and the Pointer layers, but you can change this value to only affect one, or neither, and to affect custom layers instead.</p>

<strong>📔 Note</strong>

<blockquote>: Besides colliders, an entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component to respond to pointer events. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<p>By default, the visible geometry of a</p>

<code>GLTFContainer</code>

<p>isn’t mapped to any collision layers, but the invisible geometry affects both the Physics and the Pointer layers. You can change this value to only affect one, or neither, and to affect custom layers instead. You can also configure the visible geometry layer in the same way.</p>

<h2>Advanced MeshCollider Syntax</h2>

<p>The complete syntax for creating a</p>

<code>MeshCollider</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets MeshCollider components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>box</code>

<code>plane</code>

<code>sphere</code>

<code>cylinder</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/colliders/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/raycasting/

<title>Raycasting | Decentraland Documentation</title>

<strong>Raycasting</strong>

<h1>Raycasting</h1>

<p>Raycasting is a fundamental tool in game development. With raycasting, you can trace an imaginary line in space, and query if any entities are intersected by that line. This is useful for calculating lines of sight, trajectories of bullets, pathfinding algorithms and many other applications.</p>

<p>When a player pushes the pointer button, or the primary or secondary button, a ray is traced from the player’s position in the direction they are looking, see</p>

<p>for more details about this. This document covers how to trace an invisible ray from any arbitrary position and direction, independent of player actions, which you can use in many other scenarios.</p>

<p>Please note that raycasts only hit objects with colliders. So if you want to detect ray hits against a 3D model, either:</p>

<li>The model must contain</li>

<li>.</li>

<li>The</li>

<code>GLTFContainer</code>

<li>must be configured to use the</li>

<li>.</li>

<li>Add a</li>

<li>.</li>

<p>It’s also a good practice to assign custom</p>

<p>to 3D models, so that rays only need to calculate collisions against the relevant entities, instead of against everything that has a collider.</p>

<h2>Create a ray</h2>

<p>All rays have a point of origin and a direction. The point of origin is based on an entity’s position, taking the values on the entity’s Transform component. The direction of a ray can be defined in 4 different ways:</p>

<strong>local</strong>

<li>: A direction relative to the forward-facing direction of the entity, affected also by the transformation of any parent entities. This is useful to detect obstacles in front of vehicles honoring their heading.</li>

<strong>global</strong>

<li>: Ignores the entity’s rotation, and faces a direction as if the entity’s rotation was 0. This is useful to i.e. always point down.</li>

<strong>global target</strong>

<li>: Traces a line between the entity’s position and a target global position in the scene. It ignores the entity’s rotation. Useful for example to create tower defense games, each tower’s turret can point to a pin-pointed coordinate in space.</li>

<strong>target entity</strong>

<li>: Traces a line between the entity’s position and the position of a second target entity. It ignores the rotation of either entities.</li>

<p>The following code creates a raycast with a local direction:</p>

<p>Use the following functions to create raycasts by providing the direction in different ways:</p>

<code>raycastSystem.registerLocalDirectionRaycast()</code>

<li>: creates a raycast with a</li>

<strong>local</strong>

<li>direction. The</li>

<code>direction</code>

<li>field expects a</li>

<code>Vector3</code>

<li>that describes a vector relative to the entity and its rotation (e.g.</li>

<code>Vector3.Forward()</code>

<li>would end up using the entity’s transform forward vector)</li>

<code>raycastSystem.registerGlobalDirectionRaycast()</code>

<li>: creates a raycast with a</li>

<strong>global</strong>

<li>direction. The</li>

<code>direction</code>

<li>field expects a</li>

<code>Vector3</code>

<li>that describes the global direction.</li>

<code>raycastSystem.registerGlobalTargetRaycast()</code>

<li>: creates a raycast with a direction defined by a</li>

<strong>global target</strong>

<li>position. The</li>

<code>target</code>

<li>field expects a</li>

<code>Vector3</code>

<li>that describes a global position in the scene.</li>

<code>raycastSystem.registerTargetEntityRaycast()</code>

<li>: creates a raycast with a direction defined towards a</li>

<strong>target entity</strong>

<li>position. The</li>

<code>targetEntity</code>

<li>field expects a reference to an entity, this entity’s position will be used as the target of the ray.</li>

<p>The following optional fields are available when creating a ray with any of the above methods:</p>

<code>maxDistance</code>

<p>:</p>

<em>number</em>

<p>to set the length with which this ray will be traced. If not set, the default is 16 meters.</p>

<code>queryType</code>

<p>:</p>

<em>RaycastQueryType</em>

<p>enum value, to define if the ray will return all hit entities or just the first. The following options are available:</p>

<code>RaycastQueryType.RQT_HIT_FIRST</code>

<li>:</li>

<em>(default)</em>

<li>only returns the first hit entity, starting from the origin point.</li>

<code>RaycastQueryType.RQT_QUERY_ALL</code>

<li>: returns all hit entities, from the origin through to the max distance of the ray.</li>

<code>originOffset</code>

<p>: Instead of starting the raycast from the entity’s origin position, add an offset to start the query from a relative position. You can for example use a small offset to prevent the ray colliding against the entity’s own collider. If not set, the default is</p>

<code>Vector3.Zero()</code>

<p>.</p>

<code>collisionMask</code>

<p>: Only detect collisions with certain collision layers. Use this together with a custom collision layer, or to only detect the physics or pointer events layer. See</p>

<p>. If not set, the default layer used is</p>

<code>ColliderLayer.CL_PHYSICS</code>

<p>.</p>

<code>continuous</code>

<p>: If true, will keep running a raycast query on every frame. If false, the ray will only be used on the current frame. If not set, the default is false.</p>

<p>When setting the direction with a local or glocal direction, the</p>

<code>direction</code>

<p>field defaults to</p>

<code>Vector3.Forward()</code>

<p>.</p>

<p>When setting the direction with a global target, the</p>

<code>globalTarget</code>

<p>field defaults to</p>

<code>Vector3.Zero()</code>

<p>.</p>

<p>When setting the direction with an entity target, the</p>

<code>targetEntity</code>

<p>field defaults to the scene’s root entity, located at</p>

<code>Vector3.Zero()</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>continuous</code>

<blockquote>property should be used with caution, as running a raycast query on every frame can be very expensive for performance. When possible, use a system (or the</blockquote>

<code>interval</code>

<blockquote>function in the Utils library) to run raycast queries at a regular more sparse interval, see</blockquote>

<blockquote>.</blockquote>

<p>Below are examples using each of the four methods to determine the ray direction:</p>

<strong>📔 Note</strong>

<p>:</p>

<code>raycastSystem</code>

<p>,</p>

<code>RaycastQueryType</code>

<p>and</p>

<code>ColliderLayer</code>

<p>must be imported via</p>

<code>import { raycastSystem, RaycastQueryType, ColliderLayer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Raycast result</h2>

<p>The callback function that handles the raycast receives an object containing data about the ray itself, and any entities that were hit.</p>

<code>globalOrigin</code>

<li>: The position where the ray was originated, relative to the scene.</li>

<code>direction</code>

<li>: The global direction that the ray was pointing, as a</li>

<code>Vector3</code>

<li>.</li>

<code>hits</code>

<li>: An array with one object for each entity that was hit. If there were no hit entities, this array is empty. If the raycast used</li>

<code>RaycastQueryType.RQT_HIT_FIRST</code>

<li>, this array will only contain one object.</li>

<p>Each object in the</p>

<code>hits</code>

<p>array includes:</p>

<code>entityId</code>

<li>: Id number of the entity that was hit by the ray.</li>

<code>meshName</code>

<li>:</li>

<em>String</em>

<li>with the internal name of the specific mesh in the 3D model that was hit. This is useful when a 3D model is composed of multiple meshes.</li>

<code>position</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray intersected with the hit entity (relative to the scene)</li>

<code>length</code>

<li>: Length of the ray from its origin to the position where the hit against the entity occurred.</li>

<code>normalHit</code>

<li>:</li>

<em>Quaternion</em>

<li>for the angle of the normal of the hit in world space.</li>

<code>globalOrigin</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray originates (relative to the scene)</li>

<code>direction</code>

<li>: The global direction that the ray was pointing, as a</li>

<code>Vector3</code>

<li>.</li>

<p>The following example iterates over the entities that were hit:</p>

<strong>📔 Note</strong>

<p>: You can get a raycast result from hitting an entity on a different scene. This may be especially useful when creating portable experiences or smart wearables, that can react to the surroundings.</p>

<p>However, note that currently you can only obtain raycast responses when the collision is with conent in a scene done with SDK7. Older SDK6 scenes won’t return any hit result.</p>

<h2>Collision layers</h2>

<p>It’s a good practice to only check for collisions against entities that are relevant, to make the scene more performant. The</p>

<code>collisionMask</code>

<p>field allows to to list only specific collision layers, which can include the physics layer (that blocks player movement), the pointer layer (which is used for pointer events), and 8 custom layers that you can assign freely to whatever your needs are. See</p>

<p>. By default, all layers are detected.</p>

<p>By default, the</p>

<code>collisionMask</code>

<p>field is set to respond to both the layers</p>

<code>ColliderLayer.CL_POINTER</code>

<p>and</p>

<code>ColliderLayer.CL_PHYSICS</code>

<p>. You can change this value to list only one of those, or to include custom layers. Use the</p>

<code>|</code>

<p>separator to list multiple options.</p>

<h2>Recurrent raycasting</h2>

<p>When using the functions of the</p>

<code>raycastSystem</code>

<p>, the default behavior is to create a single ray, that will query for collisions once. As an alternative, you can set the</p>

<code>continuous</code>

<p>field to</p>

<em>true</em>

<p>to run a query and the callback function on every tick of the game loop.</p>

<p>The following example will keep running the raycast query from this point onwards</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>continuous</code>

<blockquote>property should be used with caution, as running a raycast query on every frame can be very expensive for performance.</blockquote>

<p>When not needed anymore, remove any recurrent raycasts. To do so, you must use</p>

<code>raycastSystem.removeRaycasterEntity</code>

<p>.</p>

<p>When possible, use a system (or the</p>

<code>interval</code>

<p>function in the Utils library) to run raycast queries at a regular more sparse interval, like just once a second, or every fifth of a second.</p>

<p>The example above runs a recurring raycast every 0.1 seconds. It uses a timer component and a system’s</p>

<code>dt</code>

<p>property to time these evenly. It also includes a cube that oscillates up and down, controlled by another system, to move in and out of the path of the ray.</p>

<strong>💡 Tip</strong>

<blockquote>: Use the</blockquote>

<code>interval</code>

<blockquote>function in the</blockquote>

<blockquote>for a simpler way to run a function at a fixed interval.</blockquote>

<h2>Raycasts via a system</h2>

<p>Another way to perform recurrent raycasts is to execute them from within the recurring function of a system. This allows you to have a lot more control about when and how these work. Instead of registering a callback function, you can perform a raycast query with</p>

<code>raycastSystem.registerRaycast</code>

<p>and then check the data returned by this operation, all within the function of the system.</p>

<p>Please note that since the raycast is executed in a system, the result will only be available the next tick, needing two runs of the system. One to register the raycast for the next frame, and the next frame process its result.</p>

<h2>Collide with the player</h2>

<p>You can’t directly hit the player’s avatar or those of other players with a ray, but what you can do as a workaround is position an invisible entity occupying the same space as a player using the</p>

<p>, and check collisions with that cube.</p>

<h2>Raycasts from the player</h2>

<p>To trace a ray from the player’s position in the direction faced by the camera, you can trace a ray using the camera or the avatar</p>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: For most cases, you might be better off using</blockquote>

<blockquote>instead of raycasts.</blockquote>

<p>The following example traces a ray from the player’s camera position forward, using the</p>

<code>engine.CameraEntity</code>

<p>entity.</p>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that in 3rd person the cursor could in the future not behave the same as in 1st person. It’s recommended to only use this if the player is in 1st person.</blockquote>

<h2>Advanced syntax</h2>

<h3>Create a raycast component</h3>

<p>A Raycast component describes the invisible ray that is used to query for intersecting entities. The ray is traced starting at the entity’s position, as defined by the Transform component and affected by that of any parent entities. The direction can be defined in various ways,</p>

<p>Rays are defined using the following data:</p>

<code>direction</code>

<li>: An object that contains a</li>

<code>$case</code>

<li>field to select the type of direction, and an additional field that will depend on this type, that determines this direction. The following are the accepted values for</li>

<code>$case</code>

<li>:</li>

<code>LOCAL_DIRECTION</code>

<li>: A direction relative to the forward-facing direction of the entity, affected also by the transformation of any parent entities. This is useful to detect obstacles in front of vehicles honoring their heading. The rotation is defined by the</li>

<code>localDirection</code>

<li>field, as a</li>

<code>Vector3</code>

<li>that describes a rotation.</li>

<code>GLOBAL_DIRECTION</code>

<li>: Ignores the entity’s rotation, and faces a direction as if the entity’s rotation was 0. This is useful to i.e. always point down. The rotation is defined by the</li>

<code>globalDirection</code>

<li>field, as a</li>

<code>Vector3</code>

<li>that describes a rotation.</li>

<code>GLOBAL_TARGET</code>

<li>: Traces a line between the entity’s position and a target global position in the scene. It ignores the entity’s rotation. Useful to create tower defense games, each tower’s turret can point to a pin-pointed coordinate in space. The target is defined by the</li>

<code>globalTarget</code>

<li>field, as a</li>

<code>Vector3</code>

<li>that describes the global position.</li>

<code>TARGET_ENTITY</code>

<li>: Traces a line between the entity’s position and the position of a second target entity. It ignores the rotation of either entities. The target is defined by the</li>

<code>targetEntity</code>

<li>field, holding a reference to the entity.</li>

<code>maxDistance</code>

<li>:</li>

<em>number</em>

<li>to set the length with which this ray will be traced.</li>

<code>queryType</code>

<li>:</li>

<em>RaycastQueryType</em>

<li>enum value, to define if the ray will return all hit entities or just the first. The following options are available:</li>

<code>RaycastQueryType.RQT_QUERY_ALL</code>

<li>: only returns the first hit entity, starting from the origin point.</li>

<code>RaycastQueryType.RQT_HIT_FIRST</code>

<li>: returns all hit entities, from the origin through to the max distance of the ray.</li>

<code>collisionMask</code>

<li>: Only detect collisions with certain collision layers. Use this together with a custom collision layer, or to only detect the physics or pointer events layer. See</li>

<li>. By default, all layers are detected.</li>

<code>originOffset</code>

<li>: Instead of starting the raycast from the entity’s origin position, add an offset to start the query from a relative position. You can for example use a small offset to prevent the ray colliding against the entity’s own 3D model.</li>

<code>continuous</code>

<li>: If true, will keep running a raycast query on every frame. If false, the ray will only be used on the current frame. By default this value is false.</li>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>continuous</code>

<blockquote>property should be used with caution, as running a raycast query on every frame can be very expensive for performance. When possible, use a system (or the</blockquote>

<code>interval</code>

<blockquote>function in the Utils library) to run raycast queries at a regular more sparse interval, see</blockquote>

<blockquote>.</blockquote>

<p>The following example uses a global rotation to determine the direction, and only returns the first entity that is hit on the frame that the ray is sent.</p>

<p>The example below launches a ray in the forward-facing direction of the entity, returning only the first item hit. It does so continuously. It also includes a minor offset of 0.5 to prevent the ray from hitting the entity’s own collider.</p>

<p>This example traces a ray between two entities. It returns all entities that are hit in between.</p>

<h3>Raycast results component</h3>

<strong>📔 Note</strong>

<blockquote>: The easiest way to deal with raycast results is to use</blockquote>

<code>raycastEventSystem</code>

<blockquote>, and register a callback function as part of the same statement that creates the ray. The</blockquote>

<code>RaycastResult</code>

<blockquote>component is used internally by that that interface, but also exposed to enable more advanced custom logic.</blockquote>

<p>After creating a Raycast component, the entity that this component is added to will have a</p>

<code>RaycastResult</code>

<p>component. This component includes information about any hits of the ray. Set up a system to check for this data.</p>

<p>The</p>

<code>RaycastResult</code>

<p>component contains the following data:</p>

<code>globalOrigin</code>

<li>: The position where the ray was originated, relative to the scene.</li>

<code>direction</code>

<li>: The global direction that the ray was pointing, as a</li>

<code>Vector3</code>

<li>.</li>

<code>hits</code>

<li>: An array with one object for each entity that was hit. If there were no hit entities, this array is empty. If the raycast used</li>

<code>RaycastQueryType.RQT_HIT_FIRST</code>

<li>, this array will only contain one object.</li>

<p>Each object in the</p>

<code>hits</code>

<p>array includes:</p>

<code>entityId</code>

<li>: Id number of the entity that was hit by the ray.</li>

<code>meshName</code>

<li>:</li>

<em>String</em>

<li>with the internal name of the specific mesh in the 3D model that was hit. This is useful when a 3D model is composed of multiple meshes.</li>

<code>position</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray intersected with the hit entity (relative to the scene)</li>

<code>length</code>

<li>: Length of the ray from its origin to the position where the hit against the entity occurred.</li>

<code>normalHit</code>

<li>:</li>

<em>Quaternion</em>

<li>for the angle of the normal of the hit in world space.</li>

<code>globalOrigin</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray originates (relative to the scene)</li>

<code>direction</code>

<li>: The global direction that the ray was pointing, as a</li>

<code>Vector3</code>

<li>.</li>

<p>The example below shows how you can access results from an individual entity using a system:</p>

<p>The next example shows how you can access</p>

<code>RaycastResult</code>

<p>components from all entities in the scene, using a</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The results of a raycast do not arrive on the same tick of the game loop that you created the raycast. The results may take one or multiple ticks to arrive.</blockquote>

<p>In a scene where you use multiple kinds of rays for different purposes (like for path finding, line-of-sight checking, projectile tracing, etc), you might want to use different</p>

<p>, to avoid calculating irrelevant collisions.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/raycasting/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/click-events/

<title>About input actions | Decentraland Documentation</title>

<strong>About input actions</strong>

<h1>About input actions</h1>

<p>A Decentraland scene can detect input actions from all of the buttons that are used to control the player’s avatar. These include pointer clicks, several action buttons, and the keys that are used to move the avatar around. Button events can come from a mouse, a touch screen, a VR controller or some other device, these are all interpreted the same by the SDK.</p>

<p>You can detect input actions against an entity. This involves pressing a button while the player’s cursor is pointing at that entity’s collider. You can also detect</p>

<em>global</em>

<p>input event, that involve pressing activating the input at any time, without consideration for where the pointer is aiming.</p>

<strong>📔 Note</strong>

<blockquote>: Entities must have a</blockquote>

<blockquote>to respond to input actions.</blockquote>

<code>MeshRenderer</code>

<blockquote>models must also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component. Models from a</blockquote>

<code>GLTFContainer</code>

<blockquote>may have their own embedded collision geometry, or they can be configured to use their visible geometry, they can also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component.</blockquote>

<p>There are several different ways to handle input actions, depending on the use case.</p>

<strong>Register a callback</strong>

<li>: The easiest way to add interaction to a single entity. Write a single statement to set up a callback function and hover feedback.</li>

<strong>System-based</strong>

<li>: Ideal for handling multiple entities with similar behavior. Use a system to iterate over similar entities and query for input actions on each, handling them all with the same logic. Hover feedback needs to be set up separately. This approach is also required for handling global input actions.</li>

<strong>Advanced</strong>

<li>: Read the raw response data on each entity, including time-stamps and an event history of input events. This can be useful for defining custom interaction patterns.</li>

<h2>Hover Feedback</h2>

<p>Whichever method you use, it’s important to make players aware that an entity is interactive. Otherwise, they might completely miss out on the experience you built. It’s not a good experience to be clicking on every object hoping for one to respond. Users of Decentraland are used to the pattern that any interactive items offer feedback on hover, so they will discard an item with no feedback as non-interactive.</p>

<p>The default way to add feedback is to display a hover hint on the UI whenever the player passes their cursor over the entity’s collider. You can implement this behavior by adding a</p>

<code>PointerEvents</code>

<p>component to an entity. The</p>

<strong>Register a callback</strong>

<p>approach makes this even easier, as you don’t have to explicitly create this component.</p>

<p>You could also implement</p>

<p>, for example you could play a sound, making the entity change color, spin or enlarge while being pointed at, etc. Whatever you do, make sure that it’s a clear signifier.</p>

<h2>Obstacles</h2>

<p>Button events cast rays that only interact with the first entity on their path that is subscribed to the pointer events collision layer, as long as the entity is closer than its distance limit.</p>

<p>For an entity to be intercepted by the ray of a pointer event, either:</p>

<li>The model must contain</li>

<li>.</li>

<li>The</li>

<code>GLTFContainer</code>

<li>must be configured to use the</li>

<li>.</li>

<li>The entity must have a</li>

<li>.</li>

<p>If another entity’s collider is standing on the way of the entity that the player wants to interact with it, the player won’t be able to click the entity that’s behind, unless the entity has no collider, or this collider is configured to not respond to the pointer events collision layer.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<h2>Pointer buttons</h2>

<p>The following inputs can be handled by any of the approaches to detect input events.</p>

<code>InputAction.IA_POINTER</code>

<li>:</li>

<strong>left-mouse button</strong>

<li>on a computer.</li>

<code>InputAction.IA_PRIMARY</code>

<li>:</li>

<strong>E</strong>

<li>key on a computer.</li>

<code>InputAction.IA_SECONDARY</code>

<li>:</li>

<strong>F</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_3</code>

<li>:</li>

<strong>1</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_4</code>

<li>:</li>

<strong>2</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_5</code>

<li>:</li>

<strong>3</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_6</code>

<li>:</li>

<strong>4</strong>

<li>key on a computer.</li>

<code>InputAction.IA_JUMP</code>

<li>:</li>

<strong>Space</strong>

<li>key on a computer.</li>

<code>InputAction.IA_FORWARD</code>

<li>:</li>

<strong>W</strong>

<li>key on a computer.</li>

<code>InputAction.IA_LEFT</code>

<li>:</li>

<strong>A</strong>

<li>key on a computer.</li>

<code>InputAction.IA_RIGHT</code>

<li>:</li>

<strong>D</strong>

<li>key on a computer.</li>

<code>InputAction.IA_BACKWARD</code>

<li>:</li>

<strong>S</strong>

<li>key on a computer.</li>

<code>InputAction.IA_WALK</code>

<li>:</li>

<strong>Shift</strong>

<li>key on a computer.</li>

<p>Each</p>

<code>InputAction</code>

<p>is abstracted away from the literal input in the keyboard so that it can be mapped to different inputs depending on the device. For this same reason, not all buttons on the keyboard can be tracked for button events, only the buttons that are used for movement and interaction. This intentional limitation is to ensure that all content is compatible in the future with VR controllers, other kinds of game controllers, and mobile devices.</p>

<h2>Types of pointer events</h2>

<p>Each input can produce the following types of pointer events. Each of the following is a value in the</p>

<code>PointerEventType</code>

<p>enum.</p>

<code>DOWN</code>

<li>: Player pushes down a specific button while having the cursor pointing at the entity’s collider.</li>

<code>UP</code>

<li>: Player releases a specific button while having the cursor pointing at the entity’s collider.</li>

<code>HOVER_ENTER</code>

<li>: Player’s cursor starts pointing at the entity’s collider.</li>

<code>HOVER_LEAVE</code>

<li>: Player’s cursor stops pointing at the entity’s collider.</li>

<h2>Data from an input action</h2>

<p>All input actions include data about the event, including things like the button that was activated, and where the pointer was pointing at at the time.</p>

<p>The following information can be obtained from any input event:</p>

<code>analog</code>

<p>: Flag to mark if the event is from an analog or a digital input. Digital inputs have a value of</p>

<em>1</em>

<p>, analog inputs (like a joy stick) have a value of</p>

<em>0</em>

<p>.</p>

<code>button</code>

<p>: Which button id was pressed. The number corresponds to the</p>

<code>InputAction</code>

<p>enum, that lists all of the available buttons.</p>

<code>state</code>

<p>: Type of pointer event, from the enum</p>

<code>PointerEventType</code>

<p>.</p>

<em>0</em>

<p>refers to</p>

<code>PointerEventType.PET_DOWN</code>

<p>,</p>

<em>1</em>

<p>to</p>

<code>PointerEventType.PET_UP</code>

<p>,</p>

<em>2</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>,</p>

<em>3</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<code>timestamp</code>

<p>: A</p>

<p>to identify each button event.</p>

<p>Note: This timestamp is not numbered based on the current time. Think of it as a counter that starts at 0 and is incremented by 1 for each event.</p>

<code>hit</code>

<p>: An object that contains the following data about the hit event:</p>

<code>entityId</code>

<li>: Id number of the entity that was hit by the ray.</li>

<code>meshName</code>

<li>:</li>

<em>String</em>

<li>with the internal name of the specific mesh in the 3D model that was hit. This is useful when a 3D model is composed of multiple meshes.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray originates (relative to the scene)</li>

<code>position</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray intersected with the hit entity (relative to the scene)</li>

<code>length</code>

<li>: Length of the ray from its origin to the position where the hit against the entity occurred.</li>

<code>normalHit</code>

<li>:</li>

<em>Quaternion</em>

<li>for the angle of the normal of the hit in world space.</li>

<p>This data is accessed in different ways depending on what approach you’re using to handle input actions.</p>

<p>Using the</p>

<strong>Register a callback</strong>

<p>approach, the first parameter passed to the callback function contains this entire data structure.</p>

<p>Using the</p>

<strong>System-based</strong>

<p>approach, use</p>

<code>inputSystem.getInputCommand()</code>

<p>to fetch this data.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<p>Using the</p>

<strong>Advanced</strong>

<p>approach, the</p>

<code>PointerEventsResults</code>

<p>contains an array with a recent history of all pointer events against that entity.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/click-events/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/register-callback/

<title>Register callback | Decentraland Documentation</title>

<strong>Register callback</strong>

<h1>Register callback</h1>

<p>The easiest way to handle button events is to register a callback function for a particular entity. Every time that entity is interacted with using a specific button, the callback function is called.</p>

<p>If you need to add the same behavior to multiple similar entities, consider using the</p>

<p>approach instead of adding callbacks to each entity. The system-based approach can result in more efficiency as you iterate over a list of similar entities.</p>

<p>The Register callback approach is especially useful if you want to describe a behavior that affects a single entity, as it’s more straight forward.</p>

<p>For an entity to be interactive, it must have a</p>

<p>. See</p>

<p>for more details.</p>

<h2>Pointer down</h2>

<p>Use</p>

<code>pointerEventsSystem.onPointerDown()</code>

<p>to detect presses of a specific button.</p>

<p>This statement requires two parameters:</p>

<code>data</code>

<li>: An object that contains the following:</li>

<code>entity</code>

<li>: The entity to handle</li>

<code>opts</code>

<li>: An object with optional additional data:</li>

<code>button</code>

<li>: Which button to listen for. See</li>

<li>for supported options. If no button is specified, then all buttons are listened to, including movement buttons like forward and jump.</li>

<code>hoverText</code>

<li>: What string to display in the hover feedback hint. “Interact” by default.</li>

<code>hideFeedback</code>

<li>: If true, it hides the hover hint for this entity.</li>

<code>maxDistance</code>

<li>: How far away can the player be from the entity to be able to interact with this entity, in meters. If the player is too far, there will be no hover feedback and pointer events won’t work.</li>

<code>cb</code>

<li>: A callback function to run each time a button down event occurs while pointing at the entity</li>

<p>The above command leaves the callback function registered, and will be called as an</p>

<p>every time the related button event occurs.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<blockquote>Only one</blockquote>

<code>pointerEventsSystem.onPointerDown</code>

<blockquote>can be registered per entity. Once added, it will keep listening for events till the listener is removed. Do not run this recurrently within a system, as that would keep rewriting the pointer event behavior.</blockquote>

<h2>Feedback</h2>

<p>It’s very important to give players some kind of indication that an entity can be interacted with. When registering an input action with the</p>

<code>EventsSystem</code>

<p>, by default players will see a hover feedback with an icon for the button they need to press and a string that reads “Interact”. You can customize this.</p>

<p>The hover feedback on the UI displays a different icon depending on what input you select in the</p>

<code>button</code>

<p>field. On PC, it displays an icon with an</p>

<code>E</code>

<p>for</p>

<code>InputAction.IA_PRIMARY</code>

<p>, an</p>

<code>F</code>

<p>for</p>

<code>InputAction.IA_SECONDARY</code>

<p>, and a mouse for</p>

<code>InputAction.IA_POINTER</code>

<p>.</p>

<p>Change the string by changing the</p>

<code>hoverText</code>

<p>value. Keep this string short, so that it’s quick to read and isn’t too intrusive on the screen.</p>

<p>To hide a hover feedback, set the</p>

<code>hideFeedback</code>

<p>to an true. When doing this, the cursor doesn’t show any icons.</p>

<h3>Change existing feedback</h3>

<p>When registering an input action with the</p>

<code>EventsSystem</code>

<p>, this is creating a</p>

<code>PointerEvents</code>

<p>component and adding it to the interactive entity behind the scenes. This component handles the behavior of the UI hover hint. To change the behavior of the hover feedback, modify this component. See</p>

<p>for more about how to deal with this component.</p>

<h2>Pointer up</h2>

<p>Use</p>

<code>pointerEventsSystem.onPointerUp</code>

<p>to register a callback function that gets called when the indicated player lets the button up while pointing at the entity.</p>

<p>This statement requires three parameters:</p>

<code>data</code>

<li>: An object that contains the following:</li>

<code>entity</code>

<li>: The entity to handle</li>

<code>opts</code>

<li>: An object with optional additional data:</li>

<code>button</code>

<li>: Which button to listen for. See</li>

<li>for supported options. If no button is specified, then all buttons are listened to, including movement buttons like forward and jump.</li>

<code>hoverText</code>

<li>: What string to display in the hover feedback hint. “Interact” by default.</li>

<code>hideFeedback</code>

<li>: If true, it hides the hover hint for this entity.</li>

<code>maxDistance</code>

<li>: How far away can the player be from the entity to be able to interact with this entity, in meters. If the player is too far, there will be no hover feedback and pointer events won’t work.</li>

<code>cb</code>

<li>: A callback function to run each time a button up event occurs while pointing at the entity.</li>

<p>A same entity can have two different callbacks registered, one for</p>

<code>pointerEventsSystem.onPointerDown</code>

<p>and one for</p>

<code>pointerEventsSystem.onPointerUp</code>

<p>. The entity can only register one callback of each,</p>

<p>to detect different buttons on one same callback.</p>

<strong>📔 Note</strong>

<blockquote>: The hover feedback for a button up event is only displayed when the button is currently pushed down. If the player points at the entity without holding the button down, they will see no feedback, or the feedback for the button down event, if any.</blockquote>

<h2>Remove callbacks</h2>

<p>To remove a callback function, use</p>

<code>pointerEventsSystem.removeOnPointerDown</code>

<p>or</p>

<code>pointerEventsSystem.removeOnPointerUp</code>

<p>.</p>

<p>Once removed, the hover feedback on the entity should no longer be displayed, and the entity should no longer be interactive.</p>

<h2>Data from input action</h2>

<p>Fetch data from an input action, such as the button that was pressed, the entity that was hit, the direction and length of the ray, etc. See (https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#data-from-an-input-action) for a description of all of the data available.</p>

<p>To fetch this data, pass a parameter to the callback function. This parameter contains the full data structure with data about the input event.</p>

<h3>Handle multiple buttons</h3>

<p>You can’t register more than one</p>

<code>onPointerDown</code>

<p>on a single entity. Ideally you should use the</p>

<p>approach, as this allows you to handle as many different inputs as you wish, and display a UI hover feedback hint for each button.</p>

<p>As an alternative, you can use the Register callback approach and set the</p>

<code>button</code>

<p>field as</p>

<code>InputAction.IA_ANY</code>

<p>.</p>

<p>This approach is not ideal, as the hover hint shows a single string and won’t specify what action to activate. Note that this will make the callback function run for every input action including movement keys, so you must filter out only the actions you care about.</p>

<h3>Different meshes inside a model</h3>

<p>Often,</p>

<em>.glTF</em>

<p>3D models are made up of multiple meshes, that each have an individual internal name. All button events events include the information of what specific mesh was clicked, so you can use this information to trigger different click behaviors in each case.</p>

<p>To see how the meshes inside the model are named, you must open the 3D model with an editing tool, like</p>

<p>for example.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also learn the name of the clicked mesh by logging it and reading it off console.</blockquote>

<p>You access the</p>

<code>meshName</code>

<p>property as part of the</p>

<code>hit</code>

<p>object, that’s returned by the click event.</p>

<p>In the example below we have a house model that includes a mesh named</p>

<code>firePlace</code>

<p>. We want to turn on the fireplace only when its corresponding mesh is clicked.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/register-callback/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/

<title>System based events | Decentraland Documentation</title>

<strong>System based events</strong>

<h1>System based events</h1>

<p>If your scene has multiple similar entities that are all activated using the same logic, you can write a single system to iterates over all of them and describe that behavior only once. This is also the most performant and more</p>

<p>approach.</p>

<p>If all you want to do is click or push a button on a single entity to activate it, the easiest way is to use the</p>

<p>approach.</p>

<p>To set more specific custom logic, you might want to deal with the raw data and use the</p>

<p>approach.</p>

<p>For an entity to be interactive, it must have a</p>

<p>. See</p>

<p>for more details.</p>

<h2>Using a system</h2>

<p>Check for button events by running one of the helper functions on the input</p>

<code>inputSystem</code>

<p>namespace on every tick within a</p>

<p>.</p>

<p>For example, the following system uses the</p>

<code>inputSystem.isTriggered()</code>

<p>function to check if the pointer was clicked. On every tick, it checks if the button was pressed. If</p>

<code>inputSystem.isTriggered()</code>

<p>returns</p>

<em>true</em>

<p>, the system runs some custom logic in response.</p>

<p>The following helper functions are available in the</p>

<code>inputSystem</code>

<p>namespace, and can be called similarly on every tick:</p>

<code>inputSystem.isTriggered</code>

<li>: Returns true if an input action ocurred since the last tick.</li>

<code>inputSystem.isPressed</code>

<li>: Returns true if an input is currently being pressed down. It will return true on every tick until the button goes up again.</li>

<code>inputSystem.getInputCommand</code>

<li>: Returns an object with data about the input action.</li>

<p>See the sections below for more details on each.</p>

<p>When handling button events on an entity, always provide feedback to the player, so that the player is aware that an entity can be interacted with. If you add a</p>

<code>PointerEvents</code>

<p>component to an entity, players will see a hint while hovering their cursor on that entity. See</p>

<p>to learn how you can add hover hints on interactive entities.</p>

<h3>Global input events</h3>

<p>Use</p>

<code>inputSystem.isTriggered</code>

<p>to detect button down and button up events on any of the inputs tracked by the SDK.</p>

<p>The example above checks if the button was pressed, regardless of where the pointer is at, or what entities may be in its path.</p>

<code>inputSystem.isTriggered()</code>

<p>returns</p>

<em>true</em>

<p>only if the indicated button was pressed down in the current tick of the game loop. If the button was not pushed down, or it was already down from the previous tick, it returns</p>

<em>false</em>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The player needs to be standing inside the scene’s boundaries for the pointer event to be detected. The player’s cursor also needs to be locked, buttons pressed while having the free cursor aren’t detected.</blockquote>

<p>The</p>

<code>inputSystem.isTriggered</code>

<p>function takes the following required arguments:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>PointerEventType</code>

<li>: What type of event to listen for, as a value from the</li>

<code>PointerEventType</code>

<li>enum. See</li>

<li>for supported options.</li>

<h3>Activate an entity</h3>

<p>To detect button events while pointing at a particular entity, pass a third optional argument to</p>

<code>inputSystem.isTriggered</code>

<p>to specify what entity to check against.</p>

<p>The example above checks on every tick if a single hard-coded entity was pressed with the pointer button (left mouse button).</p>

<p>The</p>

<code>inputSystem.isTriggered</code>

<p>function takes the following arguments:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>PointerEventType</code>

<li>: What type of event to listen for, as a value from the</li>

<code>PointerEventType</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>Entity</code>

<em>(optional)</em>

<li>: What entity to check these events on. If no value is provided, it will check for global presses of the button, regardless of where the player’s cursor was pointing at.</li>

<p>Note that in this example we’re also adding a</p>

<code>PointerEvents</code>

<p>component to the entity we want to interact with. This step is necessary, without this component the entity won’t be detectable by any of the functions of</p>

<code>inputSystem</code>

<p>. see</p>

<p>for more details on the</p>

<code>PointerEvents</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: and a</blockquote>

<blockquote>. See</blockquote>

<blockquote>for more details.</blockquote>

<p>If there are multiple entities that the player can interact with in the same way, consider using</p>

<code>inputSystem.getInputCommand</code>

<p>. This command returns infor about a global click command, including the entity ID, you can use this to execute a single function that can handle them all.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

<p>See</p>

<p>for more info. This method also grants you more detailed data about the hit of the pointer event.</p>

<h3>Input button up</h3>

<p>You can also check for pointer up events in much the same way, by using</p>

<code>PointerEventType.PET_UP</code>

<p>.</p>

<strong>📔 Note</strong>

<p>: When checking pointer up events against a specific entity, it doesn’t take into consideration where the cursor was pointing at when the button was pushed down. It only considers where the cursor is pointing at when the button is raised.</p>

<p>Also keep in mind that hte entity must have both a</p>

<code>PointerEvents</code>

<p>and a</p>

<p>.</p>

<h3>Check for pressed buttons</h3>

<p>Check if a button is currently being pressed down by using</p>

<code>inputSystem.isPressed()</code>

<p>within a system.</p>

<code>inputSystem.isPressed()</code>

<p>returns</p>

<em>true</em>

<p>if the button is currently being held down, no matter when the button was pushed down, and no matter where the player’s cursor is pointing at. Otherwise it returns</p>

<em>false</em>

<p>.</p>

<p>The</p>

<code>inputSystem.isPressed</code>

<p>function takes a single argument:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<h3>Handle multiple entities</h3>

<p>If your scene has multiple entities that are affected by pointer events in the same way, it makes sense to write a system that iterates over all of them.</p>

<p>This example uses a</p>

<p>to iterate over all the entities with a</p>

<code>PointerEvents</code>

<p>component. It then checks each of these entities with</p>

<code>inputSystem.isTriggered</code>

<p>, iterating over them one by one. If an input action is detected on any of these entities, it carries out custom logic.</p>

<p>Instead of iterating over</p>

<em>all</em>

<p>the entities with a</p>

<code>PointerEvents</code>

<p>component in a single system, you might want to write different systems to handle entities that should behave in different ways. The recommended approach is to mark different types of entities with specific</p>

<p>, and iterate over them in separate systems.</p>

<p>This example has one system that iterates over all entities that have a custom component named</p>

<code>IsDoor</code>

<p>and another that iterates over all entities that have a custom component named</p>

<code>isGem</code>

<p>. In both systems, it checks every matching entity to see if they were activated with the pointer button.</p>

<p>This way of organizing your scene’s code is very</p>

<p>and should result in a very efficient use of memory resources.</p>

<h2>Show feedback</h2>

<p>To display UI hints while pointing at an entity, use the properties in the entity’s</p>

<code>PointerEvents</code>

<p>component.</p>

<p>Whenever the player’s cursor points at the colliders in this entity, the UI will display a hover hint to indicate that the entity can be interacted with. See the sections below for details on what you can configure.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>PointerEvents</code>

<blockquote>component just handles the displaying of hover feedback. To handle the button events themselves with custom logic, see</blockquote>

<blockquote>.</blockquote>

<p>The</p>

<code>PointerEvents</code>

<p>component requires at least one pointer event definition. Each pointer event definition can be configured with the following:</p>

<code>eventType</code>

<p>: What type of event to listen for, as a value from the</p>

<code>PointerEventType</code>

<p>enum. See</p>

<p>for supported options.</p>

<code>eventInfo</code>

<p>: An object that can contain the following fields:</p>

<code>button</code>

<li>(</li>

<em>required</em>

<li>): Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>hoverText</code>

<em>(optional)</em>

<li>: What string to display in the UI.</li>

<code>maxDistance</code>

<em>(optional)</em>

<li>: Only show feedback when the player is closer than a certain distance from the entity. Default is</li>

<em>10 meters</em>

<li>.</li>

<p>A single</p>

<code>PointerEvents</code>

<p>component can hold multiple pointer events definitions, that can detect different events for different buttons. Each entity can only have</p>

<em>one</em>

<code>PointerEvents</code>

<p>component, but this component can include multiple objects in its</p>

<code>pointerEvents</code>

<p>array, one for each event to respond to.</p>

<p>Players will see multiple labels, one for each pointer event, displayed radially around the cursor.</p>

<p>The example below combines using</p>

<code>PointerEvents</code>

<p>to show hover hints, together with a system that actually handles the player’s action with custom logic.</p>

<h3>Hint messages</h3>

<p>When a player hovers the cursor over an item with an</p>

<code>PointerEvents</code>

<p>component, the cursor changes shape to hint to the player that the entity is interactive.</p>

<p>You can also display a toast message in the UI that lets the player know what happens if they interact with the entity.</p>

<p>In the example above, the pointer event includes a value for</p>

<code>hoverText</code>

<p>. This field defines the string to display in the UI while the player points at the entity. By default, this string spells</p>

<em>Interact</em>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>hoverText</code>

<blockquote>string should describe the action that happens when interacting. For example</blockquote>

<code>Open</code>

<blockquote>,</blockquote>

<code>Activate</code>

<blockquote>,</blockquote>

<code>Grab</code>

<blockquote>,</blockquote>

<code>Select</code>

<blockquote>. These strings should be as short as possible, to avoid stealing too much focus from the player.</blockquote>

<p>If an entity has multiple pointer events on it, the hover hints for each of these are displayed radially around the cursor.</p>

<p>The</p>

<code>hoverText</code>

<p>of an</p>

<code>.UP</code>

<p>pointer event is only displayed while the player is already holding down the corresponding key and pointing at the entity.</p>

<p>If an entity has both a</p>

<code>DOWN</code>

<p>pointer event and an</p>

<code>UP</code>

<p>pointer event, the hint for the</p>

<code>DOWN</code>

<p>action is shown while the button is not being pressed. The hint switches to the one from the</p>

<code>UP</code>

<p>event only when the button is pressed and remains pressed.</p>

<h3>Max distance</h3>

<p>Some entities can be intentionally only interactive at a close range. If a player is too far away from an entity, the hover hint won’t be displayed next to the cursor.</p>

<p>By default, entities are only clickable when the player is within a close range of the entity, at a maximum distance of</p>

<em>10 meters</em>

<p>. You can change the maximum distance by setting the</p>

<code>maxDistance</code>

<p>property of a pointer event.</p>

<p>The example above sets the maximum distance for hover hints to</p>

<em>6 meters</em>

<p>. Make sure that the logic for handling the input actions also follows the same rules. See</p>

<p>for how to obtain the distance of an input action.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>maxDistance</code>

<blockquote>is measured in meters from meters from the player’s camera. Keep in mind that in 3rd person the camera is a bit further away, so make sure the distance you set works well in both modes.</blockquote>

<h2>Advanced custom hints</h2>

<p>The</p>

<code>PointerEvents</code>

<p>component easily adds UI hints when the player’s cursor starts hovering over an entity. It’s generally a good thing that hints behave consistently with what players are used to seeing in other Decentraland scenes. However, in some cases you might want to signal that something is interactive in a custom way. For example, you could play a subtle sound when the player starts hovering over the entity. You could also show a glowing highlight around the entity while hovering, and hide it when no longer hovering. It could also be used for specific gameplay mechanics.</p>

<p>Use the</p>

<code>inputSystem.isTriggered()</code>

<p>function together with the</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>and</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<p>events to carry out custom behaviors whenever the player’s cursor starts pointing at the entity’s collider, and whenever the cursor stops pointing at it.</p>

<p>The example below enlarges entities to a size of</p>

<em>1.5</em>

<p>when the cursor starts pointing at their collider, and sets them back at a size of</p>

<em>1</em>

<p>when the cursor leaves them.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

<h2>Data from input action</h2>

<p>Fetch data from an input action, such as the button that was pressed, the entity that was hit, the direction and length of the ray, etc. See (https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#data-from-an-input-action) for a description of all of the data available.</p>

<p>To fetch this data, use</p>

<code>inputSystem.getInputCommand</code>

<p>. This function returns the full data structure with data about the input event.</p>

<p>If there was no input action that matches the query, then</p>

<code>inputSystem.getInputCommand</code>

<p>returns undefined. Make sure that you handle this scenario in your logic.</p>

<h3>Max click distance</h3>

<p>To enforce a maximum distance, so that an entity is only clickable at close range, fetch</p>

<code>hit.length</code>

<p>property of the event data.</p>

<strong>📔 Note</strong>

<blockquote>: If you ignore any events that are far away, make sure you set the</blockquote>

<code>maxDistance</code>

<blockquote>parameter on the</blockquote>

<code>PointerEvents</code>

<blockquote>component to behave consistently.</blockquote>

<h3>Different meshes inside a model</h3>

<p>Often,</p>

<em>.glTF</em>

<p>3D models are made up of multiple meshes, that each have an individual internal name. All button events events include the information of what specific mesh was clicked, so you can use this information to trigger different click behaviors in each case.</p>

<p>To see how the meshes inside the model are named, you must open the 3D model with an editing tool, like</p>

<p>for example.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also learn the name of the clicked mesh by logging it and reading it off console.</blockquote>

<p>You access the</p>

<code>meshName</code>

<p>property as part of the</p>

<code>hit</code>

<p>object, that’s returned by the click event.</p>

<p>In the example below we have a house model that includes a mesh named</p>

<code>firePlace</code>

<p>. We want to turn on the fireplace only when its corresponding mesh is clicked.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/data-oriented-programming/

<title>Data oriented programming | Decentraland Documentation</title>

<strong>Data oriented programming</strong>

<h1>Data oriented programming</h1>

<p>Data Oriented Programming is a powerful approach to programming that results in big improvements to performance. It focuses on treating</p>

<em>data</em>

<p>as the cental element, all else is organized around it, to either access or modify that data. This approach is also very multiplayer friendly, as it makes the data that needs to be synchronized between players easier and faster to access.</p>

<p>Data Oriented Programming encourages you to think about everything in your scene as data that needs to be copied and mutated throughout the various systems. The main benefit of this approach is on optimizing the speed at which data can be read from memory, which is often the main bottleneck while running modern applications and games.</p>

<p>Because of this remarkable improvement in performance, much of the game making industry has been shifting towards adopting this approach over the last few years.</p>

<p>Decentraland’s SDK executes scenes in JavaScript, and one drawback of this language is that it offers no control over memory allocation. The engine that runs Decentraland, however, uses C#, which does benefit a lot by following data oriented principles. The SDK and the engine are constantly sending messages between each other. To make this communication as efficient as possible, it makes sense to keep the data structures on both sides as similar as possible, to avoid having to constantly reorganize this data.</p>

<h2>How it looks</h2>

<p>Data Oriented Programming is different from Object Oriented Programming, an approach that many developers are currently familiar with. In Object Oriented Programming, the code is structured following abstractions that try to replicate real-world constructs: objects. Each of these objects can hold both data and functionality. Applications that use this approach are often easy to plan out conceptually, but also more inefficient to run.</p>

<p>In Data oriented Programming, data is not structured around objects, it’s structured to optimize its ease of access. The real-world constructs that the data represents play no part in the different flows that mutate that data.</p>

<p>The Entity Component System (ECS) model that the Decentraland SDK is built upon is very compatible with the Data Oriented Programming approach. Each component is part of a structured collection of data. Components belong to an entity by reference, but the data is not structured around the entity, the data is structured as a collection of similar components. For example, all</p>

<code>Transform</code>

<p>components in a scene are equal. One of these transforms might belong to the model of your main building, another to a glass that is a child of a table. The systems in the scene then processes the list of</p>

<code>Transform</code>

<p>components one by one, without making any distinctions. All</p>

<code>Transform</code>

<p>components have the same fields and undergo the same checks.</p>

<p>Imagine a scene that has a dozen doors that can either be open or closed. You can represent the state of all of these doors as a simple “isOpen” component that holds a boolean value. If “isOpen” is true the door should be open; if false the door should be closed. If a player clicks on a door, it should toggle state, and other players should also see it toggle. While your scene is processing a change in the state of a door, and syncing it with other players, the scene doesn’t really care about what “isOpen” represents. The whole set of components is just a collection of booleans that need to be synchronized with other players. A separate system on your scene can then take care of regularly matching the state of each “isOpen” to its corresponding door’s rotation.</p>

<p>Data Oriented Programming is not necessarily harder, but it’s a different approach that needs to be learnt and adopted. Developers that are not used to this approach might need some time to get familiar with it, we encourage that you explore and play with examples to get a better feel.</p>

<h2>Why it works</h2>

<p>To understand why data oriented programming makes such a big difference, we need to take a look at the hardware.</p>

<p>When the processor needs to fetch data from memory, it fetches a whole chunk of data into cache, including data that just happens to be written onto memory next to the value we wanted. The more your code can make use of data that is already in cache, the faster your code will run.</p>

<p>Imagine the machine’s memory is a literal warehouse, where data is stored in lots of stacked boxes. Whenever we need a certain bit of data, we need to call a forklift to go fetch the box where that data is located, and bring it over to the front desk for inspection. That front desk can only fit a couple of boxes at a time, so you can’t keep much data around.</p>

<p>It takes a long time for the forklift to go over to the back of the warehouse and bring us a box. If the data you want from these boxes is scattered, that will mean asking the forklift to do a lot of trips. Most of the time, you’ll be twiddling your thumbs standing by the front desk, waiting for the next box you requested to arrive.</p>

<p>You can avoid much of that wasted time if you stacked these boxes intelligently, and packed data so that the things you will likely need at the same time are mostly grouped together. If you group data cleverly, you’ll often find that the next thing you need is already in one of the boxes in the front desk. You’ll be able to jump right into it without bothering the fork lift operator.</p>

<p>For example, if you have a scene that needs to fetch the state of a door to check if it’s open or closed, the hardware is not just fetching the value of the particular boolean that describes the state of that door, it’s fetching a whole lot of other data that may or may not be relevant.</p>

<p>Suppose that your scene has a system that needs to update the open/door state of a dozen doors, once every frame. If your code is organized following an Object Oriented Programming approach, there’s no telling how the different relevant bits of information may be grouped. Maybe a “box” from our warehouse holds door A’s “isOpen” state and also holds door A’s texture and the audio it plays when opening. You might have to make a trip to fetch a new “box” of data for each of the dozen doors. And of course, this whole process needs to happen again on every frame. So that’s 360 (30 x 12) metaphorical trips to the back of the warehouse per second, even when none of the doors have changed state.</p>

<p>If your code follows a Data Oriented approach, on the other hand, it’s very likely that all those 12 booleans will be in the same box. This is because all these booleans are part of a single array that was recorded into memory at once. You’re never explicitly organizing how this data fits into memory, so in the worst case scenario the array could end up split across two boxes. But even in that worst scenario, 2 trips is much better than 12.</p>

<p>Checking the state of every door on every frame sounds like a lot of work, but it’s actually super quick if all the data is already in the memory cache. If your data is neatly organized, your scene can run processes like these over a lot of entities and still run really fast.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/advanced-button-events/

<title>Advanced button events | Decentraland Documentation</title>

<strong>Advanced button events</strong>

<h1>Advanced button events</h1>

<p>If you need the interaction in your scene to follow custom logic that is not compatible with the</p>

<p>or the</p>

<p>approaches, you can deal with the raw input event data directly. This approach is the hardest, but the most flexible.</p>

<h2>The PointerEventsResult component</h2>

<p>When a pointer event is detected by the engine, the entity that was clicked is assigned a</p>

<code>PointerEventsResult</code>

<p>component. This component contains all the raw data about the hit event, and stores historic data about previous events.</p>

<p>The helpers in</p>

<code>Input</code>

<p>, like</p>

<code>inputSystem.wasJustClicked</code>

<p>or</p>

<code>inputSystem.getInputCommand</code>

<p>are good for most simple scenarios, but if you need to get more details about the hit event, check the raw data in the</p>

<code>PointerEventsResult</code>

<p>.</p>

<p>The</p>

<code>PointerEventsResult</code>

<p>stores a</p>

<code>commands</code>

<p>array, containing one object for each pointer event it stores. It stores a list of up to 30 events, newer events are stored at the end of the array. Once the list reaches a length of 30, it starts discarding old events for each new one that comes in.</p>

<p>Each event in the</p>

<code>commands</code>

<p>array has the following data:</p>

<code>analog</code>

<p>: Flag to mark if the event is from an analog or a digital input. Digital inputs have a value of</p>

<em>1</em>

<p>, analog inputs (like a joy stick) have a value of</p>

<em>0</em>

<p>.</p>

<code>button</code>

<p>: Which button id was pressed. The number corresponds to the</p>

<code>InputAction</code>

<p>enum, that lists all of the available buttons.</p>

<code>state</code>

<p>: Type of pointer event, from the enum</p>

<code>PointerEventType</code>

<p>.</p>

<em>0</em>

<p>refers to</p>

<code>PointerEventType.PET_DOWN</code>

<p>,</p>

<em>1</em>

<p>to</p>

<code>PointerEventType.PET_UP</code>

<p>,</p>

<em>2</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>,</p>

<em>3</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<code>timestamp</code>

<p>: A</p>

<p>to identify each button event.</p>

<p>Note: This timestamp is not numbered based on the current time. Think of it as a counter that starts at 0 and is incremented by 1 for each event.</p>

<code>hit</code>

<p>: An object that contains the following data about the hit event:</p>

<code>entityId</code>

<li>: Id number of the entity that was hit by the ray.</li>

<code>meshName</code>

<li>:</li>

<em>String</em>

<li>with the internal name of the specific mesh in the 3D model that was hit. This is useful when a 3D model is composed of multiple meshes.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray originates (relative to the scene)</li>

<code>position</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray intersected with the hit entity (relative to the scene)</li>

<code>length</code>

<li>: Length of the ray from its origin to the position where the hit against the entity occurred.</li>

<code>normalHit</code>

<li>:</li>

<em>Vector3</em>

<li>with a normalized direction vector, describing the angle of the normal of the hit in world space.</li>

<h2>Track player movements</h2>

<p>In real-time multiplayer games where the timing of player movements is critical, you may want to keep track of each player’s position using a 3rd party server as the source of truth. You can improve response time by listening to the button in advance and predict their effects in your server before the avatar has shifted position.</p>

<p>This approach helps compensate for network delays, but is sure to result in discrepancies, so you should also regularly poll the player’s current position to make corrections. Balancing these predictions and corrections may require plenty of fine-tuning.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#obstacles

<title>About input actions | Decentraland Documentation</title>

<strong>About input actions</strong>

<h1>About input actions</h1>

<p>A Decentraland scene can detect input actions from all of the buttons that are used to control the player’s avatar. These include pointer clicks, several action buttons, and the keys that are used to move the avatar around. Button events can come from a mouse, a touch screen, a VR controller or some other device, these are all interpreted the same by the SDK.</p>

<p>You can detect input actions against an entity. This involves pressing a button while the player’s cursor is pointing at that entity’s collider. You can also detect</p>

<em>global</em>

<p>input event, that involve pressing activating the input at any time, without consideration for where the pointer is aiming.</p>

<strong>📔 Note</strong>

<blockquote>: Entities must have a</blockquote>

<blockquote>to respond to input actions.</blockquote>

<code>MeshRenderer</code>

<blockquote>models must also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component. Models from a</blockquote>

<code>GLTFContainer</code>

<blockquote>may have their own embedded collision geometry, or they can be configured to use their visible geometry, they can also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component.</blockquote>

<p>There are several different ways to handle input actions, depending on the use case.</p>

<strong>Register a callback</strong>

<li>: The easiest way to add interaction to a single entity. Write a single statement to set up a callback function and hover feedback.</li>

<strong>System-based</strong>

<li>: Ideal for handling multiple entities with similar behavior. Use a system to iterate over similar entities and query for input actions on each, handling them all with the same logic. Hover feedback needs to be set up separately. This approach is also required for handling global input actions.</li>

<strong>Advanced</strong>

<li>: Read the raw response data on each entity, including time-stamps and an event history of input events. This can be useful for defining custom interaction patterns.</li>

<h2>Hover Feedback</h2>

<p>Whichever method you use, it’s important to make players aware that an entity is interactive. Otherwise, they might completely miss out on the experience you built. It’s not a good experience to be clicking on every object hoping for one to respond. Users of Decentraland are used to the pattern that any interactive items offer feedback on hover, so they will discard an item with no feedback as non-interactive.</p>

<p>The default way to add feedback is to display a hover hint on the UI whenever the player passes their cursor over the entity’s collider. You can implement this behavior by adding a</p>

<code>PointerEvents</code>

<p>component to an entity. The</p>

<strong>Register a callback</strong>

<p>approach makes this even easier, as you don’t have to explicitly create this component.</p>

<p>You could also implement</p>

<p>, for example you could play a sound, making the entity change color, spin or enlarge while being pointed at, etc. Whatever you do, make sure that it’s a clear signifier.</p>

<h2>Obstacles</h2>

<p>Button events cast rays that only interact with the first entity on their path that is subscribed to the pointer events collision layer, as long as the entity is closer than its distance limit.</p>

<p>For an entity to be intercepted by the ray of a pointer event, either:</p>

<li>The model must contain</li>

<li>.</li>

<li>The</li>

<code>GLTFContainer</code>

<li>must be configured to use the</li>

<li>.</li>

<li>The entity must have a</li>

<li>.</li>

<p>If another entity’s collider is standing on the way of the entity that the player wants to interact with it, the player won’t be able to click the entity that’s behind, unless the entity has no collider, or this collider is configured to not respond to the pointer events collision layer.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<h2>Pointer buttons</h2>

<p>The following inputs can be handled by any of the approaches to detect input events.</p>

<code>InputAction.IA_POINTER</code>

<li>:</li>

<strong>left-mouse button</strong>

<li>on a computer.</li>

<code>InputAction.IA_PRIMARY</code>

<li>:</li>

<strong>E</strong>

<li>key on a computer.</li>

<code>InputAction.IA_SECONDARY</code>

<li>:</li>

<strong>F</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_3</code>

<li>:</li>

<strong>1</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_4</code>

<li>:</li>

<strong>2</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_5</code>

<li>:</li>

<strong>3</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_6</code>

<li>:</li>

<strong>4</strong>

<li>key on a computer.</li>

<code>InputAction.IA_JUMP</code>

<li>:</li>

<strong>Space</strong>

<li>key on a computer.</li>

<code>InputAction.IA_FORWARD</code>

<li>:</li>

<strong>W</strong>

<li>key on a computer.</li>

<code>InputAction.IA_LEFT</code>

<li>:</li>

<strong>A</strong>

<li>key on a computer.</li>

<code>InputAction.IA_RIGHT</code>

<li>:</li>

<strong>D</strong>

<li>key on a computer.</li>

<code>InputAction.IA_BACKWARD</code>

<li>:</li>

<strong>S</strong>

<li>key on a computer.</li>

<code>InputAction.IA_WALK</code>

<li>:</li>

<strong>Shift</strong>

<li>key on a computer.</li>

<p>Each</p>

<code>InputAction</code>

<p>is abstracted away from the literal input in the keyboard so that it can be mapped to different inputs depending on the device. For this same reason, not all buttons on the keyboard can be tracked for button events, only the buttons that are used for movement and interaction. This intentional limitation is to ensure that all content is compatible in the future with VR controllers, other kinds of game controllers, and mobile devices.</p>

<h2>Types of pointer events</h2>

<p>Each input can produce the following types of pointer events. Each of the following is a value in the</p>

<code>PointerEventType</code>

<p>enum.</p>

<code>DOWN</code>

<li>: Player pushes down a specific button while having the cursor pointing at the entity’s collider.</li>

<code>UP</code>

<li>: Player releases a specific button while having the cursor pointing at the entity’s collider.</li>

<code>HOVER_ENTER</code>

<li>: Player’s cursor starts pointing at the entity’s collider.</li>

<code>HOVER_LEAVE</code>

<li>: Player’s cursor stops pointing at the entity’s collider.</li>

<h2>Data from an input action</h2>

<p>All input actions include data about the event, including things like the button that was activated, and where the pointer was pointing at at the time.</p>

<p>The following information can be obtained from any input event:</p>

<code>analog</code>

<p>: Flag to mark if the event is from an analog or a digital input. Digital inputs have a value of</p>

<em>1</em>

<p>, analog inputs (like a joy stick) have a value of</p>

<em>0</em>

<p>.</p>

<code>button</code>

<p>: Which button id was pressed. The number corresponds to the</p>

<code>InputAction</code>

<p>enum, that lists all of the available buttons.</p>

<code>state</code>

<p>: Type of pointer event, from the enum</p>

<code>PointerEventType</code>

<p>.</p>

<em>0</em>

<p>refers to</p>

<code>PointerEventType.PET_DOWN</code>

<p>,</p>

<em>1</em>

<p>to</p>

<code>PointerEventType.PET_UP</code>

<p>,</p>

<em>2</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>,</p>

<em>3</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<code>timestamp</code>

<p>: A</p>

<p>to identify each button event.</p>

<p>Note: This timestamp is not numbered based on the current time. Think of it as a counter that starts at 0 and is incremented by 1 for each event.</p>

<code>hit</code>

<p>: An object that contains the following data about the hit event:</p>

<code>entityId</code>

<li>: Id number of the entity that was hit by the ray.</li>

<code>meshName</code>

<li>:</li>

<em>String</em>

<li>with the internal name of the specific mesh in the 3D model that was hit. This is useful when a 3D model is composed of multiple meshes.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray originates (relative to the scene)</li>

<code>position</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray intersected with the hit entity (relative to the scene)</li>

<code>length</code>

<li>: Length of the ray from its origin to the position where the hit against the entity occurred.</li>

<code>normalHit</code>

<li>:</li>

<em>Quaternion</em>

<li>for the angle of the normal of the hit in world space.</li>

<p>This data is accessed in different ways depending on what approach you’re using to handle input actions.</p>

<p>Using the</p>

<strong>Register a callback</strong>

<p>approach, the first parameter passed to the callback function contains this entire data structure.</p>

<p>Using the</p>

<strong>System-based</strong>

<p>approach, use</p>

<code>inputSystem.getInputCommand()</code>

<p>to fetch this data.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<p>Using the</p>

<strong>Advanced</strong>

<p>approach, the</p>

<code>PointerEventsResults</code>

<p>contains an array with a recent history of all pointer events against that entity.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#obstacles

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/#advanced-custom-hints

<title>System based events | Decentraland Documentation</title>

<strong>System based events</strong>

<h1>System based events</h1>

<p>If your scene has multiple similar entities that are all activated using the same logic, you can write a single system to iterates over all of them and describe that behavior only once. This is also the most performant and more</p>

<p>approach.</p>

<p>If all you want to do is click or push a button on a single entity to activate it, the easiest way is to use the</p>

<p>approach.</p>

<p>To set more specific custom logic, you might want to deal with the raw data and use the</p>

<p>approach.</p>

<p>For an entity to be interactive, it must have a</p>

<p>. See</p>

<p>for more details.</p>

<h2>Using a system</h2>

<p>Check for button events by running one of the helper functions on the input</p>

<code>inputSystem</code>

<p>namespace on every tick within a</p>

<p>.</p>

<p>For example, the following system uses the</p>

<code>inputSystem.isTriggered()</code>

<p>function to check if the pointer was clicked. On every tick, it checks if the button was pressed. If</p>

<code>inputSystem.isTriggered()</code>

<p>returns</p>

<em>true</em>

<p>, the system runs some custom logic in response.</p>

<p>The following helper functions are available in the</p>

<code>inputSystem</code>

<p>namespace, and can be called similarly on every tick:</p>

<code>inputSystem.isTriggered</code>

<li>: Returns true if an input action ocurred since the last tick.</li>

<code>inputSystem.isPressed</code>

<li>: Returns true if an input is currently being pressed down. It will return true on every tick until the button goes up again.</li>

<code>inputSystem.getInputCommand</code>

<li>: Returns an object with data about the input action.</li>

<p>See the sections below for more details on each.</p>

<p>When handling button events on an entity, always provide feedback to the player, so that the player is aware that an entity can be interacted with. If you add a</p>

<code>PointerEvents</code>

<p>component to an entity, players will see a hint while hovering their cursor on that entity. See</p>

<p>to learn how you can add hover hints on interactive entities.</p>

<h3>Global input events</h3>

<p>Use</p>

<code>inputSystem.isTriggered</code>

<p>to detect button down and button up events on any of the inputs tracked by the SDK.</p>

<p>The example above checks if the button was pressed, regardless of where the pointer is at, or what entities may be in its path.</p>

<code>inputSystem.isTriggered()</code>

<p>returns</p>

<em>true</em>

<p>only if the indicated button was pressed down in the current tick of the game loop. If the button was not pushed down, or it was already down from the previous tick, it returns</p>

<em>false</em>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The player needs to be standing inside the scene’s boundaries for the pointer event to be detected. The player’s cursor also needs to be locked, buttons pressed while having the free cursor aren’t detected.</blockquote>

<p>The</p>

<code>inputSystem.isTriggered</code>

<p>function takes the following required arguments:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>PointerEventType</code>

<li>: What type of event to listen for, as a value from the</li>

<code>PointerEventType</code>

<li>enum. See</li>

<li>for supported options.</li>

<h3>Activate an entity</h3>

<p>To detect button events while pointing at a particular entity, pass a third optional argument to</p>

<code>inputSystem.isTriggered</code>

<p>to specify what entity to check against.</p>

<p>The example above checks on every tick if a single hard-coded entity was pressed with the pointer button (left mouse button).</p>

<p>The</p>

<code>inputSystem.isTriggered</code>

<p>function takes the following arguments:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>PointerEventType</code>

<li>: What type of event to listen for, as a value from the</li>

<code>PointerEventType</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>Entity</code>

<em>(optional)</em>

<li>: What entity to check these events on. If no value is provided, it will check for global presses of the button, regardless of where the player’s cursor was pointing at.</li>

<p>Note that in this example we’re also adding a</p>

<code>PointerEvents</code>

<p>component to the entity we want to interact with. This step is necessary, without this component the entity won’t be detectable by any of the functions of</p>

<code>inputSystem</code>

<p>. see</p>

<p>for more details on the</p>

<code>PointerEvents</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: and a</blockquote>

<blockquote>. See</blockquote>

<blockquote>for more details.</blockquote>

<p>If there are multiple entities that the player can interact with in the same way, consider using</p>

<code>inputSystem.getInputCommand</code>

<p>. This command returns infor about a global click command, including the entity ID, you can use this to execute a single function that can handle them all.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

<p>See</p>

<p>for more info. This method also grants you more detailed data about the hit of the pointer event.</p>

<h3>Input button up</h3>

<p>You can also check for pointer up events in much the same way, by using</p>

<code>PointerEventType.PET_UP</code>

<p>.</p>

<strong>📔 Note</strong>

<p>: When checking pointer up events against a specific entity, it doesn’t take into consideration where the cursor was pointing at when the button was pushed down. It only considers where the cursor is pointing at when the button is raised.</p>

<p>Also keep in mind that hte entity must have both a</p>

<code>PointerEvents</code>

<p>and a</p>

<p>.</p>

<h3>Check for pressed buttons</h3>

<p>Check if a button is currently being pressed down by using</p>

<code>inputSystem.isPressed()</code>

<p>within a system.</p>

<code>inputSystem.isPressed()</code>

<p>returns</p>

<em>true</em>

<p>if the button is currently being held down, no matter when the button was pushed down, and no matter where the player’s cursor is pointing at. Otherwise it returns</p>

<em>false</em>

<p>.</p>

<p>The</p>

<code>inputSystem.isPressed</code>

<p>function takes a single argument:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<h3>Handle multiple entities</h3>

<p>If your scene has multiple entities that are affected by pointer events in the same way, it makes sense to write a system that iterates over all of them.</p>

<p>This example uses a</p>

<p>to iterate over all the entities with a</p>

<code>PointerEvents</code>

<p>component. It then checks each of these entities with</p>

<code>inputSystem.isTriggered</code>

<p>, iterating over them one by one. If an input action is detected on any of these entities, it carries out custom logic.</p>

<p>Instead of iterating over</p>

<em>all</em>

<p>the entities with a</p>

<code>PointerEvents</code>

<p>component in a single system, you might want to write different systems to handle entities that should behave in different ways. The recommended approach is to mark different types of entities with specific</p>

<p>, and iterate over them in separate systems.</p>

<p>This example has one system that iterates over all entities that have a custom component named</p>

<code>IsDoor</code>

<p>and another that iterates over all entities that have a custom component named</p>

<code>isGem</code>

<p>. In both systems, it checks every matching entity to see if they were activated with the pointer button.</p>

<p>This way of organizing your scene’s code is very</p>

<p>and should result in a very efficient use of memory resources.</p>

<h2>Show feedback</h2>

<p>To display UI hints while pointing at an entity, use the properties in the entity’s</p>

<code>PointerEvents</code>

<p>component.</p>

<p>Whenever the player’s cursor points at the colliders in this entity, the UI will display a hover hint to indicate that the entity can be interacted with. See the sections below for details on what you can configure.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>PointerEvents</code>

<blockquote>component just handles the displaying of hover feedback. To handle the button events themselves with custom logic, see</blockquote>

<blockquote>.</blockquote>

<p>The</p>

<code>PointerEvents</code>

<p>component requires at least one pointer event definition. Each pointer event definition can be configured with the following:</p>

<code>eventType</code>

<p>: What type of event to listen for, as a value from the</p>

<code>PointerEventType</code>

<p>enum. See</p>

<p>for supported options.</p>

<code>eventInfo</code>

<p>: An object that can contain the following fields:</p>

<code>button</code>

<li>(</li>

<em>required</em>

<li>): Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>hoverText</code>

<em>(optional)</em>

<li>: What string to display in the UI.</li>

<code>maxDistance</code>

<em>(optional)</em>

<li>: Only show feedback when the player is closer than a certain distance from the entity. Default is</li>

<em>10 meters</em>

<li>.</li>

<p>A single</p>

<code>PointerEvents</code>

<p>component can hold multiple pointer events definitions, that can detect different events for different buttons. Each entity can only have</p>

<em>one</em>

<code>PointerEvents</code>

<p>component, but this component can include multiple objects in its</p>

<code>pointerEvents</code>

<p>array, one for each event to respond to.</p>

<p>Players will see multiple labels, one for each pointer event, displayed radially around the cursor.</p>

<p>The example below combines using</p>

<code>PointerEvents</code>

<p>to show hover hints, together with a system that actually handles the player’s action with custom logic.</p>

<h3>Hint messages</h3>

<p>When a player hovers the cursor over an item with an</p>

<code>PointerEvents</code>

<p>component, the cursor changes shape to hint to the player that the entity is interactive.</p>

<p>You can also display a toast message in the UI that lets the player know what happens if they interact with the entity.</p>

<p>In the example above, the pointer event includes a value for</p>

<code>hoverText</code>

<p>. This field defines the string to display in the UI while the player points at the entity. By default, this string spells</p>

<em>Interact</em>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>hoverText</code>

<blockquote>string should describe the action that happens when interacting. For example</blockquote>

<code>Open</code>

<blockquote>,</blockquote>

<code>Activate</code>

<blockquote>,</blockquote>

<code>Grab</code>

<blockquote>,</blockquote>

<code>Select</code>

<blockquote>. These strings should be as short as possible, to avoid stealing too much focus from the player.</blockquote>

<p>If an entity has multiple pointer events on it, the hover hints for each of these are displayed radially around the cursor.</p>

<p>The</p>

<code>hoverText</code>

<p>of an</p>

<code>.UP</code>

<p>pointer event is only displayed while the player is already holding down the corresponding key and pointing at the entity.</p>

<p>If an entity has both a</p>

<code>DOWN</code>

<p>pointer event and an</p>

<code>UP</code>

<p>pointer event, the hint for the</p>

<code>DOWN</code>

<p>action is shown while the button is not being pressed. The hint switches to the one from the</p>

<code>UP</code>

<p>event only when the button is pressed and remains pressed.</p>

<h3>Max distance</h3>

<p>Some entities can be intentionally only interactive at a close range. If a player is too far away from an entity, the hover hint won’t be displayed next to the cursor.</p>

<p>By default, entities are only clickable when the player is within a close range of the entity, at a maximum distance of</p>

<em>10 meters</em>

<p>. You can change the maximum distance by setting the</p>

<code>maxDistance</code>

<p>property of a pointer event.</p>

<p>The example above sets the maximum distance for hover hints to</p>

<em>6 meters</em>

<p>. Make sure that the logic for handling the input actions also follows the same rules. See</p>

<p>for how to obtain the distance of an input action.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>maxDistance</code>

<blockquote>is measured in meters from meters from the player’s camera. Keep in mind that in 3rd person the camera is a bit further away, so make sure the distance you set works well in both modes.</blockquote>

<h2>Advanced custom hints</h2>

<p>The</p>

<code>PointerEvents</code>

<p>component easily adds UI hints when the player’s cursor starts hovering over an entity. It’s generally a good thing that hints behave consistently with what players are used to seeing in other Decentraland scenes. However, in some cases you might want to signal that something is interactive in a custom way. For example, you could play a subtle sound when the player starts hovering over the entity. You could also show a glowing highlight around the entity while hovering, and hide it when no longer hovering. It could also be used for specific gameplay mechanics.</p>

<p>Use the</p>

<code>inputSystem.isTriggered()</code>

<p>function together with the</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>and</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<p>events to carry out custom behaviors whenever the player’s cursor starts pointing at the entity’s collider, and whenever the cursor stops pointing at it.</p>

<p>The example below enlarges entities to a size of</p>

<em>1.5</em>

<p>when the cursor starts pointing at their collider, and sets them back at a size of</p>

<em>1</em>

<p>when the cursor leaves them.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

<h2>Data from input action</h2>

<p>Fetch data from an input action, such as the button that was pressed, the entity that was hit, the direction and length of the ray, etc. See (https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#data-from-an-input-action) for a description of all of the data available.</p>

<p>To fetch this data, use</p>

<code>inputSystem.getInputCommand</code>

<p>. This function returns the full data structure with data about the input event.</p>

<p>If there was no input action that matches the query, then</p>

<code>inputSystem.getInputCommand</code>

<p>returns undefined. Make sure that you handle this scenario in your logic.</p>

<h3>Max click distance</h3>

<p>To enforce a maximum distance, so that an entity is only clickable at close range, fetch</p>

<code>hit.length</code>

<p>property of the event data.</p>

<strong>📔 Note</strong>

<blockquote>: If you ignore any events that are far away, make sure you set the</blockquote>

<code>maxDistance</code>

<blockquote>parameter on the</blockquote>

<code>PointerEvents</code>

<blockquote>component to behave consistently.</blockquote>

<h3>Different meshes inside a model</h3>

<p>Often,</p>

<em>.glTF</em>

<p>3D models are made up of multiple meshes, that each have an individual internal name. All button events events include the information of what specific mesh was clicked, so you can use this information to trigger different click behaviors in each case.</p>

<p>To see how the meshes inside the model are named, you must open the 3D model with an editing tool, like</p>

<p>for example.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also learn the name of the clicked mesh by logging it and reading it off console.</blockquote>

<p>You access the</p>

<code>meshName</code>

<p>property as part of the</p>

<code>hit</code>

<p>object, that’s returned by the click event.</p>

<p>In the example below we have a house model that includes a mesh named</p>

<code>firePlace</code>

<p>. We want to turn on the fireplace only when its corresponding mesh is clicked.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/#advanced-custom-hints

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/systems/

<title>Systems | Decentraland Documentation</title>

<strong>Systems</strong>

<h1>Systems</h1>

<p>Decentraland scenes rely on</p>

<em>systems</em>

<p>to update any data over time, including information stored in each entity’s</p>

<p>.</p>

<em>systems</em>

<p>are what make scenes dynamic, they’re functions that are executed periodically on every tick of the scene’s game loop, changing what will be rendered.</p>

<p>The following example shows a basic system declaration:</p>

<p>The function in a system can perform anything you want. Typically, it will act upon all the entities that meet certain</p>

<p>, following certain logic to change the values stored in the entity’s components.</p>

<p>In the example above, the system</p>

<code>MoveSystem</code>

<p>is a function that runs on each tick of the game loop, changing position of every entity in the scene that has a Transform.</p>

<p>You can have multiple systems in your scene to decouple different behaviors, making your code cleaner and easier to scale and reuse. For example, one system might handle physics, another might make an obstacle entity move back and forth continuously, another could handle the AI of characters.</p>

<p>Multiple systems can act on a single entity. For example a non-player character might move on its own based on an AI, but also be affected by gravity when accidentally walking from off a cliff. In that scenario, the physics and the AI systems don’t even need to know about each other. They independently reassess their current state on each tick of the game loop and implement their own separate logic.</p>

<h2>The system function</h2>

<p>A system’s function is executed periodically, once per every tick of the game loop. This happens automatically, you don’t need to explicitly call this function from anywhere in your code.</p>

<p>In a Decentraland scene, you can think of the game loop as the aggregation of all the system functions in your scene.</p>

<strong>📔 Note</strong>

<blockquote>: If you add multiple instances of a same system to the engine, the function will be executed multiple times per tick of the game loop. For example, adding a system twice could result in an entity moving at twice the speed as expected, as it advances two increments on each tick.</blockquote>

<h2>Handle entities by reference</h2>

<p>Some components and systems are meant for using only on one entity in the scene. For example, on an entity that stores a game’s score or perhaps a main gate that is unique in the scene. To access one of those entities within a system, you can simply refer to the entity or its components by name in the system’s functions.</p>

<p>For larger projects, we recommend that you keep system definitions on separate files from the instancing of entities and components.</p>

<h2>Loop over a component query</h2>

<p>A lot of times, your scene will have multiple entities of the same type that will have similar behaviors. For example many doors that can be opened, or many enemies that can attack the player. It makes sense to handle all of these similar entities in a single system, iterating over the list and performing the same checks on each.</p>

<p>You don’t want a system’s function to iterate over</p>

<em>the entire</em>

<p>set of entities in the scene, as this could be very costly in terms of processing power. To avoid this, you can</p>

<p>, to only iterate over the relevant entities.</p>

<p>For example, your scene can have a</p>

<code>PhysicsSystem</code>

<p>that calculates the effect of gravity over the entities of your scene. Some entities in your scene, such as trees, are not meant to ever move; so it would be smart to avoid calculating the effects of gravity on these. You can define a</p>

<code>HasPhysics</code>

<p>component to mark entities that could be affected by gravity, and then have</p>

<code>PhysicsSystem</code>

<p>only deal with the entities returned by this query.</p>

<h2>Delta time between frames</h2>

<p>The function in a system can optionally include an argument called</p>

<code>dt</code>

<p>, of type</p>

<code>number</code>

<p>(representing</p>

<em>delta time</em>

<p>).</p>

<em>delta time</em>

<p>represents time that passed since the last tick of the game loop, in seconds.</p>

<p>Decentraland scenes are updated by default at 30 ticks per second. This means that the</p>

<code>dt</code>

<p>argument passed to all systems will tend to equal to</p>

<em>1/30</em>

<p>(0.0333…).</p>

<p>If the processing of a frame takes less time than this interval, then the engine will wait the remaining time to keep updates regularly paced and</p>

<code>dt</code>

<p>will remain equal to</p>

<em>1/30</em>

<p>.</p>

<p>If the processing of a frame takes longer than</p>

<em>1/30</em>

<p>seconds, the drawing of that frame is delayed. The engine then tries to finish that frame and show it as soon as possible. It then proceeds to the next frame and tries to show it</p>

<em>1/30</em>

<p>seconds after the last frame. It doesn’t compensate for the previous delay.</p>

<p>Ideally, you should avoid your scene dropping frames, as it impacts the quality of the player’s experience. Since this is dependant on the processing power of the player’s machine, it’s always a possibility that your scene should be ready to handle gracefully.</p>

<p>The</p>

<code>dt</code>

<p>variable is useful when frame processing exceeds the default time. Assuming that the current frame will take as much time as the previous one, this information may be used to calculate how much to adjust a gradual change, so that the rate of change appears steady and in proportion to the lag between frames.</p>

<p>See</p>

<p>for examples of how to use</p>

<code>dt</code>

<p>to make movement smoother.</p>

<h2>Loop at a timed interval</h2>

<p>If you want a system to execute something at a regular time interval, you can do this by combining the</p>

<code>dt</code>

<p>argument with a timer.</p>

<p>For more complex use cases, where there may be multiple delays and loops being created dynamically, it may be worth defining a custom component to store an individual timer value for each entity. See</p>

<p>.</p>

<h2>System execution order</h2>

<p>In some cases, when you have multiple systems running, you might care about what system is executed first by your scene.</p>

<p>For example, you might have a</p>

<em>physics</em>

<p>system that updates the position of entities in the scene, and another</p>

<em>boundaries</em>

<p>system that ensures that none of the entities are positioned outside the scene boundaries. In this case, you want to make sure that the</p>

<em>boundaries</em>

<p>system is executed last. Otherwise, the</p>

<em>physics</em>

<p>system could move entities outside the bounds of the scene but the</p>

<em>boundaries</em>

<p>system won’t find out till it’s executed again in the next frame.</p>

<p>When adding a system to the engine, set an optional</p>

<code>priority</code>

<p>field to determine when the system is executed in relation to other systems.</p>

<p>Systems with a lower priority number are executed first, so a system with a priority of</p>

<em>1</em>

<p>is executed before one of priority</p>

<em>5</em>

<p>.</p>

<p>Systems that aren’t given an explicit priority have a default priority of</p>

<em>0</em>

<p>, so these are executed first.</p>

<p>If two systems have the same priority number, there’s no way to know for certain which of them will be executed first.</p>

<h2>Remove a system</h2>

<p>An instance of a system can be added or removed from the engine to turn it on or off.</p>

<p>If a system is defined but isn’t added to the engine, its function isn’t called by the engine.</p>

<p>To remove a system, you must first create a pointer to it when adding it to the engine, so that you can refer to the system later.</p>

<p>Note that to remove the system you need a pointer to the</p>

<em>instance</em>

<p>of the system, not to the system’s class. In the above example,</p>

<code>engine.removeSystem()</code>

<p>is not being passed</p>

<code>mySystem</code>

<p>(the system class declaration). It’s being passed</p>

<code>mySystemInstance</code>

<p>(the instance that was added to the engine). A scene can potentially have multiple instances of a same system running together, so you need to tell the engine which one of those to remove.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/systems/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than an id, that can be referenced by components. The entity itself has no properties or methods of its own, it simply serves to group several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>Transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>MeshRenderer</code>

<p>component gives the entity a visible shape (like a cube or a sphere) when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You can also create custom components to serve your scene’s required data, for example a custom</p>

<code>health</code>

<p>could store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, Entities were</blockquote>

<em>objects</em>

<blockquote>that were instanced, and could be extended to add functions. As of version 7.0 of the SDK, entities are only an ID. This structure better fits the principles of</blockquote>

<blockquote>and can help in the scene’s performance.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough for the engine to change how the scene is rendered in the next frame.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>Components are meant to store data about their referenced entity. They can only store this data, they can’t modify this data themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<h2>Syntax for entities and components</h2>

<p>The example below shows some basic operations for declaring, and configuring basic entities and components.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, it was necessary to manually add an entity to the engine to start rendering it. As of version 7 of the SDK, entities are implicitly added to the engine as soon as they are assigned a component.</blockquote>

<p>When a component is created, it’s always assigned to a parent entity. The component’s values then affect the entity.</p>

<h2>Remove entities</h2>

<p>To remove an entity from the engine, use</p>

<code>engine.removeEntity()</code>

<p>If a removed entity has any child entities, these change their parent back to the default</p>

<code>engine.RootEntity</code>

<p>entity, which is positioned at the scene base position, with a scale of</p>

<em>1</em>

<p>.</p>

<p>To remove an entity and also all of its children (and any children of its children, recurrently), use the</p>

<code>removeEntityWithChildren()</code>

<p>helper.</p>

<strong>💡 Tip</strong>

<blockquote>: Instead of removing an entity from the engine, in some cases it might be better to make it invisible, in case you want to be able to load it again without any delay. See</blockquote>

<h3>Removing entities behind the scenes</h3>

<p>An entity is just an id that is referenced by its components. So when removing an entity you’re really removing each of the components that reference this entity. This means that if you manually remove all of the components of an entity, it will have the same effect as doing</p>

<code>engine.removeEntity()</code>

<p>.</p>

<p>Once the entity’s components are removed, that entity’s id is free to be referenced by new components as a fresh new entity.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, the child entity must have a</p>

<code>Transform</code>

<p>component. You can then set the</p>

<code>parent</code>

<p>field with a reference to the parent entity.</p>

<p>Once a parent is assigned, it can be read off the child entity from the</p>

<code>parent</code>

<p>field on its</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity has a</p>

<code>Transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected. Any position or rotation values are added, any scale values are multiplied.</p>

<p>If either the parent or child entity doesn’t have a</p>

<code>Transform</code>

<p>component, the following default values are used.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To separate a child entity from its parent, you can assign the entity’s parent to</p>

<code>engine.RootEntity</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: When dealing with nested entities that are synced with other players, use the</blockquote>

<code>parentEntity()</code>

<blockquote>function instead of the</blockquote>

<code>parent</code>

<blockquote>entity in the Transform. See</blockquote>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique number</p>

<em>id</em>

<p>. You can retrieve a component that refers to a specific entity from the engine based on this ID.</p>

<strong>📔 Note</strong>

<blockquote>: The entity ids between</blockquote>

<em>0</em>

<blockquote>and</blockquote>

<em>511</em>

<blockquote>are reserved by the engine for fixed entities, like the player avatar, the base scene, etc.</blockquote>

<p>For example, if a player’s click or a</p>

<p>hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the Transform component of the entity that matches that id. You can also fetch any other component of that entity in the same way.</p>

<h2>Get an entity by name</h2>

<p>When using the Decentraland Editor and adding entities via the drag-and-drop inspector, each entity has a unique name. Use the</p>

<code>engine.getEntityOrNullByName()</code>

<p>function to reference one of these entities from your code. Pass the entity’s name as a string, as written on the inspector’s UI, in the tree view on the left.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you only use</blockquote>

<code>engine.getEntityOrNullByName()</code>

<blockquote>inside the</blockquote>

<code>main()</code>

<blockquote>function, in functions that run after</blockquote>

<code>main()</code>

<blockquote>, or in a system. If used outside one of those contexts, the entities created in the Editor´s inspector may not yet be instanced.</blockquote>

<p>You’re free to perform any action on an entity fetched via this method, like add or remove components, modify values of existing components, or remove the entity from the engine.</p>

<p>All the entities added via the inspector have a</p>

<code>Name</code>

<p>component, you can iterate over all of them like this:</p>

<h2>Add or replace a component</h2>

<p>Each entity can only have one component of a given kind. For example, if you attempt to assign a Transform to an entity that already has one, this will cause an error.</p>

<p>To prevent this error, you can use</p>

<code>.createOrReplace</code>

<p>instead of</p>

<code>.create</code>

<p>. This command overwrites any existing components of the same kind if they exists, otherwise it creates a new component just like</p>

<code>.create</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Since</blockquote>

<code>.createOrReplace</code>

<blockquote>runs an additional check before creating the component, it’s always more performant to use</blockquote>

<code>.create</code>

<blockquote>. If you’re sure that the entity doesn’t already have a component like the one you’re adding, use</blockquote>

<code>.create</code>

<blockquote>.</blockquote>

<h2>Access a component from an entity</h2>

<p>You can access components of an entity by using the entity’s</p>

<code>.get()</code>

<p>or the</p>

<code>getMutable()</code>

<p>functions.</p>

<p>The</p>

<code>get()</code>

<p>function fetches a read-only reference to the component. You cannot change any values from this reference of the component.</p>

<p>If you wish to change the values of the component, use the</p>

<code>getMutable()</code>

<p>function instead. If you change the values in the mutable version of the component, you’re directly affecting the entity that component belongs to.</p>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Only use</blockquote>

<code>getMutable()</code>

<blockquote>if you’re actually going to make changes to the component’s values. Otherwise, always use</blockquote>

<code>get()</code>

<blockquote>. This practice follows the principles of</blockquote>

<blockquote>, and can significantly help in the scene’s performance.</blockquote>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getOrNull()</code>

<p>or</p>

<code>getMutableOrNull()</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Avoid using</blockquote>

<code>getOrNull()</code>

<blockquote>or</blockquote>

<code>getMutableOrNull()</code>

<blockquote>when possible, as these functions involve additional checks that and are therefore less efficient than</blockquote>

<code>.get()</code>

<blockquote>and</blockquote>

<code>getMutable()</code>

<blockquote>.</blockquote>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>get()</code>

<li>and</li>

<code>getMutable()</code>

<li>returns an error.</li>

<code>getOrNull()</code>

<li>and</li>

<code>getMutableOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, use the entity’s</p>

<code>deleteFrom()</code>

<p>method of the component type.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<strong>📔 Note</strong>

<blockquote>: To remove all the components of an entity at once, see</blockquote>

<h2>Check for a component</h2>

<p>You can check if an entity owns an instance of a certain component by using the</p>

<code>has()</code>

<p>function. This function returns</p>

<em>true</em>

<p>if the component is present, and</p>

<em>false</em>

<p>if it’s not. This can be very handy for using in conditional logic in your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also</blockquote>

<blockquote>to fetch a full list of components that hold a specific component, or a specific set of components. Do not iterate over all entities in the scene manually to check each with a</blockquote>

<code>has()</code>

<blockquote>, that approach is a lot less efficient.</blockquote>

<h2>Reserved entities</h2>

<p>Certain entity ids are reserved for special entities that exist in every scene. They can be accessed via the following aliases:</p>

<code>engine.RootEntity</code>

<code>engine.PlayerEntity</code>

<code>engine.CameraEntity</code>

<strong>📔 Note</strong>

<blockquote>: Avoid referring to these entities before they are initialized. To avoid this problem, refer to these entities in the</blockquote>

<code>main()</code>

<blockquote>function, or in a system.</blockquote>

<h3>The root entity</h3>

<p>All entities in the scene are children of the</p>

<code>engine.RootEntity</code>

<p>, directly or indirectly.</p>

<h3>The player entity</h3>

<p>The</p>

<code>engine.PlayerEntity</code>

<p>entity represents the player’s avatar. Fetch the player’s</p>

<code>Transform</code>

<p>component to get the player’s current position and rotation, see</p>

<p>. You can also modify this Transform to move the player, see</p>

<p>.</p>

<h3>The camera entity</h3>

<p>The</p>

<code>engine.CameraEntity</code>

<p>entity represents the player’s camera.

Fetch the camera’s</p>

<code>Transform</code>

<p>component to get the camera’s position and rotation. You can also fetch the camera’s</p>

<code>CameraMode</code>

<p>component to know know if the player is using 1st or 3rd person camera mode, see</p>

<p>.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/shape-components/#make-invisible

<title>Shape components | Decentraland Documentation</title>

<strong>Shape components</strong>

<h1>Shape components</h1>

<p>Three dimensional scenes in Decentraland are based on the</p>

<p>model, where everything in a scene is an</p>

<em>entity</em>

<p>, and each entity can include</p>

<em>components</em>

<p>that shape its characteristics and functionality.</p>

<p>The rendered shape of an entity is determined by what component it uses.</p>

<h2>Primitive shapes</h2>

<p>Several basic shapes, often called</p>

<em>primitives</em>

<p>, can be added to an entity by giving the entity a</p>

<code>MeshRenderer</code>

<p>component.</p>

<p>The following shapes are available. Several shapes include optional additional fields, specific to that shape.</p>

<strong>box</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setBox()</code>

<p>, passing the entity. Pass</p>

<code>uvs</code>

<p>as an additional optional field, to map texture alignment. See</p>

<p>for more details.</p>

<strong>plane</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setPlane()</code>

<p>, passing the entity. Pass</p>

<code>uvs</code>

<p>as an additional optional field, to map texture alignment. See</p>

<p>for more details.</p>

<strong>sphere</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setSphere()</code>

<p>, passing the entity.</p>

<strong>cylinder</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setCylinder()</code>

<p>, passing the entity. Pass</p>

<code>radiusTop</code>

<p>and</p>

<code>radiusBottom</code>

<p>as additional optional fields, to modify the cylinder.</p>

<p>TIP: Set either</p>

<code>radiusTop</code>

<p>or</p>

<code>radiusBottom</code>

<p>to 0 to make a cone.</p>

<p>The following example creates a cube:</p>

<p>The following example creates a cylinder with a</p>

<code>radiusTop</code>

<p>of 0, which produces a cone:</p>

<p>Primitive shapes don’t include materials. To give it a color or a texture, you must assign a</p>

<p>to the same entity.</p>

<p>To make a primitive clickable, or to prevent players from walking through it, you must give the entity a</p>

<em>collider</em>

<p>via a</p>

<p>component.</p>

<p>To change the shape of an entity that already has a</p>

<code>MeshRenderer</code>

<p>component, run</p>

<code>MeshRenderer.setBox()</code>

<p>or any of the other helper functions and it will overwrite the original shape. There’s no need to remove the original</p>

<code>MeshRenderer</code>

<p>or to use the advanced syntax.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>MeshRenderer</code>

<p>component must be imported via</p>

<code>import { MeshRenderer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>3D models</h2>

<p>For more complex shapes, you can build a 3D model in an external tool like Blender and then import them in</p>

<em>.glTF</em>

<p>or</p>

<em>.glb</em>

<p>(binary</p>

<em>.glTF</em>

<p>).</p>

<p>(GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies.</p>

<p>To add an external model into a scene, add a</p>

<code>GltfContainer</code>

<p>component to an entity and set its</p>

<code>src</code>

<p>to the path of the glTF file containing the model.</p>

<p>The</p>

<code>src</code>

<p>field is required, you must give it a value when constructing the component. In the example above, the model is located in a</p>

<code>models</code>

<p>folder at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<blockquote>: We recommend keeping your models separate in a</blockquote>

<code>/models</code>

<blockquote>folder inside your scene.</blockquote>

<p>glTF models can include their own embedded textures, materials, colliders and animations. See</p>

<p>for more information on this.</p>

<p>To prevent players from walking through a 3D model, or to make a model clickable, you must have a</p>

<p>, which may be embedded in the model or provided via a</p>

<code>MeshCollider</code>

<p>component.</p>

<p>Keep in mind that all models, their shaders and their textures must be within the parameters of the</p>

<p>.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>GltfContainer</code>

<p>component must be imported via</p>

<code>import { GltfContainer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h3>Free libraries for 3D models</h3>

<p>Instead of building your own 3D models, you can also download them from several free or paid libraries.</p>

<p>To get you started, below is a list of libraries that have free or relatively inexpensive content:</p>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<strong>📔 Note</strong>

<blockquote>: Pay attention to the license restrictions that the content you download has.</blockquote>

<p>Note that in several of these sites, you can choose what format to download the model in. Always choose</p>

<em>.glTF</em>

<p>format if available. If not available, you must convert them to</p>

<em>glTF</em>

<p>before you can use them in a scene. For that, we recommend importing them into Blender and exporting as</p>

<em>.glTF</em>

<p>from there.</p>

<h3>Optimize 3D models</h3>

<p>To ensure that 3D models in your scene load faster and take up less memory, follow these best practices:</p>

<li>Save your models in</li>

<em>.glb</em>

<li>format, which is a lighter version of</li>

<em>.gltf</em>

<li>.</li>

<li>If you have multiple models that share the same textures, export your models with textures in a separate file. That way multiple models can refer to a single texture file that only needs to be loaded once.</li>

<li>If your scene has entities that appear and disappear, it might be a good idea to pool these entities and keep them underground, or at a scale of 0. This will help them appear faster, the trade-off is that they will occupy memory when not in use. See</li>

<h2>Stretching a shape</h2>

<p>Primitive shapes and 3D models have default dimensions that you can alter by changing the scale in the entity’s</p>

<code>Transform</code>

<p>component.</p>

<h2>Make invisible</h2>

<p>You can make an entity invisible by giving an entity a</p>

<code>VisibilityComponent</code>

<p>, with its</p>

<code>visible</code>

<p>property set to</p>

<em>false</em>

<p>.</p>

<p>The</p>

<code>VisibilityComponent</code>

<p>works the same for entities with primitive shapes and with</p>

<code>GLTFContainer</code>

<p>components.</p>

<p>If an entity is invisible, its collider can block a player’s path and/or prevent clicking entities that are behind it, depending on the collision layers assigned to the collider.</p>

<h2>Loading state</h2>

<p>If a 3D model is fairly large, it might take some noticeable time to be rendered, this time may vary depending on the player’s hardware and many other factors. Sometimes you need to make sure that a model finished loading before you perform another action. For example, if you want to teleport the player to a platform up in the sky, you need to first make sure the platform is fully rendered before moving the player there, or else the player might fall right through the platform.</p>

<p>To check if a 3D model is finished being rendered, check the entity’s</p>

<code>GltfContainerLoadingState</code>

<p>component. This component is meant to be read only, and exists on any entity that also has a</p>

<code>GltfContainer</code>

<p>component.</p>

<p>This component has a single property named</p>

<code>currentState</code>

<p>, holding a value from the</p>

<code>LoadingState</code>

<p>enum.</p>

<p>The following example uses a system to periodically check the loading state of an entity’s 3D model. If the state is</p>

<code>LoadingState.FINISHED</code>

<p>, you might want to perform custom logic there and end the execution of the system.</p>

<h2>Advanced syntax</h2>

<p>The complete syntax for creating a</p>

<code>MeshRenderer</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets MeshRenderer components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters. In the example above, the</p>

<code>box</code>

<p>type supports a</p>

<code>uvs</code>

<p>field.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>box</code>

<code>plane</code>

<code>sphere</code>

<code>cylinder</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

<p>To add a</p>

<code>MeshRenderer</code>

<p>component to an entity that potentially already has an instance of this component, use</p>

<code>MeshRenderer.createOrReplace()</code>

<p>. The helper functions like</p>

<code>MeshRenderer.setBox()</code>

<p>handle overwriting existing instances of the component, but running</p>

<code>MeshRenderer.create()</code>

<p>on an entity that already has this component returns an error.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/shape-components/#make-invisible

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#pooling-entities-and-components

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than an id, that can be referenced by components. The entity itself has no properties or methods of its own, it simply serves to group several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>Transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>MeshRenderer</code>

<p>component gives the entity a visible shape (like a cube or a sphere) when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You can also create custom components to serve your scene’s required data, for example a custom</p>

<code>health</code>

<p>could store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, Entities were</blockquote>

<em>objects</em>

<blockquote>that were instanced, and could be extended to add functions. As of version 7.0 of the SDK, entities are only an ID. This structure better fits the principles of</blockquote>

<blockquote>and can help in the scene’s performance.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough for the engine to change how the scene is rendered in the next frame.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>Components are meant to store data about their referenced entity. They can only store this data, they can’t modify this data themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<h2>Syntax for entities and components</h2>

<p>The example below shows some basic operations for declaring, and configuring basic entities and components.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, it was necessary to manually add an entity to the engine to start rendering it. As of version 7 of the SDK, entities are implicitly added to the engine as soon as they are assigned a component.</blockquote>

<p>When a component is created, it’s always assigned to a parent entity. The component’s values then affect the entity.</p>

<h2>Remove entities</h2>

<p>To remove an entity from the engine, use</p>

<code>engine.removeEntity()</code>

<p>If a removed entity has any child entities, these change their parent back to the default</p>

<code>engine.RootEntity</code>

<p>entity, which is positioned at the scene base position, with a scale of</p>

<em>1</em>

<p>.</p>

<p>To remove an entity and also all of its children (and any children of its children, recurrently), use the</p>

<code>removeEntityWithChildren()</code>

<p>helper.</p>

<strong>💡 Tip</strong>

<blockquote>: Instead of removing an entity from the engine, in some cases it might be better to make it invisible, in case you want to be able to load it again without any delay. See</blockquote>

<h3>Removing entities behind the scenes</h3>

<p>An entity is just an id that is referenced by its components. So when removing an entity you’re really removing each of the components that reference this entity. This means that if you manually remove all of the components of an entity, it will have the same effect as doing</p>

<code>engine.removeEntity()</code>

<p>.</p>

<p>Once the entity’s components are removed, that entity’s id is free to be referenced by new components as a fresh new entity.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, the child entity must have a</p>

<code>Transform</code>

<p>component. You can then set the</p>

<code>parent</code>

<p>field with a reference to the parent entity.</p>

<p>Once a parent is assigned, it can be read off the child entity from the</p>

<code>parent</code>

<p>field on its</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity has a</p>

<code>Transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected. Any position or rotation values are added, any scale values are multiplied.</p>

<p>If either the parent or child entity doesn’t have a</p>

<code>Transform</code>

<p>component, the following default values are used.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To separate a child entity from its parent, you can assign the entity’s parent to</p>

<code>engine.RootEntity</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: When dealing with nested entities that are synced with other players, use the</blockquote>

<code>parentEntity()</code>

<blockquote>function instead of the</blockquote>

<code>parent</code>

<blockquote>entity in the Transform. See</blockquote>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique number</p>

<em>id</em>

<p>. You can retrieve a component that refers to a specific entity from the engine based on this ID.</p>

<strong>📔 Note</strong>

<blockquote>: The entity ids between</blockquote>

<em>0</em>

<blockquote>and</blockquote>

<em>511</em>

<blockquote>are reserved by the engine for fixed entities, like the player avatar, the base scene, etc.</blockquote>

<p>For example, if a player’s click or a</p>

<p>hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the Transform component of the entity that matches that id. You can also fetch any other component of that entity in the same way.</p>

<h2>Get an entity by name</h2>

<p>When using the Decentraland Editor and adding entities via the drag-and-drop inspector, each entity has a unique name. Use the</p>

<code>engine.getEntityOrNullByName()</code>

<p>function to reference one of these entities from your code. Pass the entity’s name as a string, as written on the inspector’s UI, in the tree view on the left.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you only use</blockquote>

<code>engine.getEntityOrNullByName()</code>

<blockquote>inside the</blockquote>

<code>main()</code>

<blockquote>function, in functions that run after</blockquote>

<code>main()</code>

<blockquote>, or in a system. If used outside one of those contexts, the entities created in the Editor´s inspector may not yet be instanced.</blockquote>

<p>You’re free to perform any action on an entity fetched via this method, like add or remove components, modify values of existing components, or remove the entity from the engine.</p>

<p>All the entities added via the inspector have a</p>

<code>Name</code>

<p>component, you can iterate over all of them like this:</p>

<h2>Add or replace a component</h2>

<p>Each entity can only have one component of a given kind. For example, if you attempt to assign a Transform to an entity that already has one, this will cause an error.</p>

<p>To prevent this error, you can use</p>

<code>.createOrReplace</code>

<p>instead of</p>

<code>.create</code>

<p>. This command overwrites any existing components of the same kind if they exists, otherwise it creates a new component just like</p>

<code>.create</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Since</blockquote>

<code>.createOrReplace</code>

<blockquote>runs an additional check before creating the component, it’s always more performant to use</blockquote>

<code>.create</code>

<blockquote>. If you’re sure that the entity doesn’t already have a component like the one you’re adding, use</blockquote>

<code>.create</code>

<blockquote>.</blockquote>

<h2>Access a component from an entity</h2>

<p>You can access components of an entity by using the entity’s</p>

<code>.get()</code>

<p>or the</p>

<code>getMutable()</code>

<p>functions.</p>

<p>The</p>

<code>get()</code>

<p>function fetches a read-only reference to the component. You cannot change any values from this reference of the component.</p>

<p>If you wish to change the values of the component, use the</p>

<code>getMutable()</code>

<p>function instead. If you change the values in the mutable version of the component, you’re directly affecting the entity that component belongs to.</p>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Only use</blockquote>

<code>getMutable()</code>

<blockquote>if you’re actually going to make changes to the component’s values. Otherwise, always use</blockquote>

<code>get()</code>

<blockquote>. This practice follows the principles of</blockquote>

<blockquote>, and can significantly help in the scene’s performance.</blockquote>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getOrNull()</code>

<p>or</p>

<code>getMutableOrNull()</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Avoid using</blockquote>

<code>getOrNull()</code>

<blockquote>or</blockquote>

<code>getMutableOrNull()</code>

<blockquote>when possible, as these functions involve additional checks that and are therefore less efficient than</blockquote>

<code>.get()</code>

<blockquote>and</blockquote>

<code>getMutable()</code>

<blockquote>.</blockquote>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>get()</code>

<li>and</li>

<code>getMutable()</code>

<li>returns an error.</li>

<code>getOrNull()</code>

<li>and</li>

<code>getMutableOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, use the entity’s</p>

<code>deleteFrom()</code>

<p>method of the component type.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<strong>📔 Note</strong>

<blockquote>: To remove all the components of an entity at once, see</blockquote>

<h2>Check for a component</h2>

<p>You can check if an entity owns an instance of a certain component by using the</p>

<code>has()</code>

<p>function. This function returns</p>

<em>true</em>

<p>if the component is present, and</p>

<em>false</em>

<p>if it’s not. This can be very handy for using in conditional logic in your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also</blockquote>

<blockquote>to fetch a full list of components that hold a specific component, or a specific set of components. Do not iterate over all entities in the scene manually to check each with a</blockquote>

<code>has()</code>

<blockquote>, that approach is a lot less efficient.</blockquote>

<h2>Reserved entities</h2>

<p>Certain entity ids are reserved for special entities that exist in every scene. They can be accessed via the following aliases:</p>

<code>engine.RootEntity</code>

<code>engine.PlayerEntity</code>

<code>engine.CameraEntity</code>

<strong>📔 Note</strong>

<blockquote>: Avoid referring to these entities before they are initialized. To avoid this problem, refer to these entities in the</blockquote>

<code>main()</code>

<blockquote>function, or in a system.</blockquote>

<h3>The root entity</h3>

<p>All entities in the scene are children of the</p>

<code>engine.RootEntity</code>

<p>, directly or indirectly.</p>

<h3>The player entity</h3>

<p>The</p>

<code>engine.PlayerEntity</code>

<p>entity represents the player’s avatar. Fetch the player’s</p>

<code>Transform</code>

<p>component to get the player’s current position and rotation, see</p>

<p>. You can also modify this Transform to move the player, see</p>

<p>.</p>

<h3>The camera entity</h3>

<p>The</p>

<code>engine.CameraEntity</code>

<p>entity represents the player’s camera.

Fetch the camera’s</p>

<code>Transform</code>

<p>component to get the camera’s position and rotation. You can also fetch the camera’s</p>

<code>CameraMode</code>

<p>component to know know if the player is using 1st or 3rd person camera mode, see</p>

<p>.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#pooling-entities-and-components

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/serverless-multiplayer/#parented-entities

<title>Serverless Multiplayer | Decentraland Documentation</title>

<strong>Serverless Multiplayer</strong>

<h1>Serverless Multiplayer</h1>

<p>Decentraland runs scenes locally in a player’s browser. By default, players are able to see each other and interact directly, but each player interacts with the environment independently. Changes in the environment aren’t shared between players by default.</p>

<p>Seeing the same content in the same state is extremely important for players to interact in more meaningful ways.</p>

<p>There are three ways to sync the scene state, so that all players see the same:</p>

<strong>Mark an entity as synced</strong>

<li>: The easiest option. See</li>

<strong>Send Explicit MessageBus Messages</strong>

<li>: Manually send and listen for specific messages. See</li>

<strong>Use a Server</strong>

<li>: See</li>

<li>. This option is more complicated to set up, but is recommendable if players have incentives to exploit your scene.</li>

<p>The first two options are covered in this document. They are simpler, as they require no server. The downside is that you rely more on player’s connection speeds, and the scene state is not persisted when all players leave the scene.</p>

<h2>Mark an Entity as Synced</h2>

<strong>📔 Note</strong>

<blockquote>: This feature is currently in alpha state. Its syntax could potentially undergo changes on the next few releases.</blockquote>

<p>To mark an entity as synced, use the</p>

<code>syncEntity</code>

<p>function:</p>

<p>The</p>

<code>syncEntity</code>

<p>function takes the following inputs:</p>

<strong>entityId</strong>

<li>: A reference to the entity to sync</li>

<strong>componentIds</strong>

<li>: A list of the components that need to be synced from that entity. This is an array that may contain as many entities as needed. All values should be</li>

<code>componentId</code>

<li>properties.</li>

<strong>entityEnumId</strong>

<li>: (optional) A unique id that is used consistently by all players, see</li>

<li>.</li>

<p>Not all entities or components need to be synced. Static elements like a tree that remains in the same spot don’t require syncing. On entities you do sync, only the components that change over time should be synchronized. For example, if a cube changes color when clicked, you should only sync the Material component, not the MeshRenderer or the Transform, as those will never change.</p>

<strong>💡 Tip</strong>

<blockquote>: If the data you want to share doesn’t exist as a component, define a</blockquote>

<blockquote>that holds that data.</blockquote>

<h3>About the enum id</h3>

<p>The</p>

<strong>entityEnumId</strong>

<p>of an entity must be unique. It’s not related to the local entityId assigned on</p>

<code>engine.addEntity()</code>

<p>, that is automatically generated and may vary between players running the same scene. The entityEnumId of an entity must be explicitly defined in the code and be unique.</p>

<p>Explicitly setting this ID is important to avoid inconsistencies if a race condition makes one part of the scene load before another. Maybe for player A the door in the scene is the entity</p>

<em>512</em>

<p>, but for player B that same door is entity</p>

<em>513</em>

<p>. In that case, if player A opens the door, player B instead sees the whole building move.</p>

<strong>💡 Tip</strong>

<p>: Create an enum in your scene, to keep clear references to each syncable id in your scene.</p>

<p>Here the EntityEnumId enum is used to tag entities with a unique identifier, ensuring that every client recognizes the modified entity, regardless of creation order.</p>

<h4>Entities created by a player</h4>

<p>If an entity is created as a result of a player interaction, and this entity should be synced with other players, the entity doesn’t need an entityEnumId. You can use</p>

<code>syncEntity()</code>

<p>passing only the entity and the list of components. A unique value for entityEnumId is assigned automatically behind the curtains.</p>

<p>All entities instanced on scene initiation need to have a manually-assigned ID. That’s to ensure that all players use the same ID on each. When a single player is in charge of instancing an entity, explicit IDs are not needed. Other players get updates about this new entity with an ID already assigned, so there is no risk of ID mismatches.</p>

<p>For example, in a snowball fight scene, every time a player throws a snowball, they’re instancing a new entity that gets synced with other players. The snowball doesn’t need a unique entityEnumId.</p>

<h4>Parented entities</h4>

<p>The parent of an entity is normally defined via</p>

<code>parent</code>

<p>property in the</p>

<code>Transform</code>

<p>component. This property however points to the local entity id of the parent, which could vary, see</p>

<p>. To parent entities that need to be synced, or that have children that need to be synced, use the</p>

<code>parentEntity()</code>

<p>function instead of the</p>

<code>Transform</code>

<p>.</p>

<p>Note that both the parent and the child are synced with</p>

<code>syncEntity</code>

<p>, so all players have a common understanding of what ids are used by both entities. This is necessary even if the parent’s components may never need to change. In this example, the</p>

<code>syncEntity</code>

<p>includes an empty array of components, to avoid syncing any unnecessary components.</p>

<strong>📔 Note</strong>

<blockquote>: If an entity is parented by both the</blockquote>

<code>parentEntity()</code>

<blockquote>and also the</blockquote>

<code>parent</code>

<blockquote>property in the</blockquote>

<code>Transform</code>

<blockquote>component, the property in the</blockquote>

<code>Transform</code>

<blockquote>component is ignored.</blockquote>

<p>When entities are parented via the</p>

<code>parentEntity()</code>

<p>function, you can also make use of the following helper functions:</p>

<strong>removeParent()</strong>

<li>: Undo the effects of</li>

<code>parentEntity()</code>

<li>. It requires that you pass only the child entity. The entity’s new parent becomes the scene’s root entity. The original parent entity is not removed from the scene.</li>

<strong>getParent()</strong>

<li>: Returns the parent entity of an entity you passed.</li>

<strong>getChildren()</strong>

<li>: Returns the list of children of the entity you passed, as an iterable.</li>

<strong>getFirstChild()</strong>

<li>: Returns the first child on the list for the entity you passed.</li>

<h2>Send Explicit MessageBus Messages</h2>

<h4>Initiate a message bus</h4>

<p>Create a message bus object to handle the methods that are needed to send and receive messages between players.</p>

<h4>Send messages</h4>

<p>Use the</p>

<code>.emit</code>

<p>command of the message bus to send a message to all other players in the scene.</p>

<p>Each message can contain a payload as a second argument. The payload is of type</p>

<code>Object</code>

<p>, and can contain any relevant data you wish to send.</p>

<strong>💡 Tip</strong>

<blockquote>: If you need a single message to include data from more than one variable, create a custom type to hold all this data in a single object.</blockquote>

<h4>Receive messages</h4>

<p>To handle messages from all other players in that scene, use</p>

<code>.on</code>

<p>. When using this function, you provide a message string and define a function to execute. For each time that a message with a matching string arrives, the given function is executed once.</p>

<strong>📔 Note</strong>

<blockquote>: Messages that are sent by a player are also picked up by that same player. The</blockquote>

<code>.on</code>

<blockquote>method can’t distinguish between a message that was emitted by that same player from a message emitted from other players.</blockquote>

<h4>Full MessageBus example</h4>

<p>This example uses a message bus to send a new message every time the main cube is clicked, generating a new cube in a random position. The message includes the position of the new cube, so that all players see these new cubes in the same positions.</p>

<h2>Test a multiplayer scene locally</h2>

<p>If you launch a scene preview and open it in two (or more) different browser windows, each open window will be interpreted as a separate player, and a mock communications server will keep these players in sync.</p>

<p>Interact with the scene on one window, then switch to the other to see that the effects of that interaction are also visible there.</p>

<strong>📔 Note</strong>

<blockquote>: Open separate browser</blockquote>

<em>windows</em>

<blockquote>. If you open separate</blockquote>

<em>tabs</em>

<blockquote>in the same window, the interaction won’t work properly, as only one tab will be treated as active by the browser at a time.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/serverless-multiplayer/#parented-entities

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/authoritative-server/

<title>3rd party servers | Decentraland Documentation</title>

<strong>3rd party servers</strong>

<h1>3rd party servers</h1>

<p>Decentraland runs scenes locally in a player’s browser. By default, players are able to see each other and interact directly, but each one interacts with the environment independently. Changes in the environment aren’t shared between players by default. You need to implement this manually.</p>

<p>Allowing all players to see a scene as having the same content in the same state is extremely important to for players to interact in more meaningful ways. Without this, if a player opens a door and walks into a house, other players will see that door as still closed, and the first player will appear to walk directly through the closed door to other players.</p>

<strong>Mark an entity as synced</strong>

<li>: The easiest option. See</li>

<strong>Send Explicit MessageBus Messages</strong>

<li>: Manually send and listen for specific messages. See</li>

<strong>Use a Server</strong>

<li>: This document deals with this option. This option is more work to set up, but is recommendable if there are incentives to exploit your scene.</li>

<p>## Types of servers</p>

<p>A server may have different levels of involvement with the scene:</p>

<li>API + DB: This is useful for scenes where changes don’t happen constantly and where it’s acceptable to have minor delays in syncing. When a player changes something, it sends an HTTP request to a REST API that stores the new scene state in a data base. Changes remained stored for any new player that visits the scene at a later date. The main limitation is that new changes from other players aren’t notified to players who are already there, messages can’t be pushed from the server to players. Players must regularly send requests the server to get the latest state.</li>

<strong>💡 Tip</strong>

<blockquote>: It’s also possible to opt for a hybrid approach where changes are notified between players via Messagebus messages, but the final state is also stored via an API for future visitors.</blockquote>

<li>Websockets: This alternative is more robust, as it establishes a two-way communications channel between player and server. Updates can be sent from the server, you could even have game logic run on or validated on the server. This enables real time interaction and makes more fast paced games possible. It’s also more secure, as each message between player and server is part of a session that is opened, no need to validate each message.</li>

<h2>Example scenes with dedicated server</h2>

<p>API + DB:</p>

<h2>Preview scenes with dedicated servers</h2>

<p>To preview a scene that uses a 3rd party server, you must run both the scene and the server it relies on. The server can be run locally in the same machine as the preview, as an easier way to test it.</p>

<p>To start the server, go to the</p>

<code>/server</code>

<p>folder and run</p>

<code>npm run start</code>

<p>.</p>

<p>Once the server is running, either remotely or locally, you can run</p>

<code>npm run start</code>

<p>on the scene as you normally do for local scenes.</p>

<p>Once the scene preview is running, you can open multiple browser tabs pointing at the same local address. Each tab will instantiate a separate player in the same scene, these players will share the same scene state as the scene changes.</p>

<p>See</p>

<p>for more details.</p>

<h2>Separate realms</h2>

<p>Players in decentraland exist in many separate</p>

<em>realms</em>

<p>. Players in different realms cant see each other, interact or chat with each other, even if they’re standing on the same parcels. Dividing players like this allows Decentraland to handle an unlimited amount of players without running into any limitations. It also pairs players that are in close regions, to ensure that ping times between players that interact are acceptable.</p>

<p>If your scene sends data to a 3rd party server to sync changes between players in real time, then it’s important that changes are only synced between players that are on the same realm. You should handle all changes that belong to one realm as separate from those on a different realm. Otherwise, players will see things change in a spooky way, without anyone making the change.</p>

<p>See how to obtain the realm for each player in</p>

<h2>Multiplayer persistance</h2>

<p>Unlike local scenes that are newly mounted each time a player walks into them, scenes that use 3rd party servers have a life span that extends well beyond when the player enters and leaves the scene.</p>

<p>You must therefore design the experience taking into account that player won’t always find the scene in the same initial state.

Any changes made to the scene will linger on for other players to find, you must make sure that these don’t interfere with future player’s experiences in an undesired way.</p>

<h3>Reset the state</h3>

<p>When loading the scene, make sure its built based on the shared information stored in the server, and not in a default state.</p>

<p>In some cases, it makes sense to include some kind of reset button in the scene. Pressing the reset button would reset the scene gracefully.</p>

<p>Sometimes, this just implies setting the variables in the scene state back to default values. But resetting the scene might also involve unsubscribing listeners and stopping loops in the server side. If empty loops remain each time the scene is reset, these would keep piling up and will have an ill effect on the scene’s performance.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/authoritative-server/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/serverless-multiplayer/#mark-an-entity-as-synced

<title>Serverless Multiplayer | Decentraland Documentation</title>

<strong>Serverless Multiplayer</strong>

<h1>Serverless Multiplayer</h1>

<p>Decentraland runs scenes locally in a player’s browser. By default, players are able to see each other and interact directly, but each player interacts with the environment independently. Changes in the environment aren’t shared between players by default.</p>

<p>Seeing the same content in the same state is extremely important for players to interact in more meaningful ways.</p>

<p>There are three ways to sync the scene state, so that all players see the same:</p>

<strong>Mark an entity as synced</strong>

<li>: The easiest option. See</li>

<strong>Send Explicit MessageBus Messages</strong>

<li>: Manually send and listen for specific messages. See</li>

<strong>Use a Server</strong>

<li>: See</li>

<li>. This option is more complicated to set up, but is recommendable if players have incentives to exploit your scene.</li>

<p>The first two options are covered in this document. They are simpler, as they require no server. The downside is that you rely more on player’s connection speeds, and the scene state is not persisted when all players leave the scene.</p>

<h2>Mark an Entity as Synced</h2>

<strong>📔 Note</strong>

<blockquote>: This feature is currently in alpha state. Its syntax could potentially undergo changes on the next few releases.</blockquote>

<p>To mark an entity as synced, use the</p>

<code>syncEntity</code>

<p>function:</p>

<p>The</p>

<code>syncEntity</code>

<p>function takes the following inputs:</p>

<strong>entityId</strong>

<li>: A reference to the entity to sync</li>

<strong>componentIds</strong>

<li>: A list of the components that need to be synced from that entity. This is an array that may contain as many entities as needed. All values should be</li>

<code>componentId</code>

<li>properties.</li>

<strong>entityEnumId</strong>

<li>: (optional) A unique id that is used consistently by all players, see</li>

<li>.</li>

<p>Not all entities or components need to be synced. Static elements like a tree that remains in the same spot don’t require syncing. On entities you do sync, only the components that change over time should be synchronized. For example, if a cube changes color when clicked, you should only sync the Material component, not the MeshRenderer or the Transform, as those will never change.</p>

<strong>💡 Tip</strong>

<blockquote>: If the data you want to share doesn’t exist as a component, define a</blockquote>

<blockquote>that holds that data.</blockquote>

<h3>About the enum id</h3>

<p>The</p>

<strong>entityEnumId</strong>

<p>of an entity must be unique. It’s not related to the local entityId assigned on</p>

<code>engine.addEntity()</code>

<p>, that is automatically generated and may vary between players running the same scene. The entityEnumId of an entity must be explicitly defined in the code and be unique.</p>

<p>Explicitly setting this ID is important to avoid inconsistencies if a race condition makes one part of the scene load before another. Maybe for player A the door in the scene is the entity</p>

<em>512</em>

<p>, but for player B that same door is entity</p>

<em>513</em>

<p>. In that case, if player A opens the door, player B instead sees the whole building move.</p>

<strong>💡 Tip</strong>

<p>: Create an enum in your scene, to keep clear references to each syncable id in your scene.</p>

<p>Here the EntityEnumId enum is used to tag entities with a unique identifier, ensuring that every client recognizes the modified entity, regardless of creation order.</p>

<h4>Entities created by a player</h4>

<p>If an entity is created as a result of a player interaction, and this entity should be synced with other players, the entity doesn’t need an entityEnumId. You can use</p>

<code>syncEntity()</code>

<p>passing only the entity and the list of components. A unique value for entityEnumId is assigned automatically behind the curtains.</p>

<p>All entities instanced on scene initiation need to have a manually-assigned ID. That’s to ensure that all players use the same ID on each. When a single player is in charge of instancing an entity, explicit IDs are not needed. Other players get updates about this new entity with an ID already assigned, so there is no risk of ID mismatches.</p>

<p>For example, in a snowball fight scene, every time a player throws a snowball, they’re instancing a new entity that gets synced with other players. The snowball doesn’t need a unique entityEnumId.</p>

<h4>Parented entities</h4>

<p>The parent of an entity is normally defined via</p>

<code>parent</code>

<p>property in the</p>

<code>Transform</code>

<p>component. This property however points to the local entity id of the parent, which could vary, see</p>

<p>. To parent entities that need to be synced, or that have children that need to be synced, use the</p>

<code>parentEntity()</code>

<p>function instead of the</p>

<code>Transform</code>

<p>.</p>

<p>Note that both the parent and the child are synced with</p>

<code>syncEntity</code>

<p>, so all players have a common understanding of what ids are used by both entities. This is necessary even if the parent’s components may never need to change. In this example, the</p>

<code>syncEntity</code>

<p>includes an empty array of components, to avoid syncing any unnecessary components.</p>

<strong>📔 Note</strong>

<blockquote>: If an entity is parented by both the</blockquote>

<code>parentEntity()</code>

<blockquote>and also the</blockquote>

<code>parent</code>

<blockquote>property in the</blockquote>

<code>Transform</code>

<blockquote>component, the property in the</blockquote>

<code>Transform</code>

<blockquote>component is ignored.</blockquote>

<p>When entities are parented via the</p>

<code>parentEntity()</code>

<p>function, you can also make use of the following helper functions:</p>

<strong>removeParent()</strong>

<li>: Undo the effects of</li>

<code>parentEntity()</code>

<li>. It requires that you pass only the child entity. The entity’s new parent becomes the scene’s root entity. The original parent entity is not removed from the scene.</li>

<strong>getParent()</strong>

<li>: Returns the parent entity of an entity you passed.</li>

<strong>getChildren()</strong>

<li>: Returns the list of children of the entity you passed, as an iterable.</li>

<strong>getFirstChild()</strong>

<li>: Returns the first child on the list for the entity you passed.</li>

<h2>Send Explicit MessageBus Messages</h2>

<h4>Initiate a message bus</h4>

<p>Create a message bus object to handle the methods that are needed to send and receive messages between players.</p>

<h4>Send messages</h4>

<p>Use the</p>

<code>.emit</code>

<p>command of the message bus to send a message to all other players in the scene.</p>

<p>Each message can contain a payload as a second argument. The payload is of type</p>

<code>Object</code>

<p>, and can contain any relevant data you wish to send.</p>

<strong>💡 Tip</strong>

<blockquote>: If you need a single message to include data from more than one variable, create a custom type to hold all this data in a single object.</blockquote>

<h4>Receive messages</h4>

<p>To handle messages from all other players in that scene, use</p>

<code>.on</code>

<p>. When using this function, you provide a message string and define a function to execute. For each time that a message with a matching string arrives, the given function is executed once.</p>

<strong>📔 Note</strong>

<blockquote>: Messages that are sent by a player are also picked up by that same player. The</blockquote>

<code>.on</code>

<blockquote>method can’t distinguish between a message that was emitted by that same player from a message emitted from other players.</blockquote>

<h4>Full MessageBus example</h4>

<p>This example uses a message bus to send a new message every time the main cube is clicked, generating a new cube in a random position. The message includes the position of the new cube, so that all players see these new cubes in the same positions.</p>

<h2>Test a multiplayer scene locally</h2>

<p>If you launch a scene preview and open it in two (or more) different browser windows, each open window will be interpreted as a separate player, and a mock communications server will keep these players in sync.</p>

<p>Interact with the scene on one window, then switch to the other to see that the effects of that interaction are also visible there.</p>

<strong>📔 Note</strong>

<blockquote>: Open separate browser</blockquote>

<em>windows</em>

<blockquote>. If you open separate</blockquote>

<em>tabs</em>

<blockquote>in the same window, the interaction won’t work properly, as only one tab will be treated as active by the browser at a time.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/serverless-multiplayer/#mark-an-entity-as-synced

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/custom-components/

<title>Custom components | Decentraland Documentation</title>

<strong>Custom components</strong>

<h1>Custom components</h1>

<p>Data about an entity is stored in its</p>

<p>. The Decentraland SDK provides a series of base components that manage different aspects about an entity, like its position, shape, material, etc. The engine knows how to interpret the information in these, and will change how the entity is rendered accordingly as soon as they change their values.</p>

<p>If your scene’s logic requires storing information about an entity that isn’t handled by the default components of the SDK, then you can create a custom type of component on your scene. You can then build</p>

<p>that check for changes on these components and respond accordingly.</p>

<h2>About defining components</h2>

<p>To define a new component, use</p>

<code>engine.defineComponent</code>

<p>. Each component needs the following:</p>

<li>An</li>

<strong>componentName</strong>

<li>: A unique string identifier that the SDK uses internally to identify this component type. This can be any string, as long as it’s unique.</li>

<li>A</li>

<strong>schema</strong>

<li>: A class that defines the data structure held by the component.</li>

<strong>default values</strong>

<em>(optional)</em>

<li>: An object containing default values to use for initializing a copy of the component, when these are not provided.</li>

<strong>📔 Note</strong>

<blockquote>: Custom Components must always be written outside the</blockquote>

<code>main()</code>

<blockquote>function, in a separate file. They need to be interpreted before</blockquote>

<code>main()</code>

<blockquote>is executed. The recommended place for this is in a</blockquote>

<code>/components</code>

<blockquote>folder inside</blockquote>

<code>/src</code>

<blockquote>, each in its own file. That way it’s easier to reuse these in future projects.</blockquote>

<p>Once you defined a custom component, you can create instances of this component, that reference entities in the scene. When you create an instance of a component, you provide values to each of the fields in the component’s schema. The values must comply with the declared types of each field.</p>

<p>Each entity that has the component added to it instances a new copy of the component, holding specific data for that entity.</p>

<p>Your custom component can also perform the other common functions that are available on other components:</p>

<h2>About the componentName</h2>

<p>Each component must have a unique component name or identifier, that differentiates it internally. You won’t need to use this internal identifier anywhere else in your code. A good practice is to use the same name you assign to the component, but starting with a lower case letter, but all that really matters is that this identifier is unique within the project.</p>

<p>When creating components that will be shared as part of a library, be mindful that the component names in your library must not overlap with any component names in the project where it’s being used, or on other libraries that are also used by that project. To avoid the risk of any overlap, the recommended best practice is to include the name of the library as part of the</p>

<code>componentName</code>

<p>string. You can follow this formula:</p>

<code>${packageName}::${componentName}</code>

<p>. For example if you build a</p>

<code>MyUtilities</code>

<p>library that includes a</p>

<code>MoveEntity</code>

<p>component, set the</p>

<code>componentName</code>

<p>of that component to</p>

<code>MyUtilities::moveEntity</code>

<p>.</p>

<h2>Components as flags</h2>

<p>You may want to add a component that simply flags an entity to differentiate it from others, without using it to store any data. To do this, leave the schema as an empty object.</p>

<p>This is especially useful when using</p>

<p>. A simple flag component can be used tell entities apart from others, and avoid having the system iterate over more entities than needed.</p>

<p>You can then create a system that iterates over all entities with this component.</p>

<h2>Component Schemas</h2>

<p>A schema describes the structure of the data inside a component. A component can store as many fields as you want, each one must be included in the schema’s structure. The schema can include as many levels of nested items as you need.</p>

<p>Every field in the schema must include a type declaration. You can only use the special schema types provided by the SDK. For example, use the type</p>

<code>Schemas.Boolean</code>

<p>instead of type</p>

<code>boolean</code>

<p>. Write</p>

<code>Schemas.</code>

<p>and your IDE will display all the available options.</p>

<p>The example above defines a component who’s schema holds two values, a</p>

<code>spinning</code>

<p>boolean and a</p>

<code>speed</code>

<p>floating point number.</p>

<p>You can chose to create the schema inline while defining the component, or for more legibility you can create it and then reference it.</p>

<strong>💡 Tip</strong>

<blockquote>: When creating an instance of a component, the VS Studio autocomplete options will suggest what fields you can add to the component by pressing</blockquote>

<em>Ctrl + Space</em>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: All values in a custom component are optional when instancing a component. There is no mechanism to define default values for these fields when instancing the component, but you can define systems that execute default behaviors if no values are present for a given field.</blockquote>

<h3>Default Schema types</h3>

<p>The following basic types are available for using within the fields of a schema:</p>

<code>Schemas.Boolean</code>

<code>Schemas.Byte</code>

<code>Schemas.Double</code>

<code>Schemas.Float</code>

<code>Schemas.Int</code>

<code>Schemas.Int64</code>

<code>Schemas.Number</code>

<code>Schemas.Short</code>

<code>Schemas.String</code>

<code>Schemas.Entity</code>

<p>The following complex types also exist. They each include a series of nested properties with numerical values.</p>

<code>Schemas.Vector3</code>

<code>Schemas.Quaternion</code>

<code>Schemas.Color3</code>

<code>Schemas.Color4</code>

<strong>💡 Tip</strong>

<blockquote>: See</blockquote>

<blockquote>and</blockquote>

<blockquote>for more details on how these types of data are useful.</blockquote>

<p>For example, you can use these schema types in a component like this to track the gradual movement of an entity. This component stores an initial and a final position as Vector3 values, as well as a speed and fraction of the completed path as float numbers. See</p>

<p>for the full implementation of this example.</p>

<h3>Array types</h3>

<p>To set the type of a field as an array, use</p>

<code>Schemas.Array()</code>

<p>. Pass the type of the elements in the array as a property.</p>

<h3>Nested schema types</h3>

<p>To set the type of a field to be an object, use</p>

<code>Schemas.Map()</code>

<p>. Pass the contents of this object as a property. This nested object is essentially a schema itself, nested within the parent schema.</p>

<p>Alternatively, to keep things more readable and reusable, you could achieve the same by defining the nested schema separately, then referencing it when defining the parent schema.</p>

<h3>Enums types</h3>

<p>You can set the type of a field in a schema to be an enum. Enums make it easy to select between a finite number of options, providing human-readable values for each.</p>

<p>To set the type of a field to an enum, you must first define the enum. Then you can refer to it using</p>

<code>Schemas.EnumNumber</code>

<p>or</p>

<code>Schemas.EnumString</code>

<p>, depending on the type of enum. You must pass the enum to reference between</p>

<code><></code>

<p>, as well as the type as a parameter (either</p>

<code>Schemas.Int</code>

<p>for number enums, or</p>

<code>Schemas.String</code>

<p>for string enums). You must also pass a default value to use for this field.</p>

<h3>Interchangeable types</h3>

<p>You can set the type of a field in a schema to follow a</p>

<code>oneOf</code>

<p>pattern, where different types can be accepted.</p>

<p>When creating an instance of the component, you need to specify the selected type with a</p>

<code>$case</code>

<p>, for example:</p>

<h2>Default values</h2>

<p>It’s often good to have default values in your components, so that it’s not necessary to explicitly set each value every time you create a new copy.</p>

<p>The</p>

<code>engine.defineComponent()</code>

<p>function takes in a third argument, that lets you pass an object with values to use by default. This object can include some or all of the values in the schema. Values that are not provided in the defaults will need to always be provided when initializing a copy of the component.</p>

<p>The above example creates a</p>

<code>WheelSpinComponent</code>

<p>component that includes both a schema and a set of default values to use. If you then initialize a copy of this component without specifying any values, it will use those set in the default.</p>

<h2>Building systems to use a component</h2>

<p>With your component defined and added to entities in your scene, you can create systems to perform logic, making use of this data stored on the component.</p>

<p>The example above defines a system that iterates over all entities that include the custom</p>

<code>wheelSpinComponent</code>

<p>, and rotates them slightly on every tick of the game loop. The amount of this rotation is proportional to the</p>

<code>speed</code>

<p>value stored on each entity’s instance of the component. The example makes use of</p>

<p>to obtain only the relevant entities.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/custom-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/querying-components/

<title>Querying components | Decentraland Documentation</title>

<strong>Querying components</strong>

<h1>Querying components</h1>

<p>You can</p>

<p>with the method</p>

<code>engine.getEntitiesWith(...components)</code>

<p>to keep track of all entities in the scene that have certain components.</p>

<p>typically iterate over the entities in these queries, performing the same operations on each. Having a predefined group of valid entities is a great way to save resources, specially for functions that run on every tick of the game loop. If on every tick your system would have to iterate over every single entity in the scene looking for the ones it needs, that would be very inefficient.</p>

<p>You can access the entities in a query in the following way.</p>

<h2>Required components</h2>

<p>When making a query, specify what components need to be present in every entity that’s added to the group. You can list as many components as you want, the query will only return entities that have</p>

<strong>all</strong>

<p>of the listed components.</p>

<strong>💡 Tip</strong>

<blockquote>: If your query returns entities that you don’t need to deal with, consider creating a custom component to act as a</blockquote>

<blockquote>. This component doesn’t need to have any properties in it, but can be used to mark a specific subgroup of entities that you might want to treat differently.</blockquote>

<h2>Use queries in a system</h2>

<p>In the example above, the</p>

<code>PhysicsSystem</code>

<p>function iterates over the entities in the query, that is executed on every tick of the game loop.</p>

<p>If the scene has several</p>

<em>ball</em>

<p>entities, each with a</p>

<code>Position</code>

<p>and a</p>

<code>Physics</code>

<p>component, then they will be handled, and their position will be updated on each tick.</p>

<p>If your scene also has other entities, for example a</p>

<em>hoop</em>

<p>and a</p>

<em>scoreBoard</em>

<p>that only have a</p>

<code>Transform</code>

<p>but not a</p>

<code>Physics</code>

<p>component, then they won’t be affected by</p>

<code>PhysicsSystem</code>

<p>.</p>

<h2>Dealing with the entities and components</h2>

<p>The</p>

<code>getEntitiesWith</code>

<p>function returns a collection, that includes references to a set of entities and can also optionally include references to the listed components.</p>

<p>Using the simplest syntax, you fetch only a list of references to the corresponding entities.</p>

<p>While iterating on this list of entities, you can then fetch read-only or mutable versions of their components, by using</p>

<code>.get</code>

<p>or</p>

<code>getMutable</code>

<p>.</p>

<p>You can optionally also fetch references to each of the listed components directly on as part of the collection returned by the query. To do this, simply declare multiple references together, one for each component you want to fetch. Adding these references is optional, and you don’t need to declare references to</p>

<em>all</em>

<p>the components in the query either.</p>

<strong>📔 Note</strong>

<blockquote>: These references are read-only. To fetch mutable versions of those components, you need to use the</blockquote>

<code>.getMutable</code>

<blockquote>function referencing the entity.</blockquote>

<p>You can then refer to these references as you iterate over the collection of results, in each entry you’ll have access to the entity and its corresponding component references.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/querying-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#components-as-flags

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than an id, that can be referenced by components. The entity itself has no properties or methods of its own, it simply serves to group several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>Transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>MeshRenderer</code>

<p>component gives the entity a visible shape (like a cube or a sphere) when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You can also create custom components to serve your scene’s required data, for example a custom</p>

<code>health</code>

<p>could store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, Entities were</blockquote>

<em>objects</em>

<blockquote>that were instanced, and could be extended to add functions. As of version 7.0 of the SDK, entities are only an ID. This structure better fits the principles of</blockquote>

<blockquote>and can help in the scene’s performance.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough for the engine to change how the scene is rendered in the next frame.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>Components are meant to store data about their referenced entity. They can only store this data, they can’t modify this data themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<h2>Syntax for entities and components</h2>

<p>The example below shows some basic operations for declaring, and configuring basic entities and components.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, it was necessary to manually add an entity to the engine to start rendering it. As of version 7 of the SDK, entities are implicitly added to the engine as soon as they are assigned a component.</blockquote>

<p>When a component is created, it’s always assigned to a parent entity. The component’s values then affect the entity.</p>

<h2>Remove entities</h2>

<p>To remove an entity from the engine, use</p>

<code>engine.removeEntity()</code>

<p>If a removed entity has any child entities, these change their parent back to the default</p>

<code>engine.RootEntity</code>

<p>entity, which is positioned at the scene base position, with a scale of</p>

<em>1</em>

<p>.</p>

<p>To remove an entity and also all of its children (and any children of its children, recurrently), use the</p>

<code>removeEntityWithChildren()</code>

<p>helper.</p>

<strong>💡 Tip</strong>

<blockquote>: Instead of removing an entity from the engine, in some cases it might be better to make it invisible, in case you want to be able to load it again without any delay. See</blockquote>

<h3>Removing entities behind the scenes</h3>

<p>An entity is just an id that is referenced by its components. So when removing an entity you’re really removing each of the components that reference this entity. This means that if you manually remove all of the components of an entity, it will have the same effect as doing</p>

<code>engine.removeEntity()</code>

<p>.</p>

<p>Once the entity’s components are removed, that entity’s id is free to be referenced by new components as a fresh new entity.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, the child entity must have a</p>

<code>Transform</code>

<p>component. You can then set the</p>

<code>parent</code>

<p>field with a reference to the parent entity.</p>

<p>Once a parent is assigned, it can be read off the child entity from the</p>

<code>parent</code>

<p>field on its</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity has a</p>

<code>Transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected. Any position or rotation values are added, any scale values are multiplied.</p>

<p>If either the parent or child entity doesn’t have a</p>

<code>Transform</code>

<p>component, the following default values are used.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To separate a child entity from its parent, you can assign the entity’s parent to</p>

<code>engine.RootEntity</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: When dealing with nested entities that are synced with other players, use the</blockquote>

<code>parentEntity()</code>

<blockquote>function instead of the</blockquote>

<code>parent</code>

<blockquote>entity in the Transform. See</blockquote>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique number</p>

<em>id</em>

<p>. You can retrieve a component that refers to a specific entity from the engine based on this ID.</p>

<strong>📔 Note</strong>

<blockquote>: The entity ids between</blockquote>

<em>0</em>

<blockquote>and</blockquote>

<em>511</em>

<blockquote>are reserved by the engine for fixed entities, like the player avatar, the base scene, etc.</blockquote>

<p>For example, if a player’s click or a</p>

<p>hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the Transform component of the entity that matches that id. You can also fetch any other component of that entity in the same way.</p>

<h2>Get an entity by name</h2>

<p>When using the Decentraland Editor and adding entities via the drag-and-drop inspector, each entity has a unique name. Use the</p>

<code>engine.getEntityOrNullByName()</code>

<p>function to reference one of these entities from your code. Pass the entity’s name as a string, as written on the inspector’s UI, in the tree view on the left.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you only use</blockquote>

<code>engine.getEntityOrNullByName()</code>

<blockquote>inside the</blockquote>

<code>main()</code>

<blockquote>function, in functions that run after</blockquote>

<code>main()</code>

<blockquote>, or in a system. If used outside one of those contexts, the entities created in the Editor´s inspector may not yet be instanced.</blockquote>

<p>You’re free to perform any action on an entity fetched via this method, like add or remove components, modify values of existing components, or remove the entity from the engine.</p>

<p>All the entities added via the inspector have a</p>

<code>Name</code>

<p>component, you can iterate over all of them like this:</p>

<h2>Add or replace a component</h2>

<p>Each entity can only have one component of a given kind. For example, if you attempt to assign a Transform to an entity that already has one, this will cause an error.</p>

<p>To prevent this error, you can use</p>

<code>.createOrReplace</code>

<p>instead of</p>

<code>.create</code>

<p>. This command overwrites any existing components of the same kind if they exists, otherwise it creates a new component just like</p>

<code>.create</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Since</blockquote>

<code>.createOrReplace</code>

<blockquote>runs an additional check before creating the component, it’s always more performant to use</blockquote>

<code>.create</code>

<blockquote>. If you’re sure that the entity doesn’t already have a component like the one you’re adding, use</blockquote>

<code>.create</code>

<blockquote>.</blockquote>

<h2>Access a component from an entity</h2>

<p>You can access components of an entity by using the entity’s</p>

<code>.get()</code>

<p>or the</p>

<code>getMutable()</code>

<p>functions.</p>

<p>The</p>

<code>get()</code>

<p>function fetches a read-only reference to the component. You cannot change any values from this reference of the component.</p>

<p>If you wish to change the values of the component, use the</p>

<code>getMutable()</code>

<p>function instead. If you change the values in the mutable version of the component, you’re directly affecting the entity that component belongs to.</p>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Only use</blockquote>

<code>getMutable()</code>

<blockquote>if you’re actually going to make changes to the component’s values. Otherwise, always use</blockquote>

<code>get()</code>

<blockquote>. This practice follows the principles of</blockquote>

<blockquote>, and can significantly help in the scene’s performance.</blockquote>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getOrNull()</code>

<p>or</p>

<code>getMutableOrNull()</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Avoid using</blockquote>

<code>getOrNull()</code>

<blockquote>or</blockquote>

<code>getMutableOrNull()</code>

<blockquote>when possible, as these functions involve additional checks that and are therefore less efficient than</blockquote>

<code>.get()</code>

<blockquote>and</blockquote>

<code>getMutable()</code>

<blockquote>.</blockquote>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>get()</code>

<li>and</li>

<code>getMutable()</code>

<li>returns an error.</li>

<code>getOrNull()</code>

<li>and</li>

<code>getMutableOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, use the entity’s</p>

<code>deleteFrom()</code>

<p>method of the component type.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<strong>📔 Note</strong>

<blockquote>: To remove all the components of an entity at once, see</blockquote>

<h2>Check for a component</h2>

<p>You can check if an entity owns an instance of a certain component by using the</p>

<code>has()</code>

<p>function. This function returns</p>

<em>true</em>

<p>if the component is present, and</p>

<em>false</em>

<p>if it’s not. This can be very handy for using in conditional logic in your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also</blockquote>

<blockquote>to fetch a full list of components that hold a specific component, or a specific set of components. Do not iterate over all entities in the scene manually to check each with a</blockquote>

<code>has()</code>

<blockquote>, that approach is a lot less efficient.</blockquote>

<h2>Reserved entities</h2>

<p>Certain entity ids are reserved for special entities that exist in every scene. They can be accessed via the following aliases:</p>

<code>engine.RootEntity</code>

<code>engine.PlayerEntity</code>

<code>engine.CameraEntity</code>

<strong>📔 Note</strong>

<blockquote>: Avoid referring to these entities before they are initialized. To avoid this problem, refer to these entities in the</blockquote>

<code>main()</code>

<blockquote>function, or in a system.</blockquote>

<h3>The root entity</h3>

<p>All entities in the scene are children of the</p>

<code>engine.RootEntity</code>

<p>, directly or indirectly.</p>

<h3>The player entity</h3>

<p>The</p>

<code>engine.PlayerEntity</code>

<p>entity represents the player’s avatar. Fetch the player’s</p>

<code>Transform</code>

<p>component to get the player’s current position and rotation, see</p>

<p>. You can also modify this Transform to move the player, see</p>

<p>.</p>

<h3>The camera entity</h3>

<p>The</p>

<code>engine.CameraEntity</code>

<p>entity represents the player’s camera.

Fetch the camera’s</p>

<code>Transform</code>

<p>component to get the camera’s position and rotation. You can also fetch the camera’s</p>

<code>CameraMode</code>

<p>component to know know if the player is using 1st or 3rd person camera mode, see</p>

<p>.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#components-as-flags

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/mutable-data/

<title>Data mutability | Decentraland Documentation</title>

<strong>Data mutability</strong>

<h1>Data mutability</h1>

<p>When referencing data from a</p>

<p>, you can either fetch the mutable or the read-only (immutable) version.</p>

<p>You should always deal with the read-only versions of data when possible. This practice can bring a very significant improvement in the performance of your scene, when compared to always dealing with mutable versions of that same data.</p>

<p>The</p>

<code>.get()</code>

<p>function in a component returns a read-only (immutable) version of the component. You can only read its values, but can’t change any of the properties on it.</p>

<p>The</p>

<code>.getMutable()</code>

<p>function returns a version of the component that allows you to change its values. Use mutable versions only when you plan to make changes to a component, otherwise, always use</p>

<code>get()</code>

<p>.</p>

<p>A good practice is to iterate over read-only components to check values, and then only fetch the mutable version of an individual component when a change is required.</p>

<p>In the example above, a system checks the read-only values of an entity’s</p>

<code>Transform</code>

<p>component. On every tick it checks to see if the position’s</p>

<em>y</em>

<p>is higher than a hard-coded maximum height. If the height on the transform happens to be above this limit, then and only then we fetch the mutable version of the Transform. This may seem like extra work for the scene, but in a scene where we’re checking values on every tick of the game loop, and only making changes occasionally, it results in huge performance gains.</p>

<p>This practice follows the principles of</p>

<p>. It’s also gradually being adopted as an industry standard practice in the gaming, because of how much of an improvement it makes.</p>

<strong>📔 Note</strong>

<blockquote>: In older versions of the SDK (6.x or older), components were always treated as mutable. That pattern may be a bit more straight forward to learn, but was a lot less efficient to run.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#components-as-flags

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/

<title>Player data | Decentraland Documentation</title>

<strong>Player data</strong>

<h1>Player data</h1>

<h2>Track player position and rotation</h2>

<p>Use the</p>

<code>PlayerEntity</code>

<p>and the</p>

<code>CameraEntity</code>

<p>to know the player’s position and rotation, by checking their</p>

<code>Transform</code>

<p>components.</p>

<strong>PlayerEntity position</strong>

<li>: The avatar’s position, at chest height. Approximately at 0.88 cm above the ground.</li>

<strong>PlayerEntity rotation</strong>

<li>: The direction in which the avatar is facing, expressed as a quaternion.</li>

<strong>CameraEntity position</strong>

<li>:</li>

<li>In 1st person: Equal to the avatar’s position, but at eye-level. Approximately at 1.75 cm above the ground.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<strong>PlayerEntity rotation</strong>

<li>:</li>

<li>In 1st person: Similar to the direction in which the avatar is facing, expressed as a quaternion. May be rounded slightly differently from the player’s rotation.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<p>The</p>

<code>Camera</code>

<p>object exposes information about the player’s point of view in your scene.</p>

<code>Camera.instance.position</code>

<li>returns a 3D vector with the coordinates of the avatar’s center, relative to the scene. When the player is on the ground, the height of this point is approximately</li>

<em>1.177</em>

<li>m. In 3rd person camera mode, this value refers also to the avatar’s center, not to the position of the 3rd person camera.</li>

<code>Camera.instance.feetPosition</code>

<li>returns a 3D vector with the coordinates of the player’s feet relative to the scene. When the player is at ground level, the height is nearly 0.155.</li>

<code>Camera.instance.worldPosition</code>

<li>returns a 3D vector with the coordinates of the player’s center, relative to the whole of Genesis City. For example, if the scene is in coordinates</li>

<em>100,-100</em>

<li>, and the player is standing on the bottom-left corner of that scene, the player’s world position will be about</li>

<em>1600, 1.177, -1600</em>

<code>Camera.instance.rotation</code>

<li>returns a quaternion with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<code>Camera.instance.rotation.eulerAngles</code>

<li>returns a Vector3 with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<p>The example above uses the player’s rotation to set that of a cube in the scene.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.PlayerEntity</code>

<p>or the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entities are not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to these entities in a system, they will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Get player data</h2>

<p>The following data can be fetched from a player:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The player’s user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.</li>

<code>hasConnectedWeb3</code>

<li>:</li>

<em>(boolean)</em>

<li>Indicates if the player has a public key.</li>

<em>True</em>

<li>if the player has one.</li>

<code>publicKey</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player’s Ethereum wallet. If the player logs in as a guest, with no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>avatar</code>

<li>: A nested object with data about the player’s appearance.</li>

<code>version</code>

<li>:</li>

<em>(number)</em>

<li>A version number that increases by one every time the player changes any of their settings. Use this if you encounter conflicting data, to know what version is more recent.</li>

<strong>📔 Note</strong>

<blockquote>: For any Ethereum transactions with the player, always use the</blockquote>

<code>publicKey</code>

<blockquote>field, instead of the</blockquote>

<code>userId</code>

<blockquote>, to avoid dealing with non-existing wallets.</blockquote>

<p>The</p>

<code>avatar</code>

<p>object has the following nested information:</p>

<code>wearables</code>

<p>:</p>

<code>WearableId[]</code>

<p>An array of identifiers for each of the wearables that the player is currently wearing. For example</p>

<code>urn:decentraland:off-chain:base-avatars:green_hoodie</code>

<p>. All wearables have a similar identifier, even if they’re NFTs.</p>

<code>bodyShape</code>

<p>: An identifier for the avatar’s general body shape. Either</p>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<p>for female or</p>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<p>for male.</p>

<code>skinColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s skin color.</p>

<code>hairColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s hair color.</p>

<code>eyeColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s eye color.</p>

<code>snapshots</code>

<p>: A nested object with base64 representations of .jpg images of the player in various resolutions.</p>

<code>face256</code>

<li>:</li>

<em>string</em>

<li>The player’s face as a 256x256 pixel image.</li>

<code>body</code>

<li>:</li>

<em>string</em>

<li>The full resolution image of the player standing straight, with 512x1024 pixels.</li>

<strong>❗Warning</strong>

<blockquote>The snapshots of the avatar will be deprecated in the future and will no longer be returned as part of an avatar’s data. The recommended approach is to use</blockquote>

<code>AvatarTexture</code>

<blockquote>instead, see</blockquote>

<blockquote>.</blockquote>

<h4>Data from current player</h4>

<p>To obtain information from the current player that’s running the scene, use</p>

<code>getUserData()</code>

<p>.</p>

<p>The example below imports the</p>

<code>~system/UserIdentity</code>

<p>namespace and runs</p>

<code>getUserData()</code>

<p>.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getUserData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h4>Data from nearby players</h4>

<p>You can obtain data from other players that are nearby, by calling</p>

<code>getPlayerData()</code>

<p>, passing the id of a Decentraland account.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getPlayerData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getPlayerData()</code>

<p>can only fetch data from players who are currently nearby. They don’t have to be necessarily standing in the same scene, but in visual range, that’s because this information is being fetched from the local engine that’s rendering these avatars. To try this out in preview, open a second tab and log in with a different account.</p>

<strong>📔 Note</strong>

<blockquote>: User IDs must always be lowercase. If copying a wallet address, make sure all the characters are set to lowercase.</blockquote>

<p>To know what players are being rendered in the surroundings, use</p>

<code>getConnectedPlayers()</code>

<p>. This function returns an array with the ids of all the players that are currently being rendered, which are all eligible to call with</p>

<code>getPlayerData()</code>

<p>. You can pair this with listening for new players connecting and disconnecting by using</p>

<code>onPlayerConnectedObservable</code>

<p>and</p>

<code>onPlayerDisconnectedObservable</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>will be deprecated on future versions of the SDK.</blockquote>

<p>As an alternative, you can use</p>

<code>getPlayersInScene()</code>

<p>to only fetch the players that are standing within the scene boundaries and also being rendered. You can pair this with listening to new players entering and leaving the scene by using</p>

<code>onEnterSceneObservable</code>

<p>and</p>

<code>onLeaveSceneObservable</code>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more about</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>in</blockquote>

<blockquote>and about about</blockquote>

<code>onEnterSceneObservable</code>

<blockquote>and</blockquote>

<code>onLeaveSceneObservable</code>

<blockquote>in</blockquote>

<blockquote>.</blockquote>

<p>Listen for events when players connect and disconnect

As more players connect and disconnect, you can pic</p>

<h4>Data from any player</h4>

<p>To obtain information from any player, make a</p>

<p>to the content servers. This returns the same information as the</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>functions, detailed at the start of the section.</p>

<p>This information is exposed in the following URL, appending the player’s user id to the url parameter.</p>

<code>https://peer.decentraland.org/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<p>Unlike</p>

<code>getPlayerData()</code>

<p>, this option is not limited to just the players who are currently being rendered in the surroundings. With this approach you can fetch data from any player that has logged onto the servers in the past.</p>

<p>If you know which server the player you want to query is connected to, you can get more up-to-date data by sending your requests to that specific server. For example, if the player changes clothes, this information will be available instantly in the player’s server, but will likely take a couple of minutes to propagate to the</p>

<code>peer.decentraland.org</code>

<p>server.</p>

<code>https://<player server>/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: You can obtain the current player’s server by fetching</blockquote>

<code>getRealm().domain</code>

<blockquote>.</blockquote>

<p>This example combines</p>

<code>getUserData()</code>

<p>and</p>

<code>getRealm()</code>

<p>to obtain the player’s data directly from the server that the player is on:</p>

<h2>Get Portable Experiences</h2>

<p>Portable experiences are essentially scenes that are not constrained to parcels of land. Players can carry these with them anywhere they go in Decentraland, adding a new layer of content over the world. Smart Wearables are examples of portable experiences. You may want to know if a player is wearing one of these, since a smart wearable may enable players to have abilities that could be considered cheating in a competitive game. For example, in a platform game, a player that wears a jetpack has a very unfair advantage over others.</p>

<p>As a scene creator, you may want to limit what players wearing portable experiences can do in your scene. Use</p>

<code>getPortableExperiencesLoaded()</code>

<p>to check if the player has any portable experiences currently activated.</p>

<code>getPortableExperiencesLoaded()</code>

<p>returns an array of objects, each of these objects includes an</p>

<code>id</code>

<p>attribute. In the case of wearables, the id is the wearable’s URN.</p>

<h2>Get detailed info about a player’s wearables</h2>

<p>The</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>return only a list of wearable ids, without information about each wearable. If instead of individual wearables you want to check for any wearable of a specific category (eg: hats), or any wearable of a specific rarity (eg: Mythic), then you’ll need to fetch more detailed information about the player’s wearables.</p>

<p>Make a</p>

<p>to the following URL, to obtain a full updated list of all wearables that are currently usable, with details about each.</p>

<code>${playerRealm.realmInfo.baseUrl}/lambdas/collections/wearables-by-owner/${userData.userId}?includeDefinitions</code>

<strong>📔 Note</strong>

<blockquote>: To construct this URL, you must obtain the realm (likely with with</blockquote>

<code>getRealm()</code>

<blockquote>) and the player’s id (likely with</blockquote>

<code>getUserData()</code>

<blockquote>)</blockquote>

<p>This feature could be used together with fetching info about the player, to for example only allow players to enter a place if they are wearing any wearable from the halloween collection, or any wearable that is of</p>

<em>legendary</em>

<p>rarity.</p>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<h2>Check the player’s camera mode</h2>

<p>Players can either be using a 1st or 3rd person camera when exploring Decentraland. Check which of these the player is using by checking the value</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>entity.</p>

<p>The camera mode uses a value from the</p>

<code>CameraType</code>

<p>enum. The following values are possible:</p>

<code>CameraType.CT_FIRST_PERSON</code>

<code>CameraType.CT_THIRD_PERSON</code>

<p>The</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to change camera mode through this.</p>

<strong>💡 Tip</strong>

<blockquote>: To change the player’s camera mode, use a</blockquote>

<blockquote>.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when in 3rd person.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Check if the player has the cursor locked</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>Check the</p>

<code>PointerLock</code>

<p>component of the scene’s</p>

<p>to find out what the current cursor mode is.</p>

<p>The</p>

<code>PointerLock</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to lock or unlock the cursor.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/async-functions/#the-executetask-function

<title>Asynchronous code | Decentraland Documentation</title>

<strong>Asynchronous code</strong>

<h1>Asynchronous code</h1>

<h2>Overview</h2>

<p>Most of the code in your scene runs synchronously using a single thread. That means that commands are executed sequentially line by line. Each command must first wait for the previous command to finish executing before it can start.</p>

<p>Even the functions in your scene’s systems are executed one by one, following a</p>

<p>.</p>

<p>Running code synchronously ensures consistency, as you can always be sure you’ll know the order in which the commands in your code run.</p>

<p>On the other hand, your scene needs to be updated many times per second, building the next frame. If a part of your code takes too long to respond, then the whole main thread is stuck and this results in lagging frame rates.</p>

<p>That’s why, in some cases you want some commands to run asynchronously. This means that you can start off a task in a new thread, and meanwhile the main thread can keep running over the the next lines of code.</p>

<p>This is especially useful for tasks that rely on external services that could take time to respond, as you don’t want that idle time waiting for that response to block other tasks.</p>

<p>For example:</p>

<li>When retrieving data from a REST API</li>

<li>When performing a transaction on the blockchain</li>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that several frames of your scene might be rendered before the task finishes executing. Make sure your scene’s code is flexible enough to handle the in-between scenarios while the asynchronous task is being completed.</blockquote>

<h2>Run an async function</h2>

<p>Mark any function as</p>

<code>async</code>

<p>so that it runs on a separate thread from the scene’s main thread every time that it’s called.</p>

<h2>The executeTask function</h2>

<p>The</p>

<code>executeTask()</code>

<p>function executes a lambda function asynchronously, in a separate thread from the scene’s main thread.</p>

<code>executeTask()</code>

<p>allows us to declare and execute the function all in one same statement.</p>

<h2>The then function</h2>

<p>The</p>

<code>then</code>

<p>function takes in a lambda function as an argument, that only gets executed once the prior statement is finished. This lambda function can optionally have inputs that are mapped from whatever the prior statement returns.</p>

<strong>📔 Note</strong>

<blockquote>: It’s generally better to use the</blockquote>

<code>executeTask</code>

<blockquote>approach rather than the</blockquote>

<code>then</code>

<blockquote>function. In this example, the scene won’t be considered fully loaded by the explorer till the</blockquote>

<code>myAsyncTask()</code>

<blockquote>function is completed, which may affect load times. Also, if relying too much on the</blockquote>

<code>then</code>

<blockquote>function at multiple nested levels, you can end up with what’s known as “callback hell”, where the code can become very hard to read and maintain.</blockquote>

<h2>PointerEvents and RayCast functions</h2>

<p>When your scene uses a</p>

<code>PointerEvent</code>

<p>or a</p>

<code>RayCast</code>

<p>component, the calculations of collisions are carried out async in the engine. The engine then returns a results event to the scene, which can arrive one or several ticks of the game loop later than when the event was invoked.</p>

<p>You then need to create a system to process these results in the frame when they arrive.</p>

<strong>📔 Note</strong>

<blockquote>: If you handle clicks via the</blockquote>

<strong>Register a callback</strong>

<blockquote>approach, you don’t need to explicitly create a system to handle this, but the same occurs in the background.</blockquote>

<p>See</p>

<p>and</p>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: If the processing of the results of a raycast takes a lot of calculations (like running a path-finding algorithm) you might want to run that computation in an asynchronous function.</blockquote>

<h2>The await statement</h2>

<p>An</p>

<code>await</code>

<p>statement forces the execution to wait for a response before moving over to the next line of code.</p>

<code>await</code>

<p>statements can only be used inside an async block of code.</p>

<p>The example above executes a function that includes a</p>

<code>fetch()</code>

<p>operation to retrieve data from an external API. The</p>

<code>fetch()</code>

<p>operation is asynchronous, as we can’t predict how long the server will take to respond. However, the next line needs the output of this operation to be ready before we can parse it as a json. The</p>

<code>await</code>

<p>statement here ensures that the next line will only run once that operation has returned a value. Similarly, the</p>

<code>response.json()</code>

<p>function is also asynchronous, but the next line needs the json to be parsed before it can log it. The second</p>

<code>await</code>

<p>statement forces the next line to only be called once the parsing of the json is finished, however long it takes.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/async-functions/#the-executetask-function

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/systems/#system-execution-order

<title>Systems | Decentraland Documentation</title>

<strong>Systems</strong>

<h1>Systems</h1>

<p>Decentraland scenes rely on</p>

<em>systems</em>

<p>to update any data over time, including information stored in each entity’s</p>

<p>.</p>

<em>systems</em>

<p>are what make scenes dynamic, they’re functions that are executed periodically on every tick of the scene’s game loop, changing what will be rendered.</p>

<p>The following example shows a basic system declaration:</p>

<p>The function in a system can perform anything you want. Typically, it will act upon all the entities that meet certain</p>

<p>, following certain logic to change the values stored in the entity’s components.</p>

<p>In the example above, the system</p>

<code>MoveSystem</code>

<p>is a function that runs on each tick of the game loop, changing position of every entity in the scene that has a Transform.</p>

<p>You can have multiple systems in your scene to decouple different behaviors, making your code cleaner and easier to scale and reuse. For example, one system might handle physics, another might make an obstacle entity move back and forth continuously, another could handle the AI of characters.</p>

<p>Multiple systems can act on a single entity. For example a non-player character might move on its own based on an AI, but also be affected by gravity when accidentally walking from off a cliff. In that scenario, the physics and the AI systems don’t even need to know about each other. They independently reassess their current state on each tick of the game loop and implement their own separate logic.</p>

<h2>The system function</h2>

<p>A system’s function is executed periodically, once per every tick of the game loop. This happens automatically, you don’t need to explicitly call this function from anywhere in your code.</p>

<p>In a Decentraland scene, you can think of the game loop as the aggregation of all the system functions in your scene.</p>

<strong>📔 Note</strong>

<blockquote>: If you add multiple instances of a same system to the engine, the function will be executed multiple times per tick of the game loop. For example, adding a system twice could result in an entity moving at twice the speed as expected, as it advances two increments on each tick.</blockquote>

<h2>Handle entities by reference</h2>

<p>Some components and systems are meant for using only on one entity in the scene. For example, on an entity that stores a game’s score or perhaps a main gate that is unique in the scene. To access one of those entities within a system, you can simply refer to the entity or its components by name in the system’s functions.</p>

<p>For larger projects, we recommend that you keep system definitions on separate files from the instancing of entities and components.</p>

<h2>Loop over a component query</h2>

<p>A lot of times, your scene will have multiple entities of the same type that will have similar behaviors. For example many doors that can be opened, or many enemies that can attack the player. It makes sense to handle all of these similar entities in a single system, iterating over the list and performing the same checks on each.</p>

<p>You don’t want a system’s function to iterate over</p>

<em>the entire</em>

<p>set of entities in the scene, as this could be very costly in terms of processing power. To avoid this, you can</p>

<p>, to only iterate over the relevant entities.</p>

<p>For example, your scene can have a</p>

<code>PhysicsSystem</code>

<p>that calculates the effect of gravity over the entities of your scene. Some entities in your scene, such as trees, are not meant to ever move; so it would be smart to avoid calculating the effects of gravity on these. You can define a</p>

<code>HasPhysics</code>

<p>component to mark entities that could be affected by gravity, and then have</p>

<code>PhysicsSystem</code>

<p>only deal with the entities returned by this query.</p>

<h2>Delta time between frames</h2>

<p>The function in a system can optionally include an argument called</p>

<code>dt</code>

<p>, of type</p>

<code>number</code>

<p>(representing</p>

<em>delta time</em>

<p>).</p>

<em>delta time</em>

<p>represents time that passed since the last tick of the game loop, in seconds.</p>

<p>Decentraland scenes are updated by default at 30 ticks per second. This means that the</p>

<code>dt</code>

<p>argument passed to all systems will tend to equal to</p>

<em>1/30</em>

<p>(0.0333…).</p>

<p>If the processing of a frame takes less time than this interval, then the engine will wait the remaining time to keep updates regularly paced and</p>

<code>dt</code>

<p>will remain equal to</p>

<em>1/30</em>

<p>.</p>

<p>If the processing of a frame takes longer than</p>

<em>1/30</em>

<p>seconds, the drawing of that frame is delayed. The engine then tries to finish that frame and show it as soon as possible. It then proceeds to the next frame and tries to show it</p>

<em>1/30</em>

<p>seconds after the last frame. It doesn’t compensate for the previous delay.</p>

<p>Ideally, you should avoid your scene dropping frames, as it impacts the quality of the player’s experience. Since this is dependant on the processing power of the player’s machine, it’s always a possibility that your scene should be ready to handle gracefully.</p>

<p>The</p>

<code>dt</code>

<p>variable is useful when frame processing exceeds the default time. Assuming that the current frame will take as much time as the previous one, this information may be used to calculate how much to adjust a gradual change, so that the rate of change appears steady and in proportion to the lag between frames.</p>

<p>See</p>

<p>for examples of how to use</p>

<code>dt</code>

<p>to make movement smoother.</p>

<h2>Loop at a timed interval</h2>

<p>If you want a system to execute something at a regular time interval, you can do this by combining the</p>

<code>dt</code>

<p>argument with a timer.</p>

<p>For more complex use cases, where there may be multiple delays and loops being created dynamically, it may be worth defining a custom component to store an individual timer value for each entity. See</p>

<p>.</p>

<h2>System execution order</h2>

<p>In some cases, when you have multiple systems running, you might care about what system is executed first by your scene.</p>

<p>For example, you might have a</p>

<em>physics</em>

<p>system that updates the position of entities in the scene, and another</p>

<em>boundaries</em>

<p>system that ensures that none of the entities are positioned outside the scene boundaries. In this case, you want to make sure that the</p>

<em>boundaries</em>

<p>system is executed last. Otherwise, the</p>

<em>physics</em>

<p>system could move entities outside the bounds of the scene but the</p>

<em>boundaries</em>

<p>system won’t find out till it’s executed again in the next frame.</p>

<p>When adding a system to the engine, set an optional</p>

<code>priority</code>

<p>field to determine when the system is executed in relation to other systems.</p>

<p>Systems with a lower priority number are executed first, so a system with a priority of</p>

<em>1</em>

<p>is executed before one of priority</p>

<em>5</em>

<p>.</p>

<p>Systems that aren’t given an explicit priority have a default priority of</p>

<em>0</em>

<p>, so these are executed first.</p>

<p>If two systems have the same priority number, there’s no way to know for certain which of them will be executed first.</p>

<h2>Remove a system</h2>

<p>An instance of a system can be added or removed from the engine to turn it on or off.</p>

<p>If a system is defined but isn’t added to the engine, its function isn’t called by the engine.</p>

<p>To remove a system, you must first create a pointer to it when adding it to the engine, so that you can refer to the system later.</p>

<p>Note that to remove the system you need a pointer to the</p>

<em>instance</em>

<p>of the system, not to the system’s class. In the above example,</p>

<code>engine.removeSystem()</code>

<p>is not being passed</p>

<code>mySystem</code>

<p>(the system class declaration). It’s being passed</p>

<code>mySystemInstance</code>

<p>(the instance that was added to the engine). A scene can potentially have multiple instances of a same system running together, so you need to tell the engine which one of those to remove.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/systems/#system-execution-order

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entity-positioning/

<title>Set entity positions | Decentraland Documentation</title>

<strong>Set entity positions</strong>

<h1>Set entity positions</h1>

<p>You can set the</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>of any entity by using the</p>

<code>Transform</code>

<p>component. This can be used on any entity in the 3D space, affecting where the entitiy is rendered. This includes primitive shapes (cube, sphere, plane, etc), 3D text shapes, NFT shapes, and 3D models (</p>

<code>GltfContainer</code>

<p>).</p>

<h2>Editor UI</h2>

<p>When dragging entities via the Inspector, in the</p>

<p>, you are changing the values in the entity’s Transform implicitly. By changing the position, rotation or scale of an entity, this changes the data in that entity’s Transform component.</p>

<h2>Code essentials</h2>

<p>To move, rotate or resize an entity in your scene over a period of time, change the values on this component incrementally, frame by frame. See</p>

<p>for more details and best practices.</p>

<strong>📔 Note</strong>

<p>:</p>

<code>Vector3</code>

<p>and</p>

<code>Quaternion</code>

<p>must be imported via</p>

<code>import { Vector3, Quaternion } from "@dcl/sdk/math"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Position</h2>

<code>position</code>

<p>is a</p>

<em>3D vector</em>

<p>, it sets the position of the entity’s center on all three axes,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>, and</p>

<em>z</em>

<p>. See</p>

<p>for more details.</p>

<p>When setting a position, keep the following considerations in mind:</p>

<p>The numbers in a position vector represent</p>

<em>meters</em>

<p>(unless the entity is a child of a scaled entity).</p>

<p>A scene that is made up of a single parcel measures 16m x 16m. The center of the scene (at ground level) is at</p>

<code>x:8, y:0, z:8</code>

<p>. If the scene is made up of multiple parcels, then the center will vary depending on their arrangement.</p>

<code>x:0, y:0, z:0</code>

<p>refers to the</p>

<em>South-West</em>

<p>corner of the scene’s base parcel, at ground level.</p>

<p>Tip: When viewing a scene preview, a compass appears in the (0,0,0) point of the scene with labels for each axis as reference.</p>

<p>Note: You can change the base parcel of a scene by editing the</p>

<code>base</code>

<p>attribute of</p>

<em>scene.json</em>

<p>.</p>

<p>To better orient yourself, use your</p>

<em>left</em>

<p>hand:</p>

<li>your index finger (pointing forward) is the</li>

<em>z</em>

<li>axis</li>

<li>your middle finger (pointing sideways) is the</li>

<em>x</em>

<li>axis</li>

<li>your thumb (pointing up) is the</li>

<em>y</em>

<li>axis.</li>

<p>If an entity is a child of another, then</p>

<code>x:0, y:0, z:0</code>

<p>refers to the center of its parent entity, wherever it is in the scene.</p>

<p>Every entity in your scene must be positioned within the bounds of the parcels it occupies at all times. If an entity leaves these boundaries, it will raise an error.</p>

<p>Tip: When viewing a scene in preview mode, entities that are out of bounds are highlighted in</p>

<em>red</em>

<p>.</p>

<p>Your scene is also limited in height. The more parcels that make up the scene, the higher you’re allowed to build. See</p>

<p>for more details.</p>

<h2>Rotation</h2>

<code>rotation</code>

<p>is stored as a</p>

<em>quaternion</em>

<p>, a system of four numbers,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>,</p>

<em>z</em>

<p>and</p>

<em>w</em>

<p>. Each of these numbers goes from 0 to 1. See</p>

<p>for more details.</p>

<p>You can also set the rotation field with</p>

<em>Euler</em>

<p>, the more common</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>notation with numbers that go from 0 to 360 that most people are familiar with. To use Euler angles, use one of the following notations:</p>

<p>When using a</p>

<em>3D vector</em>

<p>to represent Euler angles,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>represent the rotation in that axis, measured in degrees. A full turn requires 360 degrees.</p>

<p>When you retrieve the rotation of an entity, it returns a quaternion by default. To obtain the rotation expressed as in Euler angles, use</p>

<code>.toEuler()</code>

<p>:</p>

<h2>Face the player</h2>

<p>Add a</p>

<em>Billboard</em>

<p>component to an entity so that it always rotates to face the player.</p>

<p>Billboards were a common technique used in 3D games of the 90s, where most entities were 2D planes that always faced the player. The same idea can also be used to rotate a 3D model.</p>

<p>You can configure how the billboard behaves with the following parameters:</p>

<code>billboardMode</code>

<li>: Uses a value of the</li>

<code>BillboardMode</code>

<li>to set its behavior:</li>

<code>BillboardMode.BM_ALL</code>

<li>: The entity rotates to face the player on all of its rotation axis. If the player is high above the entity, the entity will face up.</li>

<code>BillboardMode.BM_NONE</code>

<li>: The entity won’t rotate at all.</li>

<code>BillboardMode.BM_X</code>

<li>: The entity has its</li>

<em>x</em>

<li>rotation axis fixed.</li>

<code>BillboardMode.BM_Y</code>

<li>: The entity has its</li>

<em>y</em>

<li>rotation axis fixed. It only rotates left and right, not up and down. It stays perpendicular to the ground if the player is above or below the entity.</li>

<code>BillboardMode.BM_Z</code>

<li>: The entity has its</li>

<em>z</em>

<li>rotation axis fixed.</li>

<strong>💡 Tip</strong>

<blockquote>: Billboards are very handy to add to</blockquote>

<em>text</em>

<blockquote>entities, since it makes them always legible.</blockquote>

<p>The</p>

<code>rotation</code>

<p>value of the entity’s</p>

<code>Transform</code>

<p>component doesn’t change as the billboard follows players around.</p>

<p>If an entity has both a</p>

<code>Billboard</code>

<p>component and</p>

<code>Transform</code>

<p>component with</p>

<code>rotation</code>

<p>values, players will see the entity rotating as a billboard. If the billboard doesn’t affect all axis, the remaining axis will be rotated according to the</p>

<code>Transform</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: If there are multiple players present at the same time, each will see the entities with billboard mode facing them. Billboard rotations are calculated locally for each player, and don’t affect what others see.</blockquote>

<h2>Face a set of coordinates</h2>

<p>For entity A to look at entity B:</p>

<code>1) Subtract the position of entity A from entity B to get a vector that describes the distance between them.

2) Normalize that vector, so it has a length of 1, maintaining its direction.

3) Use `Quaternion.lookRotation` to get a Quaternion rotation that describes rotating in that direction.

4) Set that Quaternion as the rotation of entity A</code>

<h2>Scale</h2>

<code>scale</code>

<p>is also a</p>

<em>3D vector</em>

<p>, stored as a</p>

<code>Vector3</code>

<p>object, including the scale factor on the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>axis. The shape of the entity scaled accordingly, whether it’s a primitive or a 3D model.</p>

<p>The default scale is 1, so assign a value larger to 1 to stretch an entity or smaller than 1 to shrink it.</p>

<h2>Inherit transformations from parent</h2>

<p>When an entity is nested inside another, the child entities inherit components from the parents. This means that if a parent entity is positioned, scaled or rotated, its children are also affected. The position, rotation and scale values of children entities don’t override those of the parents, instead these are compounded.</p>

<p>You assign an entity to be parent of another by setting the</p>

<code>parent</code>

<p>field on the child entity’s</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity is scaled, all position values of its children are also scaled.</p>

<p>In this example, the child entity will be scaled down to 0.5, since its parent has that scale. The child entity’s position will also be relative to its parent. We have to add the parent’s position plus that of the child. In this case, since the parent is scaled to half its size, the transformation of the child is also scaled down proportionally. In absolute terms, the child is positioned at</p>

<code>{ x: 3, y: 1.5, z: 1 }</code>

<p>. If the parent had a</p>

<code>rotation</code>

<p>, this would also affect the child’s final position, as it changes the axis in which the child is shifted.</p>

<p>If a child entity has no</p>

<code>position</code>

<p>on its Transform, the default is</p>

<code>0,0,0</code>

<p>, which will leave it positioned at the same position as its parent.</p>

<p>You can use an invisible entity with no shape component as a parent, to wrap a set of other entities. This entity won’t be visible in the rendered scene, but can be used to group its children and apply a transform to all of them.</p>

<h2>Attach an entity to an avatar</h2>

<p>To fix an entity’s position to an avatar, add an</p>

<code>AvatarAttach</code>

<p>component to the entity.</p>

<p>You can pick different anchor points on the avatar, most of these points are linked to the player’s armature and follow the player’s animations. For example, when using the right hand anchor point the attached entity will move when the avatar waves or swings their arms while running, just as if the player was holding the entity in their hand.</p>

<p>When creating an</p>

<code>AvatarAttach</code>

<p>component, pass an object with the following data:</p>

<code>avatarId</code>

<li>:</li>

<em>Optional</em>

<li>The ID of the player to attach to. This is the same as the player’s Ethereum address, for those players connected with an Ethereum wallet. If not speccified, it attaches the entity to the local player’s avatar.</li>

<code>anchorPointId</code>

<li>: What anchor point on the avatar skeleton to attach the entity, using a value from the enum</li>

<code>AvatarAnchorPointType</code>

<li>.</li>

<p>The following anchor points are available on the player:</p>

<code>AvatarAnchorPointType.AAPT_NAME_TAG</code>

<p>: Floats right above the player’s name tag, isn’t affected by the player’s animations.</p>

<p>Note: The name tag height is dynamically adjusted based on the height of the wearables a player has on. So a player wearing a tall hat will have their name tag a little bit higher than others.</p>

<code>AvatarAnchorPointType.AAPT_POSITION</code>

<p>: The player’s overall position.</p>

<code>AvatarAnchorPointType.AAPT_RIGHT_HAND</code>

<p>: Is fixed on the player’s right hand</p>

<code>AvatarAnchorPointType.AAPT_LEFT_HAND</code>

<p>: Is fixed on the player’s left hand</p>

<p>Entity rendering is locally determined on each instance of the scene. Attaching an entity on one player doesn’t make it visible to other players who are seeing that player. If an entity is attached to the default local player, each player will experience the entity as attached to their own avatar.</p>

<strong>📔 Note</strong>

<blockquote>: Entities attached to an avatar must stay within scene bounds to be rendered. If a player walks out of your scene, any attached entities stop being rendered until the player walks back in. Smart wearables don’t have this limitation.</blockquote>

<p>The</p>

<code>AvatarAttach</code>

<p>component overwrites the</p>

<code>Transform</code>

<p>component. A single entity can have both an</p>

<code>AvatarAttach</code>

<p>and a</p>

<code>Transform</code>

<p>component at the same time but the values on the</p>

<code>Transform</code>

<p>component are ignored.</p>

<p>If you need to position an entity with an offset from the anchor point on the avatar, or a different rotation or scale, attach a parent entity to the anchor point. You can then set the visible model on a child entity to that parent, and give this child its own Transform component to describe its shifts from the anchor point.</p>

<strong>📔 Note</strong>

<blockquote>: If the attached entity has colliders, these colliders could block the player’s movement. Consider dissabling the physics layer of the entity’s colliders. See</blockquote>

<h3>Obtain an avatarId</h3>

<p>To attach an entity to the avatar of another player, you must provide the user’s ID in the field</p>

<code>avatarId</code>

<p>. There are</p>

<p>to obtain this data.</p>

<strong>📔 Note</strong>

<blockquote>: For those players connected with an Ethereum wallet, their</blockquote>

<code>userId</code>

<blockquote>is the same as their Ethereum address.</blockquote>

<p>Fetch the</p>

<code>userId</code>

<p>for all other nearby players via</p>

<code>getConnectedPlayers()</code>

<p>Using it together with</p>

<code>AvatarAttach</code>

<p>, you could use the following code to add a cube floating over the head of every other player in the scene:</p>

<p>See other ways to fetch other user’s IDs in</p>

<p>.</p>

<h2>Scene boundaries</h2>

<p>All entities in your scene must fit within the scene boundaries, as what’s outside those boundaries is parcels of land that are owned by other players.</p>

<p>When running a preview of your scene, any entities outside the scene’s parcels are colored red and their colliders are removed. When deployed to Decentraland, any entities outside the parcels will not be rendered at all by the engine.</p>

<p>The position of entities in your scene is constantly being checked as they move, if an entity leaves the scene and then returns it will be removed and then rendered normally again.</p>

<p>A grid on the scene’s ground shows the limits of the scene, which by default rage from 0 to 16 on the</p>

<em>x</em>

<p>and</p>

<em>z</em>

<p>axis, and up to 20 on the</p>

<em>y</em>

<p>axis. You’re free to place entities underground, below 0 on the</p>

<em>y</em>

<p>axis.</p>

<strong>💡 Tip</strong>

<blockquote>: If your scene needs more parcels, you can add them in the project’s</blockquote>

<code>scene.json</code>

<blockquote>file. See</blockquote>

<blockquote>for instructions. Once added, you should see the grid extend to cover the additional parcels.</blockquote>

<p>It’s important to note that the</p>

<em>entire</em>

<p>3D model must be within the scene’s bounds. This includes the model’s</p>

<em>bounding box</em>

<p>. Some 3D models may have bounding boxes that unnecessarily extend beyond the meshes themselves, and it can sometimes be tricky to tell when this happens. When an entity extends beyond the scene’s boundaries, in the preview you’ll see a cube that marks these bounding boxes. The entire cube must fit within your scene.</p>

<p>If an entity’s cube extends beyond the shape of its meshes, you might need to edit the 3D model in an external editor to reduce these margins, or to</p>

<em>bake</em>

<p>the rotation and scale of the meshes in the model.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entity-positioning/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/installation-guide/#the-decentraland-editor

<title>Editor installation guide | Decentraland Documentation</title>

<strong>Editor installation guide</strong>

<h1>Editor installation guide</h1>

<p>The Decentraland Editor is a Visual Studio extension, that allows you to build, preview and deploy Decentraland scenes.</p>

<strong>📔 Note</strong>

<blockquote>: There are two versions of the editor, the</blockquote>

<strong>Decentraland Editor SDK6</strong>

<blockquote>and the</blockquote>

<strong>Decentraland Editor SDK7</strong>

<blockquote>. As their names suggest, each version of the editor is meant for working on Decentraland scenes built with different SDK versions. You can have both extensions active in your same installation of Visual Studio Code, and use them accordingly depending on what project you’re working with.</blockquote>

<p>To install the Decentraland Editor:</p>

<p>Install</p>

<p>, if you don’t have it already.</p>

<p>Open Visual Studio Code, and open the</p>

<strong>extensions</strong>

<p>marketplace.</p>

<p>Search for the</p>

<strong>Decentraland Editor SDK6</strong>

<p>extension and click</p>

<strong>Install</strong>

<p>.</p>

<p>You’ll then need to</p>

<strong>restart Visual Studio</strong>

<p>to use the extension.</p>

<h2>Troubleshooting</h2>

<p>If you run into issues, see the</p>

<p>section.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/installation-guide/#the-decentraland-editor

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/troubleshooting/

<title>Troubleshooting | Decentraland Documentation</title>

<strong>Troubleshooting</strong>

<h1>Troubleshooting</h1>

<h1>Issues when running preview</h1>

<h3>Issue: Can’t run any scene preview, error message says mentions</h3>

<strong>Permissions denied</strong>

<h3>or</h3>

<strong>EACCES</strong>

<p>Your operating system doesn’t allow you edit permissions on the folder where you want to run the project. When running the scene, some dependencies need to be installed, but it’s forbidden. You need to configure the folder’s permissions to allow your Windows/Mac/Linux user account to edit files in them.</p>

<p>Useful resources:</p>

<h3>Issue: Can’t run a particular scene preview, error says</h3>

<strong>Error: Error while building the project</strong>

<p>If you’re running a scene that was shared with you, make sure that this scene wasn’t shared containing a</p>

<code>node_modules</code>

<p>or</p>

<code>bin</code>

<p>folder, or a</p>

<code>package-lock.json</code>

<p>file. These files contain dependencies that use versions that are specific to your OS and machine, they should be generated when running the scene for the first time. Delete these folders & file manually, then run</p>

<code>dcl start</code>

<p>again.</p>

<h3>Issue: Running</h3>

<code>dcl start</code>

<h3>runs, no error message, but no browser window opens and no URL in the output to open the preview</h3>

<p>Make sure your Node version is up to date. It must be 16 or newer.</p>

<h3>Issue: Running</h3>

<code>dcl start</code>

<h3>opens a browser tab, but the loading screen never finishes loading, or I see a red error banner that says “critical error”.</h3>

<p>Make sure you have the latest version of the Decentraland SDK installed in your project. Run:</p>

<code>npm i decentraland-ecs@latest</code>

<p>Make sure you also have the latest version of the Decentraland CLI installed globally on your machine. Run:</p>

<code>npm i -g decentraland@latest</code>

<h3>Issue: The scene runs, in the console I see</h3>

<code>Cyclic dependencies</code>

<h3>warnings.</h3>

<p>These refer to files in your scene that reference each other mutually. This is not necessarily a problem, but is not a recommendable pattern for writing software, as it can lead to hard to debug race conditions and other issues. Your scene is likely to work well in spite of these warnings.</p>

<p>Ideally, the loading of the code in your scene should follow a clear sequential order. Code that has cyclic dependencies might suffer a chicken & the egg problem, where the compiler doesn’t know which to initiate first. Often this is resolved without issues, but it’s a good practice to avoid.</p>

<p>To fix these dependencies, you often must resort to calling functions or object constructors passing references to already instanced entities/objects in the function arguments; Instead of hard-coding references to these entities/objects in the function, which may or may not already be instanced.</p>

<h1>Issues when deploying</h1>

<h3>Issue: You don’t have permissions to deploy to these parcels</h3>

<p>Make sure that the</p>

<code>scene.json</code>

<p>file of your scene correctly lists the coordinates where you want to deploy.</p>

<p>Make sure that Metamask is correctly set up to use the right wallet to sign the transaction. This may either be the wallet that owns the LAND tokens, or might have operator permissions granted by the owner.</p>

<h3>Issue: Running</h3>

<code>dcl deploy</code>

<h3>fails</h3>

<p>If you’re working on an old scene, make sure the</p>

<code>scene.json</code>

<p>file doesn’t include legacy sections, such as</p>

<code>communications</code>

<p>or</p>

<code>policy</code>

<p>. Delete these sections entirely.</p>

<p>Check the spawn points of your scene, all three x,y,z coordinates of a spawn point must either be a number or a range. Either all three are numbers or all three are ranges. It’s not supported to have ranges for some but numbers for others.</p>

<p>For example this is not supported:</p>

<code>"position": {"x": [1,4], "y": 0, "z": [1,4]}</code>

<p>This is supported:</p>

<code>"position": {"x": [1,4], "y": [0,0], "z": [1,4]}</code>

<p>The default catalyst server that you’re assigned to deploy to might be down or having issues. You can force the</p>

<code>dcl deploy</code>

<p>command to deploy to a specific catalyst server instead. To deploy to a specific server, on the Decentraland Editor:</p>

<li>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</li>

<code>Deploy Scene To Custom Catalyst</code>

<li>Enter the address of the server, for example</li>

<code>peer-testing.decentraland.org</code>

<li>Approve the transaction</li>

<p>To do this via the CLI:</p>

<code>dcl deploy --target-content <server-name></code>

<p>For example:</p>

<code>dcl deploy --target-content peer-ec1.decentraland.org</code>

<p>See</p>

<p>for a status check of all the servers in the catalyst network. You can also copy the addresses of each one, from the top of each card.</p>

<p>Check your scene’s</p>

<code>package.json</code>

<p>. A common problem is that there’s a</p>

<code>bundleDependencies</code>

<p>and also a</p>

<code>bundledDependencies</code>

<p>(extra d) section. This can sometimes result from running different Node versions on the same project. Delete</p>

<code>bundledDependencies</code>

<p>, which relates to older Node versions. Newer versions of Node accept either spelling, but</p>

<code>bundleDependencies</code>

<p>is the proper one. Most important is not to have both.</p>

<h3>Issue: Running</h3>

<code>dcl deploy</code>

<h3>or</h3>

<code>dcl build</code>

<h3>reports type errors</h3>

<p>Your scene might have type errors reported by TypeScript, for example stating that a certain variable might be type</p>

<code>any</code>

<p>or that</p>

<code>undefined</code>

<p>or</p>

<code>null</code>

<p>are not allowed. When running</p>

<code>dcl deploy</code>

<p>, it also runs</p>

<code>dcl build</code>

<p>, which is a bit more strict with these checks than</p>

<code>dcl start</code>

<p>.</p>

<p>Unlike JavaScript, TypeScript enforces strict typing of all variables. Even though your scene is written in such a way that for example a certain value will never be</p>

<code>undefined</code>

<p>, TypeScript needs to know what would happen in that scenario, or you need to explicitly clarify that the value can only be for example a string.</p>

<p>As an alternative, you can run</p>

<code>dcl deploy --skip-build</code>

<p>to skip the running of</p>

<code>dcl build</code>

<p>, and prevent these checks from running.</p>

<h3>Issue: I deployed my scene but I don’t see the changes when I enter Decentraland</h3>

<p>Keep in mind that it can take a few minutes for new content to be propagated throughout all of the servers in the catalyst network, give it a little time.</p>

<p>See</p>

<p>for instructions on how you can ensure that the content was properly propagated to all servers.</p>

<h3>Issue: Once deployed, some 3d models are missing</h3>

<li>Make sure the 3d models are all within the scene boundaries, even their bounding boxes. When running in preview, any 3d models that extend beyond the scene boundaries are marked in red and their bounding boxes are marked. In the deployed scene, these models aren’t rendered at all, as they could be intruding into the parcels of your neighbors.</li>

<h3>Issue: Once deployed, my 3d models look different</h3>

<p>If the textures look different, keep in mind that textures in 3d models are capped to a maximum size of 512x512 pixels. This conversion is carried out to ensure that Decentraland runs smoothly for everyone.</p>

<p>If models look different, there could be an issue with the conversion of the models to asset bundles. Read more about asset bundle compression</p>

<p>.</p>

<p>To validate this, try running the scene with the URL parameter</p>

<code>&DISABLE_ASSET_BUNDLES</code>

<p>. If the models look fine with this flag, the issue must be related to a bug in the conversion of the model.</p>

<p>Note that the generation of compressed asset-bundle versions of your models is a process that takes the servers time (about an hour). You can check if the models are being loaded as compressed asset bundles or not by writing the following command into the chat window</p>

<code>/detectabs</code>

<p>. Compressed models are tinted green, non-compressed are tinted red.</p>

<h3>Issue: My scene has poor FPS in production, even though it runs smoothly in preview.</h3>

<p>Your scene’s performance could be affected by neighboring scenes that follow bad practices, as they also run in parallel. You can validate that this is the case by opening the settings and setting the line of sight to a minimum, so that only 1 parcel around your current scene is loaded.</p>

<p>You can reduce the line of sight even further by running your scene with the parameter</p>

<code>&LOS=0</code>

<p>, to not load any surrounding scenes at all.</p>

<p>If you just deployed your scene, the burden when loading the scene might also be reduced once the servers convert the 3d models in the scene to compressed asset bundles. You can check if the models are being loaded as compressed asset bundles or not by writing the following command into the chat window</p>

<code>/detectabs</code>

<p>. Compressed models are tinted green, non-compressed are tinted red.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/troubleshooting/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/preview-scene/#verify-deployment-success

<title>Preview your scene | Decentraland Documentation</title>

<strong>Preview your scene</strong>

<h1>Preview your scene</h1>

<p>Once you have</p>

<p>or downloaded a</p>

<p>you can preview it locally.</p>

<h2>Using the editor</h2>

<p>To run a scene preview using the Decentraland Editor:</p>

<p>Make sure you’ve</p>

<p>.</p>

<p>Open your scene’s folder using Visual Studio Code.</p>

<p>Note: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<strong>Run Scene</strong>

<p>button.</p>

<p>This opens a new tab in Visual Studio Code, running the Decentraland scene, just like in a web browser tab.</p>

<p>Optionally click</p>

<strong>Open in browser</strong>

<p>, over the top margin of the tab to run the preview in a web browser window.</p>

<h2>Using the CLI</h2>

<h3>Before you begin</h3>

<p>Please make sure you first install the CLI tools by running the following command:</p>

<p>See the</p>

<p>for more details instructions.</p>

<h3>Preview a scene</h3>

<p>To preview a scene run the following command on the scene’s main folder:</p>

<p>Any dependencies that are missing are installed and then the CLI opens the scene in a new browser tab automatically. It creates a local web server in your system and points the web browser tab to this local address.</p>

<p>Every time you make changes to the scene, the preview reloads and updates automatically, so there’s no need to run the command again.</p>

<strong>📔 Note</strong>

<blockquote>: Some scenes depend on an external server to store a shared state for all players in the scene. When previewing one of these scenes, you’ll likely have to also run the server locally on another port. Check the scene’s readme for instructions on how to launch the server as well as the scene.</blockquote>

<h3>Parameters of the preview command</h3>

<p>You can add the following flags to the</p>

<code>dcl start</code>

<p>command to change its behavior:</p>

<code>--port</code>

<li>to assign a specific port to run the scene. Otherwise it will use whatever port is available.</li>

<code>--no-debug</code>

<li>Disable the debug panel, that shows scene and performance stats</li>

<code>--no-browser</code>

<li>to prevent the preview from opening a new browser tab.</li>

<code>--w</code>

<li>or</li>

<code>--no-watch</code>

<li>to not open watch for filesystem changes and avoid hot-reload</li>

<code>--c</code>

<li>or</li>

<code>--ci</code>

<li>To run the parcel previewer on a remote unix server</li>

<code>--web3</code>

<li>Connects preview to browser wallet to use the associated avatar and account</li>

<code>--skip-version-checks</code>

<li>Avoids checking if the scene’s ECS library version matches your CLI version, and launches the preview anyway.</li>

<code>--desktop-client</code>

<li>Runs the preview in the Decentraland Desktop client</li>

<strong>📔 Note</strong>

<blockquote>: To preview old scenes that were built for older versions of the SDK, you must set the corresponding version of</blockquote>

<code>decentraland-ecs</code>

<blockquote>in your project’s</blockquote>

<code>package.json</code>

<blockquote>file.</blockquote>

<h2>Upload a scene to decentraland</h2>

<p>Once you’re happy with your scene, you can upload it and publish it to Decentraland, see</p>

<p>) for instructions on how to do that.</p>

<p>You can also upload a preview to a free 3rd party server,</p>

<p>.</p>

<h2>Preview scene size</h2>

<p>The scene size shown in the preview is based on the scene’s configuration. By default, the scene occupies a single parcel (16 x 16 meters).</p>

<p>If you’re building a scene to be uploaded to several adjacent parcels, you can edit the</p>

<em>scene.json</em>

<p>file to reflect this, listing multiple parcels in the “parcels” field. Placing any entities outside the bounds of the listed parcels will display them in red.</p>

<p>You can also change the coordinates by running the</p>

<code>dcl coords</code>

<p>command from the command line, this is especially useful on large scenes with many parcels. See</p>

<p>for more details.</p>

<strong>💡 Tip</strong>

<blockquote>: While running the preview, the parcel coordinates don’t need to match those that your scene will really use, as long as they’re adjacent and are arranged into the same shape. You will have to replace these with the actual coordinates later when you</blockquote>

<blockquote>.</blockquote>

<h2>Run preview in Desktop</h2>

<p>To run a preview scene in the Desktop native client, instead of in the web browser:</p>

<p>Make sure you have downloaded and installed the</p>

<p>or</p>

<p>desktop client.</p>

<p>Run the preview with:</p>

<code>dcl start --desktop-client</code>

<p>Copy the URL provided by the console output under</p>

<strong>Desktop Client</strong>

<p>and paste in your browser.</p>

<p>Note: The Browser might ask you for permission to open an external executable: Decentraland. Select</p>

<strong>Open</strong>

<p>.</p>

<p>You’ll see the following screen. Check that the URL is correct, then click</p>

<strong>Continue</strong>

<p>to launch the preview.</p>

<p>If you need to manually add anything to the URL, to change the default way the scene runs, tick the box</p>

<strong>Add custom URL parameters</strong>

<p>and write those in the dialog below.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/preview-scene/#verify-deployment-success

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk-101/

<title>Quick start | Decentraland Documentation</title>

<strong>Quick start</strong>

<h1>Quick start</h1>

<p>The Decentraland SDK is a powerful tool that lets you create scenes by writing in Typescript (Javascript + Types).</p>

<p>This mini-tutorial walks you through how to get set up, and shows you the basic parts of a Decentraland scene.</p>

<h2>Install the editor</h2>

<p>The Decentraland Editor is a Visual Studio extension, that allows you to build, preview and deploy Decentraland scenes.</p>

<p>To install the Decentraland Editor:</p>

<p>Install</p>

<p>, if you don’t have it already.</p>

<p>Open Visual Studio Code, and open the extensions marketplace. Search for the</p>

<strong>Decentraland Editor</strong>

<p>extension and click</p>

<strong>Install</strong>

<p>. You’ll then need to restart Visual Studio to use the extension.</p>

<h2>Create your first scene</h2>

<p>To create your first scene using the Decentraland Editor, follow these steps.</p>

<p>Make sure you’ve</p>

<p>, then:</p>

<li>Open a Visual Studio Code window on an</li>

<em>empty folder</em>

<li>.</li>

<li>Select the Decentraland tab on Visual Studio’s left margin sidebar</li>

<li>Click</li>

<strong>Create Project</strong>

<li>The editor will prompt you about what kind of project to create. Select</li>

<strong>Scene</strong>

<li>.</li>

<p>Preview the 3D scene by clicking</p>

<strong>Run Scene</strong>

<p>in the Decentraland tab of Visual Studio Code.</p>

<p>Read more about the scene preview in</p>

<p>.</p>

<h2>Edit the scene</h2>

<p>Open the</p>

<code>src/game.ts</code>

<p>file from your scene folder.</p>

<p>Change anything you want from this code, for example change the</p>

<em>x</em>

<p>position of the first</p>

<code>cube</code>

<p>entity that’s spawned (on line 42). If you kept the preview running in an open tab, you should now see the changes show in the preview.</p>

<strong>Tip:</strong>

<p>Visual Studio Code helps you by marking syntax errors, autocompleting while you write and even showing smart suggestions that depend on context. Also click on an object to see the full definition of its class.</p>

<p>Download this 3D model of an avocado from the scene’s</p>

<p>in</p>

<em>glTF</em>

<p>format.</p>

<p>.</p>

<p>Create a new folder under your scene’s directory named</p>

<code>/models</code>

<p>. Extract the downloaded file and drop all of its contents in that folder. Note that there are several files that make up the 3D model, all of them must be in the same path.</p>

<p>At the end of your scene’s code, add the following lines:</p>

<p>You can also download the finished scene from its</p>

<p>.</p>

<p>Check your scene preview once again to see that the 3D model is now there too.</p>

<p>The lines you just added create a new</p>

<p>, give it a</p>

<p>based on the 3D model you downloaded, and</p>

<p>.</p>

<p>Note that the avocado you added rotates, just like all other entities in the scene. That’s because the</p>

<code>RotatorSystem</code>

<p>that was defined in the default code of this scene is iterating over every entity in the scene and rotating it. If you remove this system, entities stop rotating.</p>

<h2>The Utils library</h2>

<p>The Decentraland ESC Utils library includes a number of helper functions and specialized components that make it easier to carry out a lot of common use cases.</p>

<p>To use any of the helpers provided by the Utils library:</p>

<p>Install it as a</p>

<p>of your scene. At the bottom of the Decentraland tab, in Visual Studio Code, click the</p>

<strong>+</strong>

<p>icon on the</p>

<strong>Dependencies</strong>

<p>section. Then write the name of the dependency you wish to install:</p>

<code>@dcl/ecs-scene-utils</code>

<p>Add this line at the start of your</p>

<code>game.ts</code>

<p>file:</p>

<p>Further down in the</p>

<code>game.ts</code>

<p>file, write</p>

<code>utils.</code>

<p>and let the suggestions show the available helpers. You’ll see there are a number of functions you can run and of components that can be added to entities.</p>

<p>Add the following component from the</p>

<code>utils</code>

<p>library to your avocado entity to make it slowly grow. The provided arguments make it grow from a scale of 1 to a scale of 5 over a period of 10 seconds:</p>

<p>The</p>

<code>ScaleTransformComponent</code>

<p>requires the following parameters:</p>

<code>start</code>

<li>: Starting scale.</li>

<code>end</code>

<li>: Ending scale.</li>

<code>duration</code>

<li>: Duration (in seconds) of start to end scaling.</li>

<p>TIP: Your code editor will hint this information to you once you typed</p>

<code>new utils.ScaleTransformComponent(</code>

<p>.</p>

<p>Notice that the</p>

<code>ScaleTransformComponent</code>

<p>component also takes two other optional more advanced parameters that you can play around with:</p>

<code>onFinishCallback</code>

<li>: A function that is called when the transition ends.</li>

<code>interpolationType</code>

<li>: Type of interpolation to be used.</li>

<p>In the fourth parameter, a very simple function prints the text “FINISHED” to the browser console once the transition is over.</p>

<p>TIP: To read the message that is printed to the console, in Chrome go to</p>

<strong>View > Developer > Javascript console</strong>

<p>.</p>

<p>The final parameter tells the component to perform the transition using an ease-out elastic interpolation, which results in a speed curve that goes from fast to slow and ends with a bouncy effect.</p>

<p>To learn more about the ECS Utils library, read its full documentation</p>

<p>.</p>

<h2>More Tutorials</h2>

<p>Read</p>

<p>for a high-level understanding of how Decentraland scenes function.</p>

<p>Visit the</p>

<p>for a large catalogue of example scenes, each tackling one particular challenge.</p>

<p>Read our</p>

<p>or view or</p>

<p>for detailed instructions for building basic scenes.</p>

<p>To see our official example scenes, with links to their code, see</p>

<p>.</p>

<p>See the</p>

<strong>Development guide</strong>

<p>section for more instructions about adding content to your scene.</p>

<h2>Engage with other developers</h2>

<p>Visit</p>

<p>, join a lively discussion about what’s possible and how!</p>

<p>To debug any issues, we encourage that you post issues to the</p>

<p>Decentraland Forum.</p>

<p>You can also post to</p>

<p>, using the tags</p>

<code>decentraland</code>

<p>or</p>

<code>decentraland-ecs</code>

<p>.</p>

<p>You can also ask in</p>

<p>. In the</p>

<strong>Support</strong>

<p>section, the</p>

<strong>#sdk</strong>

<p>channel is for questions regarding code, the</p>

<strong>#builder-and-3d</strong>

<p>channel is for questions regarding 3D models and art.</p>

<strong>#code-contribution</strong>

<p>is for discussing PRs to the SDK codebase.</p>

<h2>3D Art Assets</h2>

<p>A good experience will have great 3D art to go with it. If you’re keen on creating those 3D models yourself, you’re encouraged to, see the</p>

<p>for more info. But if you prefer to focus on the coding or game design side of things, you don’t need to create your own assets!</p>

<p>Here are a few tips to get great 3D models that you can use in a Decentraland scene:</p>

<li>Build a scene in the Decentraland</li>

<li>and export it, together with all its assets, to keep working on it with the SDK.</li>

<li>Download all the 3D assets available in the Builder from</li>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<strong>📔 Note</strong>

<blockquote>: Models must be in the supported</blockquote>

<code>.gltf</code>

<blockquote>or</blockquote>

<code>.glb</code>

<blockquote>formats, and must have a number of triangles, textures and materials that adhere to the</blockquote>

<blockquote>. If getting models from a third party site, pay attention to the licence restrictions that the content you download has.</blockquote>

<h2>Publish your scene</h2>

<p>If you own LAND, or have permissions given by someone that does, you can upload your scene to Decentraland. See</p>

<p>.</p>

<p>If you don’t own land, you can still upload your scene for free to third party services, so you can easily share your creations with others as a link. See</p>

<p>.</p>

<h2>Other useful information</h2>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk-101/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/preview-scene/

<title>Preview your scene | Decentraland Documentation</title>

<strong>Preview your scene</strong>

<h1>Preview your scene</h1>

<p>Once you have</p>

<p>or downloaded a</p>

<p>you can preview it locally.</p>

<h2>Using the editor</h2>

<p>To run a scene preview using the Decentraland Editor:</p>

<p>Make sure you’ve</p>

<p>.</p>

<p>Open your scene’s folder using Visual Studio Code.</p>

<p>Note: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<strong>Run Scene</strong>

<p>button.</p>

<p>This opens a new tab in Visual Studio Code, running the Decentraland scene, just like in a web browser tab.</p>

<p>Optionally click</p>

<strong>Open in browser</strong>

<p>, over the top margin of the tab to run the preview in a web browser window.</p>

<h2>Using the CLI</h2>

<h3>Before you begin</h3>

<p>Please make sure you first install the CLI tools by running the following command:</p>

<p>See the</p>

<p>for more details instructions.</p>

<h3>Preview a scene</h3>

<p>To preview a scene run the following command on the scene’s main folder:</p>

<p>Any dependencies that are missing are installed and then the CLI opens the scene in a new browser tab automatically. It creates a local web server in your system and points the web browser tab to this local address.</p>

<p>Every time you make changes to the scene, the preview reloads and updates automatically, so there’s no need to run the command again.</p>

<strong>📔 Note</strong>

<blockquote>: Some scenes depend on an external server to store a shared state for all players in the scene. When previewing one of these scenes, you’ll likely have to also run the server locally on another port. Check the scene’s readme for instructions on how to launch the server as well as the scene.</blockquote>

<h3>Parameters of the preview command</h3>

<p>You can add the following flags to the</p>

<code>dcl start</code>

<p>command to change its behavior:</p>

<code>--port</code>

<li>to assign a specific port to run the scene. Otherwise it will use whatever port is available.</li>

<code>--no-debug</code>

<li>Disable the debug panel, that shows scene and performance stats</li>

<code>--no-browser</code>

<li>to prevent the preview from opening a new browser tab.</li>

<code>--w</code>

<li>or</li>

<code>--no-watch</code>

<li>to not open watch for filesystem changes and avoid hot-reload</li>

<code>--c</code>

<li>or</li>

<code>--ci</code>

<li>To run the parcel previewer on a remote unix server</li>

<code>--web3</code>

<li>Connects preview to browser wallet to use the associated avatar and account</li>

<code>--skip-version-checks</code>

<li>Avoids checking if the scene’s ECS library version matches your CLI version, and launches the preview anyway.</li>

<code>--desktop-client</code>

<li>Runs the preview in the Decentraland Desktop client</li>

<strong>📔 Note</strong>

<blockquote>: To preview old scenes that were built for older versions of the SDK, you must set the corresponding version of</blockquote>

<code>decentraland-ecs</code>

<blockquote>in your project’s</blockquote>

<code>package.json</code>

<blockquote>file.</blockquote>

<h2>Upload a scene to decentraland</h2>

<p>Once you’re happy with your scene, you can upload it and publish it to Decentraland, see</p>

<p>) for instructions on how to do that.</p>

<p>You can also upload a preview to a free 3rd party server,</p>

<p>.</p>

<h2>Preview scene size</h2>

<p>The scene size shown in the preview is based on the scene’s configuration. By default, the scene occupies a single parcel (16 x 16 meters).</p>

<p>If you’re building a scene to be uploaded to several adjacent parcels, you can edit the</p>

<em>scene.json</em>

<p>file to reflect this, listing multiple parcels in the “parcels” field. Placing any entities outside the bounds of the listed parcels will display them in red.</p>

<p>You can also change the coordinates by running the</p>

<code>dcl coords</code>

<p>command from the command line, this is especially useful on large scenes with many parcels. See</p>

<p>for more details.</p>

<strong>💡 Tip</strong>

<blockquote>: While running the preview, the parcel coordinates don’t need to match those that your scene will really use, as long as they’re adjacent and are arranged into the same shape. You will have to replace these with the actual coordinates later when you</blockquote>

<blockquote>.</blockquote>

<h2>Run preview in Desktop</h2>

<p>To run a preview scene in the Desktop native client, instead of in the web browser:</p>

<p>Make sure you have downloaded and installed the</p>

<p>or</p>

<p>desktop client.</p>

<p>Run the preview with:</p>

<code>dcl start --desktop-client</code>

<p>Copy the URL provided by the console output under</p>

<strong>Desktop Client</strong>

<p>and paste in your browser.</p>

<p>Note: The Browser might ask you for permission to open an external executable: Decentraland. Select</p>

<strong>Open</strong>

<p>.</p>

<p>You’ll see the following screen. Check that the URL is correct, then click</p>

<strong>Continue</strong>

<p>to launch the preview.</p>

<p>If you need to manually add anything to the URL, to change the default way the scene runs, tick the box</p>

<strong>Add custom URL parameters</strong>

<p>and write those in the dialog below.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/preview-scene/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/installation-guide/

<title>Editor installation guide | Decentraland Documentation</title>

<strong>Editor installation guide</strong>

<h1>Editor installation guide</h1>

<p>The Decentraland Editor is a Visual Studio extension, that allows you to build, preview and deploy Decentraland scenes.</p>

<strong>📔 Note</strong>

<blockquote>: There are two versions of the editor, the</blockquote>

<strong>Decentraland Editor SDK6</strong>

<blockquote>and the</blockquote>

<strong>Decentraland Editor SDK7</strong>

<blockquote>. As their names suggest, each version of the editor is meant for working on Decentraland scenes built with different SDK versions. You can have both extensions active in your same installation of Visual Studio Code, and use them accordingly depending on what project you’re working with.</blockquote>

<p>To install the Decentraland Editor:</p>

<p>Install</p>

<p>, if you don’t have it already.</p>

<p>Open Visual Studio Code, and open the</p>

<strong>extensions</strong>

<p>marketplace.</p>

<p>Search for the</p>

<strong>Decentraland Editor SDK6</strong>

<p>extension and click</p>

<strong>Install</strong>

<p>.</p>

<p>You’ll then need to</p>

<strong>restart Visual Studio</strong>

<p>to use the extension.</p>

<h2>Troubleshooting</h2>

<p>If you run into issues, see the</p>

<p>section.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/preview-scene/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/deploy-third-party/

<title>Preview in Heroku | Decentraland Documentation</title>

<strong>Preview in Heroku</strong>

<h1>Preview in Heroku</h1>

<p>If you do not possess any parcels in Decentraland or a Decentraland</p>

<p>to publish your scene to a</p>

<p>, or if you are not yet prepared to</p>

<p>your scene to Decentraland, there is an alternative option available. You can upload a preview of your scene to run as an application on server.</p>

<p>Once uploaded, the only thing that others have to do to explore your scene is follow a link. They don’t need to install the CLI, Node, NPM, or any of the other tools that would be required to run the preview on their local machine.</p>

<p>Note that it’s not necessary to own LAND to upload a scene preview to a Heroku server. The uploaded content isn’t linked to the blockchain in any way. When running the preview, other adjacent parcels appear as empty.</p>

<p>Follow the steps below to upload your scenes to a Heroku server:</p>

<p>Make sure you have the latest Decentraland CLI version installed on your machine</p>

<code>npm i -g decentraland@latest</code>

<p>.</p>

<p>Create a</p>

<p>account, if you don’t already have one.</p>

<p>Install the Heroku CLI. Do this via</p>

<code>npm i -g heroku</code>

<p>, or see</p>

<p>for alternatives.</p>

<p>Create a git repository for your project. Use any tool you prefer for this, like</p>

<p>. To use git from the command line:</p>

<p>a) Create a new repository by running</p>

<code>git init</code>

<p>in the project folder at root level</p>

<p>b) Do</p>

<code>git add .</code>

<p>and</p>

<code>git commit -m 'your commit text</code>

<p>c) Set the current branch to</p>

<em>main</em>

<p>via</p>

<code>git branch -m master main</code>

<p>d) Make sure the</p>

<code>.gitignore</code>

<p>file contains the following:</p>

<code>/node_modules

npm-debug.log

.DS_Store

/*.env

bin</code>

<p>Note: Make sure your Decentraland project uses the latest SDK version, do</p>

<code>npm i decentraland-ecs@latest</code>

<p>. Projects uploaded to Heroku or similar platformas and built with versions older than 6.10.0 will not be supported and will not be allowed to fech avatar data from content servers.</p>

<p>Note: If you’re deploying a project that was created using</p>

<code>dcl init</code>

<p>, you would need to remove the line</p>

<code>"yarn": "please use npm"</code>

<p>from your</p>

<code>package.json</code>

<p>file otherwise you’re going to get an error while deploying.</p>

<p>Use the Heroku CLI to log into your Heroku account with</p>

<code>heroku login</code>

<p>. This opens a browser window to provide your user and password.</p>

<p>Create a new Heroku application and give it a unique name. In the Heroku site do that via</p>

<strong>New</strong>

<p>></p>

<strong>Create new App</strong>

<p>. Otherwise, in the Heroku CLI do it via</p>

<code>heroku create -a example-dcl-scene</code>

<p>Link your Decentraland project to your Heroku application. On the project folder run</p>

<code>heroku git:remote -a example-dcl-scene</code>

<p>(using the name you created you heroku application with)</p>

<p>Edit</p>

<code>package.json</code>

<p>in your scene to change the</p>

<code>start</code>

<p>script to</p>

<code>CI=true dcl start -p ${PORT:=8000}</code>

<p>Explicitly install the Decentraland CLI as a dependency of your project, running</p>

<code>npm i --save decentraland</code>

<p>Deploy your scene preview with</p>

<code>git push heroku main</code>

<p>To access the scene, copy the link shared by the Heroku deploy command. Then manually add the following parameters to the URL</p>

<code>?realm=localhost-stub&explorer-branch=main</code>

<p>.</p>

<p>For example if the link shared by Heroku is</p>

<code>https://example-dcl-scene.herokuapp.com</code>

<p>, the link you should enter is</p>

<code>https://example-dcl-scene.herokuapp.com/?realm=localhost-stub&explorer-branch=main</code>

<p>.</p>

<p>If your scene is not in coordinates</p>

<code>0,0</code>

<p>, you should also include these as part of the URL. For example:</p>

<code>https://example-dcl-scene.herokuapp.com/?realm=localhost-stub&explorer-branch=main&position=50,-10</code>

<p>Every time you make changes to your scene, make sure you:</p>

<li>Commit and push your changes to the git repo</li>

<li>Push the new version to the Heroku app</li>

<code>git push heroku main</code>

<p>You can read the console logs of the scene preview by running</p>

<code>heroku logs --tail</code>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/deploy-third-party/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/worlds/about/

<title>Worlds Overview | Decentraland Documentation</title>

<strong>Worlds Overview</strong>

<h1>Worlds Overview</h1>

<p>Decentraland Worlds are your own personal 3D space in the Decentraland ecosystem, separate from Genesis City’s map of LAND parcels.

A World can be kept private or shared with anyone with just a link.

Able to host up to 100 concurrent users, you can use your World to host events, display your work, or as a blank canvas where you

can unleash your creativity and experiment. A World is available to anyone who owns a Decentraland NAME or an ENS domain.</p>

<h1>What are Worlds?</h1>

<p>Worlds are personal 3D spaces located beyond the boundaries of Genesis City. Worlds can serve various purposes, such as:</p>

<li>Hosting events</li>

<li>Unleashing your creativity</li>

<li>Building new experiences</li>

<li>Hosting a portfolio of scenes</li>

<li>Testing scenes before deploying them to Genesis City</li>

<p>You can get your own Decentraland World by getting a</p>

<p>, which are

NAME NFTs within the DCL ecosystem, or you can get a World by having an</p>

<p>, a decentralized name that can be used across both Web2 & 3.</p>

<p>Acquiring a Decentraland NAME requires 100 MANA and can be assigned to your avatar, LAND, or Estate. Alternatively, you can purchase an

already-minted NAME from a previous owner in the Marketplace. These NAMEs are then used by the Decentraland Explorer to load the associated World.</p>

<p>Worlds serve as a gateway for aspiring content creators, providing an accessible entry point to creating in Decentraland and the freedom to

experiment with scene creation.</p>

<h2>Worlds Size Limit</h2>

<p>The maximum file size you can upload to your World is an essential consideration when deploying your scenes.

It is important to note that the maximum scene file size you can upload to your World differs between Worlds

granted by Decentraland NAMEs and those from ENS domains.</p>

<h3>Worlds from Decentraland NAMEs</h3>

<p>Decentraland NAME holders enjoy dynamic storage capacity within the Foundation Worlds Content Server, which depends on their wallet holdings. The following rules govern this allocation:</p>

<li>Each Decentraland NAME you own grants 100 Mb of storage capacity (as well as a World).</li>

<li>Each Decentraland LAND parcel you own grants an additional 100 Mb of storage capacity.</li>

<li>For every 2,000 MANA held in your wallet, an additional 100 Mb of storage capacity is granted.</li>

<p>The space in the Foundation Worlds Content Server can be used to host scenes as large as users want, utilizing the Decentraland NAMEs they own and the combined space granted by their collective Decentraland assets. For instance, a user with multiple Worlds (granted by owning multiple NAMES) and a combined storage capacity of 500 Mb could deploy one World with a 300 Mb scene file and another World with a 200 Mb scene file, or just one World with a 500 Mb scene file. This flexibility allows users to create and manage their virtual experiences efficiently within the allocated server storage space.</p>

<p>The maximum server storage capacity for your Decentraland Worlds is calculated dynamically, adhering to the rules outlined above. If, by any chance, a user exceeds their allocated storage space—for instance, through asset sales or transfers to another wallet– they will be provided with a 24-hour window to address the situation. Failure to do so will result in their Worlds becoming inaccessible after this grace period.</p>

<p>To regain access to a blocked World, users can either acquire more MANA, Decentraland NAMEs, or LANDS, increasing their storage capacity or un-deploy existing scenes from the World Content Server to free up their storage space.</p>

<h3>Worlds from ENS Domains</h3>

<p>In contrast, Worlds granted from ENS domains have a fixed maximum scene file size of 25 Mb per World, regardless of the user’s other Decentraland holdings. Users with Worlds from ENS domains cannot increase their ENS World scene size limit by purchasing additional MANA or LAND.</p>

<p>However, Worlds granted by ENS domain ownership serve as the perfect first step into realizing the creative freedom offered by Decentraland. At the same time, get your own little corner of the metaverse where you are free to begin transforming your ideas into reality.</p>

<h2>Publish a World</h2>

<p>Users have various options to publish content on their World:</p>

<h3>1. Using the Builder dApp (no-code)</h3>

<p>The Builder is the ideal choice for non-developers. Scenes can be created from scratch using the Scene Builder by simply dragging and dropping items into the scene. Smart Items can also be used for player interaction once the scene is deployed.</p>

<p>Creators can also use Templates, edit them, and then deploy them to their World. More templates from the Foundation will be uploaded over time. Another option is to use a scene from the Scene Pool. Anyone can get a scene from the pool, download it, and then import it into the Builder to edit it or deploy it to a World as it is.</p>

<p>When deploying a scene from the Builder, users will have the option to select either a Decentraland NAME or an ENS Domain held in their wallet.</p>

<p>The</p>

<p>also serves as the go-to place for visualizing your allocated space and monitoring how much is consumed by each Decentraland NAME or ENS Domain. Additionally, users can easily undeploy scenes to release storage space, view when their storage capacity is exceeded, and access comprehensive information about their Worlds, whether they are hosted on Decentraland NAMES or ENS Domains.</p>

<h3>2. Using the SDK and Editor</h3>

<p>The starting point for this product is having a scene that meets the size requirements mentioned above. If you wish to know more about how to create a scene, check out the</p>

<p>documentation.</p>

<p>If you are a Content Creator, you may be already familiar with how the</p>

<p>works, the experience is quite similar, but with a small caveat:</p>

<p>You need to specify under what</p>

<strong>name</strong>

<p>your deployment is to be made. Add the following section in your</p>

<code>scene.json</code>

<p>:</p>

<p>The</p>

<strong>name</strong>

<p>specified en the</p>

<code>scene.json</code>

<p>can be either a Decentraland NAME or an ENS Domain and must be owned by the wallet signing the deployment (or by any wallet that has been given permission explicitly via Access Control Lists (ACL), as explained further down).</p>

<p>Keep the following in mind:</p>

<li>The wallet signing the deployment must own the NAME specified in the</li>

<code>scene.json</code>

<li>file</li>

<li>The scene has no parcel limitations (since January 2023)</li>

<li>All Worlds are automatically listed on the Places page unless you opt out as detailed below</li>

<p>Some of the Worlds deployed to the Foundation’s Worlds Content Server may be eligible for being listed in Decentraland Places. See</p>

<p>for more details.</p>

<p>If you wish to opt-out from your Worlds being indexed in Places, you can add the following section in your</p>

<code>scene.json</code>

<p>:</p>

<h3>3. Publish via the Decentraland Editor:</h3>

<li>Open VSCode in a Decentraland scene project.</li>

<li>Click on the Decentraland icon on the left sidebar.</li>

<li>Click on the three-dot menu at the top right of the sidebar, next to the green reload arrow button, select</li>

<strong>Publish Scene To Your World</strong>

<li>Approve the transaction</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<h3>4. Publish via the CLI</h3>

<p>To deploy a scene to a world via the CLI, you need to specify the target server in the deployment command-line and use the Worlds Content Server URL.</p>

<p>For SDK6 scenes, use the following command:</p>

<p>For SDK7 scenes, use the following command:</p>

<p>Once you run the command, you will be prompted to sign the deployment with your wallet and a set of validations will be executed to allow or reject the scene.</p>

<h2>Joining a World</h2>

<p>Once a scene is uploaded to the Worlds server you can access it by using the

Decentraland Explorer with the following friendly URL</p>

<code>https://play.decentraland.org/world/NAME</code>

<p>, where</p>

<code>NAME</code>

<p>should be replaced by the Decentraland NAME or ENS Domain to which the deployment was done to. You may use the NAME with or without the</p>

<code>.dcl.eth</code>

<p>suffix. If no suffix is added, it will assume</p>

<code>.dcl.eth</code>

<p>.</p>

<p>On the other hand, NAMEs also work as realms, so you can leverage the existing change realm mechanisms to access a world. One way would be by typing the</p>

<code>/changerealm NAME.dcl.eth</code>

<p>command in the chatbox and another possibility is by changing the query parameter in the Explorer URL: if your NAME is</p>

<code>my-name.dcl.eth</code>

<p>you can use the following URL to access the world:</p>

<code>https://play.decentraland.org/?realm=my-name.dcl.eth</code>

<h2>Migrating a World to the Genesis City</h2>

<p>If you are a LAND owner and you wish to deploy a World scene to the Genesis City, it is completely possible. You just need to re-deploy your scene to the decentralized Catalyst network, the targeted content server for Genesis City</p>

<p>Things to remember:</p>

<li>remove the</li>

<code>worldConfiguration</code>

<li>section from</li>

<code>scene.json</code>

<li>the size limitation for Worlds (100 Mb total size) is different from that for LAND parcels (15MB per parcel), so make sure your scene is sized correctly for deployments to Genesis City!</li>

<h2>World defaults</h2>

<p>A couple of optional custom settings can be specified in the</p>

<code>scene.json</code>

<p>when deploying a world scene:</p>

<strong>skybox</strong>

<p>: This property indicates how many seconds have passed (in Decentraland time) since the start of the day, assuming the full cycle lasts 24 hours. Divide the seconds value by 60 to obtain minutes, and by 60 again to obtain the hours since the start of the day. For example, if the seconds value is 36000, it corresponds to 10:00 am. If no value is set for this field, the world will follow the same day/night cycle as Genesis City.</p>

<strong>fixedAdapter</strong>

<p>: indicates which Communication Service should be used by the scene. For the time being only the</p>

<code>offline:offline</code>

<p>value is allowed and when set, the scene will have no Communication Service at all and each user joining that world will always be alone. If not set, the Worlds content server will generate a proper value based on how it is configured.</p>

<strong>Example:</strong>

<h2>Access Control Lists (ACL)</h2>

<p>When a team (more than one person) are contributing to the development of a scene, it may be beneficial to have each contributor have the ability to publish the scene under a single NAME. As stated above, the NAME owner is the only one allowed to run such deployment.</p>

<p>So the concept of Access Control List (or ACL for short) was introduced. The idea is that the owner of the NAME can grant other wallets permission to publish a scene under his NAME. This way the whole team (or a group of selected members) can be added to the world ACL and those will be able to publish the scene.</p>

<p>This ACL is stored in the World Content Server where the world is deployed. It is not stored on the blockchain. This makes it much more flexible, giving more granular control. For e.g. if you want to deploy a scene under the same NAME in two different World Content Server hosting providers, then you can have different sets of permissions in each server. And also, there is no transaction fees involved in maintaining the ACL (granting or revoking permissions).</p>

<p>A new command has been added to Decentraland CLI that allows to show the current ACL stored in the Worlds Content Server for a given NAME, and it also allows granting access to more wallets or revoking access to wallets that are already in the ACL.</p>

<p>In order to grant permission for publishing a scene to another wallet you have to:</p>

<li>Make sure to have the latest version of Decentraland CLI (v3.16.2 or later).</li>

<li>Make sure you own the NAME for which you want to manage the ACL.</li>

<li>Use command</li>

<code>dcl world-acl NAME.dcl.eth grant 0x1 0x2 ... 0xn</code>

<li>where those</li>

<code>0xn</code>

<li>are a list of addresses separated by spaces.</li>

<p>By default,</p>

<code>world-acl</code>

<p>will act on</p>

<code>worlds-content-server.decentraland.org</code>

<p>. If you are using a different hosting provider, make sure to add</p>

<code>--target-content https://your-hosting.com</code>

<p>to each of the subcommands (</p>

<code>show</code>

<p>,</p>

<code>grant</code>

<p>and</p>

<code>revoke</code>

<p>).</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/worlds/about/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq/#worlds

<title>Places FAQ | Decentraland Documentation</title>

<strong>Places FAQ</strong>

<h1>Places FAQ</h1>

<p>Below you can find the</p>

<strong>frequently asked questions</strong>

<p>about</p>

<p>.</p>

<h2>Editing Your Place</h2>

<strong>How do I edit the title, description or image of my Place?</strong>

<p>The title, description and image of your Place are taken from the scene metadata. Find out more about editing the</p>

<p>.</p>

<strong>How does my Place get updated?</strong>

<p>When you re-upload your scene, the Places website will update any metadata automatically.</p>

<strong>What happens if I change my Place significantly?</strong>

<p>Each Place is assigned a unique ID. When certain conditions are met, your Place may be deemed “new”, resulting in a new ID assignment. This change will cause your Place to lose any accumulated favorites and likes. For details on these conditions, please refer to</p>

<p>.</p>

<h2>Like Percentage</h2>

<strong>How is the like percentage calculated?</strong>

<p>In order to prevent abuse, the like percentage is calculated from likes and dislikes from users who have at least 100</p>

<p>. Anyone with an account can like or dislike, but only qualifying votes are used to calculate the like percentage.</p>

<p>Increase your chances of getting a good rating by making sure your Place has a title, description and thumbnail.</p>

<h2>Points of Interest</h2>

<strong>How can my Place become a Point of Interest?</strong>

<p>Points of interest are notable locations in Decentraland. These “POIs” are promoted in several areas of the virtual world’s UI, and are promoted as good places for users to explore, especially people new to Decentraland.</p>

<p>You can create a</p>

<p>in the</p>

<p>to nominate your Place as a Point of Interest.</p>

<h2>Worlds</h2>

<strong>Which Worlds appear in the Worlds tab?</strong>

<p>As defined in the</p>

<em>Worlds 1.0 - Short-Term Plan</em>

<p>, we allow discoverability of Worlds deployed to Foundation’s World Content Server only for NAME owners that also hold LAND or an active LAND rental contract.</p>

<h1>More help</h1>

<p>For more help, join the</p>

<p>and post a question in the Support section.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq/#worlds

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/dao-userguide/#voting-power

<title>DAO User Guide | Decentraland Documentation</title>

<strong>DAO User Guide</strong>

<h1>DAO User Guide</h1>

<h2>Table of Contents</h2>

<h2>Logging in</h2>

<p>To get started with the DAO, visit</p>

<p>. You will be presented with a welcome screen and quick start tutorial.</p>

<p>After reading the quick start tutorial, click</p>

<strong>Sign In</strong>

<p>. You must connect a wallet in order to use the DAO. Currently, you can use either</p>

<strong>Metamask</strong>

<p>or</p>

<strong>Fortmatic</strong>

<p>. Make sure the wallet you’re using holds the relevant tokens for participating in the DAO (MANA, NAMES, or LAND)</p>

<p>After connecting your wallet you will be taken to the homepage of the DAO featuring a list of all currently active proposals.</p>

<h2>Voting power</h2>

<p>Voting power is calculated from the total balance of MANA, NAMES and LAND associated with the wallet connected with the DAO.</p>

<strong>The DAO looks at both your wrapped and unwrapped balances, so you do not need to unwrap any MANA to achieve your full voting power.</strong>

<p>However, you can unwrap any previously wrapped MANA at any time from the “Voting Power” tab. There is still a gas fee associated with unwrapping MANA as it is a transaction on the Eth mainnet.</p>

<p>Your vote in the Decentraland DAO is weighted according to the balance of MANA, NAMES and LAND associated with the account you log in with.</p>

<p>To view your current voting power, navigate to the</p>

<strong>Voting Power</strong>

<p>tab.</p>

<h4>How is voting power calculated?</h4>

<p>Voting power is represented as</p>

<strong>“VP”</strong>

<p>. MANA, NAME and LAND contribute to your total voting power as follows:</p>

<li>1 MANA contributes 1 VP</li>

<li>1 NAME contributes 100 VP</li>

<li>1 LAND parcel contributes 2000 VP</li>

<li>Each Estate is worth 2000 multiplied by the number of single LAND parcels in that Estate. For example, an Estate with 2 parcels will contribute 4000 VP to your total voting power.</li>

<h4>What happens if your voting power changes before a proposal closes?</h4>

<p>If your MANA or LAND balance changes, it will affect your voting power, but only on proposals that are created after your balance changes.</p>

<p>The moment a new proposal is created, the DAO looks at all voters’ MANA and LAND balances to calculate their voting power. In other words, when you vote on a proposal, the voting power of your vote will be equal to the balance you had at the instant the proposal was initially created. You may vote with that VP, then change your MANA/LAND balance without affecting the weight of your vote.</p>

<h4>Why does the Decentraland DAO use weighted votes?</h4>

<p>If the Decentraland DAO gave each Ethereum address one vote, and each vote was weighted equally, then users could create as many separate addresses as they wanted to obtain more voting power.</p>

<p>Determining voting power by considering the MANA, NAME and LAND balances is currently the most secure way to limit the amount of influence each voter may have. Additionally, the more MANA, NAME or LAND you own in Decentraland, the greater your personal stake is considered to be, thus earning your vote more influence within the DAO.</p>

<h2>Approve/Reject conditions</h2>

<p>Depending on the type of proposal, a certain amount of participating VP is needed to consider the votation valid. You will see this referenced on the Governance dApp as the</p>

<strong>Acceptance Threshold</strong>

<p>for the proposal. Once the acceptance threshold has been met, a proposal is approved if the total voting power in favor of the proposal is greater than the total voting power against the proposal. This is the typical 50/50 majority model we expect to see in most democratic votes.</p>

<p>The only type of proposal that do not follow this rule are the</p>

<strong>Pre-proposal polls</strong>

<p>. Since these proposals are considered a non-binding mechanism to gather community feedback around an idea, they do not have predefined Yes/No options for voting. Users might add more that two options making them a multiple choice poll. It is important to mention that if the Pre-proposal polls reach the Acceptance Threshold defined of 500k VP, they might get promoted to a</p>

<strong>Draft proposal</strong>

<p>and end up being a binding</p>

<strong>Governance proposal</strong>

<p>.</p>

<h2>Browsing all proposals</h2>

<p>To view all proposals in the DAO, visit</p>

<p>. The homepage of the DAO lists all recently added proposals sorted from most recent to oldest, by default.</p>

<p>You can filter proposals by</p>

<strong>Outcomes</strong>

<p>:</p>

<strong>Active</strong>

<li>– proposals that are currently being voted on</li>

<strong>Passed</strong>

<li>– proposals that have been approved by the community</li>

<strong>Rejected</strong>

<li>– proposals that have already been voted on and either were rejected by the community or didn’t met the acceptance threshold</li>

<strong>Enacted</strong>

<li>– proposals that have been enacted on-chain by the DAO Committee</li>

<strong>Finished</strong>

<li>– proposals that are closed, but do not have yes/no results, like multiple choice polls</li>

<p>You can also filter proposals by</p>

<strong>Category</strong>

<p>using the category column in the left side of the UI:</p>

<strong>All proposals</strong>

<li>– displays all proposals regardless of category or outcome</li>

<strong>Catalyst Node</strong>

<li>– only displays proposals to add new Catalyst nodes</li>

<strong>Point of Interest</strong>

<li>– only displays proposals to add new POIs</li>

<strong>Name Ban</strong>

<li>– only displays proposals to ban a name</li>

<strong>Grant Request</strong>

<li>– only displays grant requests</li>

<strong>Pre-proposal Poll</strong>

<li>– only displays non-binding polls</li>

<strong>Draft proposal</strong>

<li>– only displays draft proposals</li>

<strong>Governance proposal</strong>

<li>– only displays final binding governance proposals</li>

<p>To view only proposals that have been passed, click the</p>

<strong>Enacted</strong>

<p>tab. Enacted proposals in this tab are sorted from most recent to oldest by default.</p>

<h2>Viewing a proposal</h2>

<p>To read a proposal, just click on the proposal’s title to view the details page.</p>

<p>Each proposal detail page includes all of the descriptive information provided by the person who submitted the proposal.</p>

<p>You’ll also find links to the proposal’s discussion thread in the Forum, buttons to add a proposal to your watch list, the current voting results, buttons to vote, the acceptance threshold, your current Voting Power and who voted on the proposal.</p>

<p>Proposal details pages also list the unique avatar name associated with the Ethereum address that opened the proposal, if one exists, and the start and end dates of the proposal.</p>

<p>Finally, you’ll see a link to the proposals entry on Snapshot – the voting platform used by the Decentraland DAO.</p>

<h2>Adding proposals to your watch list</h2>

<p>To add a proposal to your watch list, view the proposal’s detail page and click</p>

<strong>Add to my Watchlist</strong>

<p>.</p>

<p>To remove a proposal from your watchlist, click</p>

<strong>Remove from my Watchlist</strong>

<p>from the proposal’s detail page. You can also click the red flag icon on any proposal currently in your watchlist to remove it.</p>

<h2>Participating in the Forum discussions</h2>

<p>As a governance platform, the Decentraland DAO is most effective when paired with frequent discussion within the community. Every time a new proposal is opened on</p>

<strong>governance.decentraland.org</strong>

<p>, an accompanying topic is automatically opened on</p>

<p>.</p>

<p>Before casting your vote, please take the time to view and join in on these forum discussions. Click the button</p>

<strong>Discuss in the forum</strong>

<p>from the details page of any DAO proposal you wish to discuss. You can also browse open topics by navigating to</p>

<p>, heading to the</p>

<strong>Governance</strong>

<p>category, and browsing the open topics.</p>

<p>You don’t need to own tokens to participate in these discussions! Everyone is welcome to contribute to the conversation.</p>

<h2>Voting</h2>

<p>To vote on a proposal, log into the DAO at</p>

<p>with a wallet that contains MANA, NAME or LAND.</p>

<strong>Minimum balance needed to vote:</strong>

<p>Only MANA, NAME or LAND holders may vote on proposals in the Decentraland DAO.</p>

<strong>The current minimum balance needed to have a weighted vote on proposals in the DAO is 1VP</strong>

<p>Voting with a balance of zero will result in a vote with a weight of 0, which does not impact the final results.</p>

<p>To vote on a proposal once you’ve connected your wallet, simply view the proposal’s detail page and click the</p>

<strong>VOTE YES</strong>

<p>or</p>

<strong>VOTE NO</strong>

<p>button, or select one of the multiple choice options if it is a poll, according to how you’d like to vote.</p>

<p>Make sure that you read the full proposal so that you understand the issue being discussed and what will happen if the proposal is approved or rejected.</p>

<p>After clicking the Vote button, your connected Ethereum wallet will prompt you to sign the transaction. Remember, this is only a signed transaction, and requires no gas fee.</p>

<p>You will be given the option of adding the proposal to your watch list, this is a nice way to track the proposals you’re interested in. If you don’t want to add the proposal to your Watchlist, just click</p>

<strong>No thanks</strong>

<p>.</p>

<p>After submitting your vote, you can change it at any time leading up to the end of the voting period - as shown in the proposal’s detail page.</p>

<h4>What happens if your VP changes before a proposal is complete?</h4>

<p>The DAO calculates your voting power for each individual proposal at the moment each proposal is created. If your VP changes after this moment, it will not affect your vote on that proposal.</p>

<p>For a full discussion of voting power, and how and when it is calculated, please see the</p>

<p>section of the User Guide.</p>

<h2>Creating a proposal</h2>

<p>To create a new proposal in the Decentraland DAO, start by logging in at</p>

<p>and connecting a wallet that contains MANA, NAME or LAND.</p>

<p>After logging in and connecting your wallet, click</p>

<strong>Submit a proposal</strong>

<p>and select the proposal category you want to use. Each category will provide a form allowing you to provide the relevant information for your proposal.</p>

<p>The form for every category is different, so make sure that you select the correct category for your proposal. The proposal forms in the DAO support Markdown, so you can format the content of your proposal to make it more readable. This is especially helpful for longer proposals.</p>

<p>To preview your rendered Markdown text, toggle the</p>

<strong>Preview</strong>

<p>switch. If you aren’t familiar with Markdown, you can use simple plain text.</p>

<p>Some proposal categories have minimum VP submission thresholds, meaning you have to have at least certain amount of VP to submit the proposals. This will be informed to you on the Governance dApp.</p>

<p>After completing the proposal form for the category you’ve selected, click</p>

<strong>Submit proposal</strong>

<p>. After successfully submitting your proposal, you will be taken to your new proposal’s detail page where you can add it to your watchlist and cast your vote.</p>

<h2>Proposal Categories</h2>

<h3>Binding Proposals</h3>

<h4>📍 Point of interest</h4>

<p>Points of interest are notable locations in Decentraland. These “POIs” are promoted in several areas of the virtual world’s UI, and are promoted as good places for users to explore, especially people new to Decentraland.</p>

<p>If you have created a location, or have found a location that you think should be on this list, or if you think a current POI should be removed since it’s no longer interesting, you can use this proposal category to present your suggestion to the DAO.</p>

<h4>🚫 Name ban</h4>

<p>The “banned name” list includes offensive or harmful avatar and location names that are not permitted in Decentraland. Any names on this list cannot be claimed, used, or transferred between users. To suggest banning a name, you can use the Name ban proposal category in the DAO.</p>

<h4>🌐 Catalyst nodes</h4>

<p>Catalyst nodes are the community-run servers that provide the content and establish the peer-to-peer connections needed to keep Decentraland’s virtual world running. Whenever a user visits play.decentraland.org, they are connected to one of these nodes. However, only nodes that have been approved by the DAO are used in Decentraland’s network.</p>

<p>To suggest the addition of a new node to the network, you can use the Catalyst Node category.</p>

<h3>Governance Process Proposals</h3>

<p>Some proposals are not as simple as adding or removing an item from a list, they require community signaling, discussions and implementation paths. These proposals should be submitted thorugh a three-stage governance process that starts with a poll and ends with a binding proposal.</p>

<p>The voting process includes three steps: a Pre-Proposal Poll, a Draft Proposal, and a Governance Proposal. Each tier will have progressively increasing submission and passage thresholds to ensure important governance decisions are made by a representative majority (based on Voting Power). Each step must reach the defined VP threshold to be promoted to the next one.</p>

<h4>📊 Pre-proposal Poll</h4>

<p>This is the first step to get to the final binding Governance proposal. Polls in the Decentraland DAO are non-binding, multiple choice questionnaires that may be used to measure the community’s general opinion or sentiment regarding different issues. They are non-binding in that the DAO does not automatically act on the results of any of these polls. If a pre-proposal poll gathers enough participating VP (500k VP is the acceptance threshold) it might get promoted to Draft proposal.</p>

<h4>📊 Draft Proposal</h4>

<p>A Draft Proposal presents a potential policy to the community in a structured format and formalizes the discussion about the proposal’s potential impacts and implementation pathways. A Draft Proposal that fails or does not reach this threshold can be amended and resubmitted one time. If a Draft proposal gathers enough participating VP (1M VP is the acceptance threshold) it might get promoted to a binding Governance proposal.</p>

<h4>📊 Governance Proposal</h4>

<p>This is the last step of the Governance process and is the only one that is binding. This proposal must flesh out all the details, data, methods, assesments or any other relevant information for implementing this proposal. A Governance proposal is accepted if it meets the acceptance threshold of 6M VP and the Yes option gets a simple majority.</p>

<h2>Deleting a proposal</h2>

<p>Proposals can only be deleted by the person who created them.</p>

<p>To delete one of your proposals, navigate to the details page of the proposal you want to delete. Click</p>

<strong>Delete Proposal</strong>

<p>at the bottom of the right hand column. You will have to confirm your deletion.</p>

<p>Be careful! Deleted proposals cannot be restored!</p>

<p>If you delete a proposal after people have voted on it, nothing will happen. Deleted proposals with binding actions will not be enacted by the DAO Committee.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq/#worlds

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/dao-userguide/#creating-a-proposal

<title>DAO User Guide | Decentraland Documentation</title>

<strong>DAO User Guide</strong>

<h1>DAO User Guide</h1>

<h2>Table of Contents</h2>

<h2>Logging in</h2>

<p>To get started with the DAO, visit</p>

<p>. You will be presented with a welcome screen and quick start tutorial.</p>

<p>After reading the quick start tutorial, click</p>

<strong>Sign In</strong>

<p>. You must connect a wallet in order to use the DAO. Currently, you can use either</p>

<strong>Metamask</strong>

<p>or</p>

<strong>Fortmatic</strong>

<p>. Make sure the wallet you’re using holds the relevant tokens for participating in the DAO (MANA, NAMES, or LAND)</p>

<p>After connecting your wallet you will be taken to the homepage of the DAO featuring a list of all currently active proposals.</p>

<h2>Voting power</h2>

<p>Voting power is calculated from the total balance of MANA, NAMES and LAND associated with the wallet connected with the DAO.</p>

<strong>The DAO looks at both your wrapped and unwrapped balances, so you do not need to unwrap any MANA to achieve your full voting power.</strong>

<p>However, you can unwrap any previously wrapped MANA at any time from the “Voting Power” tab. There is still a gas fee associated with unwrapping MANA as it is a transaction on the Eth mainnet.</p>

<p>Your vote in the Decentraland DAO is weighted according to the balance of MANA, NAMES and LAND associated with the account you log in with.</p>

<p>To view your current voting power, navigate to the</p>

<strong>Voting Power</strong>

<p>tab.</p>

<h4>How is voting power calculated?</h4>

<p>Voting power is represented as</p>

<strong>“VP”</strong>

<p>. MANA, NAME and LAND contribute to your total voting power as follows:</p>

<li>1 MANA contributes 1 VP</li>

<li>1 NAME contributes 100 VP</li>

<li>1 LAND parcel contributes 2000 VP</li>

<li>Each Estate is worth 2000 multiplied by the number of single LAND parcels in that Estate. For example, an Estate with 2 parcels will contribute 4000 VP to your total voting power.</li>

<h4>What happens if your voting power changes before a proposal closes?</h4>

<p>If your MANA or LAND balance changes, it will affect your voting power, but only on proposals that are created after your balance changes.</p>

<p>The moment a new proposal is created, the DAO looks at all voters’ MANA and LAND balances to calculate their voting power. In other words, when you vote on a proposal, the voting power of your vote will be equal to the balance you had at the instant the proposal was initially created. You may vote with that VP, then change your MANA/LAND balance without affecting the weight of your vote.</p>

<h4>Why does the Decentraland DAO use weighted votes?</h4>

<p>If the Decentraland DAO gave each Ethereum address one vote, and each vote was weighted equally, then users could create as many separate addresses as they wanted to obtain more voting power.</p>

<p>Determining voting power by considering the MANA, NAME and LAND balances is currently the most secure way to limit the amount of influence each voter may have. Additionally, the more MANA, NAME or LAND you own in Decentraland, the greater your personal stake is considered to be, thus earning your vote more influence within the DAO.</p>

<h2>Approve/Reject conditions</h2>

<p>Depending on the type of proposal, a certain amount of participating VP is needed to consider the votation valid. You will see this referenced on the Governance dApp as the</p>

<strong>Acceptance Threshold</strong>

<p>for the proposal. Once the acceptance threshold has been met, a proposal is approved if the total voting power in favor of the proposal is greater than the total voting power against the proposal. This is the typical 50/50 majority model we expect to see in most democratic votes.</p>

<p>The only type of proposal that do not follow this rule are the</p>

<strong>Pre-proposal polls</strong>

<p>. Since these proposals are considered a non-binding mechanism to gather community feedback around an idea, they do not have predefined Yes/No options for voting. Users might add more that two options making them a multiple choice poll. It is important to mention that if the Pre-proposal polls reach the Acceptance Threshold defined of 500k VP, they might get promoted to a</p>

<strong>Draft proposal</strong>

<p>and end up being a binding</p>

<strong>Governance proposal</strong>

<p>.</p>

<h2>Browsing all proposals</h2>

<p>To view all proposals in the DAO, visit</p>

<p>. The homepage of the DAO lists all recently added proposals sorted from most recent to oldest, by default.</p>

<p>You can filter proposals by</p>

<strong>Outcomes</strong>

<p>:</p>

<strong>Active</strong>

<li>– proposals that are currently being voted on</li>

<strong>Passed</strong>

<li>– proposals that have been approved by the community</li>

<strong>Rejected</strong>

<li>– proposals that have already been voted on and either were rejected by the community or didn’t met the acceptance threshold</li>

<strong>Enacted</strong>

<li>– proposals that have been enacted on-chain by the DAO Committee</li>

<strong>Finished</strong>

<li>– proposals that are closed, but do not have yes/no results, like multiple choice polls</li>

<p>You can also filter proposals by</p>

<strong>Category</strong>

<p>using the category column in the left side of the UI:</p>

<strong>All proposals</strong>

<li>– displays all proposals regardless of category or outcome</li>

<strong>Catalyst Node</strong>

<li>– only displays proposals to add new Catalyst nodes</li>

<strong>Point of Interest</strong>

<li>– only displays proposals to add new POIs</li>

<strong>Name Ban</strong>

<li>– only displays proposals to ban a name</li>

<strong>Grant Request</strong>

<li>– only displays grant requests</li>

<strong>Pre-proposal Poll</strong>

<li>– only displays non-binding polls</li>

<strong>Draft proposal</strong>

<li>– only displays draft proposals</li>

<strong>Governance proposal</strong>

<li>– only displays final binding governance proposals</li>

<p>To view only proposals that have been passed, click the</p>

<strong>Enacted</strong>

<p>tab. Enacted proposals in this tab are sorted from most recent to oldest by default.</p>

<h2>Viewing a proposal</h2>

<p>To read a proposal, just click on the proposal’s title to view the details page.</p>

<p>Each proposal detail page includes all of the descriptive information provided by the person who submitted the proposal.</p>

<p>You’ll also find links to the proposal’s discussion thread in the Forum, buttons to add a proposal to your watch list, the current voting results, buttons to vote, the acceptance threshold, your current Voting Power and who voted on the proposal.</p>

<p>Proposal details pages also list the unique avatar name associated with the Ethereum address that opened the proposal, if one exists, and the start and end dates of the proposal.</p>

<p>Finally, you’ll see a link to the proposals entry on Snapshot – the voting platform used by the Decentraland DAO.</p>

<h2>Adding proposals to your watch list</h2>

<p>To add a proposal to your watch list, view the proposal’s detail page and click</p>

<strong>Add to my Watchlist</strong>

<p>.</p>

<p>To remove a proposal from your watchlist, click</p>

<strong>Remove from my Watchlist</strong>

<p>from the proposal’s detail page. You can also click the red flag icon on any proposal currently in your watchlist to remove it.</p>

<h2>Participating in the Forum discussions</h2>

<p>As a governance platform, the Decentraland DAO is most effective when paired with frequent discussion within the community. Every time a new proposal is opened on</p>

<strong>governance.decentraland.org</strong>

<p>, an accompanying topic is automatically opened on</p>

<p>.</p>

<p>Before casting your vote, please take the time to view and join in on these forum discussions. Click the button</p>

<strong>Discuss in the forum</strong>

<p>from the details page of any DAO proposal you wish to discuss. You can also browse open topics by navigating to</p>

<p>, heading to the</p>

<strong>Governance</strong>

<p>category, and browsing the open topics.</p>

<p>You don’t need to own tokens to participate in these discussions! Everyone is welcome to contribute to the conversation.</p>

<h2>Voting</h2>

<p>To vote on a proposal, log into the DAO at</p>

<p>with a wallet that contains MANA, NAME or LAND.</p>

<strong>Minimum balance needed to vote:</strong>

<p>Only MANA, NAME or LAND holders may vote on proposals in the Decentraland DAO.</p>

<strong>The current minimum balance needed to have a weighted vote on proposals in the DAO is 1VP</strong>

<p>Voting with a balance of zero will result in a vote with a weight of 0, which does not impact the final results.</p>

<p>To vote on a proposal once you’ve connected your wallet, simply view the proposal’s detail page and click the</p>

<strong>VOTE YES</strong>

<p>or</p>

<strong>VOTE NO</strong>

<p>button, or select one of the multiple choice options if it is a poll, according to how you’d like to vote.</p>

<p>Make sure that you read the full proposal so that you understand the issue being discussed and what will happen if the proposal is approved or rejected.</p>

<p>After clicking the Vote button, your connected Ethereum wallet will prompt you to sign the transaction. Remember, this is only a signed transaction, and requires no gas fee.</p>

<p>You will be given the option of adding the proposal to your watch list, this is a nice way to track the proposals you’re interested in. If you don’t want to add the proposal to your Watchlist, just click</p>

<strong>No thanks</strong>

<p>.</p>

<p>After submitting your vote, you can change it at any time leading up to the end of the voting period - as shown in the proposal’s detail page.</p>

<h4>What happens if your VP changes before a proposal is complete?</h4>

<p>The DAO calculates your voting power for each individual proposal at the moment each proposal is created. If your VP changes after this moment, it will not affect your vote on that proposal.</p>

<p>For a full discussion of voting power, and how and when it is calculated, please see the</p>

<p>section of the User Guide.</p>

<h2>Creating a proposal</h2>

<p>To create a new proposal in the Decentraland DAO, start by logging in at</p>

<p>and connecting a wallet that contains MANA, NAME or LAND.</p>

<p>After logging in and connecting your wallet, click</p>

<strong>Submit a proposal</strong>

<p>and select the proposal category you want to use. Each category will provide a form allowing you to provide the relevant information for your proposal.</p>

<p>The form for every category is different, so make sure that you select the correct category for your proposal. The proposal forms in the DAO support Markdown, so you can format the content of your proposal to make it more readable. This is especially helpful for longer proposals.</p>

<p>To preview your rendered Markdown text, toggle the</p>

<strong>Preview</strong>

<p>switch. If you aren’t familiar with Markdown, you can use simple plain text.</p>

<p>Some proposal categories have minimum VP submission thresholds, meaning you have to have at least certain amount of VP to submit the proposals. This will be informed to you on the Governance dApp.</p>

<p>After completing the proposal form for the category you’ve selected, click</p>

<strong>Submit proposal</strong>

<p>. After successfully submitting your proposal, you will be taken to your new proposal’s detail page where you can add it to your watchlist and cast your vote.</p>

<h2>Proposal Categories</h2>

<h3>Binding Proposals</h3>

<h4>📍 Point of interest</h4>

<p>Points of interest are notable locations in Decentraland. These “POIs” are promoted in several areas of the virtual world’s UI, and are promoted as good places for users to explore, especially people new to Decentraland.</p>

<p>If you have created a location, or have found a location that you think should be on this list, or if you think a current POI should be removed since it’s no longer interesting, you can use this proposal category to present your suggestion to the DAO.</p>

<h4>🚫 Name ban</h4>

<p>The “banned name” list includes offensive or harmful avatar and location names that are not permitted in Decentraland. Any names on this list cannot be claimed, used, or transferred between users. To suggest banning a name, you can use the Name ban proposal category in the DAO.</p>

<h4>🌐 Catalyst nodes</h4>

<p>Catalyst nodes are the community-run servers that provide the content and establish the peer-to-peer connections needed to keep Decentraland’s virtual world running. Whenever a user visits play.decentraland.org, they are connected to one of these nodes. However, only nodes that have been approved by the DAO are used in Decentraland’s network.</p>

<p>To suggest the addition of a new node to the network, you can use the Catalyst Node category.</p>

<h3>Governance Process Proposals</h3>

<p>Some proposals are not as simple as adding or removing an item from a list, they require community signaling, discussions and implementation paths. These proposals should be submitted thorugh a three-stage governance process that starts with a poll and ends with a binding proposal.</p>

<p>The voting process includes three steps: a Pre-Proposal Poll, a Draft Proposal, and a Governance Proposal. Each tier will have progressively increasing submission and passage thresholds to ensure important governance decisions are made by a representative majority (based on Voting Power). Each step must reach the defined VP threshold to be promoted to the next one.</p>

<h4>📊 Pre-proposal Poll</h4>

<p>This is the first step to get to the final binding Governance proposal. Polls in the Decentraland DAO are non-binding, multiple choice questionnaires that may be used to measure the community’s general opinion or sentiment regarding different issues. They are non-binding in that the DAO does not automatically act on the results of any of these polls. If a pre-proposal poll gathers enough participating VP (500k VP is the acceptance threshold) it might get promoted to Draft proposal.</p>

<h4>📊 Draft Proposal</h4>

<p>A Draft Proposal presents a potential policy to the community in a structured format and formalizes the discussion about the proposal’s potential impacts and implementation pathways. A Draft Proposal that fails or does not reach this threshold can be amended and resubmitted one time. If a Draft proposal gathers enough participating VP (1M VP is the acceptance threshold) it might get promoted to a binding Governance proposal.</p>

<h4>📊 Governance Proposal</h4>

<p>This is the last step of the Governance process and is the only one that is binding. This proposal must flesh out all the details, data, methods, assesments or any other relevant information for implementing this proposal. A Governance proposal is accepted if it meets the acceptance threshold of 6M VP and the Yes option gets a simple majority.</p>

<h2>Deleting a proposal</h2>

<p>Proposals can only be deleted by the person who created them.</p>

<p>To delete one of your proposals, navigate to the details page of the proposal you want to delete. Click</p>

<strong>Delete Proposal</strong>

<p>at the bottom of the right hand column. You will have to confirm your deletion.</p>

<p>Be careful! Deleted proposals cannot be restored!</p>

<p>If you delete a proposal after people have voted on it, nothing will happen. Deleted proposals with binding actions will not be enacted by the DAO Committee.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq/#worlds

# End of the information extracted from the URL: https://docs.decentraland.org/creator/places/faq/#worlds

# Start of the information extracted from the URL: https://decentraland.org/discord

<title>Decentraland Discord</title>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/deploy-third-party/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/publishing/#the-test-server

<title>Publishing a scene | Decentraland Documentation</title>

<strong>Publishing a scene</strong>

<h1>Publishing a scene</h1>

<h2>Before you begin</h2>

<p>Make sure of the following:</p>

<p>Your scene complies with all of the</p>

<p>. Most of these are validated each time you run a preview of your scene.</p>

<p>You have a</p>

<p>account, or another wallet that’s accessible via Wallet Connect, and that your LAND parcels are owned by that account or have permissions.</p>

<p>You own or have permissions to the necessary amount of adjacent LAND parcels. Otherwise you can purchase LAND in the</p>

<p>.</p>

<p>You may also choose to publish your scene to a Decentraland</p>

<p>, in this case, you must own a NAME which you can mint on the</p>

<p>and your scene must comply with the World limits.</p>

<strong>📔 Note</strong>

<blockquote>: Multi-parcel scenes can only be deployed to adjacent parcels.</blockquote>

<h2>Check scene data</h2>

<p>When deploying, Decentraland uses information from</p>

<em>scene.json</em>

<p>to know where to deploy your scene to.</p>

<p>Open your scene’s</p>

<em>scene.json</em>

<p>file and complete the following data:</p>

<strong>title</strong>

<p>: The title is displayed on the UI under the mini-map, whenever players enter your scene. It also shows on the teleport popup.</p>

<strong>description</strong>

<p>: A description of what players will find in your scene. This is displayed on the teleport popup.</p>

<strong>navmapThumbnail</strong>

<p>: An image that represents your scene. This is displayed on the teleport popup. The image should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels.</p>

<strong>Parcels</strong>

<p>: The coordinates of the parcels that will be occupied by your scene</p>

<strong>Base</strong>

<p>: The coordinates of the parcel that will be considered the [0,0] coordinate of the scene. If your scene has multiple parcels, it should be the bottom-left (South-West) parcel.</p>

<strong>spawnPoints</strong>

<p>: A set of coordinates inside the scene (relative to the scene’s base parcel) where players spawn into. By default players spawn onto the</p>

<em>0,0,0</em>

<p>location of the scene (bottom-left corner). Use this to start out in a specific location, set a region to prevent players from overlapping with each other when they first appear.</p>

<strong>tags</strong>

<p>: A set of tags that describe your scene. These are used to help players and users explore Decentraland in a better way since they are able to find the content that they may be interested in.</p>

<p>.</p>

<strong>rating</strong>

<p>: This is used to classify the content of your scene based on its appropriateness for different age groups (</p>

<code>T</code>

<p>for Teens or</p>

<code>A</code>

<p>for Adults). It helps in filtering content for players.</p>

<strong>📔 Note</strong>

<blockquote>: See</blockquote>

<blockquote>for more details on how to set these parameters.</blockquote>

<h2>To publish the scene</h2>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you’ve</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Deployment to Worlds is not yet supported from the Editor.</blockquote>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Editor’s menu, by clicking the Decentraland logo on the tabs on the left. Then click</p>

<strong>Publish scene</strong>

<p>.</p>

<p>This opens a new tab in Visual Studio, showing what parcels you’re deploying to.</p>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<h3>Via the CLI</h3>

<p>Log into your Metamask account with the same public address associated with your parcels in Decentraland.</p>

<p>Run</p>

<code>dcl deploy</code>

<p>from the scene’s folder.</p>

<strong>💡 Tip</strong>

<blockquote>: If there are files in your project folder that you don’t want to deploy, list them in the</blockquote>

<em>.dclignore</em>

<blockquote>file before deploying.</blockquote>

<p>Optionally, you can also use the</p>

<code>--target-content</code>

<p>parameter with a World server URL in order to upload the scene to a World instead of to the Genesis City, for example</p>

<code>dcl deploy --target-content https://worlds-content-server.decentraland.org</code>

<p>.</p>

<p>A browser tab will open, showing what parcels you’re deploying to. Click</p>

<strong>Sign and Deploy</strong>

<p>.</p>

<p>Metamask opens, notifying you that your signature is requested. Click</p>

<strong>Sign</strong>

<p>to confirm this action.</p>

<strong>💡 Tip</strong>

<blockquote>: If you’re implementing a continuous integration flow, where changes to your scene are deployed automatically, then you can set the</blockquote>

<code>export DCL_PRIVATE_KEY</code>

<blockquote>environment variable to the private key of an account that has deploy permissions.</blockquote>

<strong>💡 Tip</strong>

<blockquote>:</blockquote>

<code>dcl deploy</code>

<blockquote>runs a</blockquote>

<code>dcl build</code>

<blockquote>, which checks the scene for type errors more strictly than running</blockquote>

<code>dcl start</code>

<blockquote>. If these errors can’t be avoided (eg: they happen in an external library) and they don’t impact the scene, you can use</blockquote>

<code>dcl deploy --skip-build</code>

<blockquote>to skip the</blockquote>

<code>dcl build</code>

<blockquote>step and deploy the scene as it is.</blockquote>

<h2>Publish from a hardware wallet</h2>

<p>Instead of storing your LAND tokens in a Metamask account, you may find it more secure to store them in a hardware wallet device, such as a</p>

<p>or a</p>

<p>, that’s physically plugged in to your computer.</p>

<p>If you’re using one of these devices, you can link the hardware wallet to Metamask to enable signing messages, while keeping the tokens more secure. See</p>

<p>for instructions to connect your account.</p>

<p>Once your hardware wallet can be used via Metamask, you can deploy following the same steps as if your tokens were on a Metamask account.</p>

<h2>Scene overwriting</h2>

<p>When a new scene is deployed, it overwrites older content that existed on the parcels it occupies.</p>

<p>If a scene that takes up multiple parcels is only partially overwritten by another, all of its parcels are either overwritten or erased.</p>

<p>Suppose you deployed your scene</p>

<em>A</em>

<p>over two parcels</p>

<em>[100, 100]</em>

<p>and</p>

<em>[100, 101]</em>

<p>. Then you sell parcel</p>

<em>[100, 101]</em>

<p>to a user who owns adjacent land and that deploys a large scene (</p>

<em>B</em>

<p>) to several parcels, including</p>

<em>[100, 101]</em>

<p>.</p>

<p>Your scene</p>

<em>A</em>

<p>can’t be partially rendered in just one parcel, so</p>

<em>[100, 100]</em>

<p>won’t display any content. You must build a new version of scene</p>

<em>A</em>

<p>that only takes up one parcel and deploy it to only parcel</p>

<em>[100, 100]</em>

<p>.</p>

<h2>What are the content servers</h2>

<p>The content servers are a network of community-owned servers with a filesystem that’s content-addressed, meaning that each file is identified by its contents, not by an arbitrary file name.</p>

<p>We use the content servers to host and distribute all scene content in a similar way to BitTorrent, keeping the Decentraland network distributed.</p>

<li>The content servers store and distribute all of the assets required to render your scenes.</li>

<li>The</li>

<code>dcl deploy</code>

<li>command links these assets to the LAND parcel specified in your</li>

<strong>scene.json</strong>

<li>file. Whenever you redeploy your scene, the CLI will update your LAND smart contract, if needed, to point to the most recent content available on the content servers.</li>

<p>The information on each copy of the server is verifiable, as each scene is signed by the LAND owner’s hash. This means that someone hosting a copy of the server won’t be able to tamper with the content to display something illegitimate. The community can also vote to approve or remove any of these servers using the DAO.</p>

<h2>The test server</h2>

<p>You can deploy content to the test catalyst server to run full tests with multiple users, the sourrounding scenes, and an environment that is identical to production. The test server is identical to all other catalyst servers, the difference is that the content that is deployed to this server isn’t propagated to the others. Content deployed to other servers on the other hand does get propagated to this server, so surrounding scenes should look as they will in production.</p>

<strong>📔 Note</strong>

<blockquote>: To deploy to parcels in the test server, you must have the same permissions required to deploy to those parcels in the main network.</blockquote>

<p>Players are never directed to this server, the only way to access it is to explicitly provide a URL parameter to connect to it.</p>

<p>If you’re working in a confidential project that you don’t want to unveil until launch, note that the test server is relatively hidden from players, but anyone explicitly using the test server’s URL could potentially run into it.</p>

<h3>Via the Decentraland Editor</h3>

<p>To deploy a scene to the test server:</p>

<p>Open VSCode in a Decentraland scene project.</p>

<p>Click on the Decentraland icon on the left sidebar.</p>

<p>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</p>

<code>Publish scene to test server</code>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<em>play.decentraland.org/?&CATALYST=peer-testing.decentraland.org</em>

<h3>Via the CLI</h3>

<p>To deploy to the test server, run:</p>

<code>dcl deploy --target peer-testing.decentraland.org</code>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<h2>Verify deployment success</h2>

<p>Once you deployed your scene, these changes will take a few minutes to be propagated throughout the various content servers in the network. If you enter Decentraland right after deploying, you might still see the previous version of your content, depending of what realm you enter.</p>

<p>After you sign to authorize the deployment of your scene, the signing dapp will start displaying confirmations that the new version of your content has been propagated throughout all of the servers in the network,</p>

<p>You’ll see a list of each of the servers that make up Decentraland’s content network. For each server, it specifies the timestamp of the last uploaded change on that parcel. Each one of these servers refers to a different realm, you can reference how these server names map to realm names in the</p>

<p>.</p>

<p>You can also obtain this information at any time by running the following command on the command line console:</p>

<code>npx @dcl/opscli pointer-consistency --pointer '0,0'</code>

<strong>📔 Note</strong>

<blockquote>: Use the coordinates of your scene instead of</blockquote>

<code>0,0</code>

<blockquote>. If your scene has multiple parcels, any one of its parcels will produce the same output. If the coordinates start with a negative number, add a</blockquote>

<code>\</code>

<blockquote>at the start of the coordinates to prevent the</blockquote>

<code>-</code>

<blockquote>character from being misinterpreted by the command line.</blockquote>

<h2>Automatic deployments</h2>

<p>If you regularly make changes to your scene’s content and want to implement a streamlined publication pipeline, you can automate the deployment of your scene via a GitHub action.</p>

<p>For this, you must first store your scene in a GitHub project. You can then set a</p>

<p>with the following script, which runs every time there’s a merge to the</p>

<code>main</code>

<p>branch. The script installs any dependencies, builds the project and then deploys it to Decentraland.</p>

<p>Important: For this process to run, you must set a wallet’s private key as an environment variable in GitHub, this is used to sign the deployment. As always, be very careful with keeping the private keys secure. Do NOT use the private key of the account that actually owns the land tokens, as that would have very big risks. Instead, delegate operator rights to a disposable wallet that owns no valuable tokens. If this private key is ever leaked somehow, you can easily revoke those operator rights from the account and set up a new wallet.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/publishing/#the-test-server

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/#tags

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>A scene is a Decentraland project that is spatially delimited, and is mapped to one or several LAND parcels. If a scene is deployed to the Decentraland map, players can experience it by visiting the scene’s coordinates.</p>

<p>See</p>

<p>for a list of what files are used in a scene project.</p>

<h2>Metadata</h2>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary to load your scene. You’re also free to add any fields that you wish.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>npx update-parcels</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>npx update-parcels <parcel></code>

<p>For example:</p>

<code>npx update-parcels 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>npx update-parcels <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>npx update-parcels 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>npx update-parcels <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>npx update-parcels</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>It’s very important to give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these displayed on a modal when they select the parcels of your scene on the map. They will also see these in a confirmation screen when being</p>

<p>there by another scene. Setting up compelling data here can significantly help drive traffic to your scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is especially useful in large scenes, to prevent players from spawning too far away from the coordinates where they originally intended to load. To have many spawn points, simply list them as an array.</p>

<p>When there are multiple spawn points, the one that’s closest to the coordinates indicated by the player is picked.</p>

<p>If a coordinate is marked as</p>

<code>default</code>

<p>, it will always be used, regardless of if it’s the closest. If multiple spawn points are marked as</p>

<code>default</code>

<p>, the closest one of these is picked.</p>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<p>A scene can also have multiple spawn regions, just like it can have multiple spawn points.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are not affected by these permissions, and are free to use the corresponding functionality.</blockquote>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on smart wearables and portable experiences:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>disabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the scene metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for libraries, where the library might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>getSceneInformation</code>

<p>function:</p>

<p>Then you can call the</p>

<code>getSceneInformation()</code>

<p>function, which returns a json object that includes much of the contents of the scene.json file.

The example below shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getSceneInformation()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.

Do not use the deprecated</blockquote>

<code>getSceneInfo()</code>

<blockquote>function.</blockquote>

<p>The object returned by</p>

<code>getSceneInformation()</code>

<p>includes the following:</p>

<code>baseUrl</code>

<li>: The base URL where the scene’s content is hosted</li>

<code>content</code>

<li>: An array with all the files of the scene, including their hash, that can be used together with the baseUrl to retrieve them.</li>

<code>metadataJson</code>

<li>: The full contents of the scene’s scene.json, as a string. You must parse this to obtain specific values.</li>

<code>urn</code>

<li>: The unique urn for the scene as a whole.</li>

<p>The example below parses the contents from</p>

<code>metadataJson</code>

<p>to obtain values from properties in the scene.json file</p>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re interested in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene is listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/#tags

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-files/

<title>Files in a scene | Decentraland Documentation</title>

<strong>Files in a scene</strong>

<h1>Files in a scene</h1>

<p>After</p>

<p>using the CLI, the scene folder will have a series of files with default content.</p>

<h2>Default files in a local scene</h2>

<p>Scenes include the following files:</p>

<strong>src/index.ts</strong>

<li>: The entry point of the scene.</li>

<strong>scene.json</strong>

<li>: The manifest that contains metadata for the scene.</li>

<strong>package.json</strong>

<li>and</li>

<strong>package-lock.json</strong>

<li>: Specify the versions of all dependencies of the scene.</li>

<strong>tsconfig.json</strong>

<li>: Typescript configuration file.</li>

<strong>.dclignore</strong>

<li>: Lists what files in your project not to deploy to IPFS.</li>

<h3>index.ts</h3>

<p>This is the entry point to your scene’s code. You could fit your entire scene’s logic into this file, although for clarity in most cases we recommend spreading out your code over several other</p>

<em>.ts</em>

<p>files.</p>

<p>In most cases, you’ll only need to edit this and other .ts files to create your scene. It contains the code that generates the</p>

<p>and</p>

<p>of your scene.</p>

<p>When running the scene, the contents of your</p>

<code>.ts</code>

<p>files are compiled to a single minified</p>

<code>.js</code>

<p>file,</p>

<code>bin/scene.js</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: You can use another tool or language instead of TypeScript, so long as your scripts are contained within a single Javascript file (bin/scene.js). All provided type declarations are made in TypeScript, and other languages and transpilers are not officially supported.</blockquote>

<h3>scene.json</h3>

<p>The</p>

<em>scene.json</em>

<p>file is a JSON formatted manifest for a scene in the world. A scene can span a single or multiple LAND parcels. The</p>

<em>scene.json</em>

<p>manifest describes what objects exist in the scene, a list of any assets needed to render it, contact information for the parcel owner, and security settings.</p>

<p>For more information see</p>

<p>. You can also read the original</p>

<p>for this metadata.</p>

<p>All of this metadata is optional for previewing the scene locally, but part of it is needed for deploying. You can change this information manually at any time.</p>

<h3>package.json</h3>

<p>This file provides information to NPM that allows it to identify the project, as well as handle the project’s dependencies. Decentraland scenes require one main package:</p>

<strong>@dcl/sdk</strong>

<li>: The fundamental dependency of the Decentraland SDK, including definitions and types for the engine, components, systems, etc.</li>

<strong>@dcl/js-runtime</strong>

<li>: A series of type declarations that makes the integration of @dcl/sdk smoother.</li>

<p>Your scene may include any number of other packages, for example to include</p>

<p>that can help make the writing of code easier, or enable special functionalities.</p>

<h3>package-lock.json</h3>

<p>This file lists the versions of all the other dependencies of the project. These versions are locked, meaning that the compiler will use literally the same minor release listed here.</p>

<p>You can change any package version manually by editing this file.</p>

<h4>tsconfig.json</h4>

<p>Directories containing a</p>

<em>tsconfig.json</em>

<p>file are root directories for TypeScript Projects. The</p>

<em>tsconfig.json</em>

<p>file specifies the root files and options required to compile your project from TypeScript into JavaScript.</p>

<p>When installing any additional libraries to your scene, an entry should be added automatically to this file. For installing Decentraland utils libraries, it shouldn’t be necessary to manually do any changes to this file.</p>

<h2>Recommended file locations</h2>

<p>Keep in mind that when you deploy your scene to Decentraland, any assets or external libraries that are needed to use your scene must be either packaged inside the scene folder or available via a remote server.</p>

<p>Anything that is meant to run in the player’s client must located inside the scene folder. You shouldn’t reference files or libraries that are installed elsewhere in your local machine, because they won’t be available to the deployed scene.</p>

<p>We suggest using these folder names consistently for storing the different types of assets that your scene might need:</p>

<li>3D models:</li>

<code>/models</code>

<li>Videos:</li>

<code>/videos</code>

<li>Sound files:</li>

<code>/sounds</code>

<li>Image files for textures (except for glTF models):</li>

<code>/materials</code>

<em>.ts</em>

<li>definitions for components</li>

<code>/src/components</code>

<em>.ts</em>

<li>definitions for systems</li>

<code>/src/systems</code>

<strong>📔 Note</strong>

<blockquote>: Supporting files for glTF models, like their texture image files or</blockquote>

<em>.bin</em>

<blockquote>files, should always be placed in the same folder as the model’s</blockquote>

<em>.gltf</em>

<blockquote>or</blockquote>

<em>.glb</em>

<blockquote>file.</blockquote>

<strong>📔 Note</strong>

<blockquote>: We recommend using always lower case names for all folders and file names, to avoid possible issues.</blockquote>

<h2>The dclignore file</h2>

<p>All scenes include a</p>

<em>.dclignore</em>

<p>file, this file specifies what files in the scene folder to ignore when deploying a scene to Decentraland.</p>

<p>For example, you might like to keep the Blender files for the 3D models in your scene inside the scene folder, but you want to prevent those files from being deployed to Decentraland. In that case, you could add</p>

<code>*.blend</code>

<p>to</p>

<em>.dclignore</em>

<p>to ignore all files with that extension.</p>

<th>What to ignore</th>

<th>Example</th>

<th>Description</th>

<td>Specific files</td>

<code>BACKUP.ts</code>

<td>Ignores a specific file</td>

<td>Folders</td>

<code>drafts/</code>

<td>Ignores entire contents of a folder and its subfolders</td>

<td>Extensions</td>

<code>*.blend</code>

<td>Ignores all files with a given extension</td>

<td>Name sections</td>

<code>test*</code>

<td>Ignores all files with names that match the query. In this case, that start with</td>

<em>test</em>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-files/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/sdk-101/

<title>Quick start | Decentraland Documentation</title>

<strong>Quick start</strong>

<h1>Quick start</h1>

<p>The Decentraland SDK is a powerful tool that lets you create scenes by writing in Typescript (Javascript + Types).</p>

<p>This mini-tutorial walks you through how to get set up, and shows you the basic parts of a Decentraland scene.</p>

<h2>Install the editor</h2>

<p>The Decentraland Editor is a Visual Studio extension, that allows you to build, preview and deploy Decentraland scenes.</p>

<p>To install the Decentraland Editor:</p>

<p>Install</p>

<p>, if you don’t have it already.</p>

<p>Open Visual Studio Code, and open the extensions marketplace. Search for the</p>

<strong>Decentraland Editor SDK7</strong>

<p>extension and click</p>

<strong>Install</strong>

<p>. You’ll then need to restart Visual Studio to use the extension.</p>

<p>Read</p>

<p>for more details about installing the Editor.</p>

<h2>Create your first scene</h2>

<p>To create your first scene using the Decentraland Editor, follow these steps.</p>

<p>Make sure you’ve</p>

<p>, then:</p>

<li>Open a Visual Studio Code window on an</li>

<em>empty folder</em>

<li>.</li>

<li>Select the Decentraland tab on Visual Studio’s left margin sidebar</li>

<li>Click</li>

<strong>Create Project</strong>

<p>This step may take a couple of minutes. It populates your folder with the default set of files for a basic scene.</p>

<p>Once that’s done, you can preview the 3D scene by clicking</p>

<strong>Run Scene</strong>

<p>in the Decentraland tab of Visual Studio Code.</p>

<p>Read more about the scene preview in</p>

<p>.</p>

<h2>Add 3D assets</h2>

<p>Download this 3D model of an avocado in</p>

<em>glb</em>

<p>format from the following</p>

<p>.</p>

<p>Create a new folder under your scene’s directory named</p>

<code>/models</code>

<p>. Extract the downloaded file and place the</p>

<code>avocado.glb</code>

<p>in the new</p>

<code>/models</code>

<p>folder.</p>

<p>In Visual Studio Code, navigate to the</p>

<code>/models</code>

<p>folder and select the</p>

<code>avocado.glb</code>

<p>model. You’ll see a tab opens to preview what the 3D model looks like.</p>

<h2>Edit the scene code</h2>

<p>Open the</p>

<code>src/index.ts</code>

<p>file from your scene folder.</p>

<p>Notice that this file defines a function called</p>

<code>main</code>

<p>. This function is the entry point to the scene, any code you want the scene to run when it fist loads needs to either be inside this function or be indirectly called by this function.</p>

<strong>📔 Note</strong>

<blockquote>: All the code we’ll add from this point on will be inside the</blockquote>

<code>main()</code>

<blockquote>function.</blockquote>

<p>At the end of your scene’s</p>

<code>index.ts</code>

<p>file, at the end of the</p>

<code>main()</code>

<p>function, add the following lines:</p>

<strong>💡 Tip</strong>

<p>: Visual Studio Code helps you by marking syntax errors, autocompleting while you write and even showing smart suggestions that depend on context. Also click on an object to see the full definition of its class.</p>

<p>If any of the words you pasted are underlined in red, hover over them to see if VS Studio offers an easy solution. In this case clicking the lightbulb will suggest</p>

<code>Update import from @dcl/sdk/ecs</code>

<p>. Select this option to import these components into your scene.</p>

<p>If you had the scene preview already running, close it. Then open the preview once again to see that the 3D model is now there too.</p>

<p>The lines you just added create a new</p>

<p>, give it a</p>

<p>based on the 3D model you downloaded, and</p>

<p>.</p>

<p>Note that the cubes in your scene all rotate smoothly, but not the avocado you just added. That’s because a</p>

<p>named</p>

<code>circularSystem</code>

<p>that comes defined in this template in the</p>

<code>systems.ts</code>

<p>file is running. This system runs a function on every frame (30 times a second). This system in particular tells every entity that has both a</p>

<code>MeshRenderer</code>

<p>and a</p>

<code>Transform</code>

<p>component in the scene to rotate just a tiny bit, once per frame. Your avocado model doesn’t have a</p>

<code>MeshRenderer</code>

<p>component, so it’s not affected by this system. If you delete or comment out the code for this system, all entities stop rotating.</p>

<h2>Add interactivity</h2>

<p>To make your scene more engaging, make the entities in the scene respond to the player’s interactions.</p>

<p>Add a pointer event handler. This executes a provided function every time that the player clicks on the avocado.</p>

<p>The</p>

<code>pointerEventsSystem.onPointerDown</code>

<p>statement requires defining three things:</p>

<li>What entity to work on</li>

<li>An</li>

<code>opts</code>

<li>object with additional parameters, that optionally include things like what button to use and what hint text to display.</li>

<li>A function, that will be called every time the entity is interacted with</li>

<p>In this case, the function we’re calling is simply logging the text “CLICKED AVOCADO” to the console.</p>

<p>In the</p>

<code>opts</code>

<p>object, we’re setting the</p>

<code>button</code>

<p>field so that it listens to the pointer button (the left-mouse button on a PC). We’re also adding an extra</p>

<code>hoverText</code>

<p>parameter to display a custom text in the hover hint. That way players will read the text “collect” when they hover their cursor over the avocado, and they’ll know what will happen if they click on it (the avocado doesn’t do much just yet, but we’ll get there in the next steps).</p>

<p>To read the message that is printed to the console:</p>

<li>If running the preview in VS Studio Code, open</li>

<strong>View > Output</strong>

<li>. The tab might already be open on the lower section of the screen.</li>

<li>If running the preview on a Chrome browser, go to</li>

<strong>View > Developer > Javascript console</strong>

<li>.</li>

<p>Note: For an entity to be clickable, it must have a collider geometry. The model of an avocado used in this tutorial includes one, see the</p>

<p>section for workarounds for models that don’t have a collider geometry.</p>

<p>Make the avocado vanish. Use</p>

<code>engine.removeEntity()</code>

<p>to get rid of the avocado once its clicked.</p>

<p>Now when clicked, the avocado ceases to exist in the scene.</p>

<h2>The SDK Utils library</h2>

<p>The Decentraland SDK Utils library includes a number of helper functions and specialized components that make it easier to carry out a lot of common use cases.</p>

<p>To use any of the helpers provided by the SDK Utils library:</p>

<p>Install it as a dependency of your scene. At the bottom of the Decentraland tab, in Visual Studio Code, click the</p>

<strong>+</strong>

<p>icon on the</p>

<strong>Dependencies</strong>

<p>section. Then write the name of the dependency you wish to install:</p>

<code>@dcl-sdk/utils</code>

<p>The UI will then ask you if this is a Decentraland dependency. Select</p>

<strong>Yes</strong>

<p>.</p>

<p>Add this line at the start of your</p>

<code>index.ts</code>

<p>file, or any other file that needs to use it:</p>

<code>import * as utils from "@dcl-sdk/utils"</code>

<p>Further down in the, write</p>

<code>utils.</code>

<p>and let the suggestions show the available helpers. You’ll see there are a number of functions you can run and of components that can be added to entities.</p>

<p>Let’s make the interaction with the avocado a little more engaging:</p>

<li>Use this function from the SDK Utils library on your avocado entity, to make it slowly shrink. The provided arguments make it change scale from a scale of 1 to a scale of 0.1 a over a period of 2 seconds:</li>

<p>The</p>

<code>utils.tweens.startScaling</code>

<p>function requires the following parameters:</p>

<code>* `entity`: What entity to work on

* `start`: Starting scale.</code>

<code>end</code>

<li>: Ending scale.</li>

<code>duration</code>

<li>: Duration (in seconds) of start to end scaling.</li>

<p>TIP: Your code editor will hint this information to you once you typed</p>

<code>utils.tweens.startScaling(</code>

<p>.</p>

<p>Instead of having the avocado shrink on its own when the scene starts, replace the function called by the pointer events handler, so that it performs the shrinking action instead of removing the entity from the engine.</p>

<p>Notice that the</p>

<code>utils.tweens.startScaling</code>

<p>function also takes two other optional more advanced parameters that you can play around with:</p>

<code>interpolationType</code>

<p>: What kind of curve to use to control the rate of change over time. By default linear, which results in a smooth constant change.</p>

<code>onFinishCallback</code>

<p>: A function that is called when the transition finishes.</p>

<p>The fourth parameter tells the component to perform the transition using an ease-out bounce interpolation, which results in a speed curve that goes from fast to slow and ends with a bouncy effect.</p>

<p>The final parameter, calls a very simple function prints the text “FINISHED” to the console once the transition is over, and also removes the avocado from the engine as we were doing before.</p>

<p>To learn more about the ECS Utils library, read its full documentation</p>

<p>.</p>

<h2>More Tutorials</h2>

<p>Read</p>

<p>for a high-level understanding of how Decentraland scenes function.</p>

<p>For examples that are built with SDK7, check out the</p>

<p>that contains several small scenes, all written with SDK7.</p>

<p>See the</p>

<strong>Development guide</strong>

<p>section for more instructions about adding content to your scene.</p>

<h2>Engage with other developers</h2>

<p>Visit</p>

<p>, join a lively discussion about what’s possible and how!</p>

<p>To debug any issues, we encourage that you to check the</p>

<p>and</p>

<p>sections in the documentation. If you don’t find a solution there, you can post issues to the</p>

<p>Decentraland Forum.</p>

<p>You can also post to</p>

<p>, using the tags</p>

<code>decentraland</code>

<p>or</p>

<code>decentraland-ecs</code>

<p>.</p>

<p>You can also ask in</p>

<p>. In the</p>

<strong>Support</strong>

<p>section, the</p>

<strong>#sdk</strong>

<p>channel is for questions regarding code, the</p>

<strong>#builder-and-3d</strong>

<p>channel is for questions regarding 3D models and art.</p>

<strong>#code-contribution</strong>

<p>is for discussing PRs to the SDK codebase.</p>

<h2>3D Art Assets</h2>

<p>A good experience will have great 3D art to go with it. If you’re keen on creating those 3D models yourself, you’re encouraged to, see the</p>

<p>for more info. But if you prefer to focus on the coding or game design side of things, you don’t need to create your own assets!</p>

<p>Here are a few tips to get great 3D models that you can use in a Decentraland scene:</p>

<li>Build a scene in the Decentraland</li>

<li>and export it, together with all its assets, to keep working on it with the SDK.</li>

<li>Download all the 3D assets available in the Builder from</li>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<strong>📔 Note</strong>

<blockquote>: Models must be in the supported</blockquote>

<code>.gltf</code>

<blockquote>or</blockquote>

<code>.glb</code>

<blockquote>formats, and must have a number of triangles, textures and materials that adhere to the</blockquote>

<blockquote>. If getting models from a third party site, pay attention to the licence restrictions that the content you download has.</blockquote>

<h2>Publish your scene</h2>

<p>If you own LAND, or have permissions given by someone that does, you can upload your scene to Decentraland. See</p>

<p>.</p>

<p>If you don’t own land, you can still upload your scene for free to third party services, so you can easily share your creations with others as a link. See</p>

<p>.</p>

<h2>Other useful information</h2>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/sdk-101/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/colliders/

<title>Colliders | Decentraland Documentation</title>

<strong>Colliders</strong>

<h1>Colliders</h1>

<p>To enable collisions between a 3D model and users of your scene, you must give the model colliders. Without a collider, players are able to walk through models as if they weren’t there. Colliders are also required to make an object respond to the player’s pointer events or to block them, or to be intersected by raycasts or block them. For performance reasons, colliders are often modeled separately as a simpler invisible geometry that has less vertices than the visible geometry.</p>

<p>The model can either use an invisible geometry to use as colliders, or (as of SDK7) you can instead assign the visible geometry to behave as a collider. See</p>

<p>. You can also assign different layer of collisions to the different geometries, to separately control player physics, pointer events, and other custom layers, see</p>

<p>.</p>

<p>Colliders don’t affect how models and entities interact with each other, they can always overlap. Colliders only affect how the model interacts with the player’s avatar.</p>

<p>For an object to be recognized by a Decentraland scene as a collider, all it needs is to be named in a certain way. The object’s name must include the the suffix “_collider” at the end.</p>

<p>For example, to create a collider for a lamp post you can create a simple box object surrounding its trunk. Players in the scene won’t see this box, but it will block their path.</p>

<p>In this case, we can name the box “LampPost_collider” and export both the tree and the box as a single</p>

<em>__gltf</em>

<p>model. The</p>

<em>_</em>

<em>collider</em>

<p>tag alerts the Decentraland world engine that the box object belongs to the collection of colliders, making the collider mesh invisible.</p>

<p>Whenever a player views the lamp post model in your scene, they will see the complex model for your lamp. However, when they walk into it, they will collide with the box, not the tree.</p>

<strong>Player Spatial Constraints</strong>

<p>When you design models that are meant for players to walk around in, you need to keep in mind the following reference measurements:</p>

<li>Players can walk up a step of up to 30 centimeters in height without jumping</li>

<li>Players can walk up slopes of an angle of up to 45 degrees without jumping</li>

<li>Players can jump up to 1,8 meters in height</li>

<li>Avatars measure around 1.9 meters in height, but consider that they might have hats or other wearables on their head.</li>

<p>Whenever a player views the tree model in your scene, they will see the complex model for your tree. However, when they walk into your tree, they will collide with the box, not the tree.</p>

<strong>Add A Collider To a Staircase</strong>

<p>Stairs are a very common use-case for collider objects. In order for players to climb stairs, there must be a corresponding _collider object that the players are able to step on.</p>

<p>We recommend using a ramp object for your stair colliders, this provides a much better experience when walking up or down. When they climb up your stairs, it will appear as a smooth ascent or descent, instead of requiring them to “jump” up each individual step.</p>

<p>Using a ramp object also avoids creating unnecessary geometry, saving room for other more complicated models. Keep in mind that collider geometry is also taken into account when calculating the</p>

<li>Create a new object in the shape of a ramp that resembles the size and proportions of the original stairs.</li>

<li>Name the ramp object something similar to S</li>

<em>tair_collider</em>

<li>. It must end in _</li>

<em>collider</em>

<li>.</li>

<li>Overlay the ramp object to the stairs so that they occupy the same space.</li>

<li>Export both objects together as a single</li>

<em>glTF</em>

<li>model.</li>

<p>Now when players view the stairs in your scene, they’ll see the more elaborate model of the stairs, but when they climb them, they’ll collide with the ramp.</p>

<strong>Optimizing Colliders</strong>

<li>Prefer using</li>

<strong>Box</strong>

<li>,</li>

<strong>Sphere</strong>

<li>and</li>

<strong>Capsule</strong>

<li>collision meshes, because it will be more performant on loading and at runtime.</li>

<li>Consider approximating complex collision mesh by several Primitive collision meshes (</li>

<strong>Box</strong>

<li>/</li>

<strong>Sphere</strong>

<li>/</li>

<strong>Capsule</strong>

<li>)</li>

<em>Example: Collider for Ring can be composed as several Capsule or Box colliders</em>

<li>Put collision mesh inside the Hierarchy of the object to which it is related. For example Spaceship_collider can be a child inside Spaceship parent (from Hierarchy point of view)</li>

<strong>Convex vs Concave Colliders</strong>

<p>If using arbitrary mesh collider is the only possibility, then make collision mesh Convex (not Concave). It will prevent strange physics situations, like stuttering, stuckings inside the collider or clipping through it. Note, that it is often possible to mimic concave mesh by several convex meshes.</p>

<strong>Collision Naming</strong>

<strong>Use meaningful names. Name should give context of where the asset is used or to which part of the object it relates.</strong>

<p>For asset naming we use mix of</p>

<code>PascalCase</code>

<p>and</p>

<code>snake_case</code>

<p>, which we can call</p>

<code>PascalSnake_case</code>

<p>. Basic rules there - new word or word after separator (</p>

<code>_</code>

<p>) starts with</p>

<strong>Capital letter.</strong>

<p>Collison Mesh is the mesh which is used as reference for creating a collider in the Explorer</p>

<li>It follows same principles as Meshes above, but has</li>

<code>_collider</code>

<li>suffix at the end</li>

<strong>Examples:</strong>

<li>🟢</li>

<strong>Prefer</strong>

<li>names -</li>

<code>Tram_Wheel_LeftFront_collider</code>

<li>🔴</li>

<strong>Avoid</strong>

<li>names -</li>

<code>Primitive.001_Collider</code>

<li>,</li>

<code>collider (1)</code>

<li>,</li>

<code>Cylinder.007_collider</code>

<li>,</li>

<strong>🔥Optimization Tip🔥</strong>

<p>If collider can be approximated by Box, Sphere or Capsule shape then use additional suffix with one of these 3 possible variations _box, _sphere or _capsule.

Using these 3 shapes instead of arbitrary mesh for collision detection will increase your scene performance and loading time 💪🚀</p>

<p>Examples: 🟢 Teater_MainWall_North_collider_box, Fountain_Statue_collider_sphere</p>

<strong>Best Practices For Colliders</strong>

<strong>Always use the smallest number of triangles possible when creating colliders.</strong>

<li>Avoid making a copy of a complex object to use as a collider. Simple colliders guarantee a good user-experience in and keep your scene within the triangle limitations.</li>

<strong>Collider objects shouldn’t have any material</strong>

<li>, as players of your scene will never see it. Colliders are invisible to players.</li>

<strong>All collider objects names must end with _</strong>

<em>collider</em>

<strong>.</strong>

<li>For example, T</li>

<em>ree_collider</em>

<li>.</li>

<strong>If you use a</strong>

<em>plane</em>

<strong>as a collider, it will only block in one direction.</strong>

<li>If you want colliders to block from both sides, for example for a wall, you need to create two planes with their normals facing in opposite directions.</li>

<li>When duplicating collider objects, pay attention to their names. Some programs append a _</li>

<em>1</em>

<li>to the end of the filename to avoid duplicates, for example</li>

<em>tree_collider_1</em>

<li>. Objects that are named like this will be interpreted by the Decentraland World Engine as normal objects, not colliders.</li>

<li>You can avoid adding a collider mesh if you add an invisible</li>

<code>MeshCollider</code>

<li>component to the entity, that approximates the shape of the 3D model.</li>

<li>You can also avoid adding a collider mesh if you configure the</li>

<code>GLTFContainer</code>

<li>component to use the visible geometry as a collider. See</li>

<li>.</li>

<li>If you’re creating a 3D model with many mesh shapes that each need their collider, there are some handy add-ons that can help. For Blender you can use the batch rename option inside Blender **</li>

<li>**to automatically add a</li>

<code>_collider</code>

<li>suffix to all mesh names in a group. More about this tool on “</li>

<strong>Using Blender to rename assets” section</strong>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/colliders/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/colliders/#colliders-on-3d-models

<title>Colliders | Decentraland Documentation</title>

<strong>Colliders</strong>

<h1>Colliders</h1>

<p>Entities that have colliders occupy space and block a player’s path, entities without colliders can be walked through by a player`s avatar.</p>

<p>Colliders are also needed to make an entity clickable. Button events are based on the collider shape of an entity, not on its visible shape.</p>

<p>There are separate collision layers for interacting with either the player’s physics, or with pointer events, colliders can be configured to only interact with one or the other. They can also be configured to interact with custom layers, that can be used with</p>

<p>to handle whatever makes sense to the scene.</p>

<strong>📔 Note</strong>

<blockquote>: Colliders don’t affect how other entities interact with each other, entities can always overlap. Collision settings only affect how the entity interacts with the player’s avatar and button events. Decentraland doesn’t have a native physics engine, so if you want entities to fall, crash or bounce, you must code this behavior into the scene, or import a library to handle that.</blockquote>

<h2>Colliders on primitive shapes</h2>

<p>Entities that have a</p>

<code>MeshRenderer</code>

<p>component to give them a</p>

<p>(boxes, spheres, planes etc) don’t have colliders by default. You must also give the entity a</p>

<code>MeshCollider</code>

<p>component.</p>

<p>The following collider shapes are available. Several shapes include optional additional fields, specific to that shape.</p>

<strong>box</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setBox()</code>

<p>, passing the entity.</p>

<strong>plane</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setPlane()</code>

<p>, passing the entity.</p>

<strong>sphere</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setSphere()</code>

<p>, passing the entity.</p>

<strong>cylinder</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setCylinder()</code>

<p>, passing the entity. Pass</p>

<code>radiusTop</code>

<p>and</p>

<code>radiusBottom</code>

<p>as additional optional fields, to modify the cylinder.</p>

<p>TIP: Set either</p>

<code>radiusTop</code>

<p>or</p>

<code>radiusBottom</code>

<p>to 0 to make a cone.</p>

<p>This example defines a box entity that can’t be walked through.</p>

<p>The shape used by the</p>

<code>MeshCollider</code>

<p>doesn’t need to necessarily match the one used by the</p>

<code>MeshRenderer</code>

<p>. You can also add a</p>

<code>MeshCollider</code>

<p>to an entity that has a 3D model from a</p>

<code>GLTFContainer</code>

<p>component, or to an entity that has no visible shape at all.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>MeshCollider</code>

<p>component and</p>

<code>ColliderLayer</code>

<p>must be imported via</p>

<code>import { MeshCollider, ColliderLayer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Colliders on 3D models</h2>

<p>3D models can be assigned colliders on two different geometry levels:</p>

<code>visibleMeshesCollisionMask</code>

<li>: Refers to the visible geometry of the model. By default this geometry has no colliders.</li>

<code>invisibleMeshesCollisionMask</code>

<li>: refers to the collider meshes, whose name end in</li>

<code>_collider</code>

<li>. By default, this geometry is treated as a collider for both physics and pointer events.</li>

<p>Any mesh embedded as part of a 3D model who’s name ends in</p>

<code>_collider</code>

<p>is treated as part of the</p>

<code>invisibleMeshesCollisionMask</code>

<p>layer, and interpreted as a collider by default.</p>

<p>Defining collider geometry as a separate invisible layer allows for much greater control and is a lot less demanding on the system than using the visible geometry, as the collision object is usually a lot simpler (with less vertices) than the original model.</p>

<p>If a model doesn’t have any collider geometry, and you want to make it affect the physics or the pointer events systems, you can either:</p>

<li>Assign collision layers directly to the visible geometry, via the</li>

<code>visibleMeshesCollisionMask</code>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: If the visible geometry of the object has many vertices, note that this may have more of a performance cost.</blockquote>

<li>Give the entity a</li>

<code>MeshCollider</code>

<li>component, to give it a primitive shape collider.</li>

<li>Overlay an invisible entity that has a</li>

<code>MeshCollider</code>

<li>component.</li>

<li>Edit the model in an external tool like Blender to include a</li>

<em>collider mesh</em>

<li>. The collider must be named</li>

<em>x_collider</em>

<li>, where</li>

<em>x</em>

<li>is the name of the model. So for a model named</li>

<em>house</em>

<li>, the collider must be named</li>

<em>house_collider</em>

<li>.</li>

<p>You might also want to assign the pointer events collision layer to the</p>

<code>visibleMeshesCollisionMask</code>

<p>in case you want the hover hints and pointer events to respond more accurately to the contour of the entity. Note that this is more demanding on performance.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you don’t have the same layer (physics, pointer events or custom layers) assigned to both</blockquote>

<code>visibleMeshesCollisionMask</code>

<blockquote>and</blockquote>

<code>invisibleMeshesCollisionMask</code>

<blockquote>, as that would be a very inefficient use of resources. You can have different layers on each, such as physics on the invisible layer and pointer events on the visible layer.</blockquote>

<p>See</p>

<p>for more details on how to add collider invisible geometry to a 3D model.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>GltfContainer</code>

<p>component and</p>

<code>ColliderLayer</code>

<p>must be imported via</p>

<code>import { GltfContainer, ColliderLayer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h3>Animated models</h3>

<p>When setting colliders to use the visible geometry on a model that includes</p>

<p>, the animations aren’t followed by colliders. The collider meshes keep their original shape. If an animation involves deforming a meshe’s geometry, the collider meshes retain the un-animated shape while the animation plays.</p>

<p>When playing animations that involve moving full meshes without changing their shape, these changes are accurately reflected by colliders. For example if a platform moves as part of an animation, the platform´s collider does move with the animation.</p>

<h2>Collision layers</h2>

<p>The scene can handle separate collision layers, that have different behaviors.</p>

<p>You can configure a</p>

<code>MeshCollider</code>

<p>component or the</p>

<code>GltfContainer</code>

<p>component to only respond to one kind of interaction, or to several of them, or none. To do this, on the</p>

<code>MeshCollider</code>

<p>set the</p>

<code>collisionMask</code>

<p>property, and on</p>

<code>GltfContainer</code>

<p>set the</p>

<code>visibleMeshesCollisionMask</code>

<p>or</p>

<code>invisibleMeshesCollisionMask</code>

<p>properties to one or several of the following values:</p>

<code>ColliderLayer.CL_PHYSICS</code>

<li>: Only blocks player movement (and doesn’t affect pointer events)</li>

<code>ColliderLayer.CL_POINTER</code>

<li>: Responds only to pointer events (and doesn’t block the player movement)</li>

<code>ColliderLayer.CL_CUSTOM1</code>

<li>through to</li>

<code>CL_CUSTOM8</code>

<li>: Can be used together with raycasts, so that a ray only detects collisions with one specific layer.</li>

<code>ColliderLayer.CL_NONE</code>

<li>: Doesn’t respond to collisions of any kind.</li>

<p>A single collision mask can respond to multiple collision layers. Use the</p>

<code>|</code>

<p>character as an</p>

<em>or</em>

<p>, to include as many layers as you need. The default value on a MeshCollider is</p>

<code>ColliderLayer.CL_PHYSICS | ColliderLayer.CL_POINTER</code>

<p>.</p>

<p>You can use the 8 different custom layers for whatever suits your scene best, for example one could be used for NPC line-of-sight calculations, whilst another for estimating trajectories of falling objects. Using different layers for different systems allows you to use less resources, as in each case you’ll only be checking collisions with the relevant entities.</p>

<p>See</p>

<p>for more on how to use custom collision layers.</p>

<h3>Pointer blocking</h3>

<p>Only shapes that have colliders can be activated with</p>

<p>. An entity also needs to have a collider to block pointer events from going through it and prevent hitting entities behind it. So for example, a player can’t pick something up that is locked inside a chest, if the chest has colliders around it. The player’s pointer events are only affected by meshes that are active in the</p>

<code>ColliderLayer.CL_POINTER</code>

<p>layer.</p>

<p>By default, a MeshCollider affects both the Physics and the Pointer layers, but you can change this value to only affect one, or neither, and to affect custom layers instead.</p>

<strong>📔 Note</strong>

<blockquote>: Besides colliders, an entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component to respond to pointer events. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<p>By default, the visible geometry of a</p>

<code>GLTFContainer</code>

<p>isn’t mapped to any collision layers, but the invisible geometry affects both the Physics and the Pointer layers. You can change this value to only affect one, or neither, and to affect custom layers instead. You can also configure the visible geometry layer in the same way.</p>

<h2>Advanced MeshCollider Syntax</h2>

<p>The complete syntax for creating a</p>

<code>MeshCollider</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets MeshCollider components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>box</code>

<code>plane</code>

<code>sphere</code>

<code>cylinder</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/colliders/#colliders-on-3d-models

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/shape-components/#primitive-shapes

<title>Shape components | Decentraland Documentation</title>

<strong>Shape components</strong>

<h1>Shape components</h1>

<p>Three dimensional scenes in Decentraland are based on the</p>

<p>model, where everything in a scene is an</p>

<em>entity</em>

<p>, and each entity can include</p>

<em>components</em>

<p>that shape its characteristics and functionality.</p>

<p>The rendered shape of an entity is determined by what component it uses.</p>

<h2>Primitive shapes</h2>

<p>Several basic shapes, often called</p>

<em>primitives</em>

<p>, can be added to an entity by giving the entity a</p>

<code>MeshRenderer</code>

<p>component.</p>

<p>The following shapes are available. Several shapes include optional additional fields, specific to that shape.</p>

<strong>box</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setBox()</code>

<p>, passing the entity. Pass</p>

<code>uvs</code>

<p>as an additional optional field, to map texture alignment. See</p>

<p>for more details.</p>

<strong>plane</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setPlane()</code>

<p>, passing the entity. Pass</p>

<code>uvs</code>

<p>as an additional optional field, to map texture alignment. See</p>

<p>for more details.</p>

<strong>sphere</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setSphere()</code>

<p>, passing the entity.</p>

<strong>cylinder</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setCylinder()</code>

<p>, passing the entity. Pass</p>

<code>radiusTop</code>

<p>and</p>

<code>radiusBottom</code>

<p>as additional optional fields, to modify the cylinder.</p>

<p>TIP: Set either</p>

<code>radiusTop</code>

<p>or</p>

<code>radiusBottom</code>

<p>to 0 to make a cone.</p>

<p>The following example creates a cube:</p>

<p>The following example creates a cylinder with a</p>

<code>radiusTop</code>

<p>of 0, which produces a cone:</p>

<p>Primitive shapes don’t include materials. To give it a color or a texture, you must assign a</p>

<p>to the same entity.</p>

<p>To make a primitive clickable, or to prevent players from walking through it, you must give the entity a</p>

<em>collider</em>

<p>via a</p>

<p>component.</p>

<p>To change the shape of an entity that already has a</p>

<code>MeshRenderer</code>

<p>component, run</p>

<code>MeshRenderer.setBox()</code>

<p>or any of the other helper functions and it will overwrite the original shape. There’s no need to remove the original</p>

<code>MeshRenderer</code>

<p>or to use the advanced syntax.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>MeshRenderer</code>

<p>component must be imported via</p>

<code>import { MeshRenderer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>3D models</h2>

<p>For more complex shapes, you can build a 3D model in an external tool like Blender and then import them in</p>

<em>.glTF</em>

<p>or</p>

<em>.glb</em>

<p>(binary</p>

<em>.glTF</em>

<p>).</p>

<p>(GL Transmission Format) is an open project by Khronos providing a common, extensible format for 3D assets that is both efficient and highly interoperable with modern web technologies.</p>

<p>To add an external model into a scene, add a</p>

<code>GltfContainer</code>

<p>component to an entity and set its</p>

<code>src</code>

<p>to the path of the glTF file containing the model.</p>

<p>The</p>

<code>src</code>

<p>field is required, you must give it a value when constructing the component. In the example above, the model is located in a</p>

<code>models</code>

<p>folder at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<blockquote>: We recommend keeping your models separate in a</blockquote>

<code>/models</code>

<blockquote>folder inside your scene.</blockquote>

<p>glTF models can include their own embedded textures, materials, colliders and animations. See</p>

<p>for more information on this.</p>

<p>To prevent players from walking through a 3D model, or to make a model clickable, you must have a</p>

<p>, which may be embedded in the model or provided via a</p>

<code>MeshCollider</code>

<p>component.</p>

<p>Keep in mind that all models, their shaders and their textures must be within the parameters of the</p>

<p>.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>GltfContainer</code>

<p>component must be imported via</p>

<code>import { GltfContainer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h3>Free libraries for 3D models</h3>

<p>Instead of building your own 3D models, you can also download them from several free or paid libraries.</p>

<p>To get you started, below is a list of libraries that have free or relatively inexpensive content:</p>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<strong>📔 Note</strong>

<blockquote>: Pay attention to the license restrictions that the content you download has.</blockquote>

<p>Note that in several of these sites, you can choose what format to download the model in. Always choose</p>

<em>.glTF</em>

<p>format if available. If not available, you must convert them to</p>

<em>glTF</em>

<p>before you can use them in a scene. For that, we recommend importing them into Blender and exporting as</p>

<em>.glTF</em>

<p>from there.</p>

<h3>Optimize 3D models</h3>

<p>To ensure that 3D models in your scene load faster and take up less memory, follow these best practices:</p>

<li>Save your models in</li>

<em>.glb</em>

<li>format, which is a lighter version of</li>

<em>.gltf</em>

<li>.</li>

<li>If you have multiple models that share the same textures, export your models with textures in a separate file. That way multiple models can refer to a single texture file that only needs to be loaded once.</li>

<li>If your scene has entities that appear and disappear, it might be a good idea to pool these entities and keep them underground, or at a scale of 0. This will help them appear faster, the trade-off is that they will occupy memory when not in use. See</li>

<h2>Stretching a shape</h2>

<p>Primitive shapes and 3D models have default dimensions that you can alter by changing the scale in the entity’s</p>

<code>Transform</code>

<p>component.</p>

<h2>Make invisible</h2>

<p>You can make an entity invisible by giving an entity a</p>

<code>VisibilityComponent</code>

<p>, with its</p>

<code>visible</code>

<p>property set to</p>

<em>false</em>

<p>.</p>

<p>The</p>

<code>VisibilityComponent</code>

<p>works the same for entities with primitive shapes and with</p>

<code>GLTFContainer</code>

<p>components.</p>

<p>If an entity is invisible, its collider can block a player’s path and/or prevent clicking entities that are behind it, depending on the collision layers assigned to the collider.</p>

<h2>Loading state</h2>

<p>If a 3D model is fairly large, it might take some noticeable time to be rendered, this time may vary depending on the player’s hardware and many other factors. Sometimes you need to make sure that a model finished loading before you perform another action. For example, if you want to teleport the player to a platform up in the sky, you need to first make sure the platform is fully rendered before moving the player there, or else the player might fall right through the platform.</p>

<p>To check if a 3D model is finished being rendered, check the entity’s</p>

<code>GltfContainerLoadingState</code>

<p>component. This component is meant to be read only, and exists on any entity that also has a</p>

<code>GltfContainer</code>

<p>component.</p>

<p>This component has a single property named</p>

<code>currentState</code>

<p>, holding a value from the</p>

<code>LoadingState</code>

<p>enum.</p>

<p>The following example uses a system to periodically check the loading state of an entity’s 3D model. If the state is</p>

<code>LoadingState.FINISHED</code>

<p>, you might want to perform custom logic there and end the execution of the system.</p>

<h2>Advanced syntax</h2>

<p>The complete syntax for creating a</p>

<code>MeshRenderer</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets MeshRenderer components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters. In the example above, the</p>

<code>box</code>

<p>type supports a</p>

<code>uvs</code>

<p>field.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>box</code>

<code>plane</code>

<code>sphere</code>

<code>cylinder</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

<p>To add a</p>

<code>MeshRenderer</code>

<p>component to an entity that potentially already has an instance of this component, use</p>

<code>MeshRenderer.createOrReplace()</code>

<p>. The helper functions like</p>

<code>MeshRenderer.setBox()</code>

<p>handle overwriting existing instances of the component, but running</p>

<code>MeshRenderer.create()</code>

<p>on an entity that already has this component returns an error.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/colliders/#colliders-on-3d-models

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/animations/

<title>Animations | Decentraland Documentation</title>

<strong>Animations</strong>

<h1>Animations</h1>

<p>Animation is the art of bringing life into things. And there’s no better way to make you scene more lively then adding some animations to your 3D models.</p>

<p>There are a couple ways to do it though: through</p>

<strong>object animation</strong>

<p>or through a</p>

<strong>rig (skeletal animation)</strong>

<p>.</p>

<strong>Object animation</strong>

<p>is best for simple models, such as a bouncing ball, a spinning globe or a floating chair and it doesn’t need an armature. It’s important to mention that object animation is different from</p>

<strong>vertex animation</strong>

<p>. In object animation, the model will be animated as a whole, while in vertex animation, as the name says, each vertex of the object can be animated separately (which is super helpful for creating shape keys, for example). While object animation is perfectly fine to use,</p>

<strong>vertex animation is currently not supported by Decentraland’s engine</strong>

<p>.</p>

<p>If you have a more complex model, such as a person, creature or machinery, then you’ll need a</p>

<strong>rig</strong>

<p>. A rig is nothing more than a digital skeleton that will move and deform the mesh. The process of binding the mesh to the skeleton is called Skinning, where you define which bone will affect each vertex group and how strong that influence is going be, making sure the model deforms in the best way possible.</p>

<p>For either method, though, all animations of a 3D model must be embedded inside its</p>

<em>glTF</em>

<p>file since you can’t reference animations in separate files.</p>

<strong>Creating An Animation</strong>

<p>This is how you create animations using Blender.</p>

<strong>Object Animation</strong>

<li>Make sure you have the</li>

<em>Dope Sheet</em>

<li>></li>

<em>Action Editor</em>

<li>tab open and click on</li>

<em>New</em>

<li>to add an animation clip.</li>

<li>Rename it as you see fit and make sure to  toggle</li>

<em>Fake User</em>

<li>(the shield icon) so your animation is saved.</li>

<li>Set a keyframe in the first frame by selecting the object and pressing</li>

<em>I</em>

<li>. Then move the object around, rotate or scale it and, in another frame in the timeline, press</li>

<em>I</em>

<li>again to set another keyframe with the current transforms.</li>

<li>The final frame of the animation should be the same as the first one, so just copy the first frame and paste it on the last.</li>

<em>Creating an animation clip and adding keyframes.</em>

<strong>Rig Animation</strong>

<p>For a rig animation, you’ll need an armature. If you want to do it yourself, see</p>

<p>for instructions on how to set up a consistent armature.</p>

<p>When the rigging is done and skinning has nice deformations, you’re ready to start your animation! The process is very similar to Object Animation, but instead of doing it in</p>

<em>Object Mode</em>

<p>, you will animate it in</p>

<em>Pose Mode</em>

<p>.</p>

<li>Go to</li>

<em>Pose Mode</em>

<li>and make sure you have the</li>

<em>Dope Sheet</em>

<li>></li>

<em>Action Editor</em>

<li>tab open and click on</li>

<em>New</em>

<li>to add an animation clip.</li>

<li>Rename it as you see fit and make sure to  toggle</li>

<em>Fake User</em>

<li>(the shield icon) so your animation is saved.</li>

<li>With the mouse on the</li>

<em>Viewport</em>

<li>, Press</li>

<em>A</em>

<li>to select everything and then</li>

<em>I</em>

<li>to set a keyframe to the whole armature.</li>

<li>Move to a different frame in the timeline and manipulate the bone however you like to get the pose you want. You can change a bone’s location, rotation and scale depending on how you set your rig up.</li>

<li>When you have a nice result, set another keyframe to the whole armature. Keep doing that until you finish your animation. Remember to have the first and last frames the same if the animation is going to loop.</li>

<p>If you’re new to the animation process, check out this tutorial with some nice tips for beginners:</p>

<h3>Skinned Animations vs Transform Animations</h3>

<strong>Transform animations are typically better than skinned mesh animations for performance because they involve less overhead in terms of computational resources required to display the animation.</strong>

<p>Skinned mesh animation involves using a mesh with a skeleton of bones that are weighted to the vertices of the mesh. The skeleton is animated, which in turn animates the mesh. This process can be quite computationally intensive, especially when there are a large number of vertices to animate.</p>

<p>Transform animations, on the other hand, involve animating the transform properties of an object (such as its position, rotation, and scale) directly. This can be done with fewer computational resources than skinned mesh animation, since there are typically fewer transform properties to animate than vertices in a mesh.</p>

<p>Additionally, transform animations can often be pre-calculated and stored in a more compact format, such as keyframe data, which can be quickly accessed and played back without the need for intensive calculations in real-time.</p>

<p>Overall, while skinned mesh animation can produce more detailed and realistic animations, transform animations are often preferred for performance-critical applications such as video games.</p>

<h3>Creating and Exporting Multiple Animation Clips</h3>

<p>You can have as many animations clips as you want for you model. You can check on how to create, browse and delete animations in</p>

<p>.</p>

<p>In the video below, you will learn how to export multiple animations from Blender in a single GLB file.</p>

<h3>Exporting Many Animations as a Single One</h3>

<p>Unlike in a skeletal animation, where you can rig multiple objects and combine their animations in a single animation clip, in object animation you can’t do that. The animations will be exported separately and only one object will play at a time. A solution for that is merging many animations into a single one, so you have an animation clip that has all objects moving at the same time.</p>

<p>To do that, push down to the</p>

<em>Nonlinear Animation Track</em>

<p>the animation of every object, as shown below.</p>

<em>Push down every object’s animation to the NLA Track.</em>

<p>Once all the animations are listed on the NLA Editor, select all the objects, go to</p>

<strong>File > Export > glTF2.0</strong>

<p>. Expand Include and check Selected Objects. Expand Animation, expand Animation again and uncheck</p>

<strong>Group by NLA Track</strong>

<p>. You can rename the animation clip in Merged Animation Name and then just press</p>

<strong>Export glTF 2.0</strong>

<p>.</p>

<em>Settings to export multiple animations as a single one.</em>

<p>Keep in mind that this will only work if the objects have a single animation each. If the objects have multiple animation clips, it’s best to export them separately.</p>

<strong>Hint!</strong>

<blockquote>💡</blockquote>

<em>Instead of creating your own animations, you can also download generic animations and apply them to your model. For example, for 3D characters with human-like characteristics, you can download free or paid animations from</em>

<em>.</em>

<h3>Sampling</h3>

<p>Sometimes your animation file might end up being too heavy due to the amount of animations or the combination of animation+model.</p>

<p>Sampling is a good way to optimize the animation. The sampling rate will define how often a keyframe will be baked in the animation. For example, if the sampling rate is set to 2, that means a keyframe will be created at every two frames. A sampling rate of 3 will bake a keyframe every three frames and so on. The higher the sampling rate, the lighter the file.</p>

<p>The drawback, however, is that the animation will start getting less and less fluid since it loses some important keyframes (they are distributed through the animation in an uneven way). It’s also important to notice that</p>

<strong>sampling is NOT dividing the number of the animation’s frames by the sampling rate</strong>

<p>.</p>

<p>Usually, a</p>

<strong>sampling rate of 2 or 3</strong>

<p>will do the trick. Those numbers can optimize the animation without compromising the quality.</p>

<p>You can find the</p>

<em>Sampling Rate</em>

<p>in the export settings, under</p>

<em>Animation</em>

<p>.</p>

<h3>Hint!</h3>

<blockquote>💡</blockquote>

<em>If the number of frames of the animation can be divided by the sampling rate, that’s a good thing! It means that the final frame will be baked, preserving the transition from end to start of the animation.</em>

<h3>Implementing Animations</h3>

<p>This document covers how to add animations into a 3D model. See</p>

<p>for instructions on how to activate and handle animations in a scene.</p>

<h3>Best Practices for Animation</h3>

<li>Keep the armature as simple as possible, only create bones for the parts of the model that you intend to animate. Bones can affect performance, so make sure to only add what’s actually necessary.</li>

<li>If the animation is going to loop in your scene, make sure the final pose is identical to the starting one for better transition.</li>

<li>Never leave have a character without animation, even if they aren’t actually doing anything. Create an “idle” animation for when the character is still. The idle can include subtle movements like breathing and perhaps occasional glances.</li>

<li>Don’t leave bones unposed, like hands, fingers, head or neck. Details are really important in a good animation and stiff movement will only make it less believable.</li>

<li>Avoid too many keyframes, unless it’s extremely necessary. The more keyframes you add, the higher the chances of getting bad interpolation and a heavier animation.</li>

<li>Select all your bones (including the deforming ones) and set a keyframe on the first and last frames of your animation. This will avoid having bones with no information, causing one animation to affect the other unintentionally.</li>

<li>Make sure your file only has one armature when you export it. When importing animations, an armature will also be imported with it. All animations must to be performed by the same base armature, so delete anything that you don’t need.</li>

<li>Always rename your bones and animations. Keep everything organized!</li>

<li>When exporting the</li>

<em>glTF</em>

<li>model, confirm that you’re exporting all the objects and animations. Some exporters will only export the</li>

<em>currently selected</em>

<li>by default.</li>

<li>After exporting the model, inspect it in</li>

<li>and check if all animations are working and are named as expected.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/animations/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/3d-model-animations/

<title>Handle animations | Decentraland Documentation</title>

<strong>Handle animations</strong>

<h1>Handle animations</h1>

<p>3D models in</p>

<em>.glTF</em>

<p>and</p>

<em>.glb</em>

<p>format can include as many animations as you want in them. Animations tell the mesh how to move, by specifying a series of</p>

<em>keyframes</em>

<p>that are laid out over time, the mesh then blends from one pose to the other to simulate continuous movement.</p>

<p>Most 3D model animations are</p>

<em>skeletal animations</em>

<p>. These animations simplify the complex geometry of the model into a “stick figure”, linking every vertex in the mesh to the closest</p>

<em>bone</em>

<p>in the</p>

<em>skeleton</em>

<p>. Modelers adjust the skeleton into different poses, and the mesh stretches and bends to follow these movements.</p>

<p>As an alternative,</p>

<em>vertex animations</em>

<p>animate a model without the need of a skeleton. These animations specify the position of each vertex in the model directly. Decentraland supports these animations as well.</p>

<p>See</p>

<p>for details on how to create animations for a 3D model. Read</p>

<p>for instructions on how to import a 3D model to a scene.</p>

<strong>💡 Tip</strong>

<blockquote>: Animations are usually better for moving something in place, not for changing the position of an entity. For example, you can set an animation to move a character’s feet in place, but to change the location of the entity it’s best to use the Transform component. See</blockquote>

<blockquote>for more details.</blockquote>

<h2>Check a 3D model for animations</h2>

<p>Not all</p>

<em>glTF</em>

<p>files include animations. To see if there are any available, you can do the following:</p>

<li>If using</li>

<li>(recommended), install the</li>

<em>GLTF Tools</em>

<li>extension and view the contents of a glTF file there.</li>

<li>Open the</li>

<li>site and drag the glTF file (and any</li>

<em>.jpg</em>

<li>or</li>

<em>.bin</em>

<li>dependencies) to the browser.</li>

<li>Open the</li>

<em>.glTF</em>

<li>file with a text editor and scroll down till you find</li>

<em>“animations”:</em>

<li>.</li>

<strong>💡 Tip</strong>

<blockquote>: In</blockquote>

<em>skeletal</em>

<blockquote>animations, an animation name is often comprised of its armature name, an underscore and its animation name. For example</blockquote>

<code>myArmature_animation1</code>

<blockquote>.</blockquote>

<h2>Automatic playing</h2>

<p>If a 3d model includes any animations, the default behavior is that the first of these is always played on a loop.</p>

<p>To avoid this behavior, add an</p>

<code>Animator</code>

<p>component to the entity that has the model, and then handle the playing of animations explicitly. If an</p>

<code>Animator</code>

<p>component is present in the entity, all animations default to a</p>

<code>stopped</code>

<p>state, and need to be manually played.</p>

<h2>Handle animations explicitly</h2>

<p>An</p>

<code>Animator</code>

<p>component is used to access all the animations of the entity and can be used to explicitly tell the entity to play or stop an animation. Each animation is handled by an</p>

<code>AnimationState</code>

<p>object.</p>

<p>You can also achieve the same with less statements:</p>

<p>You can retrieve an</p>

<code>AnimationState</code>

<p>object from an</p>

<code>Animator</code>

<p>component with the</p>

<code>getClip()</code>

<p>function.</p>

<p>The</p>

<code>AnimationState</code>

<p>object doesn’t store the actual transformations that go into the animation, that’s all in the .glTF file. Instead, the</p>

<code>AnimationState</code>

<p>object has a state that keeps track how far it has advanced along the animation.</p>

<h2>Fetch an animation</h2>

<p>If you don’t have a pointer to refer to the clip object directly, you can fetch a clip from the</p>

<code>Animator</code>

<p>by name using</p>

<code>getClip()</code>

<p>.</p>

<h2>Play an animation</h2>

<p>When an</p>

<code>AnimationState</code>

<p>is created, it starts as paused by default.</p>

<p>The simplest way to play or pause it is to use the</p>

<code>play()</code>

<p>and</p>

<code>pause()</code>

<p>methods of the</p>

<code>AnimationState</code>

<p>.</p>

<p>The</p>

<code>play()</code>

<p>function on an</p>

<code>AnimationState</code>

<p>object has one optional parameter:</p>

<code>reset</code>

<li>: If true, it always plays the animation from the start. Default:</li>

<em>false</em>

<li>.</li>

<p>The following table summarizes how</p>

<code>play()</code>

<p>behaves, using different values for the</p>

<code>reset</code>

<p>property:</p>

<code>reset</code>

<th>=</th>

<em>false</em>

<th>(default)</th>

<code>reset</code>

<th>=</th>

<em>true</em>

<strong>Currently playing</strong>

<td>Has no effect.</td>

<td>Plays from the start.</td>

<strong>Paused</strong>

<td>Resumes from last frame played.</td>

<td>Plays from the start.</td>

<strong>Finished (Non-looping)</strong>

<td>Plays from the start.</td>

<td>Plays from the start.</td>

<p>You can also play an animation from the</p>

<code>Animator</code>

<p>component of an entity.</p>

<p>When calling the</p>

<code>play()</code>

<p>function on the Animator component, there are two parameters to set:</p>

<code>clip</code>

<li>: An AnimationState object to play</li>

<code>reset</code>

<li>:</li>

<em>(optional)</em>

<li>If true, it always plays the animation plays from the start. Default:</li>

<em>false</em>

<li>.</li>

<h2>Looping animations</h2>

<p>By default, animations are played in a loop that keeps repeating the animation forever.</p>

<p>Change this setting by setting the</p>

<code>looping</code>

<p>property in the</p>

<code>AnimationState</code>

<p>object.</p>

<p>If</p>

<code>looping</code>

<p>is set to</p>

<em>false</em>

<p>, the animation plays just once and then stops.</p>

<h2>Reset an animation</h2>

<p>When an animation finishes playing or is paused, the 3D model remains in the last posture it had.</p>

<p>To stop an animation and set the posture back to the first frame in the animation, use the</p>

<code>stop()</code>

<p>function of the</p>

<code>AnimationState</code>

<p>object.</p>

<p>To play an animation from the start, regardless of what frame the animation is currently in, set the</p>

<code>reset</code>

<p>property on the</p>

<code>play()</code>

<p>function to</p>

<em>true</em>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Resetting the posture is an abrupt change. If you want to make the model transition smoothly tinto another posture, you can either:</blockquote>

<code>- apply an animation with a `weight` property of 0 and gradually increase the `weight`

- create an animation clip that describes a movement from the posture you want to transition from to the default posture you want.</code>

<h2>Handle multiple animations</h2>

<p>If a 3D model has multiple animations packed into it, a single</p>

<code>Animator</code>

<p>component can deal with all of them.</p>

<p>Animations exist in</p>

<em>layers</em>

<p>in an</p>

<code>Animator</code>

<p>component. If two animations are in the same layer, only one of them can play at a time. Starting one will stop the other. If two animations exist on separate layers, they can play at the same time, given that their</p>

<em>weight</em>

<p>values add up, or if they each control different bones or vertexes from the model.</p>

<p>In the example above, two animations are handled by separate</p>

<code>AnimationState</code>

<p>objects, and they are then both assigned to the same</p>

<code>Animator</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: If the layer of an animation isn’t specified, it’s assigned to layer 0.</blockquote>

<p>Each bone in an animation can only be affected by one animation at a time, unless these animations have a</p>

<code>weight</code>

<p>that adds up to a value of 1 or less.</p>

<p>If one animation only affects a character’s legs, and another only affects a character’s head, then they can be played at the same time without any issue. But if they both affect the character’s legs, then you must either only play one at a time, or play them with lower</p>

<code>weight</code>

<p>values.</p>

<p>If in the above example, the</p>

<code>bite</code>

<p>animation only affects the shark’s mouth, and the</p>

<code>swim</code>

<p>animation only affects the bones of the shark’s spine, then they can both be played at the same time if they’re on separate layers.</p>

<h2>Animation speed</h2>

<p>Change the speed at which an animation is played by changing the</p>

<code>speed</code>

<p>property. The value of the speed is 1 by default.</p>

<p>Set the speed lower than 1 to play it slower, for example to 0.5 to play it at half the speed. Set it higher than 1 to play it faster, for example to 2 to play it at double the speed.</p>

<h2>Animation weight</h2>

<p>The</p>

<code>weight</code>

<p>property allows a single model to carry out multiple animations on different layers at once, calculating a weighted average of all the movements involved in the animation. The value of</p>

<code>weight</code>

<p>determines how much importance that animation will be given in the average.</p>

<p>By default,</p>

<code>weight</code>

<p>is equal to</p>

<em>1</em>

<p>, it can’t be any higher than</p>

<em>1</em>

<p>.</p>

<p>The</p>

<code>weight</code>

<p>value of all active animations in an entity should add up to 1 at all times. If it adds up to less than 1, the weighted average will be using the default position of the armature for the remaining part of the calculation.</p>

<p>For example, in the code example above, we’re playing the</p>

<em>swim</em>

<p>animation, that only has a</p>

<code>weight</code>

<p>of</p>

<em>0.2</em>

<p>. This swimming movement will be quite subtle: only 20% of the intensity that the animation defines. The remaining 80% of the calculation takes values from the default posture of the armature.</p>

<p>The</p>

<code>weight</code>

<p>property can be used in interesting ways, for example the</p>

<code>weight</code>

<p>property of</p>

<em>swim</em>

<p>could be set in proportion to how fast the shark is swimming, so you don’t need to create multiple animations for fast and slow swimming.</p>

<p>You could also change the</p>

<code>weight</code>

<p>value gradually when starting and stopping an animation to give it a more natural transition and to avoid jumps from the default pose to the first pose in the animation.</p>

<strong>📔 Note</strong>

<blockquote>: The added</blockquote>

<code>weight</code>

<blockquote>value of all animations that are acting on a 3D model’s bone can’t be more than 1. If more than one animation is affecting the same bones at the same time, they need to have their weight set to values that add to less than 1.</blockquote>

<h2>Set clip parameters in bulk</h2>

<p>Use the</p>

<code>setParams()</code>

<p>function of the</p>

<code>AnimationState</code>

<p>object to set multiple parameters at once.</p>

<p>You can configure the following parameters:</p>

<code>looping</code>

<li>: Boolean to determine if the animation is played in a continuous loop.</li>

<code>speed</code>

<li>: A number that determines how fast the animation is played.</li>

<code>layer</code>

<li>: The layer of the animation. To play multiple animations at once, they must be on separate layers in the</li>

<code>Animator</code>

<li>component. By default, animations are added to layer 0.</li>

<code>weight</code>

<li>: Used to blend animations using weighted average.</li>

<h2>Animations on shared shapes</h2>

<p>You can use a same instance of a</p>

<code>GLTFShape</code>

<p>component on multiple entities to save resources. If each entity has both its own</p>

<code>Animator</code>

<p>component and its own</p>

<code>AnimationState</code>

<p>objects, then they can each be animated independently.</p>

<strong>📔 Note</strong>

<blockquote>: If you define a single</blockquote>

<code>AnimationState</code>

<blockquote>object instance and add it to multiple</blockquote>

<code>Animator</code>

<blockquote>components from different entities, all entities using the</blockquote>

<code>AnimationState</code>

<blockquote>instance will be animated together at the same time.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/colliders/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/colliders/#collision-layers

<title>Colliders | Decentraland Documentation</title>

<strong>Colliders</strong>

<h1>Colliders</h1>

<p>Entities that have colliders occupy space and block a player’s path, entities without colliders can be walked through by a player`s avatar.</p>

<p>Colliders are also needed to make an entity clickable. Button events are based on the collider shape of an entity, not on its visible shape.</p>

<p>There are separate collision layers for interacting with either the player’s physics, or with pointer events, colliders can be configured to only interact with one or the other. They can also be configured to interact with custom layers, that can be used with</p>

<p>to handle whatever makes sense to the scene.</p>

<strong>📔 Note</strong>

<blockquote>: Colliders don’t affect how other entities interact with each other, entities can always overlap. Collision settings only affect how the entity interacts with the player’s avatar and button events. Decentraland doesn’t have a native physics engine, so if you want entities to fall, crash or bounce, you must code this behavior into the scene, or import a library to handle that.</blockquote>

<h2>Colliders on primitive shapes</h2>

<p>Entities that have a</p>

<code>MeshRenderer</code>

<p>component to give them a</p>

<p>(boxes, spheres, planes etc) don’t have colliders by default. You must also give the entity a</p>

<code>MeshCollider</code>

<p>component.</p>

<p>The following collider shapes are available. Several shapes include optional additional fields, specific to that shape.</p>

<strong>box</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setBox()</code>

<p>, passing the entity.</p>

<strong>plane</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setPlane()</code>

<p>, passing the entity.</p>

<strong>sphere</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setSphere()</code>

<p>, passing the entity.</p>

<strong>cylinder</strong>

<p>:</p>

<p>Use</p>

<code>MeshRenderer.setCylinder()</code>

<p>, passing the entity. Pass</p>

<code>radiusTop</code>

<p>and</p>

<code>radiusBottom</code>

<p>as additional optional fields, to modify the cylinder.</p>

<p>TIP: Set either</p>

<code>radiusTop</code>

<p>or</p>

<code>radiusBottom</code>

<p>to 0 to make a cone.</p>

<p>This example defines a box entity that can’t be walked through.</p>

<p>The shape used by the</p>

<code>MeshCollider</code>

<p>doesn’t need to necessarily match the one used by the</p>

<code>MeshRenderer</code>

<p>. You can also add a</p>

<code>MeshCollider</code>

<p>to an entity that has a 3D model from a</p>

<code>GLTFContainer</code>

<p>component, or to an entity that has no visible shape at all.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>MeshCollider</code>

<p>component and</p>

<code>ColliderLayer</code>

<p>must be imported via</p>

<code>import { MeshCollider, ColliderLayer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Colliders on 3D models</h2>

<p>3D models can be assigned colliders on two different geometry levels:</p>

<code>visibleMeshesCollisionMask</code>

<li>: Refers to the visible geometry of the model. By default this geometry has no colliders.</li>

<code>invisibleMeshesCollisionMask</code>

<li>: refers to the collider meshes, whose name end in</li>

<code>_collider</code>

<li>. By default, this geometry is treated as a collider for both physics and pointer events.</li>

<p>Any mesh embedded as part of a 3D model who’s name ends in</p>

<code>_collider</code>

<p>is treated as part of the</p>

<code>invisibleMeshesCollisionMask</code>

<p>layer, and interpreted as a collider by default.</p>

<p>Defining collider geometry as a separate invisible layer allows for much greater control and is a lot less demanding on the system than using the visible geometry, as the collision object is usually a lot simpler (with less vertices) than the original model.</p>

<p>If a model doesn’t have any collider geometry, and you want to make it affect the physics or the pointer events systems, you can either:</p>

<li>Assign collision layers directly to the visible geometry, via the</li>

<code>visibleMeshesCollisionMask</code>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: If the visible geometry of the object has many vertices, note that this may have more of a performance cost.</blockquote>

<li>Give the entity a</li>

<code>MeshCollider</code>

<li>component, to give it a primitive shape collider.</li>

<li>Overlay an invisible entity that has a</li>

<code>MeshCollider</code>

<li>component.</li>

<li>Edit the model in an external tool like Blender to include a</li>

<em>collider mesh</em>

<li>. The collider must be named</li>

<em>x_collider</em>

<li>, where</li>

<em>x</em>

<li>is the name of the model. So for a model named</li>

<em>house</em>

<li>, the collider must be named</li>

<em>house_collider</em>

<li>.</li>

<p>You might also want to assign the pointer events collision layer to the</p>

<code>visibleMeshesCollisionMask</code>

<p>in case you want the hover hints and pointer events to respond more accurately to the contour of the entity. Note that this is more demanding on performance.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you don’t have the same layer (physics, pointer events or custom layers) assigned to both</blockquote>

<code>visibleMeshesCollisionMask</code>

<blockquote>and</blockquote>

<code>invisibleMeshesCollisionMask</code>

<blockquote>, as that would be a very inefficient use of resources. You can have different layers on each, such as physics on the invisible layer and pointer events on the visible layer.</blockquote>

<p>See</p>

<p>for more details on how to add collider invisible geometry to a 3D model.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>GltfContainer</code>

<p>component and</p>

<code>ColliderLayer</code>

<p>must be imported via</p>

<code>import { GltfContainer, ColliderLayer } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h3>Animated models</h3>

<p>When setting colliders to use the visible geometry on a model that includes</p>

<p>, the animations aren’t followed by colliders. The collider meshes keep their original shape. If an animation involves deforming a meshe’s geometry, the collider meshes retain the un-animated shape while the animation plays.</p>

<p>When playing animations that involve moving full meshes without changing their shape, these changes are accurately reflected by colliders. For example if a platform moves as part of an animation, the platform´s collider does move with the animation.</p>

<h2>Collision layers</h2>

<p>The scene can handle separate collision layers, that have different behaviors.</p>

<p>You can configure a</p>

<code>MeshCollider</code>

<p>component or the</p>

<code>GltfContainer</code>

<p>component to only respond to one kind of interaction, or to several of them, or none. To do this, on the</p>

<code>MeshCollider</code>

<p>set the</p>

<code>collisionMask</code>

<p>property, and on</p>

<code>GltfContainer</code>

<p>set the</p>

<code>visibleMeshesCollisionMask</code>

<p>or</p>

<code>invisibleMeshesCollisionMask</code>

<p>properties to one or several of the following values:</p>

<code>ColliderLayer.CL_PHYSICS</code>

<li>: Only blocks player movement (and doesn’t affect pointer events)</li>

<code>ColliderLayer.CL_POINTER</code>

<li>: Responds only to pointer events (and doesn’t block the player movement)</li>

<code>ColliderLayer.CL_CUSTOM1</code>

<li>through to</li>

<code>CL_CUSTOM8</code>

<li>: Can be used together with raycasts, so that a ray only detects collisions with one specific layer.</li>

<code>ColliderLayer.CL_NONE</code>

<li>: Doesn’t respond to collisions of any kind.</li>

<p>A single collision mask can respond to multiple collision layers. Use the</p>

<code>|</code>

<p>character as an</p>

<em>or</em>

<p>, to include as many layers as you need. The default value on a MeshCollider is</p>

<code>ColliderLayer.CL_PHYSICS | ColliderLayer.CL_POINTER</code>

<p>.</p>

<p>You can use the 8 different custom layers for whatever suits your scene best, for example one could be used for NPC line-of-sight calculations, whilst another for estimating trajectories of falling objects. Using different layers for different systems allows you to use less resources, as in each case you’ll only be checking collisions with the relevant entities.</p>

<p>See</p>

<p>for more on how to use custom collision layers.</p>

<h3>Pointer blocking</h3>

<p>Only shapes that have colliders can be activated with</p>

<p>. An entity also needs to have a collider to block pointer events from going through it and prevent hitting entities behind it. So for example, a player can’t pick something up that is locked inside a chest, if the chest has colliders around it. The player’s pointer events are only affected by meshes that are active in the</p>

<code>ColliderLayer.CL_POINTER</code>

<p>layer.</p>

<p>By default, a MeshCollider affects both the Physics and the Pointer layers, but you can change this value to only affect one, or neither, and to affect custom layers instead.</p>

<strong>📔 Note</strong>

<blockquote>: Besides colliders, an entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component to respond to pointer events. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<p>By default, the visible geometry of a</p>

<code>GLTFContainer</code>

<p>isn’t mapped to any collision layers, but the invisible geometry affects both the Physics and the Pointer layers. You can change this value to only affect one, or neither, and to affect custom layers instead. You can also configure the visible geometry layer in the same way.</p>

<h2>Advanced MeshCollider Syntax</h2>

<p>The complete syntax for creating a</p>

<code>MeshCollider</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets MeshCollider components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>box</code>

<code>plane</code>

<code>sphere</code>

<code>cylinder</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/sdk-101/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/coding-scenes/

<title>Coding essentials | Decentraland Documentation</title>

<strong>Coding essentials</strong>

<h1>Coding essentials</h1>

<h2>The development tools</h2>

<p>At a very high level, the Decentraland</p>

<strong>Software Development Kit</strong>

<p>(SDK) allows you to do the following:</p>

<li>Generate a default</li>

<em>project</em>

<li>containing a Decentraland scene, including all the assets needed to render and run your content.</li>

<li>Build, test, and preview the content of your scene locally in your web browser - completely offline, and without having to make any Ethereum transactions or own LAND.</li>

<li>Write TypeScript code using the Decentraland API to add interactive and dynamic behavior to the scene.</li>

<li>Upload the content of your scene to the content server.</li>

<li>Link your LAND tokens to the URL of the content you have uploaded.</li>

<p>Our SDK includes the following components:</p>

<strong>The Decentraland Editor</strong>

<li>: An extension for Visual Studio Code that allows you to create scenes, preview and debug, and publish.</li>

<strong>The Decentraland ECS</strong>

<li>: A TypeScript package containing the framework of helper methods that allows you to create interactive experiences. Use it to create and manipulate objects in the scene and also to facilitate in-world transactions between players or other applications. (</li>

<li>)</li>

<strong>Scene examples</strong>

<li>: Take inspiration and coding best practices from the</li>

<li>.</li>

<h2>Requirements</h2>

<p>To develop a scene locally, you don’t need to own LAND tokens. Developing and testing a scene can be done completely offline, without the need to deploy a scene to the Ethereum network (the system Decentraland uses to establish ownership of LAND, of a Decentraland Name), or the content server.</p>

<p>You must have the following:</p>

<strong>Visual Studio Code</strong>

<p>: Dowload it</p>

<p>. Beyond hosting the Decentraland Editor extension, it helps you create scenes a lot faster and with less errors. A source code editor marks syntax errors, autocompletes while you write and even shows you smart suggestions that depend on the context that you’re in. You can also click on an object in the code to see the full definition of its class and what attributes it supports.</p>

<strong>The Decentraland Editor SDK7</strong>

<p>: An extension for Visual Studio code that exposes many common functionalities as buttons in the UI.</p>

<p>.</p>

<h2>Supported languages and syntax</h2>

<p>Decentraland employs</p>

<p>as the default language for writing scenes.</p>

<p>TypeScript is a superset of JavaScript, so if you’re familiar with JavaScript you’ll find it’s almost the same, but TypeScript includes type declarations. Thanks to type declarations, it’s possible to have features like autocomplete better debugging hints, these speed up development times and allow for the creation of a more solid codebase. These features are all key components to a positive developer experience.</p>

<p>When a scene is built, the Typescript code you wrote is compiled into minified Javascript, to make it lighter. The original source code in Typescript is never uploaded to the servers, only the compiled Javascript version.</p>

<h3>Other languages</h3>

<p>You can use another tool or language instead of TypeScript and compile it into JavaScript, as long as your compiled scripts are contained within a single JavaScript file named</p>

<em>game.js</em>

<p>. All provided type declarations are made in TypeScript, and other languages and transpilers are not officially supported.</p>

<h2>Scenes</h2>

<p>The content you deploy to your LAND is called a</p>

<strong>scene</strong>

<p>. A scene is an interactive program that renders 3D content, this could be a game, an interactive experience, an art gallery, whatever you want!</p>

<p>Scenes are deployed to virtual LAND in Decentraland. LAND is a scarce and non-fungible asset maintained in an Ethereum smart contract. Deploy to a single</p>

<strong>parcel</strong>

<p>, a 16 meter by 16 meter plot of LAND, or to multiple adjacent parcels.</p>

<p>When players visit Decentraland, they download and render the content of each scene as they walk through the map. They unload scenes as they walk away from them.</p>

<p>You can also run a scene locally on your machine by running a preview from the CLI. You can also</p>

<p>to run remotely on a 3rd party server to easily share your work with others.</p>

<h2>Entities and Components</h2>

<p>Three dimensional scenes in Decentraland are based on an</p>

<p>architecture, where everything in a scene is an</p>

<em>entity</em>

<p>. Entities have</p>

<em>components</em>

<p>, each component gives the entity it belongs to specific properties. A door entity is likely to have at least a Transform component (that sets position, rotation & scale) and another to provide it a shape. Components are just a place to store data, they don’t carry out any actions by themselves.</p>

<p>Entities may be nested inside other entities to form a tree structure. If you’re familiar with web development, you might find it useful to think of entities as elements in a DOM tree and of components as the attributes of each of these elements.</p>

<p>Entities are an abstract concept. An entity is just an id, that is used as a reference to group different components.</p>

<p>See</p>

<p>for an in-depth look of both these concepts and how they’re used by Decentraland scenes.</p>

<h3>Custom components</h3>

<p>The default set of components (like</p>

<code>Transform</code>

<p>,</p>

<code>GltfContainer</code>

<p>,</p>

<code>Material</code>

<p>, etc) are interpreted by the engine and have direct consequences on how the entity will look, its position, if it emits sounds, etc.</p>

<p>You can also define</p>

<em>custom components</em>

<p>to store data that might be useful to the mechanics in your scene. The engine won’t know how to interpret what the values on these components mean, they won’t have any direct consequences on how the scene is rendered. However, you can write logic in your scene’s code to monitor these values and respond to them. For example, you can define a custom “doorState” component to track the door’s open/closed state. In this case, the component is nothing more than a place to store a value that keeps track of this state. To see the door open and close in your scene, you have to then separately implement the logic that uses these values to affect the door’s rotation, a value from the</p>

<code>Transform</code>

<p>component that the engine does know how to interpret.</p>

<p>See</p>

<p>for more information.</p>

<h2>Systems</h2>

<p>Entities and components are places to store information about the objects in a scene.</p>

<em>Systems</em>

<p>hold functions that change the information that’s stored in components over time.</p>

<p>Systems are where we implement game logic, they carry out the actions that need to be updated or checked periodically on every tick of the game loop.</p>

<p>A system is a pure and simple function that gets called once on every tick (up to 30 times a second), following the</p>

<em>update pattern</em>

<p>.</p>

<p>A single scene can have 0 or many systems running at the same time. Systems can be turned on or off at different moments during the scene’s duration. It’s generally a good practice to keep independent behaviors in separate systems.</p>

<p>See</p>

<p>for more details about how systems are used in a scene.</p>

<h3>The game loop</h3>

<p>The</p>

<p>is the backbone of a Decentraland scene’s code. It cycles through part of the code at a regular interval and does the following:</p>

<li>Listen for player input</li>

<li>Update the scene</li>

<li>Re-render the scene</li>

<p>In most traditional software programs, all events are triggered directly by player actions. Nothing in the program’s state will change until the player clicks on a button, opens a menu, etc.</p>

<p>But interactive environments and games are different from that. Not all changes to the scene are necessarily caused by a player’s actions. Your scene could have animated objects that move on their own or even non-player characters that have their own AI. Some player actions might also take multiple ticks to be completed, for example if the opening of a door needs to take a whole second, the door’s rotation must be incrementally updated about 30 times as it moves.</p>

<p>We call each iteration over the loop a</p>

<em>tick</em>

<p>. Decentraland scenes are rendered at 30 ticks per second, whenever possible. If the machine is struggling to render each tick, it may result in less frequent updates.</p>

<p>In each tick, the scene is updated; then the scene is re-rendered, based on the updated values.</p>

<p>In Decentraland scenes, there is no explicitly declared game loop, but rather the</p>

<p>of the scene make up the game loop.</p>

<p>The compiling and rendering of the scene is carried out in the backend, you don’t need to handle that while developing your scene.</p>

<h2>Querying components</h2>

<p>You can</p>

<p>with the method</p>

<code>engine.getEntitiesWith(...components)</code>

<p>to keep track of all entities in the scene that have certain components.</p>

<p>It often makes sense to query components within a</p>

<p>, to then loop over each of the returned entities and perform a same set of actions on each.</p>

<p>If you attempt to iterate over all the entities in the scene on every tick of the game loop, that could have a significant cost in performance. By referring only to the entities returned by a query, you ensure you’re only dealing with those that are relevant.</p>

<h2>Scene lifecycle</h2>

<p>If you start writing code directly in</p>

<code>index.ts</code>

<p>, your code may be lacking some important context. For example, you might be trying to do something with the</p>

<code>PlayerEntity</code>

<p>, or you with an entity that was added via the Decentraland Editor’s UI, however at that point in time those things haven’t been loaded yet.</p>

<p>To avoid that scenario, it’s always recommended to write out your scene’s initial loading code using the</p>

<code>main()</code>

<p>function (on the</p>

<code>index.ts</code>

<p>file) as an entrypoint. This function runs only once all of the scene’s initial context is already loaded, this includes anything added via the Decentraland Editor’s UI.</p>

<p>You can write your code outside the</p>

<code>main()</code>

<p>function when:</p>

<li>The code is indirectly called by</li>

<code>main()</code>

<li>The code defines a system, or adds a system to the engine</li>

<li>The code is inside an</li>

<strong>📔 Note</strong>

<p>: By the time the code inside an async function or a system is first executed, everything in the scene is already properly initialized.</p>

<p>must always be written outside the</p>

<code>main()</code>

<p>function, in a separate file. They need to be interpreted before</p>

<code>main()</code>

<p>is executed.</p>

<h2>Mutability</h2>

<p>You can choose to deal with mutable or with immutable (read-only) versions of a component. The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can’t change any of the properties on it.</p>

<p>The</p>

<code>.getMutable()</code>

<p>function returns representation of the component that allows you to change its values. Use mutable versions only when you plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>See</p>

<p>for more details.</p>

<h2>Putting it all together</h2>

<p>The</p>

<em>engine</em>

<p>is what sits in between</p>

<em>entities</em>

<p>, and</p>

<em>components</em>

<p>on one hand and</p>

<em>systems</em>

<p>on the other.</p>

<p>All of the values stored in the components in the scene represent the scene’s state at that point in time. With every tick of the game loop, the engine runs the functions of each of the systems to update the values stored in the components.</p>

<p>After all the systems run, the components on each entity will have new values. When the engine renders the scene, it will use these new updated values and players will see the entities change to match their new states.</p>

<p>In the example above, a</p>

<code>cube</code>

<p>entity and a</p>

<code>rotationSystem</code>

<p>system are added to the engine. The</p>

<code>cube</code>

<p>entity has a</p>

<code>Transform</code>

<p>, and a</p>

<code>MeshRenderer</code>

<p>component. In every tick of the game loop, the</p>

<code>rotationSystem</code>

<p>system is called, and it changes the rotation values in the</p>

<code>Transform</code>

<p>component of the</p>

<code>cube</code>

<p>entity.</p>

<p>Note that most of the code above is executed just once, when loading the scene. The exception is the</p>

<code>rotationSystem</code>

<p>system, which is called on every tick of the game loop.</p>

<h2>Scene Decoupling</h2>

<p>Your scenes don’t run in the same context as the engine

(a.k.a. the main thread). We created the SDK in a way that is

entirely decoupled from the rendering engine. We designed it to be like this for both safety and performance reasons.</p>

<p>Because of this decoupling, your scene’s code doesn’t have access to the DOM or the</p>

<code>window</code>

<p>object, so you can’t access data like the player’s browser or geographical location.</p>

<p>The decoupling works by using RPC protocol, this protocol assigns a small part of the client to only render the scene and control events.</p>

<p>We have also abstracted the communication protocol. This allows us to run the scenes locally in a WebWorker.</p>

<p>We don’t want developers to intervene with the internals of the engine or even need to know what lies inside the engine. We need to ensure a consistent experience for players throughout the Decentraland map, and mistakes are more likely to happen at that “low” level.</p>

<p>This decoupling is also important to prevent neighbor scenes from interfering with the experience of players while they’re on someone else’s scene. A player might have multiple nearby scenes loaded at the same time, each running their own code. Some actions (like opening external links, or moving the player) are only permitted when the player is standing on that particular scene, not if the scene is loaded but the player is outside.</p>

<h2>Tree Shaking</h2>

<p>When converting the source code in TypeScript to the compiled code in minified JavaScript, the process performs</p>

<p>to ensure that only the parts of the code that are actually being used get converted. This helps keep the scene’s final code as lightweight as possible. It’s especially useful when using external libraries, since often these libraries include a lot of functionality that is not used that would otherwise bulk up the scene.</p>

<p>As a consequence of tree shaking, any code that you want your scene to run needs to be referenced one way or another by the entry points of your code: the</p>

<code>main()</code>

<p>function on</p>

<code>index.ts</code>

<p>. Systems can also alternatively be added to the engine on the</p>

<code>index.ts</code>

<p>file, without referencing</p>

<code>main()</code>

<p>. Any code that is not explicitly or indirectly referenced by these files, will not make it into the scene.</p>

<p>For example, suppose you have a file named</p>

<code>extraContent.ts</code>

<p>with the following content, the entity will not be rendered and the system will not start running:</p>

<p>To make it run as part of your scene, you can reference from</p>

<code>index.ts</code>

<p>in the following way:</p>

<p>The exception to this rule are the definitions of custom components. These must not be accessed via the</p>

<code>main()</code>

<p>function entry point, as they need to be interpreted before everything else.</p>

<h2>Imports</h2>

<p>All functions, objects, components and other elements used by the scene must be imported into each file to use them. This is a consequence of</p>

<p>, as it avoids packaging the entire SDK and instead only includes the parts the scene uses.</p>

<p>Snippets throughout the documentation omit the import lines at the start of every file to keep them clean, but for them to work you must add them to the scene.</p>

<p>When Using VS Studio Code to write your scenes, the smart auto-complete options should take care of handling imports for you when you write, without you having to be aware of this.</p>

<p>When you paste a snippet into your scene, however, you will likely see some elements marked in red, which are not imported into that file. To fix this:</p>

<li>Click on each underlined word</li>

<li>Click on the light-bulb icon on the left of the line</li>

<li>Select</li>

<strong>Add Import From</strong>

<li>An import line appears at the start of the file.</li>

<p>If there are many different things to import, you can also select</p>

<strong>Add all missing imports</strong>

<p>from the same dropdown.</p>

<p>Note that imports must be made to every file where an element is used.</p>

<p>VS Studio Code should be able to resolve the correct paths to your imports on its own. If for whatever reason its having trouble doing that, a trick is to paste the following empty import statements at the start of your file. VS Studio should be able to take it from there.</p>

<h2>SDK Versions</h2>

<p>When developing a new scene, you use the</p>

<code>@latest</code>

<p>stable SDK release by default.</p>

<p>You can install the</p>

<code>@next</code>

<p>SDK release if you want to leverage or preview upcoming features that didn’t yet make it into the latest stable release.</p>

<p>To do so, open the Decentraland Editor tab, and press the</p>

<code>+</code>

<p>sign to install the following:</p>

<code>@dcl/sdk@next</code>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that the @next version might suffer issues from time to time. The syntax and name of new features might change before it’s released in a stable version.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/coding-scenes/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/deploy-third-party/

<title>Upload a preview | Decentraland Documentation</title>

<strong>Upload a preview</strong>

<h1>Upload a preview</h1>

<p>If you don’t own parcels in Decentraland or are not ready to</p>

<p>your scene to Decentraland, you can upload your scene preview to run as an app in a free server.</p>

<p>Once uploaded, the only thing that others have to do to explore your scene is follow a link. They don’t need to install the CLI, Node, NPM, or any of the other tools that would be required to run the preview on their local machine.</p>

<p>Note that it’s not necessary to own LAND to upload a scene preview to a Heroku server. The uploaded content isn’t linked to the blockchain in any way. When running the preview, other adjacent parcels appear as empty.</p>

<p>Follow the steps below to upload your scenes to a free Heroku server:</p>

<p>Make sure you have the latest Decentralnd CLI version installed on your machine</p>

<code>npm i -g decentraland@latest</code>

<p>.</p>

<p>Create a free</p>

<p>account, if you don’t already have one.</p>

<p>Install the Heroku CLI. Do this via</p>

<code>npm i -g heroku</code>

<p>, or see</p>

<p>for alternatives.</p>

<p>Create a git repository for your project. Use any tool you prefer for this, like</p>

<p>. To use git from the command line:</p>

<p>a) Create a new repository by running</p>

<code>git init</code>

<p>in the project folder at root level</p>

<p>b) Do</p>

<code>git add .</code>

<p>and</p>

<code>git commit -m 'your commit text</code>

<p>c) Set the current branch to</p>

<em>main</em>

<p>via</p>

<code>git branch -m master main</code>

<p>d) Make sure the</p>

<code>.gitignore</code>

<p>file contains the following:</p>

<code>/node_modules

npm-debug.log

.DS_Store

/*.env

bin</code>

<p>Note: Make sure your Decentraland project uses the latest SDK version, do</p>

<code>npm i decentraland-ecs@latest</code>

<p>. Projects uploaded to Heroku or similar platformas and built with versions older than 6.10.0 will not be supported and will not be allowed to fech avatar data from content servers.</p>

<p>Note: If you’re deploying a project that was created using</p>

<code>npx sdk-commands init</code>

<p>, you would need to remove the line</p>

<code>"yarn": "please use npm"</code>

<p>from your</p>

<code>package.json</code>

<p>file otherwise you’re going to get an error while deploying.</p>

<p>Use the Heroku CLI to log into your Heroku account with</p>

<code>heroku login</code>

<p>. This opens a browser window to provide your user and password.</p>

<p>Create a new Heroku application and give it a unique name. In the Heroku site do that via</p>

<strong>New</strong>

<p>></p>

<strong>Create new App</strong>

<p>. Otherwise, in the Heroku CLI do it via</p>

<code>heroku create -a example-dcl-scene</code>

<p>Link your Decentraland project to your Heroku application. On the project folder run</p>

<code>heroku git:remote -a example-dcl-scene</code>

<p>(using the name you created you heroku application with)</p>

<p>Edit package.json in your scene to change the “start” script to</p>

<code>CI=true sdk-commands start --port ${PORT:=8000}</code>

<p>Deploy your scene preview with</p>

<code>git push heroku main</code>

<p>To access the scene, copy the link shared by the Heroku deploy command. Then manually add the following parameters to the URL</p>

<code>?realm=localhost-stub&explorer-branch=main</code>

<p>.</p>

<p>For example if the link shared by Heroku is</p>

<code>https://example-dcl-scene.herokuapp.com</code>

<p>, the link you should enter is</p>

<code>https://example-dcl-scene.herokuapp.com/?realm=localhost-stub&explorer-branch=main</code>

<p>.</p>

<p>If your scene is not in coordinates</p>

<code>0,0</code>

<p>, you should also include these as part of the URL. For example:</p>

<code>https://example-dcl-scene.herokuapp.com/?realm=localhost-stub&explorer-branch=main&position=50,-10</code>

<p>Every time you make changes to your scene, make sure you:</p>

<li>Commit and push your changes to the git repo</li>

<li>Push the new version to the Heroku app</li>

<code>git push heroku main</code>

<p>You can read the console logs of the scene preview by running</p>

<code>heroku logs --tail</code>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/coding-scenes/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/async-functions/

<title>Asynchronous code | Decentraland Documentation</title>

<strong>Asynchronous code</strong>

<h1>Asynchronous code</h1>

<h2>Overview</h2>

<p>Most of the code in your scene runs synchronously using a single thread. That means that commands are executed sequentially line by line. Each command must first wait for the previous command to finish executing before it can start.</p>

<p>Even the functions in your scene’s systems are executed one by one, following a</p>

<p>.</p>

<p>Running code synchronously ensures consistency, as you can always be sure you’ll know the order in which the commands in your code run.</p>

<p>On the other hand, your scene needs to be updated many times per second, building the next frame. If a part of your code takes too long to respond, then the whole main thread is stuck and this results in lagging frame rates.</p>

<p>That’s why, in some cases you want some commands to run asynchronously. This means that you can start off a task in a new thread, and meanwhile the main thread can keep running over the the next lines of code.</p>

<p>This is especially useful for tasks that rely on external services that could take time to respond, as you don’t want that idle time waiting for that response to block other tasks.</p>

<p>For example:</p>

<li>When retrieving data from a REST API</li>

<li>When performing a transaction on the blockchain</li>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that several frames of your scene might be rendered before the task finishes executing. Make sure your scene’s code is flexible enough to handle the in-between scenarios while the asynchronous task is being completed.</blockquote>

<h2>Run an async function</h2>

<p>Mark any function as</p>

<code>async</code>

<p>so that it runs on a separate thread from the scene’s main thread every time that it’s called.</p>

<h2>The executeTask function</h2>

<p>The</p>

<code>executeTask()</code>

<p>function executes a lambda function asynchronously, in a separate thread from the scene’s main thread.</p>

<code>executeTask()</code>

<p>allows us to declare and execute the function all in one same statement.</p>

<h2>The then function</h2>

<p>The</p>

<code>then</code>

<p>function takes in a lambda function as an argument, that only gets executed once the prior statement is finished. This lambda function can optionally have inputs that are mapped from whatever the prior statement returns.</p>

<strong>📔 Note</strong>

<blockquote>: It’s generally better to use the</blockquote>

<code>executeTask</code>

<blockquote>approach rather than the</blockquote>

<code>then</code>

<blockquote>function. In this example, the scene won’t be considered fully loaded by the explorer till the</blockquote>

<code>myAsyncTask()</code>

<blockquote>function is completed, which may affect load times. Also, if relying too much on the</blockquote>

<code>then</code>

<blockquote>function at multiple nested levels, you can end up with what’s known as “callback hell”, where the code can become very hard to read and maintain.</blockquote>

<h2>PointerEvents and RayCast functions</h2>

<p>When your scene uses a</p>

<code>PointerEvent</code>

<p>or a</p>

<code>RayCast</code>

<p>component, the calculations of collisions are carried out async in the engine. The engine then returns a results event to the scene, which can arrive one or several ticks of the game loop later than when the event was invoked.</p>

<p>You then need to create a system to process these results in the frame when they arrive.</p>

<strong>📔 Note</strong>

<blockquote>: If you handle clicks via the</blockquote>

<strong>Register a callback</strong>

<blockquote>approach, you don’t need to explicitly create a system to handle this, but the same occurs in the background.</blockquote>

<p>See</p>

<p>and</p>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: If the processing of the results of a raycast takes a lot of calculations (like running a path-finding algorithm) you might want to run that computation in an asynchronous function.</blockquote>

<h2>The await statement</h2>

<p>An</p>

<code>await</code>

<p>statement forces the execution to wait for a response before moving over to the next line of code.</p>

<code>await</code>

<p>statements can only be used inside an async block of code.</p>

<p>The example above executes a function that includes a</p>

<code>fetch()</code>

<p>operation to retrieve data from an external API. The</p>

<code>fetch()</code>

<p>operation is asynchronous, as we can’t predict how long the server will take to respond. However, the next line needs the output of this operation to be ready before we can parse it as a json. The</p>

<code>await</code>

<p>statement here ensures that the next line will only run once that operation has returned a value. Similarly, the</p>

<code>response.json()</code>

<p>function is also asynchronous, but the next line needs the json to be parsed before it can log it. The second</p>

<code>await</code>

<p>statement forces the next line to only be called once the parsing of the json is finished, however long it takes.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/coding-scenes/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene/libraries/manage-dependencies/

<title>Manage dependencies | Decentraland Documentation</title>

<strong>Manage dependencies</strong>

<h1>Manage dependencies</h1>

<p>A lot of times, your scene might need functionality that is already encapsulated in a reusable library. Using external libraries can make your work a lot easier.</p>

<p>You can import external libraries into a Decentraland project and then reference the systems, components, or functions described in these libraries.</p>

<strong>📔 Note</strong>

<blockquote>: Not all Typescript or Javascript dependencies are supported in Decentraland projects. Libraries should be tagged with</blockquote>

<code>decentralandLibrary</code>

<blockquote>in their</blockquote>

<code>package.json</code>

<blockquote>.</blockquote>

<p>Check the</p>

<p>to find a series of libraries, both created by the Decentraland Foundation and by community members, that solve common problems.</p>

<h2>Via the Editor</h2>

<h3>Install a dependency</h3>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<code>+</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>view.</p>

<p>Visual Studio opens an input box at the top of the screen. Provide the name of the dependency you wish to install and hit enter. The dependency is then installed to your scene. For example</p>

<code>react</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: If you wish to install a specific version of a dependency (and not the default latest version), you can specify this as part of the name with an</blockquote>

<code>@</code>

<blockquote>at the end. For example</blockquote>

<code>@dcl/</code>

<blockquote>.</blockquote>

<li>If it is a Decentraland library (ie.</li>

<code>decentraland-ecs-utils</code>

<li>) select</li>

<code>Yes</code>

<li>, otherwise</li>

<code>No</code>

<li>.</li>

<h3>Update a dependency</h3>

<p>Click the refresh icon on the header of the</p>

<strong>Dependencies</strong>

<p>section. All dependencies on the scene are updated to the versions indicated on your scene’s</p>

<code>package.json</code>

<p>file. If dependencies point to the</p>

<code>@latest</code>

<p>version, then this action installs the current latest stable release.</p>

<p>If a dependency in your scene’s</p>

<code>package.json</code>

<p>points to a specific version number, then you need to either:</p>

<p>Reinstall as a new dependency, clicking the plus sign and specifying the library name with</p>

<code>@latest</code>

<p>at the end. For example</p>

<code>@dcl/ecs-scene-utils@latest</code>

<p>.</p>

<p>Manually change the</p>

<code>package.json</code>

<p>file so that the dependency version points to</p>

<code>@latest</code>

<p>. Then click the update icon again.</p>

<h3>Remove a dependency</h3>

<p>Hover over a dependency to see a trash icon. Press this icon to remove an unused dependency from the scene.</p>

<p>You can also click the</p>

<code>-</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>section, and then write the name of the dependency you wish to delete.</p>

<h2>Via the CLI</h2>

<h3>Install</h3>

<p>To install a library in your project folder, run</p>

<code>npm i</code>

<p>and the library name in your project’s root path. If the library is a Decentraland library, add</p>

<code>-B</code>

<p>at the end, to install it like a bundled dependency. For example:</p>

<code>npm i @dcl/ecs-scene-utils -B</code>

<strong>📔 Note</strong>

<blockquote>: You may need to run</blockquote>

<code>dcl start</code>

<blockquote>or</blockquote>

<code>dcl build</code>

<blockquote>after installing the library for the library’s dependencies to get installed.</blockquote>

<h3>Update</h3>

<p>If your</p>

<code>package.json</code>

<p>file lists the version of the scene as</p>

<code>@latest</code>

<p>, then run</p>

<code>npm i</code>

<p>to update all libraries to their corresponding latest versions.</p>

<p>If your</p>

<code>package.json</code>

<p>references a specific version number, you can update it by running the command to install the library, adding</p>

<code>@</code>

<p>and the version number in the end. For example:</p>

<code>npm i @dcl/</code>

<code>-B</code>

<h3>Uninstall</h3>

<p>To delete a library from your scene’s dependencies run</p>

<code>npm rm</code>

<p>and the library name. For example:</p>

<code>npm rm @dcl/ecs-scene-utils</code>

<p>It’s a good practice to remove any libraries that you’re not using. Unused libraries still occupy space in the scene, affecting the player’s experience of downloading and running your scene.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/sdk-101/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/debug-in-preview/

<title>Debug in preview | Decentraland Documentation</title>

<strong>Debug in preview</strong>

<h1>Debug in preview</h1>

<p>Running a preview provides some useful debugging information and tools to help you understand how the scene is rendered. The preview mode provides indicators that show parcel boundaries and the orientation of the scene.</p>

<p>If the scene can’t be compiled, you’ll just see the grid on the ground, with nothing rendered on it.</p>

<p>If this occurs, there are several places where you can look for error messages to help you understand what went wrong:</p>

<li>Check your code editor to make sure that it didn’t mark any syntax or logic errors.</li>

<li>Check the output of the command line where you ran</li>

<code>npm run start</code>

<li>Check the JavaScript console in the browser for any other error messages. For example, when using Chrome you access this through</li>

<code>View > Developer > JavaScript console</code>

<li>.</li>

<li>If you’re running a preview of a multiplayer scene that runs together with a local server, check the output of the command line window where you run the local server.</li>

<p>If an entity is located or extends beyond the limits of the scene, it will be displayed in red to indicate this, with a red bounding box to mark its boundaries. Nothing in your scene can extend beyond the scene limits. This won’t stop the scene from being rendered locally, but it will stop the offending entities form being rendered in Decentraland.</p>

<strong>💡 Tip</strong>

<blockquote>: Before you deploy your scene to the production environment, deploy it to the test environment to try it in a context that is a lot closer to production. See</blockquote>

<h2>Use the console</h2>

<p>Output messages to console (using</p>

<code>console.log()</code>

<p>). You can then view these messages as they are generated by opening the JavaScript console of your browser. For example, when using Chrome you access this through</p>

<code>View > Developer > JavaScript console</code>

<p>.</p>

<p>You can also add</p>

<code>debugger</code>

<p>commands or use the</p>

<code>sources</code>

<p>tab in the developer tools menu to add breakpoints and pause execution while you interact with the scene in real time.</p>

<p>Once you deploy the scene, you won’t be able to see the messages printed to console when you visit the scene in-world. If you need to check these messages on the deployed scene, you can turn the scene’s console messages back on adding the following parameter to the URL:</p>

<code>DEBUG_SCENE_LOG</code>

<p>.</p>

<h2>Add breakpoints in the Decentraland Editor</h2>

<p>Using the Decentraland Editor, you can add breakpoints to your scene’s code. When running a preview, whenever the code passes through these breakpoints, it pauses execution. A</p>

<strong>Debug</strong>

<p>panel opens, showing the current values of all variables at that point in time.</p>

<p>This is especially useful to validate that the data at a given point in time is what you expect. You can also modify the values of any variable manually and resume execution with the blue play button, using those new variables. This is great to test corner cases, to make sure the scene behaves as expected on every scenario, which might otherwise be a lot harder to reproduce.</p>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open VSCode in a Decentraland scene project.</li>

<li>Click on the Debugger icon on the left sidebar.</li>

<li>Click on</li>

<code>Run and Debug</code>

<li>and select</li>

<code>Decentraland</code>

<li>(this step is not necessary if your project already has a</li>

<code>.vscode/launch.json</code>

<li>file).</li>

<li>Click on</li>

<code>Run</code>

<li>. A browser should open.</li>

<li>Try setting a breakpoint and interacting with the scene in a way it will step on that line.</li>

<h2>View scene stats</h2>

<p>Open the scene’s stats by expanding the debug menu and toggling</p>

<strong>FPS Panel</strong>

<p>. This panel displays information about the renderer engine, and is updated in real time as things change.</p>

<h3>FPS</h3>

<p>The first section shows the renderer’s</p>

<em>FPS</em>

<p>(Frames Per Second). This value will tend to be lower as the scene grows in complexity, try to always keep this value above 25 FPS, to ensure a good experience for your players. The FPS will vary depending on the machine you run this in.</p>

<strong>📔 Note</strong>

<blockquote>: The renderer’s FPS is not the same as the scene’s updates of the game loop per second. The scene’s logic is capped at 30 FPS, the renderer’s FPS can go up to 60 or more.</blockquote>

<h3>Memory JS</h3>

<p>The second section displays the memory use on the browser. Always try to keep this value below 1 GB. If this value grows too much, it risks crashing the browser for players visiting your scene. Keep in mind that in production, the scene might be loaded together with other surrounding scenes and players, which can all contribute to the memory consumption.</p>

<h3>General</h3>

<p>The third section includes general information about how the scene is running. What Catalyst realm, and what Ethereum network is being used, also how many other players are around currently being rendered.</p>

<h3>Scene</h3>

<p>This section includes a lot of important stats about your scene’s rendering:</p>

<li>Processed Messages %</li>

<li>Pending on Queue</li>

<li>Poly</li>

<li>Textures</li>

<li>Materials</li>

<li>Entities</li>

<li>Meshes</li>

<li>Bodies</li>

<li>Components</li>

<p>The processed messages and message queue refer to the messages sent by your scene’s code to the engine. These are useful to know if your scene is running more operations than the engine can support. If many messages get queued up, that’s usually a bad sign.</p>

<p>The other numbers in the panel refer to the usage of resources, they display the total count of each item that’s currently being managed in memory. Compare these values to the</p>

<p>. Keep in mind that the maximum allowed number for these values is proportional to the amount of parcels in the scene. If your scene tries to render an entity that exceeds these values, for example if it has too many triangles, it risks being too heavy to run for players in the scene.</p>

<strong>📔 Note</strong>

<blockquote>: Keeping this panel open can negatively impact the frame rate and performance of your scene, so we recommend closing it while not in use.</blockquote>

<h2>Report a bug</h2>

<p>If you encounter a problem that is not with your scene, but instead with the Decentraland SDK in general, please see</p>

<p>.</p>

<h2>Dependency versions</h2>

<p>Running a Decentraland scene locally depends on two main libraries:</p>

<code>decentraland</code>

<p>(the CLI, which is installed globally on your machine) and</p>

<code>decentraland-ecs</code>

<p>, which is installed on each project folder. Make sure both of those are up to date, as any issues you’re experiencing might already be fixed in newer versions. There may also be compatibility problems when attempting to run with one of these two outdated and the other up to date. You can run the following commands to update both these libraries to the latest stable version:</p>

<code>npm i -g decentraland@latest

npm i decentraland-ecs@latest</code>

<p>If you’re using any of the</p>

<p>make sure those are also up to date, as older versions of these libraries may not be compatible with newer versions of</p>

<code>decentraland-ecs</code>

<p>.</p>

<p>The</p>

<code>decentraland-ecs</code>

<p>library has in turn a couple of internal dependencies that are installed with it: the</p>

<code>renderer</code>

<p>and the</p>

<code>kernel</code>

<p>. Each</p>

<code>decentraland-ecs</code>

<p>version is paired with its corresponding versions of both. In occasions, it may be useful to try switching versions of these dependencies independently, to better pinpoint where an issue has originated. You can force your preview to use a different version of the</p>

<code>renderer</code>

<p>or of the</p>

<code>kernel</code>

<p>by simply providing the url parameters</p>

<code>renderer-version</code>

<p>and</p>

<code>kernel-version</code>

<p>, pointing at a specific commit.</p>

<p>For example, you can run your preview with the following URL:</p>

<p>http://127.0.0.1:8000/?position=0%2C0&SCENE_DEBUG_PANEL&renderer-version=1.0.12119-20210830195045.commit-a8be53a</p>

<p>To find out what versions are available to choose from on each dependency, check the version history on the NPM pages for the</p>

<p>and for the</p>

<p>. To know what versions of these dependencies are in use by default by a specific</p>

<code>decentraland-ecs</code>

<p>version, you can run the following command, indicating the</p>

<code>decentraland-ecs</code>

<p>version you’re curious about:</p>

<code>npm info</code>

<h2>View bounding boxes</h2>

<p>While running a scene preview, open the debug menu (on the right of the minimap) and click</p>

<strong>Bounding Boxes</strong>

<p>to toggle the visualization of bounding boxes on and off.</p>

<p>Bounding boxes are displayed as thin white boxes around each mesh. Bounding boxes show the limits of the space occupied by a 3D model. Every mesh in a 3D model has its own bounding box.</p>

<p>When Decentraland’s engine checks if an entity is within the scene limits, it looks at the positions of each corner of the bounding box. Checking the corners of the bounding boxes is an engine optimization, as checking the position of each vertex in the model would be a lot more work. Ideally the bounding box shouldn’t extend beyond the visible vertexes of the model, but it may not be the case if the model wasn’t carefully built with this in mind.</p>

<p>By visualizing bounding boxes, you can debug problems with entities being reported as outside the scene limits.</p>

<h2>Lighting conditions</h2>

<p>The in-world time of day has a big impact on how 3D models look. The color of the light source changes subtly, having a bluish tint at night, and a reddish tint during sunrise and sunset. The direction of the light also moves across the sky, casting shadows in different directions.</p>

<p>Check that your scene looks good at all times of day by switching the game clock to different values. Open the settings panel, and in the</p>

<strong>General</strong>

<p>tab set the</p>

<strong>skybox time</strong>

<p>to any time you prefer. If this slider is grayed out, make sure that the</p>

<strong>Dynamic skybox</strong>

<p>option is disabled.</p>

<figcaption>In-world instructions</figcaption>

<p>Your 3D model’s materials might not look the same as they did in the modeling tool you created it with. This is to be expected, as all 3D rendering engines have subtle differences in how they deal with light and materials.</p>

<h2>Avatars and accounts</h2>

<p>To use the avatar that’s linked to your active Metamask account, with access to all of your owned wearables, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>With the CLI, you can start the preview with:</p>

<code>npm run start --web3</code>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<p>When running a preview normally, without a connected Web3 account, you’re assigned a random avatar each time you reload.</p>

<p>To use a consist guest avatar across your sessions, you can store an avatar profile by adding a</p>

<code>PLAYER</code>

<p>parameter to the URL with any string as its value. When using this, the preview will store your avatar’s settings locally on your browser, to retrieve them whenever you use the same string on the</p>

<code>PLAYER</code>

<p>parameter. For example, every time you open the preview with the URL</p>

<code>http://127.0.0.1:8000/?PLAYER=ringo</code>

<p>, you’ll have the same avatar.</p>

<h2>Connecting to Ethereum network</h2>

<p>If your scene makes use of transactions over the Ethereum network, for example if it prompts you to pay a sum in MANA to open a door, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<h3>Using the Ethereum test network</h3>

<p>You can avoid using real currency while previewing the scene. For this, you must use the</p>

<em>Ethereum Ropsten test network</em>

<p>and transfer fake MANA instead. To use the test network you must set your Metamask Chrome extension to use the</p>

<em>Ropsten test network</em>

<p>instead of</p>

<em>Main network</em>

<p>. You must also own MANA in the Ropsten blockchain, which you can acquire for free from Decentraland.</p>

<p>Any transactions that you accept while viewing the scene in this mode will only occur in the test network and not affect the MANA balance in your real wallet.</p>

<h2>Multiplayer testing</h2>

<p>If you open a second preview window on your machine, you will enter the scene with a different avatar. The avatars on both tabs will be able to see each other and interact, although currently they might have inconsistent names and wearables on.</p>

<strong>📔 Note</strong>

<blockquote>: You can’t open multiple tabs using the same account. So if your URL has a hardcoded</blockquote>

<code>PLAYER</code>

<blockquote>parameter with the same string on multiple tabs, or you’re connecting to Metamask on more than one tab, it won’t be possible to load them all. Each simultaneous tab should load a different account.</blockquote>

<p>If the scene uses the MessageBus to send messages between players, these will work between the different tabs.</p>

<p>If the scene connects to a third party server via websockets, these connections should also work independently on each tab, as separate players.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/debug-in-preview/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

<title>Development workflow | Decentraland Documentation</title>

<strong>Development workflow</strong>

<h1>Development workflow</h1>

<p>This document outlines the steps recommended for developing a scene for Decentraland, from ideation to publishing and beyond.</p>

<h2>Install the Decentraland Editor</h2>

<p>Make sure you have the Decentraland Editor installed.</p>

<li>.</li>

<h2>Design your experience</h2>

<p>Think about how much space you need to take up, what kind of distribution, what kinds of mechanics you want players to be able to carry out, etc. The following documents can serve as a guide:</p>

<h2>Where to publish</h2>

<p>In Decentraland, content is published to adjacent plots of land in a finit amount of space. Players can freely walk from one to the other. Each scene is its own contained little world, items from one scene can’t extend out into another scene, and the code for each scene is sandboxed from all others.</p>

<p>Permission to publish to each of these is controlled via tokens. You don’t need land to develop a scene, but you will need access to land once you’re ready to publish. Alternatively, you have the option to publish to Decentraland</p>

<p>, which are self-contained and isolated scenes.</p>

<p>The following options are available:</p>

<li>Obtain permissions from a land owner</li>

<li>Publish to a Decentraland World, see</li>

<li>to learn more.</li>

<p>See</p>

<p>for more details.</p>

<h2>Templates and examples</h2>

<p>When creating a new scene, choose amongst several base template scenes that include some basic code and 3d models. Use these to get started faster.</p>

<li>: here you can find a large collection of example scenes, each showcasing different mechanics that you can borrow. You can also clone any of these scenes and use it as a starting point.</li>

<li>: these can simplify many common tasks.</li>

<h2>Art assets</h2>

<p>If you’re an experienced artist or you have access to someone who is, you can create custom</p>

<code>.gltf</code>

<p>or</p>

<code>.glb</code>

<p>models for your scene. See</p>

<p>for tips on how to create 3D models for Decentraland.</p>

<p>There are many sources to obtain free or paid art assets. For example:</p>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<h2>Run a local preview</h2>

<p>To run a preview of your scene, open a Visual Studio Code window on your project’s root folder and click the</p>

<strong>Preview</strong>

<p>button on the Decentraland Editor tab.</p>

<li>) for more details.</li>

<li>Check the</li>

<li>for tips on how to debug any issues.</li>

<strong>💡 Tip</strong>

<blockquote>: If you get stuck trying to debug an issue, visit the</blockquote>

<blockquote>to get help from other developers.</blockquote>

<em>Optional</em>

<p>: Your scene`s mechanics might rely on a 3rd party server to carry out player validations, permanent data storage, or other functionalities. See</p>

<h2>Publish to the test server</h2>

<p>Deploy your scene to a test server. This server is not private but only accessible via a specific URL, so players won’t bump into your tested scene involuntarily.</p>

<li>.</li>

<h2>Publish to Decentraland</h2>

<p>Once you’re happy with your scene, it’s time to publish it to the production environment. There all players will have access to it if they visit the scene’s coordinates.</p>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: Before you do, check that your scene has all the necessary metadata: name, description, a preview image, spawn points. See</blockquote>

<blockquote>for details.</blockquote>

<h2>Promote</h2>

<p>Once your scene is out there, you want to give it visibility and have people visit it. There are a number of ways you can shine a spotlight on it:</p>

<li>Share it on social media</li>

<li>: create an event to promote your scene</li>

<li>: ensure your scene is well positoned here, encourage players to vote your scene to get more visibility</li>

<h2>Iterate</h2>

<p>One great advantage of Decentraland is that you can easily iterate over your scenes. Measure your scene’s success with players, then keep publishing changes as you perfect the experience for your players.</p>

<li>.</li>

<h2>Giving back</h2>

<p>Decentraland is a community project, the community of creators learns together and leverage each other’s creations. Consider the following:</p>

<li>Join the</li>

<li>and help other developers in need of advice.</li>

<li>Share your scene’s code as an open source repo on GitHub.</li>

<li>Build a minimal example to share a specific reusable mechanic, as an open source repo on GitHub.</li>

<li>Make a PR to the</li>

<li>to include your scenes.</li>

<li>Write a library that encapsulates the complexity of common challenges, so others can overcome them easily.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/design-experience/ux-ui-guide/

<title>UX and UI guide for creators | Decentraland Documentation</title>

<strong>UX and UI guide for creators</strong>

<h1>UX and UI guide for creators</h1>

<p>It’s of vital importance to us that Decentraland content creators are free to make use of their creativity to its full extent. This is essential for Decentraland to become a rewarding place to explore. However, it’s also important to keep in mind that the scenes in Decentraland will be visited by a wide variety of users and we want to make the scenes accessible to all of them. Because of this, we can’t ignore the need to establish a unified design criteria, a guide that can guarantee that players will find themselves with a homogeneously intuitive and enjoyable experience, no matter what scene they’re on.</p>

<p>In this document we share Decentraland’s Design Values, with the objective of promoting what we consider are the best practices for designing the interface and experience for players. We hope that these criteria can serve as a starting point to build and/or improve the scenes that make up the Metaverse.</p>

<h2>Design values</h2>

<p>All scenes in Decentraland should be designed with these values in mind:</p>

<strong>Welcoming</strong>

<li>: The player feels warmly welcome.</li>

<strong>User-friendly</strong>

<li>: The UI is easy and fun to use – you should avoid reinventing the wheel</li>

<strong>Easy to learn</strong>

<li>: Players find the UI familiar and intuitive. Patterns should be consistently used throughout the scene.</li>

<strong>Providing guidance</strong>

<li>: The scene provides a helping hand. Text, motion, sound and graphics will lead and hint players in the right direction.</li>

<strong>Reactive</strong>

<li>: Clear action-reaction to players’ input.</li>

<strong>Minimalistic</strong>

<li>: Less is more. Players can focus their attention on what matters.</li>

<strong>Interesting</strong>

<li>: The scene takes advantage of the things that make Decentraland unique and worthy of visiting.</li>

<strong>Purposeful</strong>

<li>: Players have a strong reason to come back.</li>

<strong>Enjoyable</strong>

<li>: Players enjoy how things look, sound and feel</li>

<h2>User experience</h2>

<h4>Where to start?</h4>

<p>What is the objective of your scene? Is it to offer a beautiful landscape to contemplate and explore? Is it a museum? Is it a single player game? A competitive one? Or does it follow a linear storytelling flow?</p>

<p>It’s important to be well aware of this objective through every step of the design process, it should guide all of your decisions, all of which can profoundly affect the visitor’s experience.</p>

<p>For scenes that follow a linear flow, where each step depends on the previous, we recommend walling the scene and establishing one or multiple fixed entry points, to avoid players stumbling onto things in the wrong order. By the way, entry points are an excellent place to display a message to welcome the player and explain what their objective in the scene should be.</p>

<figcaption>In-world instructions</figcaption>

<p>If the player’s experience in your scene isn’t meant to be linear, but you still need to provide some basic instructions to ensure they enjoy it fully, you can show instructions on a pop-up. It’s possible to display a popup on the player’s screen as soon as they enter, regardless of what direction they come from, and in that way make sure that players will always know the essentials.</p>

<figcaption>Pop-up instructions</figcaption>

<strong>📔 Note</strong>

<blockquote>: Make sure the popup isn’t too intrusive and that it’s easy to close by clicking anywhere.</blockquote>

<p>A welcome message should communicate the following to the player:</p>

<li>The scene title</li>

<li>Welcome the player</li>

<li>End goal & motivation for the player</li>

<li>Instructions/Next steps</li>

<em>(Optional)</em>

<li>Controls. Mostly useful if your scene uses global button events. Otherwise, items themselves indicate how to use them when hovering over them.</li>

<h4>Motivation</h4>

<p>You’ll likely want your visitors to keep coming back to your scene, think of ways in which you can motivate them to do so! Ask yourself “What would make a player want to return to my scene, or want to recommend it to a friend?”</p>

<p>For example, you can challenge them, giving them something to achieve that will be hard enough to take several attempts. You can also organize competitive multiplayer events, which are also an interesting opportunity to socialize. Make your scene a dynamic place where players feel that they enjoy spending time there!</p>

<h4>Feedback and Sound</h4>

<p>Sound plays a double key role, don’t miss out on using it! On one hand it’s vital for generating immersion, many things that won’t feel real if they aren’t accompanied by sound. The other crucial thing sound is for is providing feedback to a player’s actions. If you rely only on visual cues, you can’t be certain that a player will be looking in the right direction to see the effects of their actions. Through using sound, you can ensure that they are aware that something happened. If you use visual and sound cues in combination, hearing the sound invites the player to look around for the visual cue, in case they didn’t see it.</p>

<p>Keep in mind that some players might be playing with their sound turned off. If you’re using sound as a way to provide scene instructions or a key piece in the game mechanics, try to also provide something visual to hint in the same direction. For example, you could display text at the bottom of the UI to accompany these sounds, like subtitles in a movie.</p>

<h2>User Interface</h2>

<p>This section is aimed at helping you construct a narrative through the design of your scene that drives the player’s focus onto the elements that matter the most. Making good use of the tools described here can make their experience a lot more immersive and successful.</p>

<p>We can’t understate how valuable color, icons, motion and scale are for sending the right message across: everything in the scene conveys a meaning, remember that.</p>

<h4>Layout</h4>

<p>Be careful about placing your UI in screen regions that overlap with the default Decentraland UI elements. The default Decentraland UI, including minimap, chat, etc, is designed to only cover the left 25% of the screen. The rest of the screen real estate is a safe zone, free to use for content creators.</p>

<p>There are no restrictions for placing UI elements in the left 25% of the screen, but keep in mind that the explorer is continually making changes and improvements to its design. Any space that is not occluded in that region today could be covered in future versions.</p>

<strong>📔 Note</strong>

<blockquote>: UI elements from scenes and smart wearables always appear on a layer behind the default Decentraland UI.</blockquote>

<p>Always keep a grid in mind and use it as your main criteria when spatially organizing your UI. If you are working on a scene where a HUD is needed, you can start by putting all the consumables together (e.g. currency, food, life), and on the other side stockables such as tools or weapons. Try to be consistent about the grid metrics and padding. Make the feedback for every player action clear.</p>

<h4>Color</h4>

<p>It’s important to choose a color palette, as this gives your scene an identity and also signals relationships and hierarchy between elements.</p>

<p>When putting together a color palette, start out by selecting a main color, and optionally a secondary one. Then you should decide if you want the palette to be analogous, complementary, or triadic, etc, in relation to that main color.</p>

<figcaption>Chromatic color palette</figcaption>

<figcaption>Strategies for combining colors properly</figcaption>

<strong>💡 Tip</strong>

<blockquote>: Free color palette generators we recommend:</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<blockquote>,</blockquote>

<p>The main color should be the most frequently used across your UI components. If your palette doesn’t have a secondary color, you can accent elements by combining the main color with black or white. Having a secondary color is not mandatory, but it helps emphasize and distinguish your scene UI elements. Secondary colors work best for highlights, selection controls (sliders and switches), links and headlines.</p>

<p>Remember that each color has its own unique expressive qualities, take advantage of that to communicate messages through them. For example, red is often associated with negative connotations whilst green is associated with positive connotations.</p>

<figcaption>Using color the wrong way can be confusing</figcaption>

<p>You can also use colors strategically to indicate state changes, for example changing the color of an element to indicate if it’s active or inactive.</p>

<strong>📔 Note</strong>

<blockquote>: States communicate the status of UI elements. The states of an element should maintain a certain continuity, but they must have clear affordances and be easily distinguishable from other states and the surrounding layout.</blockquote>

<figcaption>Using color for button states</figcaption>

<p>Warning! When selecting colors that will be shown in superposition, take special care of making sure that they are legible when used together. Here’s a fundamental rule: the colors of elements that are shown together should always have plenty of contrast between them. Be mindful that some players might be looking at their screens under suboptimal lighting conditions, which makes reading harder.</p>

<figcaption>Both icons can be distinguished, but the first one has better contrast. It becomes easier to read and requires less effort to understand.</figcaption>

<h4>Typographic hierarchy</h4>

<p>Try to define at least a 3-type scale for Titles, Subtitles, and Body. Be careful with the use of color and font size. All font sizes should be 12 px or larger.</p>

<p>If you are going to place text that is displayed over imagery (or over the world), you will surely need to experiment with its legibility. In those cases, we suggest that you add a colored solid region, in a layer between the text and images, that way you can ensure that the text remains legible.</p>

<figcaption>Prioritize legibility</figcaption>

<h4>Icons</h4>

<p>Icons synthesise information, helping you identify actions through images. They are an amazingly powerful tool for providing input that can be interpreted fast, as opposed to using text to label things, which demands more of the player’s attention and time. It’s also useful to show icons in combination with text, as this helps disambiguate their meanings.</p>

<figcaption>Use icons as a universal language</figcaption>

<h4>Motion</h4>

<p>Use motion to provide feedback and lead the way when needed. Motion helps players focus their attention and helps maintain continuity as the UI changes.</p>

<figcaption>Use particles, scale, or fading margins to make things stand out</figcaption>

<h4>Writing and content structure</h4>

<p>UI text can make interfaces more usable and gives players more confidence in their actions. Always make UI text as concise as possible. Players are there to play, not to read. Any text that seems too long won’t be read by most players.</p>

<p>Receive your players with a Welcome Message and tell them the objective of the scene. Start by clarifying their goal in the scene, then the actions needed to achieve it. Then you can reveal information progressively as it’s needed, this way players won’t feel overwhelmed on the very beginning of the experience. As with graphic resources, try to use consistent words across your UI features and storytelling.</p>

<p>SDK New Features - Coming Soon!</p>

<p>Objects interactions

Now it’s not possible for players to tell which objects are interactive and which aren’t, until they actually click or press buttons on them. We have been working on a new feature for creators to be able to show custom toast messages when aiming at an interactive object. This message conveys which input to use and may have custom text to describe the effects of interacting with it. We highly recommend that you use it when released, your scene will feel more natural and easy to use.</p>

<p>3rd person camera

We’re currently experimenting with adding support for a 3rd person camera. You can try it out in the explorer by hitting the ‘V’ key. (Note, it’s not supported yet in a scene preview). You can start thinking of developing incredible new experiences or games that might be much more appealing thanks to a 3rd person camera!</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/design-experience/design-games/

<title>Design constraints for games | Decentraland Documentation</title>

<strong>Design constraints for games</strong>

<h1>Design constraints for games</h1>

<p>This document covers some key points to consider when designing a game for Decentraland. Considerations such as the adjacency of other scenes and the distributed ownership of the LAND make Decentraland a unique place that requires you to reconsider assumptions you may have from previous games.</p>

<p>For instance, you must understand that, unlike in other game platforms, Decentraland games don’t exist in a vacuum. You don’t have control over what’s in adjacent scenes, and you don’t have control over certain details like the player’s avatars or items they could bring in from other games. This opens the door to exciting possibilities, and requires you to think about game mechanics differently.</p>

<p>The closest thing in mainstream games right now is Roblox, where content that’s generated by users in the community can then be a meeting place for others to explore, play, and interact. Unlike Roblox, you navigate scenes not by browsing a menu of unrelated experiences but by physically exploring a terrain where all scenes are adjacent to each other. Decentraland also makes use of the blockchain as a way to manage ownership of land, avatars, assets, etc.</p>

<p>We’re continually improving the SDK, so some of the following limitations will be removed with future updates before Decentraland is opened to end users.</p>

<h2>Scene boundaries</h2>

<strong>Your game must fit entirely in the</strong>

<em>LAND</em>

<strong>that your scene is built upon.</strong>

<p>For small scenes, think of games like soccer where the rules of the game keep the relevant interaction within a confined space, even though players are able to step outside of the playing field. Players can walk outside of a scene’s boundaries, but any asset or entities that belong to the scene must stay within the scene.</p>

<p>Players that step outside your scene keep rendering it as long as it’s at a visible range. If they walk away too far, they will stop rendering it entirely.</p>

<p>You could also build a game that spreads out throughout several disconnected plots of land that are unknown to players, and where the exploration of the rest of the world becomes part of the gameplay. A game like that would be made up of multiple separate</p>

<em>scenes</em>

<p>, that could share data with each other via a server.</p>

<h4>User inventory</h4>

<strong>There currently isn’t an inventory where players can store game items as they walk between scenes.</strong>

<p>The following alternatives are available today:</p>

<li>You can store inventory information in the scene itself and link it to each player’s Ethereum address (this can be used as a persistent id). This information would only be readable from your scene.</li>

<li>You can use an external custom storage and sync all of your scenes to it. This is a more robust solution that can deal with larger volumes of players. It can also extend the access to this inventory to multiple separate scenes that you or others own.</li>

<li>Use tokens in the blockchain to handle the ownership of items.</li>

<p>When earning a game item, it could be stored as a special token in a player’s Ethereum wallet. When a player that possesses the token walks into your scene, your scene could grant the player certain characteristics within the game.</p>

<p>Other scenes could potentially also respond to the same token in different ways, which can make for interesting interplay between games.</p>

<p>The downside of using the blockchain to store inventory items is that all transactions have a cost for the player and aren’t immediate. Read more about the blockchain in a specialized section further below.</p>

<p>In future releases, players will have an inventory they carry everywhere which will include both on-chain and off-chain assets.</p>

<h4>Portable experiences</h4>

<strong>📔 Note</strong>

<blockquote>: Portable experiences and smart wearables are still in an exploratory stage and not yet available for community creators to make.</blockquote>

<p>Portable experiences are parts of the gameplay that players take with them as they move through the metaverse. These are not tied to parcels of land, they are sometimes tied to tokens, or sometimes launched by the explorer. For example, a player could take a snowball from your scene, walk away to another scene, and throw the snowball to another player who’s also playing the same game.</p>

<p>Smart wearables are a kind of portable experience that is tied to a wearable token and turned on when the player puts on the item of clothing. Smart wearables can grant players new abilities, like a jetpack that lets them fly, or add a new layer of content on top of the rest of the world, like randomly placing coins to be collected throughout the whole of genesis city.</p>

<p>Keep in mind that players might be using someone else’s portable experience while on your scene. See</p>

<p>to learn how to check what portable experiences a player currently has activated.</p>

<h2>Game Persistence</h2>

<strong>Decentraland is a persistent world, your scene can be visited by players at any time.</strong>

<p>Your scene has no startup phase and no ending, so you should design the game mechanics in a way that allows players that walk in or out at any time to also participate.</p>

<p>Your scene could have a reset mechanism that sets it to an initial state, but you should be careful not to disrupt the game for players who are already playing.</p>

<h4>Sync scene state</h4>

<strong>Currently, scene states aren’t shared between players unless manually implemented.</strong>

<p>This is the simplest way to build a scene, but it’s not ideal for social experiences.</p>

<p>You can use the MessageBus to use the same messaging architecture used to share player position changes and chat. These state changes are not stored anywhere. If no players are currently near the scene and loading it, the scene will reset to a default state the next time it’s loaded.</p>

<strong>You can host your own server to store information about your scene and keep all players in sync with it.</strong>

<p>This ensures good connection speeds and keeps the scene running continuously even when no players are near. If you do this, your latency limitations would be no different to any other massively played online games.</p>

<p>Hosting your own server is also a recommended safety measure for games that involve transactions with valuable game items, as you can keep certain information like security tokens only in the server, never exposing that information outside.</p>

<strong>📔 Note</strong>

<blockquote>: In future releases, we will provide out-of-the-box solutions and code examples for how to implement your own server.</blockquote>

<h4>Game timing</h4>

<strong>Games that use default communications architecture should take into account that there could be lag between players</strong>

<p>and shouldn’t rely on fast reactions between the actions of different players. We recommend games that are turn based, or that are mostly based on player versus environment interactions.</p>

<p>For games where the timing of actions between players is critical, like a first person shooter, you should implement your own server as a real-time authoritative source of truth between all players in your scene.</p>

<h2>Players in the scene</h2>

<strong>Players are identified in Decentraland using their Ethereum wallet address.</strong>

<p>This wallet is used as a persistent ID that’s already associated with all of the tokens that the player owns.</p>

<strong>There currently is no way to limit how many players can be present in Decentraland at the same time.</strong>

<p>Unlike a lot of other games where there may be different game sessions hosted in separate servers, there’s only one instance of Decentraland shared between all players, at least for now.</p>

<p>You need to keep in mind that there may be several players walking around your scene at any given time. Some of them might be walking through and not participating in the game. Make sure that the game mechanics can’t be easily disrupted by this.</p>

<strong>The game loop of your scene can’t affect players directly</strong>

<p>, the scene has a reactive approach to the player’s actions. If a player is standing on an entity and the entity moves or rotates, the player will move with this entity. This is especially useful for elevators, floating platforms, and the like.</p>

<p>As the owner of a scene, you can’t forcefully push or teleport an offending player out of your scene. However, you will be able to blacklist players in the signaling server. You can also implement a blacklist in your scene’s code and deny certain services to blacklisted players.</p>

<h2>Scene content limitations</h2>

<strong>Please build your scene being extra careful with the efficiency of your code.</strong>

<p>Decentraland needs to run on web browsers and mobile devices, and players will be rendering multiple scenes at the same time as they walk through the metaverse.</p>

<strong>You should also try to keep the scene lightweight.</strong>

<p>Unlike other online games where the same textures and assets are conveniently repeated throughout a large open world, in Decentraland every scene could have its own completely different set of assets. As players walk through multiple scenes, they should be able to download the entirety of the scene content, including textures, sound files, etc at a reasonable speed.</p>

<p>Because of this, we’ve imposed some limits to prevent excessive use of computational resources. See</p>

<p>for details on what these limits are.</p>

<h2>Access to scenes</h2>

<strong>The map of Decentraland is designed so that there are roads and public plazas,</strong>

<p>these guarantee easy access to various parts of the map, regardless of what other people build. Plots of land that are not adjacent to any road or plaza run the risk of being walled out by neighbouring scenes, although we expect most scenes to be walkable and not block others out.</p>

<p>New players will start their experience in Genesis Plaza, in the center of the map, where they will be encouraged to follow some tutorial activities and then to explore the world.</p>

<p>Players can also manually type a URL for a specific coordinate in the Decentraland map to spawn to that location. You can also share links to URLs that have hard-coded initial coordinates.</p>

<p>Keep in mind that if a player starts at a location that is walled out or below the level of the terrain, it won’t be a pleasant experience. To avoid this, there’s a way you can define a set of specific locations in your scene that is safe to spawn into. See</p>

<p>for details.</p>

<p>In future releases, players will also be able to navigate the world rapidly using maps with spawn points, lists of popular locations, and friend locations. The SDK will also make it possible to add teleports in your scene that can transport to other parts of the world.</p>

<h2>User UI</h2>

<strong>The default overlaid UI that players see when entering Decentraland has only the essentials.</strong>

<p>You can add extra elements to that UI while a player is on your scene. Keep in mind that the Decentraland default UI is displayed above anything from your scene, so design your UI so that it doesn’t overlap with this.</p>

<p>When a player steps outside the scene, all UI elements are removed to not intervene with other scenes. Players also have a button available in their screen to toggle all UI elements in the scene off, this is mainly useful to prevent abusive behavior by scenes that may want to cover all of the player’s field of view.</p>

<h2>Physics</h2>

<p>Keep in mind that the SDK doesn’t provide its own physics engine. If you want to use physics in your scene, you can import a library or code the behavior yourself.</p>

<h2>Controller Inputs</h2>

<strong>Your game controls should be limited to basic movements, jumping, point and click, as well as a primary and secondary button.</strong>

<p>We will support mobile and Virtual Reality controllers, so we can’t assume that everyone has a keyboard.</p>

<p>We have support for global</p>

<em>button up</em>

<p>and</p>

<em>button down</em>

<p>events for all three buttons. All three buttons also have hit events that let you identify if an entity was in the player’s aim.</p>

<h2>Avatars</h2>

<strong>Players can build their avatars based on a set of default wearable items.</strong>

<p>We will expand the list of available wearables and options, and in the future we’ll also make it possible for third parties to create and sell wearables.</p>

<h2>Communication between players</h2>

<strong>Users are able to chat with each other. Avatars currently have no way to convey body language beyond the use of basic movement controls.</strong>

<p>In future releases they will also be able to do voice chat and to perform gestures like dancing or frowning with their avatars. They will also be able to display a temporary emoji above their avatar to express themselves. Players will also be able to display tokens they own so that other players can see them.</p>

<h2>Game notifications</h2>

<strong>There currently is no cross-scene notification system.</strong>

<p>Any game requiring notifications displayed outside of the current scene is going to have to implement them using an external service.</p>

<h2>Using the blockchain</h2>

<strong>In Decentraland, the blockchain is used to store information about ownership.</strong>

<p>Today this mostly refers to LAND ownership, but it can also be used ownership of game items, wearables, special avatars, emotes, and tokens that can ensure certain game privileges or access to games.</p>

<p>The blockchain isn’t used to store the game state, player position or anything that needs to change in real time.</p>

<h4>LAND and MANA</h4>

<strong>Players don’t need to own any parcels of land to participate in the metaverse.</strong>

<p>In fact, the vast majority of players won’t. Player avatars and the LAND tokens that they own aren’t connected in any direct way.</p>

<strong>Players don’t need to previously own an Ethereum wallet or MANA tokens to enter Decentraland.</strong>

<p>If your gameplay relies heavily on owning tokens, you would be excluding most players. A freemium game model could be an ideal way to tailor to both user bases.</p>

<h4>Other NFTs</h4>

<strong>You can use special non-fungible tokens (NFTs) to represent game items, custom avatars or wearables.</strong>

<p>If a player owns one of these tokens, your scene could respond to it in different ways.</p>

<p>Read about what NFTs are in</p>

<p>.</p>

<h4>In-game transactions</h4>

<strong>Your scene can support blockchain transactions for players to buy or earn tokens.</strong>

<p>Blockchain transactions aren’t immediate, they require verification times and have a cost in Ether, both the time and cost vary depending on the current usage of the network.</p>

<p>Decentraland is working on creating a side-chain that will be able to handle transactions faster and cheaper than the Ethereum network. This side-chain will be ideal for in-game transactions, as changes can occur closer to real time and at a very low cost. The main Ethereum chain will still be recommended for transactions that require higher security and that can afford to be more expensive and take longer.</p>

<p>The player must always approve these transactions explicitly on their Ethereum client. For example when using Metamask, Metamask prompts the player to accept each transaction before it’s processed.</p>

<p>Players could also sign a contract that automatically approves all transactions requested by a specific address or within certain constraints, so as to avoid interruptions to approve transactions.</p>

<p>You can also use smart contracts to condition transactions based on custom conditions. For example, players could stake a bet on the outcome of a game, and the corresponding payments would occur automatically as soon as the outcome is known.</p>

<p>To implement blockchain interactions in your scene’s code, you must use external libraries that interface with the Ethereum network. Future releases of the SDK will provide a custom API to expose these functionalities in a simpler way.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/design-experience/design-games/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#get-portable-experiences

<title>Player data | Decentraland Documentation</title>

<strong>Player data</strong>

<h1>Player data</h1>

<h2>Track player position and rotation</h2>

<p>Use the</p>

<code>PlayerEntity</code>

<p>and the</p>

<code>CameraEntity</code>

<p>to know the player’s position and rotation, by checking their</p>

<code>Transform</code>

<p>components.</p>

<strong>PlayerEntity position</strong>

<li>: The avatar’s position, at chest height. Approximately at 0.88 cm above the ground.</li>

<strong>PlayerEntity rotation</strong>

<li>: The direction in which the avatar is facing, expressed as a quaternion.</li>

<strong>CameraEntity position</strong>

<li>:</li>

<li>In 1st person: Equal to the avatar’s position, but at eye-level. Approximately at 1.75 cm above the ground.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<strong>PlayerEntity rotation</strong>

<li>:</li>

<li>In 1st person: Similar to the direction in which the avatar is facing, expressed as a quaternion. May be rounded slightly differently from the player’s rotation.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<p>The</p>

<code>Camera</code>

<p>object exposes information about the player’s point of view in your scene.</p>

<code>Camera.instance.position</code>

<li>returns a 3D vector with the coordinates of the avatar’s center, relative to the scene. When the player is on the ground, the height of this point is approximately</li>

<em>1.177</em>

<li>m. In 3rd person camera mode, this value refers also to the avatar’s center, not to the position of the 3rd person camera.</li>

<code>Camera.instance.feetPosition</code>

<li>returns a 3D vector with the coordinates of the player’s feet relative to the scene. When the player is at ground level, the height is nearly 0.155.</li>

<code>Camera.instance.worldPosition</code>

<li>returns a 3D vector with the coordinates of the player’s center, relative to the whole of Genesis City. For example, if the scene is in coordinates</li>

<em>100,-100</em>

<li>, and the player is standing on the bottom-left corner of that scene, the player’s world position will be about</li>

<em>1600, 1.177, -1600</em>

<code>Camera.instance.rotation</code>

<li>returns a quaternion with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<code>Camera.instance.rotation.eulerAngles</code>

<li>returns a Vector3 with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<p>The example above uses the player’s rotation to set that of a cube in the scene.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.PlayerEntity</code>

<p>or the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entities are not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to these entities in a system, they will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Get player data</h2>

<p>The following data can be fetched from a player:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The player’s user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.</li>

<code>hasConnectedWeb3</code>

<li>:</li>

<em>(boolean)</em>

<li>Indicates if the player has a public key.</li>

<em>True</em>

<li>if the player has one.</li>

<code>publicKey</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player’s Ethereum wallet. If the player logs in as a guest, with no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>avatar</code>

<li>: A nested object with data about the player’s appearance.</li>

<code>version</code>

<li>:</li>

<em>(number)</em>

<li>A version number that increases by one every time the player changes any of their settings. Use this if you encounter conflicting data, to know what version is more recent.</li>

<strong>📔 Note</strong>

<blockquote>: For any Ethereum transactions with the player, always use the</blockquote>

<code>publicKey</code>

<blockquote>field, instead of the</blockquote>

<code>userId</code>

<blockquote>, to avoid dealing with non-existing wallets.</blockquote>

<p>The</p>

<code>avatar</code>

<p>object has the following nested information:</p>

<code>wearables</code>

<p>:</p>

<code>WearableId[]</code>

<p>An array of identifiers for each of the wearables that the player is currently wearing. For example</p>

<code>urn:decentraland:off-chain:base-avatars:green_hoodie</code>

<p>. All wearables have a similar identifier, even if they’re NFTs.</p>

<code>bodyShape</code>

<p>: An identifier for the avatar’s general body shape. Either</p>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<p>for female or</p>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<p>for male.</p>

<code>skinColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s skin color.</p>

<code>hairColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s hair color.</p>

<code>eyeColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s eye color.</p>

<code>snapshots</code>

<p>: A nested object with base64 representations of .jpg images of the player in various resolutions.</p>

<code>face256</code>

<li>:</li>

<em>string</em>

<li>The player’s face as a 256x256 pixel image.</li>

<code>body</code>

<li>:</li>

<em>string</em>

<li>The full resolution image of the player standing straight, with 512x1024 pixels.</li>

<strong>❗Warning</strong>

<blockquote>The snapshots of the avatar will be deprecated in the future and will no longer be returned as part of an avatar’s data. The recommended approach is to use</blockquote>

<code>AvatarTexture</code>

<blockquote>instead, see</blockquote>

<blockquote>.</blockquote>

<h4>Data from current player</h4>

<p>To obtain information from the current player that’s running the scene, use</p>

<code>getUserData()</code>

<p>.</p>

<p>The example below imports the</p>

<code>~system/UserIdentity</code>

<p>namespace and runs</p>

<code>getUserData()</code>

<p>.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getUserData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h4>Data from nearby players</h4>

<p>You can obtain data from other players that are nearby, by calling</p>

<code>getPlayerData()</code>

<p>, passing the id of a Decentraland account.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getPlayerData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getPlayerData()</code>

<p>can only fetch data from players who are currently nearby. They don’t have to be necessarily standing in the same scene, but in visual range, that’s because this information is being fetched from the local engine that’s rendering these avatars. To try this out in preview, open a second tab and log in with a different account.</p>

<strong>📔 Note</strong>

<blockquote>: User IDs must always be lowercase. If copying a wallet address, make sure all the characters are set to lowercase.</blockquote>

<p>To know what players are being rendered in the surroundings, use</p>

<code>getConnectedPlayers()</code>

<p>. This function returns an array with the ids of all the players that are currently being rendered, which are all eligible to call with</p>

<code>getPlayerData()</code>

<p>. You can pair this with listening for new players connecting and disconnecting by using</p>

<code>onPlayerConnectedObservable</code>

<p>and</p>

<code>onPlayerDisconnectedObservable</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>will be deprecated on future versions of the SDK.</blockquote>

<p>As an alternative, you can use</p>

<code>getPlayersInScene()</code>

<p>to only fetch the players that are standing within the scene boundaries and also being rendered. You can pair this with listening to new players entering and leaving the scene by using</p>

<code>onEnterSceneObservable</code>

<p>and</p>

<code>onLeaveSceneObservable</code>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more about</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>in</blockquote>

<blockquote>and about about</blockquote>

<code>onEnterSceneObservable</code>

<blockquote>and</blockquote>

<code>onLeaveSceneObservable</code>

<blockquote>in</blockquote>

<blockquote>.</blockquote>

<p>Listen for events when players connect and disconnect

As more players connect and disconnect, you can pic</p>

<h4>Data from any player</h4>

<p>To obtain information from any player, make a</p>

<p>to the content servers. This returns the same information as the</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>functions, detailed at the start of the section.</p>

<p>This information is exposed in the following URL, appending the player’s user id to the url parameter.</p>

<code>https://peer.decentraland.org/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<p>Unlike</p>

<code>getPlayerData()</code>

<p>, this option is not limited to just the players who are currently being rendered in the surroundings. With this approach you can fetch data from any player that has logged onto the servers in the past.</p>

<p>If you know which server the player you want to query is connected to, you can get more up-to-date data by sending your requests to that specific server. For example, if the player changes clothes, this information will be available instantly in the player’s server, but will likely take a couple of minutes to propagate to the</p>

<code>peer.decentraland.org</code>

<p>server.</p>

<code>https://<player server>/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: You can obtain the current player’s server by fetching</blockquote>

<code>getRealm().domain</code>

<blockquote>.</blockquote>

<p>This example combines</p>

<code>getUserData()</code>

<p>and</p>

<code>getRealm()</code>

<p>to obtain the player’s data directly from the server that the player is on:</p>

<h2>Get Portable Experiences</h2>

<p>Portable experiences are essentially scenes that are not constrained to parcels of land. Players can carry these with them anywhere they go in Decentraland, adding a new layer of content over the world. Smart Wearables are examples of portable experiences. You may want to know if a player is wearing one of these, since a smart wearable may enable players to have abilities that could be considered cheating in a competitive game. For example, in a platform game, a player that wears a jetpack has a very unfair advantage over others.</p>

<p>As a scene creator, you may want to limit what players wearing portable experiences can do in your scene. Use</p>

<code>getPortableExperiencesLoaded()</code>

<p>to check if the player has any portable experiences currently activated.</p>

<code>getPortableExperiencesLoaded()</code>

<p>returns an array of objects, each of these objects includes an</p>

<code>id</code>

<p>attribute. In the case of wearables, the id is the wearable’s URN.</p>

<h2>Get detailed info about a player’s wearables</h2>

<p>The</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>return only a list of wearable ids, without information about each wearable. If instead of individual wearables you want to check for any wearable of a specific category (eg: hats), or any wearable of a specific rarity (eg: Mythic), then you’ll need to fetch more detailed information about the player’s wearables.</p>

<p>Make a</p>

<p>to the following URL, to obtain a full updated list of all wearables that are currently usable, with details about each.</p>

<code>${playerRealm.realmInfo.baseUrl}/lambdas/collections/wearables-by-owner/${userData.userId}?includeDefinitions</code>

<strong>📔 Note</strong>

<blockquote>: To construct this URL, you must obtain the realm (likely with with</blockquote>

<code>getRealm()</code>

<blockquote>) and the player’s id (likely with</blockquote>

<code>getUserData()</code>

<blockquote>)</blockquote>

<p>This feature could be used together with fetching info about the player, to for example only allow players to enter a place if they are wearing any wearable from the halloween collection, or any wearable that is of</p>

<em>legendary</em>

<p>rarity.</p>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<h2>Check the player’s camera mode</h2>

<p>Players can either be using a 1st or 3rd person camera when exploring Decentraland. Check which of these the player is using by checking the value</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>entity.</p>

<p>The camera mode uses a value from the</p>

<code>CameraType</code>

<p>enum. The following values are possible:</p>

<code>CameraType.CT_FIRST_PERSON</code>

<code>CameraType.CT_THIRD_PERSON</code>

<p>The</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to change camera mode through this.</p>

<strong>💡 Tip</strong>

<blockquote>: To change the player’s camera mode, use a</blockquote>

<blockquote>.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when in 3rd person.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Check if the player has the cursor locked</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>Check the</p>

<code>PointerLock</code>

<p>component of the scene’s</p>

<p>to find out what the current cursor mode is.</p>

<p>The</p>

<code>PointerLock</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to lock or unlock the cursor.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#get-portable-experiences

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/materials/#avatar-portraits

<title>Materials via code | Decentraland Documentation</title>

<strong>Materials via code</strong>

<h1>Materials via code</h1>

<h2>Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by adding a</p>

<code>Material</code>

<p>component. This component has several fields that allow you to configure the properties of the material, add a texture, etc.</p>

<p>You can’t add material components to</p>

<em>glTF</em>

<p>models.</p>

<em>glTF</em>

<p>models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See</p>

<p>for more details.</p>

<p>There are different types of supported materials:</p>

<li>PBR (Physically Based Rendering): The most common kind of material in Decentraland. It supports plain colors or textures, and different properties like metallic, emissive, transparency, etc. Read more about</li>

<li>.</li>

<li>Basic materials: They don’t respond to lights and shadows, which makes them ideal for displaying billboard images.</li>

<h2>Add a material</h2>

<p>The following example creates a PBR material and sets some of its fields to give it a red color and metallic properties. This material is added to an entity that also has a box shape, so it will color the box with this material.</p>

<p>To change the material of an entity that already has a</p>

<code>Material</code>

<p>component, run</p>

<code>Material.setPbrMaterial()</code>

<p>or any of the other helper functions and it will overwrite the original material. There’s no need to remove the original</p>

<code>Material</code>

<p>or to use the advanced syntax.</p>

<strong>📔 Note</strong>

<p>: The</p>

<code>Material</code>

<p>component must be imported via</p>

<code>import { Material } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Material colors</h2>

<p>Give a material a plain color. In a PBR Material, you set the</p>

<code>albedoColor</code>

<p>field. Albedo colors respond to light and can include shades on them.</p>

<p>Color values are of type</p>

<code>Color4</code>

<p>, composed of</p>

<em>r</em>

<p>,</p>

<em>g</em>

<p>and</p>

<em>b</em>

<p>values (red, green, and blue). Each of these takes values between 0 and 1. By setting different values for these, you can compose any visible color. For black, set all three to 0. For white, set all to 1.</p>

<strong>📔 Note</strong>

<blockquote>: If you set any color in</blockquote>

<code>albedoColor</code>

<blockquote>to a value higher than</blockquote>

<em>1</em>

<blockquote>, it will appear as</blockquote>

<em>emissive</em>

<blockquote>, with more intensity the higher the value. So for example,</blockquote>

<code>{r: 15, g: 0, b: 0}</code>

<blockquote>produces a very bright red glow.</blockquote>

<p>See</p>

<p>for more details on how to set colors.</p>

<p>You can also edit the following fields in a PBR Material to fine-tune how its color is perceived:</p>

<em>emissiveColor</em>

<li>: The color emitted from the material.</li>

<em>reflectivityColor</em>

<li>: AKA</li>

<em>Specular Color</em>

<li>in other nomenclature.</li>

<p>To create a plain color material that is not affected by light and shadows in the environment, create a basic material instead of a PBR material.</p>

<h2>Using textures</h2>

<p>Set an image file as a texture on a material by setting the</p>

<code>texture</code>

<p>parameter.</p>

<p>In the example above, the image for the material is located in a</p>

<code>materials</code>

<p>folder, which is located at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<blockquote>: We recommend keeping your texture image files separate in a</blockquote>

<code>/materials</code>

<blockquote>folder inside your scene.</blockquote>

<p>While creating a texture, you can also pass additional parameters:</p>

<code>filterMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered. This takes a value from the</li>

<code>TextureFilterMode</code>

<li>enum. See</li>

<li>.</li>

<code>wrapMode</code>

<li>: Determines how a texture is tiled onto an object. This takes a value from the</li>

<code>TextureWrapMode</code>

<li>enum. See</li>

<li>.</li>

<p>To create a texture that is not affected by light and shadows in the environment, create a basic material instead of a PBR material.</p>

<h4>Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<p>The URL must start with</p>

<code>https</code>

<p>,</p>

<code>http</code>

<p>URLs aren’t supported. The site where the image is hosted should also have</p>

<p>that permit externally accessing it.</p>

<h4>Multi-layered textures</h4>

<p>You can use several image files as layers to compose more realistic textures, for example including a</p>

<code>bumpTexture</code>

<p>and a</p>

<code>emissiveTexture</code>

<p>.</p>

<h4>Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure</p>

<em>uv</em>

<p>properties on the</p>

<p>.</p>

<p>You set</p>

<em>u</em>

<p>and</p>

<em>v</em>

<p>coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more</p>

<em>uv</em>

<p>coordinates need to be defined on the texture, a plane for example needs to have 8</p>

<em>uv</em>

<p>points defined, 4 for each of its two faces.</p>

<p>The following example includes a function that simplifies the setting of uvs. The</p>

<code>setUVs</code>

<p>function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<p>For setting the UVs for a</p>

<code>box</code>

<p>mesh shape, the same structure applies. Each of the 6 faces of the cube takes 4 pairs of coordinates, one for each corner. All of these 48 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The</p>

<code>texture</code>

<p>object lets you configure the wrapping mode by setting the</p>

<code>wrapMode</code>

<p>field. This property takes its values from the</p>

<code>TextureWrapMode</code>

<p>enum, which allows for the following values:</p>

<code>TextureWrapMode.TWM_CLAMP</code>

<li>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>

<code>TextureWrapMode.TWM_REPEAT</code>

<li>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>

<code>TextureWrapMode.TWM_MIRROR</code>

<li>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>

<p>The example above sets the wrapping mode to</p>

<code>TWM_MIRROR</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Uv properties are currently only available on</blockquote>

<code>plane</code>

<blockquote>and on</blockquote>

<code>box</code>

<blockquote>shapes.</blockquote>

<h4>Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various</p>

<p>algorithms that exist to compensate for this in different ways.</p>

<p>The</p>

<code>Material</code>

<p>object uses the</p>

<em>bilinear</em>

<p>algorithm by default, but it lets you configure it to use the</p>

<em>nearest neighbor</em>

<p>or</p>

<em>trilinear</em>

<p>algorithms instead by setting the</p>

<code>samplingMode</code>

<p>property of the texture. This takes a value from the</p>

<code>TextureFilterMode</code>

<p>enum:</p>

<code>TextureFilterMode.TFM_POINT</code>

<li>: Uses a “nearest neighbor” algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</li>

<code>TextureFilterMode.TFM_BILINEAR</code>

<li>: Uses a bilinear algorithm to estimate the color of each pixel.</li>

<code>TextureFilterMode.TFM_TRILINEAR</code>

<li>: Uses a trilinear algorithm to estimate the color of each pixel.</li>

<h2>Avatar Portraits</h2>

<p>To display a thumbnail image of any player, use</p>

<code>Material.Texture.Avatar</code>

<p>when setting the texture of your material, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<p>You can fetch the portrait of any Decentraland player, even if they’re not currently connected, and even if they don’t have a claimed Decentraland name.</p>

<p>The following properties are supported within the object you pass as an argument:</p>

<code>userId</code>

<li>: ID of the user who’s profile you want to display</li>

<code>filterMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered. This takes a value from the</li>

<code>TextureFilterMode</code>

<li>enum. See</li>

<li>.</li>

<code>wrapMode</code>

<li>: Determines how a texture is tiled onto an object. This takes a value from the</li>

<code>TextureWrapMode</code>

<li>enum. See</li>

<li>.</li>

<h2>Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a</p>

<code>Color4</code>

<p>, and set the 4th value to something between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. The closer to</p>

<em>1</em>

<p>, the more opaque it will be.</p>

<p>To make a material with a texture only transparent in regions of the texture:</p>

<p>Set an image in</p>

<code>alphaTexture</code>

<p>.</p>

<p>Note: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</p>

<p>Optionally set the texture normally, and set the</p>

<code>transparencyMode</code>

<p>to field.</p>

<p>The</p>

<code>transparencyMode</code>

<p>takes its value from the</p>

<code>MaterialTransparencyMode</code>

<p>enum, that can have the following values:</p>

<code>MaterialTransparencyMode.MTM_OPAQUE</code>

<li>: No transparency at all</li>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST</code>

<li>: Each pixel is either completely opaque or completely transparent, based on a threshold.</li>

<code>MaterialTransparencyMode.MTM_ALPHA_BLEND</code>

<li>: Intermediate values are possible based on the value of each pixel.</li>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST_AND_ALPHA_BLEND</code>

<li>: Uses a combination of both methods.</li>

<code>MaterialTransparencyMode.MTM_AUTO</code>

<li>: Determines the method based on the provided texture.</li>

<p>If you set the</p>

<code>transparencyMode</code>

<p>to</p>

<code>MaterialTransparencyMode.MTM_ALPHA_TEST</code>

<p>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the</p>

<code>alphaTest</code>

<p>property between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. By default its value is</p>

<em>0.5</em>

<p>.</p>

<h2>Advanced syntax</h2>

<p>The complete syntax for creating a</p>

<code>Materials</code>

<p>component, without any helpers to simplify it, looks like this:</p>

<p>This is how the base protocol interprets Materials components. The helper functions abstract away from this and expose a friendlier syntax, but behind the scenes they output this syntax.</p>

<p>The</p>

<code>$case</code>

<p>field allows you to specify one of the allowed types. Each type supports a different set of parameters. In the example above, the</p>

<code>box</code>

<p>type supports a</p>

<code>uvs</code>

<p>field.</p>

<p>The supported values for</p>

<code>$case</code>

<p>are the following:</p>

<code>texture</code>

<code>avatarTexture</code>

<p>Depending on the value of</p>

<code>$case</code>

<p>, it’s valid to define the object for the corresponding shape, passing any relevant properties.</p>

<p>To add a</p>

<code>Material</code>

<p>component to an entity that potentially already has an instance of this component, use</p>

<code>Material.createOrReplace()</code>

<p>. The helper functions like</p>

<code>MeshRenderer.setPbrMaterial()</code>

<p>handle overwriting existing instances of the component, but running</p>

<code>Material.create()</code>

<p>on an entity that already has this component returns an error.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#get-portable-experiences

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/event-listeners/#player-connects-or-disconnects

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Get the full list of currently connected players from</p>

<code>getConnectedPlayers</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>events are deprecated on SDK 7.x. Instead, track the list of connected players, from</blockquote>

<code>getConnectedPlayers()</code>

<blockquote>.</blockquote>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<p>The following system regularly checks the player’s camera mode:</p>

<p>See</p>

<p>.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<strong>📔 Note</strong>

<blockquote>: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerExpressionObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerClickedObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<strong>📔 Note</strong>

<blockquote>: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</blockquote>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<strong>💡 Tip</strong>

<blockquote>: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</blockquote>

<blockquote>.</blockquote>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPointerLockedStateChange</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onProfileChanged</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<p>When this event is triggered, you can then use the</p>

<p>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</p>

<code>getUserData()</code>

<p>to ensure that the version this function returns is up to date.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onSceneReadyObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onRealmChangedObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on an</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/event-listeners/#player-connects-or-disconnects

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#check-the-players-camera-mode

<title>Player data | Decentraland Documentation</title>

<strong>Player data</strong>

<h1>Player data</h1>

<h2>Track player position and rotation</h2>

<p>Use the</p>

<code>PlayerEntity</code>

<p>and the</p>

<code>CameraEntity</code>

<p>to know the player’s position and rotation, by checking their</p>

<code>Transform</code>

<p>components.</p>

<strong>PlayerEntity position</strong>

<li>: The avatar’s position, at chest height. Approximately at 0.88 cm above the ground.</li>

<strong>PlayerEntity rotation</strong>

<li>: The direction in which the avatar is facing, expressed as a quaternion.</li>

<strong>CameraEntity position</strong>

<li>:</li>

<li>In 1st person: Equal to the avatar’s position, but at eye-level. Approximately at 1.75 cm above the ground.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<strong>PlayerEntity rotation</strong>

<li>:</li>

<li>In 1st person: Similar to the direction in which the avatar is facing, expressed as a quaternion. May be rounded slightly differently from the player’s rotation.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<p>The</p>

<code>Camera</code>

<p>object exposes information about the player’s point of view in your scene.</p>

<code>Camera.instance.position</code>

<li>returns a 3D vector with the coordinates of the avatar’s center, relative to the scene. When the player is on the ground, the height of this point is approximately</li>

<em>1.177</em>

<li>m. In 3rd person camera mode, this value refers also to the avatar’s center, not to the position of the 3rd person camera.</li>

<code>Camera.instance.feetPosition</code>

<li>returns a 3D vector with the coordinates of the player’s feet relative to the scene. When the player is at ground level, the height is nearly 0.155.</li>

<code>Camera.instance.worldPosition</code>

<li>returns a 3D vector with the coordinates of the player’s center, relative to the whole of Genesis City. For example, if the scene is in coordinates</li>

<em>100,-100</em>

<li>, and the player is standing on the bottom-left corner of that scene, the player’s world position will be about</li>

<em>1600, 1.177, -1600</em>

<code>Camera.instance.rotation</code>

<li>returns a quaternion with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<code>Camera.instance.rotation.eulerAngles</code>

<li>returns a Vector3 with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<p>The example above uses the player’s rotation to set that of a cube in the scene.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.PlayerEntity</code>

<p>or the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entities are not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to these entities in a system, they will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Get player data</h2>

<p>The following data can be fetched from a player:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The player’s user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.</li>

<code>hasConnectedWeb3</code>

<li>:</li>

<em>(boolean)</em>

<li>Indicates if the player has a public key.</li>

<em>True</em>

<li>if the player has one.</li>

<code>publicKey</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player’s Ethereum wallet. If the player logs in as a guest, with no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>avatar</code>

<li>: A nested object with data about the player’s appearance.</li>

<code>version</code>

<li>:</li>

<em>(number)</em>

<li>A version number that increases by one every time the player changes any of their settings. Use this if you encounter conflicting data, to know what version is more recent.</li>

<strong>📔 Note</strong>

<blockquote>: For any Ethereum transactions with the player, always use the</blockquote>

<code>publicKey</code>

<blockquote>field, instead of the</blockquote>

<code>userId</code>

<blockquote>, to avoid dealing with non-existing wallets.</blockquote>

<p>The</p>

<code>avatar</code>

<p>object has the following nested information:</p>

<code>wearables</code>

<p>:</p>

<code>WearableId[]</code>

<p>An array of identifiers for each of the wearables that the player is currently wearing. For example</p>

<code>urn:decentraland:off-chain:base-avatars:green_hoodie</code>

<p>. All wearables have a similar identifier, even if they’re NFTs.</p>

<code>bodyShape</code>

<p>: An identifier for the avatar’s general body shape. Either</p>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<p>for female or</p>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<p>for male.</p>

<code>skinColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s skin color.</p>

<code>hairColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s hair color.</p>

<code>eyeColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s eye color.</p>

<code>snapshots</code>

<p>: A nested object with base64 representations of .jpg images of the player in various resolutions.</p>

<code>face256</code>

<li>:</li>

<em>string</em>

<li>The player’s face as a 256x256 pixel image.</li>

<code>body</code>

<li>:</li>

<em>string</em>

<li>The full resolution image of the player standing straight, with 512x1024 pixels.</li>

<strong>❗Warning</strong>

<blockquote>The snapshots of the avatar will be deprecated in the future and will no longer be returned as part of an avatar’s data. The recommended approach is to use</blockquote>

<code>AvatarTexture</code>

<blockquote>instead, see</blockquote>

<blockquote>.</blockquote>

<h4>Data from current player</h4>

<p>To obtain information from the current player that’s running the scene, use</p>

<code>getUserData()</code>

<p>.</p>

<p>The example below imports the</p>

<code>~system/UserIdentity</code>

<p>namespace and runs</p>

<code>getUserData()</code>

<p>.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getUserData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h4>Data from nearby players</h4>

<p>You can obtain data from other players that are nearby, by calling</p>

<code>getPlayerData()</code>

<p>, passing the id of a Decentraland account.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getPlayerData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getPlayerData()</code>

<p>can only fetch data from players who are currently nearby. They don’t have to be necessarily standing in the same scene, but in visual range, that’s because this information is being fetched from the local engine that’s rendering these avatars. To try this out in preview, open a second tab and log in with a different account.</p>

<strong>📔 Note</strong>

<blockquote>: User IDs must always be lowercase. If copying a wallet address, make sure all the characters are set to lowercase.</blockquote>

<p>To know what players are being rendered in the surroundings, use</p>

<code>getConnectedPlayers()</code>

<p>. This function returns an array with the ids of all the players that are currently being rendered, which are all eligible to call with</p>

<code>getPlayerData()</code>

<p>. You can pair this with listening for new players connecting and disconnecting by using</p>

<code>onPlayerConnectedObservable</code>

<p>and</p>

<code>onPlayerDisconnectedObservable</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>will be deprecated on future versions of the SDK.</blockquote>

<p>As an alternative, you can use</p>

<code>getPlayersInScene()</code>

<p>to only fetch the players that are standing within the scene boundaries and also being rendered. You can pair this with listening to new players entering and leaving the scene by using</p>

<code>onEnterSceneObservable</code>

<p>and</p>

<code>onLeaveSceneObservable</code>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more about</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>in</blockquote>

<blockquote>and about about</blockquote>

<code>onEnterSceneObservable</code>

<blockquote>and</blockquote>

<code>onLeaveSceneObservable</code>

<blockquote>in</blockquote>

<blockquote>.</blockquote>

<p>Listen for events when players connect and disconnect

As more players connect and disconnect, you can pic</p>

<h4>Data from any player</h4>

<p>To obtain information from any player, make a</p>

<p>to the content servers. This returns the same information as the</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>functions, detailed at the start of the section.</p>

<p>This information is exposed in the following URL, appending the player’s user id to the url parameter.</p>

<code>https://peer.decentraland.org/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<p>Unlike</p>

<code>getPlayerData()</code>

<p>, this option is not limited to just the players who are currently being rendered in the surroundings. With this approach you can fetch data from any player that has logged onto the servers in the past.</p>

<p>If you know which server the player you want to query is connected to, you can get more up-to-date data by sending your requests to that specific server. For example, if the player changes clothes, this information will be available instantly in the player’s server, but will likely take a couple of minutes to propagate to the</p>

<code>peer.decentraland.org</code>

<p>server.</p>

<code>https://<player server>/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: You can obtain the current player’s server by fetching</blockquote>

<code>getRealm().domain</code>

<blockquote>.</blockquote>

<p>This example combines</p>

<code>getUserData()</code>

<p>and</p>

<code>getRealm()</code>

<p>to obtain the player’s data directly from the server that the player is on:</p>

<h2>Get Portable Experiences</h2>

<p>Portable experiences are essentially scenes that are not constrained to parcels of land. Players can carry these with them anywhere they go in Decentraland, adding a new layer of content over the world. Smart Wearables are examples of portable experiences. You may want to know if a player is wearing one of these, since a smart wearable may enable players to have abilities that could be considered cheating in a competitive game. For example, in a platform game, a player that wears a jetpack has a very unfair advantage over others.</p>

<p>As a scene creator, you may want to limit what players wearing portable experiences can do in your scene. Use</p>

<code>getPortableExperiencesLoaded()</code>

<p>to check if the player has any portable experiences currently activated.</p>

<code>getPortableExperiencesLoaded()</code>

<p>returns an array of objects, each of these objects includes an</p>

<code>id</code>

<p>attribute. In the case of wearables, the id is the wearable’s URN.</p>

<h2>Get detailed info about a player’s wearables</h2>

<p>The</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>return only a list of wearable ids, without information about each wearable. If instead of individual wearables you want to check for any wearable of a specific category (eg: hats), or any wearable of a specific rarity (eg: Mythic), then you’ll need to fetch more detailed information about the player’s wearables.</p>

<p>Make a</p>

<p>to the following URL, to obtain a full updated list of all wearables that are currently usable, with details about each.</p>

<code>${playerRealm.realmInfo.baseUrl}/lambdas/collections/wearables-by-owner/${userData.userId}?includeDefinitions</code>

<strong>📔 Note</strong>

<blockquote>: To construct this URL, you must obtain the realm (likely with with</blockquote>

<code>getRealm()</code>

<blockquote>) and the player’s id (likely with</blockquote>

<code>getUserData()</code>

<blockquote>)</blockquote>

<p>This feature could be used together with fetching info about the player, to for example only allow players to enter a place if they are wearing any wearable from the halloween collection, or any wearable that is of</p>

<em>legendary</em>

<p>rarity.</p>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<h2>Check the player’s camera mode</h2>

<p>Players can either be using a 1st or 3rd person camera when exploring Decentraland. Check which of these the player is using by checking the value</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>entity.</p>

<p>The camera mode uses a value from the</p>

<code>CameraType</code>

<p>enum. The following values are possible:</p>

<code>CameraType.CT_FIRST_PERSON</code>

<code>CameraType.CT_THIRD_PERSON</code>

<p>The</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to change camera mode through this.</p>

<strong>💡 Tip</strong>

<blockquote>: To change the player’s camera mode, use a</blockquote>

<blockquote>.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when in 3rd person.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Check if the player has the cursor locked</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>Check the</p>

<code>PointerLock</code>

<p>component of the scene’s</p>

<p>to find out what the current cursor mode is.</p>

<p>The</p>

<code>PointerLock</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to lock or unlock the cursor.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#check-the-players-camera-mode

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/event-listeners/#player-enters-or-leaves-scene

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Get the full list of currently connected players from</p>

<code>getConnectedPlayers</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>events are deprecated on SDK 7.x. Instead, track the list of connected players, from</blockquote>

<code>getConnectedPlayers()</code>

<blockquote>.</blockquote>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<p>The following system regularly checks the player’s camera mode:</p>

<p>See</p>

<p>.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<strong>📔 Note</strong>

<blockquote>: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerExpressionObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerClickedObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<strong>📔 Note</strong>

<blockquote>: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</blockquote>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<strong>💡 Tip</strong>

<blockquote>: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</blockquote>

<blockquote>.</blockquote>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPointerLockedStateChange</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onProfileChanged</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<p>When this event is triggered, you can then use the</p>

<p>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</p>

<code>getUserData()</code>

<p>to ensure that the version this function returns is up to date.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onSceneReadyObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onRealmChangedObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on an</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/event-listeners/#player-enters-or-leaves-scene

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/avatar-modifiers/

<title>Modifier Areas | Decentraland Documentation</title>

<strong>Modifier Areas</strong>

<h1>Modifier Areas</h1>

<h2>Avatar Modifiers</h2>

<p>Avatars behave and look consistently throughout Decentraland as they walk across scenes. However, you can add an</p>

<code>AvatarModifierArea</code>

<p>to a region of your scene to affect how player avatars behave when they enter that area.</p>

<strong>❗Warning</strong>

<blockquote>Please limit the amount of</blockquote>

<code>AvatarModifierAreas</code>

<blockquote>you use in your scene to just a couple. If you use too many of them, it may have a significant impact on performance.</blockquote>

<h4>Placing Avatar Modifier Areas</h4>

<p>Add an entity with an</p>

<code>AvatarModifierArea</code>

<p>component and position this entity by using a</p>

<code>Transform</code>

<p>component.</p>

<p>When creating an</p>

<code>AvatarModifierArea</code>

<p>component, you must provide the following:</p>

<code>area</code>

<li>: Size of the modifier area</li>

<code>modifiers</code>

<li>: An array listing the modifiers to implement in the area. This property uses values from the</li>

<code>AvatarModifierType</code>

<li>enum.</li>

<p>The supported modifiers are:</p>

<code>AvatarModifierType.AMT_HIDE_AVATARS</code>

<code>AvatarModifierType.AMT_DISABLE_PASSPORTS</code>

<p>All the effects of an</p>

<code>AvatarModifierArea</code>

<p>only take place within the region of their area. Players return to normal when they walk out of the area.</p>

<p>An</p>

<code>AvatarModifierArea</code>

<p>affects only players that are inside the area, entering the area doesn’t affect how other players that are outside the area are perceived.</p>

<p>The effects of an</p>

<code>AvatarModifierArea</code>

<p>are calculated locally for each player. You can have an</p>

<code>AvatarModifierArea</code>

<p>that is only present in the scene for some of the players and not for others. For example, you could make a “marco polo” game, where only one player in the scene has a modifier area that hides all of the other players. All the other players that don’t have this modifier area in their local version of the scene are able to see each other normally.

If the area hides avatars, then the players that don’t have the area in their local version of the scene will see all avatars normally. Even those that experience themselves as hidden. Players that do have the area will experience themselves and all other avatars as affected by the area when they enter it.</p>

<strong>📔 Note</strong>

<blockquote>: Avatar modifier areas are affected by the</blockquote>

<em>position</em>

<blockquote>and</blockquote>

<em>rotation</em>

<blockquote>of the Transform component of their host entity, but they’re not affected by the</blockquote>

<em>scale</em>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<p>: The</p>

<code>AvatarModifierArea</code>

<p>component must be imported via</p>

<code>import { AvatarModifierArea } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h4>Hide avatars</h4>

<p>When a player walks into an</p>

<code>AvatarModifierArea</code>

<p>that has the</p>

<code>AvatarModifierType.AMT_HIDE_AVATARS</code>

<p>modifier, the player’s avatar stops being rendered. This applies both for the player in 3rd person view, and for when other players walk into the area.</p>

<p>This allows you to replace the default Decentraland avatar with any custom avatar you might want to show in your scene. Note that if you want to see other players with custom avatars, you should handle the syncing of player positions yourself.</p>

<h4>Disable Passport Popup</h4>

<p>When a player walks into an</p>

<code>AvatarModifierArea</code>

<p>that has the</p>

<code>AvatarModifierType.AMT_DISABLE_PASSPORTS</code>

<p>modifier, clicking on them no longer opens up the passport UI that shows the player bio, inventory, etc.</p>

<p>This is especially useful in games where accidentally opening this UI could interrupt the flow of a game, for example in a multiplayer shooter game.</p>

<h2>Camera modifiers</h2>

<p>Players are normally free to switch between first and third person camera by pressing V on the keyboard. Use a</p>

<code>CameraModeArea</code>

<p>to force the camera mode to either 1st or 3rd person for all players that stand within a specific area in your scene.</p>

<p>If a player’s current camera mode doesn’t match that of the</p>

<code>CameraModeArea</code>

<p>, they will transition to that camera mode. A toast appears onscreen to clarify that this change is due to the scene. While inside, players can’t change their camera mode. When a player leaves the</p>

<code>CameraModeArea</code>

<p>, their camera mode is restored to what they had before entering.</p>

<p>Use</p>

<code>CameraModeArea</code>

<p>in regions where players would have a significantly better experience by using a specific camera mode. For example, first person is ideal if the player needs to click on small object, or third person may be useful for players to notice some entity that your scene has attached over their head. Don’t assume players know how to switch camera modes, many first-time players might not know they have the option, or not remember the key to do it.</p>

<strong>📔 Note</strong>

<blockquote>: Camera modifier areas are affected by the</blockquote>

<em>position</em>

<blockquote>and</blockquote>

<em>rotation</em>

<blockquote>of the Transform component of their host entity, but they’re not affected by the</blockquote>

<em>scale</em>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: If you overlap multiple camera modifier areas, the last one to be instanced by your scene’s code will take priority over the others.</blockquote>

<p>When creating an</p>

<code>CameraModeArea</code>

<p>component, you must provide the following:</p>

<code>area</code>

<li>: Size of the modifier area</li>

<code>cameraMode</code>

<li>: Which camera mode to force in this area, from the</li>

<code>CameraType</code>

<li>enum.</li>

<p>The supported camera modes are:</p>

<code>CameraType.CT_FIRST_PERSON</code>

<code>CameraType.CT_THIRD_PERSON</code>

<h2>Exclude Avatars</h2>

<p>You can exclude a list of players from being affected by a modifier area by adding their player Ids to an array in the</p>

<code>excludeIds</code>

<p>property of the modifier area.</p>

<p>This example hides all avatars in an area, except those of players with specific IDs. You could use this for example on a live event, to only show the event hosts on the stage, and hide any other players that jump onto the stage.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure the player IDs are all written with lower-case letters. Use</blockquote>

<code>.toLowerCase()</code>

<blockquote>if necessary.</blockquote>

<p>Modifier areas run locally on each player’s instance, the list of excluded IDs can be different for each player. In the example below, each player excludes their own ID from a modifier that hides avatars, so that they each view their own avatar and no others.</p>

<strong>❗Warning</strong>

<p>If the list of excluded IDs is going to be periodically changed (for example based on players entering or leaving an area), make sure that the list is kept in order. Perform a</p>

<code>.sort()</code>

<p>on the array, so that the list remains in the same order each time it’s passed. In that way, only the changes to the list are be computed. This can otherwise have a significant impact on the scene’s performance.</p>

<h2>Debug modifier areas</h2>

<p>It can be tough to know exactly what parts of the scene your modifier areas cover based on the code. Visual feedback helps a lot to confirm that they’re well placed.</p>

<p>To verify the positions of a</p>

<code>AvatarModifierArea</code>

<p>or a</p>

<code>CameraModeArea</code>

<p>, give the entity holding it a</p>

<code>MeshRenderer</code>

<p>component with a</p>

<code>box</code>

<p>shape, and set the scale to the same size as the</p>

<code>area</code>

<p>of the modifier area.</p>

<strong>📔 Note</strong>

<blockquote>: Modifier areas aren’t affected by the</blockquote>

<code>scale</code>

<blockquote>property of the transform, their size is based on their</blockquote>

<code>area</code>

<blockquote>property.</blockquote>

<p>To activate the effects of the modifier area, the player’s head or torso should enter the area. It won’t take effect if only the feet of the player are covered. Make sure the player can’t easily evade the area by jumping.</p>

<strong>📔 Note</strong>

<blockquote>: The full area should fit inside the limits of your scene.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/event-listeners/#player-enters-or-leaves-scene

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#get-player-data

<title>Player data | Decentraland Documentation</title>

<strong>Player data</strong>

<h1>Player data</h1>

<h2>Track player position and rotation</h2>

<p>Use the</p>

<code>PlayerEntity</code>

<p>and the</p>

<code>CameraEntity</code>

<p>to know the player’s position and rotation, by checking their</p>

<code>Transform</code>

<p>components.</p>

<strong>PlayerEntity position</strong>

<li>: The avatar’s position, at chest height. Approximately at 0.88 cm above the ground.</li>

<strong>PlayerEntity rotation</strong>

<li>: The direction in which the avatar is facing, expressed as a quaternion.</li>

<strong>CameraEntity position</strong>

<li>:</li>

<li>In 1st person: Equal to the avatar’s position, but at eye-level. Approximately at 1.75 cm above the ground.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<strong>PlayerEntity rotation</strong>

<li>:</li>

<li>In 1st person: Similar to the direction in which the avatar is facing, expressed as a quaternion. May be rounded slightly differently from the player’s rotation.</li>

<li>In 3rd person: May vary depending on camera movements.</li>

<p>The</p>

<code>Camera</code>

<p>object exposes information about the player’s point of view in your scene.</p>

<code>Camera.instance.position</code>

<li>returns a 3D vector with the coordinates of the avatar’s center, relative to the scene. When the player is on the ground, the height of this point is approximately</li>

<em>1.177</em>

<li>m. In 3rd person camera mode, this value refers also to the avatar’s center, not to the position of the 3rd person camera.</li>

<code>Camera.instance.feetPosition</code>

<li>returns a 3D vector with the coordinates of the player’s feet relative to the scene. When the player is at ground level, the height is nearly 0.155.</li>

<code>Camera.instance.worldPosition</code>

<li>returns a 3D vector with the coordinates of the player’s center, relative to the whole of Genesis City. For example, if the scene is in coordinates</li>

<em>100,-100</em>

<li>, and the player is standing on the bottom-left corner of that scene, the player’s world position will be about</li>

<em>1600, 1.177, -1600</em>

<code>Camera.instance.rotation</code>

<li>returns a quaternion with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<code>Camera.instance.rotation.eulerAngles</code>

<li>returns a Vector3 with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<p>The example above uses the player’s rotation to set that of a cube in the scene.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.PlayerEntity</code>

<p>or the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entities are not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to these entities in a system, they will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Get player data</h2>

<p>The following data can be fetched from a player:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The player’s user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.</li>

<code>hasConnectedWeb3</code>

<li>:</li>

<em>(boolean)</em>

<li>Indicates if the player has a public key.</li>

<em>True</em>

<li>if the player has one.</li>

<code>publicKey</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player’s Ethereum wallet. If the player logs in as a guest, with no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>avatar</code>

<li>: A nested object with data about the player’s appearance.</li>

<code>version</code>

<li>:</li>

<em>(number)</em>

<li>A version number that increases by one every time the player changes any of their settings. Use this if you encounter conflicting data, to know what version is more recent.</li>

<strong>📔 Note</strong>

<blockquote>: For any Ethereum transactions with the player, always use the</blockquote>

<code>publicKey</code>

<blockquote>field, instead of the</blockquote>

<code>userId</code>

<blockquote>, to avoid dealing with non-existing wallets.</blockquote>

<p>The</p>

<code>avatar</code>

<p>object has the following nested information:</p>

<code>wearables</code>

<p>:</p>

<code>WearableId[]</code>

<p>An array of identifiers for each of the wearables that the player is currently wearing. For example</p>

<code>urn:decentraland:off-chain:base-avatars:green_hoodie</code>

<p>. All wearables have a similar identifier, even if they’re NFTs.</p>

<code>bodyShape</code>

<p>: An identifier for the avatar’s general body shape. Either</p>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<p>for female or</p>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<p>for male.</p>

<code>skinColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s skin color.</p>

<code>hairColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s hair color.</p>

<code>eyeColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s eye color.</p>

<code>snapshots</code>

<p>: A nested object with base64 representations of .jpg images of the player in various resolutions.</p>

<code>face256</code>

<li>:</li>

<em>string</em>

<li>The player’s face as a 256x256 pixel image.</li>

<code>body</code>

<li>:</li>

<em>string</em>

<li>The full resolution image of the player standing straight, with 512x1024 pixels.</li>

<strong>❗Warning</strong>

<blockquote>The snapshots of the avatar will be deprecated in the future and will no longer be returned as part of an avatar’s data. The recommended approach is to use</blockquote>

<code>AvatarTexture</code>

<blockquote>instead, see</blockquote>

<blockquote>.</blockquote>

<h4>Data from current player</h4>

<p>To obtain information from the current player that’s running the scene, use</p>

<code>getUserData()</code>

<p>.</p>

<p>The example below imports the</p>

<code>~system/UserIdentity</code>

<p>namespace and runs</p>

<code>getUserData()</code>

<p>.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getUserData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h4>Data from nearby players</h4>

<p>You can obtain data from other players that are nearby, by calling</p>

<code>getPlayerData()</code>

<p>, passing the id of a Decentraland account.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getPlayerData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getPlayerData()</code>

<p>can only fetch data from players who are currently nearby. They don’t have to be necessarily standing in the same scene, but in visual range, that’s because this information is being fetched from the local engine that’s rendering these avatars. To try this out in preview, open a second tab and log in with a different account.</p>

<strong>📔 Note</strong>

<blockquote>: User IDs must always be lowercase. If copying a wallet address, make sure all the characters are set to lowercase.</blockquote>

<p>To know what players are being rendered in the surroundings, use</p>

<code>getConnectedPlayers()</code>

<p>. This function returns an array with the ids of all the players that are currently being rendered, which are all eligible to call with</p>

<code>getPlayerData()</code>

<p>. You can pair this with listening for new players connecting and disconnecting by using</p>

<code>onPlayerConnectedObservable</code>

<p>and</p>

<code>onPlayerDisconnectedObservable</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>will be deprecated on future versions of the SDK.</blockquote>

<p>As an alternative, you can use</p>

<code>getPlayersInScene()</code>

<p>to only fetch the players that are standing within the scene boundaries and also being rendered. You can pair this with listening to new players entering and leaving the scene by using</p>

<code>onEnterSceneObservable</code>

<p>and</p>

<code>onLeaveSceneObservable</code>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more about</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>in</blockquote>

<blockquote>and about about</blockquote>

<code>onEnterSceneObservable</code>

<blockquote>and</blockquote>

<code>onLeaveSceneObservable</code>

<blockquote>in</blockquote>

<blockquote>.</blockquote>

<p>Listen for events when players connect and disconnect

As more players connect and disconnect, you can pic</p>

<h4>Data from any player</h4>

<p>To obtain information from any player, make a</p>

<p>to the content servers. This returns the same information as the</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>functions, detailed at the start of the section.</p>

<p>This information is exposed in the following URL, appending the player’s user id to the url parameter.</p>

<code>https://peer.decentraland.org/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<p>Unlike</p>

<code>getPlayerData()</code>

<p>, this option is not limited to just the players who are currently being rendered in the surroundings. With this approach you can fetch data from any player that has logged onto the servers in the past.</p>

<p>If you know which server the player you want to query is connected to, you can get more up-to-date data by sending your requests to that specific server. For example, if the player changes clothes, this information will be available instantly in the player’s server, but will likely take a couple of minutes to propagate to the</p>

<code>peer.decentraland.org</code>

<p>server.</p>

<code>https://<player server>/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: You can obtain the current player’s server by fetching</blockquote>

<code>getRealm().domain</code>

<blockquote>.</blockquote>

<p>This example combines</p>

<code>getUserData()</code>

<p>and</p>

<code>getRealm()</code>

<p>to obtain the player’s data directly from the server that the player is on:</p>

<h2>Get Portable Experiences</h2>

<p>Portable experiences are essentially scenes that are not constrained to parcels of land. Players can carry these with them anywhere they go in Decentraland, adding a new layer of content over the world. Smart Wearables are examples of portable experiences. You may want to know if a player is wearing one of these, since a smart wearable may enable players to have abilities that could be considered cheating in a competitive game. For example, in a platform game, a player that wears a jetpack has a very unfair advantage over others.</p>

<p>As a scene creator, you may want to limit what players wearing portable experiences can do in your scene. Use</p>

<code>getPortableExperiencesLoaded()</code>

<p>to check if the player has any portable experiences currently activated.</p>

<code>getPortableExperiencesLoaded()</code>

<p>returns an array of objects, each of these objects includes an</p>

<code>id</code>

<p>attribute. In the case of wearables, the id is the wearable’s URN.</p>

<h2>Get detailed info about a player’s wearables</h2>

<p>The</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>return only a list of wearable ids, without information about each wearable. If instead of individual wearables you want to check for any wearable of a specific category (eg: hats), or any wearable of a specific rarity (eg: Mythic), then you’ll need to fetch more detailed information about the player’s wearables.</p>

<p>Make a</p>

<p>to the following URL, to obtain a full updated list of all wearables that are currently usable, with details about each.</p>

<code>${playerRealm.realmInfo.baseUrl}/lambdas/collections/wearables-by-owner/${userData.userId}?includeDefinitions</code>

<strong>📔 Note</strong>

<blockquote>: To construct this URL, you must obtain the realm (likely with with</blockquote>

<code>getRealm()</code>

<blockquote>) and the player’s id (likely with</blockquote>

<code>getUserData()</code>

<blockquote>)</blockquote>

<p>This feature could be used together with fetching info about the player, to for example only allow players to enter a place if they are wearing any wearable from the halloween collection, or any wearable that is of</p>

<em>legendary</em>

<p>rarity.</p>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<h2>Check the player’s camera mode</h2>

<p>Players can either be using a 1st or 3rd person camera when exploring Decentraland. Check which of these the player is using by checking the value</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>entity.</p>

<p>The camera mode uses a value from the</p>

<code>CameraType</code>

<p>enum. The following values are possible:</p>

<code>CameraType.CT_FIRST_PERSON</code>

<code>CameraType.CT_THIRD_PERSON</code>

<p>The</p>

<code>CameraMode</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to change camera mode through this.</p>

<strong>💡 Tip</strong>

<blockquote>: To change the player’s camera mode, use a</blockquote>

<blockquote>.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when in 3rd person.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

<h2>Check if the player has the cursor locked</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>Check the</p>

<code>PointerLock</code>

<p>component of the scene’s</p>

<p>to find out what the current cursor mode is.</p>

<p>The</p>

<code>PointerLock</code>

<p>component of the</p>

<code>engine.CameraEntity</code>

<p>is read-only, you can’t force the player to lock or unlock the cursor.</p>

<strong>📔 Note</strong>

<p>: Avoid referring to the</p>

<code>engine.CameraEntity</code>

<p>on the initial scene loading, because that can result in errors if the entity is not initialized yet. To avoid this problem, encapsulate the behavior in an async</p>

<code>executeTask</code>

<p>.</p>

<p>If you refer to this entity in a system, it will always be available, because the first execution of the system is called once the scene is already properly initialized.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#get-player-data

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/network-connections/#call-a-rest-api

<title>Network connections | Decentraland Documentation</title>

<strong>Network connections</strong>

<h1>Network connections</h1>

<p>Your scene can leverage external services that expose APIs, you can use this to obtain updated price data, weather data or any other kind of information exposed by an API.</p>

<p>You can also set up your own external server to aid your scene and serve to synchronize data between your players. This can either be done with a server that exposes a REST API, or with a server that uses WebSockets.</p>

<h2>Call a REST API</h2>

<p>Your scene’s code can send calls to a REST API to fetch data.</p>

<p>Since the server might take time to send its response, you must execute this command as an</p>

<p>, using</p>

<code>executeTask()</code>

<p>.</p>

<p>The fetch command can also include a second optional argument that bundles headers, HTTP method and HTTP body into a single object.</p>

<strong>url</strong>

<li>: Address to send the request</li>

<strong>init</strong>

<li>: A</li>

<code>FlatFetchInit</code>

<li>object that may contain:</li>

<strong>method</strong>

<li>: HTTP method to use (GET, POST, DELETE, etc)</li>

<strong>body</strong>

<li>: Contents of the request body. It must be sent as a stringified JSON object.</li>

<strong>headers</strong>

<li>: Additional headers to include in the request. Headers related to the signature are added automatically.</li>

<strong>redirect</strong>

<li>: Redirect strategy (‘follow’ | ’error’ | ‘manual’)</li>

<strong>responseBodyType</strong>

<li>: Specify if the body of the response is ’text’ or ‘json’</li>

<strong>timeout</strong>

<li>: How long to wait for a response before the request fails. By default 30000 milliseconds (30 seconds).</li>

<p>The fetch command returns a</p>

<code>response</code>

<p>object with the following data:</p>

<code>headers</code>

<p>: A</p>

<code>ReadOnlyHeaders</code>

<p>object. Call the</p>

<code>get()</code>

<p>method to obtain a specific header, or the</p>

<code>has()</code>

<p>method to check if a header is present.</p>

<code>ok</code>

<p>: Boolean</p>

<code>redirected</code>

<p>: Boolean</p>

<code>status</code>

<p>: Status code number</p>

<code>statusText</code>

<p>: Text for the status code</p>

<code>type</code>

<p>: Will have one of the following values:</p>

<em>basic</em>

<p>,</p>

<em>cors</em>

<p>,</p>

<em>default</em>

<p>,</p>

<em>error</em>

<p>,</p>

<em>opaque</em>

<p>,</p>

<em>opaqueredirect</em>

<code>url</code>

<p>: URL that was sent</p>

<code>json()</code>

<p>: Obtain the body in JSON format.</p>

<code>text()</code>

<p>: Obtain the body as text.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>json()</code>

<blockquote>and</blockquote>

<code>text()</code>

<blockquote>are mutually exclusive. If you obtain the body of the response in one of the two formats, you can no longer obtain the other from the</blockquote>

<code>response</code>

<blockquote>object.</blockquote>

<strong>📔 Note</strong>

<blockquote>: Each Decentraland scene is only permitted to perform one</blockquote>

<code>fetch</code>

<blockquote>command at a time. This has no effect on how the scene code must be structured, as requests are queued internally. If your scene requires sending multiple requests to different endpoints, keep in mind that each request is only sent when the previous one has been responded.</blockquote>

<h2>Signed requests</h2>

<p>You can employ an extra security measure to certify that a request is originating from a player session inside Decentraland. You can send your requests with an additional signature, that is signed using an ephemeral key that the Decentraland session generates for each player based on the player’s address. The server receiving the request can then verify that the signed message indeed matches an address that is currently active in-world.</p>

<p>These kinds of security measures are especially valuable when there may be an incentive for a player to abuse the system, to farm tokens or points in a game.</p>

<p>To send a signed request, all you need to do is use the</p>

<code>signedFetch()</code>

<p>function, in exactly the same way as you would use the</p>

<code>fetch()</code>

<p>function.</p>

<p>The request includes an additional series of headers, containing a signed message and a set of metadata to interpret that. The signed message consists of all the contents of the request encrypted using the player’s ephemeral key.</p>

<p>The</p>

<code>signedFetch()</code>

<p>differs from the</p>

<code>fetch()</code>

<p>function in that the response is a promise of a full http message, expressed as a</p>

<code>FlatFetchResponse</code>

<p>object. This includes the following properties:</p>

<code>body</code>

<code>headers</code>

<code>ok</code>

<code>status</code>

<code>statusText</code>

<p>By default,</p>

<strong>body</strong>

<p>is considered a string, which you can parse like in the example above. If the response body is in json format, you can specify that in the</p>

<code>responseBodyType</code>

<p>and then access that from the</p>

<code>json</code>

<p>property in the response.</p>

<h4>Validating a signed request</h4>

<p>To make make use of signed requests, the server receiving these should to validate that the signatures match the rest of the request, and that the timestamp that’s encoded within the signed message is current.</p>

<p>You can find a simple example of a server performing this task in the following example scene:</p>

<h2>Request timeout</h2>

<p>If an HTTP request takes too long to be responded, it fails so that other requests can be sent. For both</p>

<code>fetch()</code>

<p>and</p>

<code>signedFetch()</code>

<p>, the default timeout threshold is of 30 seconds, but you can assign a different value on each request by configuring the</p>

<code>timeout</code>

<p>property in any of the two functions. The value of</p>

<code>timeout</code>

<p>is expressed in milliseconds.</p>

<h2>Use WebSockets</h2>

<p>You can also send and obtain data from a WebSocket server, as long as this server uses a secured connection with</p>

<em>wss</em>

<p>.</p>

<p>The syntax to use WebSockets is no different from that implemented natively by JavaScript. See the documentation from</p>

<p>for details on how to catch and send messages over WebSockets.</p>

<strong>💡 Tip</strong>

<blockquote>: One library that simplifies the use of websocket connections and has been proven to work very well with Decentraland is</blockquote>

<blockquote>. It builds a layer of abstraction on top of the websocket connections that makes reacting to changes and storing a consistent game state remotely in the server super easy. You can see it in action in</blockquote>

<blockquote>. Several other websocket libraries aren’t compatible with the Decentraland SDK.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#get-player-data

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/avatar-modifiers/#camera-modifiers

<title>Modifier Areas | Decentraland Documentation</title>

<strong>Modifier Areas</strong>

<h1>Modifier Areas</h1>

<h2>Avatar Modifiers</h2>

<p>Avatars behave and look consistently throughout Decentraland as they walk across scenes. However, you can add an</p>

<code>AvatarModifierArea</code>

<p>to a region of your scene to affect how player avatars behave when they enter that area.</p>

<strong>❗Warning</strong>

<blockquote>Please limit the amount of</blockquote>

<code>AvatarModifierAreas</code>

<blockquote>you use in your scene to just a couple. If you use too many of them, it may have a significant impact on performance.</blockquote>

<h4>Placing Avatar Modifier Areas</h4>

<p>Add an entity with an</p>

<code>AvatarModifierArea</code>

<p>component and position this entity by using a</p>

<code>Transform</code>

<p>component.</p>

<p>When creating an</p>

<code>AvatarModifierArea</code>

<p>component, you must provide the following:</p>

<code>area</code>

<li>: Size of the modifier area</li>

<code>modifiers</code>

<li>: An array listing the modifiers to implement in the area. This property uses values from the</li>

<code>AvatarModifierType</code>

<li>enum.</li>

<p>The supported modifiers are:</p>

<code>AvatarModifierType.AMT_HIDE_AVATARS</code>

<code>AvatarModifierType.AMT_DISABLE_PASSPORTS</code>

<p>All the effects of an</p>

<code>AvatarModifierArea</code>

<p>only take place within the region of their area. Players return to normal when they walk out of the area.</p>

<p>An</p>

<code>AvatarModifierArea</code>

<p>affects only players that are inside the area, entering the area doesn’t affect how other players that are outside the area are perceived.</p>

<p>The effects of an</p>

<code>AvatarModifierArea</code>

<p>are calculated locally for each player. You can have an</p>

<code>AvatarModifierArea</code>

<p>that is only present in the scene for some of the players and not for others. For example, you could make a “marco polo” game, where only one player in the scene has a modifier area that hides all of the other players. All the other players that don’t have this modifier area in their local version of the scene are able to see each other normally.

If the area hides avatars, then the players that don’t have the area in their local version of the scene will see all avatars normally. Even those that experience themselves as hidden. Players that do have the area will experience themselves and all other avatars as affected by the area when they enter it.</p>

<strong>📔 Note</strong>

<blockquote>: Avatar modifier areas are affected by the</blockquote>

<em>position</em>

<blockquote>and</blockquote>

<em>rotation</em>

<blockquote>of the Transform component of their host entity, but they’re not affected by the</blockquote>

<em>scale</em>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<p>: The</p>

<code>AvatarModifierArea</code>

<p>component must be imported via</p>

<code>import { AvatarModifierArea } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h4>Hide avatars</h4>

<p>When a player walks into an</p>

<code>AvatarModifierArea</code>

<p>that has the</p>

<code>AvatarModifierType.AMT_HIDE_AVATARS</code>

<p>modifier, the player’s avatar stops being rendered. This applies both for the player in 3rd person view, and for when other players walk into the area.</p>

<p>This allows you to replace the default Decentraland avatar with any custom avatar you might want to show in your scene. Note that if you want to see other players with custom avatars, you should handle the syncing of player positions yourself.</p>

<h4>Disable Passport Popup</h4>

<p>When a player walks into an</p>

<code>AvatarModifierArea</code>

<p>that has the</p>

<code>AvatarModifierType.AMT_DISABLE_PASSPORTS</code>

<p>modifier, clicking on them no longer opens up the passport UI that shows the player bio, inventory, etc.</p>

<p>This is especially useful in games where accidentally opening this UI could interrupt the flow of a game, for example in a multiplayer shooter game.</p>

<h2>Camera modifiers</h2>

<p>Players are normally free to switch between first and third person camera by pressing V on the keyboard. Use a</p>

<code>CameraModeArea</code>

<p>to force the camera mode to either 1st or 3rd person for all players that stand within a specific area in your scene.</p>

<p>If a player’s current camera mode doesn’t match that of the</p>

<code>CameraModeArea</code>

<p>, they will transition to that camera mode. A toast appears onscreen to clarify that this change is due to the scene. While inside, players can’t change their camera mode. When a player leaves the</p>

<code>CameraModeArea</code>

<p>, their camera mode is restored to what they had before entering.</p>

<p>Use</p>

<code>CameraModeArea</code>

<p>in regions where players would have a significantly better experience by using a specific camera mode. For example, first person is ideal if the player needs to click on small object, or third person may be useful for players to notice some entity that your scene has attached over their head. Don’t assume players know how to switch camera modes, many first-time players might not know they have the option, or not remember the key to do it.</p>

<strong>📔 Note</strong>

<blockquote>: Camera modifier areas are affected by the</blockquote>

<em>position</em>

<blockquote>and</blockquote>

<em>rotation</em>

<blockquote>of the Transform component of their host entity, but they’re not affected by the</blockquote>

<em>scale</em>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: If you overlap multiple camera modifier areas, the last one to be instanced by your scene’s code will take priority over the others.</blockquote>

<p>When creating an</p>

<code>CameraModeArea</code>

<p>component, you must provide the following:</p>

<code>area</code>

<li>: Size of the modifier area</li>

<code>cameraMode</code>

<li>: Which camera mode to force in this area, from the</li>

<code>CameraType</code>

<li>enum.</li>

<p>The supported camera modes are:</p>

<code>CameraType.CT_FIRST_PERSON</code>

<code>CameraType.CT_THIRD_PERSON</code>

<h2>Exclude Avatars</h2>

<p>You can exclude a list of players from being affected by a modifier area by adding their player Ids to an array in the</p>

<code>excludeIds</code>

<p>property of the modifier area.</p>

<p>This example hides all avatars in an area, except those of players with specific IDs. You could use this for example on a live event, to only show the event hosts on the stage, and hide any other players that jump onto the stage.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure the player IDs are all written with lower-case letters. Use</blockquote>

<code>.toLowerCase()</code>

<blockquote>if necessary.</blockquote>

<p>Modifier areas run locally on each player’s instance, the list of excluded IDs can be different for each player. In the example below, each player excludes their own ID from a modifier that hides avatars, so that they each view their own avatar and no others.</p>

<strong>❗Warning</strong>

<p>If the list of excluded IDs is going to be periodically changed (for example based on players entering or leaving an area), make sure that the list is kept in order. Perform a</p>

<code>.sort()</code>

<p>on the array, so that the list remains in the same order each time it’s passed. In that way, only the changes to the list are be computed. This can otherwise have a significant impact on the scene’s performance.</p>

<h2>Debug modifier areas</h2>

<p>It can be tough to know exactly what parts of the scene your modifier areas cover based on the code. Visual feedback helps a lot to confirm that they’re well placed.</p>

<p>To verify the positions of a</p>

<code>AvatarModifierArea</code>

<p>or a</p>

<code>CameraModeArea</code>

<p>, give the entity holding it a</p>

<code>MeshRenderer</code>

<p>component with a</p>

<code>box</code>

<p>shape, and set the scale to the same size as the</p>

<code>area</code>

<p>of the modifier area.</p>

<strong>📔 Note</strong>

<blockquote>: Modifier areas aren’t affected by the</blockquote>

<code>scale</code>

<blockquote>property of the transform, their size is based on their</blockquote>

<code>area</code>

<blockquote>property.</blockquote>

<p>To activate the effects of the modifier area, the player’s head or torso should enter the area. It won’t take effect if only the feet of the player are covered. Make sure the player can’t easily evade the area by jumping.</p>

<strong>📔 Note</strong>

<blockquote>: The full area should fit inside the limits of your scene.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/user-data/#get-player-data

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#reserved-entities

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than an id, that can be referenced by components. The entity itself has no properties or methods of its own, it simply serves to group several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>Transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>MeshRenderer</code>

<p>component gives the entity a visible shape (like a cube or a sphere) when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You can also create custom components to serve your scene’s required data, for example a custom</p>

<code>health</code>

<p>could store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, Entities were</blockquote>

<em>objects</em>

<blockquote>that were instanced, and could be extended to add functions. As of version 7.0 of the SDK, entities are only an ID. This structure better fits the principles of</blockquote>

<blockquote>and can help in the scene’s performance.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough for the engine to change how the scene is rendered in the next frame.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>Components are meant to store data about their referenced entity. They can only store this data, they can’t modify this data themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<h2>Syntax for entities and components</h2>

<p>The example below shows some basic operations for declaring, and configuring basic entities and components.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, it was necessary to manually add an entity to the engine to start rendering it. As of version 7 of the SDK, entities are implicitly added to the engine as soon as they are assigned a component.</blockquote>

<p>When a component is created, it’s always assigned to a parent entity. The component’s values then affect the entity.</p>

<h2>Remove entities</h2>

<p>To remove an entity from the engine, use</p>

<code>engine.removeEntity()</code>

<p>If a removed entity has any child entities, these change their parent back to the default</p>

<code>engine.RootEntity</code>

<p>entity, which is positioned at the scene base position, with a scale of</p>

<em>1</em>

<p>.</p>

<p>To remove an entity and also all of its children (and any children of its children, recurrently), use the</p>

<code>removeEntityWithChildren()</code>

<p>helper.</p>

<strong>💡 Tip</strong>

<blockquote>: Instead of removing an entity from the engine, in some cases it might be better to make it invisible, in case you want to be able to load it again without any delay. See</blockquote>

<h3>Removing entities behind the scenes</h3>

<p>An entity is just an id that is referenced by its components. So when removing an entity you’re really removing each of the components that reference this entity. This means that if you manually remove all of the components of an entity, it will have the same effect as doing</p>

<code>engine.removeEntity()</code>

<p>.</p>

<p>Once the entity’s components are removed, that entity’s id is free to be referenced by new components as a fresh new entity.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, the child entity must have a</p>

<code>Transform</code>

<p>component. You can then set the</p>

<code>parent</code>

<p>field with a reference to the parent entity.</p>

<p>Once a parent is assigned, it can be read off the child entity from the</p>

<code>parent</code>

<p>field on its</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity has a</p>

<code>Transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected. Any position or rotation values are added, any scale values are multiplied.</p>

<p>If either the parent or child entity doesn’t have a</p>

<code>Transform</code>

<p>component, the following default values are used.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To separate a child entity from its parent, you can assign the entity’s parent to</p>

<code>engine.RootEntity</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: When dealing with nested entities that are synced with other players, use the</blockquote>

<code>parentEntity()</code>

<blockquote>function instead of the</blockquote>

<code>parent</code>

<blockquote>entity in the Transform. See</blockquote>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique number</p>

<em>id</em>

<p>. You can retrieve a component that refers to a specific entity from the engine based on this ID.</p>

<strong>📔 Note</strong>

<blockquote>: The entity ids between</blockquote>

<em>0</em>

<blockquote>and</blockquote>

<em>511</em>

<blockquote>are reserved by the engine for fixed entities, like the player avatar, the base scene, etc.</blockquote>

<p>For example, if a player’s click or a</p>

<p>hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the Transform component of the entity that matches that id. You can also fetch any other component of that entity in the same way.</p>

<h2>Get an entity by name</h2>

<p>When using the Decentraland Editor and adding entities via the drag-and-drop inspector, each entity has a unique name. Use the</p>

<code>engine.getEntityOrNullByName()</code>

<p>function to reference one of these entities from your code. Pass the entity’s name as a string, as written on the inspector’s UI, in the tree view on the left.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you only use</blockquote>

<code>engine.getEntityOrNullByName()</code>

<blockquote>inside the</blockquote>

<code>main()</code>

<blockquote>function, in functions that run after</blockquote>

<code>main()</code>

<blockquote>, or in a system. If used outside one of those contexts, the entities created in the Editor´s inspector may not yet be instanced.</blockquote>

<p>You’re free to perform any action on an entity fetched via this method, like add or remove components, modify values of existing components, or remove the entity from the engine.</p>

<p>All the entities added via the inspector have a</p>

<code>Name</code>

<p>component, you can iterate over all of them like this:</p>

<h2>Add or replace a component</h2>

<p>Each entity can only have one component of a given kind. For example, if you attempt to assign a Transform to an entity that already has one, this will cause an error.</p>

<p>To prevent this error, you can use</p>

<code>.createOrReplace</code>

<p>instead of</p>

<code>.create</code>

<p>. This command overwrites any existing components of the same kind if they exists, otherwise it creates a new component just like</p>

<code>.create</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Since</blockquote>

<code>.createOrReplace</code>

<blockquote>runs an additional check before creating the component, it’s always more performant to use</blockquote>

<code>.create</code>

<blockquote>. If you’re sure that the entity doesn’t already have a component like the one you’re adding, use</blockquote>

<code>.create</code>

<blockquote>.</blockquote>

<h2>Access a component from an entity</h2>

<p>You can access components of an entity by using the entity’s</p>

<code>.get()</code>

<p>or the</p>

<code>getMutable()</code>

<p>functions.</p>

<p>The</p>

<code>get()</code>

<p>function fetches a read-only reference to the component. You cannot change any values from this reference of the component.</p>

<p>If you wish to change the values of the component, use the</p>

<code>getMutable()</code>

<p>function instead. If you change the values in the mutable version of the component, you’re directly affecting the entity that component belongs to.</p>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Only use</blockquote>

<code>getMutable()</code>

<blockquote>if you’re actually going to make changes to the component’s values. Otherwise, always use</blockquote>

<code>get()</code>

<blockquote>. This practice follows the principles of</blockquote>

<blockquote>, and can significantly help in the scene’s performance.</blockquote>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getOrNull()</code>

<p>or</p>

<code>getMutableOrNull()</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Avoid using</blockquote>

<code>getOrNull()</code>

<blockquote>or</blockquote>

<code>getMutableOrNull()</code>

<blockquote>when possible, as these functions involve additional checks that and are therefore less efficient than</blockquote>

<code>.get()</code>

<blockquote>and</blockquote>

<code>getMutable()</code>

<blockquote>.</blockquote>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>get()</code>

<li>and</li>

<code>getMutable()</code>

<li>returns an error.</li>

<code>getOrNull()</code>

<li>and</li>

<code>getMutableOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, use the entity’s</p>

<code>deleteFrom()</code>

<p>method of the component type.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<strong>📔 Note</strong>

<blockquote>: To remove all the components of an entity at once, see</blockquote>

<h2>Check for a component</h2>

<p>You can check if an entity owns an instance of a certain component by using the</p>

<code>has()</code>

<p>function. This function returns</p>

<em>true</em>

<p>if the component is present, and</p>

<em>false</em>

<p>if it’s not. This can be very handy for using in conditional logic in your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also</blockquote>

<blockquote>to fetch a full list of components that hold a specific component, or a specific set of components. Do not iterate over all entities in the scene manually to check each with a</blockquote>

<code>has()</code>

<blockquote>, that approach is a lot less efficient.</blockquote>

<h2>Reserved entities</h2>

<p>Certain entity ids are reserved for special entities that exist in every scene. They can be accessed via the following aliases:</p>

<code>engine.RootEntity</code>

<code>engine.PlayerEntity</code>

<code>engine.CameraEntity</code>

<strong>📔 Note</strong>

<blockquote>: Avoid referring to these entities before they are initialized. To avoid this problem, refer to these entities in the</blockquote>

<code>main()</code>

<blockquote>function, or in a system.</blockquote>

<h3>The root entity</h3>

<p>All entities in the scene are children of the</p>

<code>engine.RootEntity</code>

<p>, directly or indirectly.</p>

<h3>The player entity</h3>

<p>The</p>

<code>engine.PlayerEntity</code>

<p>entity represents the player’s avatar. Fetch the player’s</p>

<code>Transform</code>

<p>component to get the player’s current position and rotation, see</p>

<p>. You can also modify this Transform to move the player, see</p>

<p>.</p>

<h3>The camera entity</h3>

<p>The</p>

<code>engine.CameraEntity</code>

<p>entity represents the player’s camera.

Fetch the camera’s</p>

<code>Transform</code>

<p>component to get the camera’s position and rotation. You can also fetch the camera’s</p>

<code>CameraMode</code>

<p>component to know know if the player is using 1st or 3rd person camera mode, see</p>

<p>.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#reserved-entities

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/move-player/

<title>Move a player | Decentraland Documentation</title>

<strong>Move a player</strong>

<h1>Move a player</h1>

<p>To change the player’s position in the scene, use the</p>

<code>movePlayerTo()</code>

<p>function. This function takes an object with two properties:</p>

<code>newRelativePosition</code>

<li>: Where to move the player, expressed as a Vector3.</li>

<code>cameraTarget</code>

<li>: (optional) What direction to make the player face, expressed as a Vector3 that represents the coordinates of a point in space to stare at. If no value is provided, the player will maintain the same rotation as before moving.</li>

<p>The player’s movement occurs instantly, without any confirmation screens or camera transitions.</p>

<strong>📔 Note</strong>

<blockquote>: Players can only be moved if they already are standing inside the scene’s bounds, and can only be moved to locations that are inside the limits of the scene’s bounds. You can’t use</blockquote>

<code>movePlayerTo()</code>

<blockquote>to transport a player to another scene. To move a player to another scene, see</blockquote>

<blockquote>.</blockquote>

<h2>Required permissions in smart wearables and portable experiences</h2>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are free to move the player and are not affected by permissions.</blockquote>

<p>Smart wearables and portable experiences are only allowed to use this functionality if they add a corresponding permissions on the</p>

<code>scene.json</code>

<p>file. This applies to both predefined and custom animations. This is granted via the</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<p>permission. If not yet present, create a</p>

<code>requiredPermissions</code>

<p>property at root level in the JSON file to assign it this permission.</p>

<p>See</p>

<p>for more details.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/move-player/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/external-links/#teleports

<title>Outbound links | Decentraland Documentation</title>

<strong>Outbound links</strong>

<h1>Outbound links</h1>

<p>You can add links from your scene out to other content, either to other scenes or to external websites.</p>

<h2>Teleports</h2>

<p>To teleport a player to another scene, call the following function, indicating the coordinates that you want players to teleport to.</p>

<p>Players are presented a confirmation screen before they are teleported, this screen displays information from the destination scene’s</p>

<code>scene.json file</code>

<p>, including the scene</p>

<code>name</code>

<p>,</p>

<code>description</code>

<p>and</p>

<code>navmapThumbnail</code>

<p>. See</p>

<p>for details on how to set this data.</p>

<p>You can also teleport players to the most crowded place in Genesis City by doing</p>

<code>teleportTo(‘crowd’)</code>

<p>, which is equivalent to typing</p>

<code>/goto crowd</code>

<p>in the chat. Similarly you can teleport players to a random location from the curated list that you reach with</p>

<code>/goto magic</code>

<p>by doing ``teleportTo(‘magic’)`.</p>

<p>Bare in mind that teleports take you to a scene in the indicated coordinates, but not necessarily to that same coordinates. This means that when travelling to a scene that has multiple parcels, players may not be landing on the same coordinates as specified, but rather into one of the spawn points designated by the creator of the scene.</p>

<p>To move a player to another set of coordinates inside the current scene, use the</p>

<code>movePlayerTo()</code>

<p>function instead. See</p>

<p>.</p>

<h2>External links</h2>

<p>To add a link to an external website, use the</p>

<code>openExternalUrl()</code>

<p>command.</p>

<p>To prevent any abusive usage of this feature to spam players, it’s only possible to call the</p>

<code>openExternalUrl</code>

<p>from an explicit click or button event on an entity. It’s not possible to call this function as a result of a timer, or a collision area, or a global click event. See</p>

<p>for details on how to do this.</p>

<p>When</p>

<code>openExternalUrl</code>

<p>is called, players are prompted with a confirmation screen, where they are informed of where the link will take them, and where can accept of decline to visit the link.</p>

<p>The link is opened in a new tab, keeping the original tab in Decentraland.</p>

<p>If players tick the</p>

<em>trust this domain</em>

<p>checkbox, they won’t be prompted again during their session, as long as the link comes from the same scene and is to the same domain.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/external-links/#teleports

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>A scene is a Decentraland project that is spatially delimited, and is mapped to one or several LAND parcels. If a scene is deployed to the Decentraland map, players can experience it by visiting the scene’s coordinates.</p>

<p>See</p>

<p>for a list of what files are used in a scene project.</p>

<h2>Metadata</h2>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary to load your scene. You’re also free to add any fields that you wish.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>npx update-parcels</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>npx update-parcels <parcel></code>

<p>For example:</p>

<code>npx update-parcels 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>npx update-parcels <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>npx update-parcels 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>npx update-parcels <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>npx update-parcels</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>It’s very important to give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these displayed on a modal when they select the parcels of your scene on the map. They will also see these in a confirmation screen when being</p>

<p>there by another scene. Setting up compelling data here can significantly help drive traffic to your scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is especially useful in large scenes, to prevent players from spawning too far away from the coordinates where they originally intended to load. To have many spawn points, simply list them as an array.</p>

<p>When there are multiple spawn points, the one that’s closest to the coordinates indicated by the player is picked.</p>

<p>If a coordinate is marked as</p>

<code>default</code>

<p>, it will always be used, regardless of if it’s the closest. If multiple spawn points are marked as</p>

<code>default</code>

<p>, the closest one of these is picked.</p>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<p>A scene can also have multiple spawn regions, just like it can have multiple spawn points.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are not affected by these permissions, and are free to use the corresponding functionality.</blockquote>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on smart wearables and portable experiences:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>disabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the scene metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for libraries, where the library might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>getSceneInformation</code>

<p>function:</p>

<p>Then you can call the</p>

<code>getSceneInformation()</code>

<p>function, which returns a json object that includes much of the contents of the scene.json file.

The example below shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getSceneInformation()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.

Do not use the deprecated</blockquote>

<code>getSceneInfo()</code>

<blockquote>function.</blockquote>

<p>The object returned by</p>

<code>getSceneInformation()</code>

<p>includes the following:</p>

<code>baseUrl</code>

<li>: The base URL where the scene’s content is hosted</li>

<code>content</code>

<li>: An array with all the files of the scene, including their hash, that can be used together with the baseUrl to retrieve them.</li>

<code>metadataJson</code>

<li>: The full contents of the scene’s scene.json, as a string. You must parse this to obtain specific values.</li>

<code>urn</code>

<li>: The unique urn for the scene as a whole.</li>

<p>The example below parses the contents from</p>

<code>metadataJson</code>

<p>to obtain values from properties in the scene.json file</p>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re interested in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene is listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/external-links/

<title>Outbound links | Decentraland Documentation</title>

<strong>Outbound links</strong>

<h1>Outbound links</h1>

<p>You can add links from your scene out to other content, either to other scenes or to external websites.</p>

<h2>Teleports</h2>

<p>To teleport a player to another scene, call the following function, indicating the coordinates that you want players to teleport to.</p>

<p>Players are presented a confirmation screen before they are teleported, this screen displays information from the destination scene’s</p>

<code>scene.json file</code>

<p>, including the scene</p>

<code>name</code>

<p>,</p>

<code>description</code>

<p>and</p>

<code>navmapThumbnail</code>

<p>. See</p>

<p>for details on how to set this data.</p>

<p>You can also teleport players to the most crowded place in Genesis City by doing</p>

<code>teleportTo(‘crowd’)</code>

<p>, which is equivalent to typing</p>

<code>/goto crowd</code>

<p>in the chat. Similarly you can teleport players to a random location from the curated list that you reach with</p>

<code>/goto magic</code>

<p>by doing ``teleportTo(‘magic’)`.</p>

<p>Bare in mind that teleports take you to a scene in the indicated coordinates, but not necessarily to that same coordinates. This means that when travelling to a scene that has multiple parcels, players may not be landing on the same coordinates as specified, but rather into one of the spawn points designated by the creator of the scene.</p>

<p>To move a player to another set of coordinates inside the current scene, use the</p>

<code>movePlayerTo()</code>

<p>function instead. See</p>

<p>.</p>

<h2>External links</h2>

<p>To add a link to an external website, use the</p>

<code>openExternalUrl()</code>

<p>command.</p>

<p>To prevent any abusive usage of this feature to spam players, it’s only possible to call the</p>

<code>openExternalUrl</code>

<p>from an explicit click or button event on an entity. It’s not possible to call this function as a result of a timer, or a collision area, or a global click event. See</p>

<p>for details on how to do this.</p>

<p>When</p>

<code>openExternalUrl</code>

<p>is called, players are prompted with a confirmation screen, where they are informed of where the link will take them, and where can accept of decline to visit the link.</p>

<p>The link is opened in a new tab, keeping the original tab in Decentraland.</p>

<p>If players tick the</p>

<em>trust this domain</em>

<p>checkbox, they won’t be prompted again during their session, as long as the link comes from the same scene and is to the same domain.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/

# Start of the information extracted from the URL: https://decentraland.org/terms/#8-children

<title>Terms of Use</title>

<h1>Terms of Use</h1>

<h2>1. Acceptance of Terms</h2>

<p>The Decentraland Foundation (the "Foundation"), acting for the benefit of the Decentraland community as a whole, holds the intellectual property rights over, and makes available, (a) the DCL Client, the Desktop Client, the SDK 5.0, the Marketplace (</p>

<p>), the Builder, the Blog, Events, Agora, Forum, the Land Manager, the Command Line Interface, DAO, the Developers’ Hub, the Rewards tool which, with any other features, tools and/or materials made available from time to time by the Foundation, are referred to herein as the "Tools" and (b) the website</p>

<p>(the "Site"). Please read these Terms of Use (the "Terms" or "Terms of Use") carefully before using the Tools and the Site. By using or otherwise accessing the Tools and the Site, you: (1) accept and agree to be bound by these Terms; (2) accept that the Tools are still in testing phase and that you use at your own risk, as further explained in Section 2 below; (3) represent that you are old enough to use the Tools and the Site pursuant to Sections 3 and 9 below; (4) consent to the collection, use, disclosure and other handling of information as described in the Privacy Policy, available here</p>

<p>; (5) accept and agree (5.1.) the Content Policy approved by the DAO, available here</p>

<p>, and (5.2.) any additional terms and conditions of participation issued by the Foundation from time to time. If you do not agree to the Terms, then you must not access or use the Tools or the Site.</p>

<p>As per the endowment received, the Foundation makes available the Tools and the Site free of charge in order to allow different interactions with the Decentraland platform ("Decentraland"), a decentralized virtual world. The Foundation does not own or control Decentraland, as ownership and governance is decentralized in the community through the DAO.</p>

<p>Decentraland is governed by a decentralized autonomous organization (the "DAO"). For further information please see</p>

<p>.</p>

<p>The Foundation has no continuing obligation to operate the Tools and the Site and may cease to operate one or more of the Tools in the future, at its exclusive discretion, with no liability whatsoever in connection thereto.</p>

<p>With respect to the source code of the software of the Tools that has been released under an open source license, such software code must be used in accordance with the applicable open source license terms and conditions as described in Section 13 below. Other similar tools might be developed in the future by the community or third parties.</p>

<h2>2. Disclaimer and Modification of Terms of Use</h2>

<p>The Tools are provided on an "as is" and "as available" basis and may contain defects and software bugs. You are advised to safeguard important data, property and content, to use caution, and not to rely in any way on the correct or secure functionality or performance of the Tools.</p>

<p>Except for Section 17, providing for binding arbitration and waiver of class action rights, as detailed in Section 7, the Foundation reserves the right, at the sole discretion of the DAO, to modify or replace the Terms of Use at any time. The most current version of these Terms will be posted on the Site. You shall be responsible for reviewing and becoming familiar with any such modifications. Use of the Tools by you after any modification to the Terms constitutes your acceptance of the Terms of Use as modified.</p>

<h2>3. Eligibility</h2>

<p>You hereby represent and warrant that you are fully able and competent to enter into the terms, conditions, obligations, affirmations, representations and warranties set forth in these Terms and to abide by and comply with these Terms. Decentraland is a global platform and by accessing the Content, the Site or Tools, you are representing and warranting that you are of the legal age of majority in your jurisdiction as is required to access such Tools and Content and enter into arrangements as provided by the Tools. You further represent that you are otherwise legally permitted to use the Tools in your jurisdiction including owning cryptographic tokens, and interacting with the Site, Tools or Content in any way. You further represent that you are responsible for ensuring compliance with the laws of your jurisdiction and acknowledge that the Foundation is not liable for your compliance or failure to comply with such laws. You further represent and warrant that all funds or assets used by you have been lawfully obtained by you in compliance with all applicable laws.</p>

<h2>4. Account Access and Security</h2>

<p>Access to the Tools is provided via a third party private key manager selected by you (e.g., a Web3 Provider, Metamask, a USB interface for Ledger Wallet, the Mist browser, or other). Security and secure access to each account in the Tools is provided solely by the third party private key manager you select to administer your private key. You and the third party private key manager you select are entirely responsible for security related to access of the Tools and all information provided by you to such third party provider (including without limitation, email or phone number). The DAO and/or the Foundation bear no responsibility for any breach of security or unauthorized access to your account (the "Account"). You are advised to: (a) avoid any use of the same password with your selected third party private key manager that you have ever used outside of the third party private key manager; and (b) keep your password and any related secret information secure and confidential and do not share them with anyone else.</p>

<p>You are solely responsible for all activities conducted through your Account whether or not you authorize the activity. In the event that fraud, illegality or other conduct that violates this Agreement is discovered or reported (whether by you or someone else) that is connected with your Account, the DAO may suspend or block your Account (or Accounts) as described in Section 15.</p>

<p>You are solely responsible for maintaining the confidentiality of your password and for restricting access to your devices. You are solely responsible for any harm resulting from your disclosure, or authorization of the disclosure, of your password or from any person's use of your password to gain access to your Account. You acknowledge that in the event of any unauthorized use of or access to your Account, password or other breach of security, you accept that due to the nature of the Tools and the platform itself, the DAO and/or the Foundation will be unable to remedy any issues that arise.</p>

<p>The DAO and/or the Foundation will not be liable for any loss or damage (of any kind and under any legal theory) to you or any third party arising from your inability or failure for any reason to comply with any of the foregoing obligations, or for any reason whatsoever, except fraud on our part.</p>

<p>The DAO and/or the Foundation cannot and will not be liable for any loss or damage arising from your sharing or other loss of your private key or related information, or any other damage or loss arising from unauthorized access to your Account.</p>

<p>Transactions that take place using the Tools are confirmed and managed via the Ethereum blockchain. You understand that your Ethereum public address will be made publicly visible whenever you engage in a transaction using the Tools.</p>

<p>If you reside in a jurisdiction where online gambling is banned (such as the United States of America, China and South Korea) you must refrain from accessing Content which includes online gambling.</p>

<h2>5. Representations and Risks</h2>

<h3>5.1 Disclaimer</h3>

<p>You acknowledge and agree that your use of the Tools and the Site is at your sole risk. The Tools and the Site are provided on an "AS IS" and "AS AVAILABLE" basis, without warranties of any kind, either express or implied, including, without limitation, implied warranties of merchantability, fitness for a particular purpose or non-infringement. You acknowledge and agree that the DAO and/or the Foundation has no obligation to take any action regarding: which users gain access to or use the Tools; what effects the Tools may have on you; the LAND you own; how you may interpret or use the Tools; or what actions you may take or fail to take as a result of having been exposed to the Tools. You release the DAO and/or the Foundation from all liability for your inability to access to the Site, Tools or any Content therein. The DAO and/or the Foundation is not and cannot be responsible for and makes no representations, warranties or covenants concerning any Content contained in or accessed through the Site, Tools, and the DAO and/or the Foundation will not be responsible or liable for the accuracy, copyright compliance, legality or decency of material contained in or accessed through the Tools. The Content Policy over Decentraland is established and enforced exclusively by the Decentraland community through the DAO.</p>

<h3>5.2 Sophistication and Risk of Cryptographic Systems</h3>

<p>By utilizing the Tools, the Site or interacting with the Tools or platform or anything contained or provided therein in any way, you represent that you understand the inherent risks associated with cryptographic systems; and warrant that you have an understanding of the usage, risks, potential bugs based on novel technology (where applicable), and intricacies of native cryptographic tokens, like Ether (ETH) and Bitcoin (BTC), smart contract based tokens such as those that follow the Ethereum Token Standard (</p>

<p>), MANA (the ERC-20 token that allows users to claim parcels of LAND and trade with each other within Decentraland), LAND (the ERC-721 token, associating each LAND parcel's x and y coordinates with a definition of a parcel's 3D scene that makes up the larger metaverse) and blockchain-based software systems.</p>

<h3>5.3 Risk of Regulatory Actions in One or More Jurisdictions</h3>

<p>The Foundation, MANA, LAND and ETH could be impacted by one or more regulatory inquiries or regulatory action, which could impede or limit your ability to access or use the Tools or Ethereum blockchain.</p>

<h3>5.4 Risk of Weaknesses or Exploits in the Field of Cryptography</h3>

<p>You acknowledge and agree that cryptography is a progressing field. Advances in code cracking or technical advances such as the development of quantum computers may present risks to smart contracts, cryptocurrencies and the Tools, which could result in the theft or loss of your cryptographic tokens or property, among other potential consequences. By using the Tools you acknowledge and agree to undertake these risks.</p>

<h3>5.5 Use of Crypto Assets</h3>

<p>Some Tools allow the use of MANA, ETH or other similar blockchain technologies. You acknowledge and agree that MANA, Ether and blockchain technologies and associated assets, and other assets are highly volatile due to many factors including but not limited to popularity, adoption, speculation, regulation, technology and security risks. You also acknowledge and agree that the cost of transacting on such technologies is variable and may increase at any time causing impact to any activities taking place on the Ethereum blockchain. The Foundation does not invite or make any offer to acquire, purchase, sell, transfer or otherwise deal in any crypto asset. Third parties may provide services involving the acquisition, purchase, sale, transfer or exchange of crypto-assets; the Foundation does not provide any such service and does not undertake any liability in connection thereto. You acknowledge and agree these risks and represent that the Foundation cannot be held liable for changes and fluctuations in value or increased costs.</p>

<p>There are risks associated with using an Internet-based currency, including, but not limited to, the risk of hardware, software and Internet connections failure or problems, the risk of malicious software introduction, and the risk that third parties may obtain unauthorized access to information stored within your wallet. You accept and acknowledge that the Foundation will not be responsible for any communication failures, disruptions, errors, distortions or delays you may experience when using the Ethereum network or any sidechain or similar device for processing transactions, however caused.</p>

<h3>5.6 Application Security</h3>

<p>You acknowledge and agree that the Site, the Tools and related applications are software code and are subject to flaws and acknowledge that you are solely responsible for evaluating any smart contract, code provided by the Site, Tools or Content and the trustworthiness of any third-party websites, products, smart-contracts, or Content you access or use through the Tools. You further expressly acknowledge and agree that Ethereum applications can be written maliciously or negligently, that the Foundation cannot be held liable for your interaction with such applications and that such applications may cause the loss of property or even identity. This warning and others later provided by the Foundation in no way evidence or represent an on-going duty to alert you to all of the potential risks of utilizing the Tools or the Site.</p>

<h3>5.7 Third Party Providers</h3>

<p>The Foundation and/or the DAO, neither own nor control MetaMask, Ledger Wallet, the Mist browser, Google Chrome, the Ethereum network, any Web3 Provider or any other third party site, product, or service that you might access, visit, or use for the purpose of enabling you to use the various features of the Tools. The Foundation and/or the DAO shall not be liable for the acts or omissions of any such third parties, nor shall the Foundation and/or the DAO be liable for any damage that you may suffer as a result of your transactions or any other interaction with any such third parties.</p>

<h3>5.8 Taxes</h3>

<p>You are solely responsible for determining what, if any, Taxes apply to your LAND parcel related transactions, and any other transaction conducted by you. The Foundation does not, and will not, have any insight into or control over any transactions conducted by you in Decentraland, and thus is not responsible for determining the Taxes that apply to your transactions entered through the Tools or otherwise involving any LAND parcel, or any other related transaction, and is not to act as a withholding Tax agent in any circumstances whatsoever.</p>

<h3>5.9 Uses of the Tools</h3>

<p>You acknowledge and agree that the Tools do not store, send, or receive LAND parcels. This is because LAND parcels exist only by virtue of the ownership record maintained on the Tools' supporting blockchain in the Ethereum network. Any transfer of a LAND parcel occurs within the supporting blockchain in the Ethereum network, and not within the Tools.</p>

<h3>5.10 Risks of Changes to Ethereum Platform</h3>

<p>Upgrades by Ethereum to the Ethereum platform, a hard fork in the Ethereum platform, or a change in how transactions are confirmed on the Ethereum platform may have unintended, adverse effects on all blockchains using the ERC-20 standard, ERC-721 standard, or any other future Ethereum standard.</p>

<h3>5.11 Wearables Curation Committee</h3>

<p>You acknowledge that the Wearables Curation Committee or any other committee may restrict or ban certain contents, polls or decisions. You acknowledge you will be exclusively liable for any content you make available on the platform. Neither the DAO Committee nor the Wearables Curation Committee has any obligation with respect to the content.</p>

<h2>6. Transactions and Feeds</h2>

<p>6.1 If you elect to purchase, trade, or sell a LAND parcel, Avatar, wearable or other non-fungible token ("NFT") with or from other users via the Tools, any financial transaction that you engage in will be conducted solely through the Ethereum network, Layer 2 solutions or other sidechains via Web3 providers. The Foundation will have no insight into or control over these payments or transactions, nor does it have the ability to reverse any transactions. With that in mind, the Foundation will have no liability to you or to any third party for any claims or damages that may arise as a result of any transactions that you engage in via the Tools, or any other transactions that you conduct via the Ethereum network, and other networks, sidechains, Layer 2 solutions or Web3 providers.</p>

<p>6.2 Ethereum requires the payment of a transaction fee (a "Gas Fee") for every transaction that occurs on the Ethereum network. The Gas Fee funds the network of computers that run the decentralized Ethereum network. This means that you will need to pay a Gas Fee for each transaction that occurs via the Tools. You accept that the payment of the Gas Fee is inherent to the nature of the Ethereum network and alien to the Foundation or due to the use of the Tools.</p>

<p>6.3 As per a DAO’s decision, transactions taking place in the Marketplace will be subject to a 2.5% MANA cost (the "Marketplace Transaction Cost") calculated over the amount of MANA involved in such transactions. Such MANA cost will be borne by the participants to the transaction. All MANA spent under the Marketplace Transaction Cost will be transferred to the treasury of the DAO. Please be aware that transactions in third-party NFT marketplaces (inside or outside Decentraland) may be subject to the fees charged by said third-party marketplaces as per the respective terms and conditions. The Foundation and/or the DAO shall have no liability whatsoever with regards to transactions conducted in third-party marketplaces.</p>

<p>6.4 You will be solely responsible to pay any and all sales, use, value-added and other taxes, duties, and assessments (except taxes that may apply on our net income) now or hereafter claimed or imposed by any governmental authority (collectively, "Taxes") associated with your use of the Tools (including, without limitation, any Taxes that may become payable as the result of your ownership, or transfer of any NFT and any activity conducted by you in Decentraland). Except for income taxes levied on the Foundation, you: (i) will pay or reimburse the Foundation for all national, federal, state, local or other taxes and assessments of any jurisdiction, including value added taxes and taxes as required by international tax treaties, customs or other import or export taxes, and amounts levied in lieu thereof based on charges set, services performed or payments made hereunder, as are now or hereafter may be imposed under the authority of any national, state, local or any other taxing jurisdiction; and (ii) shall not be entitled to deduct the amount of any such taxes, duties or assessments from payments made to the Foundation pursuant to these Terms.</p>

<h2>7. Changes</h2>

<p>The DAO may approve changes to the Terms from time to time. When the DAO approves changes, the Foundation will make available the updated Terms through the Site and update the "Last Updated" date at the beginning of these Terms accordingly. Please check these Terms periodically for changes. Any changes to the Terms will apply on the date that they are made, and your continued access to or use of the Tools or the Site after the Terms have been updated will constitute your binding acceptance of the updates. If you do not agree to any revised Terms, you must not access or use the Tools or the Site.</p>

<h2>8. Children</h2>

<p>You affirm that you are over the age of 13, as the Tools are not intended for children under ## 13. IF YOU ARE 13 OR OLDER BUT UNDER THE AGE OF 18, OR THE LEGAL AGE OF MAJORITY WHERE YOU RESIDE IF THAT JURISDICTION HAS AN OLDER AGE OF MAJORITY, THEN YOU AGREE TO REVIEW THESE TERMS WITH YOUR PARENT OR GUARDIAN TO MAKE SURE THAT BOTH YOU AND YOUR PARENT OR GUARDIAN UNDERSTAND AND AGREE TO THESE TERMS. YOU AGREE TO HAVE YOUR PARENT OR GUARDIAN REVIEW AND ACCEPT THESE TERMS ON YOUR BEHALF. IF YOU ARE A PARENT OR GUARDIAN AGREEING TO THE TERMS FOR THE BENEFIT OF A CHILD OVER 13, THEN YOU AGREE TO AND ACCEPT FULL RESPONSIBILITY FOR THAT CHILD'S USE OF THE TOOLS OR THE SITE, INCLUDING ALL FINANCIAL CHARGES AND LEGAL LIABILITY THAT HE OR SHE MAY INCUR.</p>

<p>TO ACCESS CERTAIN CONTENTS, YOU WILL NEED TO HAVE A MINIMUM AGE AS DETAILED IN THE CONTENT POLICY.</p>

<p>IN ALL CASES INVOLVING ONLINE GAMBLING YOU MUST BE OLDER THAN 18 YEARS (OR THE MINIMUM LEGAL AGE IN YOUR PLACE OF RESIDENCE).</p>

<h2>9. Indemnity</h2>

<p>You shall release and indemnify, defend and hold harmless the Foundation, the DAO, and its officers, directors, employees and representatives from and against any and all losses, liabilities, expenses, damages, costs (including attorneys' fees and court costs) claims or actions of any kind whatsoever arising or resulting from your use of the Tools or the Site, your violation of these Terms of Use, and any of your acts or omissions. The Foundation reserves the right, at its own expense, to assume exclusive defense and control of any matter otherwise subject to indemnification by you and, in such case, you agree to cooperate with the Foundation in the defense of such matter.</p>

<h2>10. Disclaimers</h2>

<p>10.1 YOU ACKNOWLEDGE AND AGREE THAT YOU ASSUME FULL RESPONSIBILITY FOR YOUR USE OF THE SITE AND TOOLS. YOU ACKNOWLEDGE AND AGREE THAT ANY INFORMATION YOU SEND OR RECEIVE DURING YOUR USE OF THE SITE AND TOOLS MAY NOT BE SECURE AND MAY BE INTERCEPTED OR LATER ACQUIRED BY UNAUTHORIZED PARTIES. YOU ACKNOWLEDGE AND AGREE THAT YOUR USE OF THE SITE AND TOOLS IS AT YOUR OWN RISK. YOU ACKNOWLEDGE AND AGREE THAT THE TOOLS ARE PROVIDED "AS IS" AND "AS AVAILABLE" WITHOUT WARRANTIES OF ANY KIND, WHETHER EXPRESS OR IMPLIED. RECOGNIZING SUCH, YOU ACKNOWLEDGE AND AGREE THAT, TO THE FULLEST EXTENT PERMITTED BY APPLICABLE LAW, NEITHER THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES, THE DAO, NOR ITS SUPPLIERS OR LICENSORS WILL BE LIABLE TO YOU FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY OR OTHER DAMAGES OF ANY KIND, INCLUDING WITHOUT LIMITATION DAMAGES FOR LOSS OF PROFITS, GOODWILL, USE, DATA OR OTHER TANGIBLE OR INTANGIBLE LOSSES OR ANY OTHER DAMAGES BASED ON CONTRACT, TORT, STRICT LIABILITY, INFRINGEMENT OF INTELLECTUAL PROPERTY OR THEFT OR MISAPPROPRIATION OF PROPERTY OR ANY OTHER THEORY (EVEN IF THE FOUNDATION HAD BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES), RESULTING FROM THE SITE OR TOOLS; THE USE OR THE INABILITY TO USE THE SITE OR TOOLS; UNAUTHORIZED ACCESS TO OR ALTERATION OF YOUR TRANSMISSIONS OR DATA; STATEMENTS, CONTENT OR CONDUCT OF ANY THIRD PARTY ON THE SITE OR TOOLS; ANY ACTIONS THE FOUNDATION TAKES OR FAILS TO TAKE AS A RESULT OF COMMUNICATIONS YOU SEND; HUMAN ERRORS; TECHNICAL MALFUNCTIONS; FAILURES, INCLUDING PUBLIC UTILITY OR TELEPHONE OUTAGES; OMISSIONS, INTERRUPTIONS, LATENCY, DELETIONS OR DEFECTS OF ANY DEVICE OR NETWORK, PROVIDERS, OR SOFTWARE (INCLUDING, BUT NOT LIMITED TO, THOSE THAT DO NOT PERMIT PARTICIPATION IN THE TOOLS); ANY INJURY OR DAMAGE TO COMPUTER EQUIPMENT; INABILITY TO FULLY ACCESS THE SITE OR TOOLS OR ANY OTHER WEBSITE; THEFT, TAMPERING, DESTRUCTION, OR UNAUTHORIZED ACCESS TO, IMAGES OR OTHER CONTENT OF ANY KIND; DATA THAT IS PROCESSED LATE OR INCORRECTLY OR IS INCOMPLETE OR LOST; TYPOGRAPHICAL, PRINTING OR OTHER ERRORS, OR ANY COMBINATION THEREOF; OR ANY OTHER MATTER RELATING TO THE SITE OR TOOLS. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF CERTAIN WARRANTIES OR THE LIMITATION OR EXCLUSION OF LIABILITY FOR INCIDENTAL OR CONSEQUENTIAL DAMAGES. ACCORDINGLY, SOME OF THE ABOVE LIMITATIONS MAY NOT APPLY TO YOU.</p>

<p>10.2 THE FOUNDATION HEREBY EXPRESSLY DISCLAIMS, WAIVES, RELEASES AND RENOUNCES ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE, OR NON INFRINGEMENT.</p>

<p>10.3 WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE FOUNDATION, ITS DIRECTORS, OFFICERS, EMPLOYEES AND LICENSORS DO NOT REPRESENT OR WARRANT TO YOU THAT: (I) YOUR ACCESS TO OR USE OF THE TOOLS WILL MEET YOUR REQUIREMENTS, (II) YOUR ACCESS TO OR USE OF THE TOOLS WILL BE UNINTERRUPTED, TIMELY, SECURE OR FREE FROM ERROR, (III) USAGE DATA PROVIDED THROUGH THE TOOLS WILL BE ACCURATE, (III) THE TOOLS OR ANY CONTENT, SERVICES, OR FEATURES MADE AVAILABLE ON OR THROUGH THE TOOLS ARE FREE OF VIRUSES OR OTHER HARMFUL COMPONENTS, OR (IV) THAT ANY DATA THAT YOU DISCLOSE WHEN YOU USE THE TOOLS WILL BE SECURE.</p>

<p>10.4 YOU ACCEPT THE INHERENT SECURITY RISKS OF PROVIDING INFORMATION AND DEALING ONLINE OVER THE INTERNET, AND AGREE THAT THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES AND THE DAO HAVE NO LIABILITY OR RESPONSIBILITY FOR ANY BREACH OF SECURITY UNLESS IT IS DUE TO ITS GROSS NEGLIGENCE.</p>

<p>10.5 THE FOUNDATION, ITS DIRECTORS, OFFICERS AND EMPLOYEES AND THE DAO WILL NOT BE RESPONSIBLE OR LIABLE TO YOU FOR ANY LOSSES YOU INCUR AS THE RESULT OF YOUR USE OF THE ETHEREUM NETWORK OR THE METAMASK OR ANY OTHER ELECTRONIC WALLET, INCLUDING BUT NOT LIMITED TO ANY LOSSES, DAMAGES OR CLAIMS ARISING FROM: (A) USER ERROR, SUCH AS FORGOTTEN PASSWORDS OR INCORRECTLY CONSTRUED SMART CONTRACTS OR OTHER TRANSACTIONS; (B) SERVER FAILURE OR DATA LOSS; (C) CORRUPTED WALLET FILES; (D) INTELLECTUAL PROPERTY INFRINGEMENT BY THE USERS; (E) UNAUTHORIZED ACCESS OR ACTIVITIES BY THIRD PARTIES, INCLUDING BUT NOT LIMITED TO THE USE OF VIRUSES, PHISHING, BRUTEFORCING OR OTHER MEANS OF ATTACK AGAINST THE TOOLS, ETHEREUM NETWORK, OR THE METAMASK OR OTHER ELECTRONIC WALLET.</p>

<p>10.6 LAND PARCELS, WEARABLES AND ANY AND ALL ERC-721 TOKENS ARE INTANGIBLE DIGITAL ASSETS THAT EXIST ONLY BY VIRTUE OF THE OWNERSHIP RECORD MAINTAINED IN THE ETHEREUM NETWORK. ALL SMART CONTRACTS ARE CONDUCTED AND OCCUR ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM PLATFORM. THE FOUNDATION HAS NO CONTROL OVER AND MAKES NO GUARANTEES OR PROMISES WITH RESPECT TO THE OWNERSHIP RECORD OR SMART CONTRACTS.</p>

<p>10.7 MANA ARE INTANGIBLE DIGITAL ASSETS THAT EXIST ONLY BY VIRTUE OF THE OWNERSHIP RECORD MAINTAINED IN THE ETHEREUM NETWORK. ALL SMART CONTRACTS ARE CONDUCTED AND OCCUR ON THE DECENTRALIZED LEDGER WITHIN THE ETHEREUM PLATFORM. THE FOUNDATION HAS NO CONTROL OVER AND MAKE NO GUARANTEES OR PROMISES WITH RESPECT TO THE OWNERSHIP RECORD OR SMART CONTRACTS. THE FOUNDATION MAKES NO OFFER OR INVITATION TO ACQUIRE, PURCHASE, TRANSFER, SELL OR OTHERWISE DEAL IN MANA.</p>

<p>10.8. THE FOUNDATION IS NOT RESPONSIBLE FOR LOSSES DUE TO BLOCKCHAIN OR ANY OTHER FEATURES OF THE ETHEREUM NETWORK OR THE METAMASK OR OTHER ELECTRONIC WALLET, INCLUDING BUT NOT LIMITED TO LATE REPORT BY DEVELOPERS OR REPRESENTATIVES (OR NO REPORT AT ALL) OF ANY ISSUES WITH THE BLOCKCHAIN SUPPORTING THE ETHEREUM NETWORK, INCLUDING FORKS, TECHNICAL NODE ISSUES, OR ANY OTHER ISSUES HAVING FUND LOSSES AS A RESULT.</p>

<p>10.9. SOME TOOLS, AS THE DESKTOP CLIENT PROVIDES YOU WITH FASTER ACCESS AND INTERACTION WITH DECENTRALAND. THE DOWNLOAD AND USE OF THE DESKTOP CLIENT MAY INCLUDE THE DOWNLOAD OF THE CONTENT CREATED BY THE USERS AND AVAILABLE AT DECENTRALAND TO YOUR DEVICE, WHICH MAY BE ILLEGAL IN YOUR COUNTRY OR OFFENSIVE. THE DAO AND THE FOUNDATION ARE NOT LIABLE FOR SUCH CONTENT. CONTENT AVAILABLE IN DECENTRALAND MAY REDIRECT YOU TO THIRD-PARTY LINKS FOR WHICH THE DAO AND/OR THE FOUNDATION ARE NOT RESPONSIBLE. YOU ARE SOLELY RESPONSIBLE FOR ALL DOWNLOADS OF THIRD-PARTY CONTENT AND DATA, AND FOR ALL THIRD-PARTY LINKS CLICKED ON. PLEASE NOTE THAT BY CREATING A USER ON THE APP YOU RELEASE THE DAO AND THE FOUNDATION FROM ANY AND ALL LIABILITY REGARDING THE ABOVE-MENTIONED CONTENT, DATA OR LINKS AND ASSUME THE RISKS DESCRIBED ABOVE.</p>

<h2>11. Limitation on Liability</h2>

<p>11.1 YOU UNDERSTAND AND AGREE THAT THE FOUNDATION, ITS OFFICERS, EMPLOYEES, DIRECTORS, THE DAO, AND LICENSORS WILL NOT BE LIABLE TO YOU OR TO ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, CONSEQUENTIAL, OR EXEMPLARY DAMAGES WHICH YOU MAY INCUR, HOWSOEVER CAUSED AND UNDER ANY THEORY OF LIABILITY, INCLUDING, WITHOUT LIMITATION, ANY LOSS OF PROFITS (WHETHER INCURRED DIRECTLY OR INDIRECTLY), LOSS OF GOODWILL OR BUSINESS REPUTATION, LOSS OF DATA, COST OF PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES, OR ANY OTHER INTANGIBLE LOSS, EVEN IF THE FOUNDATION HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p>

<p>11.2 YOU AGREE THAT THE FOUNDATION’S TOTAL, AGGREGATE LIABILITY TO YOU FOR ANY AND ALL CLAIMS ARISING OUT OF OR RELATING TO THESE TERMS OR YOUR ACCESS TO OR USE OF (OR YOUR INABILITY TO ACCESS OR USE) ANY PORTION OF THE TOOLS, WHETHER IN CONTRACT, TORT, STRICT LIABILITY, OR ANY OTHER LEGAL THEORY, IS LIMITED TO THE GREATER OF (A) THE AMOUNTS ACTUALLY PAID BY YOU TO THE FOUNDATION UNDER THESE TERMS IN THE 12 MONTH PERIOD PRECEDING THE DATE THE CLAIM AROSE, OR (B) $100.</p>

<p>11.3 YOU ACKNOWLEDGE AND AGREE THAT THE FOUNDATION HAS MADE THE TOOLS AVAILABLE TO YOU AND ENTERED INTO THESE TERMS IN RELIANCE UPON THE WARRANTY DISCLAIMERS AND LIMITATIONS OF LIABILITY SET FORTH HEREIN, WHICH REFLECT A REASONABLE AND FAIR ALLOCATION OF RISK BETWEEN THE PARTIES AND FORM AN ESSENTIAL BASIS OF THE BARGAIN BETWEEN US. THE FOUNDATION WOULD NOT BE ABLE TO PROVIDE THE TOOLS TO YOU WITHOUT THESE LIMITATIONS.</p>

<p>11.4 SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, AND SOME JURISDICTIONS ALSO LIMIT DISCLAIMERS OR LIMITATIONS OF LIABILITY FOR PERSONAL INJURY FROM CONSUMER PRODUCTS, SO THE ABOVE LIMITATIONS MAY NOT APPLY TO PERSONAL INJURY CLAIMS.</p>

<h2>12. Proprietary Rights</h2>

<p>12.1 All title, ownership and Intellectual Property Rights in and to the Site and the Tools are owned exclusively by the Foundation or its licensors. The Foundation holds these Intellectual Property Rights for the benefit of the Decentraland community as a whole. You acknowledge and agree that the Site and Tools contains proprietary and confidential information that is protected by applicable intellectual property and other laws. Except as expressly authorized in Section 13, you agree not to copy, modify, rent, lease, loan, sell, distribute, perform, display or create Derivative Works based on the Site and the Tools, in whole or in part. The Foundation's exclusive ownership shall include all elements of the Site and Tools, and all Intellectual Property Rights therein. The visual interfaces, graphics (including, without limitation, all art and drawings associated with Tools), design, systems, methods, information, computer code, software, "look and feel", organization, compilation of the content, code, data, and all other elements of the Site and the Tools (but excluding the Content submitted by Users) (collectively, the " Foundation Materials") are owned by the Foundation, and are protected by copyright, trade dress, patent, and trademark laws, international conventions, other relevant intellectual property and proprietary rights, and applicable laws. All the Foundation Materials are the copyrighted property of the Foundation or its licensors, and all trademarks, logos, service marks, and trade names contained in the Foundation Materials are proprietary to the Foundation or its licensors. Except as expressly set forth herein, your use of the Site and the Tools does not grant you ownership of or any other rights with respect to any content, code, data, or other materials that you may access on or through the Site and the Tools. The Foundation reserves all rights in and to the Foundation Materials not expressly granted to you in the Terms. For the sake of clarity, you understand and agree: (i) that any "purchase" of LAND, whether via the Tools or otherwise, does not give you any rights or licenses in or to the Foundation Materials (including, without limitation, the Foundation’s copyright in and to the art and drawings associated with the Tools and content therein) other than those expressly contained in these Terms; and (ii) that you do not have the right to reproduce, distribute, or otherwise commercialize any elements of the Foundation Materials (including, without limitation, the Foundation’s copyright in and to the art and drawings associated with the Tools and content therein) in any way without the Foundation’s prior written consent in each case, which consent the Foundation may withhold in its sole and absolute discretion.</p>

<p>12.2 You may choose to submit comments, bug reports, ideas or other feedback about the Site or the Tools, including without limitation about how to improve the Tools (collectively, "Feedback"). By submitting any Feedback, you agree that the Foundation is free to use such Feedback at the Foundation’s discretion and without additional compensation to you, and to disclose such Feedback to third parties (whether on a non-confidential basis, or otherwise), including the DAO. You hereby grant the Foundation and the DAO a perpetual, irrevocable, nonexclusive, worldwide license under all rights necessary for the Foundation and the DAO to incorporate and use your Feedback for any purpose.</p>

<p>12.3 You acknowledge and agree that you are responsible for your own conduct while accessing or using the Site and the Tools, and for any consequences thereof. You agree to use the Site and the Tools only for purposes that are legal, proper and in accordance with these Terms and any applicable laws or regulations. By way of example, and not as a limitation, you may not, and may not allow any third party to: (i) send, post, upload, transmit, distribute, disseminate or otherwise make available any Content in violation of the Content Policy approved by the DAO, including without limitation, Content that infringes the Intellectual Property Rights of any party and any Content that contains any hate-related or violent content or contains any other material or products that violate or encourage conduct that would violate any criminal laws, any other applicable laws, or any third party rights; (ii) distribute viruses, worms, defects, Trojan horses, spyware, time bombs, cancelbots, corrupted files, hoaxes, or any other items of a destructive or deceptive nature, or that may harvest or collect any data or information about other users without their consent; (iii) impersonate another person (via the use of an email address or otherwise); (iv) use the Site or the Tools to violate the legal rights (such as rights of privacy and publicity) of others; (v) engage in, promote, or encourage illegal activity (including, without limitation, money laundering); (vi) interfere with other users' enjoyment of the Site or the Tools; (vii) exploit the Site or the Tools for any unauthorized commercial purpose; (viii) post or transmit unsolicited or unauthorized advertising, or promotional materials, that are in the nature of "junk mail," "spam," "chain letters," "pyramid schemes," or any other similar form of solicitation; (ix) modify, adapt, translate, or reverse engineer any portion of the Tools; (x) remove any copyright, trademark or other proprietary rights notices contained in or on the Site or the Tools or any part of it; (xi) reformat or frame any portion of the Site or the Tools; (xii) stalk, harass, or engage in any sexual, suggestive, lewd, lascivious, or otherwise inappropriate conduct with minors on the Site or the Tools; (xiii) use any robot, spider, site search/retrieval application, or other device to retrieve or index any portion of the Site, the Tools or the Content posted on the Tools, or to collect information about its users for any unauthorized purpose; (xiv) use any cheats, hacks, or any other unauthorized techniques or unauthorized third-party software to cheat in any competition or game that may be offered on the Tools by other Users, or to otherwise disrupt or modify the Tools or the experience of any users on the Tools; (xv) create user accounts by automated means or under false or fraudulent pretenses; (xvi) attempt to gain unauthorized access to any other user's Account, password or Content; or (xvii) access or use the Tools for the purpose of creating a product or service that is competitive with the Tools.</p>

<p>12.4 Ownership and management of LAND, Non-fungible tokens (NFTs) and Content created by users:</p>

<p>LAND: All title and ownership rights over each piece of LAND lies with its owner. Each LAND owner decides the Content to be included in the LAND and may impose its own terms and conditions and policies. In the case of Districts, the relationship between the District and District participants - in any capacity - is exclusively governed by the applicable plan approved by each community. You are advised to review any such terms, conditions and policies before entering into transactions in any LAND. The Foundation does not control the Content of each LAND parcel and does not assume any liability or obligation in connection thereto. All Content uploaded to LAND must comply with the Content Policy. The Foundation holds the Intellectual Property Rights over the LAND smart contract but does not have any Intellectual Property Right over the Content introduced by each user.</p>

<p>NFTs: All title, ownership and Intellectual Property Rights over NFTs, including without limitation, Wearables, belong to the creator of the NFT. Transactions for the sale of NFT through the Marketplace will convey said title, ownership and Intellectual Property Rights to the purchaser. To the fullest extent possible, the creator will waive any moral rights over the NFTs upon transfer to third parties. Neither the Foundation nor the DAO have any Intellectual Property Rights over NFTs created by users. All NFTs must comply with the Content Policy.</p>

<p>Content: All title, ownership and Intellectual Property Rights over the Content created by users belongs to the users who created said Content. Neither the Foundation nor the DAO have any Intellectual Property Rights over the user’s Content. The creator of the Content may impose its own terms, conditions and licenses for access to said Content. You are advised to review any such terms, conditions and policies before accessing any such Content. All Content must comply with the Content Policy.</p>

<p>12.5 The use of Decentraland logo and trademarks are regulated in the Terms of use available at</p>

<h2>13. Open Source License.</h2>

<h3>13.1 Grant of Copyright License.</h3>

<p>Subject to the terms and conditions of this License, each Contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. The following Tools are not subject to the provisions of this Section 13, and are of proprietary nature of the Foundation: Blog and Events. The Forum is of proprietary nature and is a development of Discourse; the DAO is based on an open source license of Aragon.</p>

<h3>13.2 Grant of Patent License.</h3>

<p>Subject to the terms and conditions of this License, each Contributor hereby grants to you a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If you institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to you under this License for that Work shall terminate as of the date such litigation is filed.</p>

<h3>13.3 Redistribution.</h3>

<p>You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that you meet the following conditions: (i) modifications to the Work and the Derivative Works thereof shall not infringe the Privacy and Content Policies, nor allow the infringement of said policies or of Section 12.3 above, and require any further Contributor to abide by these limitations; (ii) any modifications to the Work or the Derivative Works can only take place until six (6) months have elapsed since the release of the relevant Work or Derivative Works by the Contributor to the general public; (iii) you must give any other recipients of the Work or Derivative Works a copy of this License; (iv) you must cause any modified files to carry prominent notices stating that you changed the files; (v) you must retain, in the Source form of any Derivative Works that you distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; (vi) if the Work includes a "NOTICE" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add your own attribution notices within Derivative Works that you distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License.</p>

<p>You may add your own copyright statement to your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of your modifications, or for any such Derivative Works as a whole, provided your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.</p>

<h3>13.4 Submission of Contributions.</h3>

<p>Unless explicitly stated otherwise, any Contribution intentionally submitted for inclusion in the Work by you to the Foundation and/or its licensors shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with the Foundation and/or its licensors regarding such Contributions.</p>

<h3>13.5 Trademarks.</h3>

<p>This License does not grant permission to use the trade names, logo, trademarks, service marks, or product names of the licensee and/or its licensors, except as provided in the Terms of Use for Decentraland´s Logo and Name.</p>

<h3>13.6 Disclaimer of Warranty.</h3>

<p>Unless required by applicable law or agreed to in writing, the Foundation and/or its licensors provide the Work (and each Contributor provides its Contributions) on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with your exercise of permissions under this License.</p>

<h3>13.7 Limitation of Liability.</h3>

<p>In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to you for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.</p>

<h3>13.8 Accepting Warranty or Additional Liability.</h3>

<p>While redistributing the Work or Derivative Works thereof, you may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, you may act only on your own behalf and on your sole responsibility, not on behalf of any other Contributor, and only if you agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.</p>

<h2>14. Links</h2>

<p>The Site and the Tools provide, or third parties may provide, links to other World Wide Web or accessible sites, applications or resources. Because the Foundation has no control over such sites, applications and resources, you acknowledge and agree that the Foundation, its officers, employees and the DAO are not responsible for the availability of such external sites, applications or resources, and do not endorse and are not responsible or liable for any content, advertising, products or other materials on or available from such sites or resources. You further acknowledge and agree that the Foundation, its officers, employees and the DAO, shall not be responsible or liable, directly or indirectly, for any damage or loss caused or alleged to be caused by or in connection with use of or reliance on any such content, goods or services available on or through any such site or resource.</p>

<h2>15. Termination and Suspension</h2>

<p>You shall have a right to terminate your Account at any time by canceling and discontinuing your access to and use of the Tools. The DAO may decide to terminate or suspend all or part of the Site and the Tools and your access to the Site and the Tools immediately, without prior notice or liability. You will not receive any refunds if you cancel your Account, or if these Terms are otherwise terminated. You agree that the DAO, in its sole discretion and for any or no reason, may terminate these Terms and suspend your Account(s) for the Tools. You agree that any suspension of your access to the Site or the Tools may be without prior notice, and that the DAO and/or the Foundation (and its officers and employees)will not be liable to you or to any third party for any such suspension.</p>

<p>In the event of your breach of these Terms or any suspected fraudulent, abusive, or illegal activity, the DAO and/or the Foundation may, without limitation, suspend your Account, block any infringing Content and adopt any other action deemed necessary to prevent future breaches, in addition to any other remedies the DAO and/or the Foundation and/or any User may have at law or in equity.</p>

<p>Upon any termination or suspension of your Account, you may no longer have access to information that you have posted on the Tools or that is related to your Account, and you acknowledge that the DAO and/or the Foundation will have no obligation to maintain any such information in the relevant databases or to forward any such information to you or to any third party. Upon termination of your Account, your right to use the Tools will immediately cease. The following provisions of these Terms survive any termination of these Terms: REPRESENTATIONS AND RISKS; TRANSACTION AND FEES; INDEMNITY; DISCLAIMERS; LIMITATION ON LIABILITY; PROPRIETARY RIGHTS; LINKS; TERMINATION AND SUSPENSION; NO THIRD-PARTY BENEFICIARIES; BINDING ARBITRATION AND CLASS ACTION WAIVER; GENERAL INFORMATION.</p>

<h2>16. No Third-Party Beneficiaries</h2>

<p>You agree that, except as otherwise expressly provided in these Terms, there shall be no third-party beneficiaries to the Terms.</p>

<h2>17. Notice and Procedure for Making Claims of Copyright Infringement</h2>

<p>If you believe that your Intellectual Property Rights (as this term is defined in the Content Policy) or the Intellectual Property Rights of a person on whose behalf you are authorized to act has been infringed, you are encouraged to contact the infringing party directly. Additionally, you may also contact the Foundation providing the following information:</p>

<p>an electronic or physical signature of the person authorized to act on behalf of the owner of the Intellectual Property Right;</p>

<p>a description of the Intellectual Property Right that you claim has been infringed;</p>

<p>description of where the material that you claim is infringing is located on the Tools;</p>

<p>your address, telephone number, and email address;</p>

<p>a statement by you that you have a good faith belief that the disputed use is not authorized by the owner of the Intellectual Property Right, its agent, or the law;</p>

<p>a statement by you, made under penalty of perjury, that the above information in your Notice is accurate and that you are Intellectual Property owner or authorized to act on the owner's behalf.</p>

<p>The Foundation can be reached at email:</p>

<p>To the extent possible, the Foundation may try to reach the would-be infringing party to forward your concerns. The Foundation is not in a position to assess the legal merits of the claims.</p>

<p>As the Foundation does not control the Content being uploaded by the users, if the user does not agree with your claim and/or does not accept to withdraw the infringing content, the DAO, as per the votes of the community, may take any of the following measures, (i) block the infringing Content so as to render it inaccessible through the Tools (although it could be still accessible through other clients); (ii) block the infringing user's Account. Any further action, claim or remedy against the infringing user must be undertaken by the aggrieved user.</p>

<p>Although not at the core of its role or responsibilities, to the extent technically possible, the Foundation may also, at its sole discretion, (i) block any kind of Content uploaded by users; (ii) suspend user Accounts; and/or (iii) request documents evidencing the right of the contributor to use Intellectual Property Rights embedded in the Content.</p>

<h2>18. Binding Arbitration and Class Action Waiver</h2>

<p>PLEASE READ THIS SECTION CAREFULLY - IT MAY SIGNIFICANTLY AFFECT YOUR LEGAL RIGHTS, INCLUDING YOUR RIGHT TO FILE A LAWSUIT IN COURT</p>

<h3>18.1 Initial Dispute Resolution</h3>

<p>The parties shall use their best efforts to engage directly to settle any dispute, claim, question, or disagreement and engage in good faith negotiations which shall be a condition to either party initiating a lawsuit or arbitration.</p>

<h3>18.2 Binding Arbitration</h3>

<p>If the parties do not reach an agreed upon solution within a period of 30 days from the time informal dispute resolution under the Initial Dispute Resolution provision begins, then either party may initiate binding arbitration as the sole means to resolve claims, subject to the terms set forth below.</p>

<p>Specifically, any dispute that is not resolved under the Initial Dispute Resolution provision shall be finally settled under the Rules of Arbitration of the International Chamber of Commerce. The following shall apply in respect of such arbitration: (i) the number of arbitrators shall be three (one nominated by each party and one nominated by the ICC); (ii) the decision of the arbitrators will be binding and enforceable against the parties and a judgment upon any award rendered by the arbitrators may be entered in any court having jurisdiction thereto (provided that in no event will the arbitrator have the authority to make any award that provides for punitive or exemplary damages or to award damages excluded by these Terms or in excess of the limitations contained in these Terms); (iii) the seat, or legal place, of arbitration shall be the City of Panama, Panama; and (iv) the language to be used in the arbitral proceedings shall be English, any documents submitted as evidence that are in another language must be accompanied by an English translation and the award will be in the English language. Claimants and respondents shall bear its or their own costs of the arbitration, including attorney's fees, and share equally the arbitrators' fees and ICC's administrative costs. For purposes of cost sharing, all claimants shall be considered one party and all respondents shall be considered one party. The parties shall maintain strict confidentiality with respect to all aspects of any arbitration commenced pursuant to these Terms and shall not disclose the fact, conduct or outcome of the arbitration to any non-parties or non-participants, except to the extent required by applicable Law or to the extent necessary to recognize, confirm or enforce the final award or decision in the arbitration, without the prior written consent of all parties to the arbitration.</p>

<h3>18.3 Class Action Waiver</h3>

<p>The parties further agree that any arbitration shall be conducted in their individual capacities only and not as a class action or other representative action, and the parties expressly waive their right to file a class action or seek relief on a class basis. YOU AND THE FOUNDATION AGREE THAT EACH MAY BRING CLAIMS AGAINST THE OTHER ONLY IN YOUR OR ITS INDIVIDUAL CAPACITY, AND NOT AS A PLAINTIFF OR CLASS MEMBER IN ANY PURPORTED CLASS OR REPRESENTATIVE PROCEEDING. If any court or arbitrator determines that the class action waiver set forth in this paragraph is void or unenforceable for any reason or that an arbitration can proceed on a class basis, then the arbitration provision set forth above shall be deemed null and void in its entirety and the parties shall be deemed to have not agreed to arbitrate disputes.</p>

<p>4-exception-litigation of Intellectual Property and Small Court Claims

Notwithstanding the parties' decision to resolve all disputes through arbitration, either party may bring an action in state or federal court to protect its Intellectual Property Rights. Either party may also seek relief in a small claims court for disputes or claims within the scope of that court's jurisdiction.</p>

<h3>18.5 30-day Right to Opt-Out</h3>

<p>You have the right to opt-out and not be bound by the arbitration and class action waiver provisions set forth above by sending written notice of your decision to opt-out to the following email address:</p>

<p>. Your notice must be sent within 30 days of your first use of the Tools, otherwise you shall be bound to arbitrate disputes in accordance with the terms of those paragraphs. If you opt-out of these arbitration provisions, the Foundation also will not be bound by them.</p>

<h3>18.6 Changes to this Section</h3>

<p>The Foundation will provide 60-days' notice of any changes to this section. Changes will become effective on the 60th day, and will apply prospectively only to any claims arising after the 60th day.</p>

<p>These Terms and the relationship between you and the Foundation shall be governed by the laws of Panama, without regard to conflict of law provisions.</p>

<p>For any dispute not subject to arbitration you and The Foundation agree to submit to the exclusive jurisdiction of the courts with seat in the city of Panama, Panama. You further agree to accept service of process by mail, and hereby waive any and all jurisdictional and venue defenses otherwise available.</p>

<h2>19. General Information</h2>

<h3>19.1 Entire Agreement</h3>

<p>These Terms (and any additional terms, rules and conditions of participation that the Foundation or the DAO may post on the Site or on the Tools) constitute the entire agreement between you and the Foundation with respect to the Tools and supersedes any prior agreements, oral or written, between you and the Foundation. In the event of a conflict between these Terms and the additional terms, rules and conditions of participation, the latter will prevail over the Terms to the extent of the conflict.</p>

<h3>19.2 Waiver and Severability of Terms</h3>

<p>The failure of the Foundation or the DAO to exercise or enforce any right or provision of the Terms shall not constitute a waiver of such right or provision. If any provision of the Terms is found by an arbitrator or court of competent jurisdiction to be invalid, the parties nevertheless agree that the arbitrator or court should endeavor to give effect to the parties' intentions as reflected in the provision, and the other provisions of the Terms remain in full force and effect.</p>

<h3>19.3 Statute of Limitations</h3>

<p>You agree that regardless of any statute or law to the contrary, any claim or cause of action arising out of or related to the use of the Site, the Tools or the Terms must be filed within one (1) year after such claim or cause of action arose or be forever barred.</p>

<h3>19.4 Section Titles</h3>

<p>The section titles in the Terms are for convenience only and have no legal or contractual effect.</p>

<h3>19.5 Communications</h3>

<p>Users with questions, complaints or claims with respect to the Site or the Tools may contact us using the relevant contact information set forth above and at</p>

<p>.</p>

<h2>20. Definitions</h2>

<p>The following definitions shall apply only to Section 13 of the Terms:</p>

<p>"Contribution" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, "submitted" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as "Not a Contribution."</p>

<p>"Contributor" shall mean the Foundation and/or any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.</p>

<p>"Derivative Works" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.</p>

<p>"Legal Entity" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, "control" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.</p>

<p>"License" shall mean the terms and conditions for the use, reproduction, and distribution of the open source, as defined by Section 13.</p>

<p>"Licensor" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.</p>

<p>"Object" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.</p>

<p>"Source" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.</p>

<p>"Work" shall mean the work of authorship of the Tools, made available under the License, as indicated by a copyright notice that is included in or attached to the Work.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/in-world-features/age-rating-scene-reporting/

<title>Age Rating and Scene Reporting | Decentraland Documentation</title>

<strong>Age Rating and Scene Reporting</strong>

<h1>Age Rating and Scene Reporting</h1>

<p>This section offers guidelines on how to manage content settings in Decentraland, with a focus on understanding age ratings and the importance of reporting scenes that are not categorized correctly.</p>

<h3>Age Rating</h3>

<p>To maintain a safe and suitable environment for its community, Decentraland utilizes an age rating system. Scenes can be categorized into two main ratings for this purpose:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Scenes in this category may contain moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Scenes in this category may include intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, and substances like alcohol, tobacco, and drugs.</li>

<h3>Enabling Adult Content</h3>

<p>By default, adult content is disabled, meaning scenes rated for adults will not load unless this setting is manually enabled. To experience Decentraland without restrictions, activate the</p>

<strong>Adult Content</strong>

<p>option in the Settings menu. You must verify that you are at least 18 years old to enable this feature.

``</p>

<li>Press</li>

<code>Tab</code>

<li>to open the Menu and navigate to the</li>

<strong>Settings</strong>

<li>section.</li>

<li>Find the</li>

<strong>Adult Content</strong>

<li>switch.</li>

<li>Confirm your age to activate</li>

<strong>Adult Content</strong>

<li>.</li>

<p>You can disable this feature again at any time.</p>

<strong>📔 Note</strong>

<blockquote>: Enabling Adult Content is a confirmation that you are at least 18 years old and willing to view adult-only scenes.</blockquote>

<h3>Restricted Scenes</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. Content under this category will never load. This rating is applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<h3>Scene Reporting</h3>

<p>Scene creators are responsible for setting the age rating when they publish a scene. If you encounter a scene that seems incorrectly rated, you can report it for review by the Content Moderation team, currently managed by the Decentraland Foundation support team.</p>

<p>Here’s how:</p>

<li>Locate the</li>

<strong>Flag Scene</strong>

<li>button.</li>

<p>Review the</p>

<strong>Current Rate</strong>

<p>of the scene.</p>

<p>Choose the category that you believe the scene belongs to.</p>

<li>Identify the issues present in the scene.</li>

<li>Submit the report.</li>

<p>Reports are reviewed by the Content Moderation team, and scenes may be re-categorized if considered appropriate.</p>

<strong>📔 Note</strong>

<blockquote>: Reporting incorrectly categorized scenes helps maintain a secure environment in Decentraland. Please use the Flag feature responsibly and patiently await the review process.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/portable-experiences/

<title>Portable experiences | Decentraland Documentation</title>

<strong>Portable experiences</strong>

<h1>Portable experiences</h1>

<p>Portable experiences are essentially scenes that are not constrained to parcels of land. Players can carry these with them anywhere they go in Decentraland, adding a new layer of content over their experience.

Portable Experiences can be tied to a NAME and can be loaded by another scene using the SDK.</p>

<strong>📔 Note</strong>

<blockquote>: Portable experiences can only be created using SDK 7. Also, only scenes built with SDK 7 are capable of loading a portable experience.</blockquote>

<p>Smart Wearables are a kind of portable experience that is associated to a wearable, and activated based on if the player is using that wearable. This document doesn’t cover those, see</p>

<p>for more details.</p>

<h2>Getting started</h2>

<h3>Using the Editor</h3>

<p>Make sure you’ve</p>

<p>, then:</p>

<li>Open a Visual Studio Code window on an</li>

<em>empty folder</em>

<li>.</li>

<li>Select the Decentraland tab on Visual Studio’s left margin sidebar</li>

<li>Click</li>

<strong>Create Project</strong>

<li>The editor will prompt you about what kind of project to create. Select</li>

<strong>Portable Experience</strong>

<li>.</li>

<p>This command creates the basic files and structure for a new portable experience scene. This folder is very similar to that of a Decentraland scene, but you will notice the following differences:</p>

<code>scene.json</code>

<li>is a lot shorter, it doesn’t include properties that are irrelevant to a portable experience, like parcels or spawn points.</li>

<h3>Using the CLI</h3>

<li>Open a command line in a new folder and run</li>

<code>npx sdk-commands init --project px-template</code>

<h2>Preview</h2>

<p>Running a preview of a portable experience is just like running that of a scene, simply click the</p>

<strong>Run Scene</strong>

<p>button on the Editor, or run</p>

<code>npm run start</code>

<p>in the command line.</p>

<p>You’ll notice that rather than seeing an empty grid, you are surrounded by the default empty parcels content. In a portable experience, you are not restricted to any set of parcels, you can add 3D models or sounds anywhere in the world. Since the portable experience is meant to be experienced anywhere in Decentraland, you’re most likely going to focus on entities attached to the player or UI, but you can also place entities freely in the world.</p>

<h2>Publish</h2>

<p>To publish your portable experience, you need to own a</p>

<p>.</p>

<p>To specify under what</p>

<strong>name</strong>

<p>to make your deployment, add the following section in your</p>

<code>scene.json</code>

<p>:</p>

<strong>📔 Note</strong>

<blockquote>: Each NAME references a single portable experience or world. If your name already pointed to a world, deploying a portable experience will override that content.</blockquote>

<h3>Using the Editor</h3>

<p>Open the Decentraland tab and click the three-dots icon at the top, and select</p>

<strong>Publish scene to your world</strong>

<p>.</p>

<h3>Using the CLI</h3>

<p>Run:</p>

<code>npm run deploy --target-content https://worlds-content-server.decentraland.org</code>

<h2>Lifecycle of a portable experience in a scene</h2>

<p>To spawn a portable experience from your scene, use the</p>

<code>spawn()</code>

<p>function. To terminate a portable experience, use</p>

<code>kill()</code>

<p>. In both cases, you just need yo know the DCL name where the Portable experience was deployed.</p>

<h2>Restricting portable experiences</h2>

<p>You might be worried about preventing the use of portable experiences in your scene, since these could give players abilities that could be considered cheating in a competitive game. For example, in a platform game, a player that wears a jetpack has a very unfair advantage over others.</p>

<p>The simplest approach is to add a flag to block all portable experiences entirely on your scene at any time, or prevent their UIs from showing. See</p>

<p>. This also applies to portable experiences linked to smart wearables.</p>

<p>Another approach is to query to view a player’s portable experiences, and take action accordingly.</p>

<p>In the example above, the scene is using</p>

<code>kill()</code>

<p>to terminate portable experiences if they match a certain name. You could keep track of a denylist of non-allowed portable experience names, and chose to only terminate those. You could also chose to terminate all of them.</p>

<p>An alternative to terminating portable experiences is to change the behavior of your scene when they are present. For example, the player might be able to keep their portable experience, but not be allowed to start a match, or to claim any rewards as long as they have any enabled.</p>

<h2>Restricted actions in portable experiences</h2>

<p>To prevent abuse, certain features aren’t permitted on portable experiences by default, and require adding a permission flag.</p>

<p>See</p>

<p>for more details.</p>

<h2>Limitations</h2>

<p>Portable experiences only run for the player that activates it. Other players don’t see the effects. For example, if the portable experience renders a pet that follows the player, other players around won’t see this pet. However, other players will see avatars perform animations that run as part of the portable experience, even</p>

<p>uploaded as part of the portable experience’s files.</p>

<h2>Tips</h2>

<li>When positioning an entity, note that positions are global, relative to the 0,0 coordinates of Genesis Plaza.</li>

<li>To react to nearby players:</li>

<li>use</li>

<code>getConnectedPlayers()</code>

<li>to know what players are already there, and</li>

<code>onPlayerConnectedObservable</code>

<li>/</li>

<code>onPlayerDisconnectedObservable</code>

<li>to track other players coming and going.</li>

<li>Be mindful that the loading of the portable experience, surrounding scenes and other players may occur in different orders depending on the situation. If the player enters Decentraland with the portable experience already on, it’s likely that your portable experience will load before other players do. On the other hand, tf the player first loads into a scene and then activates the portable experience, it’s likely that other players will already be loaded by the time the portable experience starts running.</li>

<li>For multiplayer experiences, wait till the player is connected to an island inside their realm. Run</li>

<code>getRealm()</code>

<li>and check for the ‘room’ field. If the ‘room’ field is null, the player is not yet connected to an island and other players won’t be loaded yet. You can periodically check this every 1 second till the ‘room’ field is present, and only initialize your logic then.</li>

<li>To interact with surrounding scenes:</li>

<li>You can’t directly send any instructions to nearby scenes or other portable experiences, the</li>

<code>messageBus</code>

<li>is sandboxed for each portable experience/scene.</li>

<li>You can use an intermediate server to send information between the portable experience and a scene.</li>

<li>If you do a raycast, you can detect hits against the colliders of entities from the surrounding scenes. This can tell you the exact hit location, normal direction, and even the entity name and mesh name of the 3D model. This only works when hitting entities on scenes written with SDK7.</li>

<li>Kill a portable experience: Run the</li>

<code>kill()</code>

<li>method to self-terminate a portable experience.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/portable-experiences/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/smart-wearables/

<title>Smart Wearables | Decentraland Documentation</title>

<strong>Smart Wearables</strong>

<h1>Smart Wearables</h1>

<p>Smart wearables are a type of global scene. Like</p>

<p>, they are gameplay that players take with them as they move through the metaverse. For example, while running a global scene, a player could take a snowball from the ground in Genesis Plaza, walk away to another scene, and throw the snowball to another player who’s also playing the same game.</p>

<p>Smart wearables are portable experiences that are turned on when the player puts on a certain item of clothing. Smart wearables can grant players new abilities, like a jetpack that lets them fly, or add a new layer of content on top of the rest of the world, like randomly placing coins to be collected throughout the whole of genesis city.</p>

<h2>Getting started</h2>

<h3>Using the Editor</h3>

<p>Make sure you’ve</p>

<p>, then:</p>

<li>Open a Visual Studio Code window on an</li>

<em>empty folder</em>

<li>.</li>

<li>Select the Decentraland tab on Visual Studio’s left margin sidebar</li>

<li>Click</li>

<strong>Create Project</strong>

<li>The editor will prompt you about what kind of project to create. Select</li>

<strong>Smart Wearable</strong>

<li>.</li>

<h3>Using the CLI</h3>

<li>Open a command line in a new folder and run</li>

<code>npx sdk-commands init --project smart-wearable</code>

<p>This command creates the basic files and structure for a new smart wearable.</p>

<h2>The files in the template</h2>

<p>The folder of a brand new Smart Wearable project is very similar to that of a</p>

<p>, but you will notice the following differences:</p>

<code>wearable.json</code>

<li>includes all of the metadata for the portable experience</li>

<li>There’s a placeholder 3D model (glasses.glb) and thumbnail (glasses.png) for a pair of dark glasses. You should replace these with the actual wearable you are creating</li>

<code>scene.json</code>

<li>is a lot shorter, it doesn’t include properties that are irrelevant to a wearable, like parcels or spawn points</li>

<h2>About wearable.json</h2>

<p>The default</p>

<code>wearable.json</code>

<p>file looks like this:</p>

<p>The following fields are required in</p>

<code>wearable.json</code>

<p>:</p>

<code>id</code>

<li>: Unique id of the smart wearable.</li>

<code>name</code>

<li>: The name for the wearable that users will see in the marketplace</li>

<code>description</code>

<li>: The description of the wearable that users will see in the marketplace. Make sure you indicate what the smart wearable can do, as users of the marketplace will have no way to preview its functinality before buying it.</li>

<code>rarity</code>

<li>: The rarity supply of the token. Possible values are:</li>

<li>unique (1 copy)</li>

<li>mythic (10 copies)</li>

<li>legendary (100 copies)</li>

<li>epic (1000 copies)</li>

<li>uncommon (10.000 copies)</li>

<li>common (100.000 copies)</li>

<strong>📔 Note</strong>

<blockquote>: If you forked your project from an existing one, make sure the</blockquote>

<code>id</code>

<blockquote>value is unique before publishing your wearable. Use</blockquote>

<blockquote>to generate a new random UUID</blockquote>

<p>The following fields can also optionally be included. These settings can also be configured from the Builder UI, once you upload the smart wearable.</p>

<code>data</code>

<p>: Includes the following</p>

<code>replaces</code>

<p>: List of categories of other wearables that should be unequipped when equipping this wearable, in addition to the default of this category. Eg: When putting on a cape top-body, also hide feet.</p>

<code>hides</code>

<p>: List of categories of other wearables that should be hidden (but not unequipped) when equipping this wearable, in addition to the default of this category.</p>

<code>tags</code>

<p>: Tags used to make the wearable searchable in the marketplace.</p>

<code>representations</code>

<p>:</p>

<code>bodyShapes</code>

<li>: The list of avatar representations that can use this wearable. All smart wearables must be available for both male and female body shapes.</li>

<code>mainFile</code>

<li>: The main file with the 3D model of the wearable.</li>

<code>contents</code>

<li>: The full list of files used to render the 3D model of the wearable. For example, the 3D model could include textures as separate files.</li>

<code>overrideHides</code>

<li>: Any exceptions from the default</li>

<em>hide</em>

<li>behavior of this wearable category.</li>

<code>overrideReplaces</code>

<li>: Any exceptions from the default</li>

<em>replace</em>

<li>behavior of this wearable category.</li>

<code>category</code>

<p>: What wearable category to use. Possible values are:</p>

<p>’eyebrows'</p>

<p>’eyes'</p>

<p>‘facial_hair’</p>

<p>‘hair’</p>

<p>‘mouth’</p>

<p>‘upper_body’</p>

<p>’lower_body'</p>

<p>‘feet’</p>

<p>’earring'</p>

<p>’eyewear'</p>

<p>‘hat’</p>

<p>‘helmet’</p>

<p>‘mask’</p>

<p>’tiara'</p>

<p>’top_head'</p>

<p>‘skin’</p>

<p>‘hands_wear’</p>

<code>menuBarIcon</code>

<p>: Image to use on the “experiences” menu, to represent this portable experience, to represent the portable experience. This image should be at root level in your folder. The recommended image size is 256x256.</p>

<code>model</code>

<p>: The 3D model to use for the wearable. This file should be at root level in your folder.</p>

<code>bodyShape</code>

<p>: The avatar body type that this wearable is compatible with. Possible values:</p>

<li>male</li>

<li>female</li>

<li>both</li>

<code>collectionAddress</code>

<p>: The ethereum address of the published collection of wearables. This address is assigned once publishing, it can be left blank.</p>

<h2>The thumbnail</h2>

<p>You must include an image named</p>

<code>thumbnail.png</code>

<p>at root level in your folder. This image will be shown both in the backpack and the marketplace, to represent your wearable in 2d. The recommended required image size is 256x256.</p>

<p>Chose an image that sets player expectations and properly represents your creation.</p>

<h2>The Preview</h2>

<p>Running a preview of a portable experience is just like running that of a scene, simply click</p>

<strong>Run Scene</strong>

<p>on the editor, or run</p>

<code>npm run start</code>

<p>on the command line. If the</p>

<code>wearable.json</code>

<p>file is properly configured and the project is recognized as a smart wearable, you’ll notice that all the visible around you are the default empty parcels. In this preview mode, you are not restricted to any set of parcels, you can add 3D models or sounds anywhere in the world.</p>

<p>To test how the smart wearable behaves in the context of a scene, you can also run a preview of your wearable at the same time as you run a preview of one or several scenes by using a</p>

<p>. For example, you can run your smart wearable together with the</p>

<p>scene to test how it behaves on a busy scene, while on an elevator, etc.</p>

<h2>Tips</h2>

<li>When positioning an entity, note that positions are global, relative to the 0,0 coordinates of Genesis Plaza.</li>

<li>To react to nearby players:</li>

<li>use</li>

<code>getConnectedPlayers()</code>

<li>to know what players are already there, and</li>

<code>onPlayerConnectedObservable</code>

<li>/</li>

<code>onPlayerDisconnectedObservable</code>

<li>to track other players coming and going.</li>

<li>Be mindful that the loading of the smart wearable, surrounding scenes and other players may occur in different orders depending on the situation. If the player enters Decentraland with the smart wearable already on, it’s likely that your wearable’s global scene will load before other players do. On the other hand, if the player first loads into a scene and then puts on the wearable, it’s likely that other players will already be loaded by the time the wearable’s scene starts running.</li>

<li>For multiplayer experiences, wait till the player is connected to an island inside their realm. Fetch the realm data and check for the ‘room’ field. If the ‘room’ field is null, the player is not yet connected to an island and other players won’t be loaded yet. You can periodically check this every 1 second till the ‘room’ field is present, and only initialize your logic then.</li>

<li>To interact with surrounding scenes:</li>

<li>You can’t directly send any instructions to nearby scenes or other portable experiences, the</li>

<code>messageBus</code>

<li>is currently sandboxed for each portable experience/scene.</li>

<li>You can use an intermediate server to send information between the portable experience and a scene.</li>

<li>If you do a raycast, you can detect hits against the colliders of entities from the surrounding scenes. This can tell you the exact hit location, normal direction, and even the entity name and mesh name of the 3D model. This only works when hitting entities on scenes written with SDK7.</li>

<li>Kill a portable experience: Run the</li>

<code>kill()</code>

<li>method to self-terminate a portable experience.</li>

<h2>Publish</h2>

<p>To publish your smart wearable:</p>

<p>Make sure the information in</p>

<code>wearable.json</code>

<p>is accurate. If you used another project as a starting point, make sure the</p>

<code>id</code>

<p>is a unique identifier, not used by other wearables.</p>

<p>Run</p>

<code>npm run pack</code>

<p>on your project folder. This generates a</p>

<code>smart-wearable.zip</code>

<p>file in your project folder.</p>

<strong>📔 Note</strong>

<blockquote>: The output of</blockquote>

<code>npm run pack</code>

<blockquote>will indicate the size of the uncompressed exported project, it must be under 3MB. If larger than that, it won’t be accepted by the builder.</blockquote>

<p>Open the Builder, open the Collections tab, click + to upload a new wearable.</p>

<p>Drag your compressed</p>

<code>smart-wearable.zip</code>

<p>file into the Builder, verify that all the information is accurate.</p>

<p>Note: If your wearable is an upper_body or a lower_body and meant to be unisex, you need to do a workaround (even if both body shapes use the same model):</p>

<code>a) Select only Male and complete the process

b) Open the wearables in the editor, click the three dot options button, select “upload female representation”, and upload the 3D model for the female shape.</code>

<li>Open the editor and make sure the “hide” and “remove” categories are correctly set to disable other wearable categories when this wearable is on.</li>

<li>Create a new collection with this and perhaps other wearables.</li>

<li>Hit the 3 dots icon next to “Mint Items” and select “See in world”. This will open a tab with the explorer on Goerli, where you can try out all the wearables of your collection in Decentraland, and see how they behave in a more real scenario, for example running around Genesis Plaza.</li>

<li>At this point, your wearable is ready to be published.</li>

<h2>Restricted actions</h2>

<p>To prevent abuse, certain features aren’t permitted on portable experiences by default, and require adding a permission flag.</p>

<p>See</p>

<p>for more details.</p>

<h2>Limitations</h2>

<p>IMPORTANT: The entire smart wearable needs to fit within 3MB. This includes the 3D model, thumbnail, code, libraries, sound files, additional 3D models, UI images, etc. This limit is for the uncompressed folder. The builder will not let you upload larger wearables than this.

To check the size of your portable experience, run</p>

<code>npm run pack</code>

<p>, the project size is specified in the output text of the command. You can also verify this by uncompressing the generated</p>

<code>smart-wearable.zip</code>

<p>file and checking the size of the folder.</p>

<p>Smart wearables only run the portable experience for the player wearing the wearable. Other players don’t see the effects. For example, if the portable experience renders a pet that follows the player, other players around won’t see this pet. However, other players will see avatars perform animations that run as part of the wearable’s scene, even</p>

<p>uploaded as part of the smart wearable’s files.</p>

<p>Smart wearables only work when players have them on. For this reason, players can only have a limited number of activated smart wearables, and depending on what part of the body they take up, some will be incompatible with others. For example, you can’t have two hats at the same time, or a helmet and hair at the same time.</p>

<p>If a wearable is “hidden” but not “removed” by other wearables being worn, then the smart wearable can still be on, even if the corresponding wearable is not visible.</p>

<h2>Examples</h2>

<p>)</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/smart-wearables/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/workspaces/

<title>Workspaces | Decentraland Documentation</title>

<strong>Workspaces</strong>

<h1>Workspaces</h1>

<p>Run multiple Decentraland projects in preview by grouping these into a workspace. Run multiple adjacent scenes to see how they fit, or also run multiple</p>

<p>together to see how they interact with each other and with different scenes.</p>

<p>Running multiple projects in a workspace provides a much more complete testing alternative, to ensure different content works well together.</p>

<h2>Create a workspace</h2>

<p>Create a top-level folder to hold the workspace.</p>

<p>Inside this folder, add one folder at root level for each project you want to work with. You can drag in existing folders with scenes or smart wearables. For new folders, run</p>

<code>npx sdk-commands init</code>

<p>inside each, to create a Decentraland project.</p>

<p>Note: Make sure that the parcels on each of the scenes don’t overlap.</p>

<p>Standing on the workspace folder, run the following, to create the necessary files:</p>

<code>dcl workspace init</code>

<p>You can confirm that the projects are part of the workspace by running</p>

<code>dcl workspace ls</code>

<p>.</p>

<h2>Run a workspace</h2>

<p>Run</p>

<code>npm run start</code>

<p>on the root folder of the workspace. This runs all of the projects at the same time, viewable in a single preview window. This preview behaves just like when previewing a single scene.</p>

<p>Any smart wearables in the workspace are available to try on by looking for them in the backpack.</p>

<h2>Add projects</h2>

<p>Once a workspace is created, you can add additional projects</p>

<code>dcl workspace add</code>

<p>, including the relative address of the folder you want to add. For example</p>

<code>dcl workspace add my-other-example</code>

<p>.</p>

<p>You can also add a project that is not inside the workspace folder, by using the absolute path.</p>

<strong>📔 Note</strong>

<blockquote>: The folder must already contain a decentraland project initatied with</blockquote>

<code>npx sdk-commands init</code>

<blockquote>. It can’t be an empty folder.</blockquote>

<p>You can also edit the</p>

<code>dcl-workspace.json</code>

<p>file manually to add or remove projects. Modify the file to include the relative paths to each of the projects in the workspace in the</p>

<code>folders</code>

<p>array.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/smart-wearables/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/#required-permissions

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>A scene is a Decentraland project that is spatially delimited, and is mapped to one or several LAND parcels. If a scene is deployed to the Decentraland map, players can experience it by visiting the scene’s coordinates.</p>

<p>See</p>

<p>for a list of what files are used in a scene project.</p>

<h2>Metadata</h2>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary to load your scene. You’re also free to add any fields that you wish.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>npx update-parcels</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>npx update-parcels <parcel></code>

<p>For example:</p>

<code>npx update-parcels 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>npx update-parcels <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>npx update-parcels 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>npx update-parcels <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>npx update-parcels</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>It’s very important to give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these displayed on a modal when they select the parcels of your scene on the map. They will also see these in a confirmation screen when being</p>

<p>there by another scene. Setting up compelling data here can significantly help drive traffic to your scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is especially useful in large scenes, to prevent players from spawning too far away from the coordinates where they originally intended to load. To have many spawn points, simply list them as an array.</p>

<p>When there are multiple spawn points, the one that’s closest to the coordinates indicated by the player is picked.</p>

<p>If a coordinate is marked as</p>

<code>default</code>

<p>, it will always be used, regardless of if it’s the closest. If multiple spawn points are marked as</p>

<code>default</code>

<p>, the closest one of these is picked.</p>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<p>A scene can also have multiple spawn regions, just like it can have multiple spawn points.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are not affected by these permissions, and are free to use the corresponding functionality.</blockquote>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on smart wearables and portable experiences:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>disabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the scene metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for libraries, where the library might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>getSceneInformation</code>

<p>function:</p>

<p>Then you can call the</p>

<code>getSceneInformation()</code>

<p>function, which returns a json object that includes much of the contents of the scene.json file.

The example below shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getSceneInformation()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.

Do not use the deprecated</blockquote>

<code>getSceneInfo()</code>

<blockquote>function.</blockquote>

<p>The object returned by</p>

<code>getSceneInformation()</code>

<p>includes the following:</p>

<code>baseUrl</code>

<li>: The base URL where the scene’s content is hosted</li>

<code>content</code>

<li>: An array with all the files of the scene, including their hash, that can be used together with the baseUrl to retrieve them.</li>

<code>metadataJson</code>

<li>: The full contents of the scene’s scene.json, as a string. You must parse this to obtain specific values.</li>

<code>urn</code>

<li>: The unique urn for the scene as a whole.</li>

<p>The example below parses the contents from</p>

<code>metadataJson</code>

<p>to obtain values from properties in the scene.json file</p>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re interested in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene is listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/#required-permissions

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/trigger-emotes/

<title>Trigger emotes | Decentraland Documentation</title>

<strong>Trigger emotes</strong>

<h1>Trigger emotes</h1>

<p>You can make the player perform an animation as part of the scene’s code. This can help provide more immersion, and it can also help communicate what other players are doing to each other. The avatar animations are seen both by the player (in 3rd person view) and any other players around.</p>

<p>Animations done by the player are overriden by the default locomotion animations, like walking and jumping. So animations played by the scene only play while the player is standing still. If the player walks or jumps, any animations are interrupted.</p>

<strong>📔 Note</strong>

<blockquote>: Players can only be animated if they already are standing inside the scene’s bounds, not if they are on a neighboring scene. Portable experiences and smart wearables can play animations anywhere.</blockquote>

<h2>Default animations</h2>

<p>Use the</p>

<code>triggerEmote()</code>

<p>function ro run one of the default animations that players are able to play anywhere in Decentraland. This function takes a an object with a single property as an argument:</p>

<code>predefinedEmote</code>

<li>: A string name for an existing emote.</li>

<p>The following list covers some of the default emotes that are available to all players, all of these are valid values for the</p>

<code>predefinedEmote</code>

<p>field:</p>

<code>wave</code>

<code>fistpump</code>

<code>robot</code>

<code>raiseHand</code>

<code>clap</code>

<code>money</code>

<code>kiss</code>

<code>tik</code>

<code>hammer</code>

<code>tektonik</code>

<code>dontsee</code>

<code>handsair</code>

<code>shrug</code>

<code>disco</code>

<code>dab</code>

<code>headexplode</code>

<h2>Custom animations</h2>

<p>Use the</p>

<code>triggerSceneEmote()</code>

<p>to make the player perform a custom animation, stored as a .glb file as part of the scene’s asset. This function takes an object as an argument with the following arguments:</p>

<code>src</code>

<li>: A string with a path to the emote file.</li>

<code>loop</code>

<li>: If true, the animation will loop continuously until the player moves or the animation is stopped. False by default.</li>

<h2>Required permissions in smart wearables and portable experiences</h2>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are free to use avatar animations and are not affected by permissions.</blockquote>

<p>Smart wearables and portable experiences are only allowed to use this functionality if they add a corresponding permissions on the</p>

<code>scene.json</code>

<p>file. This applies to both predefined and custom animations. This is granted via the</p>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<p>permission.</p>

<p>See</p>

<p>for more details.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/smart-wearables/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/trigger-emotes/#custom-animations

<title>Trigger emotes | Decentraland Documentation</title>

<strong>Trigger emotes</strong>

<h1>Trigger emotes</h1>

<p>You can make the player perform an animation as part of the scene’s code. This can help provide more immersion, and it can also help communicate what other players are doing to each other. The avatar animations are seen both by the player (in 3rd person view) and any other players around.</p>

<p>Animations done by the player are overriden by the default locomotion animations, like walking and jumping. So animations played by the scene only play while the player is standing still. If the player walks or jumps, any animations are interrupted.</p>

<strong>📔 Note</strong>

<blockquote>: Players can only be animated if they already are standing inside the scene’s bounds, not if they are on a neighboring scene. Portable experiences and smart wearables can play animations anywhere.</blockquote>

<h2>Default animations</h2>

<p>Use the</p>

<code>triggerEmote()</code>

<p>function ro run one of the default animations that players are able to play anywhere in Decentraland. This function takes a an object with a single property as an argument:</p>

<code>predefinedEmote</code>

<li>: A string name for an existing emote.</li>

<p>The following list covers some of the default emotes that are available to all players, all of these are valid values for the</p>

<code>predefinedEmote</code>

<p>field:</p>

<code>wave</code>

<code>fistpump</code>

<code>robot</code>

<code>raiseHand</code>

<code>clap</code>

<code>money</code>

<code>kiss</code>

<code>tik</code>

<code>hammer</code>

<code>tektonik</code>

<code>dontsee</code>

<code>handsair</code>

<code>shrug</code>

<code>disco</code>

<code>dab</code>

<code>headexplode</code>

<h2>Custom animations</h2>

<p>Use the</p>

<code>triggerSceneEmote()</code>

<p>to make the player perform a custom animation, stored as a .glb file as part of the scene’s asset. This function takes an object as an argument with the following arguments:</p>

<code>src</code>

<li>: A string with a path to the emote file.</li>

<code>loop</code>

<li>: If true, the animation will loop continuously until the player moves or the animation is stopped. False by default.</li>

<h2>Required permissions in smart wearables and portable experiences</h2>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are free to use avatar animations and are not affected by permissions.</blockquote>

<p>Smart wearables and portable experiences are only allowed to use this functionality if they add a corresponding permissions on the</p>

<code>scene.json</code>

<p>file. This applies to both predefined and custom animations. This is granted via the</p>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<p>permission.</p>

<p>See</p>

<p>for more details.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/portable-experiences/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/#feature-toggles

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>A scene is a Decentraland project that is spatially delimited, and is mapped to one or several LAND parcels. If a scene is deployed to the Decentraland map, players can experience it by visiting the scene’s coordinates.</p>

<p>See</p>

<p>for a list of what files are used in a scene project.</p>

<h2>Metadata</h2>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary to load your scene. You’re also free to add any fields that you wish.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>npx update-parcels</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>npx update-parcels <parcel></code>

<p>For example:</p>

<code>npx update-parcels 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>npx update-parcels <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>npx update-parcels 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>npx update-parcels <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>npx update-parcels</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>It’s very important to give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these displayed on a modal when they select the parcels of your scene on the map. They will also see these in a confirmation screen when being</p>

<p>there by another scene. Setting up compelling data here can significantly help drive traffic to your scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is especially useful in large scenes, to prevent players from spawning too far away from the coordinates where they originally intended to load. To have many spawn points, simply list them as an array.</p>

<p>When there are multiple spawn points, the one that’s closest to the coordinates indicated by the player is picked.</p>

<p>If a coordinate is marked as</p>

<code>default</code>

<p>, it will always be used, regardless of if it’s the closest. If multiple spawn points are marked as</p>

<code>default</code>

<p>, the closest one of these is picked.</p>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<p>A scene can also have multiple spawn regions, just like it can have multiple spawn points.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are not affected by these permissions, and are free to use the corresponding functionality.</blockquote>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on smart wearables and portable experiences:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>disabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the scene metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for libraries, where the library might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>getSceneInformation</code>

<p>function:</p>

<p>Then you can call the</p>

<code>getSceneInformation()</code>

<p>function, which returns a json object that includes much of the contents of the scene.json file.

The example below shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getSceneInformation()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.

Do not use the deprecated</blockquote>

<code>getSceneInfo()</code>

<blockquote>function.</blockquote>

<p>The object returned by</p>

<code>getSceneInformation()</code>

<p>includes the following:</p>

<code>baseUrl</code>

<li>: The base URL where the scene’s content is hosted</li>

<code>content</code>

<li>: An array with all the files of the scene, including their hash, that can be used together with the baseUrl to retrieve them.</li>

<code>metadataJson</code>

<li>: The full contents of the scene’s scene.json, as a string. You must parse this to obtain specific values.</li>

<code>urn</code>

<li>: The unique urn for the scene as a whole.</li>

<p>The example below parses the contents from</p>

<code>metadataJson</code>

<p>to obtain values from properties in the scene.json file</p>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re interested in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene is listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/design-experience/mvp-guidelines/

<title>Scene MVP Guidelines | Decentraland Documentation</title>

<strong>Scene MVP Guidelines</strong>

<h1>Scene MVP Guidelines</h1>

<p>The purpose of this document is to help guide you through the process of building the first iterations of scenes in Decentraland. We’ll refer to these as a Minimum Viable Product (MVP).</p>

<strong>When creating the Minimum Viable Product (MVP) for your scene, you need to think about two areas of focus:</strong>

<li>The basic user experience and functionality of your project.</li>

<li>The creation of a basic “pipeline”, or team workflow and content management system for building your experience and iteratively improving it.</li>

<p>An MVP should not try to demonstrate every possible outcome of every possible experience. Instead, an MVP should be the best first impression of your experience that you can make using Decentraland’s SDK.</p>

<p>It is important to consider your own limitations, how you plan to provide content to your users, and the expectations of your users. Approaching your MVP in this way requires three different perspectives:</p>

<li>As a developer or producer, how do I deliver an experience to my user/player?</li>

<li>As a user or player, what do I expect from this experience?</li>

<li>As a contributor or stakeholder, how do I contribute to the pipeline or experience?</li>

<p>It’s important to distinguish this approach from traditional agile development, because you may have to use non-optimum methods to meet your design goals.</p>

<p>You will have to examine your own goals in the context of your users’ expectations to decide if a certain release is focused more on the player, the pipeline and content contributors, or little of both.</p>

<p>When planning each release, it is critical that you conscientiously and deliberately set your priorities according to each of these three perspectives.</p>

<p>You can expect your development backlog to follow two tracks:</p>

<li>The backlog of user experiences you want to create.</li>

<li>The development of the tools and interfaces needed to build your delivery pipeline. (Or to optimize your existing pipeline for contributors as well as your development team.)</li>

<p>These two tracks will also follow two different approaches to testing:</p>

<li>Testing your user experiences is more akin to traditional user interface testing, and does not require the same scripting resources.</li>

<li>Testing your tools and pipeline interfaces will require more technical resources.</li>

<p>The sooner you can get a value proposition in front of your user or player, the sooner you can get feedback to either confirm or reject that proposition. Confirming value quickly is critical. Many experienced developers will share stories of how they were certain beyond a shadow of a doubt of how amazing a new mechanic would be until they used it and it felt awkward and glitchy, the players didn’t respond to it at all, or it didn’t solve a consumer want/need. You want to fail quickly with as little effort as possible, so that you can learn from your failure and plan the next iteration.</p>

<p>How do you fail quickly? You do the minimum needed to get your player to touch your product.</p>

<h2>Factors for Minimum Viable Products</h2>

<p>Here is the list of factors to consider for your basic MVP. It is acceptable to state that you will use something as a placeholder and will then phase it out as you develop a more solid replacement.</p>

<p>Art Creation</p>

<li>First, begin with basic still images</li>

<li>Your first test should be for style: does the style you’ve chosen appeal to your users?</li>

<li>This could be the start of a style guide to provide to an outsourced artist</li>

<p>Scene Creation</p>

<li>Develop a basic sense of your space</li>

<li>Player should feel they are in a new, unique space</li>

<li>Delineate your space from neighboring spaces</li>

<li>Borders are evident and obvious – if only by a drawn line</li>

<li>Cover entire area with static content/art</li>

<p>Art Rendered in Scene</p>

<li>Using billboards is ok or other signage (this could simply be actual billboards or more sophisticated camera facing sprites)</li>

<li>Establish the tone and aesthetics of your space (i.e. style, bright, dark)</li>

<li>Note your process: how was art created and deployed into the scene?</li>

<li>How do you want to organize your art files for repeated deployment?</li>

<p>Player experience</p>

<li>Players are able to visit your space/scene</li>

<li>Players can distinguish your space from neighboring spaces</li>

<p>Pipeline Goals</p>

<li>Deploy sample static scene: no interaction with player</li>

<li>Deploy animated scene: elements like water fountains or waving flags loop their animations</li>

<li>Deploy interactive scene: including player engagement</li>

<li>Demonstrate deploy pipeline by re-deploying content: from art creation to in scene including scripting + QA]</li>

<li>Expose pipeline gaps: identify the unknowns in specific content deployment areas</li>

<h2>Levels of prototypes</h2>

<p>Failing quickly allows you to develop your experience by creating successive prototypes, with each iteration building upon the last.</p>

<strong>Start with a single player prototype. Then you can plan for scripting multiplayer interactions. Finally, you can tackle your persistent core loop that demonstrates transactional layers.</strong>

<strong>What’s a persistent core loop?</strong>

<p>In game design, a persistent core loop is the fundamental “game loop” that drives player actions and the game’s response to those actions. These persistent loops extend to any form of virtual experience (like those provided by Districts).</p>

<strong>📔 Note</strong>

<blockquote>: The Decentraland client borrows some architectural ideas from</blockquote>

<blockquote>and only renders a scene when a change has taken place, not at a constant rate.</blockquote>

<strong>What are transactional layers?</strong>

<p>The transactional layers are the interfaces between systems like an update to the blockchain or another application that has been interfaced with your experience to maintain a persistent record of player actions. Creating and maintaining this persistent record is what builds a more personal experience.</p>

<p>We recommend creating your MVP as a single player experience.</p>

<p>For example, you could design a scene with the following successive experiences:</p>

<li>A single player can enter the world.</li>

<li>The player can interact with one or two simple entities within the scene.</li>

<li>Other players can join and interact with the world and the other player.</li>

<li>Finally, you can add the ability to remember that each player entered the scene, and to track the players’ events and activities.</li>

<h2>How to share your MVP</h2>

<p>Although the Decentraland world is not yet open to all, you can upload a scene preview to a server and easily share a link to it with people who can give you feedback.</p>

<p>Even once Decentraland is made available to all, we still recommend testing changes with test users in a separate preview server first, before uploading a new version of your scene to Decentraland.</p>

<p>Read</p>

<p>for details on how to upload your scene preview to a free server.</p>

<h2>Additional considerations</h2>

<p>Once basic use cases are covered, you can start to get more sophisticated with your release management strategy by focusing on mechanics.</p>

<strong>Mechanics</strong>

<p>are a broad term covering all of the actions a player can take and the responses the system will provide based on those player actions.</p>

<strong>Device interoperability</strong>

<p>is an important thing to be aware of. Users of your scene may be accessing your scene using a desktop, a mobile device or a VR headset. Users should be able to interact with your scene reasonably well using either. For those using a VR headset try to avoid dizzying movements that could cause motion sickness.</p>

<strong>Audio</strong>

<p>is another critical aspect of a scene’s atmosphere. Background sounds like wind, crickets, distant conversations, maybe even music can be a very powerful way to increase immersion and give context. You can also change how volume levels relate to distance from the sound source to put more or less emphasis on a sound’s location.</p>

<p>Read</p>

<p>for a detailed look at a number of other considerations.</p>

<p>Consider the MVP as one of many prototypes that you can use to establish your cadence for releases once you have established your pipeline. The focus of each release may vary, or it may be a hybrid of each aspect of the experience. However, you should aim to deliver successively more complicated experiences, each iteration building upon the last.</p>

<strong>MVP</strong>

<li>: Single player</li>

<strong>Release 2</strong>

<li>: Add multiplayer and/or interaction support</li>

<strong>Release 3</strong>

<li>: Introduce your first mechanic</li>

<strong>Release 4</strong>

<li>: Add audio support</li>

<strong>Release 5</strong>

<li>: Finalize your art pipeline</li>

<p>For example, let’s say we are building an MVP for a Frisbee golf game. The MVP will include some still images of the course. The player may even be able to throw a disc, in a very rudimentary, block-style fashion. This allows us to work out our basic throwing mechanics. The next release may include a prototype for multiplayer support so we can demo and test two users logged in and playing on our LAND at the same time.</p>

<p>Remember, while the end goal is a truly immersive 3D world, that is not where your MVP will start. Getting a player into your world as quickly as possible should be your first goal. Taking weeks, not months, to test your releases is critical to learning and iterating without wasting effort.</p>

<p>We strongly recommend that you stay mindful of the first impression your experience presents. An empty experience will leave players disappointed. On the other hand, a scene with some initial content and basic experiences shows players the potential for what is to come and encourages them to engage with your community and return to the next few releases.</p>

<h2>Persistence factors to consider</h2>

<p>Ultimately, you want reach a level of persistence where you can demonstrate that the transactional layers of your architecture are operational. Transactional is not limited to the players actions, but also the system’s reactions to players.</p>

<strong>Account information</strong>

<li>: login name, time zone, location for your specific experience/game</li>

<strong>Leaderboard stats</strong>

<li>: previous game play results, global/regional standings, competitions</li>

<strong>Identity validation</strong>

<li>: Ethereum wallet address, or any other backend identity management</li>

<strong>Blockchain updates</strong>

<li>: as required based on your experience/game to update the blockchain ledger for transactional transparency</li>

<strong>Runtime persistence</strong>

<li>: temporary data for persistence across a potentially distributed platform (i.e. health for just the single game experience)</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/player/market/rentals/

<title>Rentals | Decentraland Documentation</title>

<strong>Rentals</strong>

<h1>Rentals</h1>

<h1>Glossary</h1>

<strong>Land Owner:</strong>

<p>Account (address) that owns LAND, it could be a Parcel, an Estate, or both.</p>

<strong>Tenant:</strong>

<p>Account (address) that rents LAND from a LAND Owner. This is also the only Account that can change the Address that has Operator Permissions.</p>

<strong>Operator Permission:</strong>

<p>The address with this permission is the only one that can deploy scenes in that LAND.</p>

<strong>Transactions:</strong>

<p>Ethereum Blockchain transactions that cost gas.</p>

<h1>Intro</h1>

<p>The new Renting System allows LAND Owners and Tenants to</p>

<strong>Rent LAND in a secure and trustless way</strong>

<p>by using a combination of signatures that are stored in a server handled by the Decentraland Foundation (off-chain) and Ethereum transactions (on-chain).</p>

<p>For instance, a DJ could find a cool plot of LAND, rent it and deploy a nightclub to play every Saturday. A University could rent an Estate and build a campus for its students.</p>

<p>Below you will find all the steps you need to follow to Rent a LAND, and the transactions involved for both parties.</p>

<h1>For LAND Owners</h1>

<h2>List LAND for Rent</h2>

<p>As a LAND Owner, you can list your LAND (Parcels or Estates) for Rent in the</p>

<p>> My Assets > LAND.</p>

<p>In order to do this on-chain, the LAND Owner has to approve the Rent Smart Contract to use the LAND on their behalf. Then every listing would need a signature from the Owner as well.</p>

<p>You can set a rental price per day in MANA and the amount of days you want to allow people to rent it. The price per day times the number of days in the period is what the tenant will pay</p>

<strong>upfront, and in total</strong>

<p>for that rent.</p>

<p>After defining the Price per Day, you need to select the number of days that Users can rent your LAND. For example, if you select 7 and 30 days only, the Tenant can only choose between those 2 options. In case 30 days option is selected by the Tenant, that would be the duration of the rent from the day it is confirmed.</p>

<p>You can also set an expiration date for the listing. This means that, if the LAND wasn’t rented until the selected date, the listing will be removed from the Marketplace. Also, the smart contract will reject the expired signature so that no one can rent it for the listing price and duration previously selected. This is a security measure to prevent it to be rented for an undesired price or duration.</p>

<p>After the price, rent period and listing expiration date are set, your LAND will appear as available for rent in the Marketplace.</p>

<aside>💡 When LAND is rented by a Tenant, it can not be sold until it’s claimed back. Bids from potential buyers can not be received either.</aside>

<aside>💡 Voting Power is kept by the LAND Owner, even if it is rented.</aside>

<h2>Edit or Cancel a Listing</h2>

<p>After the LAND is Listed for Rent in the Marketplace, and before anybody rents it, you can edit the conditions of the Listing by clicking on the pencil icon in the LAND detail. You can also remove the Listing from the Marketplace and the blockchain.</p>

<aside>💡 Edit and cancel require a transaction, which costs gas. See Transactions section below for more details.</aside>

<h2>After the Rent is over</h2>

<p>After the Rent is over, you can either</p>

<strong>Claim your LAND Back, or List it for Rent Again</strong>

<p>.</p>

<strong>Operator Permissions are not transferred automatically back to the LAND Owner</strong>

<p>. In order to get them back, the LAND Owner has to Claim the LAND back by sending that transaction and paying for the gas fee. Confirming the transaction will take out Operator Permissions from the Tenant and give them back to the LAND Owner.</p>

<p>The other possibility is to List the LAND for Rent Again, instead of claiming it back. This will not require paying for another transaction, but</p>

<strong>Operator Permissions will be kept by the previous Tenant until a new Tenant confirms a new Rent.</strong>

<p>The LAND Owner can edit the price, rent period, and listing expiration date for the new listing.</p>

<p>Both actions can be done from the LAND detail page in the Marketpalce.</p>

<h2>Renting Status</h2>

<p>You can check the Status of any rented LAND in My Assets > Store > On Rent. The possible status are:</p>

<li>Listed for Rent - The listing was confirmed and it’s available for users to rent in the Marketplace</li>

<li>Rented Period Over - At this stage, the LAND is available to Claim Back or List Again for Rent by the LAND Owner</li>

<li>Rented until</li>

<em>“date”</em>

<li>- The LAND is already rented and the Tenant has Operator Permissions until it’s claimed back or rented by another user</li>

<h1>For Tenants</h1>

<h2>Rent LAND</h2>

<p>All users can find LAND listed for rent in the Marketplace under the LAND section.</p>

<p>There are LANDs that are available for Sale or Rent. In case both options are available, you can see the conditions available for each one by clicking on the toggle Sale/Rent.</p>

<p>Once you find the LAND you want to rent, you need to select the Rent Period, this is the days you will have the LAND. After selecting the Rent Period, you will see the total price to be paid for the Rent.</p>

<p>You’ll need to approve the Rent Smart Contract to take the MANA from your account before you proceed.</p>

<p>Before you confirm the Rent, you can decide who will manage the LAND (Operator Permission). It can be yourself or any other address you choose.</p>

<p>Operator Permission can be changed later by the Tenant (the address who rented the LAND in the first place) from the</p>

<p>.</p>

<p>After selecting all the details and approving the Rent Smart Contract to handle your MANA, you can confirm the Rent by sending a transaction.</p>

<p>And you are all set! you can start working on your LAND, and deploy a scene using the Builder or the SDK.</p>

<p>Note: after the Rent ends, the Tenant will still have Operator Permissions until the LAND Owner Claims it back, or somebody else rents it.</p>

<strong>Make sure you save your content before the end of the rent, otherwise it could be lost.</strong>

<aside>💡 Renting LAND does not transfer Voting Power to the Tenant. Voting Power is kept by the LAND Owner as defined by the DAO in this [Proposal]([https://market.decentraland.org/](https://governance.decentraland.org/proposal/?id=c98bd010-74b1-11ed-a9bf-f772a12a0556))</aside>

<h1>Transactions</h1>

<p>For the sake of</p>

<strong>security and decentralization</strong>

<p>, the Renting system relies on the Ethereum blockchain as a source of truth.</p>

<p>But, not every action involved requires an entry in the blockchain. If that was the case, it would be too expensive for both parties.</p>

<p>Transactions in the blockchain are minimum in order to provide a</p>

<strong>robust and trustless system for LAND renting while keeping it affordable.</strong>

<p>These are all the transactions to consider:</p>

<h2>For Land Owners</h2>

<h3>List for Rent</h3>

<p>Before Listing the first Parcel or Estate for rent, LAND Owners need to allow the Rents Smart Contract to operate LAND on their behalf. This has to be done only once for Parcels and only once for Estates.</p>

<h3>Claim LAND Back or List for Rent Again</h3>

<p>After the renting period ends,</p>

<strong>Operator Permissions are not transferred automatically back to the LAND Owner</strong>

<p>. In order to get them back, the LAND Owner has to Claim the LAND back by sending that transaction and paying for the gas fee.</p>

<p>Another possibility is to List the LAND for Rent Again, instead of claiming it back. This will not require paying for another transaction, but Operator Permissions will be kept by the previous Tenant until a new Tenant confirms a new Rent.</p>

<h3>Edit Listing</h3>

<p>If either the Price, Rent Period, or Expiration Date is changed, a transaction has to be sent by the LAND Owner in order to protect themselves from somebody using the previous listing signature on the Smart Contract directly (not from the Marketplace UI) and getting it from a lower price than desired or for an undesired duration.</p>

<h2>For Tenants</h2>

<h3>Allow Rent Contract to operate your MANA</h3>

<p>Whether it’s a Parcel or an Estate, every user that wants to Rent LAND has to send one transaction to allow the Rent Smart Contract to operate MANA on their behalf. This is needed because the Smart Contract has to pull the MANA and transfer it to the LAND Owner when the rent is activated. This is done only once for all LAND to be rented from that moment onwards.</p>

<h3>Rent LAND</h3>

<p>After approving the Rent Smart Contract to operate your MANA, you are ready to confirm your first Rent. Once you find the LAND you want, choose the rent period, and confirm the Rent transaction, Operator Permissions are transferred to the selected address.</p>

<p>If you want to rent another Parcel or Estate, you only need to send one transaction to confirm it, there is no need to approve the Smart Contract to operate your MANA again.</p>

<h3>Change Operator</h3>

<p>At the moment of renting the LAND, the user can choose which address will have Operator Permissions for that LAND. If that address wants to be changed, a transaction has to be sent.</p>

<h1>Smart Contract Wallets</h1>

<p>The Rentals feature relies heavily on off-chain signatures. Off-chain actions allow Land Owners to list LANDs for rent without paying the transaction cost.</p>

<p>By signing a listing, the Rent Smart Contract can verify that the listing was created by the signer.</p>

<p>Signing has the particularity that it requires a private key. All EOA (Externally Owned Accounts) have one, and they can sign listings with it. The Rentals Smart Contract will then verify the EOA generated signature when executing a rental.</p>

<p>Smart Contracts Wallets, which are Smart Contracts. Do not have a private key, thus, they are unable to sign messages. Instead, an EOA authorized by the Smart Contract Wallet has to sign.</p>

<p>To support these signatures, the Rent Smart Contract verifies with the Smart Contract Wallet if the signature is valid by following the</p>

<p>standard. If the signature is valid, the rental can be executed.</p>

<p>The Smart Contract Wallet not only has to have the standard signature verification method defined in the EIP-1271 but also the token receiver method defined in the</p>

<p>. This is required while claiming LAND back because the Rent Smart Contract will call a</p>

<code>safeTransferFrom</code>

<p>to return the NFT to the Smart Contract Wallet, and if it has not implemented the appropriate</p>

<code>onERC721Received</code>

<p>function, it will fail to recover the LAND.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/player/market/marketplace/

<title>Marketplace | Decentraland Documentation</title>

<strong>Marketplace</strong>

<h1>Marketplace</h1>

<p>The Marketplace is the go-to place to trade and manage all your Decentraland on-chain assets.</p>

<p>Access the Marketplace at</p>

<p>.</p>

<p>The Marketplace allows you to:</p>

<strong>Sell</strong>

<li>parcels and Estates of LAND, wearables, and unique names. Set your own price in MANA and an expiration date for the offer.</li>

<strong>Buy</strong>

<li>parcels and Estates, wearables, and unique names that are for sale.</li>

<strong>Transfer</strong>

<li>your Decentraland assets to another user.</li>

<strong>Explore</strong>

<li>the world through a map to see who owns what, existing wearables or claimed avatar names.</li>

<strong>📔 Note</strong>

<blockquote>: Use</blockquote>

<blockquote>to:</blockquote>

<strong>Name</strong>

<li>your parcels and Estates and give them a public description.</li>

<strong>Grant permissions</strong>

<li>to other users, allowing them to deploy on your LAND.</li>

<strong>Manage</strong>

<li>to create or dissolve estates.</li>

<h2>Your Wallet</h2>

<p>Before using</p>

<p>, connect and log into an Ethereum client account that can interact with the web browser. We recommend using</p>

<p>. We also support the use of a</p>

<p>hardware wallet.</p>

<strong>📔 Note</strong>

<blockquote>: If you would like to use your Ledger hardware wallet in the Marketplace, it will require you to connect it towards MetaMask. Please ensure you follow all the</blockquote>

<blockquote>and updates to allow a seamless Ledger usage.</blockquote>

<p>When navigating the Marketplace, your wallet address is treated as your account, you don’t need any additional log in.</p>

<p>The Marketplace currently hosts LAND and names solely on Ethereums network. Wearables differ between Ethereum and Polygons network. Ethereum based transactions require a GAS fee, paid in Ethereum. Wheras Polygon based transactions only require a small amount of MATIC, to perform actions in the Marketplace.</p>

<h2>The Atlas View</h2>

<p>The Atlas view gives you a bird’s-eye perspective of every color coded parcel, Estate, road, district, and plaza in Decentraland.</p>

<p>You can click and drag the map to move around, zoom in and out, or hover your cursor over a parcel to see its x,y location and owner.</p>

<p>Any parcel that is currently for sale in the Marketplace will be highlighted.</p>

<p>Click on a parcel to view it’s status, its coordinates, and its owner’s public address (if it has an owner). From this screen you can also buy or place a bid on the parcel.</p>

<h2>The Marketplace View</h2>

<p>Select the</p>

<strong>Browse</strong>

<p>tab to see all the items that are for sale.</p>

<li>Select the</li>

<strong>Category</strong>

<li>to view only a specific type of item .</li>

<strong>Order</strong>

<li>them by different criteria like most recent, cheapest, etc.</li>

<li>Toggle</li>

<strong>On sale</strong>

<li>off to view items that aren’t for sale.</li>

<strong>Filter</strong>

<li>items by name to find something specific.</li>

<h2>Buy MANA</h2>

<p>To buy MANA in exchange for Ether:</p>

<li>Open your user</li>

<em>Settings page</em>

<li>.</li>

<li>Click</li>

<strong>Buy More</strong>

<li>next to your MANA balance.</li>

<li>This takes you to</li>

<li>, where you can easily exchange Ether to MANA.</li>

<li>Set an amount of MANA you’d like to receive or the amount of Ether you’d like to convert, then click</li>

<strong>Swap Now</strong>

<li>.</li>

<li>Confirm this transaction on your Ethereum client and wait for the network to verify it.</li>

<h2>Buy items</h2>

<p>To buy LAND, Estates, wearables or unique names in Decentraland:</p>

<li>Browse offers to find something on same that you’d like to buy and click it to open its details.</li>

<strong>💡 Tip</strong>

<blockquote>: For LAND and Estates, you can also browse using the</blockquote>

<em>Atlas</em>

<blockquote>view.</blockquote>

<p>On it’s details page, click</p>

<strong>Buy</strong>

<p>.</p>

<p>Confirm this transaction on your Ethereum client and wait for the network to verify it.</p>

<strong>📔 Note</strong>

<blockquote>: If this is your first time buying something on the Marketplace, you will also be asked to confirm a one-time transaction to allow the Marketplace to accept MANA.</blockquote>

<h2>Place a bid on an item</h2>

<p>If an item isn’t listed on sale, you can still place a</p>

<em>bid</em>

<p>on it and offer to buy it at a specific price. The other steps of the process are just like those of buying an item.</p>

<strong>💡 Tip</strong>

<blockquote>: View items that aren’t for sale by untoggling the</blockquote>

<em>On sale</em>

<blockquote>option. For LAND and Estates, you can also browse using the</blockquote>

<em>Atlas</em>

<blockquote>view and select any parcel.</blockquote>

<strong>📔 Note</strong>

<blockquote>: If this is your first time placing a bid on the Marketplace, you will also be asked to confirm a one-time transaction to allow the Marketplace to handle bids.</blockquote>

<p>To view a list of your open and pending bids, select</p>

<em>My Bids</em>

<p>on the top navbar.</p>

<p>From this screen you can also change the price of your bid by clicking</p>

<em>Update</em>

<p>. This screen also shows bids made by other users on items you own.</p>

<h2>Sell a parcel or Estate</h2>

<p>To sell one of your items:</p>

<li>Open</li>

<strong>My Assets</strong>

<li>and open its details page.</li>

<li>In the details page, click</li>

<strong>Sell</strong>

<li>.</li>

<li>Set a price and expiration date and click</li>

<strong>List for sale</strong>

<li>. Then retype the price you’re selling it at to confirm.</li>

<li>Confirm this transaction on your Ethereum client and wait for the network to verify it.</li>

<strong>📔 Note</strong>

<blockquote>: If this is your first time selling an item of this asset type on the Marketplace, you will also be asked to confirm a one-time transaction to allow the Marketplace to accept MANA.</blockquote>

<p>You can change the price of a sale that you already put on offer without having to cancel and re-create the sale. Just click</p>

<strong>Update price</strong>

<p>in the parcel or Estate’s details page.</p>

<h2>See your activity history</h2>

<p>Open the notifications page by clicking the bell icon at the top of the screen.</p>

<p>The notifications page displays a list of all the recent transactions that you have carried out, together with their status.</p>

<p>Click a transaction to see more details about it on Etherscan.</p>

<strong>📔 Note</strong>

<blockquote>: This screen only shows transactions that were initiated by you. It doesn’t show the sale of tokens, since that action is initiated by the buyer.</blockquote>

<h2>Transfer LAND</h2>

<p>To transfer a LAND parcel or Estate to another user:</p>

<p>Open</p>

<strong>My Assets</strong>

<p>and open the details page of the parcel or the Estate you’d like to transfer and click</p>

<strong>Transfer</strong>

<p>.</p>

<p>Enter the public address of the Ethereum wallet of the recipient.</p>

<strong>📔 Note</strong>

<blockquote>: Please double check this address, since you cannot cancel the operation. While the recipient could always transfer the LAND back to you, the original owner cannot reverse the action.</blockquote>

<li>Click</li>

<strong>Submit</strong>

<li>.</li>

<li>Confirm this transaction on your Ethereum client and wait for the network to verify it.</li>

<strong>📔 Note</strong>

<blockquote>: If the LAND parcel or Estate is currently on sale, you won’t be able to transfer it. First click</blockquote>

<strong>Remove listing</strong>

<blockquote>to cancel the sale.</blockquote>

<h2>Providing Feedback</h2>

<p>We’ve worked hard to ensure that the Marketplace is simple and easy to use but if you ever have questions or feedback please reach out to us using the in-app Intercom widget.</p>

<p>As with all of our other tools, the Marketplace is open-source software, and</p>

<p>. Feel free to create an issue, or submit a pull-request!</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing-permissions/

<title>Publishing options | Decentraland Documentation</title>

<strong>Publishing options</strong>

<h1>Publishing options</h1>

<p>To invite others to visit a scene you built, you’ll need to publish it in Decentraland. To do this, you’ll need to have deploy permissions to Decentraland parcels or own a Decentraland name in order to deploy to a Decentraland World.</p>

<p>Decentraland is made up of</p>

<em>parcels</em>

<p>of LAND, each 16 meters by 16 meters. A</p>

<em>scene</em>

<p>is an experience that is built on one or several parcels.</p>

<p>This document gives an overview on the different ways to obtain permissions.

See</p>

<p>for instructions on how to publish once you’ve obtained these.</p>

<h2>LAND permission options</h2>

<p>In order to publish to LAND in Genesis City, you can do the following:</p>

<strong>Rent LAND</strong>

<li>: Purchase the right to deploy and keep your content on certain parcels for a fixed period of time. See</li>

<li>.</li>

<strong>Buy land</strong>

<li>: Buy land parcels, and publish your content for as long as you wish. See</li>

<li>.</li>

<strong>Get permissions from an owner</strong>

<li>: Several land owners and districts manage large extensions of land and are willing to freely host content from others if it fits their theme and the kind of environment they want to create. Connect with them in the</li>

<li>.</li>

<strong>Worlds</strong>

<li>: You can also deploy a stand-alone scene as a Decentraland World. Worlds exist outside the grid of Genesis City, and can be accessed by name. See</li>

<strong>📔 Note</strong>

<blockquote>: You can also deploy scenes to a test server where players are not around. The same permissions per parcel apply when deploying to the test server, see</blockquote>

<blockquote>for more details.</blockquote>

<h2>Get DAO funding</h2>

<p>If you have a great idea and the means to achieve it, but need financing, you can request for a grant in the DAO. If the proposal convinces enough people from the community to vote on it, you can get a sum of money to achieve your vision, including funds for buying or renting LAND.</p>

<p>See</p>

<p>.</p>

<h2>How land permissions work</h2>

<p>LAND tokens can manage permissions that allow the following different kinds of roles to deploy to a particular parcel or estate.</p>

<strong>LAND owner</strong>

<li>: The person that owns the token in their Ethereum wallet. This user can always deploy, assign other roles, or transfer the token (unless the land is currently rented by someone else).</li>

<strong>LAND operator</strong>

<li>: The operator is only able to deploy, as long as they hold this role. The operator’s address is referenced by the token, without needing to own anything. The owner can assign and revoke operator permissions to any number of addresses. See</li>

<li>.</li>

<p>When renting a land, the tennant who pays for the rent gets to chose a single address that will hold a</p>

<strong>LAND Operator</strong>

<p>role for the duration of the rent (this can be their own address, or someone else’s). While the rent is active, none of the original holders of roles can interfere with the content on that LAND or transfer the token.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing-permissions/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing/#the-test-server

<title>Publishing a scene | Decentraland Documentation</title>

<strong>Publishing a scene</strong>

<h1>Publishing a scene</h1>

<h2>Before you begin</h2>

<p>Make sure of the following:</p>

<p>Your scene complies with all of the</p>

<p>. Most of these are validated each time you run a preview of your scene.</p>

<p>You have a</p>

<p>account, with your LAND parcels assigned to it.</p>

<p>You own the necessary amount of adjacent LAND parcels. Otherwise you can purchase LAND in the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Multi-parcel scenes can only be deployed to adjacent parcels.</blockquote>

<h2>Check scene data</h2>

<p>When deploying, the CLI reads information from the</p>

<em>scene.json</em>

<p>to know where to deploy your scene to.</p>

<p>Open your scene’s</p>

<em>scene.json</em>

<p>file and complete the following data:</p>

<strong>title</strong>

<p>: The title is displayed on the UI under the mini-map, whenever players enter your scene. It also shows on the teleport popup.</p>

<strong>description</strong>

<p>: A description of what players will find in your scene. This is displayed on the teleport popup.</p>

<strong>navmapThumbnail</strong>

<p>: An image that represents your scene. This is displayed on the teleport popup. The image should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels.</p>

<strong>Parcels</strong>

<p>: The coordinates of the parcels that will be occupied by your scene</p>

<strong>Base</strong>

<p>: The coordinates of the parcel that will be considered the [0,0] coordinate of the scene. If your scene has multiple parcels, it should be the bottom-left (South-West) parcel.</p>

<strong>spawnPoints</strong>

<p>: A set of coordinates inside the scene (relative to the scene’s base parcel) where players spawn into. By default players spawn onto the</p>

<em>0,0,0</em>

<p>location of the scene (bottom-left corner). Use this to start out in a specific location, set a region to prevent players from overlapping with each other when they first appear.</p>

<strong>tags</strong>

<p>: A set of tags that describe your scene. These are used to help players and users explore Decentraland in a better way since they are able to find the content that they may be interested in.</p>

<p>.</p>

<strong>rating</strong>

<p>: This is used to classify the content of your scene based on its appropriateness for different age groups (</p>

<code>T</code>

<p>for Teens or</p>

<code>A</code>

<p>for Adults). It helps in filtering content for players.</p>

<strong>📔 Note</strong>

<blockquote>: See</blockquote>

<blockquote>for more details on how to set these parameters.</blockquote>

<h2>To publish the scene</h2>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Editor’s menu, by clicking the Decentraland logo on the tabs on the left. Then click</p>

<strong>Publish scene</strong>

<p>.</p>

<p>This opens a new tab in Visual Studio, showing what parcels you’re deploying to.</p>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<h3>Via the CLI</h3>

<li>Log into your Metamask account with the same public address associated with your parcels in Decentraland.</li>

<li>Run</li>

<code>npm run deploy</code>

<li>from the scene’s folder.</li>

<strong>💡 Tip</strong>

<blockquote>: If there are files in your project folder that you don’t want to deploy, list them in the</blockquote>

<em>.dclignore</em>

<blockquote>file before deploying.</blockquote>

<li>A browser tab will open, showing what parcels you’re deploying to. Click</li>

<strong>Sign and Deploy</strong>

<li>.</li>

<li>Metamask opens, notifying you that your signature is requested. Click</li>

<strong>Sign</strong>

<li>to confirm this action.</li>

<strong>💡 Tip</strong>

<blockquote>: If you’re implementing a continuous integration flow, where changes to your scene are deployed automatically, then you can set the</blockquote>

<code>export DCL_PRIVATE_KEY</code>

<blockquote>environment variable to the private key of an account that has deploy permissions.</blockquote>

<strong>💡 Tip</strong>

<blockquote>:</blockquote>

<code>npm run deploy</code>

<blockquote>runs a</blockquote>

<code>npm run build</code>

<blockquote>, which checks the scene for type errors more strictly than running</blockquote>

<code>npm run start</code>

<blockquote>. If these errors can’t be avoided (eg: they happen in an external library) and they don’t impact the scene, you can use</blockquote>

<code>npm run deploy --skip-build</code>

<blockquote>to skip the</blockquote>

<code>npm run build</code>

<blockquote>step and deploy the scene as it is.</blockquote>

<p>When publishing to a</p>

<p>, use the following command instead:</p>

<code>npm run deploy -- --target-content https://worlds-content-server.decentraland.org</code>

<h2>Publish from a hardware wallet</h2>

<p>Instead of storing your LAND tokens in a Metamask account, you may find it more secure to store them in a hardware wallet device, such as a</p>

<p>or a</p>

<p>, that’s physically plugged in to your computer.</p>

<p>If you’re using one of these devices, you can link the hardware wallet to Metamask to enable signing messages, while keeping the tokens more secure. See</p>

<p>for instructions to connect your account.</p>

<p>Once your hardware wallet can be used via Metamask, you can deploy following the same steps as if your tokens were on a Metamask account.</p>

<h2>Scene overwriting</h2>

<p>When a new scene is deployed, it overwrites older content that existed on the parcels it occupies.</p>

<p>If a scene that takes up multiple parcels is only partially overwritten by another, all of its parcels are either overwritten or erased.</p>

<p>Suppose you deployed your scene</p>

<em>A</em>

<p>over two parcels</p>

<em>[100, 100]</em>

<p>and</p>

<em>[100, 101]</em>

<p>. Then you sell parcel</p>

<em>[100, 101]</em>

<p>to a user who owns adjacent land and that deploys a large scene (</p>

<em>B</em>

<p>) to several parcels, including</p>

<em>[100, 101]</em>

<p>.</p>

<p>Your scene</p>

<em>A</em>

<p>can’t be partially rendered in just one parcel, so</p>

<em>[100, 100]</em>

<p>won’t display any content. You must build a new version of scene</p>

<em>A</em>

<p>that only takes up one parcel and deploy it to only parcel</p>

<em>[100, 100]</em>

<p>.</p>

<h2>What are the content servers</h2>

<p>The content servers are a network of community-owned servers with a filesystem that’s content-addressed, meaning that each file is identified by its contents, not by an arbitrary file name.</p>

<p>We use the content servers to host and distribute all scene content in a similar way to BitTorrent, keeping the Decentraland network distributed.</p>

<li>The content servers store and distribute all of the assets required to render your scenes.</li>

<li>The</li>

<code>npm run deploy</code>

<li>command links these assets to the LAND parcel specified in your</li>

<strong>scene.json</strong>

<li>file. Whenever you redeploy your scene, the CLI will update your LAND smart contract, if needed, to point to the most recent content available on the content servers.</li>

<p>The information on each copy of the server is verifiable, as each scene is signed by the LAND owner’s hash. This means that someone hosting a copy of the server won’t be able to tamper with the content to display something illegitimate. The community can also vote to approve or remove any of these servers using the DAO.</p>

<h2>The test server</h2>

<p>You can deploy content to the test catalyst server to run full tests with multiple users, the sourrounding scenes, and an environment that is identical to production. The test server is identical to all other catalyst servers, the difference is that the content that is deployed to this server isn’t propagated to the others. Content deployed to other servers on the other hand does get propagated to this server, so surrounding scenes should look as they will in production.</p>

<strong>📔 Note</strong>

<blockquote>: To deploy to parcels in the test server, you must have the same permissions required to deploy to those parcels in the main network.</blockquote>

<p>Players are never directed to this server, the only way to access it is to explicitly provide a URL parameter to connect to it.</p>

<p>If you’re working in a confidential project that you don’t want to unveil until launch, note that the test server is relatively hidden from players, but anyone explicitly using the test server’s URL could potentially run into it.</p>

<h3>Via the Decentraland Editor</h3>

<p>To deploy a scene to the test server:</p>

<p>Open VSCode in a Decentraland scene project.</p>

<p>Click on the Decentraland icon on the left sidebar.</p>

<p>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</p>

<code>Publish scene to test server</code>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<em>play.decentraland.org/&CATALYST=peer-testing.decentraland.org</em>

<h3>Via the CLI</h3>

<p>To deploy to the test server, run:</p>

<code>npm run deploy -- --target peer-testing.decentraland.org</code>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<h2>Verify deployment success</h2>

<p>Once you deployed your scene, these changes will take a few minutes to be propagated throughout the various content servers in the network. If you enter Decentraland right after deploying, you might still see the previous version of your content, depending of what realm you enter.</p>

<p>After you sign to authorize the deployment of your scene, the signing dapp will start displaying confirmations that the new version of your content has been propagated throughout all of the servers in the network,</p>

<p>You’ll see a list of each of the servers that make up Decentraland’s content network. For each server, it specifies the timestamp of the last uploaded change on that parcel. Each one of these servers refers to a different realm, you can reference how these server names map to realm names in the</p>

<p>.</p>

<p>You can also obtain this information at any time by running the following command on the command line console:</p>

<code>npx @dcl/opscli pointer-consistency --pointer '0,0'</code>

<strong>📔 Note</strong>

<blockquote>: Use the coordinates of your scene instead of</blockquote>

<code>0,0</code>

<blockquote>. If your scene has multiple parcels, any one of its parcels will produce the same output. If the coordinates start with a negative number, add a</blockquote>

<code>\</code>

<blockquote>at the start of the coordinates to prevent the</blockquote>

<code>-</code>

<blockquote>character from being misinterpreted by the command line.</blockquote>

<h2>Automatic deployments</h2>

<p>If you regularly make changes to your scene’s content and want to implement a streamlined publication pipeline, you can automate the deployment of your scene via a GitHub action.</p>

<p>For this, you must first store your scene in a GitHub project. You can then set a</p>

<p>with the following script, which runs every time there’s a merge to the</p>

<code>main</code>

<p>branch. The script installs any dependencies, builds the project and then deploys it to Decentraland.</p>

<p>Important: For this process to run, you must set a wallet’s private key as an environment variable in GitHub, this is used to sign the deployment. As always, be very careful with keeping public keys secure. Do NOT use the public key of the account that actually owns the land tokens, as that would have very big risks. Instead, delegate operator rights to a disposable wallet that owns no valuable tokens. If this private key is ever leaked somehow, you can easily revoke those operator rights from the account and set up a new wallet.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing-permissions/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/overview/grants-program/

<title>Grants Program | Decentraland Documentation</title>

<strong>Grants Program</strong>

<h1>Grants Program</h1>

<p>The Decentraland DAO possesses a</p>

<p>that has been set aside to help sponsor and facilitate the continual growth of the Decentraland platform. One avenue used by the DAO to achieve these goals is a grants program that was voted in place by the community.</p>

<p>This grants program allows any member of the community to request funding to make contributions in community building and education, creating 3D content for the world, or implementing new features and improvements to the platform.</p>

<p>Grants can be requested by completing a proposal form within the</p>

<p>. If approved by the community, then the</p>

<p>will execute the transfer of funds to the grant beneficiary by means of a one-time transfer, or a vesting contract.</p>

<h2>Grant categories and requirements</h2>

<p>Grant requests can fall under one of seven broad categories:</p>

<strong>Core Unit, Platform, Documentation, In-world Content, Social Media Content, Sponsorship, and Accelerator.</strong>

<p>These categories represent areas of Decentraland that benefit most from community contributions.</p>

<p>Every active grant must:</p>

<li>Comply with Decentraland’s</li>

<li>,</li>

<li>, and</li>

<li>.</li>

<li>Provide monthly updates on the</li>

<li>.</li>

<li>Provide a presentation in a video format to be shared publicly.</li>

<li>of Decentraland DAO’s Support</li>

<li>Be responsive to the DAO Committee and Core Unit communications.</li>

<li>Be ready to summarize how the grant funds were used every month.</li>

<li>Projects should be built or compatible with the last stable Decentraland SDK.</li>

<h3>1- Core Unit</h3>

<p>A Core Unit is a team that provides core infrastructure and operations for the DAO. The work done is essential for the organization and grantees from this category may be considered official representatives of the DAO.</p>

<strong>Requirements:</strong>

<li>Provide an essential or strategic value to the DAO.</li>

<li>Build in the public, publishing open source code and documentation.</li>

<strong>Performance metrics:</strong>

<li>Define their own performance metrics based on their goals. These must be clear measurable metrics.</li>

<h3>2- Platform</h3>

<p>Platform grantees create tools and applications that extend the power of the Decentraland platform or provide alternative ways to explore Decentraland’s ecosystem.</p>

<strong>Requirements:</strong>

<li>Build in the public, publishing open source code and documentation.</li>

<strong>Performance metrics:</strong>

<li>The number of contributions made to the main repository of code.</li>

<li>Publish the tool or application to the production environment and provide usage metrics.</li>

<h3>3- Documentation</h3>

<p>Documentation grantees focus on the creation of free educational content about how to contribute, build and play on Decentraland. The content should be published on official mediums to be found and preserved for posterity.</p>

<strong>Requirements:</strong>

<li>The topic shouldn’t be already well-covered in the official documentation.</li>

<li>Provide examples of documentation done in the past.</li>

<li>Describe the format of documentation to be produced.</li>

<li>Documentation should be in English (when added to the Awesome Repository or Decentraland Documentation)</li>

<li>Productions thought to be published in official mediums (Decentraland Blog, Awesome Repository, Decentraland Documentation, Decentraland DAO youtube channel / social media, Decentraland Foundation Youtube Channel / social media)</li>

<strong>Performance metrics:</strong>

<li>The number of contributions to Decentraland Documentation</li>

<li>The number of contributions to the Awesome Repository.</li>

<h3>4- In-World Content</h3>

<p>In-World Content granteesdevelop attractive experiences in Decentraland that generate retention of users. The experiences can take the form of scenes, games, and events, in any case, consumed by players through the reference client.</p>

<strong>Requirements:</strong>

<li>Deploy content or host events in Decentraland.</li>

<strong>Performance metrics:</strong>

<li>Newley populated land, Active Users, Returning Users, Time on Scene.</li>

<li>Events created and number of attendees to the event.</li>

<h3>5- Social Media Content</h3>

<p>Grantees from this category produce content on social media platforms such as Twitch, Twitter, Youtube, Tik Tok, and Discord. The grant aims to reach new users and keep them engaged.</p>

<strong>Requirements:</strong>

<li>Explain audience size and relevancy to Decentraland.</li>

<strong>Performance metrics:</strong>

<li>Number of pieces to be produced</li>

<li>Total of views and interactions of the created content.</li>

<li>Engagement metrics (likes, retweets, reach, retention)</li>

<li>Mentions in other media outlets.</li>

<h3>6- Sponsorship</h3>

<p>Grantees applying to this category hold conferences, side events, community meetups, hackathons, and contest prices that target audiences relevant to Decentraland.</p>

<strong>Requirements:</strong>

<li>The event is happening IRL or online but outside of Decentraland.</li>

<li>Ensure Decentraland DAO brand awareness during the event.</li>

<strong>Performance metrics:</strong>

<li>Number of attendees and level of brand awareness.</li>

<li>Evidence of the project execution (photos, videos, publications).</li>

<li>Mentions in media outlets.</li>

<h3>7- Accelerator</h3>

<p>A private company or revenue-generating initiative looking forward to receiving an investment from the DAO.</p>

<strong>Requirements:</strong>

<li>Revenue share with the DAO or alternative value proposition.</li>

<strong>Performance metrics:</strong>

<li>Return of Investment</li>

<h2>Grant tiers</h2>

<p>Grants may be requested for any amount within one of two possible tiers, regardless of the grant category. For example, you may request a Content Creator grant in either of both tiers.

The specific tiers, and their ranges, are:</p>

<strong>Lower Tier:</strong>

<li>Up to $20,000 USD, payable in stablecoins or MANA using a Vesting Contract, or a one-time payment (after 30 days).</li>

<li>Vesting duration can range from 1 to 6 months.</li>

<li>Votation period: 2 weeks.</li>

<li>Votation threshold: 2M VP.</li>

<strong>Higher Tier:</strong>

<li>From $20,000 to $240,000 USD, payable in stablecoins using a Vesting Contract.</li>

<li>Vesting duration can range from 3 to 12 months.</li>

<li>Votation Period: 2 weeks.</li>

<li>Variable votation threshold, using the formula:</li>

<li>.</li>

<li>E.g. $60,000 USD requires 3,600,000 VP</li>

<li>E.g. $120,000 USD requires 6,000,000 VP</li>

<li>E.g. $240,000 USD requires 10,800,000 VP</li>

<h2>When are payments made for each tier?</h2>

<p>Funds for grants are made available to the beneficiary address via vesting contracts. The grantee picks the starting date when they request the grant and it can be either the 1st or 15th of each month. These contracts vest every 30 days from the starting date. After this period, the owner of the beneficiary address may withdraw the vested funds on a monthly basis.</p>

<h2>Grant Budgeting System</h2>

<p>The DAO has an income of 1.8M MANA every month and it has set up a limit control to not spend more than 70% of such a stream. This mitigates the risk of running out of funds, securing the long-standing operations of the DAO. The Decentraland Grants Program is divided into four periods (Q1, Q2, Q3, Q4), effective since January 1st, 2023. At the beginning of each quarter the maximum amount of money that can be allocated through the Grants Program is defined using the formula: 5,500,000 * MANA_PRICE * 0.7. This means the DAO at maximum capacity will be spending 70% of the MANA received from the vesting contract.</p>

<p>The DAO agreed on a</p>

<p>on limits for each category of grants. The DAO refreshes and recalculates the category budgets using the MANA price at the beginning of each quarter. When a category reaches its budget, No more grant requests will be accepted for that category.</p>

<p>The</p>

<p>is the following:</p>

<li>Platform 40%</li>

<li>In-World Content 20%</li>

<li>Core Unit 15%</li>

<li>Sponsorship 10%</li>

<li>Accelerator 7%</li>

<li>Social Media Content 5%</li>

<li>Documentation 3%</li>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/overview/grants-program/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/overview/the-dao-fund/

<title>The DAO Fund | Decentraland Documentation</title>

<strong>The DAO Fund</strong>

<h1>The DAO Fund</h1>

<p>The Decentraland DAO has been granted with a</p>

<strong>10-year vesting contract worth 222,000,000 MANA</strong>

<p>started on Feb 19, 2020.

You can view the DAO’s vesting contract</p>

<p>. The MANA in this contract vests every second, thus gradually increasing the size of the DAO’s fund.</p>

<p>The current state of the DAO treasury can be viewed on the</p>

<p>of the</p>

<p>.</p>

<p>The DAO also has other sources of income:</p>

<li>A 2.5% transaction fee within the Decentraland Marketplacs on primary market commissions go to the DAO</li>

<li>The OpenSea Marketplace also receives a 2.5% transaction fee for sales of LAND, Estates, Names, and wearables,</li>

<li>.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/overview/grants-program/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/overview/how-does-the-dao-work/#dao-committee

<title>How the DAO works | Decentraland Documentation</title>

<strong>How the DAO works</strong>

<h1>How the DAO works</h1>

<p>To circumvent the very high gas fees associated with full on-chain governance, Decentraland’s DAO uses a combination of free, off-chain voting for the community and a multi-sig wallet controlled by a “DAO Committee” to enact those off-chain decisions on the Ethereum blockchain. This allows everyone who holds MANA, NAMES or LAND to participate in the DAO without having to pay any fees everytime they want to vote or open a proposal.</p>

<p>The use of a multi-sig wallet controlled by a committee of trusted persons guarantees the security of the DAO along with guaranteeing that passed proposals result in an on-chain action. A second multisig owned by the SAB provides a second layer of protection on top of the DAO Committee.</p>

<p>The DAO is a complex system created from several layers of entities and platforms, each of which is listed and described below:</p>

<h2>Governance dApp</h2>

<p>The main interface for the Decentraland DAO is located at</p>

<p>. This is where users log-in, create proposals, and vote.</p>

<em>This is currently maintained by a development team funded by a</em>

<em>.</em>

<h2>Snapshot</h2>

<p>is an off-chain voting platform that provides a free way for token holders to vote on proposals. By storing both the proposals and the votes on IPFS as cryptographically signed messages, Snapshot allows for secure and easily contested results.</p>

<p>Decentraland’s DAO uses Snapshot to host the proposals and votes generated by the community.</p>

<p>Whenever a proposal is opened at governance.decentraland.org, it is also created automatically on</p>

<p>. This allows the DAO to record and store proposals, votes, and results in a secure and decentralized manner - with the results displayed back on governance.decentraland.org. From the Snapshot space users can also</p>

<p>to other community members.</p>

<h2>Aragon</h2>

<p>is a secure platform for creating and managing the collection of smart contracts needed to run a DAO. The backend of Decentraland’s DAO is built using Aragon, so anytime a proposal that results in a binding action is passed by the community in Snapshot, it is committed to the Ethereum mainnet in Aragon by the DAO Committee.</p>

<h2>DAO Committee</h2>

<p>The DAO Committee is a group of three trusted individuals who have been selected by the community to hold keys in a multi-sig wallet. This multi-sig is responsible for enacting any passed votes with a binding action, like funding a Grant, banning a name, adding or removing a POI, implementing a Governance proposal or adding a Catalyst node.</p>

<p>The DAO Committee is overseen by the SAB, which has the ability to pause and cancel any action initiated by the Committee.</p>

<p>Every on-chain transaction initiated by the DAO Committee has an automatic 24-hour delay before it is completed, allowing the SAB or the Committee to revoke the transaction.</p>

<h2>Security Advisory Board (SAB)</h2>

<p>The Security Advisory Board acts as a guarantor of Decentraland’s smart contract security, and is tasked with overseeing the work of the DAO Committee and responding to vulnerability and bug reports in any of Decentraland’s contracts.</p>

<p>The SAB includes 5 Solidity experts that have initially been selected by the Decentraland development team.</p>

<p>Any time a modification is to be made to the LAND or Estate contracts, the update must be unanimously supported by the SAB’s multi-sig. At least three signatories are required with no dissenting votes in order to make any changes to the LAND or Estate contracts.</p>

<p>The SAB has the ability to pause, resume, or cancel any action taken by the DAO Committee.</p>

<p>Initiating the addition or removal of a member of the SAB can be done by kickstarting a Governance proposal process on</p>

<p>.</p>

<h2>The Forum</h2>

<p>The</p>

<p>is the communication hub for the DAO. Everytime a new proposal is created, an accompanying thread is opened automatically on the Forum under the</p>

<p>. These proposal topics can be found either by browsing the Forum, or by clicking the “Discuss in the Forum’’ button on any proposal’s detail page in the Governance UI. These threads are a space where voters can discuss the various impacts and issues that might result from a proposal.</p>

<h2>Discord Servers</h2>

<p>The DAO operates on two Discord servers:</p>

<li>on the Decentraland Discord server for general announcements, discussions and questions.</li>

<li>A</li>

<li>only for the DAO operations with more in-depth discussions, specific channels for working groups tacking complex issues and spaces for the community grant owners to post updates on their project. In this channel the DAO also host their monthly Town Hall.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing-permissions/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/market/land-manager/#give-permissions

<title>LAND Manager | Decentraland Documentation</title>

<strong>LAND Manager</strong>

<h1>LAND Manager</h1>

<p>The Land Manager allows you to manage your LAND and Estate assets.</p>

<p>Access the Land manager at</p>

<p>.</p>

<p>The Land Manager allows you to:</p>

<strong>Name</strong>

<li>your parcels and Estates and give them a public description.</li>

<strong>Merge</strong>

<li>LAND parcels into an Estate.</li>

<strong>Dissolve</strong>

<li>an Estate into separate LAND parcels.</li>

<strong>Transfer</strong>

<li>your parcels and Estates to another user.</li>

<strong>Grant permissions</strong>

<li>to other users to edit the parcels you own.</li>

<h2>Manage Your LAND</h2>

<p>To view your LAND tokens, click</p>

<strong>Manage your LAND</strong>

<p>. Here you’ll find a list of all of your parcels and Estates, including any parcels that you have listed for sale.</p>

<p>By clicking on one of the parcels or Estates listed under</p>

<strong>Land</strong>

<p>, you can edit its name, description, set an operator, or transfer it directly to another wallet address.</p>

<h2>Create an Estate</h2>

<p>LAND Estates make it possible to associate two or more directly adjacent parcels of LAND to make it easier to manage your larger LAND holdings. Estates are especially useful when building larger scenes that span more than one parcel.</p>

<p>Parcels in an Estate must be directly adjacent, and cannot be separated by a road, plaza, or any other parcel.</p>

<p>To create your first Estate, you need to own two or more adjacent LAND parcels.</p>

<p>Open</p>

<strong>My LAND</strong>

<p>and select one of the parcels you’d like to add to the Estate.</p>

<p>In the parcel’s details page, click</p>

<strong>Create Estate</strong>

<p>.</p>

<p>You will be shown a view of the Atlas centered on the parcel you selected, with the remaining adjacent parcels you own highlighted. Select the different parcels you want to include in your Estate.</p>

<p>Click</p>

<strong>Continue</strong>

<p>.</p>

<p>Enter a name and description for your Estate. These details will be publicly displayed in the Atlas, just like the name and description for any individual parcel.</p>

<p>Confirm this transaction on your Ethereum client and wait for the network to verify it.</p>

<p>Once you’ve created your first Estate, you will see a new tab titled Estates. From this page you can view and manage all of your Estates.</p>

<p>When you create a new Estate, you are effectively transferring your parcels to a new token. These Estates are represented by ERC721 tokens (like any other NFT). You will no longer see the individual parcels under</p>

<em>My LAND</em>

<p>, and they will not appear in MetaMask, Mist, Trezor, or Ledger wallets, nor on Etherscan under your address.</p>

<h2>Edit parcels or Estates</h2>

<p>You can edit the name and description of any parcel or Estate that you own. These details will be publicly displayed in the Atlas.</p>

<p>To edit a parcel or Estate:</p>

<p>Navigate to the details page of the parcel or the Estate you’d like to edit and click</p>

<strong>Edit</strong>

<p>.</p>

<p>Click</p>

<strong>Submit</strong>

<p>.</p>

<p>Confirm this transaction on your Ethereum client and wait for the network to verify it.</p>

<h2>Give permissions</h2>

<p>You can give another user permissions to edit the content in a parcel or Estate. This enables that user to deploy code to the scene, whilst not having the ability to sell the token.</p>

<p>The user given permission can also change the name or description in the Marketplace.</p>

<p>To grant permissions over your LAND:</p>

<p>Navigate to the details page of the parcel or Estate and click on the three dots and then</p>

<strong>Set Operator</strong>

<p>.</p>

<p>Fill the form with the desired info.</p>

<p>Click</p>

<strong>Submit</strong>

<p>.</p>

<p>Confirm this transaction on your Ethereum client and wait for the network to verify it.</p>

<h2>See your activity history</h2>

<p>Open the notifications page by clicking the bell icon at the top of the screen.</p>

<p>The notifications page displays a list of all the recent transactions that you have carried out, together with their status.</p>

<p>Click a transaction to see more details about it on Etherscan.</p>

<h2>Transfer LAND</h2>

<p>To transfer a LAND parcel or Estate to another user:</p>

<p>Navigate to the details page of the parcel or the Estate you’d like to transfer and click</p>

<strong>Transfer</strong>

<p>.</p>

<p>Enter the public address of the Ethereum wallet of the recipient.</p>

<strong>📔 Note</strong>

<blockquote>: Please double check this address, since you cannot cancel the operation. While the recipient could always transfer the LAND back to you, the original owner cannot reverse the action.</blockquote>

<li>Click</li>

<strong>Submit</strong>

<li>.</li>

<li>Confirm this transaction on your Ethereum client and wait for the network to verify it.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/

<title>Preview your scene | Decentraland Documentation</title>

<strong>Preview your scene</strong>

<h1>Preview your scene</h1>

<p>Once you have</p>

<p>or downloaded a</p>

<p>you can preview it locally.</p>

<h2>Using the editor</h2>

<p>To run a scene preview using the Decentraland Editor:</p>

<p>Make sure you’ve</p>

<p>.</p>

<p>Open your scene’s folder using Visual Studio Code.</p>

<p>Note: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<strong>Run Scene</strong>

<p>button.</p>

<p>This opens a new tab in Visual Studio Code, running the Decentraland scene, just like in a web browser tab.</p>

<p>Optionally click</p>

<strong>Open in browser</strong>

<p>, over the top margin of the tab to run the preview in a web browser window.</p>

<h2>Using the CLI</h2>

<h3>Before you begin</h3>

<p>Please make sure you first install the CLI tools by running the following command:</p>

<p>See the</p>

<p>for more details instructions.</p>

<h3>Preview a scene</h3>

<p>To preview a scene run the following command on the scene’s main folder:</p>

<p>Any dependencies that are missing are installed and then the CLI opens the scene in a new browser tab automatically. It creates a local web server in your system and points the web browser tab to this local address.</p>

<p>Every time you make changes to the scene, the preview reloads and updates automatically, so there’s no need to run the command again.</p>

<strong>📔 Note</strong>

<blockquote>: Some scenes depend on communicating with an external server to carry out custom logic or store and retrieve data. When previewing one of these scenes, you’ll likely have to also run the server locally on another port. Check the scene’s readme for instructions on how to launch the server as well as the scene.</blockquote>

<h3>Parameters of the preview command</h3>

<p>You can add the following flags to the</p>

<code>npm run start</code>

<p>command to change its behavior:</p>

<code>--web3</code>

<li>Connects preview to browser wallet to use the associated avatar and account.</li>

<code>--skip-version-checks</code>

<li>Avoids checking if the scene’s SDK framework version matches your CLI version, and launches the preview anyway.</li>

<code>--desktop-client</code>

<li>Runs the preview in the Decentraland Desktop client.</li>

<code>--port</code>

<li>to assign a specific port to run the scene. Otherwise it will use whatever port is available.</li>

<code>--no-debug</code>

<li>Disable the debug panel, that shows scene and performance stats.</li>

<code>--no-browser</code>

<li>to prevent the preview from opening a new browser tab.</li>

<code>--w</code>

<li>or</li>

<code>--no-watch</code>

<li>to not open watch for filesystem changes and avoid hot-reload whenever the scene’s code changes.</li>

<code>--c</code>

<li>or</li>

<code>--ci</code>

<li>To run the parcel previewer on a remote unix server,</li>

<strong>📔 Note</strong>

<blockquote>: To preview old scenes that were built for older versions of the SDK, you must set the corresponding version of</blockquote>

<code>decentraland-ecs</code>

<blockquote>in your project’s</blockquote>

<code>package.json</code>

<blockquote>file.</blockquote>

<h2>Upload a scene to decentraland</h2>

<p>Once you’re happy with your scene, you can upload it and publish it to Decentraland, see</p>

<p>for instructions on how to do that.</p>

<p>You can also upload a preview to a free 3rd party server,</p>

<p>.</p>

<h2>Preview scene size</h2>

<p>The scene size shown in the preview is based on the scene’s configuration, you set this when building the scene using the CLI. By default, the scene occupies a single parcel (16 x 16 meters).</p>

<p>If you’re building a scene to be uploaded to several adjacent parcels, you can edit the</p>

<em>scene.json</em>

<p>file to reflect this, listing multiple parcels in the “parcels” field. Placing any entities outside the bounds of the listed parcels will display them in red.</p>

<p>You can also change the coordinates by running the</p>

<code>npx update-parcels</code>

<p>command from the command line, this is especially useful on large scenes with many parcels. See</p>

<p>for more details.</p>

<strong>💡 Tip</strong>

<blockquote>: While running the preview, the parcel coordinates don’t need to match those that your scene will really use, as long as they’re adjacent and are arranged into the same shape. You will have to replace these with the actual coordinates later when you</blockquote>

<blockquote>.</blockquote>

<h2>Run preview in Desktop</h2>

<p>To run a preview scene in the Desktop native client, instead of in the web browser:</p>

<p>Make sure you have downloaded and installed the</p>

<p>or</p>

<p>desktop client.</p>

<p>Run the preview with:</p>

<code>npm run start --desktop-client</code>

<p>Copy the URL provided by the console output under</p>

<strong>Desktop Client</strong>

<p>and paste in your browser.</p>

<p>Note: The Browser might ask you for permission to open an external executable: Decentraland. Select</p>

<strong>Open</strong>

<p>.</p>

<p>You’ll see the following screen. Check that the URL is correct, then click</p>

<strong>Continue</strong>

<p>to launch the preview.</p>

<p>If you need to manually add anything to the URL, to change the default way the scene runs, tick the box</p>

<strong>Add custom URL parameters</strong>

<p>and write those in the dialog below.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/#set-parcels-via-the-command-line

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>A scene is a Decentraland project that is spatially delimited, and is mapped to one or several LAND parcels. If a scene is deployed to the Decentraland map, players can experience it by visiting the scene’s coordinates.</p>

<p>See</p>

<p>for a list of what files are used in a scene project.</p>

<h2>Metadata</h2>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary to load your scene. You’re also free to add any fields that you wish.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>npx update-parcels</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>npx update-parcels <parcel></code>

<p>For example:</p>

<code>npx update-parcels 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>npx update-parcels <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>npx update-parcels 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>npx update-parcels <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>npx update-parcels</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>It’s very important to give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these displayed on a modal when they select the parcels of your scene on the map. They will also see these in a confirmation screen when being</p>

<p>there by another scene. Setting up compelling data here can significantly help drive traffic to your scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is especially useful in large scenes, to prevent players from spawning too far away from the coordinates where they originally intended to load. To have many spawn points, simply list them as an array.</p>

<p>When there are multiple spawn points, the one that’s closest to the coordinates indicated by the player is picked.</p>

<p>If a coordinate is marked as</p>

<code>default</code>

<p>, it will always be used, regardless of if it’s the closest. If multiple spawn points are marked as</p>

<code>default</code>

<p>, the closest one of these is picked.</p>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<p>A scene can also have multiple spawn regions, just like it can have multiple spawn points.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are not affected by these permissions, and are free to use the corresponding functionality.</blockquote>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on smart wearables and portable experiences:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>disabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the scene metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for libraries, where the library might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>getSceneInformation</code>

<p>function:</p>

<p>Then you can call the</p>

<code>getSceneInformation()</code>

<p>function, which returns a json object that includes much of the contents of the scene.json file.

The example below shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getSceneInformation()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.

Do not use the deprecated</blockquote>

<code>getSceneInfo()</code>

<blockquote>function.</blockquote>

<p>The object returned by</p>

<code>getSceneInformation()</code>

<p>includes the following:</p>

<code>baseUrl</code>

<li>: The base URL where the scene’s content is hosted</li>

<code>content</code>

<li>: An array with all the files of the scene, including their hash, that can be used together with the baseUrl to retrieve them.</li>

<code>metadataJson</code>

<li>: The full contents of the scene’s scene.json, as a string. You must parse this to obtain specific values.</li>

<code>urn</code>

<li>: The unique urn for the scene as a whole.</li>

<p>The example below parses the contents from</p>

<code>metadataJson</code>

<p>to obtain values from properties in the scene.json file</p>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re interested in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene is listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/

# Start of the information extracted from the URL: https://decentraland.org/download/

<title>Welcome to Decentraland</title>

<h1>Download</h1>

<strong>Decentraland</strong>

<small>Want to play in your browser?</small>

# End of the information extracted from the URL: https://decentraland.org/download/

# Start of the information extracted from the URL: https://decentraland.org/play/

<title>Decentraland</title>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/preview-scene/#debug-a-scene

<title>Preview your scene | Decentraland Documentation</title>

<strong>Preview your scene</strong>

<h1>Preview your scene</h1>

<p>Once you have</p>

<p>or downloaded a</p>

<p>you can preview it locally.</p>

<h2>Using the editor</h2>

<p>To run a scene preview using the Decentraland Editor:</p>

<p>Make sure you’ve</p>

<p>.</p>

<p>Open your scene’s folder using Visual Studio Code.</p>

<p>Note: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<strong>Run Scene</strong>

<p>button.</p>

<p>This opens a new tab in Visual Studio Code, running the Decentraland scene, just like in a web browser tab.</p>

<p>Optionally click</p>

<strong>Open in browser</strong>

<p>, over the top margin of the tab to run the preview in a web browser window.</p>

<h2>Using the CLI</h2>

<h3>Before you begin</h3>

<p>Please make sure you first install the CLI tools by running the following command:</p>

<p>See the</p>

<p>for more details instructions.</p>

<h3>Preview a scene</h3>

<p>To preview a scene run the following command on the scene’s main folder:</p>

<p>Any dependencies that are missing are installed and then the CLI opens the scene in a new browser tab automatically. It creates a local web server in your system and points the web browser tab to this local address.</p>

<p>Every time you make changes to the scene, the preview reloads and updates automatically, so there’s no need to run the command again.</p>

<strong>📔 Note</strong>

<blockquote>: Some scenes depend on communicating with an external server to carry out custom logic or store and retrieve data. When previewing one of these scenes, you’ll likely have to also run the server locally on another port. Check the scene’s readme for instructions on how to launch the server as well as the scene.</blockquote>

<h3>Parameters of the preview command</h3>

<p>You can add the following flags to the</p>

<code>npm run start</code>

<p>command to change its behavior:</p>

<code>--web3</code>

<li>Connects preview to browser wallet to use the associated avatar and account.</li>

<code>--skip-version-checks</code>

<li>Avoids checking if the scene’s SDK framework version matches your CLI version, and launches the preview anyway.</li>

<code>--desktop-client</code>

<li>Runs the preview in the Decentraland Desktop client.</li>

<code>--port</code>

<li>to assign a specific port to run the scene. Otherwise it will use whatever port is available.</li>

<code>--no-debug</code>

<li>Disable the debug panel, that shows scene and performance stats.</li>

<code>--no-browser</code>

<li>to prevent the preview from opening a new browser tab.</li>

<code>--w</code>

<li>or</li>

<code>--no-watch</code>

<li>to not open watch for filesystem changes and avoid hot-reload whenever the scene’s code changes.</li>

<code>--c</code>

<li>or</li>

<code>--ci</code>

<li>To run the parcel previewer on a remote unix server,</li>

<strong>📔 Note</strong>

<blockquote>: To preview old scenes that were built for older versions of the SDK, you must set the corresponding version of</blockquote>

<code>decentraland-ecs</code>

<blockquote>in your project’s</blockquote>

<code>package.json</code>

<blockquote>file.</blockquote>

<h2>Upload a scene to decentraland</h2>

<p>Once you’re happy with your scene, you can upload it and publish it to Decentraland, see</p>

<p>for instructions on how to do that.</p>

<p>You can also upload a preview to a free 3rd party server,</p>

<p>.</p>

<h2>Preview scene size</h2>

<p>The scene size shown in the preview is based on the scene’s configuration, you set this when building the scene using the CLI. By default, the scene occupies a single parcel (16 x 16 meters).</p>

<p>If you’re building a scene to be uploaded to several adjacent parcels, you can edit the</p>

<em>scene.json</em>

<p>file to reflect this, listing multiple parcels in the “parcels” field. Placing any entities outside the bounds of the listed parcels will display them in red.</p>

<p>You can also change the coordinates by running the</p>

<code>npx update-parcels</code>

<p>command from the command line, this is especially useful on large scenes with many parcels. See</p>

<p>for more details.</p>

<strong>💡 Tip</strong>

<blockquote>: While running the preview, the parcel coordinates don’t need to match those that your scene will really use, as long as they’re adjacent and are arranged into the same shape. You will have to replace these with the actual coordinates later when you</blockquote>

<blockquote>.</blockquote>

<h2>Run preview in Desktop</h2>

<p>To run a preview scene in the Desktop native client, instead of in the web browser:</p>

<p>Make sure you have downloaded and installed the</p>

<p>or</p>

<p>desktop client.</p>

<p>Run the preview with:</p>

<code>npm run start --desktop-client</code>

<p>Copy the URL provided by the console output under</p>

<strong>Desktop Client</strong>

<p>and paste in your browser.</p>

<p>Note: The Browser might ask you for permission to open an external executable: Decentraland. Select</p>

<strong>Open</strong>

<p>.</p>

<p>You’ll see the following screen. Check that the URL is correct, then click</p>

<strong>Continue</strong>

<p>to launch the preview.</p>

<p>If you need to manually add anything to the URL, to change the default way the scene runs, tick the box</p>

<strong>Add custom URL parameters</strong>

<p>and write those in the dialog below.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/publishing/#to-publish-the-scene

<title>Publishing a scene | Decentraland Documentation</title>

<strong>Publishing a scene</strong>

<h1>Publishing a scene</h1>

<h2>Before you begin</h2>

<p>Make sure of the following:</p>

<p>Your scene complies with all of the</p>

<p>. Most of these are validated each time you run a preview of your scene.</p>

<p>You have a</p>

<p>account, with your LAND parcels assigned to it.</p>

<p>You own the necessary amount of adjacent LAND parcels. Otherwise you can purchase LAND in the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Multi-parcel scenes can only be deployed to adjacent parcels.</blockquote>

<h2>Check scene data</h2>

<p>When deploying, the CLI reads information from the</p>

<em>scene.json</em>

<p>to know where to deploy your scene to.</p>

<p>Open your scene’s</p>

<em>scene.json</em>

<p>file and complete the following data:</p>

<strong>title</strong>

<p>: The title is displayed on the UI under the mini-map, whenever players enter your scene. It also shows on the teleport popup.</p>

<strong>description</strong>

<p>: A description of what players will find in your scene. This is displayed on the teleport popup.</p>

<strong>navmapThumbnail</strong>

<p>: An image that represents your scene. This is displayed on the teleport popup. The image should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels.</p>

<strong>Parcels</strong>

<p>: The coordinates of the parcels that will be occupied by your scene</p>

<strong>Base</strong>

<p>: The coordinates of the parcel that will be considered the [0,0] coordinate of the scene. If your scene has multiple parcels, it should be the bottom-left (South-West) parcel.</p>

<strong>spawnPoints</strong>

<p>: A set of coordinates inside the scene (relative to the scene’s base parcel) where players spawn into. By default players spawn onto the</p>

<em>0,0,0</em>

<p>location of the scene (bottom-left corner). Use this to start out in a specific location, set a region to prevent players from overlapping with each other when they first appear.</p>

<strong>tags</strong>

<p>: A set of tags that describe your scene. These are used to help players and users explore Decentraland in a better way since they are able to find the content that they may be interested in.</p>

<p>.</p>

<strong>rating</strong>

<p>: This is used to classify the content of your scene based on its appropriateness for different age groups (</p>

<code>T</code>

<p>for Teens or</p>

<code>A</code>

<p>for Adults). It helps in filtering content for players.</p>

<strong>📔 Note</strong>

<blockquote>: See</blockquote>

<blockquote>for more details on how to set these parameters.</blockquote>

<h2>To publish the scene</h2>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Editor’s menu, by clicking the Decentraland logo on the tabs on the left. Then click</p>

<strong>Publish scene</strong>

<p>.</p>

<p>This opens a new tab in Visual Studio, showing what parcels you’re deploying to.</p>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<h3>Via the CLI</h3>

<li>Log into your Metamask account with the same public address associated with your parcels in Decentraland.</li>

<li>Run</li>

<code>npm run deploy</code>

<li>from the scene’s folder.</li>

<strong>💡 Tip</strong>

<blockquote>: If there are files in your project folder that you don’t want to deploy, list them in the</blockquote>

<em>.dclignore</em>

<blockquote>file before deploying.</blockquote>

<li>A browser tab will open, showing what parcels you’re deploying to. Click</li>

<strong>Sign and Deploy</strong>

<li>.</li>

<li>Metamask opens, notifying you that your signature is requested. Click</li>

<strong>Sign</strong>

<li>to confirm this action.</li>

<strong>💡 Tip</strong>

<blockquote>: If you’re implementing a continuous integration flow, where changes to your scene are deployed automatically, then you can set the</blockquote>

<code>export DCL_PRIVATE_KEY</code>

<blockquote>environment variable to the private key of an account that has deploy permissions.</blockquote>

<strong>💡 Tip</strong>

<blockquote>:</blockquote>

<code>npm run deploy</code>

<blockquote>runs a</blockquote>

<code>npm run build</code>

<blockquote>, which checks the scene for type errors more strictly than running</blockquote>

<code>npm run start</code>

<blockquote>. If these errors can’t be avoided (eg: they happen in an external library) and they don’t impact the scene, you can use</blockquote>

<code>npm run deploy --skip-build</code>

<blockquote>to skip the</blockquote>

<code>npm run build</code>

<blockquote>step and deploy the scene as it is.</blockquote>

<p>When publishing to a</p>

<p>, use the following command instead:</p>

<code>npm run deploy -- --target-content https://worlds-content-server.decentraland.org</code>

<h2>Publish from a hardware wallet</h2>

<p>Instead of storing your LAND tokens in a Metamask account, you may find it more secure to store them in a hardware wallet device, such as a</p>

<p>or a</p>

<p>, that’s physically plugged in to your computer.</p>

<p>If you’re using one of these devices, you can link the hardware wallet to Metamask to enable signing messages, while keeping the tokens more secure. See</p>

<p>for instructions to connect your account.</p>

<p>Once your hardware wallet can be used via Metamask, you can deploy following the same steps as if your tokens were on a Metamask account.</p>

<h2>Scene overwriting</h2>

<p>When a new scene is deployed, it overwrites older content that existed on the parcels it occupies.</p>

<p>If a scene that takes up multiple parcels is only partially overwritten by another, all of its parcels are either overwritten or erased.</p>

<p>Suppose you deployed your scene</p>

<em>A</em>

<p>over two parcels</p>

<em>[100, 100]</em>

<p>and</p>

<em>[100, 101]</em>

<p>. Then you sell parcel</p>

<em>[100, 101]</em>

<p>to a user who owns adjacent land and that deploys a large scene (</p>

<em>B</em>

<p>) to several parcels, including</p>

<em>[100, 101]</em>

<p>.</p>

<p>Your scene</p>

<em>A</em>

<p>can’t be partially rendered in just one parcel, so</p>

<em>[100, 100]</em>

<p>won’t display any content. You must build a new version of scene</p>

<em>A</em>

<p>that only takes up one parcel and deploy it to only parcel</p>

<em>[100, 100]</em>

<p>.</p>

<h2>What are the content servers</h2>

<p>The content servers are a network of community-owned servers with a filesystem that’s content-addressed, meaning that each file is identified by its contents, not by an arbitrary file name.</p>

<p>We use the content servers to host and distribute all scene content in a similar way to BitTorrent, keeping the Decentraland network distributed.</p>

<li>The content servers store and distribute all of the assets required to render your scenes.</li>

<li>The</li>

<code>npm run deploy</code>

<li>command links these assets to the LAND parcel specified in your</li>

<strong>scene.json</strong>

<li>file. Whenever you redeploy your scene, the CLI will update your LAND smart contract, if needed, to point to the most recent content available on the content servers.</li>

<p>The information on each copy of the server is verifiable, as each scene is signed by the LAND owner’s hash. This means that someone hosting a copy of the server won’t be able to tamper with the content to display something illegitimate. The community can also vote to approve or remove any of these servers using the DAO.</p>

<h2>The test server</h2>

<p>You can deploy content to the test catalyst server to run full tests with multiple users, the sourrounding scenes, and an environment that is identical to production. The test server is identical to all other catalyst servers, the difference is that the content that is deployed to this server isn’t propagated to the others. Content deployed to other servers on the other hand does get propagated to this server, so surrounding scenes should look as they will in production.</p>

<strong>📔 Note</strong>

<blockquote>: To deploy to parcels in the test server, you must have the same permissions required to deploy to those parcels in the main network.</blockquote>

<p>Players are never directed to this server, the only way to access it is to explicitly provide a URL parameter to connect to it.</p>

<p>If you’re working in a confidential project that you don’t want to unveil until launch, note that the test server is relatively hidden from players, but anyone explicitly using the test server’s URL could potentially run into it.</p>

<h3>Via the Decentraland Editor</h3>

<p>To deploy a scene to the test server:</p>

<p>Open VSCode in a Decentraland scene project.</p>

<p>Click on the Decentraland icon on the left sidebar.</p>

<p>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</p>

<code>Publish scene to test server</code>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<em>play.decentraland.org/&CATALYST=peer-testing.decentraland.org</em>

<h3>Via the CLI</h3>

<p>To deploy to the test server, run:</p>

<code>npm run deploy -- --target peer-testing.decentraland.org</code>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<h2>Verify deployment success</h2>

<p>Once you deployed your scene, these changes will take a few minutes to be propagated throughout the various content servers in the network. If you enter Decentraland right after deploying, you might still see the previous version of your content, depending of what realm you enter.</p>

<p>After you sign to authorize the deployment of your scene, the signing dapp will start displaying confirmations that the new version of your content has been propagated throughout all of the servers in the network,</p>

<p>You’ll see a list of each of the servers that make up Decentraland’s content network. For each server, it specifies the timestamp of the last uploaded change on that parcel. Each one of these servers refers to a different realm, you can reference how these server names map to realm names in the</p>

<p>.</p>

<p>You can also obtain this information at any time by running the following command on the command line console:</p>

<code>npx @dcl/opscli pointer-consistency --pointer '0,0'</code>

<strong>📔 Note</strong>

<blockquote>: Use the coordinates of your scene instead of</blockquote>

<code>0,0</code>

<blockquote>. If your scene has multiple parcels, any one of its parcels will produce the same output. If the coordinates start with a negative number, add a</blockquote>

<code>\</code>

<blockquote>at the start of the coordinates to prevent the</blockquote>

<code>-</code>

<blockquote>character from being misinterpreted by the command line.</blockquote>

<h2>Automatic deployments</h2>

<p>If you regularly make changes to your scene’s content and want to implement a streamlined publication pipeline, you can automate the deployment of your scene via a GitHub action.</p>

<p>For this, you must first store your scene in a GitHub project. You can then set a</p>

<p>with the following script, which runs every time there’s a merge to the</p>

<code>main</code>

<p>branch. The script installs any dependencies, builds the project and then deploys it to Decentraland.</p>

<p>Important: For this process to run, you must set a wallet’s private key as an environment variable in GitHub, this is used to sign the deployment. As always, be very careful with keeping public keys secure. Do NOT use the public key of the account that actually owns the land tokens, as that would have very big risks. Instead, delegate operator rights to a disposable wallet that owns no valuable tokens. If this private key is ever leaked somehow, you can easily revoke those operator rights from the account and set up a new wallet.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-analytics/

<title>Scene Analytics | Decentraland Documentation</title>

<strong>Scene Analytics</strong>

<h1>Scene Analytics</h1>

<p>As a creator, it’s very valuable to track player visits and the way in which players interact with your scene. Instead of assuming, you can obtain real data and make informed decisions while iterating on your designs.</p>

<p>The</p>

<p>produced a powerful analytics tool that is specially designed for using in Decentraland scenes. It was originally funded by</p>

<p>.</p>

<p>Through a one-line code snippet (the ‘Builder Tag’), you can expose/access (via API or dashboard) a myriad of interesting scene data including unique visitors, heat maps of visitor foot traffic, visitor activity, your scene rank and more.</p>

<p>Read the</p>

<p>for detailed instructions about how to implement it in your scenes.</p>

<p>For additional help or suggestions you can reach out to the WeMeta team</p>

<p>or</p>

<p>The</p>

<p>exposes basic data about user weekly visits to your scenes. This data is only available to users with ownership or operator rights on these parcels, and there is no historical record for checking past periods. As a scene creator you don’t need to do any prior actions, this data is available for all published scenes.</p>

<p>To access this data, visit the</p>

<p>, select the</p>

<strong>Land</strong>

<p>tab, then select a parcel or estate that you own or have rights on. There you will find data for any scene in that location. The data includes total user visits, median session time and peak concurrent users during the last 7 days.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/debug-in-preview/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/report-a-bug/

<title>Report a bug | Decentraland Documentation</title>

<strong>Report a bug</strong>

<h1>Report a bug</h1>

<p>If you encounter any bugs or issues with the Decentraland SDK and the Editor, please report them on our GitHub repository</p>

<p>.</p>

<h2>Before you report a bug</h2>

<p>Before submitting a bug report, please ensure the following:</p>

<li>Ensure you’re using the latest version of the SDK, in case the issue has already been fixed in newer releases.</li>

<li>Check the documentation for the feature you’re trying to use, to confirm that it’s supposed to behave as you’re expecting, and that this is not just a misunderstanding.</li>

<li>Rule out that the problem could be caused by how your scene is built. See</li>

<li>and</li>

<li>for tips.</li>

<li>Avoid duplicates. Check the</li>

<li>to avoid making a duplicate. If you have more information to add to an existing issue, please add a comment to the issue rather than creating a new issue.</li>

<h2>Reporting a bug</h2>

<p>To report a bug with the SDK, you’ll need a GitHub account. Follow these steps:</p>

<p>Visit the following link:</p>

<p>Click</p>

<strong>Get Started</strong>

<p>next to</p>

<strong>Bug Report</strong>

<p>.</p>

<p>Complete all the fields in the template. The template provides instructions for each section. The more details you can provide, the quicker our developers can identify and resolve the issue.</p>

<p>Click</p>

<strong>Submit new issue</strong>

<p>.</p>

<p>Developers may ask follow-up questions on your ticket if they need clarifications or additional information. You’ll receive email notifications of updates to your bug report.</p>

<strong>📔 Note</strong>

<blockquote>: For any issues not related to the SDK please contact the support team. To reach out, please visit this page</blockquote>

<blockquote>or send us an email to</blockquote>

<blockquote>. You can also find us on</blockquote>

<blockquote>. The team is available to help out from Monday-Sunday, 12pm to 9pm UTC and will do its best to get back in touch as soon as possible. You can expect a reply within 60 min on Discord during the above time frame and within 24h on email.</blockquote>

<strong>Additional Tips for Bug Reports:</strong>

<li>Create a separate issue for each bug. If you encounter multiple issues, make sure to create a new issue for each one.</li>

<li>Avoid lengthy explanations. Only include relevant command-line or console output or scene code when necessary.</li>

<li>Attach images or videos if possible. You can easily drag and drop them into the issue text area, and GitHub will handle the upload and linking.</li>

<h2>Using the Decentraland Playground</h2>

<p>Providing code snippets that demonstrate the problem is extremely useful. Reproducibility is crucial. If a bug can’t be reproduced, it’s challenging to diagnose and fix.</p>

<p>You can paste code snippets within your issue text, but the best way to provide code snippets is by using the</p>

<p>. Follow these steps:</p>

<p>Write your code snippet on the left, and view your scene on the right panel.</p>

<p>Click the</p>

<strong>Share</strong>

<p>button and paste the link into your issue report.</p>

<p>Using the playground simplifies issue reproduction and ensures that anyone opening the link can see the same output, regardless of their operating system, SDK version, Node version, etc. It also facilitates quick iteration to identify affected conditions and pinpoint the issue’s cause.</p>

<p>Keep your example as concise as possible, while still reproducing the issue. A simpler example helps eliminate ambiguity about the problem’s source.</p>

<strong>📔 Note</strong>

<blockquote>: It’s not possible to import assets to your scene on the Playground. So if reproducing the issue requires importing a 3D model or a sound file, it won’t be possible to display there.</blockquote>

<h2>Editing Documentation</h2>

<p>If you discover issues in the content of the Documentation website, you can submit change requests. Simply scroll down to the bottom of the page and click the</p>

<strong>Edit this page</strong>

<p>button. GitHub will guide you through creating a pull request with your changes. The foundation team will review your changes and publish them if they’re deemed useful.</p>

<h2>Feature Requests and Suggestions</h2>

<p>If you have suggestions for adding new functionality or features rather than reporting a problem, please use Decentraland’s</p>

<p>instead of creating a GitHub Issue.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/report-a-bug/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/debug-in-prod/

<title>Debug in production | Decentraland Documentation</title>

<strong>Debug in production</strong>

<h1>Debug in production</h1>

<p>When running a scene that’s already deployed to land in Decentraland, there are a number of things you can try out to debug it.</p>

<h2>Before deploying</h2>

<h3>Preview</h3>

<p>Before you deploy your scene to Decentraland, make sure the scene runs well in preview using the latest version of the Decentraland SDK. See</p>

<p>.</p>

<p>Although there should always be backwards compatibility of content built with older SDK versions, some platform-level aspects are subject to change over time. For example, lighting, avatar animations, skybox textures, global UIs, etc. By running a preview with the latest SDK version, you’re using a newer version of the engine, which should render your scene in a way that’s closer to what’s used in production.</p>

<h3>The test server</h3>

<p>You can deploy scenes to a test server as a staging environment, before publishing them to the live content servers. This server is not frequented by any players that visit Decentraland normally. To enter this server you must manually write its URL, but keep in mind that it’s not a private environment.</p>

<p>See</p>

<p>for details.</p>

<h2>Access debug information</h2>

<h3>See logs</h3>

<p>Debug information generated by the scenes is hidden from the console by default, but you can activate it by adding the following URL parameter:</p>

<code>&DEBUG_SCENE_LOG</code>

<p>Log messages from each active scene will be logged to the console, with coordinates on each message to clarify which scene is generating them.</p>

<strong>📔 Note</strong>

<blockquote>: As accessing this implies changing the URL and reading the browser console, it’s not available when running the scene n the Desktop client.</blockquote>

<h3>See debug panel</h3>

<p>To view scene stats, add the following URL parameter:</p>

<code>&SCENE_DEBUG_PANEL</code>

<p>This will enable the option of opening a panel that displays stats that update in real time, including material count, entity count, processed messages, etc. See</p>

<p>for details.</p>

<p>With this flag enabled, you’ll see a hint on the top-right corner of the screen, and you can press Y to open up this panel and see stats for the scene you’re currently standing on.</p>

<strong>📔 Note</strong>

<blockquote>: As accessing this implies changing the URL, it’s not available when running the scene n the Desktop client.</blockquote>

<h3>See FPS panel</h3>

<p>To see the current FPS (Frames Per Second) of the explorer, type</p>

<code>/showfps</code>

<p>into the chat window, and this will display the FPS panel.</p>

<p>Keep in mind that these FPS values may vary depending on the machine you’re using, and may also be affected by neighboring scenes.</p>

<p>It’s still a valuable way to assess the performance of the scene more objectively.</p>

<p>They count the frame per second of the Decentraland explorer, not of a single scene. You can try to isolate what effect neighbors have on the FPS by reducing the line of sight property on the settings, to load less content at a time.</p>

<h2>Report a bug</h2>

<p>If you encounter a problem that is not with your scene, but instead with the Decentraland SDK in general, please see</p>

<p>.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/debug-in-prod/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/debug-in-preview/#view-scene-stats

<title>Debug in preview | Decentraland Documentation</title>

<strong>Debug in preview</strong>

<h1>Debug in preview</h1>

<p>Running a preview provides some useful debugging information and tools to help you understand how the scene is rendered. The preview mode provides indicators that show parcel boundaries and the orientation of the scene.</p>

<p>If the scene can’t be compiled, you’ll just see the grid on the ground, with nothing rendered on it.</p>

<p>If this occurs, there are several places where you can look for error messages to help you understand what went wrong:</p>

<li>Check your code editor to make sure that it didn’t mark any syntax or logic errors.</li>

<li>Check the output of the command line where you ran</li>

<code>npm run start</code>

<li>Check the JavaScript console in the browser for any other error messages. For example, when using Chrome you access this through</li>

<code>View > Developer > JavaScript console</code>

<li>.</li>

<li>If you’re running a preview of a multiplayer scene that runs together with a local server, check the output of the command line window where you run the local server.</li>

<p>If an entity is located or extends beyond the limits of the scene, it will be displayed in red to indicate this, with a red bounding box to mark its boundaries. Nothing in your scene can extend beyond the scene limits. This won’t stop the scene from being rendered locally, but it will stop the offending entities form being rendered in Decentraland.</p>

<strong>💡 Tip</strong>

<blockquote>: Before you deploy your scene to the production environment, deploy it to the test environment to try it in a context that is a lot closer to production. See</blockquote>

<h2>Use the console</h2>

<p>Output messages to console (using</p>

<code>console.log()</code>

<p>). You can then view these messages as they are generated by opening the JavaScript console of your browser. For example, when using Chrome you access this through</p>

<code>View > Developer > JavaScript console</code>

<p>.</p>

<p>You can also add</p>

<code>debugger</code>

<p>commands or use the</p>

<code>sources</code>

<p>tab in the developer tools menu to add breakpoints and pause execution while you interact with the scene in real time.</p>

<p>Once you deploy the scene, you won’t be able to see the messages printed to console when you visit the scene in-world. If you need to check these messages on the deployed scene, you can turn the scene’s console messages back on adding the following parameter to the URL:</p>

<code>DEBUG_SCENE_LOG</code>

<p>.</p>

<h2>Add breakpoints in the Decentraland Editor</h2>

<p>Using the Decentraland Editor, you can add breakpoints to your scene’s code. When running a preview, whenever the code passes through these breakpoints, it pauses execution. A</p>

<strong>Debug</strong>

<p>panel opens, showing the current values of all variables at that point in time.</p>

<p>This is especially useful to validate that the data at a given point in time is what you expect. You can also modify the values of any variable manually and resume execution with the blue play button, using those new variables. This is great to test corner cases, to make sure the scene behaves as expected on every scenario, which might otherwise be a lot harder to reproduce.</p>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open VSCode in a Decentraland scene project.</li>

<li>Click on the Debugger icon on the left sidebar.</li>

<li>Click on</li>

<code>Run and Debug</code>

<li>and select</li>

<code>Decentraland</code>

<li>(this step is not necessary if your project already has a</li>

<code>.vscode/launch.json</code>

<li>file).</li>

<li>Click on</li>

<code>Run</code>

<li>. A browser should open.</li>

<li>Try setting a breakpoint and interacting with the scene in a way it will step on that line.</li>

<h2>View scene stats</h2>

<p>Open the scene’s stats by expanding the debug menu and toggling</p>

<strong>FPS Panel</strong>

<p>. This panel displays information about the renderer engine, and is updated in real time as things change.</p>

<h3>FPS</h3>

<p>The first section shows the renderer’s</p>

<em>FPS</em>

<p>(Frames Per Second). This value will tend to be lower as the scene grows in complexity, try to always keep this value above 25 FPS, to ensure a good experience for your players. The FPS will vary depending on the machine you run this in.</p>

<strong>📔 Note</strong>

<blockquote>: The renderer’s FPS is not the same as the scene’s updates of the game loop per second. The scene’s logic is capped at 30 FPS, the renderer’s FPS can go up to 60 or more.</blockquote>

<h3>Memory JS</h3>

<p>The second section displays the memory use on the browser. Always try to keep this value below 1 GB. If this value grows too much, it risks crashing the browser for players visiting your scene. Keep in mind that in production, the scene might be loaded together with other surrounding scenes and players, which can all contribute to the memory consumption.</p>

<h3>General</h3>

<p>The third section includes general information about how the scene is running. What Catalyst realm, and what Ethereum network is being used, also how many other players are around currently being rendered.</p>

<h3>Scene</h3>

<p>This section includes a lot of important stats about your scene’s rendering:</p>

<li>Processed Messages %</li>

<li>Pending on Queue</li>

<li>Poly</li>

<li>Textures</li>

<li>Materials</li>

<li>Entities</li>

<li>Meshes</li>

<li>Bodies</li>

<li>Components</li>

<p>The processed messages and message queue refer to the messages sent by your scene’s code to the engine. These are useful to know if your scene is running more operations than the engine can support. If many messages get queued up, that’s usually a bad sign.</p>

<p>The other numbers in the panel refer to the usage of resources, they display the total count of each item that’s currently being managed in memory. Compare these values to the</p>

<p>. Keep in mind that the maximum allowed number for these values is proportional to the amount of parcels in the scene. If your scene tries to render an entity that exceeds these values, for example if it has too many triangles, it risks being too heavy to run for players in the scene.</p>

<strong>📔 Note</strong>

<blockquote>: Keeping this panel open can negatively impact the frame rate and performance of your scene, so we recommend closing it while not in use.</blockquote>

<h2>Report a bug</h2>

<p>If you encounter a problem that is not with your scene, but instead with the Decentraland SDK in general, please see</p>

<p>.</p>

<h2>Dependency versions</h2>

<p>Running a Decentraland scene locally depends on two main libraries:</p>

<code>decentraland</code>

<p>(the CLI, which is installed globally on your machine) and</p>

<code>decentraland-ecs</code>

<p>, which is installed on each project folder. Make sure both of those are up to date, as any issues you’re experiencing might already be fixed in newer versions. There may also be compatibility problems when attempting to run with one of these two outdated and the other up to date. You can run the following commands to update both these libraries to the latest stable version:</p>

<code>npm i -g decentraland@latest

npm i decentraland-ecs@latest</code>

<p>If you’re using any of the</p>

<p>make sure those are also up to date, as older versions of these libraries may not be compatible with newer versions of</p>

<code>decentraland-ecs</code>

<p>.</p>

<p>The</p>

<code>decentraland-ecs</code>

<p>library has in turn a couple of internal dependencies that are installed with it: the</p>

<code>renderer</code>

<p>and the</p>

<code>kernel</code>

<p>. Each</p>

<code>decentraland-ecs</code>

<p>version is paired with its corresponding versions of both. In occasions, it may be useful to try switching versions of these dependencies independently, to better pinpoint where an issue has originated. You can force your preview to use a different version of the</p>

<code>renderer</code>

<p>or of the</p>

<code>kernel</code>

<p>by simply providing the url parameters</p>

<code>renderer-version</code>

<p>and</p>

<code>kernel-version</code>

<p>, pointing at a specific commit.</p>

<p>For example, you can run your preview with the following URL:</p>

<p>http://127.0.0.1:8000/?position=0%2C0&SCENE_DEBUG_PANEL&renderer-version=1.0.12119-20210830195045.commit-a8be53a</p>

<p>To find out what versions are available to choose from on each dependency, check the version history on the NPM pages for the</p>

<p>and for the</p>

<p>. To know what versions of these dependencies are in use by default by a specific</p>

<code>decentraland-ecs</code>

<p>version, you can run the following command, indicating the</p>

<code>decentraland-ecs</code>

<p>version you’re curious about:</p>

<code>npm info</code>

<h2>View bounding boxes</h2>

<p>While running a scene preview, open the debug menu (on the right of the minimap) and click</p>

<strong>Bounding Boxes</strong>

<p>to toggle the visualization of bounding boxes on and off.</p>

<p>Bounding boxes are displayed as thin white boxes around each mesh. Bounding boxes show the limits of the space occupied by a 3D model. Every mesh in a 3D model has its own bounding box.</p>

<p>When Decentraland’s engine checks if an entity is within the scene limits, it looks at the positions of each corner of the bounding box. Checking the corners of the bounding boxes is an engine optimization, as checking the position of each vertex in the model would be a lot more work. Ideally the bounding box shouldn’t extend beyond the visible vertexes of the model, but it may not be the case if the model wasn’t carefully built with this in mind.</p>

<p>By visualizing bounding boxes, you can debug problems with entities being reported as outside the scene limits.</p>

<h2>Lighting conditions</h2>

<p>The in-world time of day has a big impact on how 3D models look. The color of the light source changes subtly, having a bluish tint at night, and a reddish tint during sunrise and sunset. The direction of the light also moves across the sky, casting shadows in different directions.</p>

<p>Check that your scene looks good at all times of day by switching the game clock to different values. Open the settings panel, and in the</p>

<strong>General</strong>

<p>tab set the</p>

<strong>skybox time</strong>

<p>to any time you prefer. If this slider is grayed out, make sure that the</p>

<strong>Dynamic skybox</strong>

<p>option is disabled.</p>

<figcaption>In-world instructions</figcaption>

<p>Your 3D model’s materials might not look the same as they did in the modeling tool you created it with. This is to be expected, as all 3D rendering engines have subtle differences in how they deal with light and materials.</p>

<h2>Avatars and accounts</h2>

<p>To use the avatar that’s linked to your active Metamask account, with access to all of your owned wearables, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>With the CLI, you can start the preview with:</p>

<code>npm run start --web3</code>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<p>When running a preview normally, without a connected Web3 account, you’re assigned a random avatar each time you reload.</p>

<p>To use a consist guest avatar across your sessions, you can store an avatar profile by adding a</p>

<code>PLAYER</code>

<p>parameter to the URL with any string as its value. When using this, the preview will store your avatar’s settings locally on your browser, to retrieve them whenever you use the same string on the</p>

<code>PLAYER</code>

<p>parameter. For example, every time you open the preview with the URL</p>

<code>http://127.0.0.1:8000/?PLAYER=ringo</code>

<p>, you’ll have the same avatar.</p>

<h2>Connecting to Ethereum network</h2>

<p>If your scene makes use of transactions over the Ethereum network, for example if it prompts you to pay a sum in MANA to open a door, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<h3>Using the Ethereum test network</h3>

<p>You can avoid using real currency while previewing the scene. For this, you must use the</p>

<em>Ethereum Ropsten test network</em>

<p>and transfer fake MANA instead. To use the test network you must set your Metamask Chrome extension to use the</p>

<em>Ropsten test network</em>

<p>instead of</p>

<em>Main network</em>

<p>. You must also own MANA in the Ropsten blockchain, which you can acquire for free from Decentraland.</p>

<p>Any transactions that you accept while viewing the scene in this mode will only occur in the test network and not affect the MANA balance in your real wallet.</p>

<h2>Multiplayer testing</h2>

<p>If you open a second preview window on your machine, you will enter the scene with a different avatar. The avatars on both tabs will be able to see each other and interact, although currently they might have inconsistent names and wearables on.</p>

<strong>📔 Note</strong>

<blockquote>: You can’t open multiple tabs using the same account. So if your URL has a hardcoded</blockquote>

<code>PLAYER</code>

<blockquote>parameter with the same string on multiple tabs, or you’re connecting to Metamask on more than one tab, it won’t be possible to load them all. Each simultaneous tab should load a different account.</blockquote>

<p>If the scene uses the MessageBus to send messages between players, these will work between the different tabs.</p>

<p>If the scene connects to a third party server via websockets, these connections should also work independently on each tab, as separate players.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-files/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/scene-metadata/#metadata

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>A scene is a Decentraland project that is spatially delimited, and is mapped to one or several LAND parcels. If a scene is deployed to the Decentraland map, players can experience it by visiting the scene’s coordinates.</p>

<p>See</p>

<p>for a list of what files are used in a scene project.</p>

<h2>Metadata</h2>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary to load your scene. You’re also free to add any fields that you wish.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>npx update-parcels</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>npx update-parcels <parcel></code>

<p>For example:</p>

<code>npx update-parcels 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>npx update-parcels <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>npx update-parcels 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>npx update-parcels <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>npx update-parcels</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>It’s very important to give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these displayed on a modal when they select the parcels of your scene on the map. They will also see these in a confirmation screen when being</p>

<p>there by another scene. Setting up compelling data here can significantly help drive traffic to your scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is especially useful in large scenes, to prevent players from spawning too far away from the coordinates where they originally intended to load. To have many spawn points, simply list them as an array.</p>

<p>When there are multiple spawn points, the one that’s closest to the coordinates indicated by the player is picked.</p>

<p>If a coordinate is marked as</p>

<code>default</code>

<p>, it will always be used, regardless of if it’s the closest. If multiple spawn points are marked as</p>

<code>default</code>

<p>, the closest one of these is picked.</p>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<p>A scene can also have multiple spawn regions, just like it can have multiple spawn points.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<strong>📔 Note</strong>

<blockquote>: Permissions are only relevant in</blockquote>

<blockquote>and</blockquote>

<blockquote>. Normal scenes (both in parcels or in Worlds) are not affected by these permissions, and are free to use the corresponding functionality.</blockquote>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on smart wearables and portable experiences:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>disabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the scene metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for libraries, where the library might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>getSceneInformation</code>

<p>function:</p>

<p>Then you can call the</p>

<code>getSceneInformation()</code>

<p>function, which returns a json object that includes much of the contents of the scene.json file.

The example below shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getSceneInformation()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.

Do not use the deprecated</blockquote>

<code>getSceneInfo()</code>

<blockquote>function.</blockquote>

<p>The object returned by</p>

<code>getSceneInformation()</code>

<p>includes the following:</p>

<code>baseUrl</code>

<li>: The base URL where the scene’s content is hosted</li>

<code>content</code>

<li>: An array with all the files of the scene, including their hash, that can be used together with the baseUrl to retrieve them.</li>

<code>metadataJson</code>

<li>: The full contents of the scene’s scene.json, as a string. You must parse this to obtain specific values.</li>

<code>urn</code>

<li>: The unique urn for the scene as a whole.</li>

<p>The example below parses the contents from</p>

<code>metadataJson</code>

<p>to obtain values from properties in the scene.json file</p>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re interested in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene is listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk-101/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/coding-scenes/

<title>Coding scenes | Decentraland Documentation</title>

<strong>Coding scenes</strong>

<h1>Coding scenes</h1>

<h2>The development tools</h2>

<p>At a very high level, the</p>

<strong>Decentraland Software Development Kit</strong>

<p>(SDK) allows you to do the following:</p>

<li>Generate a default</li>

<em>project</em>

<li>containing a Decentraland scene, including all the assets needed to render and run your content.</li>

<li>Build, test, and preview the content of your scene locally in your web browser - completely offline, and without having to make any Ethereum transactions or own LAND.</li>

<li>Write TypeScript code using the Decentraland API to add interactive and dynamic behavior to the scene.</li>

<li>Upload the content of your scene to the content server.</li>

<li>Link your LAND tokens to the URL of the content you have uploaded.</li>

<p>Our SDK includes the following components:</p>

<strong>The Decentraland Editor</strong>

<li>: An extension for Visual Studio Code that allows you to create scenes, preview and debug, and publish.</li>

<strong>The Decentraland ECS</strong>

<li>: A TypeScript package containing the library of helper methods that allows you to create interactive experiences. Use it to create and manipulate objects in the scene and also to facilitate in-world transactions between players or other applications. (</li>

<li>)</li>

<strong>The Decentraland CLI</strong>

<li>(Command Line Interface): Use it to</li>

<li>new Decentraland scenes locally on your own machine, preview them and upload them to the content server.</li>

<strong>Scene examples</strong>

<li>: Take inspiration and coding best practices from the</li>

<li>.</li>

<h2>Requirements</h2>

<p>To develop a scene locally, you don’t need to own LAND tokens. Developing and testing a scene can be done completely offline, without the need to deploy a scene to the Ethereum network (the system Decentraland uses to establish ownership of LAND), or the content server.</p>

<p>You must have the following:</p>

<strong>Visual Studio Code</strong>

<p>: Dowload it</p>

<p>. Beyond hosting the Decentraland Editor extension, it helps you create scenes a lot faster and with less errors. A source code editor marks syntax errors, autocompletes while you write and even shows you smart suggestions that depend on the context that you’re in. You can also click on an object in the code to see the full definition of its class and what attributes it supports.</p>

<strong>The Decentraland Editor</strong>

<p>: An extension for Visual Studio code that exposes many common functionalities as buttons in the UI.</p>

<p>.</p>

<h2>Supported languages and syntax</h2>

<h4>TypeScript (recommended)</h4>

<p>We use</p>

<p>to create our scenes.</p>

<p>TypeScript is a superset of JavaScript, so if you’re familiar with JavaScript you’ll find it’s almost the same, but TypeScript allows you to employ object-oriented programming and type declarations. Features like autocomplete and type-checking speed up development times and allow for the creation of a more solid codebase. These features are all key components to a positive developer experience.</p>

<h4>Other languages</h4>

<p>You can use another tool or language instead of TypeScript and compile it into JavaScript, as long as your compiled scripts are contained within a single JavaScript file named</p>

<em>game.js</em>

<p>. All provided type declarations are made in TypeScript, and other languages and transpilers are not officially supported.</p>

<h2>Scenes</h2>

<p>The content you deploy to your LAND is called a</p>

<strong>scene</strong>

<p>. A scene is an interactive program that renders content, this could be a game, an interactive experience, an art gallery, whatever you want!</p>

<p>Scenes are deployed to virtual LAND in Decentraland. LAND is a scarce and non-fungible asset maintained in an Ethereum smart contract. Deploy to a single</p>

<strong>parcel</strong>

<p>, a 16 meter by 16 meter piece of LAND, or to an</p>

<strong>estate</strong>

<p>, comprised of multiple adjacent parcels.</p>

<p>We are developing the web client that will allow players to explore Decentraland. All of the content you upload to your LAND will be rendered and viewable through this client. We have included a preview tool in the SDK so that you can preview, test, and interact with your content in the meantime.</p>

<h2>Entities and Components</h2>

<p>Three dimensional scenes in Decentraland are based on an</p>

<p>architecture, where everything in a scene is an</p>

<em>entity</em>

<p>, and each entity can include</p>

<em>components</em>

<p>that determine its characteristics.</p>

<p>Entities are nested inside other entities to form a tree structure. If you’re familiar with web development, you might find it useful to think of entities as elements in a DOM tree and of components as the attributes of each of these elements.</p>

<p>See</p>

<p>for an in-depth look of both these concepts and how they’re used by Decentraland scenes.</p>

<h2>The game loop</h2>

<p>The</p>

<p>is the backbone of a Decentraland scene’s code. It cycles through part of the code at a regular interval and does the following:</p>

<li>Listen for player input</li>

<li>Update the scene</li>

<li>Re-render the scene</li>

<p>In most traditional software programs, all events are triggered directly by player actions. Nothing in the program’s state will change until the player clicks on a button, opens a menu, etc.</p>

<p>But interactive environments and games are different from that. Not all changes to the scene are necessarily caused by a player’s actions. Your scene could have animated objects that move on their own or even non-player characters that have their own AI. Some player actions might also take multiple frames to be completed, for example if the opening of a door needs to take a whole second, the door’s rotation must be incrementally updated about 30 times as it moves.</p>

<p>We call each iteration over the loop a</p>

<em>frame</em>

<p>. Decentraland scenes are rendered at 30 frames per second whenever possible. If a frame takes more time than that to be rendered, then less frames will be processed.</p>

<p>In each frame, the scene is updated; then the scene is re-rendered, based on the updated values.</p>

<p>In Decentraland scenes, there is no explicitly declared game loop, but rather the</p>

<code>update()</code>

<p>functions on the</p>

<p>of the scene make up the game loop.</p>

<p>The compiling and rendering of the scene is carried out in the backend, you don’t need to handle that while developing your scene.</p>

<h2>Systems</h2>

<p>Entities and components are places to store information about the objects in a scene.</p>

<em>Systems</em>

<p>hold functions that change the information that’s stored in components.</p>

<em>Systems</em>

<p>are what make a static scene dynamic, allowing things to change over time or in response to player interaction.</p>

<p>Each System has an</p>

<code>update()</code>

<p>method that’s executed on every frame of the game loop, following the</p>

<em>update pattern</em>

<p>.</p>

<p>See</p>

<p>for more details about how systems are used in a scene.</p>

<h2>Component groups</h2>

<p>keep track of all entities in the scene that have certain components in them. Once a component group is created, it automatically keeps its list up to date with each new entity or component that is added or removed.</p>

<p>If you attempt to update all the entities in the scene on every frame, that could have a significant cost in performance. By referring only to the entities in a component group, you ensure you’re only dealing with those that are relevant.</p>

<p>Component groups can be referenced by the functions in a</p>

<p>. Typically an</p>

<code>update()</code>

<p>function will loop over the entities in the component group, performing the same actions on each.</p>

<h2>Putting it all together</h2>

<p>The</p>

<em>engine</em>

<p>is what sits in between</p>

<em>entities</em>

<p>,</p>

<em>components</em>

<p>and</p>

<em>component groups</em>

<p>on one hand and</p>

<em>systems</em>

<p>on the other. It calls system’s functions, updates groups when entities are added, etc.</p>

<p>All of the values stored in the components in the scene represent the scene’s state at that point in time. With every frame of the game loop, the engine runs the</p>

<code>update()</code>

<p>function of each of the systems to update the values stored in the components.</p>

<p>After all the systems run, the components on each entity will have new values. When the engine renders the scene, it will use these new updated values and players will see the entities change to match their new states.</p>

<p>In the example above, a</p>

<code>cube</code>

<p>entity and a</p>

<code>RotatorSystem</code>

<p>system are added to the engine. The</p>

<code>cube</code>

<p>entity has a</p>

<code>Transform</code>

<p>, and a</p>

<code>BoxShape</code>

<p>component. In every frame of the game loop, the</p>

<code>update()</code>

<p>function of</p>

<code>RotationSystem</code>

<p>is called, and it changes the rotation values in the</p>

<code>Transform</code>

<p>component of the</p>

<code>cube</code>

<p>entity.</p>

<p>Note that most of the code above is executed just once, when loading the scene. The exception is the</p>

<code>update()</code>

<p>method of the system, which is called on every frame of the game loop.</p>

<h2>Scene Decoupling</h2>

<p>Your scenes don’t run in the same context as the engine

(a.k.a. the main thread). We created the SDK in a way that is

entirely decoupled from the rendering engine. We designed it to be like this for both safety and performance reasons.</p>

<p>Because of this decoupling, your scene’s code doesn’t have access to the DOM or the</p>

<code>window</code>

<p>object, so you can’t access data like the player’s browser or geographical location.</p>

<p>The decoupling works by using RPC protocol, this protocol assigns a small part of the client to only render the scene and control events.</p>

<p>We have also abstracted the communication protocol. This allows us to run the scenes locally in a WebWorker.</p>

<p>We don’t want developers to intervene with the internals of the engine or even need to know what lies inside the engine. We need to ensure a consistent experience for players throughout the Decentraland map, and mistakes are more likely to happen at that “low” level.</p>

<h2>SDK Versions</h2>

<p>When developing a new scene, you use the</p>

<code>@latest</code>

<p>stable SDK release by default.</p>

<p>You can install the</p>

<code>@next</code>

<p>SDK release if you want to leverage or preview upcoming features that didn’t yet make it into the latest stable release.</p>

<p>To do so, open the Decentraland Editor tab, and press the</p>

<code>+</code>

<p>sign to install the following:</p>

<code>decentraland-ecs@next</code>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Keep in mind that the @next version might suffer issues from time to time. The syntax and name of new features might change before it’s released in a stable version.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/coding-scenes/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/editor/

<title>Decentraland Editor | Decentraland Documentation</title>

<strong>Decentraland Editor</strong>

<h1>Decentraland Editor</h1>

<h2>Install the editor</h2>

<p>See the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: There are two versions of the editor, the</blockquote>

<strong>Decentraland Editor SDK6</strong>

<blockquote>and the</blockquote>

<strong>Decentraland Editor SDK7</strong>

<blockquote>. As their names suggest, each version of the editor is meant for working on Decentraland scenes built with different SDK versions. You can have both extensions installed in your same instance of Visual Studio Code, and use them accordingly depending on what project you’re working with.</blockquote>

<h2>About the Decentraland Editor</h2>

<p>The Decentraland editor is an extension of Visual Studio Code, built for easing the experience of creating Decentraland scenes.</p>

<p>Ultimately the editor will offer many no-code options for placing items, and setting component parameters via graphical UIs. The first version of the editor aims for simplifying the experience of coding scenes by removing the command line from the list of tools you need to use. It offers UI options for:</p>

<strong>Create projects</strong>

<li>: Scaffold a new project of various types: scene, library, portable experience, and smart item. See</li>

<li>.</li>

<strong>Run scenes</strong>

<li>: preview your scenes within VSCode, or launch in a browser. See</li>

<li>.</li>

<strong>Debug scenes</strong>

<li>: Add breakpoints to the code, to pause execution and see current state of all variables at that point in time. See</li>

<li>.</li>

<strong>Publish scenes</strong>

<li>: publish your scene to the world. See</li>

<li>.</li>

<strong>Manage dependencies</strong>

<li>: add, remove, and list the libraries and dependencies that your project is using. See</li>

<li>.</li>

<strong>Preview models</strong>

<li>: Open a gltf or .glb model to see an interactive preview.</li>

<h2>Reporting issues</h2>

<p>If you run into any bugs, please report an issue in the</p>

<p>repository.</p>

<p>We ask you to please detail how to reproduce the issue as much as possible.</p>

<h2>Submit feedback</h2>

<p>Once you’ve had a chance to try the new editor, please fill in the</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/editor/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/debug-in-preview/#add-breakpoints-in-the-decentraland-editor

<title>Debug in preview | Decentraland Documentation</title>

<strong>Debug in preview</strong>

<h1>Debug in preview</h1>

<p>Running a preview provides some useful debugging information and tools to help you understand how the scene is rendered. The preview mode provides indicators that show parcel boundaries and the orientation of the scene.</p>

<p>If the scene can’t be compiled, you’ll just see the grid on the ground, with nothing rendered on it.</p>

<p>If this occurs, there are several places where you can look for error messages to help you understand what went wrong:</p>

<li>Check your code editor to make sure that it didn’t mark any syntax or logic errors.</li>

<li>Check the output of the command line where you ran</li>

<code>dcl start</code>

<li>Check the JavaScript console in the browser for any other error messages. For example, when using Chrome you access this through</li>

<code>View > Developer > JavaScript console</code>

<li>.</li>

<li>If you’re running a preview of a multiplayer scene that runs together with a local server, check the output of the command line window where you run the local server.</li>

<p>If an entity is located or extends beyond the limits of the scene, it will be displayed in red to indicate this, with a red bounding box to mark its boundaries. Nothing in your scene can extend beyond the scene limits. This won’t stop the scene from being rendered locally, but it will stop the offending entities form being rendered in Decentraland.</p>

<strong>💡 Tip</strong>

<blockquote>: Before you deploy your scene to the production environment, deploy it to the test environment to try it in a context that is a lot closer to production. See</blockquote>

<h2>Use the console</h2>

<p>Output messages to console (using</p>

<code>log()</code>

<p>). You can then view these messages as they are generated by opening the JavaScript console of your browser. For example, when using Chrome you access this through</p>

<code>View > Developer > JavaScript console</code>

<p>.</p>

<p>You can also add</p>

<code>debugger</code>

<p>commands or use the</p>

<code>sources</code>

<p>tab in the developer tools menu to add breakpoints and pause execution while you interact with the scene in real time.</p>

<p>Once you deploy the scene, you won’t be able to see the messages printed to console when you visit the scene in-world. If you need to check these messages on the deployed scene, you can turn the scene’s console messages back on adding the following parameter to the URL:</p>

<code>DEBUG_SCENE_LOG</code>

<p>.</p>

<h2>Add breakpoints in the Decentraland Editor</h2>

<p>Using the Decentraland Editor, you can add breakpoints to your scene’s code. When running a preview, whenever the code passes through these breakpoints, it pauses execution. A</p>

<strong>Debug</strong>

<p>panel opens, showing the current values of all variables at that point in time.</p>

<p>This is especially useful to validate that the data at a given point in time is what you expect. You can also modify the values of any variable manually and resume execution with the blue play button, using those new variables. This is great to test corner cases, to make sure the scene behaves as expected on every scenario, which might otherwise be a lot harder to reproduce.</p>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open VSCode in a Decentraland scene project.</li>

<li>Click on the Debugger icon on the left sidebar.</li>

<li>Click on</li>

<code>Run and Debug</code>

<li>and select</li>

<code>Decentraland</code>

<li>(this step is not necessary if your project already has a</li>

<code>.vscode/launch.json</code>

<li>file).</li>

<li>Click on</li>

<code>Run</code>

<li>. A browser should open.</li>

<li>Try setting a breakpoint and interacting with the scene in a way it will step on that line.</li>

<h2>View scene stats</h2>

<p>The lower-left corner of the preview informs you of the</p>

<em>FPS</em>

<p>(Frames Per Second) with which your scene is running. Your scene should be able to run above 25 FPS most of the time.</p>

<p>Click the</p>

<em>Y</em>

<p>key to open the Panel. This panel displays the following information about the scene, and is updated in real time as things change:</p>

<li>Processed Messages</li>

<li>Pending on Queue</li>

<li>Scene location (preview vs deployed)</li>

<li>Poly Count</li>

<li>Textures count</li>

<li>Materials count</li>

<li>Entities count</li>

<li>Meshes count</li>

<li>Bodies count</li>

<li>Components count</li>

<p>The processed messages and message queue refer to the messages sent by your scene’s code to the engine. These are useful to know if your scene is running more operations than the engine can support. If many messages get queued up, that’s usually a bad sign.</p>

<p>The other numbers in the panel refer to the usage of resources, in relation to the</p>

<p>. Keep in mind that the maximum allowed number for these values is proportional to the amount of parcels in the scene. If your scene tries to render an entity that exceeds these values, for example if it has too many triangles, it won’t be rendered in-world once deployed.</p>

<strong>📔 Note</strong>

<blockquote>: Keeping this panel open can negatively impact the frame rate and performance of your scene, so we recommend closing it while not in use.</blockquote>

<h2>Run code only in preview</h2>

<p>You can detect if a scene is running as a preview or is already deployed in production, so that the same code behaves differently depending on the case. You can use this to add debugging logic to your code without the risk of forgetting to remove it and having it show in production.</p>

<p>To use this function, import the</p>

<code>@decentraland/EnvironmentAPI</code>

<p>library.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>isPreviewMode()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay in returning data.</blockquote>

<h2>Dependency versions</h2>

<p>Running a Decentraland scene locally depends on two main libraries:</p>

<code>decentraland</code>

<p>(the CLI, which is installed globally on your machine) and</p>

<code>decentraland-ecs</code>

<p>, which is installed on each project folder. Make sure both of those are up to date, as any issues you’re experiencing might already be fixed in newer versions. There may also be compatibility problems when attempting to run with one of these two outdated and the other up to date. You can run the following commands to update both these libraries to the latest stable version:</p>

<code>npm i -g decentraland@latest

npm i decentraland-ecs@latest</code>

<p>If you’re using any of the</p>

<p>make sure those are also up to date, as older versions of these libraries may not be compatible with newer versions of</p>

<code>decentraland-ecs</code>

<p>.</p>

<p>The</p>

<code>decentraland-ecs</code>

<p>library has in turn a couple of internal dependencies that are installed with it: the</p>

<code>renderer</code>

<p>and the</p>

<code>kernel</code>

<p>. Each</p>

<code>decentraland-ecs</code>

<p>version is paired with its corresponding versions of both. In occasions, it may be useful to try switching versions of these dependencies independently, to better pinpoint where an issue has originated. You can force your preview to use a different version of the</p>

<code>renderer</code>

<p>or of the</p>

<code>kernel</code>

<p>by simply providing the url parameters</p>

<code>renderer-version</code>

<p>and</p>

<code>kernel-version</code>

<p>, pointing at a specific commit.</p>

<p>For example, you can run your preview with the following URL:</p>

<p>http://127.0.0.1:8000/?position=0%2C0&SCENE_DEBUG_PANEL&renderer-version=1.0.12119-20210830195045.commit-a8be53a</p>

<p>To find out what versions are available to choose from on each dependency, check the version history on the NPM pages for the</p>

<p>and for the</p>

<p>. To know what versions of these dependencies are in use by default by a specific</p>

<code>decentraland-ecs</code>

<p>version, you can run the following command, indicating the</p>

<code>decentraland-ecs</code>

<p>version you’re curious about:</p>

<code>npm info</code>

<h2>View bounding boxes</h2>

<p>While running a scene preview, open the debug menu (on the right of the minimap) and click</p>

<strong>Bounding Boxes</strong>

<p>to toggle the visualization of bounding boxes on and off.</p>

<p>Bounding boxes are displayed as thin white boxes around each mesh. Bounding boxes show the limits of the space occupied by a 3d model. Every mesh in a 3d model has its own bounding box.</p>

<p>When Decentraland’s engine checks if an entity is within the scene limits, it looks at the positions of each corner of the bounding box. Checking the corners of the bounding boxes is an engine optimization, as checking the position of each vertex in the model would be a lot more work. Ideally the bounding box shouldn’t extend beyond the visible vertexes of the model, but it may not be the case if the model wasn’t carefully built with this in mind.</p>

<p>By visualizing bounding boxes, you can debug problems with entities being reported as outside the scene limits.</p>

<h2>Lighting conditions</h2>

<p>The in-world time of day has a big impact on how 3d models look. The color of the light source changes subtly, having a bluish tint at night, and a reddish tint during sunrise and sunset. The direction of the light also moves across the sky, casting shadows in different directions.</p>

<p>Check that your scene looks good at all times of day by switching the game clock to different values. Open the settings panel, and in the</p>

<strong>General</strong>

<p>tab set the</p>

<strong>skybox time</strong>

<p>to any time you prefer. If this slider is grayed out, make sure that the</p>

<strong>Dynamic skybox</strong>

<p>option is disabled.</p>

<figcaption>In-world instructions</figcaption>

<p>Your 3d model’s materials might not look the same as they did in the modeling tool you created it with. This is to be expected, as all 3d rendering engines have subtle differences in how they deal with light and materials.</p>

<h2>Avatars and accounts</h2>

<p>To use the avatar that’s linked to your active Metamask account, with access to all of your owned wearables, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>With the CLI, you can start the preview with:</p>

<code>dcl start --web3</code>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<p>When running a preview normally, without a connected Web3 account, you’re assigned a random avatar each time you reload.</p>

<p>To use a consist guest avatar across your sessions, you can store an avatar profile by adding a</p>

<code>PLAYER</code>

<p>parameter to the URL with any string as its value. When using this, the preview will store your avatar’s settings locally on your browser, to retrieve them whenever you use the same string on the</p>

<code>PLAYER</code>

<p>parameter. For example, every time you open the preview with the URL</p>

<code>http://127.0.0.1:8000/?PLAYER=ringo</code>

<p>, you’ll have the same avatar.</p>

<h2>Connecting to Ethereum network</h2>

<p>If your scene makes use of transactions over the Ethereum network, for example if it prompts you to pay a sum in MANA to open a door, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>With the CLI, you can start the preview with:</p>

<code>dcl start --web3</code>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<h4>Using the Ethereum test network</h4>

<p>You can avoid using real currency while previewing the scene. For this, you must use the</p>

<em>Ethereum Ropsten test network</em>

<p>and transfer fake MANA instead. To use the test network you must set your Metamask Chrome extension to use the</p>

<em>Ropsten test network</em>

<p>instead of</p>

<em>Main network</em>

<p>. You must also own MANA in the Ropsten blockchain, which you can acquire for free from Decentraland.</p>

<p>Any transactions that you accept while viewing the scene in this mode will only occur in the test network and not affect the MANA balance in your real wallet.</p>

<h2>Multiplayer testing</h2>

<p>If you open a second preview window on your machine, you will enter the scene with a different avatar. The avatars on both tabs will be able to see each other and interact, although currently they might have inconsistent names and wearables on.</p>

<strong>📔 Note</strong>

<blockquote>: You can’t open multiple tabs using the same account. So if your URL has a hardcoded</blockquote>

<code>PLAYER</code>

<blockquote>parameter with the same string on multiple tabs, or you’re connecting to Metamask on more than one tab, it won’t be possible to load them all. Each simultaneous tab should load a different account.</blockquote>

<p>If the scene uses the MessageBus to send messages between players, these will work between the different tabs.</p>

<p>If the scene connects to a third party server via websockets, these connections should also work independently on each tab, as separate players.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/debug-in-preview/#add-breakpoints-in-the-decentraland-editor

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/dev-workflow/#deploy-to-the-test-environment

<title>Development workflow | Decentraland Documentation</title>

<strong>Development workflow</strong>

<h1>Development workflow</h1>

<p>This document outlines the steps recommended for developing a scene for Decentraland, from ideation to publishing and beyond.</p>

<h2>Install the Decentraland Editor</h2>

<p>Make sure you have the Decentraland Editor installed.</p>

<li>.</li>

<h2>Design your experience</h2>

<p>Think about how much space you need to take up, what kind of distribution, what kinds of mechanics you want players to be able to carry out, etc. The following documents can serve as a guide:</p>

<h2>Where to publish</h2>

<p>In Decentraland, content is published to adjacent plots of land in a finit amount of space. Players can freely walk from one to the other. Each scene is its own contained little world, items from one scene can’t extend out into another scene, and the code for each scene is sandboxed from all others.</p>

<p>Permission to publish to each of these is controlled via tokens. You don’t need land to develop a scene, but you will need access to land once you’re ready to publish. Alternatively, you have the option to publish to Decentraland</p>

<p>, which are self-contained and isolated scenes.</p>

<p>The following options are available:</p>

<li>Obtain permissions from a land owner</li>

<li>Publish to a Decentraland World, see</li>

<li>to learn more.</li>

<p>See</p>

<p>for more details.</p>

<h2>Templates and examples</h2>

<p>When creating a new scene, choose amongst several base template scenes that include some basic code and 3d models. Use these to get started faster.</p>

<li>: here you can find a large collection of example scenes, each showcasing different mechanics that you can borrow. You can also clone any of these scenes and use it as a starting point.</li>

<li>: these can simplify many common tasks.</li>

<h2>Art assets</h2>

<p>If you’re an experienced artist or you have access to someone who is, you can create custom</p>

<code>.gltf</code>

<p>or</p>

<code>.glb</code>

<p>models for your scene. See</p>

<p>for tips on how to create 3D models for Decentraland.</p>

<p>There are many sources to obtain free or paid art assets. For example:</p>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<h2>Run a local preview</h2>

<p>To run a preview of your scene, open a Visual Studio Code window on your project’s root folder and click the</p>

<strong>Preview</strong>

<p>button on the Decentraland Editor tab.</p>

<li>) for more details.</li>

<li>Check the</li>

<li>for tips on how to debug any issues.</li>

<strong>💡 Tip</strong>

<blockquote>: If you get stuck trying to debug an issue, visit the</blockquote>

<blockquote>to get help from other developers.</blockquote>

<em>Optional</em>

<p>: Your scene`s mechanics might rely on a 3rd party server to carry out player validations, permanent data storage, or other functionalities. See</p>

<h2>Publish to the test server</h2>

<p>Deploy your scene to a test server. This server is not private but only accessible via a specific URL, so players won’t bump into what you publish there.</p>

<li>.</li>

<h2>Publish to Decentraland</h2>

<p>Once you’re happy with your scene, it’s time to publish it to the production environment. There all players will have access to it if they visit the scene’s coordinates.</p>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: Before you do, check that your scene has all the necessary metadata: name, description, a preview image, spawn points. See</blockquote>

<blockquote>for details.</blockquote>

<h2>Promote</h2>

<p>Once your scene is out there, you want to give it visibility and have people visit it. There are a number of ways you can shine a spotlight on it:</p>

<li>Share it on social media</li>

<li>: create an event to promote your scene</li>

<li>: ensure your scene is well positoned here, encourage players to vote your scene to get more visibility</li>

<h2>Iterate</h2>

<p>One great advantage of Decentraland is that you can easily iterate over your scenes. Measure your scene’s success with players, then keep publishing changes as you perfect the experience for your players.</p>

<li>.</li>

<h2>Giving back</h2>

<p>Decentraland is a community project, the community of creators learns together and leverage each other’s creations. Consider the following:</p>

<li>Join the</li>

<li>and help other developers in need of advice.</li>

<li>Share your scene’s code as an open source repo on GitHub.</li>

<li>Build a minimal example to share a specific reusable mechanic, as an open source repo on GitHub.</li>

<li>Make a PR to the Awesome Repository to include your scenes.</li>

<li>Write a library that encapsulates the complexity of common challenges, so others can overcome them easily.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/publishing-permissions/

<title>Publishing options | Decentraland Documentation</title>

<strong>Publishing options</strong>

<h1>Publishing options</h1>

<p>To invite others to visit a scene you built, you’ll need to publish it in Decentraland. To do this, you’ll need to have deploy permissions to Decentraland parcels or own a Decentraland</p>

<p>in order to deploy to a Decentraland World.</p>

<p>Decentraland is made up of</p>

<em>parcels</em>

<p>of LAND, each 16 meters by 16 meters. A</p>

<em>scene</em>

<p>is an experience that is built on one or several parcels.</p>

<p>This document gives an overview on the different ways to obtain permissions.

See</p>

<p>for instructions on how to publish once you’ve obtained these.</p>

<h2>LAND permission options</h2>

<p>In order to publish to LAND in Genesis City, you can do the following:</p>

<strong>Rent LAND</strong>

<li>: Purchase the right to deploy and keep your content on certain parcels for a fixed period of time. See</li>

<li>.</li>

<strong>Buy land</strong>

<li>: Buy land parcels, and publish your content for as long as you wish. See</li>

<li>.</li>

<strong>Get permissions from an owner</strong>

<li>: Several land owners and districts manage large extensions of land and are willing to freely host content from others if it fits their theme and the kind of environment they want to create. Connect with them in the</li>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: You can also deploy scenes to a test server where players are not around. The same permissions per parcel apply when deploying to the test server, see</blockquote>

<blockquote>for more details.</blockquote>

<h2>Worlds</h2>

<p>You can also deploy a stand-alone scene as a Decentraland World. Worlds exist outside the grid of Genesis Plaza, and can be accessed by NAME. See</p>

<h2>Get DAO funding</h2>

<p>If you have a great idea and the means to achieve it, but need financing, you can request for a grant in the DAO. If the proposal convinces enough people from the community to vote on it, you can get a sum of money to achieve your vision, including funds for buying or renting LAND.</p>

<p>See</p>

<p>.</p>

<h2>How land permissions work</h2>

<p>LAND tokens can manage permissions that allow the following different kinds of roles to deploy to a particular parcel or estate.</p>

<strong>LAND owner</strong>

<li>: The person that owns the token in their Ethereum wallet. This user can always deploy, assign other roles, or transfer the token (unless the land is currently rented by someone else).</li>

<strong>LAND operator</strong>

<li>: The operator is only able to deploy, as long as they hold this role. The operator’s address is referenced by the token, without needing to own anything. The owner can assign and revoke operator permissions to any number of addresses. See</li>

<li>.</li>

<p>When renting a land, the tennant who pays for the rent gets to chose a single address that will hold a</p>

<strong>LAND Operator</strong>

<p>role for the duration of the rent (this can be their own address, or someone else’s). While the rent is active, none of the original holders of roles can interfere with the content on that LAND or transfer the token.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/preview-scene/#debug-a-scene

<title>Preview your scene | Decentraland Documentation</title>

<strong>Preview your scene</strong>

<h1>Preview your scene</h1>

<p>Once you have</p>

<p>or downloaded a</p>

<p>you can preview it locally.</p>

<h2>Using the editor</h2>

<p>To run a scene preview using the Decentraland Editor:</p>

<p>Make sure you’ve</p>

<p>.</p>

<p>Open your scene’s folder using Visual Studio Code.</p>

<p>Note: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<strong>Run Scene</strong>

<p>button.</p>

<p>This opens a new tab in Visual Studio Code, running the Decentraland scene, just like in a web browser tab.</p>

<p>Optionally click</p>

<strong>Open in browser</strong>

<p>, over the top margin of the tab to run the preview in a web browser window.</p>

<h2>Using the CLI</h2>

<h3>Before you begin</h3>

<p>Please make sure you first install the CLI tools by running the following command:</p>

<p>See the</p>

<p>for more details instructions.</p>

<h3>Preview a scene</h3>

<p>To preview a scene run the following command on the scene’s main folder:</p>

<p>Any dependencies that are missing are installed and then the CLI opens the scene in a new browser tab automatically. It creates a local web server in your system and points the web browser tab to this local address.</p>

<p>Every time you make changes to the scene, the preview reloads and updates automatically, so there’s no need to run the command again.</p>

<strong>📔 Note</strong>

<blockquote>: Some scenes depend on an external server to store a shared state for all players in the scene. When previewing one of these scenes, you’ll likely have to also run the server locally on another port. Check the scene’s readme for instructions on how to launch the server as well as the scene.</blockquote>

<h3>Parameters of the preview command</h3>

<p>You can add the following flags to the</p>

<code>dcl start</code>

<p>command to change its behavior:</p>

<code>--port</code>

<li>to assign a specific port to run the scene. Otherwise it will use whatever port is available.</li>

<code>--no-debug</code>

<li>Disable the debug panel, that shows scene and performance stats</li>

<code>--no-browser</code>

<li>to prevent the preview from opening a new browser tab.</li>

<code>--w</code>

<li>or</li>

<code>--no-watch</code>

<li>to not open watch for filesystem changes and avoid hot-reload</li>

<code>--c</code>

<li>or</li>

<code>--ci</code>

<li>To run the parcel previewer on a remote unix server</li>

<code>--web3</code>

<li>Connects preview to browser wallet to use the associated avatar and account</li>

<code>--skip-version-checks</code>

<li>Avoids checking if the scene’s ECS library version matches your CLI version, and launches the preview anyway.</li>

<code>--desktop-client</code>

<li>Runs the preview in the Decentraland Desktop client</li>

<strong>📔 Note</strong>

<blockquote>: To preview old scenes that were built for older versions of the SDK, you must set the corresponding version of</blockquote>

<code>decentraland-ecs</code>

<blockquote>in your project’s</blockquote>

<code>package.json</code>

<blockquote>file.</blockquote>

<h2>Upload a scene to decentraland</h2>

<p>Once you’re happy with your scene, you can upload it and publish it to Decentraland, see</p>

<p>) for instructions on how to do that.</p>

<p>You can also upload a preview to a free 3rd party server,</p>

<p>.</p>

<h2>Preview scene size</h2>

<p>The scene size shown in the preview is based on the scene’s configuration. By default, the scene occupies a single parcel (16 x 16 meters).</p>

<p>If you’re building a scene to be uploaded to several adjacent parcels, you can edit the</p>

<em>scene.json</em>

<p>file to reflect this, listing multiple parcels in the “parcels” field. Placing any entities outside the bounds of the listed parcels will display them in red.</p>

<p>You can also change the coordinates by running the</p>

<code>dcl coords</code>

<p>command from the command line, this is especially useful on large scenes with many parcels. See</p>

<p>for more details.</p>

<strong>💡 Tip</strong>

<blockquote>: While running the preview, the parcel coordinates don’t need to match those that your scene will really use, as long as they’re adjacent and are arranged into the same shape. You will have to replace these with the actual coordinates later when you</blockquote>

<blockquote>.</blockquote>

<h2>Run preview in Desktop</h2>

<p>To run a preview scene in the Desktop native client, instead of in the web browser:</p>

<p>Make sure you have downloaded and installed the</p>

<p>or</p>

<p>desktop client.</p>

<p>Run the preview with:</p>

<code>dcl start --desktop-client</code>

<p>Copy the URL provided by the console output under</p>

<strong>Desktop Client</strong>

<p>and paste in your browser.</p>

<p>Note: The Browser might ask you for permission to open an external executable: Decentraland. Select</p>

<strong>Open</strong>

<p>.</p>

<p>You’ll see the following screen. Check that the URL is correct, then click</p>

<strong>Continue</strong>

<p>to launch the preview.</p>

<p>If you need to manually add anything to the URL, to change the default way the scene runs, tick the box</p>

<strong>Add custom URL parameters</strong>

<p>and write those in the dialog below.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/remote-scene-considerations/#use-an-authoritative-server

<title>About multiplayer scenes | Decentraland Documentation</title>

<strong>About multiplayer scenes</strong>

<h1>About multiplayer scenes</h1>

<p>Decentraland runs scenes locally in a player’s browser. By default, players are able to see each other and interact directly, but each one interacts with the environment independently. Changes in the environment aren’t shared between players by default. You need to implement this manually.</p>

<p>Allowing all players to see a scene as having the same content in the same state is extremely important to for players to interact in more meaningful ways. Without this, if a player opens a door and walks into a house, other players will see that door as still closed, and the first player will appear to walk directly through the closed door to other players.</p>

<p>There are two ways to keep the scene state that all players see in sync:</p>

<li>Use the default messaging transport between players to update changes</li>

<li>Use an authoritative server to keep track of the scene’s state</li>

<p>The first of these options is the easiest to implement. The downside is that you rely more on player’s connection speeds. Also, if there are incentives to exploit (eg: there are prizes for players with highest scores in a game, or there are in-game transactions) it’s always recommendable to use an authoritative server, as this allows you to have more control and exposes less vulnerabilities.</p>

<h2>Default messaging</h2>

<h3>Initiate a message bus</h3>

<p>Create a message bus object to handle the methods that are needed to send and receive messages between players.</p>

<h3>Send messages</h3>

<p>Use the</p>

<code>.emit</code>

<p>command of the message bus to send a message to all other players in the scene.</p>

<p>Each message can contain a payload as a second argument. The payload is of type</p>

<code>Object</code>

<p>, and can contain any relevant data you wish to send.</p>

<strong>💡 Tip</strong>

<blockquote>: If you need a single message to include data from more than one variable, create a custom type to hold all this data in a single object.</blockquote>

<h3>Receive messages</h3>

<p>To handle messages from all other players in that scene, use</p>

<code>.on</code>

<p>. When using this function, you provide a message string and define a function to execute. For each time that a message with a matching string arrives, the given function is executed once.</p>

<strong>📔 Note</strong>

<blockquote>: Messages that are sent by a player are also picked up by that same player. The</blockquote>

<code>.on</code>

<blockquote>method can’t distinguish between a message that was emitted by that same player from a message emitted from other players.</blockquote>

<h3>Full example</h3>

<p>This example uses a message bus to send a new message every time the main cube is clicked, generating a new cube in a random position. The message includes the position of the new cube, so that all players see these new cubes in the same positions.</p>

<h4>More examples</h4>

<p>Find some more examples in the</p>

<h3>Test a multiplayer scene locally</h3>

<p>If you launch a scene preview and open it in two (or more) different browser windows, each open window will be interpreted as a separate player, and a mock communications server will keep these players in sync.</p>

<p>Interact with the scene on one window, then switch to the other to see that the effects of that interaction are also visible there.</p>

<strong>📔 Note</strong>

<blockquote>: Open separate browser</blockquote>

<em>windows</em>

<blockquote>. If you open separate</blockquote>

<em>tabs</em>

<blockquote>in the same window, the interaction won’t work properly, as only one tab will be treated as active by the browser at a time.</blockquote>

<h2>Use an authoritative server</h2>

<p>An authoritative server may have different levels of involvement with the scene:</p>

<li>API + DB: This is useful for scenes where changes don’t happen constantly and where it’s acceptable to have minor delays in syncing. When a player changes something, it sends an HTTP request to a REST API that stores the new scene state in a data base. Changes remained stored for any new player that visits the scene at a later date. The main limitation is that new changes from other players aren’t notified to players who are already there, messages can’t be pushed from the server to players. Players must regularly send requests the server to get the latest state.</li>

<strong>💡 Tip</strong>

<blockquote>: It’s also possible to opt for a hybrid approach where changes are notified between players via Messagebus messages, but the final state is also stored via an API for future visitors.</blockquote>

<li>Websockets: This alternative is more robust, as it establishes a two-way communications channel between player and server. Updates can be sent from the server, you could even have game logic run on or validated on the server. This enables real time interaction and makes more fast paced games possible. It’s also more secure, as each message between player and server is part of a session that is opened, no need to validate each message.</li>

<h3>Example scenes with authoritative server</h3>

<h3>Preview scenes with authoritative servers</h3>

<p>To preview a scene that uses an authoritative server, you must run both the scene and the server it relies on. The server can be run locally in the same machine as the preview, as an easier way to test it.</p>

<p>To start the server, go to the</p>

<code>/server</code>

<p>folder and run</p>

<code>npm start</code>

<p>.</p>

<p>Once the server is running, either remotely or locally, you can run the scene preview as you normally do for local scenes.</p>

<p>Once the scene preview is running, you can open multiple browser tabs pointing at the same local address. Each tab will instantiate a separate player in the same scene, these players will share the same scene state as the scene changes.</p>

<p>See</p>

<p>for more details.</p>

<h4>Separate realms</h4>

<p>Players in decentraland exist in many separate</p>

<em>realms</em>

<p>. Players in different realms cant see each other, interact or chat with each other, even if they’re standing on the same parcels. Dividing players like this allows Decentraland to handle an unlimited amount of players without running into any limitations. It also pairs players that are in close regions, to ensure that ping times between players that interact are acceptable.</p>

<p>If your scene sends data to a 3rd party server to sync changes between players in real time, then it’s important that changes are only synced between players that are on the same realm. You should handle all changes that belong to one realm as separate from those on a different realm. Otherwise, players will see things change in a spooky way, without anyone making the change.</p>

<p>See how to obtain the realm for each player in</p>

<h3>Multiplayer persistance</h3>

<p>Unlike local scenes that are newly mounted each time a player walks into them, scenes that use authoritative servers have a life span that extends well beyond when the player enters and leaves the scene.</p>

<p>You must therefore design the experience taking into account that player won’t always find the scene in the same initial state.

Any changes made to the scene will linger on for other players to find, you must make sure that these don’t interfere with future player’s experiences in an undesired way.</p>

<h4>Reset the state</h4>

<p>When loading the scene, make sure its built based on the shared information stored in the server, and not in a default state.</p>

<p>In some cases, it makes sense to include some kind of reset button in the scene. Pressing the reset button would reset the scene gracefully.</p>

<p>Sometimes, this just implies setting the variables in the scene state back to default values. But resetting the scene might also involve unsubscribing listeners and stopping loops in the server side. If empty loops remain each time the scene is reset, these would keep piling up and will have an ill effect on the scene’s performance.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/remote-scene-considerations/#use-an-authoritative-server

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/

<title>Player data | Decentraland Documentation</title>

<strong>Player data</strong>

<h1>Player data</h1>

<h2>Track player position and rotation</h2>

<p>The</p>

<code>Camera</code>

<p>object exposes information about the player’s point of view in your scene.</p>

<code>Camera.instance.position</code>

<li>returns a 3D vector with the coordinates of the avatar’s center, relative to the scene. When the player is on the ground, the height of this point is approximately</li>

<em>1.177</em>

<li>m. In 3rd person camera mode, this value refers also to the avatar’s center, not to the position of the 3rd person camera.</li>

<code>Camera.instance.feetPosition</code>

<li>returns a 3D vector with the coordinates of the player’s feet relative to the scene. When the player is at ground level, the height is nearly 0.155.</li>

<code>Camera.instance.worldPosition</code>

<li>returns a 3D vector with the coordinates of the player’s center, relative to the whole of Genesis City. For example, if the scene is in coordinates</li>

<em>100,-100</em>

<li>, and the player is standing on the bottom-left corner of that scene, the player’s world position will be about</li>

<em>1600, 1.177, -1600</em>

<code>Camera.instance.rotation</code>

<li>returns a quaternion with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<code>Camera.instance.rotation.eulerAngles</code>

<li>returns a Vector3 with the player’s rotation. In 3rd person camera mode, this refers to the 3rd person camera angle, not the direction faced by the avatar.</li>

<p>The example above logs the player’s position and rotation.</p>

<p>The example above uses the player’s rotation to set that of a cube in the scene.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>Camera.instance</code>

<blockquote>data is updated at a throttled rate of 10 times per second. Due to this, positions & rotations may lag slightly in relation to the scene that runs at 30 FPS under ideal conditions.</blockquote>

<h2>Get player data</h2>

<p>The following data can be fetched from a player:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The player’s user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.</li>

<code>publicKey</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player’s Ethereum wallet. If the player logs in as a guest, with no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>hasConnectedWeb3</code>

<li>:</li>

<em>(boolean)</em>

<li>Indicates if the player has a public key.</li>

<em>True</em>

<li>if the player has one.</li>

<code>avatar</code>

<li>: A nested object with data about the player’s appearance.</li>

<code>version</code>

<li>:</li>

<em>(number)</em>

<li>A version number that increases by one every time the player changes any of their settings. Use this if you encounter conflicting data, to know what version is more recent.</li>

<strong>📔 Note</strong>

<blockquote>: For any Ethereum transactions with the player, always use the</blockquote>

<code>publicKey</code>

<blockquote>field, instead of the</blockquote>

<code>userId</code>

<blockquote>, to avoid dealing with non-existing wallets.</blockquote>

<p>The</p>

<code>avatar</code>

<p>object has the following nested information:</p>

<code>wearables</code>

<p>:</p>

<code>WearableId[]</code>

<p>An array of identifiers for each of the wearables that the player is currently wearing. For example</p>

<code>urn:decentraland:off-chain:base-avatars:green_hoodie</code>

<p>. All wearables have a similar identifier, even if they’re NFTs.</p>

<code>bodyShape</code>

<p>: An identifier for the avatar’s general body shape. Either</p>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<p>for female or</p>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<p>for male.</p>

<code>skinColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s skin color.</p>

<code>hairColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s hair color.</p>

<code>eyeColor</code>

<p>:</p>

<em>ColorString</em>

<p>A hex value for the player’s eye color.</p>

<code>snapshots</code>

<p>: A nested object with base64 representations of .jpg images of the player in various resolutions.</p>

<code>face256</code>

<li>:</li>

<em>string</em>

<li>The player’s face as a 256x256 pixel image.</li>

<code>body</code>

<li>:</li>

<em>string</em>

<li>The full resolution image of the player standing straight, with 512x1024 pixels.</li>

<strong>❗Warning</strong>

<blockquote>The snapshots of the avatar will be deprecated in the future and will no longer be returned as part of an avatar’s data. The recommended approach is to use</blockquote>

<code>AvatarTexture</code>

<blockquote>instead, see</blockquote>

<blockquote>).</blockquote>

<h4>Data from current player</h4>

<p>To obtain information from the current player that’s running the scene, use</p>

<code>getUserData()</code>

<p>.</p>

<p>The example below imports the</p>

<code>Identity</code>

<p>library and runs</p>

<code>getUserData()</code>

<p>.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getUserData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h4>Data from nearby players</h4>

<p>You can obtain data from other players that are nearby, by calling</p>

<code>getPlayerData()</code>

<p>, passing the id of a Decentraland account.</p>

<p>The function returns the entire set of data described above, including address, name, wearables, snapshots, etc.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getPlayerData()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getPlayerData()</code>

<p>can only fetch data from players who are currently nearby. They don’t have to be necessarily standing in the same scene, but in visual range, that’s because this information is being fetched from the local engine that’s rendering these avatars. To try this out in preview, open a second tab and log in with a different account.</p>

<strong>📔 Note</strong>

<blockquote>: User IDs must always be lowercase. If copying a wallet address, make sure all the characters are set to lowercase.</blockquote>

<p>To know what players are being rendered in the surroundings, use</p>

<code>getConnectedPlayers()</code>

<p>. This function returns an array with the ids of all the players that are currently being rendered, which are all eligible to call with</p>

<code>getPlayerData()</code>

<p>. You can pair this with listening for new players connecting and disconnecting by using</p>

<code>onPlayerConnectedObservable</code>

<p>and</p>

<code>onPlayerDisconnectedObservable</code>

<p>.</p>

<p>As an alternative, you can use</p>

<code>getPlayersInScene()</code>

<p>to only fetch the players that are standing within the scene boundaries and also being rendered. You can pair this with listening to new players entering and leaving the scene by using</p>

<code>onEnterSceneObservable</code>

<p>and</p>

<code>onLeaveSceneObservable</code>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more about</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>in</blockquote>

<blockquote>and about about</blockquote>

<code>onEnterSceneObservable</code>

<blockquote>and</blockquote>

<code>onLeaveSceneObservable</code>

<blockquote>in</blockquote>

<blockquote>.</blockquote>

<p>Listen for events when players connect and disconnect

As more players connect and disconnect, you can pic</p>

<h4>Data from any player</h4>

<p>To obtain information from any player, make a</p>

<p>to the content servers. This returns the same information as the</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>functions, detailed at the start of the section.</p>

<p>This information is exposed in the following URL, appending the player’s user id to the url parameter.</p>

<code>https://peer.decentraland.org/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<p>Unlike</p>

<code>getPlayerData()</code>

<p>, this option is not limited to just the players who are currently being rendered in the surroundings. With this approach you can fetch data from any player that has logged onto the servers in the past.</p>

<p>If you know which server the player you want to query is connected to, you can get more up-to-date data by sending your requests to that specific server. For example, if the player changes clothes, this information will be available instantly in the player’s server, but will likely take a couple of minutes to propagate to the</p>

<code>peer.decentraland.org</code>

<p>server.</p>

<code>https://<player server>/lambdas/profile/<player user id></code>

<strong>💡 Tip</strong>

<blockquote>: You can obtain the current player’s server by doing</blockquote>

<code>getCurrentRealm().domain</code>

<blockquote>.</blockquote>

<p>This example combines</p>

<code>getUserData()</code>

<p>and</p>

<code>getCurrentRealm()</code>

<p>to obtain the player’s data directly from the server that the player is on:</p>

<h2>Get player’s public Ethereum key</h2>

<p>As an alternative to</p>

<code>getUserData()</code>

<p>, you can obtain a player’s public Ethereum key by using</p>

<code>getUserPublicKey()</code>

<p>. You can then use this information to send payments to the player, or as a way to recognize players.</p>

<p>The example below imports the</p>

<code>Identity</code>

<p>library and runs</p>

<code>getUserPublicKey()</code>

<p>to get the public key of the player’s Ethereum account and log it to console. The player must be logged into their Metamask account on their browser for this to work.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getUserPublicKey()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<h2>Get Decentraland Time</h2>

<p>Decentraland follows a day/night cycle that takes 2 hours to be completed, so there are 12 full cycles every day. Players can also change the settings to experience a specific fixed time of day, for example to always see Decentraland with a 10pm night sky. For this reason, Decentraland time may vary from one player to another.</p>

<p>Use</p>

<code>getDecentralandTime()</code>

<p>to fetch the time of day that the player is experiencing inside Decentraland.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>getDecentralandTime()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<code>getDecentralandTime()</code>

<p>returns an object with a</p>

<code>seconds</code>

<p>property. This property indicates how many seconds have passed (in Decentraland time) since the start of the day, assuming the full cycle lasts 24 hours. Divide the seconds value by 60 to obtain minutes, and by 60 again to obtain the hours since the start of the day. For example, if the</p>

<code>seconds</code>

<p>value is</p>

<em>36000</em>

<p>, it corresponds to</p>

<em>10 AM</em>

<p>.</p>

<p>In Decentraland time, the sun always rises at 6:15 and sets at 19:50.</p>

<p>You could use this information to change the scene accordingly, for example to play bird sounds when there’s daylight and crickets when it’s dark, or to turn the emissive materials on street lamps when it’s dark.</p>

<h2>Get player realm data</h2>

<p>Players in decentraland exist in several separate</p>

<em>realms</em>

<p>. Players in different realms can’t see each other, interact or chat with each other, even if they’re standing on the same parcels. Dividing players like this allows Decentraland to handle an unlimited amount of players without running into any limitations. It also pairs players who are in close regions, to ensure that ping times between players that interact are acceptable.</p>

<p>If your scene sends data to a</p>

<p>to sync changes between players in real time, then it’s often important that changes are only synced between players that are on the same realm. You should handle all changes that belong to one realm as separate from those on a different realm. Otherwise, players will see things change in a spooky way, without anyone making the change.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>getCurrentRealm()</code>

<blockquote>function is asynchronous. See</blockquote>

<blockquote>if you’re not familiar with those.</blockquote>

<p>Decentraland handles its communications between players (including player positions, chat, messageBus messages and smart item state changes) through a decentralized network of communication servers, each of these servers is called a</p>

<strong>Realm</strong>

<p>. Each one of these servers can support multiple separate</p>

<strong>rooms</strong>

<p>(also called</p>

<strong>islands</strong>

<p>), each grouping a different set of players that are near each other on the Decentraland map.</p>

<p>The</p>

<code>getCurrentRealm()</code>

<p>function returns the following information:</p>

<code>displayName</code>

<li>:</li>

<em>(string)</em>

<li>The full address of the realm, composed of the server + the room</li>

<code>domain</code>

<li>:</li>

<em>(string)</em>

<li>The URL of the server the player is connected to</li>

<code>serverName</code>

<li>:</li>

<em>(string)</em>

<li>The name of the server the player is connected to</li>

<code>room</code>

<li>:</li>

<em>(string)</em>

<li>The name of the room the player is connected to, in some versions of comms, this is a 1-to-1 map to the island name</li>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>layer</code>

<blockquote>property is deprecated, and should be avoided.</blockquote>

<p>As players move through the map, they may switch rooms to be grouped with those players who are now closest to them. Rooms also shift their borders dynamically to fit a manageable group of people, so even if a player stands still, as players enter and leave the world, the player could find themselves on another room. Players in a same</p>

<code>room</code>

<p>are communicated, and will share messages across the MessageBus even if they;re too far to see each other. Players in a same server but in different rooms are not currently communicating, but they might get communicated as they move around the map and change rooms.</p>

<p>See</p>

<p>for how to detect changes regarding the player’s realm or island.</p>

<strong>📔 Note</strong>

<blockquote>: When the scene first loads, there might not yet be a room assigned for the player. The explorer will eventually assign a room to the player, but this can sometimes occur a couple of seconds after the scene is loaded.</blockquote>

<h2>Get player platform</h2>

<p>Players can access Decentraland via various platforms, currently via the browser or via the native desktop app.</p>

<p>Use</p>

<code>getPlatform()</code>

<p>to know what platform the current player is running Decentraland on.</p>

<p>Players using the desktop app are likely to have a much smoother experience than those on the browser, since the browser imposes performance limitations on how much of the machine’s processing power the browser tab can use. You could use this information to render higher quality materials or other performance-heavy improvements only for players on desktop, as they are less likely to suffer bad frame rate from the extra content.</p>

<h2>Get Portable Experiences</h2>

<p>Portable experiences are essentially scenes that are not constrained to parcels of land. Players can carry these with them anywhere they go in Decentraland, adding a new layer of content over the world. Smart Wearables are examples of portable experiences. You may want to know if a player is wearing one of these, since a smart wearable may enable players to have abilities that could be considered cheating in a competitive game. For example, in a platform game, a player that wears a jetpack has a very unfair advantage over others.</p>

<p>As a scene creator, you may want to limit what players wearing portable experiences can do in your scene. Use</p>

<code>getPortableExperiencesLoaded()</code>

<p>to check if the player has any portable experiences currently activated.</p>

<code>getPortableExperiencesLoaded()</code>

<p>returns an array of objects, each of these objects includes an</p>

<code>id</code>

<p>attribute. In the case of wearables, the id is the wearable’s URN.</p>

<h2>Get detailed info about a player’s wearables</h2>

<p>The</p>

<code>getUserData()</code>

<p>and</p>

<code>getPlayerData()</code>

<p>return only a list of wearable ids, without information about each wearable. If instead of individual wearables you want to check for any wearable of a specific category (eg: hats), or any wearable of a specific rarity (eg: Mythic), then you’ll need to fetch more detailed information about the player’s wearables.</p>

<p>Make a</p>

<p>to the following URL, to obtain a full updated list of all wearables that are currently usable, with details about each.</p>

<code>${playerRealm.domain}/lambdas/collections/wearables-by-owner/${userData.userId}?includeDefinitions</code>

<strong>📔 Note</strong>

<blockquote>: To construct this URL, you must obtain the realm (likely with with</blockquote>

<code>getCurrentRealm()</code>

<blockquote>) and the player’s id (likely with</blockquote>

<code>getUserData()</code>

<blockquote>)</blockquote>

<p>This feature could be used together with fetching info about the player, to for example only allow players to enter a place if they are wearing any wearable from the halloween collection, or any wearable that is of</p>

<em>legendary</em>

<p>rarity.</p>

<strong>💡 Tip</strong>

<blockquote>: Try the URL out in a browser to see how the response is structured.</blockquote>

<h2>Check the player’s camera mode</h2>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>Camera.instance.cameraMode</code>

<blockquote>is currently deprecated and is not always reliable. The recommended approach is to track camera change events with</blockquote>

<code>onCameraModeChangedObservable</code>

<blockquote>. This event is fired once when the scene first obtains information about the player’s current camera mode, and then any time the player changes camera mode while in or around your scene. See</blockquote>

<blockquote>.</blockquote>

<p>Players can either be using a 1st or 3rd person camera when exploring Decentraland. Check which of these the player is using by checking the value</p>

<code>Camera.instance.cameraMode</code>

<p>.</p>

<p>The value of this property can either be</p>

<code>CameraMode.FirstPerson</code>

<p>or</p>

<code>CameraMode.ThirdPerson</code>

<p>.</p>

<p>The</p>

<code>Camera.instance.cameraMode</code>

<p>property is read-only, you can’t force the player to change camera mode.</p>

<strong>💡 Tip</strong>

<blockquote>: To encourage players to use a particular camera mode in your scene, display a UI message advising them to switch modes whenever they use the wrong one.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when in 3rd person.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/#player-enters-or-leaves-scene

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>When the player changes the camera mode between 1st and 3rd person in or near your scene, this creates an event you can listen to.</p>

<p>The values of the returned property can be:</p>

<code>CameraMode.FirstPerson</code>

<code>CameraMode.ThirdPerson</code>

<p>This event is fired once when the scene first obtains information about the player’s current camera mode, and then any time the player changes camera mode while in or around your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: To encourage players to use a particular camera mode in your scene, display a UI message advising them to switch modes whenever they use the wrong one.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<p>Note: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</p>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<p>Note: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</p>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<p>Tip: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</p>

<p>.</p>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player goes idle</h2>

<p>Whenever the player is inactive for a full minute, without interacting with any input being picked up by the Decentraland explorer, we can consider the player to be idle. Whenever this happens, it creates an event that you can listen to.</p>

<p>The</p>

<code>isIdle</code>

<p>property is a boolean value that is</p>

<em>true</em>

<p>when the player enters the idle mode and</p>

<em>false</em>

<p>when the player leaves the idle mode.</p>

<p>This event is especially useful for multiplayer scenes, when you might want to disconnect from the server players who are likely away from the machine or left Decentraland in a tab in the background.</p>

<strong>📔 Note</strong>

<blockquote>: The idle state is inferred based on the player not using the keyboard or mouse for a full minute. This can of course produce false positives, for example a player might be watching other players interact or watching a video stream, standing still but fully engaged. Be mindful of these corner cases and what the experience is like for a player who stands still for a while.</blockquote>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<strong>💡 Tip</strong>

<blockquote>: When this event is triggered, you can then use the</blockquote>

<blockquote>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</blockquote>

<code>getUserData()</code>

<blockquote>to ensure that the version this function returns is up to date.</blockquote>

<p>When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<h2>Video playing</h2>

<p>When a</p>

<code>VideoTexture</code>

<p>changes its playing status, the</p>

<code>onVideoEvent</code>

<p>observable receives an event.</p>

<p>The input of a video event contains the following properties:</p>

<code>videoClipId</code>

<p>(</p>

<em>string</em>

<p>): The ID for the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>componentId</code>

<p>(</p>

<em>string</em>

<p>): The ID of the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>currentOffset</code>

<p>(</p>

<em>number</em>

<p>): The current value of the</p>

<code>seek</code>

<p>property on the video. This value shows seconds after the video’s original beginning.</p>

<em>-1</em>

<p>by default.</p>

<code>totalVideoLength</code>

<p>(</p>

<em>number</em>

<p>): The length in seconds of the entire video.</p>

<em>-1</em>

<p>if length is unknown.</p>

<code>videoStatus</code>

<p>: The value for the new video status of the</p>

<code>VideoTexture</code>

<p>, expressed as a value from the</p>

<code>VideoStatus</code>

<p>enum. This enum can hold the following possible values:</p>

<code>VideoStatus.NONE</code>

<p>= 0,</p>

<code>VideoStatus.ERROR</code>

<p>= 1,</p>

<code>VideoStatus.LOADING</code>

<p>= 2,</p>

<code>VideoStatus.READY</code>

<p>= 3,</p>

<code>VideoStatus.PLAYING</code>

<p>= 4,</p>

<code>VideoStatus.BUFFERING</code>

<p>= 5</p>

<p>Learn more about playing videos in Decentraland in</p>

<p>.</p>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on a</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/#player-enters-or-leaves-scene

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/avatar-modifiers/

<title>Modifier areas | Decentraland Documentation</title>

<strong>Modifier areas</strong>

<h1>Modifier areas</h1>

<h2>Avatar Modifiers</h2>

<p>Avatars behave and look consistently throughout Decentraland as they walk across scenes. However, you can add an</p>

<code>AvatarModifierArea</code>

<p>to a region of your scene to affect how player avatars behave when they enter that area.</p>

<strong>❗Warning</strong>

<blockquote>Please limit the amount of</blockquote>

<code>AvatarModifierAreas</code>

<blockquote>you use in your scene to just a couple. If you use too many of them, it may have a significant impact on performance.</blockquote>

<h4>Placing Avatar Modifier Areas</h4>

<p>Add an entity with an</p>

<code>AvatarModifierArea</code>

<p>component and position this entity by using a</p>

<code>Transform</code>

<p>component.</p>

<p>When creating an</p>

<code>AvatarModifierArea</code>

<p>component, you must provide the following:</p>

<code>area</code>

<li>: Size and shape of the modifier area</li>

<code>modifiers</code>

<li>: An array listing the modifiers to implement in the area</li>

<p>The only currently supported shape for the area is</p>

<code>box</code>

<p>. Specify the scale of this box as a</p>

<code>Vector3</code>

<p>, for example</p>

<code>{ box: new Vector3(16, 4, 16) }</code>

<p>.</p>

<p>The supported modifiers are:</p>

<code>AvatarModifiers.HIDE_AVATARS</code>

<code>AvatarModifiers.DISABLE_PASSPORTS</code>

<p>All the effects of an</p>

<code>AvatarModifierArea</code>

<p>only take place within the region of their area. Players return to normal when they walk out of the area.</p>

<p>An</p>

<code>AvatarModifierArea</code>

<p>affects only players that are inside the area, entering the area doesn’t affect how other players that are outside the area are perceived.</p>

<p>The effects of an</p>

<code>AvatarModifierArea</code>

<p>are calculated locally for each player. You can have an</p>

<code>AvatarModifierArea</code>

<p>that is only present in the scene for some players and not for others. For example, if the area hides avatars, then the players that don’t have the area in their local version of the scene will see all avatars normally. Even those that experience themselves as hidden. Players that do have the area will experience themselves and all other avatars as affected by the area when they enter it.</p>

<strong>📔 Note</strong>

<blockquote>: Avatar modifier areas are affected by the</blockquote>

<em>position</em>

<blockquote>and</blockquote>

<em>rotation</em>

<blockquote>of the Transform component of their host entity, but they’re not affected by the</blockquote>

<em>scale</em>

<blockquote>.</blockquote>

<h4>Hide avatars</h4>

<p>When a player walks into an</p>

<code>AvatarModifierArea</code>

<p>that has the</p>

<code>HIDE_AVATARS</code>

<p>modifier, the player’s avatar stops being rendered. This applies both for the player in 3rd person view, and for when other players walk into the area.</p>

<p>This allows you to replace the default Decentraland avatar with any custom avatar you might want to show in your scene. Note that if you want to see other players with custom avatars, you should handle the syncing of player positions yourself.</p>

<h4>Disable Passport Popup</h4>

<p>When a player walks into an</p>

<code>AvatarModifierArea</code>

<p>that has the</p>

<code>DISABLE_PASSPORTS</code>

<p>modifier, clicking on them no longer opens up the passport UI that shows the player bio, inventory, etc.</p>

<p>This is especially useful in games where accidentally opening this UI could interrupt the flow of a game, for example in a multiplayer shooter game.</p>

<h2>Camera modifiers</h2>

<p>Players are normally free to switch between first and third person camera by pressing V on the keyboard. Use a</p>

<code>CameraModeArea</code>

<p>to force the camera mode to either 1st or 3rd person for all players that stand within a specific area in your scene.</p>

<p>If a player’s current camera mode doesn’t match that of the</p>

<code>CameraModeArea</code>

<p>, they will transition to that camera mode. A toast appears onscreen to clarify that this change is due to the scene. While inside, players can’t change their camera mode. When a player leaves the</p>

<code>CameraModeArea</code>

<p>, their camera mode is restored to what they had before entering.</p>

<p>Use</p>

<code>CameraModeArea</code>

<p>in regions where players would have a significantly better experience by using a specific camera mode. For example, first person is ideal if the player needs to click on small object, or third person may be useful for players to notice some entity that your scene has attached over their head. Don’t assume players know how to switch camera modes, many first-time players might not know they have the option, or not remember the key to do it.</p>

<strong>📔 Note</strong>

<p>: Camera modifier areas are affected by the</p>

<em>position</em>

<p>and</p>

<em>rotation</em>

<p>of the Transform component of their host entity, but they’re not affected by the</p>

<em>scale</em>

<p>.</p>

<p>If you overlap multiple camera modifier areas, the last one to be instanced by your scene’s code will take priority over the others.</p>

<p>When creating an</p>

<code>CameraModeArea</code>

<p>component, you must provide the following:</p>

<code>area</code>

<li>: Size and shape of the modifier area</li>

<code>cameraMode</code>

<li>: Which camera mode to force in this area, from the</li>

<code>CameraMode</code>

<li>enum.</li>

<p>The only currently supported shape for the area is</p>

<code>box</code>

<p>. Specify the scale of this box as a</p>

<code>Vector3</code>

<p>, for example</p>

<code>{ box: new Vector3(16, 4, 16) }</code>

<p>.</p>

<p>The supported camera modes are:</p>

<code>CameraMode.FirstPerson</code>

<code>CameraMode.ThirdPerson</code>

<h2>Exclude Avatars</h2>

<p>You can exclude a list of players from being affected by a modifier area by adding their player Ids to an array in the</p>

<code>excludeIds</code>

<p>property of the modifier area.</p>

<p>This example hides all avatars in an area, except those of players with specific IDs. You could use this for a live event, to only show the event hosts on the stage, and hide any other players that jump onto the stage.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure the player IDs are all written with lower-case letters. Use</blockquote>

<code>.toLowerCase()</code>

<blockquote>if necessary.</blockquote>

<p>Modifier areas run locally on each player’s instance, the list of excluded IDs can be different for each player. In the example below, each player excludes their own ID from a modifier that hides avatars, so that they each view their own avatar and no others.</p>

<strong>❗Warning</strong>

<p>If the list of excluded IDs is going to be periodically changed (for example based on players entering or leaving an area), make sure that the list is kept in order. Perform a</p>

<code>.sort()</code>

<p>on the array, so that the list remains in the same order each time it’s passed. In that way, only the changes to the list are be computed. This can otherwise have a significant impact on the scene’s performance.</p>

<h2>Debug modifier areas</h2>

<p>It can be tough to know exactly what parts of the scene your modifier areas cover based on the code. Visual feedback helps a lot to confirm that they’re well placed.</p>

<p>To verify the positions of a</p>

<code>AvatarModifierArea</code>

<p>or a</p>

<code>CameraModeArea</code>

<p>, give the entity holding it a</p>

<code>BoxShape</code>

<p>component, and set the scale to the same size as the</p>

<code>area</code>

<p>of the modifier area.</p>

<strong>📔 Note</strong>

<blockquote>: Modifier areas aren’t affected by the</blockquote>

<code>scale</code>

<blockquote>property of the transform, their size is based on their</blockquote>

<code>area</code>

<blockquote>property.</blockquote>

<p>To activate the effects of the modifier area, the player’s head or torso should enter the area. It won’t take effect if only the feet of the player are covered. Make sure the player can’t easily evade the area by jumping.</p>

<strong>📔 Note</strong>

<blockquote>: The full area should fit inside the limits of your scene.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/#player-enters-or-leaves-scene

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/remote-scene-considerations/

<title>About multiplayer scenes | Decentraland Documentation</title>

<strong>About multiplayer scenes</strong>

<h1>About multiplayer scenes</h1>

<p>Decentraland runs scenes locally in a player’s browser. By default, players are able to see each other and interact directly, but each one interacts with the environment independently. Changes in the environment aren’t shared between players by default. You need to implement this manually.</p>

<p>Allowing all players to see a scene as having the same content in the same state is extremely important to for players to interact in more meaningful ways. Without this, if a player opens a door and walks into a house, other players will see that door as still closed, and the first player will appear to walk directly through the closed door to other players.</p>

<p>There are two ways to keep the scene state that all players see in sync:</p>

<li>Use the default messaging transport between players to update changes</li>

<li>Use an authoritative server to keep track of the scene’s state</li>

<p>The first of these options is the easiest to implement. The downside is that you rely more on player’s connection speeds. Also, if there are incentives to exploit (eg: there are prizes for players with highest scores in a game, or there are in-game transactions) it’s always recommendable to use an authoritative server, as this allows you to have more control and exposes less vulnerabilities.</p>

<h2>Default messaging</h2>

<h3>Initiate a message bus</h3>

<p>Create a message bus object to handle the methods that are needed to send and receive messages between players.</p>

<h3>Send messages</h3>

<p>Use the</p>

<code>.emit</code>

<p>command of the message bus to send a message to all other players in the scene.</p>

<p>Each message can contain a payload as a second argument. The payload is of type</p>

<code>Object</code>

<p>, and can contain any relevant data you wish to send.</p>

<strong>💡 Tip</strong>

<blockquote>: If you need a single message to include data from more than one variable, create a custom type to hold all this data in a single object.</blockquote>

<h3>Receive messages</h3>

<p>To handle messages from all other players in that scene, use</p>

<code>.on</code>

<p>. When using this function, you provide a message string and define a function to execute. For each time that a message with a matching string arrives, the given function is executed once.</p>

<strong>📔 Note</strong>

<blockquote>: Messages that are sent by a player are also picked up by that same player. The</blockquote>

<code>.on</code>

<blockquote>method can’t distinguish between a message that was emitted by that same player from a message emitted from other players.</blockquote>

<h3>Full example</h3>

<p>This example uses a message bus to send a new message every time the main cube is clicked, generating a new cube in a random position. The message includes the position of the new cube, so that all players see these new cubes in the same positions.</p>

<h4>More examples</h4>

<p>Find some more examples in the</p>

<h3>Test a multiplayer scene locally</h3>

<p>If you launch a scene preview and open it in two (or more) different browser windows, each open window will be interpreted as a separate player, and a mock communications server will keep these players in sync.</p>

<p>Interact with the scene on one window, then switch to the other to see that the effects of that interaction are also visible there.</p>

<strong>📔 Note</strong>

<blockquote>: Open separate browser</blockquote>

<em>windows</em>

<blockquote>. If you open separate</blockquote>

<em>tabs</em>

<blockquote>in the same window, the interaction won’t work properly, as only one tab will be treated as active by the browser at a time.</blockquote>

<h2>Use an authoritative server</h2>

<p>An authoritative server may have different levels of involvement with the scene:</p>

<li>API + DB: This is useful for scenes where changes don’t happen constantly and where it’s acceptable to have minor delays in syncing. When a player changes something, it sends an HTTP request to a REST API that stores the new scene state in a data base. Changes remained stored for any new player that visits the scene at a later date. The main limitation is that new changes from other players aren’t notified to players who are already there, messages can’t be pushed from the server to players. Players must regularly send requests the server to get the latest state.</li>

<strong>💡 Tip</strong>

<blockquote>: It’s also possible to opt for a hybrid approach where changes are notified between players via Messagebus messages, but the final state is also stored via an API for future visitors.</blockquote>

<li>Websockets: This alternative is more robust, as it establishes a two-way communications channel between player and server. Updates can be sent from the server, you could even have game logic run on or validated on the server. This enables real time interaction and makes more fast paced games possible. It’s also more secure, as each message between player and server is part of a session that is opened, no need to validate each message.</li>

<h3>Example scenes with authoritative server</h3>

<h3>Preview scenes with authoritative servers</h3>

<p>To preview a scene that uses an authoritative server, you must run both the scene and the server it relies on. The server can be run locally in the same machine as the preview, as an easier way to test it.</p>

<p>To start the server, go to the</p>

<code>/server</code>

<p>folder and run</p>

<code>npm start</code>

<p>.</p>

<p>Once the server is running, either remotely or locally, you can run the scene preview as you normally do for local scenes.</p>

<p>Once the scene preview is running, you can open multiple browser tabs pointing at the same local address. Each tab will instantiate a separate player in the same scene, these players will share the same scene state as the scene changes.</p>

<p>See</p>

<p>for more details.</p>

<h4>Separate realms</h4>

<p>Players in decentraland exist in many separate</p>

<em>realms</em>

<p>. Players in different realms cant see each other, interact or chat with each other, even if they’re standing on the same parcels. Dividing players like this allows Decentraland to handle an unlimited amount of players without running into any limitations. It also pairs players that are in close regions, to ensure that ping times between players that interact are acceptable.</p>

<p>If your scene sends data to a 3rd party server to sync changes between players in real time, then it’s important that changes are only synced between players that are on the same realm. You should handle all changes that belong to one realm as separate from those on a different realm. Otherwise, players will see things change in a spooky way, without anyone making the change.</p>

<p>See how to obtain the realm for each player in</p>

<h3>Multiplayer persistance</h3>

<p>Unlike local scenes that are newly mounted each time a player walks into them, scenes that use authoritative servers have a life span that extends well beyond when the player enters and leaves the scene.</p>

<p>You must therefore design the experience taking into account that player won’t always find the scene in the same initial state.

Any changes made to the scene will linger on for other players to find, you must make sure that these don’t interfere with future player’s experiences in an undesired way.</p>

<h4>Reset the state</h4>

<p>When loading the scene, make sure its built based on the shared information stored in the server, and not in a default state.</p>

<p>In some cases, it makes sense to include some kind of reset button in the scene. Pressing the reset button would reset the scene gracefully.</p>

<p>Sometimes, this just implies setting the variables in the scene state back to default values. But resetting the scene might also involve unsubscribing listeners and stopping loops in the server side. If empty loops remain each time the scene is reset, these would keep piling up and will have an ill effect on the scene’s performance.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/network-connections/#call-a-rest-api

<title>Network connections | Decentraland Documentation</title>

<strong>Network connections</strong>

<h1>Network connections</h1>

<p>Your scene can leverage external services that expose APIs, you can use this to obtain updated price data, weather data or any other kind of information exposed by an API.</p>

<p>You can also set up your own external server to aid your scene and serve to synchronize data between your players. This can either be done with a server that exposes a REST API, or with a server that uses WebSockets.</p>

<h2>Call a REST API</h2>

<p>Your scene’s code can send calls to a REST API to fetch data.</p>

<p>Since the server might take time to send its response, you must execute this command as an</p>

<p>, using</p>

<code>executeTask()</code>

<p>.</p>

<p>The fetch command can also include a second optional argument that bundles headers, HTTP method and HTTP body into a single object.</p>

<strong>url</strong>

<li>: Address to send the request</li>

<strong>init</strong>

<li>: A</li>

<code>FlatFetchInit</code>

<li>object that may contain:</li>

<strong>method</strong>

<li>: HTTP method to use (GET, POST, DELETE, etc)</li>

<strong>body</strong>

<li>: Contents of the request body. It must be sent as a stringified JSON object.</li>

<strong>headers</strong>

<li>: Additional headers to include in the request. Headers related to the signature are added automatically.</li>

<strong>redirect</strong>

<li>: Redirect strategy (‘follow’ | ’error’ | ‘manual’)</li>

<strong>responseBodyType</strong>

<li>: Specify if the body of the response is ’text’ or ‘json’</li>

<strong>timeout</strong>

<li>: How long to wait for a response before the request fails. By default 30000 milliseconds (30 seconds).</li>

<p>The fetch command returns a</p>

<code>response</code>

<p>object with the following data:</p>

<code>headers</code>

<p>: A</p>

<code>ReadOnlyHeaders</code>

<p>object. Call the</p>

<code>get()</code>

<p>method to obtain a specific header, or the</p>

<code>has()</code>

<p>method to check if a header is present.</p>

<code>ok</code>

<p>: Boolean</p>

<code>redirected</code>

<p>: Boolean</p>

<code>status</code>

<p>: Status code number</p>

<code>statusText</code>

<p>: Text for the status code</p>

<code>type</code>

<p>: Will have one of the following values:</p>

<em>basic</em>

<p>,</p>

<em>cors</em>

<p>,</p>

<em>default</em>

<p>,</p>

<em>error</em>

<p>,</p>

<em>opaque</em>

<p>,</p>

<em>opaqueredirect</em>

<code>url</code>

<p>: URL that was sent</p>

<code>json()</code>

<p>: Obtain the body in JSON format.</p>

<code>text()</code>

<p>: Obtain the body as text.</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>json()</code>

<blockquote>and</blockquote>

<code>text()</code>

<blockquote>are mutually exclusive. If you obtain the body of the response in one of the two formats, you can no longer obtain the other from the</blockquote>

<code>response</code>

<blockquote>object.</blockquote>

<strong>📔 Note</strong>

<blockquote>: Each Decentraland scene is only permitted to perform one</blockquote>

<code>fetch</code>

<blockquote>command at a time. This has no effect on how the scene code must be structured, as requests are queued internally. If your scene requires sending multiple requests to different endpoints, keep in mind that each request is only sent when the previous one has been responded.</blockquote>

<h2>Signed requests</h2>

<p>You can employ an extra security measure to certify that a request is originating from a player session inside Decentraland. You can send your requests with an additional signature, that is signed using an ephemeral key that the Decentraland session generates for each player based on the player’s address. The server receiving the request can then verify that the signed message indeed matches an address that is currently active in-world.</p>

<p>These kinds of security measures are especially valuable when there may be an incentive for a player to abuse the system, to farm tokens or points in a game.</p>

<p>To send a signed request, all you need to do is use the</p>

<code>signedFetch()</code>

<p>function, in exactly the same way as you would use the</p>

<code>fetch()</code>

<p>function.</p>

<p>The request will include an additional series of headers, containing a signed message and a set of metadata to interpret that. The signed message consists of all the contents of the request encrypted using the player’s ephemeral key.</p>

<p>The</p>

<code>signedFetch()</code>

<p>differs from the</p>

<code>fetch()</code>

<p>function in that the response is a promise of a full http message, expressed as a</p>

<code>FlatFetchInit</code>

<p>object. This includes the properties</p>

<code>text</code>

<p>,</p>

<code>ok</code>

<p>,</p>

<code>status</code>

<p>,</p>

<code>headers</code>

<p>, among others. By default, the To access the</p>

<strong>body</strong>

<p>of the response, parse the</p>

<code>text</code>

<p>property of the response as in the example above. If the response body is in json format, you can specify that in the</p>

<code>responseBodyType</code>

<p>and then access that from the</p>

<code>json</code>

<p>property in the response.</p>

<h4>Validating a signed request</h4>

<p>To make make use of signed requests, the server receiving these should to validate that the signatures match the rest of the request, and that the timestamp that’s encoded within the signed message is current.</p>

<p>You can find a simple example of a server performing this task in the following example scene:</p>

<h2>Request timeout</h2>

<p>If an HTTP request takes too long to be responded, it fails so that other requests can be sent. For both</p>

<code>fetch()</code>

<p>and</p>

<code>signedFetch()</code>

<p>, the default timeout threshold is of 30 seconds, but you can assign a different value on each request by configuring the</p>

<code>timeout</code>

<p>property in any of the two functions. The value of</p>

<code>timeout</code>

<p>is expressed in milliseconds.</p>

<h2>Use WebSockets</h2>

<p>You can also send and obtain data from a WebSocket server, as long as this server uses a secured connection with</p>

<em>wss</em>

<p>.</p>

<p>The syntax to use WebSockets is no different from that implemented natively by JavaScript. See the documentation from</p>

<p>for details on how to catch and send messages over WebSockets.</p>

<strong>💡 Tip</strong>

<blockquote>: One library that simplifies the use of websocket connections and has been proven to work very well with Decentraland is</blockquote>

<blockquote>. It builds a layer of abstraction on top of the websocket connections that makes reacting to changes and storing a consistent game state remotely in the server super easy. You can see it in action in</blockquote>

<blockquote>. Several other websocket libraries aren’t compatible with the Decentraland SDK.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/#player-changes-realm-or-island

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>When the player changes the camera mode between 1st and 3rd person in or near your scene, this creates an event you can listen to.</p>

<p>The values of the returned property can be:</p>

<code>CameraMode.FirstPerson</code>

<code>CameraMode.ThirdPerson</code>

<p>This event is fired once when the scene first obtains information about the player’s current camera mode, and then any time the player changes camera mode while in or around your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: To encourage players to use a particular camera mode in your scene, display a UI message advising them to switch modes whenever they use the wrong one.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<p>Note: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</p>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<p>Note: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</p>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<p>Tip: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</p>

<p>.</p>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player goes idle</h2>

<p>Whenever the player is inactive for a full minute, without interacting with any input being picked up by the Decentraland explorer, we can consider the player to be idle. Whenever this happens, it creates an event that you can listen to.</p>

<p>The</p>

<code>isIdle</code>

<p>property is a boolean value that is</p>

<em>true</em>

<p>when the player enters the idle mode and</p>

<em>false</em>

<p>when the player leaves the idle mode.</p>

<p>This event is especially useful for multiplayer scenes, when you might want to disconnect from the server players who are likely away from the machine or left Decentraland in a tab in the background.</p>

<strong>📔 Note</strong>

<blockquote>: The idle state is inferred based on the player not using the keyboard or mouse for a full minute. This can of course produce false positives, for example a player might be watching other players interact or watching a video stream, standing still but fully engaged. Be mindful of these corner cases and what the experience is like for a player who stands still for a while.</blockquote>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<strong>💡 Tip</strong>

<blockquote>: When this event is triggered, you can then use the</blockquote>

<blockquote>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</blockquote>

<code>getUserData()</code>

<blockquote>to ensure that the version this function returns is up to date.</blockquote>

<p>When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<h2>Video playing</h2>

<p>When a</p>

<code>VideoTexture</code>

<p>changes its playing status, the</p>

<code>onVideoEvent</code>

<p>observable receives an event.</p>

<p>The input of a video event contains the following properties:</p>

<code>videoClipId</code>

<p>(</p>

<em>string</em>

<p>): The ID for the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>componentId</code>

<p>(</p>

<em>string</em>

<p>): The ID of the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>currentOffset</code>

<p>(</p>

<em>number</em>

<p>): The current value of the</p>

<code>seek</code>

<p>property on the video. This value shows seconds after the video’s original beginning.</p>

<em>-1</em>

<p>by default.</p>

<code>totalVideoLength</code>

<p>(</p>

<em>number</em>

<p>): The length in seconds of the entire video.</p>

<em>-1</em>

<p>if length is unknown.</p>

<code>videoStatus</code>

<p>: The value for the new video status of the</p>

<code>VideoTexture</code>

<p>, expressed as a value from the</p>

<code>VideoStatus</code>

<p>enum. This enum can hold the following possible values:</p>

<code>VideoStatus.NONE</code>

<p>= 0,</p>

<code>VideoStatus.ERROR</code>

<p>= 1,</p>

<code>VideoStatus.LOADING</code>

<p>= 2,</p>

<code>VideoStatus.READY</code>

<p>= 3,</p>

<code>VideoStatus.PLAYING</code>

<p>= 4,</p>

<code>VideoStatus.BUFFERING</code>

<p>= 5</p>

<p>Learn more about playing videos in Decentraland in</p>

<p>.</p>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on a</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/user-data/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/#player-changes-camera-mode

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>When the player changes the camera mode between 1st and 3rd person in or near your scene, this creates an event you can listen to.</p>

<p>The values of the returned property can be:</p>

<code>CameraMode.FirstPerson</code>

<code>CameraMode.ThirdPerson</code>

<p>This event is fired once when the scene first obtains information about the player’s current camera mode, and then any time the player changes camera mode while in or around your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: To encourage players to use a particular camera mode in your scene, display a UI message advising them to switch modes whenever they use the wrong one.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<p>Note: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</p>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<p>Note: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</p>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<p>Tip: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</p>

<p>.</p>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player goes idle</h2>

<p>Whenever the player is inactive for a full minute, without interacting with any input being picked up by the Decentraland explorer, we can consider the player to be idle. Whenever this happens, it creates an event that you can listen to.</p>

<p>The</p>

<code>isIdle</code>

<p>property is a boolean value that is</p>

<em>true</em>

<p>when the player enters the idle mode and</p>

<em>false</em>

<p>when the player leaves the idle mode.</p>

<p>This event is especially useful for multiplayer scenes, when you might want to disconnect from the server players who are likely away from the machine or left Decentraland in a tab in the background.</p>

<strong>📔 Note</strong>

<blockquote>: The idle state is inferred based on the player not using the keyboard or mouse for a full minute. This can of course produce false positives, for example a player might be watching other players interact or watching a video stream, standing still but fully engaged. Be mindful of these corner cases and what the experience is like for a player who stands still for a while.</blockquote>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<strong>💡 Tip</strong>

<blockquote>: When this event is triggered, you can then use the</blockquote>

<blockquote>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</blockquote>

<code>getUserData()</code>

<blockquote>to ensure that the version this function returns is up to date.</blockquote>

<p>When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<h2>Video playing</h2>

<p>When a</p>

<code>VideoTexture</code>

<p>changes its playing status, the</p>

<code>onVideoEvent</code>

<p>observable receives an event.</p>

<p>The input of a video event contains the following properties:</p>

<code>videoClipId</code>

<p>(</p>

<em>string</em>

<p>): The ID for the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>componentId</code>

<p>(</p>

<em>string</em>

<p>): The ID of the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>currentOffset</code>

<p>(</p>

<em>number</em>

<p>): The current value of the</p>

<code>seek</code>

<p>property on the video. This value shows seconds after the video’s original beginning.</p>

<em>-1</em>

<p>by default.</p>

<code>totalVideoLength</code>

<p>(</p>

<em>number</em>

<p>): The length in seconds of the entire video.</p>

<em>-1</em>

<p>if length is unknown.</p>

<code>videoStatus</code>

<p>: The value for the new video status of the</p>

<code>VideoTexture</code>

<p>, expressed as a value from the</p>

<code>VideoStatus</code>

<p>enum. This enum can hold the following possible values:</p>

<code>VideoStatus.NONE</code>

<p>= 0,</p>

<code>VideoStatus.ERROR</code>

<p>= 1,</p>

<code>VideoStatus.LOADING</code>

<p>= 2,</p>

<code>VideoStatus.READY</code>

<p>= 3,</p>

<code>VideoStatus.PLAYING</code>

<p>= 4,</p>

<code>VideoStatus.BUFFERING</code>

<p>= 5</p>

<p>Learn more about playing videos in Decentraland in</p>

<p>.</p>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on a</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/publishing/#to-publish-the-scene

<title>Publishing a scene | Decentraland Documentation</title>

<strong>Publishing a scene</strong>

<h1>Publishing a scene</h1>

<h2>Before you begin</h2>

<p>Make sure of the following:</p>

<p>Your scene complies with all of the</p>

<p>. Most of these are validated each time you run a preview of your scene.</p>

<p>You have a</p>

<p>account, or another wallet that’s accessible via Wallet Connect, and that your LAND parcels are owned by that account or have permissions.</p>

<p>You own or have permissions to the necessary amount of adjacent LAND parcels. Otherwise you can purchase LAND in the</p>

<p>.</p>

<p>You may also choose to publish your scene to a Decentraland</p>

<p>, in this case, you must own a NAME which you can mint on the</p>

<p>and your scene must comply with the World limits.</p>

<strong>📔 Note</strong>

<blockquote>: Multi-parcel scenes can only be deployed to adjacent parcels.</blockquote>

<h2>Check scene data</h2>

<p>When deploying, Decentraland uses information from</p>

<em>scene.json</em>

<p>to know where to deploy your scene to.</p>

<p>Open your scene’s</p>

<em>scene.json</em>

<p>file and complete the following data:</p>

<strong>title</strong>

<p>: The title is displayed on the UI under the mini-map, whenever players enter your scene. It also shows on the teleport popup.</p>

<strong>description</strong>

<p>: A description of what players will find in your scene. This is displayed on the teleport popup.</p>

<strong>navmapThumbnail</strong>

<p>: An image that represents your scene. This is displayed on the teleport popup. The image should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels.</p>

<strong>Parcels</strong>

<p>: The coordinates of the parcels that will be occupied by your scene</p>

<strong>Base</strong>

<p>: The coordinates of the parcel that will be considered the [0,0] coordinate of the scene. If your scene has multiple parcels, it should be the bottom-left (South-West) parcel.</p>

<strong>spawnPoints</strong>

<p>: A set of coordinates inside the scene (relative to the scene’s base parcel) where players spawn into. By default players spawn onto the</p>

<em>0,0,0</em>

<p>location of the scene (bottom-left corner). Use this to start out in a specific location, set a region to prevent players from overlapping with each other when they first appear.</p>

<strong>tags</strong>

<p>: A set of tags that describe your scene. These are used to help players and users explore Decentraland in a better way since they are able to find the content that they may be interested in.</p>

<p>.</p>

<strong>rating</strong>

<p>: This is used to classify the content of your scene based on its appropriateness for different age groups (</p>

<code>T</code>

<p>for Teens or</p>

<code>A</code>

<p>for Adults). It helps in filtering content for players.</p>

<strong>📔 Note</strong>

<blockquote>: See</blockquote>

<blockquote>for more details on how to set these parameters.</blockquote>

<h2>To publish the scene</h2>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you’ve</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Deployment to Worlds is not yet supported from the Editor.</blockquote>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Editor’s menu, by clicking the Decentraland logo on the tabs on the left. Then click</p>

<strong>Publish scene</strong>

<p>.</p>

<p>This opens a new tab in Visual Studio, showing what parcels you’re deploying to.</p>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<h3>Via the CLI</h3>

<p>Log into your Metamask account with the same public address associated with your parcels in Decentraland.</p>

<p>Run</p>

<code>dcl deploy</code>

<p>from the scene’s folder.</p>

<strong>💡 Tip</strong>

<blockquote>: If there are files in your project folder that you don’t want to deploy, list them in the</blockquote>

<em>.dclignore</em>

<blockquote>file before deploying.</blockquote>

<p>Optionally, you can also use the</p>

<code>--target-content</code>

<p>parameter with a World server URL in order to upload the scene to a World instead of to the Genesis City, for example</p>

<code>dcl deploy --target-content https://worlds-content-server.decentraland.org</code>

<p>.</p>

<p>A browser tab will open, showing what parcels you’re deploying to. Click</p>

<strong>Sign and Deploy</strong>

<p>.</p>

<p>Metamask opens, notifying you that your signature is requested. Click</p>

<strong>Sign</strong>

<p>to confirm this action.</p>

<strong>💡 Tip</strong>

<blockquote>: If you’re implementing a continuous integration flow, where changes to your scene are deployed automatically, then you can set the</blockquote>

<code>export DCL_PRIVATE_KEY</code>

<blockquote>environment variable to the private key of an account that has deploy permissions.</blockquote>

<strong>💡 Tip</strong>

<blockquote>:</blockquote>

<code>dcl deploy</code>

<blockquote>runs a</blockquote>

<code>dcl build</code>

<blockquote>, which checks the scene for type errors more strictly than running</blockquote>

<code>dcl start</code>

<blockquote>. If these errors can’t be avoided (eg: they happen in an external library) and they don’t impact the scene, you can use</blockquote>

<code>dcl deploy --skip-build</code>

<blockquote>to skip the</blockquote>

<code>dcl build</code>

<blockquote>step and deploy the scene as it is.</blockquote>

<h2>Publish from a hardware wallet</h2>

<p>Instead of storing your LAND tokens in a Metamask account, you may find it more secure to store them in a hardware wallet device, such as a</p>

<p>or a</p>

<p>, that’s physically plugged in to your computer.</p>

<p>If you’re using one of these devices, you can link the hardware wallet to Metamask to enable signing messages, while keeping the tokens more secure. See</p>

<p>for instructions to connect your account.</p>

<p>Once your hardware wallet can be used via Metamask, you can deploy following the same steps as if your tokens were on a Metamask account.</p>

<h2>Scene overwriting</h2>

<p>When a new scene is deployed, it overwrites older content that existed on the parcels it occupies.</p>

<p>If a scene that takes up multiple parcels is only partially overwritten by another, all of its parcels are either overwritten or erased.</p>

<p>Suppose you deployed your scene</p>

<em>A</em>

<p>over two parcels</p>

<em>[100, 100]</em>

<p>and</p>

<em>[100, 101]</em>

<p>. Then you sell parcel</p>

<em>[100, 101]</em>

<p>to a user who owns adjacent land and that deploys a large scene (</p>

<em>B</em>

<p>) to several parcels, including</p>

<em>[100, 101]</em>

<p>.</p>

<p>Your scene</p>

<em>A</em>

<p>can’t be partially rendered in just one parcel, so</p>

<em>[100, 100]</em>

<p>won’t display any content. You must build a new version of scene</p>

<em>A</em>

<p>that only takes up one parcel and deploy it to only parcel</p>

<em>[100, 100]</em>

<p>.</p>

<h2>What are the content servers</h2>

<p>The content servers are a network of community-owned servers with a filesystem that’s content-addressed, meaning that each file is identified by its contents, not by an arbitrary file name.</p>

<p>We use the content servers to host and distribute all scene content in a similar way to BitTorrent, keeping the Decentraland network distributed.</p>

<li>The content servers store and distribute all of the assets required to render your scenes.</li>

<li>The</li>

<code>dcl deploy</code>

<li>command links these assets to the LAND parcel specified in your</li>

<strong>scene.json</strong>

<li>file. Whenever you redeploy your scene, the CLI will update your LAND smart contract, if needed, to point to the most recent content available on the content servers.</li>

<p>The information on each copy of the server is verifiable, as each scene is signed by the LAND owner’s hash. This means that someone hosting a copy of the server won’t be able to tamper with the content to display something illegitimate. The community can also vote to approve or remove any of these servers using the DAO.</p>

<h2>The test server</h2>

<p>You can deploy content to the test catalyst server to run full tests with multiple users, the sourrounding scenes, and an environment that is identical to production. The test server is identical to all other catalyst servers, the difference is that the content that is deployed to this server isn’t propagated to the others. Content deployed to other servers on the other hand does get propagated to this server, so surrounding scenes should look as they will in production.</p>

<strong>📔 Note</strong>

<blockquote>: To deploy to parcels in the test server, you must have the same permissions required to deploy to those parcels in the main network.</blockquote>

<p>Players are never directed to this server, the only way to access it is to explicitly provide a URL parameter to connect to it.</p>

<p>If you’re working in a confidential project that you don’t want to unveil until launch, note that the test server is relatively hidden from players, but anyone explicitly using the test server’s URL could potentially run into it.</p>

<h3>Via the Decentraland Editor</h3>

<p>To deploy a scene to the test server:</p>

<p>Open VSCode in a Decentraland scene project.</p>

<p>Click on the Decentraland icon on the left sidebar.</p>

<p>Click on the three dot menu at the top right of the sidebar, next to the green reload arrow button, select</p>

<code>Publish scene to test server</code>

<p>Approve the transaction</p>

<li>If the LAND tokens you own or have permissions are linked to a wallet you can use via Wallet Connect, click</li>

<strong>Connect wallet</strong>

<li>, then scan the QR code with your mobile device and follow the steps on Wallet Connect.</li>

<li>If you need to use Metamask on the browser, click</li>

<strong>Open in Browser</strong>

<li>to open this same window on a browser tab. Then approve the transaction on the Metamask browser extension.</li>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<em>play.decentraland.org/?&CATALYST=peer-testing.decentraland.org</em>

<h3>Via the CLI</h3>

<p>To deploy to the test server, run:</p>

<code>dcl deploy --target peer-testing.decentraland.org</code>

<p>To enter the content server, add</p>

<code>&CATALYST=peer-testing.decentraland.org</code>

<p>to the Decentraland URL</p>

<h2>Verify deployment success</h2>

<p>Once you deployed your scene, these changes will take a few minutes to be propagated throughout the various content servers in the network. If you enter Decentraland right after deploying, you might still see the previous version of your content, depending of what realm you enter.</p>

<p>After you sign to authorize the deployment of your scene, the signing dapp will start displaying confirmations that the new version of your content has been propagated throughout all of the servers in the network,</p>

<p>You’ll see a list of each of the servers that make up Decentraland’s content network. For each server, it specifies the timestamp of the last uploaded change on that parcel. Each one of these servers refers to a different realm, you can reference how these server names map to realm names in the</p>

<p>.</p>

<p>You can also obtain this information at any time by running the following command on the command line console:</p>

<code>npx @dcl/opscli pointer-consistency --pointer '0,0'</code>

<strong>📔 Note</strong>

<blockquote>: Use the coordinates of your scene instead of</blockquote>

<code>0,0</code>

<blockquote>. If your scene has multiple parcels, any one of its parcels will produce the same output. If the coordinates start with a negative number, add a</blockquote>

<code>\</code>

<blockquote>at the start of the coordinates to prevent the</blockquote>

<code>-</code>

<blockquote>character from being misinterpreted by the command line.</blockquote>

<h2>Automatic deployments</h2>

<p>If you regularly make changes to your scene’s content and want to implement a streamlined publication pipeline, you can automate the deployment of your scene via a GitHub action.</p>

<p>For this, you must first store your scene in a GitHub project. You can then set a</p>

<p>with the following script, which runs every time there’s a merge to the</p>

<code>main</code>

<p>branch. The script installs any dependencies, builds the project and then deploys it to Decentraland.</p>

<p>Important: For this process to run, you must set a wallet’s private key as an environment variable in GitHub, this is used to sign the deployment. As always, be very careful with keeping the private keys secure. Do NOT use the private key of the account that actually owns the land tokens, as that would have very big risks. Instead, delegate operator rights to a disposable wallet that owns no valuable tokens. If this private key is ever leaked somehow, you can easily revoke those operator rights from the account and set up a new wallet.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/dev-workflow/#deploy-to-the-test-environment

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-analytics/

<title>Scene analytics | Decentraland Documentation</title>

<strong>Scene analytics</strong>

<h1>Scene analytics</h1>

<p>As a creator, it’s very valuable to track player visits and the way in which players interact with your scene. Instead of assuming, you can obtain real data and make informed decisions while iterating on your designs.</p>

<p>The</p>

<p>built the</p>

<p>platform for use in Decentraland scenes. This solution is built by Decentraland builders, for Decentraland builders.</p>

<p>Through adding a</p>

<p>to your scene, you can access your scene’s analytics dashboard</p>

<p>. You can use your scene.json file to govern access to your scene’s analytics dashboards. By default, the owner of the land will have access. To grant access to another user, assign their wallet in the tags field of your scene.json file with an “atlas” tag as follows:</p>

<code>"tags": [ "atlas:0xE400A85a6169bd8BE439bB0DC9eac81f19f26843", "atlas:0x3fB38CEe8d0BA7Dcf59403a8C397626dC9c7A13B" ]</code>

<p>,</p>

<p>Alternatively, you may opt to grant public access to your scenes using the following in your tags field:</p>

<code>"tags" = ["atlas:*"]</code>

<p>Check out the</p>

<p>for detailed instructions about how to implement it in your scenes.</p>

<p>If you have any questions or suggestions you can reach out to the Atlas CORP team in the</p>

<p>or</p>

<p>.</p>

<p>The</p>

<p>exposes basic data about user weekly visits to your scenes. This data is only available to users with ownership or operator rights on these parcels, and there is no historical record for checking past periods. As a scene creator you don’t need to do any prior actions, this data is available for all published scenes.</p>

<p>To access this data, visit the</p>

<p>, select the</p>

<strong>Land</strong>

<p>tab, then select a parcel or estate that you own or have rights on. There you will find data for any scene in that location. The data includes total user visits, median session time and peak concurrent users during the last 7 days.</p>

<p>The</p>

<p>produced a powerful analytics tool that is specially designed for using in Decentraland scenes. It was originally funded by</p>

<p>.</p>

<p>Through a one-line code snippet (the ‘Builder Tag’), you can expose/access (via API or dashboard) a myriad of interesting scene data including unique visitors, heat maps of visitor foot traffic, visitor activity, your scene rank and more.</p>

<p>Read the</p>

<p>for detailed instructions about how to implement it in your scenes.</p>

<p>For additional help or suggestions you can reach out to the WeMeta team</p>

<p>or</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/troubleshooting/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/performance-optimization/#asset-bundle-conversion

<title>Performance optimization | Decentraland Documentation</title>

<strong>Performance optimization</strong>

<h1>Performance optimization</h1>

<p>There are several aspects you can optimize in your scenes to ensure the best possible experience for players who visit them. This document covers some best practices that can make a big difference in how fast your scene loads and how smoothly it runs for players that are on it or on neighboring scenes.</p>

<p>Keep in mind that many players may be visiting Decentraland using hardware that is not built for gaming, and via the browser, which limits how much of the hardware’s processing power is available to use. The experience of visiting your scene should be smooth for everyone.</p>

<p>The Decentraland explorer enforces many optimizations at engine level. These optimizations make a big difference, but the challenge of rendering multiple user-generated experiences simultaneously in a browser is a big one. We need your help to make things run smoothly.</p>

<h2>Timing</h2>

<h4>Video playing</h4>

<p>Playing videos is one of the most expensive things for the engine to handle. If your scene includes videos, make sure that only</p>

<em>ONE</em>

<p>VideoTexture is in use at a time. You can have dozens of planes sharing the same VideoTexture without significant impact on performance, but as soon as you add a second VideoTexture, its effects on framerate become very noticeable.</p>

<p>You should also avoid having videos playing in regions where they can’t be seen. For example, if you have a screen indoors, toggle the video using a trigger area based on when the player walks in and out.</p>

<strong>💡 Tip</strong>

<blockquote>: A trick several scenes have used is to stream a single video with multiple regions that are mapped differently to different planes. Each video screen uses</blockquote>

<blockquote>to only show a distinct part of the VideoTexture. Thanks to this, it can appear that there are separate videos playing without the cost of multiple VideoTextures.</blockquote>

<strong>💡 Tip</strong>

<blockquote>: When players are standing outside your scene, VideoTextures are not updated on every frame. This helps reduce the impact for surrounding scenes. It’s nevertheless ideal only turn on the playing of any videos when players</blockquote>

<blockquote>.</blockquote>

<h4>Lazy loading</h4>

<p>If your scene is large, or has indoor areas that are not always visible, you can choose to not load the entire set of entities from the very start. Instead, load the content by region as the player visits different parts of the scene. This can significantly reduce the load time of the scene, and also the amount of textures and 3d content that the engine needs to handle on every frame.</p>

<p>For example, the main building of a museum could load from the start, but the paintings on each floor only load for each player as they visit each floor.</p>

<p>See</p>

<p>for how that might work.</p>

<p>For the best result in terms of avoiding hiccups, hide entities by switching their shape’s</p>

<code>visible</code>

<p>property to false. With this approach, you add them to the engine when creating them, but you simply don’t make their models visible.</p>

<p>An alternative is to not add the entities to the engine until needed. This may result in some hiccups when the entities appear for the first time, and they might also take a couple of seconds to become visible. The advantage of this approach is that it’s a valid way to get around the</p>

<p>. Keep in mind that the scene limitations count is for the content that is being rendered in the scene at any given time, not for the total content that could be rendered. Loading and unloading parts of the scene should allow you to work around those limitations.</p>

<strong>📔 Note</strong>

<blockquote>: Entities that are not visible but are added to the engine do count towards the scene limitations.</blockquote>

<p>You can also toggle animations on or off for entities that are far or occluded. For example, for an NPC that plays a very subtle idle animation, you could make it only play that animation when the player is at less than 20 meters away. Use a trigger area around the NPC and toggle its animations on or off accordingly.</p>

<strong>💡 Tip</strong>

<blockquote>: When an entity is far away and small enough, it’s culled by the engine. This culling helps at a drawcall level, removing entities from the engine is always better. This culling also doesn’t take occlusion by other entities into account, so entities that are not so small but hidden by a wall are still rendered.</blockquote>

<h4>Async blocks</h4>

<p>Blocks of</p>

<p>are processed in a separate thread from the rest of the scene, to prevent blocking the progress of everything else.</p>

<p>Any processes that rely on responses from asynchronous services, such as</p>

<code>getPlayerData()</code>

<p>or</p>

<code>getCurrentRealm()</code>

<p>should always run in async blocks, as they otherwise block the rest of the scene’s loading while waiting for a response. The same applies to any calls to third party servers.</p>

<p>Note that the scene will be considered fully loaded when everything that isn’t async is done. Async processes might still be running when the player enters the scene. Avoid situations where an async process results in the loading of an entity that could potentially get the player stuck inside of its geometry.</p>

<h4>Rely on Events</h4>

<p>Try to make the scene’s logic rely on listening to</p>

<p>as much as possible, instead of running checks every frame.</p>

<p>The</p>

<code>update()</code>

<p>function in a</p>

<p>runs on every frame, 30 times per second (ideally). Avoid doing recurring checks if you can instead subscribe to an event.</p>

<p>For example, instead of constantly checking the player’s wearables, you can subscribe to the</p>

<code>onProfileChanged</code>

<p>event, and check the player’s wearables only when they’ve changed.</p>

<p>If you must use a system, avoid doing checks or adjustments on every single frame. You can include a timer as part of the update function and only run the check once per every full second, or whatever period makes sense.</p>

<h2>Optimize 3d models</h2>

<p>There are several ways in which your 3d models can be optimized to be lighter.</p>

<li>When possible, share textures across 3d models. A good practice is to use a single texture as an atlas map, shared across all models in the scene. It’s better to have 1 large shared texture of 1024x1024 pixels instead of several small ones.</li>

<strong>📔 Note</strong>

<blockquote>: Avoid using the same image file for both the albedo texture and the normal map or the emissive map of a material. Use separate files, even if identical. Assigning a same image file to different types of texture properties may introduce unwanted visual artifacts when compressed to asset bundles.</blockquote>

<em>.glb</em>

<p>is a compressed format, it will always weigh less than a</p>

<em>.gltf</em>

<p>. On the other hand, with</p>

<em>.gltf</em>

<p>it’s easy to share texture images by exporting textures as a separate file. You can have the best of both worlds by using the</p>

<p>, that allows you to have</p>

<em>.glb</em>

<p>models with external texture files.</p>

<p>Avoid using blended transparencies. Blended transparencies have to bypass quite a few of the rendering optimizations. If possible, favor opaque or alpha tested geometry.</p>

<p>Avoid skinned meshes. They can drag down the performance significantly.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more on 3d model best practices in the</blockquote>

<h4>Asset Bundle conversion</h4>

<p>About once a day, the Decentraland content servers run a process to compress every</p>

<em>.gltf</em>

<p>and</p>

<em>.glb</em>

<p>model in every newly deployed scene to asset bundle format. This format is</p>

<em>significantly</em>

<p>lighter, making scenes a lot faster to load and smoother to run on the browser.</p>

<strong>💡 Tip</strong>

<blockquote>: When planning an event in Decentraland, make sure you deploy your scene a day in advance, so that the models are all converted to asset bundles by then. If you don’t want to spoil the surprize before the event, you can deploy a version of your scene that includes all the final 3d models in the project folder, but where these are not visible or where their size is set to 0.</blockquote>

<strong>📔 Note</strong>

<blockquote>: If you make</blockquote>

<em>any</em>

<blockquote>change to a 3d model file, even if just a name change, it will be considered a new file, and must be converted to asset bundle format again.</blockquote>

<h2>Connectivity</h2>

<p>If your scene connects to any 3rd party servers or uses the</p>

<p>to send messages between players, there are also some things you might want to keep in mind.</p>

<li>Your scene should only have one active WebSockets connection at a time.</li>

<li>HTTP calls are funneled by the engine so that only one is handled at a time. Any additional requests are queued internally and must wait till other requests are completed. This queuing process is handled automatically, you don’t need to do anything.</li>

<li>When using the</li>

<li>to send messages between players, be mindful that all messages are sent to all other players in the server island. Avoid situations where an incoming message directly results in sending another message, as the number of messages can quickly grow exponentially when there’s a crowd in the scene.</li>

<h2>Scene UI</h2>

<p>Scene UIs can become costly to render when they are made up of many individual elements. Keep in mind that each UI element requires a separate drawcall on the engine.</p>

<strong>💡 Tip</strong>

<blockquote>: Try to merge multiple elements into one single image. For example if you have a menu with multiple text elements, it’s ideal to have the text from the tiles and any additional images baked into the background image. That saves the engine from doing one additional drawcall per frame for each text element.</blockquote>

<p>Avoid making adjustments to the UI on every frame, those are especially costly and can end up getting queued. For example, if there’s a health bar in your UI that should shrink over period of time, players would probably not notice a difference between if it updates at 10 FPS instead of at 30 FPS (on every frame). The system that updates this bar can use a brief timer that counts 100 milliseconds, and only affect the UI when this timer reaches 0.</p>

<p>Avoid having many hidden UI elements, these also have an effect on performance even if not being rendered. When possible, try to create UI components on demand.</p>

<h2>Monitor Performance</h2>

<p>The best metric to know how well a scene is performing is the FPS (Frames Per Second). In preview, you can see the current scene FPS in the debug panel. You should aim to always have 30 FPS or more.</p>

<p>In the deployed scene, you can toggle the panel that shows these metrics by writing</p>

<code>/showfps</code>

<p>into the chat window.</p>

<p>One of the main bottlenecks in a scene’s performance is usually the sending of messages between the scene’s code and the engine.</p>

<p>When you run a scene in preview, note that on the top-right corner it says “Y = Toggle Panel”. Hit Y on the keyboard to open a panel with some useful information that gets updated in real time.</p>

<p>As you interact with things that involve messages between the SDK and the engine, you’ll notice the ‘Processed Messages’ number grows. You should closely watch the ‘Pending on Queue’ number, it should always be 0 or close to 0. This tells you how many of these messages didn’t get to be processed, and got pushed to a queue. If the ‘Pending on Queue’ count starts to grow, then you’ve entered the danger zone and should think about doing more optimizations to your scene.</p>

<strong>📔 Note</strong>

<blockquote>: Don’t keep the panel open while you’re not using it, since it has a negative impact on performance.</blockquote>

<p>Keep in mind that the performance you experience in preview may differ from that in production:</p>

<li>Surrounding neighboring scenes might have a negative impact</li>

<li>The compression of the scenes’ 3d models into asset bundles can have a positive impact</li>

<li>Some players visiting your scene may be running on less powerful hardware</li>

<p>It’s always a good practice to try deploying your scene first to the</p>

<p>to do some more thorough testing.</p>

<p>Always ask players for feedback. Never take for granted that how you experience the scene is the same for everyone else.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/performance-optimization/#asset-bundle-conversion

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/event-listeners/

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>When the player changes the camera mode between 1st and 3rd person in or near your scene, this creates an event you can listen to.</p>

<p>The values of the returned property can be:</p>

<code>CameraMode.FirstPerson</code>

<code>CameraMode.ThirdPerson</code>

<p>This event is fired once when the scene first obtains information about the player’s current camera mode, and then any time the player changes camera mode while in or around your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: To encourage players to use a particular camera mode in your scene, display a UI message advising them to switch modes whenever they use the wrong one.</blockquote>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<p>Note: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</p>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<p>Note: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</p>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<p>Tip: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</p>

<p>.</p>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player goes idle</h2>

<p>Whenever the player is inactive for a full minute, without interacting with any input being picked up by the Decentraland explorer, we can consider the player to be idle. Whenever this happens, it creates an event that you can listen to.</p>

<p>The</p>

<code>isIdle</code>

<p>property is a boolean value that is</p>

<em>true</em>

<p>when the player enters the idle mode and</p>

<em>false</em>

<p>when the player leaves the idle mode.</p>

<p>This event is especially useful for multiplayer scenes, when you might want to disconnect from the server players who are likely away from the machine or left Decentraland in a tab in the background.</p>

<strong>📔 Note</strong>

<blockquote>: The idle state is inferred based on the player not using the keyboard or mouse for a full minute. This can of course produce false positives, for example a player might be watching other players interact or watching a video stream, standing still but fully engaged. Be mindful of these corner cases and what the experience is like for a player who stands still for a while.</blockquote>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<strong>💡 Tip</strong>

<blockquote>: When this event is triggered, you can then use the</blockquote>

<blockquote>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</blockquote>

<code>getUserData()</code>

<blockquote>to ensure that the version this function returns is up to date.</blockquote>

<p>When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<h2>Video playing</h2>

<p>When a</p>

<code>VideoTexture</code>

<p>changes its playing status, the</p>

<code>onVideoEvent</code>

<p>observable receives an event.</p>

<p>The input of a video event contains the following properties:</p>

<code>videoClipId</code>

<p>(</p>

<em>string</em>

<p>): The ID for the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>componentId</code>

<p>(</p>

<em>string</em>

<p>): The ID of the</p>

<code>VideoTexture</code>

<p>component that changed status.</p>

<code>currentOffset</code>

<p>(</p>

<em>number</em>

<p>): The current value of the</p>

<code>seek</code>

<p>property on the video. This value shows seconds after the video’s original beginning.</p>

<em>-1</em>

<p>by default.</p>

<code>totalVideoLength</code>

<p>(</p>

<em>number</em>

<p>): The length in seconds of the entire video.</p>

<em>-1</em>

<p>if length is unknown.</p>

<code>videoStatus</code>

<p>: The value for the new video status of the</p>

<code>VideoTexture</code>

<p>, expressed as a value from the</p>

<code>VideoStatus</code>

<p>enum. This enum can hold the following possible values:</p>

<code>VideoStatus.NONE</code>

<p>= 0,</p>

<code>VideoStatus.ERROR</code>

<p>= 1,</p>

<code>VideoStatus.LOADING</code>

<p>= 2,</p>

<code>VideoStatus.READY</code>

<p>= 3,</p>

<code>VideoStatus.PLAYING</code>

<p>= 4,</p>

<code>VideoStatus.BUFFERING</code>

<p>= 5</p>

<p>Learn more about playing videos in Decentraland in</p>

<p>.</p>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on a</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entity-positioning/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/move-entities/

<title>Move entities | Decentraland Documentation</title>

<strong>Move entities</strong>

<h1>Move entities</h1>

<p>To move, rotate or resize an entity in your scene over a period of time, use the</p>

<code>Tween</code>

<p>component. The engine carries out the desired transformation smoothly, showing updates on every frame until the specified duration is over. Also the</p>

<code>Transform</code>

<p>component values of the affected entity gets updated in real time in case it’s needed to make proximity checks in the scene code.</p>

<h2>Move between two points</h2>

<p>To move an entity between two points, create a</p>

<code>Tween</code>

<p>component with its mode set to</p>

<code>Tween.Mode.Move</code>

<p>.</p>

<p>The movement tween takes the following information:</p>

<code>start</code>

<li>: A Vector3 for the starting position</li>

<code>end</code>

<li>: A Vector3 for the ending position</li>

<code>faceDirection</code>

<em>(optional)</em>

<li>: If true, the entity is rotated to face in the direction of the movement.</li>

<p>Also, all tweens include the following required properties:</p>

<code>duration</code>

<li>: How many milliseconds it takes to move between the two positions</li>

<code>easingFunction</code>

<li>: What easing function to use. See</li>

<h2>Rotate between two directions</h2>

<p>To rotate an entity between two points, create a</p>

<code>Tween</code>

<p>component with its mode set to</p>

<code>Tween.Mode.Rotate</code>

<p>.</p>

<p>The rotate tween takes the following information:</p>

<code>start</code>

<li>: A Quaternion for the starting rotation</li>

<code>end</code>

<li>: A Quaternion for the ending rotation</li>

<p>Also, all tweens include the following required properties:</p>

<code>duration</code>

<li>: How many milliseconds it takes to move between the two positions</li>

<code>easingFunction</code>

<li>: What easing function to use. See</li>

<h3>Rotate with a pivot point</h3>

<p>When rotating an entity, the rotation is always in reference to the entity’s center coordinate. To rotate an entity using another set of coordinates as a pivot point, create a second (invisible) entity with the pivot point as its position and make it a parent of the entity you want to rotate.</p>

<p>When rotating the parent entity, its children will be all rotated using the parent’s position as a pivot point. Note that the</p>

<code>position</code>

<p>of the child entity is in reference to that of the parent entity.</p>

<p>Note that in this example, the system is rotating the</p>

<code>pivotEntity</code>

<p>entity, that’s a parent of the</p>

<code>childEntity</code>

<p>entity.</p>

<h2>Scale between two sizes</h2>

<p>To change the scale of an entity between two sizes, create a</p>

<code>Tween</code>

<p>component with its mode set to</p>

<code>Tween.Mode.Scale</code>

<p>.</p>

<p>The scale tween takes the following information:</p>

<code>start</code>

<li>: A Vector3 for the starting size</li>

<code>end</code>

<li>: A Vector3 for the ending size</li>

<p>Also, all tweens include the following required properties:</p>

<code>duration</code>

<li>: How many milliseconds it takes to move between the two positions</li>

<code>easingFunction</code>

<li>: What easing function to use. See</li>

<h2>Non-linear tweens</h2>

<p>Tweens can follow different</p>

<strong>Easing Functions</strong>

<p>that affect the rate of change over time. A</p>

<strong>linear</strong>

<p>function, means that the speed of the change is constant from start to finish. There are plenty of options to chose, that draw differently shaped curves depending on if the beginning and/or end start slow, and how much. An</p>

<strong>easeinexpo</strong>

<p>curve starts slow and ends fast, increasing speed exponentially, on the contrary an</p>

<strong>easeoutexpo</strong>

<p>curve starts fast and ends slow.</p>

<strong>💡 Tip</strong>

<blockquote>: Experiment with different movement curves. The differences are often subtle, but we subconsciously interpret information from how things move, like weight, friction, or even personality.</blockquote>

<p>The</p>

<code>easingFunction</code>

<p>field takes its value from the</p>

<code>EasingFunction</code>

<p>enum, that offers the following options:</p>

<code>EF_EASEBACK</code>

<code>EF_EASEBOUNCE</code>

<code>EF_EASECIRC</code>

<code>EF_EASECUBIC</code>

<code>EF_EASEELASTIC</code>

<code>EF_EASEEXPO</code>

<code>EF_EASEINBACK</code>

<code>EF_EASEINBOUNCE</code>

<code>EF_EASEINCIRC</code>

<code>EF_EASEINCUBIC</code>

<code>EF_EASEINELASTIC</code>

<code>EF_EASEINEXPO</code>

<code>EF_EASEINQUAD</code>

<code>EF_EASEINQUART</code>

<code>EF_EASEINQUINT</code>

<code>EF_EASEINSINE</code>

<code>EF_EASEOUTBACK</code>

<code>EF_EASEOUTBOUNCE</code>

<code>EF_EASEOUTCIRC</code>

<code>EF_EASEOUTCUBIC</code>

<code>EF_EASEOUTELASTIC</code>

<code>EF_EASEOUTEXPO</code>

<code>EF_EASEOUTQUAD</code>

<code>EF_EASEOUTQUART</code>

<code>EF_EASEOUTQUINT</code>

<code>EF_EASEOUTSINE</code>

<code>EF_EASEQUAD</code>

<code>EF_EASEQUART</code>

<code>EF_EASEQUINT</code>

<code>EF_EASESINE</code>

<code>EF_LINEAR</code>

<h2>Tween sequences</h2>

<p>To make an entity play a series of tweens in sequence, use the</p>

<code>TweenSequence</code>

<p>component. This component requires two fields:</p>

<code>sequence</code>

<li>: An array with multiple tween definitions, that will be carried out sequentially. The array can be empty, in which case it only plays the current tween.</li>

<code>loop</code>

<em>(optional)</em>

<li>: If not provided, the sequence is only played once. If the field is present, the value must be a value of the</li>

<code>TweenLoop</code>

<li>enum. Accepted values are:</li>

<code>TL_RESTART</code>

<li>: When the sequence ends, it restarts. If the last state doesn’t match the first state, the entity instantly jumps from one to the other.</li>

<code>TL_YOYO</code>

<li>: When the sequence ends, the it goes backwards, doing all tweens in reverse until it reaches the start again. Then it begins once more.</li>

<h3>Move back and forth</h3>

<p>To make a platform move constantly back and forth between two positions, leave the</p>

<code>sequence</code>

<p>array empty, and set</p>

<code>loop</code>

<p>to</p>

<code>TweenLoop.TL_YOYO</code>

<p>The entity will move back and forth between the start point and the end point, with the same duration and the same easing function in both directions.</p>

<h3>Follow a path</h3>

<p>To make an entity follow a more complex path with multiple points, provide a list of tween definitions in the</p>

<code>sequence</code>

<p>of a</p>

<code>TweenSequence</code>

<p>component.</p>

<h3>Keep spinning</h3>

<p>A basic “constant rotation” can be achieved with the</p>

<code>TweenSequence</code>

<p>component as well.</p>

<h2>On tween finished</h2>

<p>Use</p>

<code>tweenSystem.tweenCompleted</code>

<p>to detect when a tween has finished. This can be useful to perform actions when a tween ends, for example to open an elevator door.</p>

<h2>Simultaneous tweens</h2>

<p>An entity can only have one</p>

<code>Tween</code>

<p>component, and each tween component can only perform one transformation at a time. For example, you can´t make an entity move sideways and also rotate at the same time. As a workaround, you can use parented entities. For example, you can have an invisible parent entity that moves sideways, with a visible child that rotates.</p>

<p>In the following snippet, a parent entity rotates while a child scales up.</p>

<h2>Pause a tween</h2>

<p>To pause a tween, change the</p>

<code>playing</code>

<p>property to false. To resume it, change it back to true.</p>

<h2>Tweens based on a system</h2>

<p>Instead of using the Tween component and letting the engine handle the transformation, you may prefer to do this transition incrementally, frame by frame, via a</p>

<p>in your scene. By moving the entity a small amount each time the function runs.</p>

<p>On one hand, this gives you more control for re-calculating movements on every frame. On the other hand, the code is more complicated, and players with less performant machines might experience the tween as laggy, noticing each increment.</p>

<h3>Move via system</h3>

<p>The easiest way to move an entity is to gradually modify the</p>

<em>position</em>

<p>value stored in the</p>

<code>Transform</code>

<p>component.</p>

<p>In this example we’re moving an entity by 0.1 meters per tick of the game loop.</p>

<code>Vector3.Forward()</code>

<p>returns a vector that faces forward and measures 1 meter in length. In this example we’re then scaling this vector down to 1/10 of its length with</p>

<code>Vector3.scale()</code>

<p>. If our scene has 30 frames per second, the entity is moving at 3 meters per second in speed.</p>

<h3>Rotate via system</h3>

<p>The easiest way to rotate an entity is to gradually change the values in the Transform component incrementally, and run this as part of a system’s function of a system.</p>

<p>Note that in order to combine the current rotation with each increment, we’re using</p>

<code>Quaternion.multiply</code>

<p>. In quaternion math, you combine two rotations by multiplying them, NOT by adding them. The resulting rotation of multiplying one quaternion by another will be the equivalent final rotation after first performing one rotation and then the other.</p>

<p>In this example, we’re rotating the entity by 1 degree in an upwards direction in each tick of the game loop.</p>

<strong>💡 Tip</strong>

<blockquote>: To make an entity always rotate to face the player, you can add a</blockquote>

<code>Billboard</code>

<blockquote>.</blockquote>

<h3>Rotate via system over a pivot point</h3>

<p>When rotating an entity, the rotation is always in reference to the entity’s center coordinate. To rotate an entity using another set of coordinates as a pivot point, create a second (invisible) entity with the pivot point as its position and make it a parent of the entity you want to rotate.</p>

<p>When rotating the parent entity, its children will be all rotated using the parent’s position as a pivot point. Note that the</p>

<code>position</code>

<p>of the child entity is in reference to that of the parent entity.</p>

<p>Note that in this example, the system is rotating the</p>

<code>pivotEntity</code>

<p>entity, that’s a parent of the</p>

<code>childEntity</code>

<p>entity.</p>

<h3>Adjust movement to delay time</h3>

<p>Suppose that the player visiting your scene is struggling to keep up with the pace of the frame rate. That could result in the movement appearing jumpy, as not all frames are evenly timed but each moves the entity in the same amount.</p>

<p>You can compensate for this uneven timing by using the</p>

<code>dt</code>

<p>parameter to adjust the scale the movement.</p>

<p>The example above keeps movement at approximately the same speed as the movement example above, even if the frame rate drops. When running at 30 frames per second, the value of</p>

<code>dt</code>

<p>is 1/30.</p>

<p>You can also smoothen rotations in the same way by multiplying the rotation amount by</p>

<code>dt</code>

<p>.</p>

<h3>Move between two points via system</h3>

<p>If you want an entity to move smoothly between two points, use the</p>

<em>lerp</em>

<p>(linear interpolation) algorithm. This algorithm is very well known in game development, as it’s really useful.</p>

<p>The</p>

<code>lerp()</code>

<p>function takes three parameters:</p>

<li>The vector for the origin position</li>

<li>The vector for the target position</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the translation to do.</li>

<p>The linear interpolation algorithm finds an intermediate point in the path between both vectors that matches the provided amount.</p>

<p>For example, if the origin vector is</p>

<em>(0, 0, 0)</em>

<p>and the target vector is</p>

<em>(10, 0, 10)</em>

<p>:</p>

<li>Using an amount of 0 would return</li>

<em>(0, 0, 0)</em>

<li>Using an amount of 0.3 would return</li>

<em>(3, 0, 3)</em>

<li>Using an amount of 1 would return</li>

<em>(10, 0, 10)</em>

<p>To implement this</p>

<code>lerp()</code>

<p>in your scene, we recommend creating a</p>

<p>to store the necessary information. You also need to define a system that implements the gradual movement in each frame.</p>

<h3>Rotate between two angles via system</h3>

<p>To rotate smoothly between two angles, use the</p>

<em>slerp</em>

<p>(</p>

<em>spherical</em>

<p>linear interpolation) algorithm. This algorithm is very similar to a</p>

<em>lerp</em>

<p>, but it handles quaternion rotations.</p>

<p>The</p>

<code>slerp()</code>

<p>function takes three parameters:</p>

<li>The</li>

<li>angle for the origin rotation</li>

<li>The</li>

<li>angle for the target rotation</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the translation to do.</li>

<strong>💡 Tip</strong>

<blockquote>: You can pass rotation values in</blockquote>

<blockquote>degrees (from 0 to 360) by using</blockquote>

<code>Quaternion.fromEulerDegrees()</code>

<blockquote>.</blockquote>

<p>To implement this in your scene, we recommend storing the data that goes into the</p>

<code>Slerp()</code>

<p>function in a</p>

<p>. You also need to define a system that implements the gradual rotation in each frame.</p>

<strong>📔 Note</strong>

<blockquote>: You could instead represent the rotation with euler angles as</blockquote>

<code>Vector3</code>

<blockquote>values and use a</blockquote>

<code>Lerp()</code>

<blockquote>function, but that would imply a conversion from</blockquote>

<code>Vector3</code>

<blockquote>to</blockquote>

<code>Quaternion</code>

<blockquote>on each frame. Rotation values are internally stored as quaternions in the</blockquote>

<code>Transform</code>

<blockquote>component, so it’s more efficient for the scene to work with quaternions.</blockquote>

<p>A simpler but less efficient approach to this takes advantage of the</p>

<code>Quaternion.rotateTowards</code>

<p>function, and avoids using any custom components.</p>

<p>In the example above</p>

<code>Quaternion.rotateTowards</code>

<p>takes three arguments: the initial rotation, the final rotation that’s desired, and the maximum increment per frame. In this case, since the maximum increment is of</p>

<code>dt * 10</code>

<p>degrees, the rotation will be carried out over a period of a couple of 9 seconds.</p>

<p>Note that the system also checks to see if the rotation is complete and if so it removes the system from the engine. Otherwise, the system would keep making calculations on every frame, even once the rotation is complete.</p>

<h3>Change scale between two sizes via system</h3>

<p>If you want an entity to change size smoothly and without changing its proportions, use the</p>

<em>lerp</em>

<p>(linear interpolation) algorithm of the</p>

<code>Scalar</code>

<p>object.</p>

<p>Otherwise, if you want to change the axis in different proportions, use</p>

<code>Vector3</code>

<p>to represent the origin scale and the target scale, and then use the</p>

<em>lerp</em>

<p>function of the</p>

<code>Vector3</code>

<p>.</p>

<p>The</p>

<code>lerp()</code>

<p>function of the</p>

<code>Scalar</code>

<p>object takes three parameters:</p>

<li>A number for the origin scale</li>

<li>A number for the target scale</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the scaling to do.</li>

<p>To implement this lerp in your scene, we recommend creating a custom component to store the necessary information. You also need to define a system that implements the gradual scaling in each frame.</p>

<h3>Move at irregular speeds between two points via system</h3>

<p>While using the lerp method, you can make the movement speed non-linear. In the previous example we increment the lerp amount by a given amount each frame, but we could also use a mathematical function to increase the number exponentially or in other measures that give you a different movement pace.</p>

<p>You could also use a function that gives recurring results, like a sine function, to describe a movement that comes and goes.</p>

<p>Often these non-linear transitions can breathe a lot of life into a scene. A movement that speeds up over a curve or slows down gradually can say a lot about the nature of an object or character. You could even take advantage of mathematical functions that add bouncy effects.</p>

<p>The example above is just like the linear lerp example we’ve shown before, but the</p>

<code>fraction</code>

<p>field mapped to a non-linear value on every tick. This non-linear value is used to calculate the</p>

<code>lerp</code>

<p>function, resulting in a movement that follows an exponential curve.</p>

<p>You can also map a transition in rotation or in scale in the same way as shown above, by mapping a linear transition to a curve.</p>

<h3>Follow a path via system</h3>

<p>You can have an entity loop over an array of vectors, performing a lerp movement between each to follow a more complex path.</p>

<p>The example above defines a 3D path that’s made up of four 3D vectors. The</p>

<code>PathTransportData</code>

<p>custom component holds the same data used by the custom component in the</p>

<em>lerp</em>

<p>example above, but adds a</p>

<code>path</code>

<p>array, with all of the points in our path, and a</p>

<code>pathTargetIndex</code>

<p>field to keep track of what segment of the path is currently in use.</p>

<p>The system is very similar to the system in the</p>

<em>lerp</em>

<p>example, but when a lerp action is completed, it sets the</p>

<code>target</code>

<p>and</p>

<code>origin</code>

<p>fields to new values. If we reach the end of the path, we return to the first value in the path.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/move-entities/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entity-positioning/#face-the-user

<title>Set entity positions | Decentraland Documentation</title>

<strong>Set entity positions</strong>

<h1>Set entity positions</h1>

<p>You can set the</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>of any entity by using the</p>

<code>Transform</code>

<p>component. This can be used on any entity in the 3D space, affecting where the entitiy is rendered. This includes primitive shapes (cube, sphere, plane, etc), 3D text shapes, NFT shapes, and 3D models (</p>

<code>GltfContainer</code>

<p>).</p>

<h2>Editor UI</h2>

<p>When dragging entities via the Inspector, in the</p>

<p>, you are changing the values in the entity’s Transform implicitly. By changing the position, rotation or scale of an entity, this changes the data in that entity’s Transform component.</p>

<h2>Code essentials</h2>

<p>To move, rotate or resize an entity in your scene over a period of time, change the values on this component incrementally, frame by frame. See</p>

<p>for more details and best practices.</p>

<strong>📔 Note</strong>

<p>:</p>

<code>Vector3</code>

<p>and</p>

<code>Quaternion</code>

<p>must be imported via</p>

<code>import { Vector3, Quaternion } from "@dcl/sdk/math"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Position</h2>

<code>position</code>

<p>is a</p>

<em>3D vector</em>

<p>, it sets the position of the entity’s center on all three axes,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>, and</p>

<em>z</em>

<p>. See</p>

<p>for more details.</p>

<p>When setting a position, keep the following considerations in mind:</p>

<p>The numbers in a position vector represent</p>

<em>meters</em>

<p>(unless the entity is a child of a scaled entity).</p>

<p>A scene that is made up of a single parcel measures 16m x 16m. The center of the scene (at ground level) is at</p>

<code>x:8, y:0, z:8</code>

<p>. If the scene is made up of multiple parcels, then the center will vary depending on their arrangement.</p>

<code>x:0, y:0, z:0</code>

<p>refers to the</p>

<em>South-West</em>

<p>corner of the scene’s base parcel, at ground level.</p>

<p>Tip: When viewing a scene preview, a compass appears in the (0,0,0) point of the scene with labels for each axis as reference.</p>

<p>Note: You can change the base parcel of a scene by editing the</p>

<code>base</code>

<p>attribute of</p>

<em>scene.json</em>

<p>.</p>

<p>To better orient yourself, use your</p>

<em>left</em>

<p>hand:</p>

<li>your index finger (pointing forward) is the</li>

<em>z</em>

<li>axis</li>

<li>your middle finger (pointing sideways) is the</li>

<em>x</em>

<li>axis</li>

<li>your thumb (pointing up) is the</li>

<em>y</em>

<li>axis.</li>

<p>If an entity is a child of another, then</p>

<code>x:0, y:0, z:0</code>

<p>refers to the center of its parent entity, wherever it is in the scene.</p>

<p>Every entity in your scene must be positioned within the bounds of the parcels it occupies at all times. If an entity leaves these boundaries, it will raise an error.</p>

<p>Tip: When viewing a scene in preview mode, entities that are out of bounds are highlighted in</p>

<em>red</em>

<p>.</p>

<p>Your scene is also limited in height. The more parcels that make up the scene, the higher you’re allowed to build. See</p>

<p>for more details.</p>

<h2>Rotation</h2>

<code>rotation</code>

<p>is stored as a</p>

<em>quaternion</em>

<p>, a system of four numbers,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>,</p>

<em>z</em>

<p>and</p>

<em>w</em>

<p>. Each of these numbers goes from 0 to 1. See</p>

<p>for more details.</p>

<p>You can also set the rotation field with</p>

<em>Euler</em>

<p>, the more common</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>notation with numbers that go from 0 to 360 that most people are familiar with. To use Euler angles, use one of the following notations:</p>

<p>When using a</p>

<em>3D vector</em>

<p>to represent Euler angles,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>represent the rotation in that axis, measured in degrees. A full turn requires 360 degrees.</p>

<p>When you retrieve the rotation of an entity, it returns a quaternion by default. To obtain the rotation expressed as in Euler angles, use</p>

<code>.toEuler()</code>

<p>:</p>

<h2>Face the player</h2>

<p>Add a</p>

<em>Billboard</em>

<p>component to an entity so that it always rotates to face the player.</p>

<p>Billboards were a common technique used in 3D games of the 90s, where most entities were 2D planes that always faced the player. The same idea can also be used to rotate a 3D model.</p>

<p>You can configure how the billboard behaves with the following parameters:</p>

<code>billboardMode</code>

<li>: Uses a value of the</li>

<code>BillboardMode</code>

<li>to set its behavior:</li>

<code>BillboardMode.BM_ALL</code>

<li>: The entity rotates to face the player on all of its rotation axis. If the player is high above the entity, the entity will face up.</li>

<code>BillboardMode.BM_NONE</code>

<li>: The entity won’t rotate at all.</li>

<code>BillboardMode.BM_X</code>

<li>: The entity has its</li>

<em>x</em>

<li>rotation axis fixed.</li>

<code>BillboardMode.BM_Y</code>

<li>: The entity has its</li>

<em>y</em>

<li>rotation axis fixed. It only rotates left and right, not up and down. It stays perpendicular to the ground if the player is above or below the entity.</li>

<code>BillboardMode.BM_Z</code>

<li>: The entity has its</li>

<em>z</em>

<li>rotation axis fixed.</li>

<strong>💡 Tip</strong>

<blockquote>: Billboards are very handy to add to</blockquote>

<em>text</em>

<blockquote>entities, since it makes them always legible.</blockquote>

<p>The</p>

<code>rotation</code>

<p>value of the entity’s</p>

<code>Transform</code>

<p>component doesn’t change as the billboard follows players around.</p>

<p>If an entity has both a</p>

<code>Billboard</code>

<p>component and</p>

<code>Transform</code>

<p>component with</p>

<code>rotation</code>

<p>values, players will see the entity rotating as a billboard. If the billboard doesn’t affect all axis, the remaining axis will be rotated according to the</p>

<code>Transform</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: If there are multiple players present at the same time, each will see the entities with billboard mode facing them. Billboard rotations are calculated locally for each player, and don’t affect what others see.</blockquote>

<h2>Face a set of coordinates</h2>

<p>For entity A to look at entity B:</p>

<code>1) Subtract the position of entity A from entity B to get a vector that describes the distance between them.

2) Normalize that vector, so it has a length of 1, maintaining its direction.

3) Use `Quaternion.lookRotation` to get a Quaternion rotation that describes rotating in that direction.

4) Set that Quaternion as the rotation of entity A</code>

<h2>Scale</h2>

<code>scale</code>

<p>is also a</p>

<em>3D vector</em>

<p>, stored as a</p>

<code>Vector3</code>

<p>object, including the scale factor on the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>axis. The shape of the entity scaled accordingly, whether it’s a primitive or a 3D model.</p>

<p>The default scale is 1, so assign a value larger to 1 to stretch an entity or smaller than 1 to shrink it.</p>

<h2>Inherit transformations from parent</h2>

<p>When an entity is nested inside another, the child entities inherit components from the parents. This means that if a parent entity is positioned, scaled or rotated, its children are also affected. The position, rotation and scale values of children entities don’t override those of the parents, instead these are compounded.</p>

<p>You assign an entity to be parent of another by setting the</p>

<code>parent</code>

<p>field on the child entity’s</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity is scaled, all position values of its children are also scaled.</p>

<p>In this example, the child entity will be scaled down to 0.5, since its parent has that scale. The child entity’s position will also be relative to its parent. We have to add the parent’s position plus that of the child. In this case, since the parent is scaled to half its size, the transformation of the child is also scaled down proportionally. In absolute terms, the child is positioned at</p>

<code>{ x: 3, y: 1.5, z: 1 }</code>

<p>. If the parent had a</p>

<code>rotation</code>

<p>, this would also affect the child’s final position, as it changes the axis in which the child is shifted.</p>

<p>If a child entity has no</p>

<code>position</code>

<p>on its Transform, the default is</p>

<code>0,0,0</code>

<p>, which will leave it positioned at the same position as its parent.</p>

<p>You can use an invisible entity with no shape component as a parent, to wrap a set of other entities. This entity won’t be visible in the rendered scene, but can be used to group its children and apply a transform to all of them.</p>

<h2>Attach an entity to an avatar</h2>

<p>To fix an entity’s position to an avatar, add an</p>

<code>AvatarAttach</code>

<p>component to the entity.</p>

<p>You can pick different anchor points on the avatar, most of these points are linked to the player’s armature and follow the player’s animations. For example, when using the right hand anchor point the attached entity will move when the avatar waves or swings their arms while running, just as if the player was holding the entity in their hand.</p>

<p>When creating an</p>

<code>AvatarAttach</code>

<p>component, pass an object with the following data:</p>

<code>avatarId</code>

<li>:</li>

<em>Optional</em>

<li>The ID of the player to attach to. This is the same as the player’s Ethereum address, for those players connected with an Ethereum wallet. If not speccified, it attaches the entity to the local player’s avatar.</li>

<code>anchorPointId</code>

<li>: What anchor point on the avatar skeleton to attach the entity, using a value from the enum</li>

<code>AvatarAnchorPointType</code>

<li>.</li>

<p>The following anchor points are available on the player:</p>

<code>AvatarAnchorPointType.AAPT_NAME_TAG</code>

<p>: Floats right above the player’s name tag, isn’t affected by the player’s animations.</p>

<p>Note: The name tag height is dynamically adjusted based on the height of the wearables a player has on. So a player wearing a tall hat will have their name tag a little bit higher than others.</p>

<code>AvatarAnchorPointType.AAPT_POSITION</code>

<p>: The player’s overall position.</p>

<code>AvatarAnchorPointType.AAPT_RIGHT_HAND</code>

<p>: Is fixed on the player’s right hand</p>

<code>AvatarAnchorPointType.AAPT_LEFT_HAND</code>

<p>: Is fixed on the player’s left hand</p>

<p>Entity rendering is locally determined on each instance of the scene. Attaching an entity on one player doesn’t make it visible to other players who are seeing that player. If an entity is attached to the default local player, each player will experience the entity as attached to their own avatar.</p>

<strong>📔 Note</strong>

<blockquote>: Entities attached to an avatar must stay within scene bounds to be rendered. If a player walks out of your scene, any attached entities stop being rendered until the player walks back in. Smart wearables don’t have this limitation.</blockquote>

<p>The</p>

<code>AvatarAttach</code>

<p>component overwrites the</p>

<code>Transform</code>

<p>component. A single entity can have both an</p>

<code>AvatarAttach</code>

<p>and a</p>

<code>Transform</code>

<p>component at the same time but the values on the</p>

<code>Transform</code>

<p>component are ignored.</p>

<p>If you need to position an entity with an offset from the anchor point on the avatar, or a different rotation or scale, attach a parent entity to the anchor point. You can then set the visible model on a child entity to that parent, and give this child its own Transform component to describe its shifts from the anchor point.</p>

<strong>📔 Note</strong>

<blockquote>: If the attached entity has colliders, these colliders could block the player’s movement. Consider dissabling the physics layer of the entity’s colliders. See</blockquote>

<h3>Obtain an avatarId</h3>

<p>To attach an entity to the avatar of another player, you must provide the user’s ID in the field</p>

<code>avatarId</code>

<p>. There are</p>

<p>to obtain this data.</p>

<strong>📔 Note</strong>

<blockquote>: For those players connected with an Ethereum wallet, their</blockquote>

<code>userId</code>

<blockquote>is the same as their Ethereum address.</blockquote>

<p>Fetch the</p>

<code>userId</code>

<p>for all other nearby players via</p>

<code>getConnectedPlayers()</code>

<p>Using it together with</p>

<code>AvatarAttach</code>

<p>, you could use the following code to add a cube floating over the head of every other player in the scene:</p>

<p>See other ways to fetch other user’s IDs in</p>

<p>.</p>

<h2>Scene boundaries</h2>

<p>All entities in your scene must fit within the scene boundaries, as what’s outside those boundaries is parcels of land that are owned by other players.</p>

<p>When running a preview of your scene, any entities outside the scene’s parcels are colored red and their colliders are removed. When deployed to Decentraland, any entities outside the parcels will not be rendered at all by the engine.</p>

<p>The position of entities in your scene is constantly being checked as they move, if an entity leaves the scene and then returns it will be removed and then rendered normally again.</p>

<p>A grid on the scene’s ground shows the limits of the scene, which by default rage from 0 to 16 on the</p>

<em>x</em>

<p>and</p>

<em>z</em>

<p>axis, and up to 20 on the</p>

<em>y</em>

<p>axis. You’re free to place entities underground, below 0 on the</p>

<em>y</em>

<p>axis.</p>

<strong>💡 Tip</strong>

<blockquote>: If your scene needs more parcels, you can add them in the project’s</blockquote>

<code>scene.json</code>

<blockquote>file. See</blockquote>

<blockquote>for instructions. Once added, you should see the grid extend to cover the additional parcels.</blockquote>

<p>It’s important to note that the</p>

<em>entire</em>

<p>3D model must be within the scene’s bounds. This includes the model’s</p>

<em>bounding box</em>

<p>. Some 3D models may have bounding boxes that unnecessarily extend beyond the meshes themselves, and it can sometimes be tricky to tell when this happens. When an entity extends beyond the scene’s boundaries, in the preview you’ll see a cube that marks these bounding boxes. The entire cube must fit within your scene.</p>

<p>If an entity’s cube extends beyond the shape of its meshes, you might need to edit the 3D model in an external editor to reduce these margins, or to</p>

<em>bake</em>

<p>the rotation and scale of the meshes in the model.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entity-positioning/#face-the-user

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/special-types/

<title>Geometry types | Decentraland Documentation</title>

<strong>Geometry types</strong>

<h1>Geometry types</h1>

<h2>Vector3</h2>

<p>Decentraland uses</p>

<em>vector3</em>

<p>data to represent paths, points in space, and directions. Vectors can also be used to define rotation orientations, as a friendlier alternative to</p>

<em>quaternions</em>

<p>. A Vector3 object contains numerical values for each of the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>, and</p>

<em>z</em>

<p>axis.</p>

<p>The</p>

<code>Vector3</code>

<p>namespace contains a series of handy methods that you can call to avoid having to deal with most vector math operations. Write</p>

<code>Vector3.</code>

<p>, and VS Studio will display a dropdown with all of the available functions.</p>

<p>Below are a few lines showing the syntax for some basic operations with vectors.</p>

<p>Vector3 objects are often required in the fields of several components. For example, the</p>

<code>Transform</code>

<p>component contains</p>

<code>Vector3</code>

<p>values for the</p>

<em>position</em>

<p>and</p>

<em>scale</em>

<p>of the entity.</p>

<p>To create a</p>

<p>with parameters that require Vector3 values, set the type of these parameters as</p>

<code>Schema.Vector3</code>

<p>.</p>

<strong>📔 Note</strong>

<p>:</p>

<code>Vector3</code>

<p>must be imported via</p>

<code>import { Vector3 } from "@dcl/sdk/math"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h3>Shortcuts for writing direction vectors</h3>

<p>The following shortcuts exist for defining generic vectors:</p>

<code>Vector3.Zero()</code>

<li>returns</li>

<em>(0, 0, 0)</em>

<code>Vector3.Up()</code>

<li>returns</li>

<em>(0, 1, 0)</em>

<code>Vector3.Down()</code>

<li>returns</li>

<em>(0, -1, 0)</em>

<code>Vector3.Left()</code>

<li>returns</li>

<em>(-1, 0, 0)</em>

<code>Vector3.Right()</code>

<li>returns</li>

<em>(1, 0, 0)</em>

<code>Vector3.Forward()</code>

<li>returns</li>

<em>(0, 0, 1)</em>

<code>Vector3.Backward()</code>

<li>returns</li>

<em>(0, 0, -1)</em>

<h2>Quaternions</h2>

<p>Quaternions are used to store rotation information for the Transform component. A Quaternion is composed of four numerical values between -1 and 1:</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>,</p>

<em>z</em>

<p>,</p>

<em>w</em>

<p>.</p>

<p>Quaternions are different from</p>

<em>Euler</em>

<p>, the more common</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>notation with numbers that go from 0 to 360 that most people are familiar with. The engine expresses all rotations as Quaternions, so it makes sense to avoid computations to convert to and from euler whenever possible.</p>

<p>The</p>

<code>Quaternion</code>

<p>namespace contains a series of handy methods that you can call to avoid having to deal with many math operations. Write</p>

<code>Quaternion.</code>

<p>, and VS Studio will display a dropdown with all of the available functions.</p>

<p>Below are a few lines showing the syntax for some basic operations with Quaternions.</p>

<p>Since it’s a lot easier to think in terms of Euler degrees, the SDK includes a couple of functions to convert to and from Quaternions and Euler.</p>

<strong>💡 Tip</strong>

<blockquote>: Avoid running these conversions as part of recurrent logic inside a system, that run on every tick, as that can get expensive. These conversions are mostly useful for one-time operations, like setting the rotation of a new entity.</blockquote>

<p>Quaternion objects are often required in the fields of components. For example, the</p>

<code>Transform</code>

<p>component contains</p>

<code>Quaternion</code>

<p>values for rotation of the entity.</p>

<p>To create a</p>

<p>with parameters that require Quaternion values, set the type of these parameters as</p>

<code>Schema.Quaternion</code>

<p>.</p>

<strong>📔 Note</strong>

<p>:</p>

<code>Quaternion</code>

<p>must be imported via</p>

<code>import { Quaternion } from "@dcl/sdk/math"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Scalars</h2>

<p>A scalar is nothing more than a number. For that reason, it doesn’t make much sense to instantiate a</p>

<code>Scalar</code>

<p>object to store data, as you can do the same with a number. The functions in the</p>

<code>Scalar</code>

<p>namespace however expose several handy functions (similar to those in the</p>

<em>Vector3</em>

<p>namespace), that can be used on numbers.</p>

<strong>📔 Note</strong>

<p>:</p>

<code>Scalar</code>

<p>must be imported via</p>

<code>import { Scalar } from "@dcl/sdk/math"</code>

<p>See</p>

<p>for how to handle these easily.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/custom-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/move-entities/#move-between-two-points

<title>Move entities | Decentraland Documentation</title>

<strong>Move entities</strong>

<h1>Move entities</h1>

<p>To move, rotate or resize an entity in your scene over a period of time, use the</p>

<code>Tween</code>

<p>component. The engine carries out the desired transformation smoothly, showing updates on every frame until the specified duration is over. Also the</p>

<code>Transform</code>

<p>component values of the affected entity gets updated in real time in case it’s needed to make proximity checks in the scene code.</p>

<h2>Move between two points</h2>

<p>To move an entity between two points, create a</p>

<code>Tween</code>

<p>component with its mode set to</p>

<code>Tween.Mode.Move</code>

<p>.</p>

<p>The movement tween takes the following information:</p>

<code>start</code>

<li>: A Vector3 for the starting position</li>

<code>end</code>

<li>: A Vector3 for the ending position</li>

<code>faceDirection</code>

<em>(optional)</em>

<li>: If true, the entity is rotated to face in the direction of the movement.</li>

<p>Also, all tweens include the following required properties:</p>

<code>duration</code>

<li>: How many milliseconds it takes to move between the two positions</li>

<code>easingFunction</code>

<li>: What easing function to use. See</li>

<h2>Rotate between two directions</h2>

<p>To rotate an entity between two points, create a</p>

<code>Tween</code>

<p>component with its mode set to</p>

<code>Tween.Mode.Rotate</code>

<p>.</p>

<p>The rotate tween takes the following information:</p>

<code>start</code>

<li>: A Quaternion for the starting rotation</li>

<code>end</code>

<li>: A Quaternion for the ending rotation</li>

<p>Also, all tweens include the following required properties:</p>

<code>duration</code>

<li>: How many milliseconds it takes to move between the two positions</li>

<code>easingFunction</code>

<li>: What easing function to use. See</li>

<h3>Rotate with a pivot point</h3>

<p>When rotating an entity, the rotation is always in reference to the entity’s center coordinate. To rotate an entity using another set of coordinates as a pivot point, create a second (invisible) entity with the pivot point as its position and make it a parent of the entity you want to rotate.</p>

<p>When rotating the parent entity, its children will be all rotated using the parent’s position as a pivot point. Note that the</p>

<code>position</code>

<p>of the child entity is in reference to that of the parent entity.</p>

<p>Note that in this example, the system is rotating the</p>

<code>pivotEntity</code>

<p>entity, that’s a parent of the</p>

<code>childEntity</code>

<p>entity.</p>

<h2>Scale between two sizes</h2>

<p>To change the scale of an entity between two sizes, create a</p>

<code>Tween</code>

<p>component with its mode set to</p>

<code>Tween.Mode.Scale</code>

<p>.</p>

<p>The scale tween takes the following information:</p>

<code>start</code>

<li>: A Vector3 for the starting size</li>

<code>end</code>

<li>: A Vector3 for the ending size</li>

<p>Also, all tweens include the following required properties:</p>

<code>duration</code>

<li>: How many milliseconds it takes to move between the two positions</li>

<code>easingFunction</code>

<li>: What easing function to use. See</li>

<h2>Non-linear tweens</h2>

<p>Tweens can follow different</p>

<strong>Easing Functions</strong>

<p>that affect the rate of change over time. A</p>

<strong>linear</strong>

<p>function, means that the speed of the change is constant from start to finish. There are plenty of options to chose, that draw differently shaped curves depending on if the beginning and/or end start slow, and how much. An</p>

<strong>easeinexpo</strong>

<p>curve starts slow and ends fast, increasing speed exponentially, on the contrary an</p>

<strong>easeoutexpo</strong>

<p>curve starts fast and ends slow.</p>

<strong>💡 Tip</strong>

<blockquote>: Experiment with different movement curves. The differences are often subtle, but we subconsciously interpret information from how things move, like weight, friction, or even personality.</blockquote>

<p>The</p>

<code>easingFunction</code>

<p>field takes its value from the</p>

<code>EasingFunction</code>

<p>enum, that offers the following options:</p>

<code>EF_EASEBACK</code>

<code>EF_EASEBOUNCE</code>

<code>EF_EASECIRC</code>

<code>EF_EASECUBIC</code>

<code>EF_EASEELASTIC</code>

<code>EF_EASEEXPO</code>

<code>EF_EASEINBACK</code>

<code>EF_EASEINBOUNCE</code>

<code>EF_EASEINCIRC</code>

<code>EF_EASEINCUBIC</code>

<code>EF_EASEINELASTIC</code>

<code>EF_EASEINEXPO</code>

<code>EF_EASEINQUAD</code>

<code>EF_EASEINQUART</code>

<code>EF_EASEINQUINT</code>

<code>EF_EASEINSINE</code>

<code>EF_EASEOUTBACK</code>

<code>EF_EASEOUTBOUNCE</code>

<code>EF_EASEOUTCIRC</code>

<code>EF_EASEOUTCUBIC</code>

<code>EF_EASEOUTELASTIC</code>

<code>EF_EASEOUTEXPO</code>

<code>EF_EASEOUTQUAD</code>

<code>EF_EASEOUTQUART</code>

<code>EF_EASEOUTQUINT</code>

<code>EF_EASEOUTSINE</code>

<code>EF_EASEQUAD</code>

<code>EF_EASEQUART</code>

<code>EF_EASEQUINT</code>

<code>EF_EASESINE</code>

<code>EF_LINEAR</code>

<h2>Tween sequences</h2>

<p>To make an entity play a series of tweens in sequence, use the</p>

<code>TweenSequence</code>

<p>component. This component requires two fields:</p>

<code>sequence</code>

<li>: An array with multiple tween definitions, that will be carried out sequentially. The array can be empty, in which case it only plays the current tween.</li>

<code>loop</code>

<em>(optional)</em>

<li>: If not provided, the sequence is only played once. If the field is present, the value must be a value of the</li>

<code>TweenLoop</code>

<li>enum. Accepted values are:</li>

<code>TL_RESTART</code>

<li>: When the sequence ends, it restarts. If the last state doesn’t match the first state, the entity instantly jumps from one to the other.</li>

<code>TL_YOYO</code>

<li>: When the sequence ends, the it goes backwards, doing all tweens in reverse until it reaches the start again. Then it begins once more.</li>

<h3>Move back and forth</h3>

<p>To make a platform move constantly back and forth between two positions, leave the</p>

<code>sequence</code>

<p>array empty, and set</p>

<code>loop</code>

<p>to</p>

<code>TweenLoop.TL_YOYO</code>

<p>The entity will move back and forth between the start point and the end point, with the same duration and the same easing function in both directions.</p>

<h3>Follow a path</h3>

<p>To make an entity follow a more complex path with multiple points, provide a list of tween definitions in the</p>

<code>sequence</code>

<p>of a</p>

<code>TweenSequence</code>

<p>component.</p>

<h3>Keep spinning</h3>

<p>A basic “constant rotation” can be achieved with the</p>

<code>TweenSequence</code>

<p>component as well.</p>

<h2>On tween finished</h2>

<p>Use</p>

<code>tweenSystem.tweenCompleted</code>

<p>to detect when a tween has finished. This can be useful to perform actions when a tween ends, for example to open an elevator door.</p>

<h2>Simultaneous tweens</h2>

<p>An entity can only have one</p>

<code>Tween</code>

<p>component, and each tween component can only perform one transformation at a time. For example, you can´t make an entity move sideways and also rotate at the same time. As a workaround, you can use parented entities. For example, you can have an invisible parent entity that moves sideways, with a visible child that rotates.</p>

<p>In the following snippet, a parent entity rotates while a child scales up.</p>

<h2>Pause a tween</h2>

<p>To pause a tween, change the</p>

<code>playing</code>

<p>property to false. To resume it, change it back to true.</p>

<h2>Tweens based on a system</h2>

<p>Instead of using the Tween component and letting the engine handle the transformation, you may prefer to do this transition incrementally, frame by frame, via a</p>

<p>in your scene. By moving the entity a small amount each time the function runs.</p>

<p>On one hand, this gives you more control for re-calculating movements on every frame. On the other hand, the code is more complicated, and players with less performant machines might experience the tween as laggy, noticing each increment.</p>

<h3>Move via system</h3>

<p>The easiest way to move an entity is to gradually modify the</p>

<em>position</em>

<p>value stored in the</p>

<code>Transform</code>

<p>component.</p>

<p>In this example we’re moving an entity by 0.1 meters per tick of the game loop.</p>

<code>Vector3.Forward()</code>

<p>returns a vector that faces forward and measures 1 meter in length. In this example we’re then scaling this vector down to 1/10 of its length with</p>

<code>Vector3.scale()</code>

<p>. If our scene has 30 frames per second, the entity is moving at 3 meters per second in speed.</p>

<h3>Rotate via system</h3>

<p>The easiest way to rotate an entity is to gradually change the values in the Transform component incrementally, and run this as part of a system’s function of a system.</p>

<p>Note that in order to combine the current rotation with each increment, we’re using</p>

<code>Quaternion.multiply</code>

<p>. In quaternion math, you combine two rotations by multiplying them, NOT by adding them. The resulting rotation of multiplying one quaternion by another will be the equivalent final rotation after first performing one rotation and then the other.</p>

<p>In this example, we’re rotating the entity by 1 degree in an upwards direction in each tick of the game loop.</p>

<strong>💡 Tip</strong>

<blockquote>: To make an entity always rotate to face the player, you can add a</blockquote>

<code>Billboard</code>

<blockquote>.</blockquote>

<h3>Rotate via system over a pivot point</h3>

<p>When rotating an entity, the rotation is always in reference to the entity’s center coordinate. To rotate an entity using another set of coordinates as a pivot point, create a second (invisible) entity with the pivot point as its position and make it a parent of the entity you want to rotate.</p>

<p>When rotating the parent entity, its children will be all rotated using the parent’s position as a pivot point. Note that the</p>

<code>position</code>

<p>of the child entity is in reference to that of the parent entity.</p>

<p>Note that in this example, the system is rotating the</p>

<code>pivotEntity</code>

<p>entity, that’s a parent of the</p>

<code>childEntity</code>

<p>entity.</p>

<h3>Adjust movement to delay time</h3>

<p>Suppose that the player visiting your scene is struggling to keep up with the pace of the frame rate. That could result in the movement appearing jumpy, as not all frames are evenly timed but each moves the entity in the same amount.</p>

<p>You can compensate for this uneven timing by using the</p>

<code>dt</code>

<p>parameter to adjust the scale the movement.</p>

<p>The example above keeps movement at approximately the same speed as the movement example above, even if the frame rate drops. When running at 30 frames per second, the value of</p>

<code>dt</code>

<p>is 1/30.</p>

<p>You can also smoothen rotations in the same way by multiplying the rotation amount by</p>

<code>dt</code>

<p>.</p>

<h3>Move between two points via system</h3>

<p>If you want an entity to move smoothly between two points, use the</p>

<em>lerp</em>

<p>(linear interpolation) algorithm. This algorithm is very well known in game development, as it’s really useful.</p>

<p>The</p>

<code>lerp()</code>

<p>function takes three parameters:</p>

<li>The vector for the origin position</li>

<li>The vector for the target position</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the translation to do.</li>

<p>The linear interpolation algorithm finds an intermediate point in the path between both vectors that matches the provided amount.</p>

<p>For example, if the origin vector is</p>

<em>(0, 0, 0)</em>

<p>and the target vector is</p>

<em>(10, 0, 10)</em>

<p>:</p>

<li>Using an amount of 0 would return</li>

<em>(0, 0, 0)</em>

<li>Using an amount of 0.3 would return</li>

<em>(3, 0, 3)</em>

<li>Using an amount of 1 would return</li>

<em>(10, 0, 10)</em>

<p>To implement this</p>

<code>lerp()</code>

<p>in your scene, we recommend creating a</p>

<p>to store the necessary information. You also need to define a system that implements the gradual movement in each frame.</p>

<h3>Rotate between two angles via system</h3>

<p>To rotate smoothly between two angles, use the</p>

<em>slerp</em>

<p>(</p>

<em>spherical</em>

<p>linear interpolation) algorithm. This algorithm is very similar to a</p>

<em>lerp</em>

<p>, but it handles quaternion rotations.</p>

<p>The</p>

<code>slerp()</code>

<p>function takes three parameters:</p>

<li>The</li>

<li>angle for the origin rotation</li>

<li>The</li>

<li>angle for the target rotation</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the translation to do.</li>

<strong>💡 Tip</strong>

<blockquote>: You can pass rotation values in</blockquote>

<blockquote>degrees (from 0 to 360) by using</blockquote>

<code>Quaternion.fromEulerDegrees()</code>

<blockquote>.</blockquote>

<p>To implement this in your scene, we recommend storing the data that goes into the</p>

<code>Slerp()</code>

<p>function in a</p>

<p>. You also need to define a system that implements the gradual rotation in each frame.</p>

<strong>📔 Note</strong>

<blockquote>: You could instead represent the rotation with euler angles as</blockquote>

<code>Vector3</code>

<blockquote>values and use a</blockquote>

<code>Lerp()</code>

<blockquote>function, but that would imply a conversion from</blockquote>

<code>Vector3</code>

<blockquote>to</blockquote>

<code>Quaternion</code>

<blockquote>on each frame. Rotation values are internally stored as quaternions in the</blockquote>

<code>Transform</code>

<blockquote>component, so it’s more efficient for the scene to work with quaternions.</blockquote>

<p>A simpler but less efficient approach to this takes advantage of the</p>

<code>Quaternion.rotateTowards</code>

<p>function, and avoids using any custom components.</p>

<p>In the example above</p>

<code>Quaternion.rotateTowards</code>

<p>takes three arguments: the initial rotation, the final rotation that’s desired, and the maximum increment per frame. In this case, since the maximum increment is of</p>

<code>dt * 10</code>

<p>degrees, the rotation will be carried out over a period of a couple of 9 seconds.</p>

<p>Note that the system also checks to see if the rotation is complete and if so it removes the system from the engine. Otherwise, the system would keep making calculations on every frame, even once the rotation is complete.</p>

<h3>Change scale between two sizes via system</h3>

<p>If you want an entity to change size smoothly and without changing its proportions, use the</p>

<em>lerp</em>

<p>(linear interpolation) algorithm of the</p>

<code>Scalar</code>

<p>object.</p>

<p>Otherwise, if you want to change the axis in different proportions, use</p>

<code>Vector3</code>

<p>to represent the origin scale and the target scale, and then use the</p>

<em>lerp</em>

<p>function of the</p>

<code>Vector3</code>

<p>.</p>

<p>The</p>

<code>lerp()</code>

<p>function of the</p>

<code>Scalar</code>

<p>object takes three parameters:</p>

<li>A number for the origin scale</li>

<li>A number for the target scale</li>

<li>The amount, a value from 0 to 1 that represents what fraction of the scaling to do.</li>

<p>To implement this lerp in your scene, we recommend creating a custom component to store the necessary information. You also need to define a system that implements the gradual scaling in each frame.</p>

<h3>Move at irregular speeds between two points via system</h3>

<p>While using the lerp method, you can make the movement speed non-linear. In the previous example we increment the lerp amount by a given amount each frame, but we could also use a mathematical function to increase the number exponentially or in other measures that give you a different movement pace.</p>

<p>You could also use a function that gives recurring results, like a sine function, to describe a movement that comes and goes.</p>

<p>Often these non-linear transitions can breathe a lot of life into a scene. A movement that speeds up over a curve or slows down gradually can say a lot about the nature of an object or character. You could even take advantage of mathematical functions that add bouncy effects.</p>

<p>The example above is just like the linear lerp example we’ve shown before, but the</p>

<code>fraction</code>

<p>field mapped to a non-linear value on every tick. This non-linear value is used to calculate the</p>

<code>lerp</code>

<p>function, resulting in a movement that follows an exponential curve.</p>

<p>You can also map a transition in rotation or in scale in the same way as shown above, by mapping a linear transition to a curve.</p>

<h3>Follow a path via system</h3>

<p>You can have an entity loop over an array of vectors, performing a lerp movement between each to follow a more complex path.</p>

<p>The example above defines a 3D path that’s made up of four 3D vectors. The</p>

<code>PathTransportData</code>

<p>custom component holds the same data used by the custom component in the</p>

<em>lerp</em>

<p>example above, but adds a</p>

<code>path</code>

<p>array, with all of the points in our path, and a</p>

<code>pathTargetIndex</code>

<p>field to keep track of what segment of the path is currently in use.</p>

<p>The system is very similar to the system in the</p>

<em>lerp</em>

<p>example, but when a lerp action is completed, it sets the</p>

<code>target</code>

<p>and</p>

<code>origin</code>

<p>fields to new values. If we reach the end of the path, we return to the first value in the path.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/authoritative-server/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/serverless-multiplayer/#send-explicit-messagebus-messages

<title>Serverless Multiplayer | Decentraland Documentation</title>

<strong>Serverless Multiplayer</strong>

<h1>Serverless Multiplayer</h1>

<p>Decentraland runs scenes locally in a player’s browser. By default, players are able to see each other and interact directly, but each player interacts with the environment independently. Changes in the environment aren’t shared between players by default.</p>

<p>Seeing the same content in the same state is extremely important for players to interact in more meaningful ways.</p>

<p>There are three ways to sync the scene state, so that all players see the same:</p>

<strong>Mark an entity as synced</strong>

<li>: The easiest option. See</li>

<strong>Send Explicit MessageBus Messages</strong>

<li>: Manually send and listen for specific messages. See</li>

<strong>Use a Server</strong>

<li>: See</li>

<li>. This option is more complicated to set up, but is recommendable if players have incentives to exploit your scene.</li>

<p>The first two options are covered in this document. They are simpler, as they require no server. The downside is that you rely more on player’s connection speeds, and the scene state is not persisted when all players leave the scene.</p>

<h2>Mark an Entity as Synced</h2>

<strong>📔 Note</strong>

<blockquote>: This feature is currently in alpha state. Its syntax could potentially undergo changes on the next few releases.</blockquote>

<p>To mark an entity as synced, use the</p>

<code>syncEntity</code>

<p>function:</p>

<p>The</p>

<code>syncEntity</code>

<p>function takes the following inputs:</p>

<strong>entityId</strong>

<li>: A reference to the entity to sync</li>

<strong>componentIds</strong>

<li>: A list of the components that need to be synced from that entity. This is an array that may contain as many entities as needed. All values should be</li>

<code>componentId</code>

<li>properties.</li>

<strong>entityEnumId</strong>

<li>: (optional) A unique id that is used consistently by all players, see</li>

<li>.</li>

<p>Not all entities or components need to be synced. Static elements like a tree that remains in the same spot don’t require syncing. On entities you do sync, only the components that change over time should be synchronized. For example, if a cube changes color when clicked, you should only sync the Material component, not the MeshRenderer or the Transform, as those will never change.</p>

<strong>💡 Tip</strong>

<blockquote>: If the data you want to share doesn’t exist as a component, define a</blockquote>

<blockquote>that holds that data.</blockquote>

<h3>About the enum id</h3>

<p>The</p>

<strong>entityEnumId</strong>

<p>of an entity must be unique. It’s not related to the local entityId assigned on</p>

<code>engine.addEntity()</code>

<p>, that is automatically generated and may vary between players running the same scene. The entityEnumId of an entity must be explicitly defined in the code and be unique.</p>

<p>Explicitly setting this ID is important to avoid inconsistencies if a race condition makes one part of the scene load before another. Maybe for player A the door in the scene is the entity</p>

<em>512</em>

<p>, but for player B that same door is entity</p>

<em>513</em>

<p>. In that case, if player A opens the door, player B instead sees the whole building move.</p>

<strong>💡 Tip</strong>

<p>: Create an enum in your scene, to keep clear references to each syncable id in your scene.</p>

<p>Here the EntityEnumId enum is used to tag entities with a unique identifier, ensuring that every client recognizes the modified entity, regardless of creation order.</p>

<h4>Entities created by a player</h4>

<p>If an entity is created as a result of a player interaction, and this entity should be synced with other players, the entity doesn’t need an entityEnumId. You can use</p>

<code>syncEntity()</code>

<p>passing only the entity and the list of components. A unique value for entityEnumId is assigned automatically behind the curtains.</p>

<p>All entities instanced on scene initiation need to have a manually-assigned ID. That’s to ensure that all players use the same ID on each. When a single player is in charge of instancing an entity, explicit IDs are not needed. Other players get updates about this new entity with an ID already assigned, so there is no risk of ID mismatches.</p>

<p>For example, in a snowball fight scene, every time a player throws a snowball, they’re instancing a new entity that gets synced with other players. The snowball doesn’t need a unique entityEnumId.</p>

<h4>Parented entities</h4>

<p>The parent of an entity is normally defined via</p>

<code>parent</code>

<p>property in the</p>

<code>Transform</code>

<p>component. This property however points to the local entity id of the parent, which could vary, see</p>

<p>. To parent entities that need to be synced, or that have children that need to be synced, use the</p>

<code>parentEntity()</code>

<p>function instead of the</p>

<code>Transform</code>

<p>.</p>

<p>Note that both the parent and the child are synced with</p>

<code>syncEntity</code>

<p>, so all players have a common understanding of what ids are used by both entities. This is necessary even if the parent’s components may never need to change. In this example, the</p>

<code>syncEntity</code>

<p>includes an empty array of components, to avoid syncing any unnecessary components.</p>

<strong>📔 Note</strong>

<blockquote>: If an entity is parented by both the</blockquote>

<code>parentEntity()</code>

<blockquote>and also the</blockquote>

<code>parent</code>

<blockquote>property in the</blockquote>

<code>Transform</code>

<blockquote>component, the property in the</blockquote>

<code>Transform</code>

<blockquote>component is ignored.</blockquote>

<p>When entities are parented via the</p>

<code>parentEntity()</code>

<p>function, you can also make use of the following helper functions:</p>

<strong>removeParent()</strong>

<li>: Undo the effects of</li>

<code>parentEntity()</code>

<li>. It requires that you pass only the child entity. The entity’s new parent becomes the scene’s root entity. The original parent entity is not removed from the scene.</li>

<strong>getParent()</strong>

<li>: Returns the parent entity of an entity you passed.</li>

<strong>getChildren()</strong>

<li>: Returns the list of children of the entity you passed, as an iterable.</li>

<strong>getFirstChild()</strong>

<li>: Returns the first child on the list for the entity you passed.</li>

<h2>Send Explicit MessageBus Messages</h2>

<h4>Initiate a message bus</h4>

<p>Create a message bus object to handle the methods that are needed to send and receive messages between players.</p>

<h4>Send messages</h4>

<p>Use the</p>

<code>.emit</code>

<p>command of the message bus to send a message to all other players in the scene.</p>

<p>Each message can contain a payload as a second argument. The payload is of type</p>

<code>Object</code>

<p>, and can contain any relevant data you wish to send.</p>

<strong>💡 Tip</strong>

<blockquote>: If you need a single message to include data from more than one variable, create a custom type to hold all this data in a single object.</blockquote>

<h4>Receive messages</h4>

<p>To handle messages from all other players in that scene, use</p>

<code>.on</code>

<p>. When using this function, you provide a message string and define a function to execute. For each time that a message with a matching string arrives, the given function is executed once.</p>

<strong>📔 Note</strong>

<blockquote>: Messages that are sent by a player are also picked up by that same player. The</blockquote>

<code>.on</code>

<blockquote>method can’t distinguish between a message that was emitted by that same player from a message emitted from other players.</blockquote>

<h4>Full MessageBus example</h4>

<p>This example uses a message bus to send a new message every time the main cube is clicked, generating a new cube in a random position. The message includes the position of the new cube, so that all players see these new cubes in the same positions.</p>

<h2>Test a multiplayer scene locally</h2>

<p>If you launch a scene preview and open it in two (or more) different browser windows, each open window will be interpreted as a separate player, and a mock communications server will keep these players in sync.</p>

<p>Interact with the scene on one window, then switch to the other to see that the effects of that interaction are also visible there.</p>

<strong>📔 Note</strong>

<blockquote>: Open separate browser</blockquote>

<em>windows</em>

<blockquote>. If you open separate</blockquote>

<em>tabs</em>

<blockquote>in the same window, the interaction won’t work properly, as only one tab will be treated as active by the browser at a time.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/#advanced-custom-hints

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#pointer-buttons

<title>About input actions | Decentraland Documentation</title>

<strong>About input actions</strong>

<h1>About input actions</h1>

<p>A Decentraland scene can detect input actions from all of the buttons that are used to control the player’s avatar. These include pointer clicks, several action buttons, and the keys that are used to move the avatar around. Button events can come from a mouse, a touch screen, a VR controller or some other device, these are all interpreted the same by the SDK.</p>

<p>You can detect input actions against an entity. This involves pressing a button while the player’s cursor is pointing at that entity’s collider. You can also detect</p>

<em>global</em>

<p>input event, that involve pressing activating the input at any time, without consideration for where the pointer is aiming.</p>

<strong>📔 Note</strong>

<blockquote>: Entities must have a</blockquote>

<blockquote>to respond to input actions.</blockquote>

<code>MeshRenderer</code>

<blockquote>models must also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component. Models from a</blockquote>

<code>GLTFContainer</code>

<blockquote>may have their own embedded collision geometry, or they can be configured to use their visible geometry, they can also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component.</blockquote>

<p>There are several different ways to handle input actions, depending on the use case.</p>

<strong>Register a callback</strong>

<li>: The easiest way to add interaction to a single entity. Write a single statement to set up a callback function and hover feedback.</li>

<strong>System-based</strong>

<li>: Ideal for handling multiple entities with similar behavior. Use a system to iterate over similar entities and query for input actions on each, handling them all with the same logic. Hover feedback needs to be set up separately. This approach is also required for handling global input actions.</li>

<strong>Advanced</strong>

<li>: Read the raw response data on each entity, including time-stamps and an event history of input events. This can be useful for defining custom interaction patterns.</li>

<h2>Hover Feedback</h2>

<p>Whichever method you use, it’s important to make players aware that an entity is interactive. Otherwise, they might completely miss out on the experience you built. It’s not a good experience to be clicking on every object hoping for one to respond. Users of Decentraland are used to the pattern that any interactive items offer feedback on hover, so they will discard an item with no feedback as non-interactive.</p>

<p>The default way to add feedback is to display a hover hint on the UI whenever the player passes their cursor over the entity’s collider. You can implement this behavior by adding a</p>

<code>PointerEvents</code>

<p>component to an entity. The</p>

<strong>Register a callback</strong>

<p>approach makes this even easier, as you don’t have to explicitly create this component.</p>

<p>You could also implement</p>

<p>, for example you could play a sound, making the entity change color, spin or enlarge while being pointed at, etc. Whatever you do, make sure that it’s a clear signifier.</p>

<h2>Obstacles</h2>

<p>Button events cast rays that only interact with the first entity on their path that is subscribed to the pointer events collision layer, as long as the entity is closer than its distance limit.</p>

<p>For an entity to be intercepted by the ray of a pointer event, either:</p>

<li>The model must contain</li>

<li>.</li>

<li>The</li>

<code>GLTFContainer</code>

<li>must be configured to use the</li>

<li>.</li>

<li>The entity must have a</li>

<li>.</li>

<p>If another entity’s collider is standing on the way of the entity that the player wants to interact with it, the player won’t be able to click the entity that’s behind, unless the entity has no collider, or this collider is configured to not respond to the pointer events collision layer.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<h2>Pointer buttons</h2>

<p>The following inputs can be handled by any of the approaches to detect input events.</p>

<code>InputAction.IA_POINTER</code>

<li>:</li>

<strong>left-mouse button</strong>

<li>on a computer.</li>

<code>InputAction.IA_PRIMARY</code>

<li>:</li>

<strong>E</strong>

<li>key on a computer.</li>

<code>InputAction.IA_SECONDARY</code>

<li>:</li>

<strong>F</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_3</code>

<li>:</li>

<strong>1</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_4</code>

<li>:</li>

<strong>2</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_5</code>

<li>:</li>

<strong>3</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_6</code>

<li>:</li>

<strong>4</strong>

<li>key on a computer.</li>

<code>InputAction.IA_JUMP</code>

<li>:</li>

<strong>Space</strong>

<li>key on a computer.</li>

<code>InputAction.IA_FORWARD</code>

<li>:</li>

<strong>W</strong>

<li>key on a computer.</li>

<code>InputAction.IA_LEFT</code>

<li>:</li>

<strong>A</strong>

<li>key on a computer.</li>

<code>InputAction.IA_RIGHT</code>

<li>:</li>

<strong>D</strong>

<li>key on a computer.</li>

<code>InputAction.IA_BACKWARD</code>

<li>:</li>

<strong>S</strong>

<li>key on a computer.</li>

<code>InputAction.IA_WALK</code>

<li>:</li>

<strong>Shift</strong>

<li>key on a computer.</li>

<p>Each</p>

<code>InputAction</code>

<p>is abstracted away from the literal input in the keyboard so that it can be mapped to different inputs depending on the device. For this same reason, not all buttons on the keyboard can be tracked for button events, only the buttons that are used for movement and interaction. This intentional limitation is to ensure that all content is compatible in the future with VR controllers, other kinds of game controllers, and mobile devices.</p>

<h2>Types of pointer events</h2>

<p>Each input can produce the following types of pointer events. Each of the following is a value in the</p>

<code>PointerEventType</code>

<p>enum.</p>

<code>DOWN</code>

<li>: Player pushes down a specific button while having the cursor pointing at the entity’s collider.</li>

<code>UP</code>

<li>: Player releases a specific button while having the cursor pointing at the entity’s collider.</li>

<code>HOVER_ENTER</code>

<li>: Player’s cursor starts pointing at the entity’s collider.</li>

<code>HOVER_LEAVE</code>

<li>: Player’s cursor stops pointing at the entity’s collider.</li>

<h2>Data from an input action</h2>

<p>All input actions include data about the event, including things like the button that was activated, and where the pointer was pointing at at the time.</p>

<p>The following information can be obtained from any input event:</p>

<code>analog</code>

<p>: Flag to mark if the event is from an analog or a digital input. Digital inputs have a value of</p>

<em>1</em>

<p>, analog inputs (like a joy stick) have a value of</p>

<em>0</em>

<p>.</p>

<code>button</code>

<p>: Which button id was pressed. The number corresponds to the</p>

<code>InputAction</code>

<p>enum, that lists all of the available buttons.</p>

<code>state</code>

<p>: Type of pointer event, from the enum</p>

<code>PointerEventType</code>

<p>.</p>

<em>0</em>

<p>refers to</p>

<code>PointerEventType.PET_DOWN</code>

<p>,</p>

<em>1</em>

<p>to</p>

<code>PointerEventType.PET_UP</code>

<p>,</p>

<em>2</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>,</p>

<em>3</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<code>timestamp</code>

<p>: A</p>

<p>to identify each button event.</p>

<p>Note: This timestamp is not numbered based on the current time. Think of it as a counter that starts at 0 and is incremented by 1 for each event.</p>

<code>hit</code>

<p>: An object that contains the following data about the hit event:</p>

<code>entityId</code>

<li>: Id number of the entity that was hit by the ray.</li>

<code>meshName</code>

<li>:</li>

<em>String</em>

<li>with the internal name of the specific mesh in the 3D model that was hit. This is useful when a 3D model is composed of multiple meshes.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray originates (relative to the scene)</li>

<code>position</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray intersected with the hit entity (relative to the scene)</li>

<code>length</code>

<li>: Length of the ray from its origin to the position where the hit against the entity occurred.</li>

<code>normalHit</code>

<li>:</li>

<em>Quaternion</em>

<li>for the angle of the normal of the hit in world space.</li>

<p>This data is accessed in different ways depending on what approach you’re using to handle input actions.</p>

<p>Using the</p>

<strong>Register a callback</strong>

<p>approach, the first parameter passed to the callback function contains this entire data structure.</p>

<p>Using the</p>

<strong>System-based</strong>

<p>approach, use</p>

<code>inputSystem.getInputCommand()</code>

<p>to fetch this data.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<p>Using the</p>

<strong>Advanced</strong>

<p>approach, the</p>

<code>PointerEventsResults</code>

<p>contains an array with a recent history of all pointer events against that entity.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/#advanced-custom-hints

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#types-of-pointer-events

<title>About input actions | Decentraland Documentation</title>

<strong>About input actions</strong>

<h1>About input actions</h1>

<p>A Decentraland scene can detect input actions from all of the buttons that are used to control the player’s avatar. These include pointer clicks, several action buttons, and the keys that are used to move the avatar around. Button events can come from a mouse, a touch screen, a VR controller or some other device, these are all interpreted the same by the SDK.</p>

<p>You can detect input actions against an entity. This involves pressing a button while the player’s cursor is pointing at that entity’s collider. You can also detect</p>

<em>global</em>

<p>input event, that involve pressing activating the input at any time, without consideration for where the pointer is aiming.</p>

<strong>📔 Note</strong>

<blockquote>: Entities must have a</blockquote>

<blockquote>to respond to input actions.</blockquote>

<code>MeshRenderer</code>

<blockquote>models must also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component. Models from a</blockquote>

<code>GLTFContainer</code>

<blockquote>may have their own embedded collision geometry, or they can be configured to use their visible geometry, they can also be given a</blockquote>

<code>MeshCollider</code>

<blockquote>component.</blockquote>

<p>There are several different ways to handle input actions, depending on the use case.</p>

<strong>Register a callback</strong>

<li>: The easiest way to add interaction to a single entity. Write a single statement to set up a callback function and hover feedback.</li>

<strong>System-based</strong>

<li>: Ideal for handling multiple entities with similar behavior. Use a system to iterate over similar entities and query for input actions on each, handling them all with the same logic. Hover feedback needs to be set up separately. This approach is also required for handling global input actions.</li>

<strong>Advanced</strong>

<li>: Read the raw response data on each entity, including time-stamps and an event history of input events. This can be useful for defining custom interaction patterns.</li>

<h2>Hover Feedback</h2>

<p>Whichever method you use, it’s important to make players aware that an entity is interactive. Otherwise, they might completely miss out on the experience you built. It’s not a good experience to be clicking on every object hoping for one to respond. Users of Decentraland are used to the pattern that any interactive items offer feedback on hover, so they will discard an item with no feedback as non-interactive.</p>

<p>The default way to add feedback is to display a hover hint on the UI whenever the player passes their cursor over the entity’s collider. You can implement this behavior by adding a</p>

<code>PointerEvents</code>

<p>component to an entity. The</p>

<strong>Register a callback</strong>

<p>approach makes this even easier, as you don’t have to explicitly create this component.</p>

<p>You could also implement</p>

<p>, for example you could play a sound, making the entity change color, spin or enlarge while being pointed at, etc. Whatever you do, make sure that it’s a clear signifier.</p>

<h2>Obstacles</h2>

<p>Button events cast rays that only interact with the first entity on their path that is subscribed to the pointer events collision layer, as long as the entity is closer than its distance limit.</p>

<p>For an entity to be intercepted by the ray of a pointer event, either:</p>

<li>The model must contain</li>

<li>.</li>

<li>The</li>

<code>GLTFContainer</code>

<li>must be configured to use the</li>

<li>.</li>

<li>The entity must have a</li>

<li>.</li>

<p>If another entity’s collider is standing on the way of the entity that the player wants to interact with it, the player won’t be able to click the entity that’s behind, unless the entity has no collider, or this collider is configured to not respond to the pointer events collision layer.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<h2>Pointer buttons</h2>

<p>The following inputs can be handled by any of the approaches to detect input events.</p>

<code>InputAction.IA_POINTER</code>

<li>:</li>

<strong>left-mouse button</strong>

<li>on a computer.</li>

<code>InputAction.IA_PRIMARY</code>

<li>:</li>

<strong>E</strong>

<li>key on a computer.</li>

<code>InputAction.IA_SECONDARY</code>

<li>:</li>

<strong>F</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_3</code>

<li>:</li>

<strong>1</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_4</code>

<li>:</li>

<strong>2</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_5</code>

<li>:</li>

<strong>3</strong>

<li>key on a computer.</li>

<code>InputAction.IA_ACTION_6</code>

<li>:</li>

<strong>4</strong>

<li>key on a computer.</li>

<code>InputAction.IA_JUMP</code>

<li>:</li>

<strong>Space</strong>

<li>key on a computer.</li>

<code>InputAction.IA_FORWARD</code>

<li>:</li>

<strong>W</strong>

<li>key on a computer.</li>

<code>InputAction.IA_LEFT</code>

<li>:</li>

<strong>A</strong>

<li>key on a computer.</li>

<code>InputAction.IA_RIGHT</code>

<li>:</li>

<strong>D</strong>

<li>key on a computer.</li>

<code>InputAction.IA_BACKWARD</code>

<li>:</li>

<strong>S</strong>

<li>key on a computer.</li>

<code>InputAction.IA_WALK</code>

<li>:</li>

<strong>Shift</strong>

<li>key on a computer.</li>

<p>Each</p>

<code>InputAction</code>

<p>is abstracted away from the literal input in the keyboard so that it can be mapped to different inputs depending on the device. For this same reason, not all buttons on the keyboard can be tracked for button events, only the buttons that are used for movement and interaction. This intentional limitation is to ensure that all content is compatible in the future with VR controllers, other kinds of game controllers, and mobile devices.</p>

<h2>Types of pointer events</h2>

<p>Each input can produce the following types of pointer events. Each of the following is a value in the</p>

<code>PointerEventType</code>

<p>enum.</p>

<code>DOWN</code>

<li>: Player pushes down a specific button while having the cursor pointing at the entity’s collider.</li>

<code>UP</code>

<li>: Player releases a specific button while having the cursor pointing at the entity’s collider.</li>

<code>HOVER_ENTER</code>

<li>: Player’s cursor starts pointing at the entity’s collider.</li>

<code>HOVER_LEAVE</code>

<li>: Player’s cursor stops pointing at the entity’s collider.</li>

<h2>Data from an input action</h2>

<p>All input actions include data about the event, including things like the button that was activated, and where the pointer was pointing at at the time.</p>

<p>The following information can be obtained from any input event:</p>

<code>analog</code>

<p>: Flag to mark if the event is from an analog or a digital input. Digital inputs have a value of</p>

<em>1</em>

<p>, analog inputs (like a joy stick) have a value of</p>

<em>0</em>

<p>.</p>

<code>button</code>

<p>: Which button id was pressed. The number corresponds to the</p>

<code>InputAction</code>

<p>enum, that lists all of the available buttons.</p>

<code>state</code>

<p>: Type of pointer event, from the enum</p>

<code>PointerEventType</code>

<p>.</p>

<em>0</em>

<p>refers to</p>

<code>PointerEventType.PET_DOWN</code>

<p>,</p>

<em>1</em>

<p>to</p>

<code>PointerEventType.PET_UP</code>

<p>,</p>

<em>2</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>,</p>

<em>3</em>

<p>to</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<code>timestamp</code>

<p>: A</p>

<p>to identify each button event.</p>

<p>Note: This timestamp is not numbered based on the current time. Think of it as a counter that starts at 0 and is incremented by 1 for each event.</p>

<code>hit</code>

<p>: An object that contains the following data about the hit event:</p>

<code>entityId</code>

<li>: Id number of the entity that was hit by the ray.</li>

<code>meshName</code>

<li>:</li>

<em>String</em>

<li>with the internal name of the specific mesh in the 3D model that was hit. This is useful when a 3D model is composed of multiple meshes.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray originates (relative to the scene)</li>

<code>position</code>

<li>:</li>

<em>Vector3</em>

<li>for the position where the ray intersected with the hit entity (relative to the scene)</li>

<code>length</code>

<li>: Length of the ray from its origin to the position where the hit against the entity occurred.</li>

<code>normalHit</code>

<li>:</li>

<em>Quaternion</em>

<li>for the angle of the normal of the hit in world space.</li>

<p>This data is accessed in different ways depending on what approach you’re using to handle input actions.</p>

<p>Using the</p>

<strong>Register a callback</strong>

<p>approach, the first parameter passed to the callback function contains this entire data structure.</p>

<p>Using the</p>

<strong>System-based</strong>

<p>approach, use</p>

<code>inputSystem.getInputCommand()</code>

<p>to fetch this data.</p>

<strong>📔 Note</strong>

<blockquote>: For an entity to not only intercept a pointer event, but also to return data, the entity also needs to have a</blockquote>

<code>PointerEvents</code>

<blockquote>component. The</blockquote>

<code>pointerEventsSystem</code>

<blockquote>helpers also take care of this requirment.</blockquote>

<p>Using the</p>

<strong>Advanced</strong>

<p>approach, the</p>

<code>PointerEventsResults</code>

<p>contains an array with a recent history of all pointer events against that entity.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/register-callback/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/system-based-events/#show-feedback

<title>System based events | Decentraland Documentation</title>

<strong>System based events</strong>

<h1>System based events</h1>

<p>If your scene has multiple similar entities that are all activated using the same logic, you can write a single system to iterates over all of them and describe that behavior only once. This is also the most performant and more</p>

<p>approach.</p>

<p>If all you want to do is click or push a button on a single entity to activate it, the easiest way is to use the</p>

<p>approach.</p>

<p>To set more specific custom logic, you might want to deal with the raw data and use the</p>

<p>approach.</p>

<p>For an entity to be interactive, it must have a</p>

<p>. See</p>

<p>for more details.</p>

<h2>Using a system</h2>

<p>Check for button events by running one of the helper functions on the input</p>

<code>inputSystem</code>

<p>namespace on every tick within a</p>

<p>.</p>

<p>For example, the following system uses the</p>

<code>inputSystem.isTriggered()</code>

<p>function to check if the pointer was clicked. On every tick, it checks if the button was pressed. If</p>

<code>inputSystem.isTriggered()</code>

<p>returns</p>

<em>true</em>

<p>, the system runs some custom logic in response.</p>

<p>The following helper functions are available in the</p>

<code>inputSystem</code>

<p>namespace, and can be called similarly on every tick:</p>

<code>inputSystem.isTriggered</code>

<li>: Returns true if an input action ocurred since the last tick.</li>

<code>inputSystem.isPressed</code>

<li>: Returns true if an input is currently being pressed down. It will return true on every tick until the button goes up again.</li>

<code>inputSystem.getInputCommand</code>

<li>: Returns an object with data about the input action.</li>

<p>See the sections below for more details on each.</p>

<p>When handling button events on an entity, always provide feedback to the player, so that the player is aware that an entity can be interacted with. If you add a</p>

<code>PointerEvents</code>

<p>component to an entity, players will see a hint while hovering their cursor on that entity. See</p>

<p>to learn how you can add hover hints on interactive entities.</p>

<h3>Global input events</h3>

<p>Use</p>

<code>inputSystem.isTriggered</code>

<p>to detect button down and button up events on any of the inputs tracked by the SDK.</p>

<p>The example above checks if the button was pressed, regardless of where the pointer is at, or what entities may be in its path.</p>

<code>inputSystem.isTriggered()</code>

<p>returns</p>

<em>true</em>

<p>only if the indicated button was pressed down in the current tick of the game loop. If the button was not pushed down, or it was already down from the previous tick, it returns</p>

<em>false</em>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The player needs to be standing inside the scene’s boundaries for the pointer event to be detected. The player’s cursor also needs to be locked, buttons pressed while having the free cursor aren’t detected.</blockquote>

<p>The</p>

<code>inputSystem.isTriggered</code>

<p>function takes the following required arguments:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>PointerEventType</code>

<li>: What type of event to listen for, as a value from the</li>

<code>PointerEventType</code>

<li>enum. See</li>

<li>for supported options.</li>

<h3>Activate an entity</h3>

<p>To detect button events while pointing at a particular entity, pass a third optional argument to</p>

<code>inputSystem.isTriggered</code>

<p>to specify what entity to check against.</p>

<p>The example above checks on every tick if a single hard-coded entity was pressed with the pointer button (left mouse button).</p>

<p>The</p>

<code>inputSystem.isTriggered</code>

<p>function takes the following arguments:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>PointerEventType</code>

<li>: What type of event to listen for, as a value from the</li>

<code>PointerEventType</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>Entity</code>

<em>(optional)</em>

<li>: What entity to check these events on. If no value is provided, it will check for global presses of the button, regardless of where the player’s cursor was pointing at.</li>

<p>Note that in this example we’re also adding a</p>

<code>PointerEvents</code>

<p>component to the entity we want to interact with. This step is necessary, without this component the entity won’t be detectable by any of the functions of</p>

<code>inputSystem</code>

<p>. see</p>

<p>for more details on the</p>

<code>PointerEvents</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: and a</blockquote>

<blockquote>. See</blockquote>

<blockquote>for more details.</blockquote>

<p>If there are multiple entities that the player can interact with in the same way, consider using</p>

<code>inputSystem.getInputCommand</code>

<p>. This command returns infor about a global click command, including the entity ID, you can use this to execute a single function that can handle them all.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

<p>See</p>

<p>for more info. This method also grants you more detailed data about the hit of the pointer event.</p>

<h3>Input button up</h3>

<p>You can also check for pointer up events in much the same way, by using</p>

<code>PointerEventType.PET_UP</code>

<p>.</p>

<strong>📔 Note</strong>

<p>: When checking pointer up events against a specific entity, it doesn’t take into consideration where the cursor was pointing at when the button was pushed down. It only considers where the cursor is pointing at when the button is raised.</p>

<p>Also keep in mind that hte entity must have both a</p>

<code>PointerEvents</code>

<p>and a</p>

<p>.</p>

<h3>Check for pressed buttons</h3>

<p>Check if a button is currently being pressed down by using</p>

<code>inputSystem.isPressed()</code>

<p>within a system.</p>

<code>inputSystem.isPressed()</code>

<p>returns</p>

<em>true</em>

<p>if the button is currently being held down, no matter when the button was pushed down, and no matter where the player’s cursor is pointing at. Otherwise it returns</p>

<em>false</em>

<p>.</p>

<p>The</p>

<code>inputSystem.isPressed</code>

<p>function takes a single argument:</p>

<code>InputAction</code>

<li>: Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<h3>Handle multiple entities</h3>

<p>If your scene has multiple entities that are affected by pointer events in the same way, it makes sense to write a system that iterates over all of them.</p>

<p>This example uses a</p>

<p>to iterate over all the entities with a</p>

<code>PointerEvents</code>

<p>component. It then checks each of these entities with</p>

<code>inputSystem.isTriggered</code>

<p>, iterating over them one by one. If an input action is detected on any of these entities, it carries out custom logic.</p>

<p>Instead of iterating over</p>

<em>all</em>

<p>the entities with a</p>

<code>PointerEvents</code>

<p>component in a single system, you might want to write different systems to handle entities that should behave in different ways. The recommended approach is to mark different types of entities with specific</p>

<p>, and iterate over them in separate systems.</p>

<p>This example has one system that iterates over all entities that have a custom component named</p>

<code>IsDoor</code>

<p>and another that iterates over all entities that have a custom component named</p>

<code>isGem</code>

<p>. In both systems, it checks every matching entity to see if they were activated with the pointer button.</p>

<p>This way of organizing your scene’s code is very</p>

<p>and should result in a very efficient use of memory resources.</p>

<h2>Show feedback</h2>

<p>To display UI hints while pointing at an entity, use the properties in the entity’s</p>

<code>PointerEvents</code>

<p>component.</p>

<p>Whenever the player’s cursor points at the colliders in this entity, the UI will display a hover hint to indicate that the entity can be interacted with. See the sections below for details on what you can configure.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>PointerEvents</code>

<blockquote>component just handles the displaying of hover feedback. To handle the button events themselves with custom logic, see</blockquote>

<blockquote>.</blockquote>

<p>The</p>

<code>PointerEvents</code>

<p>component requires at least one pointer event definition. Each pointer event definition can be configured with the following:</p>

<code>eventType</code>

<p>: What type of event to listen for, as a value from the</p>

<code>PointerEventType</code>

<p>enum. See</p>

<p>for supported options.</p>

<code>eventInfo</code>

<p>: An object that can contain the following fields:</p>

<code>button</code>

<li>(</li>

<em>required</em>

<li>): Which input to listen for, as a value from the</li>

<code>InputAction</code>

<li>enum. See</li>

<li>for supported options.</li>

<code>hoverText</code>

<em>(optional)</em>

<li>: What string to display in the UI.</li>

<code>maxDistance</code>

<em>(optional)</em>

<li>: Only show feedback when the player is closer than a certain distance from the entity. Default is</li>

<em>10 meters</em>

<li>.</li>

<p>A single</p>

<code>PointerEvents</code>

<p>component can hold multiple pointer events definitions, that can detect different events for different buttons. Each entity can only have</p>

<em>one</em>

<code>PointerEvents</code>

<p>component, but this component can include multiple objects in its</p>

<code>pointerEvents</code>

<p>array, one for each event to respond to.</p>

<p>Players will see multiple labels, one for each pointer event, displayed radially around the cursor.</p>

<p>The example below combines using</p>

<code>PointerEvents</code>

<p>to show hover hints, together with a system that actually handles the player’s action with custom logic.</p>

<h3>Hint messages</h3>

<p>When a player hovers the cursor over an item with an</p>

<code>PointerEvents</code>

<p>component, the cursor changes shape to hint to the player that the entity is interactive.</p>

<p>You can also display a toast message in the UI that lets the player know what happens if they interact with the entity.</p>

<p>In the example above, the pointer event includes a value for</p>

<code>hoverText</code>

<p>. This field defines the string to display in the UI while the player points at the entity. By default, this string spells</p>

<em>Interact</em>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: The</blockquote>

<code>hoverText</code>

<blockquote>string should describe the action that happens when interacting. For example</blockquote>

<code>Open</code>

<blockquote>,</blockquote>

<code>Activate</code>

<blockquote>,</blockquote>

<code>Grab</code>

<blockquote>,</blockquote>

<code>Select</code>

<blockquote>. These strings should be as short as possible, to avoid stealing too much focus from the player.</blockquote>

<p>If an entity has multiple pointer events on it, the hover hints for each of these are displayed radially around the cursor.</p>

<p>The</p>

<code>hoverText</code>

<p>of an</p>

<code>.UP</code>

<p>pointer event is only displayed while the player is already holding down the corresponding key and pointing at the entity.</p>

<p>If an entity has both a</p>

<code>DOWN</code>

<p>pointer event and an</p>

<code>UP</code>

<p>pointer event, the hint for the</p>

<code>DOWN</code>

<p>action is shown while the button is not being pressed. The hint switches to the one from the</p>

<code>UP</code>

<p>event only when the button is pressed and remains pressed.</p>

<h3>Max distance</h3>

<p>Some entities can be intentionally only interactive at a close range. If a player is too far away from an entity, the hover hint won’t be displayed next to the cursor.</p>

<p>By default, entities are only clickable when the player is within a close range of the entity, at a maximum distance of</p>

<em>10 meters</em>

<p>. You can change the maximum distance by setting the</p>

<code>maxDistance</code>

<p>property of a pointer event.</p>

<p>The example above sets the maximum distance for hover hints to</p>

<em>6 meters</em>

<p>. Make sure that the logic for handling the input actions also follows the same rules. See</p>

<p>for how to obtain the distance of an input action.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>maxDistance</code>

<blockquote>is measured in meters from meters from the player’s camera. Keep in mind that in 3rd person the camera is a bit further away, so make sure the distance you set works well in both modes.</blockquote>

<h2>Advanced custom hints</h2>

<p>The</p>

<code>PointerEvents</code>

<p>component easily adds UI hints when the player’s cursor starts hovering over an entity. It’s generally a good thing that hints behave consistently with what players are used to seeing in other Decentraland scenes. However, in some cases you might want to signal that something is interactive in a custom way. For example, you could play a subtle sound when the player starts hovering over the entity. You could also show a glowing highlight around the entity while hovering, and hide it when no longer hovering. It could also be used for specific gameplay mechanics.</p>

<p>Use the</p>

<code>inputSystem.isTriggered()</code>

<p>function together with the</p>

<code>PointerEventType.PET_HOVER_ENTER</code>

<p>and</p>

<code>PointerEventType.PET_HOVER_LEAVE</code>

<p>events to carry out custom behaviors whenever the player’s cursor starts pointing at the entity’s collider, and whenever the cursor stops pointing at it.</p>

<p>The example below enlarges entities to a size of</p>

<em>1.5</em>

<p>when the cursor starts pointing at their collider, and sets them back at a size of</p>

<em>1</em>

<p>when the cursor leaves them.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

<h2>Data from input action</h2>

<p>Fetch data from an input action, such as the button that was pressed, the entity that was hit, the direction and length of the ray, etc. See (https://docs.decentraland.org/creator/development-guide/sdk7/click-events/#data-from-an-input-action) for a description of all of the data available.</p>

<p>To fetch this data, use</p>

<code>inputSystem.getInputCommand</code>

<p>. This function returns the full data structure with data about the input event.</p>

<p>If there was no input action that matches the query, then</p>

<code>inputSystem.getInputCommand</code>

<p>returns undefined. Make sure that you handle this scenario in your logic.</p>

<h3>Max click distance</h3>

<p>To enforce a maximum distance, so that an entity is only clickable at close range, fetch</p>

<code>hit.length</code>

<p>property of the event data.</p>

<strong>📔 Note</strong>

<blockquote>: If you ignore any events that are far away, make sure you set the</blockquote>

<code>maxDistance</code>

<blockquote>parameter on the</blockquote>

<code>PointerEvents</code>

<blockquote>component to behave consistently.</blockquote>

<h3>Different meshes inside a model</h3>

<p>Often,</p>

<em>.glTF</em>

<p>3D models are made up of multiple meshes, that each have an individual internal name. All button events events include the information of what specific mesh was clicked, so you can use this information to trigger different click behaviors in each case.</p>

<p>To see how the meshes inside the model are named, you must open the 3D model with an editing tool, like</p>

<p>for example.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also learn the name of the clicked mesh by logging it and reading it off console.</blockquote>

<p>You access the</p>

<code>meshName</code>

<p>property as part of the</p>

<code>hit</code>

<p>object, that’s returned by the click event.</p>

<p>In the example below we have a house model that includes a mesh named</p>

<code>firePlace</code>

<p>. We want to turn on the fireplace only when its corresponding mesh is clicked.</p>

<strong>📔 Note</strong>

<blockquote>: Every entity you want to inteact with must have both a</blockquote>

<code>PointerEvents</code>

<blockquote>and a</blockquote>

<blockquote>.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/raycasting/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entity-positioning/#attach-an-entity-to-an-avatar

<title>Set entity positions | Decentraland Documentation</title>

<strong>Set entity positions</strong>

<h1>Set entity positions</h1>

<p>You can set the</p>

<em>position</em>

<p>,</p>

<em>rotation</em>

<p>and</p>

<em>scale</em>

<p>of any entity by using the</p>

<code>Transform</code>

<p>component. This can be used on any entity in the 3D space, affecting where the entitiy is rendered. This includes primitive shapes (cube, sphere, plane, etc), 3D text shapes, NFT shapes, and 3D models (</p>

<code>GltfContainer</code>

<p>).</p>

<h2>Editor UI</h2>

<p>When dragging entities via the Inspector, in the</p>

<p>, you are changing the values in the entity’s Transform implicitly. By changing the position, rotation or scale of an entity, this changes the data in that entity’s Transform component.</p>

<h2>Code essentials</h2>

<p>To move, rotate or resize an entity in your scene over a period of time, change the values on this component incrementally, frame by frame. See</p>

<p>for more details and best practices.</p>

<strong>📔 Note</strong>

<p>:</p>

<code>Vector3</code>

<p>and</p>

<code>Quaternion</code>

<p>must be imported via</p>

<code>import { Vector3, Quaternion } from "@dcl/sdk/math"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Position</h2>

<code>position</code>

<p>is a</p>

<em>3D vector</em>

<p>, it sets the position of the entity’s center on all three axes,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>, and</p>

<em>z</em>

<p>. See</p>

<p>for more details.</p>

<p>When setting a position, keep the following considerations in mind:</p>

<p>The numbers in a position vector represent</p>

<em>meters</em>

<p>(unless the entity is a child of a scaled entity).</p>

<p>A scene that is made up of a single parcel measures 16m x 16m. The center of the scene (at ground level) is at</p>

<code>x:8, y:0, z:8</code>

<p>. If the scene is made up of multiple parcels, then the center will vary depending on their arrangement.</p>

<code>x:0, y:0, z:0</code>

<p>refers to the</p>

<em>South-West</em>

<p>corner of the scene’s base parcel, at ground level.</p>

<p>Tip: When viewing a scene preview, a compass appears in the (0,0,0) point of the scene with labels for each axis as reference.</p>

<p>Note: You can change the base parcel of a scene by editing the</p>

<code>base</code>

<p>attribute of</p>

<em>scene.json</em>

<p>.</p>

<p>To better orient yourself, use your</p>

<em>left</em>

<p>hand:</p>

<li>your index finger (pointing forward) is the</li>

<em>z</em>

<li>axis</li>

<li>your middle finger (pointing sideways) is the</li>

<em>x</em>

<li>axis</li>

<li>your thumb (pointing up) is the</li>

<em>y</em>

<li>axis.</li>

<p>If an entity is a child of another, then</p>

<code>x:0, y:0, z:0</code>

<p>refers to the center of its parent entity, wherever it is in the scene.</p>

<p>Every entity in your scene must be positioned within the bounds of the parcels it occupies at all times. If an entity leaves these boundaries, it will raise an error.</p>

<p>Tip: When viewing a scene in preview mode, entities that are out of bounds are highlighted in</p>

<em>red</em>

<p>.</p>

<p>Your scene is also limited in height. The more parcels that make up the scene, the higher you’re allowed to build. See</p>

<p>for more details.</p>

<h2>Rotation</h2>

<code>rotation</code>

<p>is stored as a</p>

<em>quaternion</em>

<p>, a system of four numbers,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>,</p>

<em>z</em>

<p>and</p>

<em>w</em>

<p>. Each of these numbers goes from 0 to 1. See</p>

<p>for more details.</p>

<p>You can also set the rotation field with</p>

<em>Euler</em>

<p>, the more common</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>notation with numbers that go from 0 to 360 that most people are familiar with. To use Euler angles, use one of the following notations:</p>

<p>When using a</p>

<em>3D vector</em>

<p>to represent Euler angles,</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>represent the rotation in that axis, measured in degrees. A full turn requires 360 degrees.</p>

<p>When you retrieve the rotation of an entity, it returns a quaternion by default. To obtain the rotation expressed as in Euler angles, use</p>

<code>.toEuler()</code>

<p>:</p>

<h2>Face the player</h2>

<p>Add a</p>

<em>Billboard</em>

<p>component to an entity so that it always rotates to face the player.</p>

<p>Billboards were a common technique used in 3D games of the 90s, where most entities were 2D planes that always faced the player. The same idea can also be used to rotate a 3D model.</p>

<p>You can configure how the billboard behaves with the following parameters:</p>

<code>billboardMode</code>

<li>: Uses a value of the</li>

<code>BillboardMode</code>

<li>to set its behavior:</li>

<code>BillboardMode.BM_ALL</code>

<li>: The entity rotates to face the player on all of its rotation axis. If the player is high above the entity, the entity will face up.</li>

<code>BillboardMode.BM_NONE</code>

<li>: The entity won’t rotate at all.</li>

<code>BillboardMode.BM_X</code>

<li>: The entity has its</li>

<em>x</em>

<li>rotation axis fixed.</li>

<code>BillboardMode.BM_Y</code>

<li>: The entity has its</li>

<em>y</em>

<li>rotation axis fixed. It only rotates left and right, not up and down. It stays perpendicular to the ground if the player is above or below the entity.</li>

<code>BillboardMode.BM_Z</code>

<li>: The entity has its</li>

<em>z</em>

<li>rotation axis fixed.</li>

<strong>💡 Tip</strong>

<blockquote>: Billboards are very handy to add to</blockquote>

<em>text</em>

<blockquote>entities, since it makes them always legible.</blockquote>

<p>The</p>

<code>rotation</code>

<p>value of the entity’s</p>

<code>Transform</code>

<p>component doesn’t change as the billboard follows players around.</p>

<p>If an entity has both a</p>

<code>Billboard</code>

<p>component and</p>

<code>Transform</code>

<p>component with</p>

<code>rotation</code>

<p>values, players will see the entity rotating as a billboard. If the billboard doesn’t affect all axis, the remaining axis will be rotated according to the</p>

<code>Transform</code>

<p>component.</p>

<strong>📔 Note</strong>

<blockquote>: If there are multiple players present at the same time, each will see the entities with billboard mode facing them. Billboard rotations are calculated locally for each player, and don’t affect what others see.</blockquote>

<h2>Face a set of coordinates</h2>

<p>For entity A to look at entity B:</p>

<code>1) Subtract the position of entity A from entity B to get a vector that describes the distance between them.

2) Normalize that vector, so it has a length of 1, maintaining its direction.

3) Use `Quaternion.lookRotation` to get a Quaternion rotation that describes rotating in that direction.

4) Set that Quaternion as the rotation of entity A</code>

<h2>Scale</h2>

<code>scale</code>

<p>is also a</p>

<em>3D vector</em>

<p>, stored as a</p>

<code>Vector3</code>

<p>object, including the scale factor on the</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>axis. The shape of the entity scaled accordingly, whether it’s a primitive or a 3D model.</p>

<p>The default scale is 1, so assign a value larger to 1 to stretch an entity or smaller than 1 to shrink it.</p>

<h2>Inherit transformations from parent</h2>

<p>When an entity is nested inside another, the child entities inherit components from the parents. This means that if a parent entity is positioned, scaled or rotated, its children are also affected. The position, rotation and scale values of children entities don’t override those of the parents, instead these are compounded.</p>

<p>You assign an entity to be parent of another by setting the</p>

<code>parent</code>

<p>field on the child entity’s</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity is scaled, all position values of its children are also scaled.</p>

<p>In this example, the child entity will be scaled down to 0.5, since its parent has that scale. The child entity’s position will also be relative to its parent. We have to add the parent’s position plus that of the child. In this case, since the parent is scaled to half its size, the transformation of the child is also scaled down proportionally. In absolute terms, the child is positioned at</p>

<code>{ x: 3, y: 1.5, z: 1 }</code>

<p>. If the parent had a</p>

<code>rotation</code>

<p>, this would also affect the child’s final position, as it changes the axis in which the child is shifted.</p>

<p>If a child entity has no</p>

<code>position</code>

<p>on its Transform, the default is</p>

<code>0,0,0</code>

<p>, which will leave it positioned at the same position as its parent.</p>

<p>You can use an invisible entity with no shape component as a parent, to wrap a set of other entities. This entity won’t be visible in the rendered scene, but can be used to group its children and apply a transform to all of them.</p>

<h2>Attach an entity to an avatar</h2>

<p>To fix an entity’s position to an avatar, add an</p>

<code>AvatarAttach</code>

<p>component to the entity.</p>

<p>You can pick different anchor points on the avatar, most of these points are linked to the player’s armature and follow the player’s animations. For example, when using the right hand anchor point the attached entity will move when the avatar waves or swings their arms while running, just as if the player was holding the entity in their hand.</p>

<p>When creating an</p>

<code>AvatarAttach</code>

<p>component, pass an object with the following data:</p>

<code>avatarId</code>

<li>:</li>

<em>Optional</em>

<li>The ID of the player to attach to. This is the same as the player’s Ethereum address, for those players connected with an Ethereum wallet. If not speccified, it attaches the entity to the local player’s avatar.</li>

<code>anchorPointId</code>

<li>: What anchor point on the avatar skeleton to attach the entity, using a value from the enum</li>

<code>AvatarAnchorPointType</code>

<li>.</li>

<p>The following anchor points are available on the player:</p>

<code>AvatarAnchorPointType.AAPT_NAME_TAG</code>

<p>: Floats right above the player’s name tag, isn’t affected by the player’s animations.</p>

<p>Note: The name tag height is dynamically adjusted based on the height of the wearables a player has on. So a player wearing a tall hat will have their name tag a little bit higher than others.</p>

<code>AvatarAnchorPointType.AAPT_POSITION</code>

<p>: The player’s overall position.</p>

<code>AvatarAnchorPointType.AAPT_RIGHT_HAND</code>

<p>: Is fixed on the player’s right hand</p>

<code>AvatarAnchorPointType.AAPT_LEFT_HAND</code>

<p>: Is fixed on the player’s left hand</p>

<p>Entity rendering is locally determined on each instance of the scene. Attaching an entity on one player doesn’t make it visible to other players who are seeing that player. If an entity is attached to the default local player, each player will experience the entity as attached to their own avatar.</p>

<strong>📔 Note</strong>

<blockquote>: Entities attached to an avatar must stay within scene bounds to be rendered. If a player walks out of your scene, any attached entities stop being rendered until the player walks back in. Smart wearables don’t have this limitation.</blockquote>

<p>The</p>

<code>AvatarAttach</code>

<p>component overwrites the</p>

<code>Transform</code>

<p>component. A single entity can have both an</p>

<code>AvatarAttach</code>

<p>and a</p>

<code>Transform</code>

<p>component at the same time but the values on the</p>

<code>Transform</code>

<p>component are ignored.</p>

<p>If you need to position an entity with an offset from the anchor point on the avatar, or a different rotation or scale, attach a parent entity to the anchor point. You can then set the visible model on a child entity to that parent, and give this child its own Transform component to describe its shifts from the anchor point.</p>

<strong>📔 Note</strong>

<blockquote>: If the attached entity has colliders, these colliders could block the player’s movement. Consider dissabling the physics layer of the entity’s colliders. See</blockquote>

<h3>Obtain an avatarId</h3>

<p>To attach an entity to the avatar of another player, you must provide the user’s ID in the field</p>

<code>avatarId</code>

<p>. There are</p>

<p>to obtain this data.</p>

<strong>📔 Note</strong>

<blockquote>: For those players connected with an Ethereum wallet, their</blockquote>

<code>userId</code>

<blockquote>is the same as their Ethereum address.</blockquote>

<p>Fetch the</p>

<code>userId</code>

<p>for all other nearby players via</p>

<code>getConnectedPlayers()</code>

<p>Using it together with</p>

<code>AvatarAttach</code>

<p>, you could use the following code to add a cube floating over the head of every other player in the scene:</p>

<p>See other ways to fetch other user’s IDs in</p>

<p>.</p>

<h2>Scene boundaries</h2>

<p>All entities in your scene must fit within the scene boundaries, as what’s outside those boundaries is parcels of land that are owned by other players.</p>

<p>When running a preview of your scene, any entities outside the scene’s parcels are colored red and their colliders are removed. When deployed to Decentraland, any entities outside the parcels will not be rendered at all by the engine.</p>

<p>The position of entities in your scene is constantly being checked as they move, if an entity leaves the scene and then returns it will be removed and then rendered normally again.</p>

<p>A grid on the scene’s ground shows the limits of the scene, which by default rage from 0 to 16 on the</p>

<em>x</em>

<p>and</p>

<em>z</em>

<p>axis, and up to 20 on the</p>

<em>y</em>

<p>axis. You’re free to place entities underground, below 0 on the</p>

<em>y</em>

<p>axis.</p>

<strong>💡 Tip</strong>

<blockquote>: If your scene needs more parcels, you can add them in the project’s</blockquote>

<code>scene.json</code>

<blockquote>file. See</blockquote>

<blockquote>for instructions. Once added, you should see the grid extend to cover the additional parcels.</blockquote>

<p>It’s important to note that the</p>

<em>entire</em>

<p>3D model must be within the scene’s bounds. This includes the model’s</p>

<em>bounding box</em>

<p>. Some 3D models may have bounding boxes that unnecessarily extend beyond the meshes themselves, and it can sometimes be tricky to tell when this happens. When an entity extends beyond the scene’s boundaries, in the preview you’ll see a cube that marks these bounding boxes. The entire cube must fit within your scene.</p>

<p>If an entity’s cube extends beyond the shape of its meshes, you might need to edit the 3D model in an external editor to reduce these margins, or to</p>

<em>bake</em>

<p>the rotation and scale of the meshes in the model.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/performance-optimization/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/event-listeners/

<title>Event listeners | Decentraland Documentation</title>

<strong>Event listeners</strong>

<h1>Event listeners</h1>

<p>There are several events that the scene can subscribe to, to know the actions of the player while in or near the scene.</p>

<p>For button and click events performed by the player, see</p>

<p>.</p>

<h2>Player connects or disconnects</h2>

<p>Get the full list of currently connected players from</p>

<code>getConnectedPlayers</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerConnectedObservable</code>

<blockquote>and</blockquote>

<code>onPlayerDisconnectedObservable</code>

<blockquote>events are deprecated on SDK 7.x. Instead, track the list of connected players, from</blockquote>

<code>getConnectedPlayers()</code>

<blockquote>.</blockquote>

<p>Whenever another player starts or stops being rendered by the local engine, this creates an event you can listen to. Players may or may not be standing on the same scene as you, but must be within visual range (not necessarily in sight). The</p>

<code>onPlayerConnectedObservable</code>

<p>detects both when a player newly connects nearby or comes close enough to be in visual range, likewise the</p>

<code>onPlayerDisconnectedObservable</code>

<p>detects when a player ends their session or or walks far away.</p>

<p>Keep in mind that if other players are already being rendered in the surroundings before the player has loaded your scene, this event won’t notify the newly loaded scene of the already existing players. If you need to keep track of all current players, you can query for existing players upon scene loading, and then listen to this event for updates.</p>

<h2>Player enters or leaves scene</h2>

<p>Whenever an avatar steps inside or out of the parcels of land that make up your scene, or teleports in or out, this creates an event you can listen to. This event is triggered by all avatars, including the player’s.</p>

<strong>📔 Note</strong>

<blockquote>: This event only responds to players that are currently being rendered locally. In large scenes where the scene size exceeds the visual range, players entering in the opposite corner may not be registered. If the number of players in the region exceeds the capabilities of an island on Decentraland servers, players that are not sharing a same island aren’t visible and are not tracked by these events either.</blockquote>

<h4>Only current player</h4>

<p>You can filter out the triggered events to only react to the player’s avatar, rather than other avatars that may be around.</p>

<p>This example first obtains the player’s id, then subscribes to the events and compares the</p>

<code>userId</code>

<p>returned by the event to that of the player.</p>

<h4>Query all players in scene</h4>

<p>You can also get the full list of players who are currently on your scene and being rendered by calling</p>

<code>getPlayersInScene()</code>

<p>.</p>

<h2>Player changes camera mode</h2>

<p>Knowing the camera mode can be very useful to fine-tune the mechanics of your scene to better adjust to what’s more comfortable using this mode. For example, small targets are harder to click when on 3rd person.</p>

<p>The following system regularly checks the player’s camera mode:</p>

<p>See</p>

<p>.</p>

<h2>Player plays animation</h2>

<p>Whenever the player plays an emote (dance, clap, wave, etc), you can detect this event.</p>

<p>The event includes the following information:</p>

<li>expressionId: Name of the emote performed (ie:</li>

<em>wave</em>

<li>,</li>

<em>clap</em>

<li>,</li>

<em>kiss</em>

<li>)</li>

<strong>📔 Note</strong>

<blockquote>: This event is triggered any time the player makes an emote and the scene is loaded. The player could be standing in a nearby scene when this happens.</blockquote>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerExpressionObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<h2>Player clicks on another player</h2>

<p>Whenever the player clicks on another player, you can detect an event.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPlayerClickedObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<strong>📔 Note</strong>

<blockquote>: Both the player performing the click and the player being clicked must be standing within the parcels of the scene. This listener only detects events of the current player clicking on other players, not those of clicks performed by other players.</blockquote>

<p>The event includes the following data:</p>

<code>userId</code>

<li>: The id of the clicked player</li>

<code>ray</code>

<li>: Data about the ray traced by the click</li>

<code>direction</code>

<li>:</li>

<em>Vector3</em>

<li>A normalized Vector3 that represents the direction from the point of origin of the click to the hit point of the click.</li>

<code>distance</code>

<li>:</li>

<em>number</em>

<li>The distance in meters from the point of origin to the hit point.</li>

<code>origin</code>

<li>:</li>

<em>Vector3</em>

<li>The point of origin of the click, the position of the player who did the click, relative to the scene.</li>

<strong>💡 Tip</strong>

<blockquote>: The default behavior of clicking on another player is opening the player passport, where you can see additional information about that player, add them as a friend, etc. You can disable the opening of this UI so that it doesn’t get in the way of the experience you want to build by adding an</blockquote>

<blockquote>.</blockquote>

<h2>Player locks/unlocks cursor</h2>

<p>Players can switch between two cursor modes:</p>

<em>locked cursor</em>

<p>mode to control the camera or</p>

<em>unlocked cursor</em>

<p>mode for moving the cursor freely over the UI.</p>

<p>Players unlock the cursor by clicking the</p>

<em>Right mouse button</em>

<p>or pressing the</p>

<em>Esc</em>

<p>key, and lock the cursor back by clicking anywhere in the screen.</p>

<p>This</p>

<code>onPointerLockedStateChange</code>

<p>event is activated each time a player switches between these two modes, while near the scene.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onPointerLockedStateChange</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<strong>📔 Note</strong>

<blockquote>: This event is triggered even if the player is not standing directly inside the scene.</blockquote>

<p>The</p>

<code>locked</code>

<p>property from this event is a boolean value that is</p>

<em>true</em>

<p>when the player locks the cursor and</p>

<em>false</em>

<p>when the player unlocks the cursor.</p>

<p>This event is useful if the player needs to change cursor modes and may need a hint for how to lock/unlock the cursor.</p>

<p>This can also be used in scenes where the player is expected to react fast, but the action can take a break while the player has the cursor unlocked.</p>

<h2>Player changes profile</h2>

<p>Whenever the player makes a change to their profile, the</p>

<code>onProfileChanged</code>

<p>event is called. These changes may include putting on different wearables, changing name, description, activating portable experiences, etc.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onProfileChanged</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<p>Event data includes only the ID of the player and a version number for that avatar’s profile, according to the catalyst server. Every time a change is propagated, the version number increases by 1.</p>

<p>When this event is triggered, you can then use the</p>

<p>function to fetch the latest version of this information, including the list of wearables that the player has on. You may need to add a slight delay before you call</p>

<code>getUserData()</code>

<p>to ensure that the version this function returns is up to date.</p>

<strong>💡 Tip</strong>

<blockquote>: When testing in preview, to avoid using a random avatar, run the scene in the browser connected with your Metamask wallet. In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</blockquote>

<strong>Open in browser with Web3</strong>

<blockquote>.</blockquote>

<strong>📔 Note</strong>

<blockquote>: This event is only triggered by changes to the current player, not by changes on the profiles of other nearby players.</blockquote>

<h2>Scene finished loading</h2>

<p>When the scene finishes loading, the</p>

<code>onSceneReadyObservable</code>

<p>gets called. This works both if the player loads straight into the scene, or if the player walks up to the scene from somewhere else. When all of the content in the scene has finished its initial load, including heavy models, etc, this event is called.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onSceneReadyObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<h2>Player changes realm or island</h2>

<p>Players in decentraland exist in separate</p>

<em>realms</em>

<p>, and in separate</p>

<em>islands</em>

<p>within each realm. Players in different realms or islands cant see each other, interact or chat with each other, even if they’re standing on the same parcels.</p>

<p>Each time the player changes realms or island, the</p>

<code>onRealmChangedObservable</code>

<p>event gets called.</p>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>onRealmChangedObservable</code>

<blockquote>event is deprecated from SDK v7.x. Future versions will allow for a more</blockquote>

<blockquote>, based on regularly querying data rather than events.</blockquote>

<p>This event includes the following fields:</p>

<strong>serverName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name.</li>

<strong>room</strong>

<li>:</li>

<em>string</em>

<li>; The island name.</li>

<strong>displayName</strong>

<li>:</li>

<em>string</em>

<li>; The catalyst server name followed by a</li>

<em>-</em>

<li>and the island name. For example</li>

<code>unicorn-x011</code>

<li>.</li>

<strong>domain</strong>

<li>:</li>

<em>string</em>

<li>; The url to the catalyst server being used.</li>

<p>As players move through the map, they may switch islands to be grouped with those players who are now closest to them. Islands also shift their borders dynamically to fit a manageable group of people in each. So even if a player stands still they could be changed island as others enter and leave surrounding scenes.</p>

<p>If your scene relies on an</p>

<p>to sync changes between players in real time, then you may want to only share data between players that are grouped in a same realm+island, so it’s a good practice to change rooms in the 3rd party server whenever players change island.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/troubleshooting/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/performance-optimization/#asset-bundle-conversion

<title>Performance optimization | Decentraland Documentation</title>

<strong>Performance optimization</strong>

<h1>Performance optimization</h1>

<p>There are several aspects you can optimize in your scenes to ensure the best possible experience for players who visit them. This document covers some best practices that can make a big difference in how fast your scene loads and how smoothly it runs for players that are on it or on neighboring scenes.</p>

<p>Keep in mind that many players may be visiting Decentraland using hardware that is not built for gaming, and via the browser, which limits how much of the hardware’s processing power is available to use. The experience of visiting your scene should be smooth for everyone.</p>

<p>The Decentraland explorer enforces many optimizations at engine level. These optimizations make a big difference, but the challenge of rendering multiple user-generated experiences simultaneously in a browser is a big one. We need your help to make things run smoothly.</p>

<h2>Timing</h2>

<h4>Video playing</h4>

<p>Playing videos is one of the most expensive things for the engine to handle. If your scene includes videos, make sure that only</p>

<em>ONE</em>

<p>VideoTexture is in use at a time. You can have dozens of planes sharing the same VideoTexture without significant impact on performance, but as soon as you add a second VideoTexture, its effects on framerate become very noticeable.</p>

<p>You should also avoid having videos playing in regions where they can’t be seen. For example, if you have a screen indoors, toggle the video using a trigger area based on when the player walks in and out.</p>

<strong>💡 Tip</strong>

<blockquote>: A trick several scenes have used is to stream a single video with multiple regions that are mapped differently to different planes. Each video screen uses</blockquote>

<blockquote>to only show a distinct part of the VideoTexture. Thanks to this, it can appear that there are separate videos playing without the cost of multiple VideoTextures.</blockquote>

<strong>💡 Tip</strong>

<blockquote>: When players are standing outside your scene, VideoTextures are not updated on every frame. This helps reduce the impact for surrounding scenes. It’s nevertheless ideal only turn on the playing of any videos when players</blockquote>

<blockquote>.</blockquote>

<h4>Lazy loading</h4>

<p>If your scene is large, or has indoor areas that are not always visible, you can choose to not load the entire set of entities from the very start. Instead, load the content by region as the player visits different parts of the scene. This can significantly reduce the load time of the scene, and also the amount of textures and 3D content that the engine needs to handle on every frame.</p>

<p>For example, the main building of a museum could load from the start, but the paintings on each floor only load for each player as they visit each floor.</p>

<p>See</p>

<p>for how that might work.</p>

<p>For the best result in terms of avoiding hiccups, hide entities by switching their shape’s</p>

<code>visible</code>

<p>property to false. With this approach, you add them to the engine when creating them, but you simply don’t make their models visible.</p>

<p>An alternative is to not add the entities to the engine until needed. This may result in some hiccups when the entities appear for the first time, and they might also take a couple of seconds to become visible. The advantage of this approach is that it’s a valid way to get around the</p>

<p>. Keep in mind that the scene limitations count is for the content that is being rendered in the scene at any given time, not for the total content that could be rendered. Loading and unloading parts of the scene should allow you to work around those limitations.</p>

<strong>📔 Note</strong>

<blockquote>: Entities that are not visible but are added to the engine do count towards the scene limitations.</blockquote>

<p>You can also toggle animations on or off for entities that are far or occluded. For example, for an NPC that plays a very subtle idle animation, you could make it only play that animation when the player is at less than 20 meters away. Use a trigger area around the NPC and toggle its animations on or off accordingly.</p>

<strong>💡 Tip</strong>

<blockquote>: When an entity is far away and small enough, it’s culled by the engine. This culling helps at a drawcall level, removing entities from the engine is always better. This culling also doesn’t take occlusion by other entities into account, so entities that are not so small but hidden by a wall are still rendered.</blockquote>

<h4>Async blocks</h4>

<p>Blocks of</p>

<p>are processed in a separate thread from the rest of the scene, to prevent blocking the progress of everything else.</p>

<p>Any processes that rely on responses from asynchronous services, such as</p>

<code>getPlayerData()</code>

<p>or</p>

<code>getRealm()</code>

<p>should always run in async blocks, as they otherwise block the rest of the scene’s loading while waiting for a response. The same applies to any calls to third party servers.</p>

<p>Note that the scene will be considered fully loaded when everything that isn’t async is done. Async processes might still be running when the player enters the scene. Avoid situations where an async process results in the loading of an entity that could potentially get the player stuck inside of its geometry.</p>

<h4>Rely on Events</h4>

<p>Try to make the scene’s logic rely on listening to</p>

<p>as much as possible, instead of running checks every frame.</p>

<p>The</p>

<code>update()</code>

<p>function in a</p>

<p>runs on every frame, 30 times per second (ideally). Avoid doing recurring checks if you can instead subscribe to an event.</p>

<p>For example, instead of constantly checking the player’s wearables, you can subscribe to the</p>

<code>onProfileChanged</code>

<p>event, and check the player’s wearables only when they’ve changed.</p>

<p>If you must use a system, avoid doing checks or adjustments on every single frame. You can include a timer as part of the update function and only run the check once per every full second, or whatever period makes sense.</p>

<h2>Optimize 3D models</h2>

<p>There are several ways in which your 3D models can be optimized to be lighter.</p>

<p>When possible, share textures across 3D models. A good practice is to use a single texture as an atlas map, shared across all models in the scene. It’s better to have 1 large shared texture of 1024x1024 pixels instead of several small ones.</p>

<p>Note: Avoid using the same image file for both the albedo texture and the normal map or the emissive map of a material. Use separate files, even if identical. Assigning a same image file to different types of texture properties may introduce unwanted visual artifacts when compressed to asset bundles.</p>

<em>.glb</em>

<p>is a compressed format, it will always weigh less than a</p>

<em>.gltf</em>

<p>. On the other hand, with</p>

<em>.gltf</em>

<p>it’s easy to share texture images by exporting textures as a separate file. You can have the best of both worlds by using the</p>

<p>, that allows you to have</p>

<em>.glb</em>

<p>models with external texture files.</p>

<p>Avoid using blended transparencies. Blended transparencies have to bypass quite a few of the rendering optimizations. If possible, favor opaque or alpha tested geometry.</p>

<p>Avoid skinned meshes. They can drag down the performance significantly.</p>

<strong>💡 Tip</strong>

<blockquote>: Read more on 3D model best practices in the [3D Modeling Section](/creator/3d-modeling/3d-models</blockquote>

<h4>Asset Bundle conversion</h4>

<p>About once a day, the Decentraland content servers run a process to compress every</p>

<em>.gltf</em>

<p>and</p>

<em>.glb</em>

<p>model in every newly deployed scene to asset bundle format. This format is</p>

<em>significantly</em>

<p>lighter, making scenes a lot faster to load and smoother to run on the browser.</p>

<strong>💡 Tip</strong>

<blockquote>: When planning an event in Decentraland, make sure you deploy your scene a day in advance, so that the models are all converted to asset bundles by then. If you don’t want to spoil the surprize before the event, you can deploy a version of your scene that includes all the final 3D models in the project folder, but where these are not visible or where their size is set to 0.</blockquote>

<strong>📔 Note</strong>

<blockquote>: If you make</blockquote>

<em>any</em>

<blockquote>change to a 3D model file, even if just a name change, it will be considered a new file, and must be converted to asset bundle format again.</blockquote>

<h2>Connectivity</h2>

<p>If your scene connects to any 3rd party servers or uses the</p>

<p>to send messages between players, there are also some things you might want to keep in mind.</p>

<li>Your scene should only have one active WebSockets connection at a time.</li>

<li>HTTP calls are funneled by the engine so that only one is handled at a time. Any additional requests are queued internally and must wait till other requests are completed. This queuing process is handled automatically, you don’t need to do anything.</li>

<li>When using the</li>

<li>to send messages between players, be mindful that all messages are sent to all other players in the server island. Avoid situations where an incoming message directly results in sending another message, as the number of messages can quickly grow exponentially when there’s a crowd in the scene.</li>

<h2>Scene UI</h2>

<p>Scene UIs can become costly to render when they are made up of many individual elements. Keep in mind that each UI element requires a separate drawcall on the engine.</p>

<strong>💡 Tip</strong>

<blockquote>: Try to merge multiple elements into one single image. For example if you have a menu with multiple text elements, it’s ideal to have the text from the tiles and any additional images baked into the background image. That saves the engine from doing one additional drawcall per frame for each text element.</blockquote>

<p>Avoid making adjustments to the UI on every frame, those are especially costly and can end up getting queued. For example, if there’s a health bar in your UI that should shrink over period of time, players would probably not notice a difference between if it updates at 10 FPS instead of at 30 FPS (on every frame). The system that updates this bar can use a brief timer that counts 100 milliseconds, and only affect the UI when this timer reaches 0.</p>

<p>Avoid having many hidden UI elements, these also have an effect on performance even if not being rendered. When possible, try to create UI components on demand.</p>

<h2>Monitor Performance</h2>

<p>The best metric to know how well a scene is performing is the FPS (Frames Per Second). In preview, you can see the current scene FPS in the debug panel. You should aim to always have 30 FPS or more.</p>

<p>In the deployed scene, you can toggle the panel that shows these metrics by writing</p>

<code>/showfps</code>

<p>into the chat window.</p>

<p>One of the main bottlenecks in a scene’s performance is usually the sending of messages between the scene’s code and the engine.</p>

<p>When you run a scene in preview, note that on the top-right corner it says “Y = Toggle Panel”. Hit Y on the keyboard to open a panel with some useful information that gets updated in real time.</p>

<p>As you interact with things that involve messages between the SDK and the engine, you’ll notice the ‘Processed Messages’ number grows. You should closely watch the ‘Pending on Queue’ number, it should always be 0 or close to 0. This tells you how many of these messages didn’t get to be processed, and got pushed to a queue. If the ‘Pending on Queue’ count starts to grow, then you’ve entered the danger zone and should think about doing more optimizations to your scene.</p>

<strong>📔 Note</strong>

<blockquote>: Don’t keep the panel open while you’re not using it, since it has a negative impact on performance.</blockquote>

<p>Keep in mind that the performance you experience in preview may differ from that in production:</p>

<li>Surrounding neighboring scenes might have a negative impact</li>

<li>The compression of the scenes’ 3D models into asset bundles can have a positive impact</li>

<li>Some players visiting your scene may be running on less powerful hardware</li>

<p>It’s always a good practice to try deploying your scene first to the</p>

<p>to do some more thorough testing.</p>

<p>Always ask players for feedback. Never take for granted that how you experience the scene is the same for everyone else.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/editor/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/debug-in-preview/#add-breakpoints-in-the-decentraland-editor

<title>Debug in preview | Decentraland Documentation</title>

<strong>Debug in preview</strong>

<h1>Debug in preview</h1>

<p>Running a preview provides some useful debugging information and tools to help you understand how the scene is rendered. The preview mode provides indicators that show parcel boundaries and the orientation of the scene.</p>

<p>If the scene can’t be compiled, you’ll just see the grid on the ground, with nothing rendered on it.</p>

<p>If this occurs, there are several places where you can look for error messages to help you understand what went wrong:</p>

<li>Check your code editor to make sure that it didn’t mark any syntax or logic errors.</li>

<li>Check the output of the command line where you ran</li>

<code>npm run start</code>

<li>Check the JavaScript console in the browser for any other error messages. For example, when using Chrome you access this through</li>

<code>View > Developer > JavaScript console</code>

<li>.</li>

<li>If you’re running a preview of a multiplayer scene that runs together with a local server, check the output of the command line window where you run the local server.</li>

<p>If an entity is located or extends beyond the limits of the scene, it will be displayed in red to indicate this, with a red bounding box to mark its boundaries. Nothing in your scene can extend beyond the scene limits. This won’t stop the scene from being rendered locally, but it will stop the offending entities form being rendered in Decentraland.</p>

<strong>💡 Tip</strong>

<blockquote>: Before you deploy your scene to the production environment, deploy it to the test environment to try it in a context that is a lot closer to production. See</blockquote>

<h2>Use the console</h2>

<p>Output messages to console (using</p>

<code>console.log()</code>

<p>). You can then view these messages as they are generated by opening the JavaScript console of your browser. For example, when using Chrome you access this through</p>

<code>View > Developer > JavaScript console</code>

<p>.</p>

<p>You can also add</p>

<code>debugger</code>

<p>commands or use the</p>

<code>sources</code>

<p>tab in the developer tools menu to add breakpoints and pause execution while you interact with the scene in real time.</p>

<p>Once you deploy the scene, you won’t be able to see the messages printed to console when you visit the scene in-world. If you need to check these messages on the deployed scene, you can turn the scene’s console messages back on adding the following parameter to the URL:</p>

<code>DEBUG_SCENE_LOG</code>

<p>.</p>

<h2>Add breakpoints in the Decentraland Editor</h2>

<p>Using the Decentraland Editor, you can add breakpoints to your scene’s code. When running a preview, whenever the code passes through these breakpoints, it pauses execution. A</p>

<strong>Debug</strong>

<p>panel opens, showing the current values of all variables at that point in time.</p>

<p>This is especially useful to validate that the data at a given point in time is what you expect. You can also modify the values of any variable manually and resume execution with the blue play button, using those new variables. This is great to test corner cases, to make sure the scene behaves as expected on every scenario, which might otherwise be a lot harder to reproduce.</p>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open VSCode in a Decentraland scene project.</li>

<li>Click on the Debugger icon on the left sidebar.</li>

<li>Click on</li>

<code>Run and Debug</code>

<li>and select</li>

<code>Decentraland</code>

<li>(this step is not necessary if your project already has a</li>

<code>.vscode/launch.json</code>

<li>file).</li>

<li>Click on</li>

<code>Run</code>

<li>. A browser should open.</li>

<li>Try setting a breakpoint and interacting with the scene in a way it will step on that line.</li>

<h2>View scene stats</h2>

<p>Open the scene’s stats by expanding the debug menu and toggling</p>

<strong>FPS Panel</strong>

<p>. This panel displays information about the renderer engine, and is updated in real time as things change.</p>

<h3>FPS</h3>

<p>The first section shows the renderer’s</p>

<em>FPS</em>

<p>(Frames Per Second). This value will tend to be lower as the scene grows in complexity, try to always keep this value above 25 FPS, to ensure a good experience for your players. The FPS will vary depending on the machine you run this in.</p>

<strong>📔 Note</strong>

<blockquote>: The renderer’s FPS is not the same as the scene’s updates of the game loop per second. The scene’s logic is capped at 30 FPS, the renderer’s FPS can go up to 60 or more.</blockquote>

<h3>Memory JS</h3>

<p>The second section displays the memory use on the browser. Always try to keep this value below 1 GB. If this value grows too much, it risks crashing the browser for players visiting your scene. Keep in mind that in production, the scene might be loaded together with other surrounding scenes and players, which can all contribute to the memory consumption.</p>

<h3>General</h3>

<p>The third section includes general information about how the scene is running. What Catalyst realm, and what Ethereum network is being used, also how many other players are around currently being rendered.</p>

<h3>Scene</h3>

<p>This section includes a lot of important stats about your scene’s rendering:</p>

<li>Processed Messages %</li>

<li>Pending on Queue</li>

<li>Poly</li>

<li>Textures</li>

<li>Materials</li>

<li>Entities</li>

<li>Meshes</li>

<li>Bodies</li>

<li>Components</li>

<p>The processed messages and message queue refer to the messages sent by your scene’s code to the engine. These are useful to know if your scene is running more operations than the engine can support. If many messages get queued up, that’s usually a bad sign.</p>

<p>The other numbers in the panel refer to the usage of resources, they display the total count of each item that’s currently being managed in memory. Compare these values to the</p>

<p>. Keep in mind that the maximum allowed number for these values is proportional to the amount of parcels in the scene. If your scene tries to render an entity that exceeds these values, for example if it has too many triangles, it risks being too heavy to run for players in the scene.</p>

<strong>📔 Note</strong>

<blockquote>: Keeping this panel open can negatively impact the frame rate and performance of your scene, so we recommend closing it while not in use.</blockquote>

<h2>Report a bug</h2>

<p>If you encounter a problem that is not with your scene, but instead with the Decentraland SDK in general, please see</p>

<p>.</p>

<h2>Dependency versions</h2>

<p>Running a Decentraland scene locally depends on two main libraries:</p>

<code>decentraland</code>

<p>(the CLI, which is installed globally on your machine) and</p>

<code>decentraland-ecs</code>

<p>, which is installed on each project folder. Make sure both of those are up to date, as any issues you’re experiencing might already be fixed in newer versions. There may also be compatibility problems when attempting to run with one of these two outdated and the other up to date. You can run the following commands to update both these libraries to the latest stable version:</p>

<code>npm i -g decentraland@latest

npm i decentraland-ecs@latest</code>

<p>If you’re using any of the</p>

<p>make sure those are also up to date, as older versions of these libraries may not be compatible with newer versions of</p>

<code>decentraland-ecs</code>

<p>.</p>

<p>The</p>

<code>decentraland-ecs</code>

<p>library has in turn a couple of internal dependencies that are installed with it: the</p>

<code>renderer</code>

<p>and the</p>

<code>kernel</code>

<p>. Each</p>

<code>decentraland-ecs</code>

<p>version is paired with its corresponding versions of both. In occasions, it may be useful to try switching versions of these dependencies independently, to better pinpoint where an issue has originated. You can force your preview to use a different version of the</p>

<code>renderer</code>

<p>or of the</p>

<code>kernel</code>

<p>by simply providing the url parameters</p>

<code>renderer-version</code>

<p>and</p>

<code>kernel-version</code>

<p>, pointing at a specific commit.</p>

<p>For example, you can run your preview with the following URL:</p>

<p>http://127.0.0.1:8000/?position=0%2C0&SCENE_DEBUG_PANEL&renderer-version=1.0.12119-20210830195045.commit-a8be53a</p>

<p>To find out what versions are available to choose from on each dependency, check the version history on the NPM pages for the</p>

<p>and for the</p>

<p>. To know what versions of these dependencies are in use by default by a specific</p>

<code>decentraland-ecs</code>

<p>version, you can run the following command, indicating the</p>

<code>decentraland-ecs</code>

<p>version you’re curious about:</p>

<code>npm info</code>

<h2>View bounding boxes</h2>

<p>While running a scene preview, open the debug menu (on the right of the minimap) and click</p>

<strong>Bounding Boxes</strong>

<p>to toggle the visualization of bounding boxes on and off.</p>

<p>Bounding boxes are displayed as thin white boxes around each mesh. Bounding boxes show the limits of the space occupied by a 3D model. Every mesh in a 3D model has its own bounding box.</p>

<p>When Decentraland’s engine checks if an entity is within the scene limits, it looks at the positions of each corner of the bounding box. Checking the corners of the bounding boxes is an engine optimization, as checking the position of each vertex in the model would be a lot more work. Ideally the bounding box shouldn’t extend beyond the visible vertexes of the model, but it may not be the case if the model wasn’t carefully built with this in mind.</p>

<p>By visualizing bounding boxes, you can debug problems with entities being reported as outside the scene limits.</p>

<h2>Lighting conditions</h2>

<p>The in-world time of day has a big impact on how 3D models look. The color of the light source changes subtly, having a bluish tint at night, and a reddish tint during sunrise and sunset. The direction of the light also moves across the sky, casting shadows in different directions.</p>

<p>Check that your scene looks good at all times of day by switching the game clock to different values. Open the settings panel, and in the</p>

<strong>General</strong>

<p>tab set the</p>

<strong>skybox time</strong>

<p>to any time you prefer. If this slider is grayed out, make sure that the</p>

<strong>Dynamic skybox</strong>

<p>option is disabled.</p>

<figcaption>In-world instructions</figcaption>

<p>Your 3D model’s materials might not look the same as they did in the modeling tool you created it with. This is to be expected, as all 3D rendering engines have subtle differences in how they deal with light and materials.</p>

<h2>Avatars and accounts</h2>

<p>To use the avatar that’s linked to your active Metamask account, with access to all of your owned wearables, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>With the CLI, you can start the preview with:</p>

<code>npm run start --web3</code>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<p>When running a preview normally, without a connected Web3 account, you’re assigned a random avatar each time you reload.</p>

<p>To use a consist guest avatar across your sessions, you can store an avatar profile by adding a</p>

<code>PLAYER</code>

<p>parameter to the URL with any string as its value. When using this, the preview will store your avatar’s settings locally on your browser, to retrieve them whenever you use the same string on the</p>

<code>PLAYER</code>

<p>parameter. For example, every time you open the preview with the URL</p>

<code>http://127.0.0.1:8000/?PLAYER=ringo</code>

<p>, you’ll have the same avatar.</p>

<h2>Connecting to Ethereum network</h2>

<p>If your scene makes use of transactions over the Ethereum network, for example if it prompts you to pay a sum in MANA to open a door, you need to run the preview in the browser with Web3.</p>

<p>In the Decentraland Editor, open the Decentraland tab and hover your mouse over it to display the three dots icon on the top-right. Click this icon and select</p>

<strong>Open in browser with Web3</strong>

<p>.</p>

<p>Alternatively, you can manually add the URL parameter</p>

<code>&ENABLE_WEB3</code>

<p>to the URL in the browser window.</p>

<h3>Using the Ethereum test network</h3>

<p>You can avoid using real currency while previewing the scene. For this, you must use the</p>

<em>Ethereum Ropsten test network</em>

<p>and transfer fake MANA instead. To use the test network you must set your Metamask Chrome extension to use the</p>

<em>Ropsten test network</em>

<p>instead of</p>

<em>Main network</em>

<p>. You must also own MANA in the Ropsten blockchain, which you can acquire for free from Decentraland.</p>

<p>Any transactions that you accept while viewing the scene in this mode will only occur in the test network and not affect the MANA balance in your real wallet.</p>

<h2>Multiplayer testing</h2>

<p>If you open a second preview window on your machine, you will enter the scene with a different avatar. The avatars on both tabs will be able to see each other and interact, although currently they might have inconsistent names and wearables on.</p>

<strong>📔 Note</strong>

<blockquote>: You can’t open multiple tabs using the same account. So if your URL has a hardcoded</blockquote>

<code>PLAYER</code>

<blockquote>parameter with the same string on multiple tabs, or you’re connecting to Metamask on more than one tab, it won’t be possible to load them all. Each simultaneous tab should load a different account.</blockquote>

<p>If the scene uses the MessageBus to send messages between players, these will work between the different tabs.</p>

<p>If the scene connects to a third party server via websockets, these connections should also work independently on each tab, as separate players.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/editor/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/libraries/manage-dependencies/

<title>Manage dependencies | Decentraland Documentation</title>

<strong>Manage dependencies</strong>

<h1>Manage dependencies</h1>

<p>A lot of times, your scene might need functionality that is already encapsulated in a reusable library. Using external libraries can make your work a lot easier.</p>

<p>You can import external libraries into a Decentraland project and then reference the systems, components, or functions described in these libraries.</p>

<p>Check the</p>

<p>to find a series of libraries, both created by the Decentraland Foundation and by community members, that solve common problems.</p>

<h2>Via the Editor</h2>

<h3>Install a dependency</h3>

<p>Make sure you’ve</p>

<p>.</p>

<li>Open your scene’s folder using Visual Studio Code.</li>

<strong>📔 Note</strong>

<blockquote>: The Visual Studio window must be at the root folder of the scene project.</blockquote>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project’s currently installed dependencies.</p>

<p>Click the</p>

<code>+</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>view.</p>

<p>Visual Studio opens an input box at the top of the screen. Provide the name of the dependency you wish to install and hit enter. The dependency is then installed to your scene. For example</p>

<code>@dcl-sdk/utils</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: If you wish to install a specific version of a dependency (and not the default latest version), you can specify this as part of the name with an</blockquote>

<code>@</code>

<blockquote>at the end. For example</blockquote>

<code>@dcl-sdk/</code>

<blockquote>.</blockquote>

<h3>Update a dependency</h3>

<p>Click the refresh icon on the header of the</p>

<strong>Dependencies</strong>

<p>section. All dependencies on the scene are updated to the versions indicated on your scene’s</p>

<code>package.json</code>

<p>file. If dependencies point to the</p>

<code>@latest</code>

<p>version, then this action installs the current latest stable release.</p>

<p>If a dependency in your scene’s</p>

<code>package.json</code>

<p>points to a specific version number, then you need to either:</p>

<p>Reinstall as a new dependency, clicking the plus sign and specifying the library name with</p>

<code>@latest</code>

<p>at the end. For example</p>

<code>@dcl-sdk/utils@latest</code>

<p>.</p>

<p>Manually change the</p>

<code>package.json</code>

<p>file so that the dependency version points to</p>

<code>@latest</code>

<p>. Then click the update icon again.</p>

<h3>Remove a dependency</h3>

<p>Hover over a dependency to see a trash icon. Press this icon to remove an unused dependency from the scene.</p>

<p>You can also click the</p>

<code>-</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>section, and then write the name of the dependency you wish to delete.</p>

<h2>Via the CLI</h2>

<h3>Install</h3>

<p>To install a library in your project folder, run</p>

<code>npm i</code>

<p>and the library name in your project’s root path. For example:</p>

<code>npm i @dcl-sdk/utils</code>

<strong>📔 Note</strong>

<blockquote>: You may need to run</blockquote>

<code>npm run start</code>

<blockquote>or</blockquote>

<code>npm run build</code>

<blockquote>after installing the library for the library’s dependencies to get installed.</blockquote>

<h3>Update</h3>

<p>If your</p>

<code>package.json</code>

<p>file lists the version of the scene as</p>

<code>@latest</code>

<p>, then run</p>

<code>npm i</code>

<p>to update all libraries to their corresponding latest versions.</p>

<p>If your</p>

<code>package.json</code>

<p>references a specific version number, you can update it by running the command to install the library, adding</p>

<code>@</code>

<p>and the version number in the end. For example:</p>

<code>npm i @dcl-sdk/</code>

<h3>Uninstall</h3>

<p>To delete a library from your scene’s dependencies run</p>

<code>npm rm</code>

<p>and the library name. For example:</p>

<code>npm rm @dcl-sdk/utils</code>

<p>It’s a good practice to remove any libraries that you’re not using. Unused libraries still occupy space in the scene, affecting the player’s experience of downloading and running your scene.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/editor/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/entities-components/#get-an-entity-by-name

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than an id, that can be referenced by components. The entity itself has no properties or methods of its own, it simply serves to group several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>Transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>MeshRenderer</code>

<p>component gives the entity a visible shape (like a cube or a sphere) when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You can also create custom components to serve your scene’s required data, for example a custom</p>

<code>health</code>

<p>could store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, Entities were</blockquote>

<em>objects</em>

<blockquote>that were instanced, and could be extended to add functions. As of version 7.0 of the SDK, entities are only an ID. This structure better fits the principles of</blockquote>

<blockquote>and can help in the scene’s performance.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough for the engine to change how the scene is rendered in the next frame.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>Components are meant to store data about their referenced entity. They can only store this data, they can’t modify this data themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<h2>Syntax for entities and components</h2>

<p>The example below shows some basic operations for declaring, and configuring basic entities and components.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, it was necessary to manually add an entity to the engine to start rendering it. As of version 7 of the SDK, entities are implicitly added to the engine as soon as they are assigned a component.</blockquote>

<p>When a component is created, it’s always assigned to a parent entity. The component’s values then affect the entity.</p>

<h2>Remove entities</h2>

<p>To remove an entity from the engine, use</p>

<code>engine.removeEntity()</code>

<p>If a removed entity has any child entities, these change their parent back to the default</p>

<code>engine.RootEntity</code>

<p>entity, which is positioned at the scene base position, with a scale of</p>

<em>1</em>

<p>.</p>

<p>To remove an entity and also all of its children (and any children of its children, recurrently), use the</p>

<code>removeEntityWithChildren()</code>

<p>helper.</p>

<strong>💡 Tip</strong>

<blockquote>: Instead of removing an entity from the engine, in some cases it might be better to make it invisible, in case you want to be able to load it again without any delay. See</blockquote>

<h3>Removing entities behind the scenes</h3>

<p>An entity is just an id that is referenced by its components. So when removing an entity you’re really removing each of the components that reference this entity. This means that if you manually remove all of the components of an entity, it will have the same effect as doing</p>

<code>engine.removeEntity()</code>

<p>.</p>

<p>Once the entity’s components are removed, that entity’s id is free to be referenced by new components as a fresh new entity.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, the child entity must have a</p>

<code>Transform</code>

<p>component. You can then set the</p>

<code>parent</code>

<p>field with a reference to the parent entity.</p>

<p>Once a parent is assigned, it can be read off the child entity from the</p>

<code>parent</code>

<p>field on its</p>

<code>Transform</code>

<p>component.</p>

<p>If a parent entity has a</p>

<code>Transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected. Any position or rotation values are added, any scale values are multiplied.</p>

<p>If either the parent or child entity doesn’t have a</p>

<code>Transform</code>

<p>component, the following default values are used.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To separate a child entity from its parent, you can assign the entity’s parent to</p>

<code>engine.RootEntity</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: When dealing with nested entities that are synced with other players, use the</blockquote>

<code>parentEntity()</code>

<blockquote>function instead of the</blockquote>

<code>parent</code>

<blockquote>entity in the Transform. See</blockquote>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique number</p>

<em>id</em>

<p>. You can retrieve a component that refers to a specific entity from the engine based on this ID.</p>

<strong>📔 Note</strong>

<blockquote>: The entity ids between</blockquote>

<em>0</em>

<blockquote>and</blockquote>

<em>511</em>

<blockquote>are reserved by the engine for fixed entities, like the player avatar, the base scene, etc.</blockquote>

<p>For example, if a player’s click or a</p>

<p>hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the Transform component of the entity that matches that id. You can also fetch any other component of that entity in the same way.</p>

<h2>Get an entity by name</h2>

<p>When using the Decentraland Editor and adding entities via the drag-and-drop inspector, each entity has a unique name. Use the</p>

<code>engine.getEntityOrNullByName()</code>

<p>function to reference one of these entities from your code. Pass the entity’s name as a string, as written on the inspector’s UI, in the tree view on the left.</p>

<strong>📔 Note</strong>

<blockquote>: Make sure you only use</blockquote>

<code>engine.getEntityOrNullByName()</code>

<blockquote>inside the</blockquote>

<code>main()</code>

<blockquote>function, in functions that run after</blockquote>

<code>main()</code>

<blockquote>, or in a system. If used outside one of those contexts, the entities created in the Editor´s inspector may not yet be instanced.</blockquote>

<p>You’re free to perform any action on an entity fetched via this method, like add or remove components, modify values of existing components, or remove the entity from the engine.</p>

<p>All the entities added via the inspector have a</p>

<code>Name</code>

<p>component, you can iterate over all of them like this:</p>

<h2>Add or replace a component</h2>

<p>Each entity can only have one component of a given kind. For example, if you attempt to assign a Transform to an entity that already has one, this will cause an error.</p>

<p>To prevent this error, you can use</p>

<code>.createOrReplace</code>

<p>instead of</p>

<code>.create</code>

<p>. This command overwrites any existing components of the same kind if they exists, otherwise it creates a new component just like</p>

<code>.create</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Since</blockquote>

<code>.createOrReplace</code>

<blockquote>runs an additional check before creating the component, it’s always more performant to use</blockquote>

<code>.create</code>

<blockquote>. If you’re sure that the entity doesn’t already have a component like the one you’re adding, use</blockquote>

<code>.create</code>

<blockquote>.</blockquote>

<h2>Access a component from an entity</h2>

<p>You can access components of an entity by using the entity’s</p>

<code>.get()</code>

<p>or the</p>

<code>getMutable()</code>

<p>functions.</p>

<p>The</p>

<code>get()</code>

<p>function fetches a read-only reference to the component. You cannot change any values from this reference of the component.</p>

<p>If you wish to change the values of the component, use the</p>

<code>getMutable()</code>

<p>function instead. If you change the values in the mutable version of the component, you’re directly affecting the entity that component belongs to.</p>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: Only use</blockquote>

<code>getMutable()</code>

<blockquote>if you’re actually going to make changes to the component’s values. Otherwise, always use</blockquote>

<code>get()</code>

<blockquote>. This practice follows the principles of</blockquote>

<blockquote>, and can significantly help in the scene’s performance.</blockquote>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getOrNull()</code>

<p>or</p>

<code>getMutableOrNull()</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Avoid using</blockquote>

<code>getOrNull()</code>

<blockquote>or</blockquote>

<code>getMutableOrNull()</code>

<blockquote>when possible, as these functions involve additional checks that and are therefore less efficient than</blockquote>

<code>.get()</code>

<blockquote>and</blockquote>

<code>getMutable()</code>

<blockquote>.</blockquote>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>get()</code>

<li>and</li>

<code>getMutable()</code>

<li>returns an error.</li>

<code>getOrNull()</code>

<li>and</li>

<code>getMutableOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, use the entity’s</p>

<code>deleteFrom()</code>

<p>method of the component type.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<strong>📔 Note</strong>

<blockquote>: To remove all the components of an entity at once, see</blockquote>

<h2>Check for a component</h2>

<p>You can check if an entity owns an instance of a certain component by using the</p>

<code>has()</code>

<p>function. This function returns</p>

<em>true</em>

<p>if the component is present, and</p>

<em>false</em>

<p>if it’s not. This can be very handy for using in conditional logic in your scene.</p>

<strong>💡 Tip</strong>

<blockquote>: You can also</blockquote>

<blockquote>to fetch a full list of components that hold a specific component, or a specific set of components. Do not iterate over all entities in the scene manually to check each with a</blockquote>

<code>has()</code>

<blockquote>, that approach is a lot less efficient.</blockquote>

<h2>Reserved entities</h2>

<p>Certain entity ids are reserved for special entities that exist in every scene. They can be accessed via the following aliases:</p>

<code>engine.RootEntity</code>

<code>engine.PlayerEntity</code>

<code>engine.CameraEntity</code>

<strong>📔 Note</strong>

<blockquote>: Avoid referring to these entities before they are initialized. To avoid this problem, refer to these entities in the</blockquote>

<code>main()</code>

<blockquote>function, or in a system.</blockquote>

<h3>The root entity</h3>

<p>All entities in the scene are children of the</p>

<code>engine.RootEntity</code>

<p>, directly or indirectly.</p>

<h3>The player entity</h3>

<p>The</p>

<code>engine.PlayerEntity</code>

<p>entity represents the player’s avatar. Fetch the player’s</p>

<code>Transform</code>

<p>component to get the player’s current position and rotation, see</p>

<p>. You can also modify this Transform to move the player, see</p>

<p>.</p>

<h3>The camera entity</h3>

<p>The</p>

<code>engine.CameraEntity</code>

<p>entity represents the player’s camera.

Fetch the camera’s</p>

<code>Transform</code>

<p>component to get the camera’s position and rotation. You can also fetch the camera’s</p>

<code>CameraMode</code>

<p>component to know know if the player is using 1st or 3rd person camera mode, see</p>

<p>.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/color-types/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/text/

<title>Text shapes | Decentraland Documentation</title>

<strong>Text shapes</strong>

<h1>Text shapes</h1>

<p>Add text to a scene using the</p>

<code>TextShape</code>

<p>component. This text sits in a position</p>

<p>Text in Decentraland supports all</p>

<em>utf8</em>

<p>characters, this includes oriental and special characters.</p>

<strong>📔 Note</strong>

<blockquote>: This component is useful for in-world labels and UIs that exist in the 3D space of the scene, not for the player’s 2D HUD UI.</blockquote>

<p>The</p>

<code>TextShape</code>

<p>component is mutually exclusive with other shape components like primitive shapes and glTF 3D models, see</p>

<p>for more details.</p>

<p>To add text as a label on an existing entity, you create a second entity that has the</p>

<code>TextShape</code>

<p>component and set it as a child of the other entity.</p>

<h2>Create a text component</h2>

<p>The following example shows how to create a</p>

<code>TextShape</code>

<p>component and add it to an entity.</p>

<strong>📔 Note</strong>

<blockquote>: If the entity with the text component is a child of another entity, then it will be affected by the parent’s scale. If the parent is scaled unevenly along its axis, this will result in the text also being stretched or compressed.</blockquote>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>TextShape</code>

<blockquote>components aren’t clickable.</blockquote>

<code>PointerEvents</code>

<blockquote>comopnents aren’t activated when used on entites that have a</blockquote>

<code>TextShape</code>

<blockquote>component.</blockquote>

<strong>📔 Note</strong>

<p>:</p>

<code>TextShape</code>

<p>must be imported via</p>

<code>import { TextShape } from "@dcl/sdk/ecs"</code>

<p>See</p>

<p>for how to handle these easily.</p>

<h2>Change the text value</h2>

<p>When creating a new text component, you assign it a string to display. This string is stored in the</p>

<code>text</code>

<p>field.</p>

<p>If you want to change the string displayed by the component, you can do so at any time by changing the</p>

<code>text</code>

<p>field on a</p>

<p>of the component.</p>

<h2>Basic text properties</h2>

<p>The</p>

<code>TextShape</code>

<p>component has several properties that can be set to style the text. Below are some of the most common:</p>

<code>font</code>

<li>: Value from the enum</li>

<code>Font</code>

<li>.</li>

<code>fontSize</code>

<li>:</li>

<em>number</em>

<li>. An entiy with font 10 is 1 meter tall.</li>

<code>textColor</code>

<li>:</li>

<em>Color4</em>

<li>object.</li>

<em>Color4</em>

<li>objects store an</li>

<em>RBG</em>

<li>color as three numbers from 0 to 1, plus</li>

<em>alpha</em>

<li>for transparency. See</li>

<li>for more details.</li>

<h2>Fonts</h2>

<p>Text shapes can use fonts from the enum</p>

<code>Font</code>

<p>. This enum currently includes the following fonts:</p>

<code>Font.FSansSerif</code>

<code>Font.FSerif</code>

<code>Font.FMonospace</code>

<p>By default uses it uses</p>

<code>Font.FSansSerif</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Currently, all fonts are rendered as Sans Serif. This is a known issue to fix in the future.</blockquote>

<strong>💡 Tip</strong>

<blockquote>: If using VS studio or some other IDE, type</blockquote>

<code>Font.</code>

<blockquote>and you should see a list of suggestions with all of the available fonts.</blockquote>

<h2>Text alignment and padding properties</h2>

<p>The</p>

<code>TextShape</code>

<p>component creates a text box that has a size, padding, etc.</p>

<code>textAlign</code>

<li>: Select a value from the</li>

<code>TextAlignMode</code>

<li>enum. Possible values include all combinations between vertical (</li>

<em>top</em>

<li>,</li>

<em>bottom</em>

<li>,</li>

<em>center</em>

<li>) and horizontal (</li>

<em>left</em>

<li>,</li>

<em>right</em>

<li>,</li>

<em>center</em>

<li>) alignment.</li>

<code>width</code>

<li>:</li>

<em>number</em>

<li>. The width of the text box.</li>

<code>height</code>

<li>:</li>

<em>number</em>

<li>. The height of the text box.</li>

<code>paddingTop</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>paddingRight</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>paddingBottom</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>paddingLeft</code>

<li>:</li>

<em>number</em>

<li>. Space between the text and the outline of the text box.</li>

<code>zIndex</code>

<li>:</li>

<em>number</em>

<li>. Useful for when multiple flat entities occupy the same space, it determines which one to show in front.</li>

<strong>💡 Tip</strong>

<blockquote>: If a text is meant to float in space, it’s a good idea to add a</blockquote>

<code>Billboard</code>

<blockquote>so that the text rotates to always face the player and be legible.</blockquote>

<h2>Text shadow and outline properties</h2>

<p>The text has no shadow by default, but you can set the following values to give it a shadow-like effect.</p>

<code>shadowBlur</code>

<li>:</li>

<em>number</em>

<code>shadowOffsetX</code>

<li>:</li>

<em>number</em>

<code>shadowOffsetY</code>

<li>:</li>

<em>number</em>

<code>shadowColor</code>

<li>:</li>

<em>Color3</em>

<li>object.</li>

<em>Color3</em>

<li>objects store an</li>

<em>RBG</em>

<li>color as three numbers from 0 to 1.</li>

<p>The letters in the text can also have an outline in a different color surrounding its perimeter.</p>

<code>outlineWidth</code>

<li>:</li>

<em>number</em>

<li>. How many pixels wide the text outline will be, in all directions. By default</li>

<em>0</em>

<li>, which makes it invisible.</li>

<code>outlineColor</code>

<li>:</li>

<em>Color3</em>

<li>object.</li>

<em>Color3</em>

<li>objects store an</li>

<em>RBG</em>

<li>color as three numbers from 0 to 1.</li>

<h2>Multiple lines</h2>

<p>If you want your text to span multiple lines, use</p>

<code>\n</code>

<p>as part of the string. The following example has two separate lines of text:</p>

<p>You can also set up the following properties related to texts with multiple lines:</p>

<code>lineCount</code>

<li>:</li>

<em>number</em>

<li>. How many lines of text to fit into the textbox as a maximum. By default</li>

<em>1</em>

<li>. The</li>

<code>textWrapping</code>

<li>property must be</li>

<em>true</em>

<li>to use more than one line.</li>

<code>lineSpacing</code>

<li>:</li>

<em>string</em>

<li>. How much space between each line, expressed as a string. For example “30px”.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/color-types/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/onscreen-ui/

<title>2D UI | Decentraland Documentation</title>

<strong>2D UI</strong>

<h1>2D UI</h1>

<p>You can build a UI for your scene, to be displayed in the screen’s fixed 2D space, instead of in the 3D world space.</p>

<p>UI elements are only visible when the player is standing inside the scene’s LAND parcels, as neighboring scenes might have their own UI to display. Parts of the UI can also be triggered to open when certain events occur in the world-space, for example if the player clicks on a specific place.</p>

<p>Build a UI by defining a structure of</p>

<code>UIEntity</code>

<p>in JSX. The syntax used for UIs is very similar to that of</p>

<p>(a very popular javascript-based library for building web UIs).</p>

<strong>📔 Note</strong>

<blockquote>: You can only define JSX UI syntax in files that have a</blockquote>

<code>.tsx</code>

<blockquote>extension.</blockquote>

<code>.tsx</code>

<blockquote>files support everything that</blockquote>

<code>.ts</code>

<blockquote>files support, plus UI syntax. We recommend creating a</blockquote>

<code>.ui.tsx</code>

<blockquote>file and defining your UI there.</blockquote>

<p>A simple UI with static elements can look a lot like HTML, but when you add dynamic elements that respond to a change in state, you can do things that are a lot more powerful.</p>

<p>The default Decentraland explorer UI includes a chat widget, a map, and other elements. These UI elements are always displayed on the top layer, above any scene-specific UI. So if your scene has UI elements that occupy the same screen space as these, they will be occluded.</p>

<p>See</p>

<p>for tips on how to design the look and feel of your UI.</p>

<p>When the player clicks the</p>

<em>close UI</em>

<p>button, on the bottom-right corner of the screen, all UI elements go away.</p>

<h2>Render a UI</h2>

<p>To display a UI in your scene, use the</p>

<code>ReactEcsRenderer.setUiRenderer()</code>

<p>function, passing it a valid structure of entities, described in JSX.</p>

<p>Each entity is defined as an HTML-like node, with properties for each of its components.</p>

<p>You can also define an entity structure and render it, all in one same command.</p>

<strong>📔 Note</strong>

<blockquote>: All of your UI elements need to be nested into the same structure, and have one single parent at the root of the structure. You can only call</blockquote>

<code>ReactEcsRenderer.setUiRenderer()</code>

<blockquote>once in the scene.</blockquote>

<h2>UI Entities</h2>

<p>Each element in the UI must be defined as a separate</p>

<code>UiEntity</code>

<p>, wether it’s an image, text, an invisible alignment box, etc. Just like in the scene’s 3D space, each</p>

<code>UiEntity</code>

<p>has its own components to give it a position, color, etc.</p>

<p>The React-like syntax allows you to specify each component as a property within the</p>

<code>UiEntity</code>

<p>, this makes the code shorter and more readable.</p>

<p>The components used in a</p>

<code>UiEntity</code>

<p>are different from those used in regular entities. You cannot apply a UI component to a regular entity, nor a regular component to a UI entity.</p>

<p>The following components are available to use in the UI:</p>

<code>uiTransform</code>

<code>uiBackground</code>

<code>uiText</code>

<code>onClick</code>

<p>Like with HTML tags, you can define components as self-closing or nest one within another.</p>

<p>A JSX statement can only have one parent-level entity. You can define as many other entities as you want, but they must all fit inside a structure with one single parent at the top.</p>

<h2>Multiple UI modules</h2>

<p>Your scene should have a single call to the</p>

<code>ReactEcsRenderer.setUiRenderer()</code>

<p>function. To define your UI via a series of separate modules in different files, you can pass an array to this function listing each section. This is also useful when combining UI modules from a library (like the</p>

<p>) with custom UI.:</p>

<p>Below is a more complete example:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/meshes/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/meshes/#best-practices-for-geometries

<title>Meshes | Decentraland Documentation</title>

<strong>Meshes</strong>

<h1>Meshes</h1>

<p>3D models have a</p>

<em>mesh</em>

<p>composed of triangular</p>

<em>faces</em>

<p>. These faces meet each other on</p>

<em>edges</em>

<p>(the lines along which they touch) and</p>

<em>vertices</em>

<p>(the points where their corners join).</p>

<strong>Space Limitations</strong>

<p>All 3D models in your scene must fit within the limits of its parcels. If they extend beyond these limits when running a preview, the meshes will be marked in red by a bounding box.</p>

<p>For performance reasons, Decentraland checks the positions of the</p>

<em>bounding boxes</em>

<p>around meshes (not the vertices in the meshes themselves) to verify that they are within the scene’s limits.</p>

<p>If you have a model that has all of its vertices neatly inside the scene area, but that has large bounding boxes that are mostly empty and extend beyond the scene limits, the entire model will be marked as outside the scene limits.</p>

<p>To avoid this problem, you can clean up your 3D models to reset positions and rotations of meshes so that bounding boxes don’t extend beyond the meshes they wrap.</p>

<em>On Blender you can do that by selecting the objects, pressing Ctrl+A and then Apply “All transforms”.</em>

<strong>Bounding Boxes</strong>

<p>Every mesh has a bounding box, that surrounds the limits of the shape. Keep in mind that the bounding boxes of all 3D models in a Decentraland scene must fit inside the scene limits, see</p>

<p>for more details.</p>

<p>To make a 3D model more usable inside Decentraland, make sure that its bounding boxes don’t extend beyond the model more than necessary.</p>

<p>For example, be cautious when rotating a sub-mesh near the border of your model. Since bounding boxes are cubes, even if the mesh is round, the corners of its bounding box might end up sticking out after rotating it 45°.</p>

<p>We recommend that you bake the rotation and scale of every mesh in the model, to make sure that there are no unwanted bounding boxes extending beyond the size they need to have.</p>

<strong>Triangle Limitations</strong>

<p>Because Decentraland is an open world full of different scenes and objects that are being downloaded on the fly (in the same 3D space) is important to optimize our meshes in order to have a good performance while playing. In that sense, there are some scene limitations that we always need to keep in mind when it comes to meshes:</p>

<p>n represents the number of parcels that a scene occupies.</p>

<strong>Triangles:</strong>

<li>n x 10000 Total amount of triangles for all the models in the scene.</li>

<strong>Height:</strong>

<li>log2(n+1) x 20 Height in meters.</li>

<strong>File size:</strong>

<li>15 MB per parcel - 300 MB max Total size of the files uploaded to the content server. Includes 3D models and audio. Doesn’t include files that aren’t uploaded, such as node.js packages.</li>

<strong>Max file size 50 MB per file</strong>

<li>No individual file of any type in the scene can exceed 50 MB, no matter how many parcels the scene has.</li>

<p>For more information check all the scene limitations</p>

<strong>🔥Optimization Tip🔥: Add Polygon Count</strong>

<blockquote>A valuable tip is to always keep on track of the polycount of your models. To do that in blender you need to turn on statistics on the viewport overlays panel.</blockquote>

<strong>Meshes On Large Scenes</strong>

<p>When creating meshes, we should keep in mind these 2 best practices:</p>

<strong>Modularity:</strong>

<p>Break down large meshes into smaller, modular parts. For example, instead of having a single mesh for an entire building, the building could be divided into separate meshes for each wall, floor, and section of the building. This allows Unity’s frustum culling to work more effectively, as only the visible parts need to be considered for rendering.

It will also improve memory foot-print, because one mesh can be re-used several time for same object in different locations (to achieve this you will need to reference same mesh in your SDK7 scene definition or use instances instead of duplicated objects when exporting the scene from Blender).</p>

<strong>Bounding Volume</strong>

<p>: Ensure that the bounding volume of each object fits as tightly as possible. Extraneous space in the bounding volume can cause objects to be rendered when they’re not visible.</p>

<strong>What is Frustrum Culling?</strong>

<p>Frustum Culling is an optimization technique that disables the renderers (meshes) for objects that are outside the camera’s viewing area. See these 2 examples:</p>

<em>A maze-like indoor level. This normal scene view shows all visible Game Objects.</em>

<em>Regular frustum culling only renders objects within the camera’s view. This is automatic and always happens.</em>

<strong>Instancing Objects vs Duplicating Objects</strong>

<p>In Blender, duplicating an object creates a completely separate copy of the object, while instancing an object creates a duplicate that shares the same data as the original object.</p>

<p>When an object is duplicated, it creates a new object with a completely independent set of data, including all of its geometry, materials, and animations. This means that any changes made to the original object will not be reflected in the duplicate object, and vice versa.</p>

<p>On the other hand, when an object is instanced, any changes made to the original object will be reflected in all of its instances, and vice versa. This is because all of the instances share the same underlying data.</p>

<p>In terms of performance, instancing can be much more efficient than duplicating, especially when working with complex scenes or large numbers of objects. This is because instancing uses less memory than duplicating, since it doesn’t create new data for each instance. Additionally, instancing can allow Blender to optimize the rendering process by treating all of the instances as a single object, rather than rendering each duplicate separately.</p>

<p>Overall, instancing can be a powerful tool for improving performance and workflow efficiency in Blender and on your Decentraland Scene, especially when working with large, complex scenes.</p>

<p>In some cases, when duplicating objects like trees, plants, and light posts, instancing can significantly improve performance compared to duplicating them. For example, this scene has fourteen light posts, all of them are exactly the same. We know that each light post has two different textures, one for the post and another one for the light. So in this case we will have two draw calls, one per texture.</p>

<p>On Blender, when you are at the stage of cloning and positioning elements on the space, you have three options. Duplicate, Instance or Merge objects.</p>

<p>Let’s analyze what are the pros and cons of each procedure.</p>

<strong>Duplicate Objects</strong>

<th>Menu:</th>

<th>Object ‣ Duplicate Objects</th>

<td>Hotkey:</td>

<td>Shift-D</td>

<p>This will create a visually-identical copy of the selected object but they will be treated as different objects. So when you export it will have 2 draw calls per object, 2 * 14 = 28 draw calls, and a total disk usage of 320kb.</p>

<strong>Instancing Objects</strong>

<th>Panel:</th>

<th>Toolbar ‣ Tools ‣ Edit ‣ Duplicate Linked</th>

<td>Menu:</td>

<td>Object ‣ Duplicate Linked</td>

<td>Hotkey:</td>

<td>Alt-D</td>

<p>This will create a new object with all of its data linked to the original object. If you modify one of the linked objects in Edit Mode, all linked copies are modified. Transform properties still remain copies, not links, so you still can rotate, scale, and move freely without affecting the other copies.</p>

<em>When we export these models, we will still have the same number of draw calls (28). However, note that we now have only one mesh, which significantly reduces disk usage (41 kb).</em>

<em>To keep things organized you can simply instance collections in your scene, this way allows you to control all instances from one single folder and source.</em>

<strong>Mesh Naming</strong>

<p>Use meaningful names for your meshes. Name should give context of where the asset is used or to which part of the object it relates.</p>

<p>For asset naming use mix of</p>

<code>PascalCase</code>

<p>and</p>

<code>snake_case</code>

<p>, which we can call</p>

<code>PascalSnake_case</code>

<p>. Basic rules there - new word or word after separator (</p>

<code>_</code>

<p>) starts with</p>

<strong>Capital letter.</strong>

<li>Use meaningful names for your meshes</li>

<strong>Examples:</strong>

<li>🟢</li>

<strong>Prefer</strong>

<li>names -</li>

<code>Theater</code>

<li>,</li>

<code>Tram</code>

<li>🔴</li>

<strong>Avoid</strong>

<li>names -</li>

<code>Untitiled.008</code>

<li>,</li>

<code>primitive(1)</code>

<li>,</li>

<code>Cylinder.091</code>

<li>,</li>

<code>_sphere-AB</code>

<li>Use underscore</li>

<code>_</code>

<li>as a separator to bring more context to the name. Put more common things first and specifics at the end.</li>

<strong>Examples:</strong>

<li>🟢</li>

<strong>Prefer</strong>

<li>names -</li>

<code>FountainStatue</code>

<li>,</li>

<code>TheaterMainWall</code>

<li>,</li>

<code>TramWheelLeft</code>

<li>🔴</li>

<strong>Avoid</strong>

<li>names -</li>

<code>North_MainWall_Theater</code>

<li>,</li>

<code>Tram_LeftFront_Wheel</code>

<p>If there is more than one object with the same name add a number after the word:</p>

<code>FountainStatue01, FountainStatue02, etc.</code>

<strong>Tools For Creating Models</strong>

<p>There are lots of addons and externals tools that facilitate the work when creating assets to make the pipeline faster and more efficient, some of they are free and some to purchase, to name a few:</p>

<strong>Decimate</strong>

<p>This is a well known modifier that can be used to reduce the amount of tris of your mesh while keeping the surface structure of the model. While this is a very powerful tool to optimize models take into account that once the model is decimated the topology may be affected causing a bad topology (because it breaks the geometry into unpredictable pieces). In another hand, decimation will convert the quads of your mesh into triangles making it difficult to modify it after being used. In that regard</p>

<strong>decimation can be useful for static models but is not preferred for animated models.</strong>

<p>Another way to optimize your meshes using decimation is to decimate the model and then do a proper retopology. This way you can assure a more predictable result and clean topology.</p>

<p>Some retopology addons that can be useful are (some of them are paid):</p>

<strong>Simplygon:</strong>

<strong>Speedretopo:</strong>

<strong>Retopoflow:</strong>

<strong>Mirror Modifier</strong>

<p>The Mirror Modifier in Blender is a tool used for creating symmetrical models by mirroring one half of an object to any direction (X,Y,Z). It’s a great tool when you have symetrical models because it reduces the time of 3D modeling, doing UV Unwrapping (because you will need only to unwrapp one part of the model and the rest will share the same UV coordinates) and also optimize your textures avoiding wasting texture resolution on parts that are essentially mirrored.</p>

<strong>Batch Rename</strong>

<p>A very handy tool to change name conventions in an easy way is using the Batch Rename that Blender has integrated in their toolkit. To access it go to</p>

<em>Edit</em>

<p>and then</p>

<em>Batch Rename</em>

<p>.</p>

<p>Select the objects you want to change the name and just replace the default object name for the new one. This tool provides different methods and type of asset to rename so it’s very flexible to change the names also for meshes, animations, bones, etc.</p>

<strong>Best practices for geometries</strong>

<li>Be mindful of how many faces you add to your 3D models, as more faces make its rendering more demanding. See</li>

<li>for the limits imposed by a scene.</li>

<li>Make sure there are no hidden faces that can’t be seen but that add to the triangle count.</li>

<li>For shapes that should have rounded sides, set them to be</li>

<em>smooth</em>

<li>rather than adding additional faces.</li>

<li>Make sure the</li>

<em>normals</em>

<li>of all faces are facing outwards instead of inwards. If there are faces in your model that seem not to be there when you render it, this is most likely the cause.</li>

<li>Bake the rotation and scale of your meshes, so that their bounding boxes don’t extend out unnecessarily.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/3d-models/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/3d-modeling/textures/

<title>Textures | Decentraland Documentation</title>

<strong>Textures</strong>

<h1>Textures</h1>

<p>Textures are a key part of the 3D art pipeline to achieve the look and feel you want for your scene. In this section you will find everything you need to know to create your textures, limitations, nodes in Blender and optimizing them to perform as its best!</p>

<strong>Limitations</strong>

<strong>Texture Size Constraints</strong>

<p>Currently the Decentraland Explorer compress the textures at a maximun of 512px for optimization purpeses using an Asset Bundle Converter after the scene is uplaoded to the content servers. Be sure to take this limitations into account when creating your assets!</p>

<p>Another important point to take into account is that textures should be always power of two, any textures that are not following this specification may bring issues when rendering the scene.</p>

<p>Texture sizes must use width and height numbers (in pixels) that match the following numbers:</p>

<code>1, 2, 4, 8, 16, 32, 64, 128, 256, 512</code>

<p>This sequence is made up of powers of two:</p>

<code>f(x) = 2 ^ x</code>

<p>.</p>

<strong>512px is the maximum number we allow for a texture size.</strong>

<p>This is a fairly common requirement among other rendering engines, it’s there due internal optimizations of the graphics processors.</p>

<p>The width and height don’t need to have the same number, but they both need to belong to this sequence.</p>

<strong>The recommended size for textures is 512x512</strong>

<p>, we have found this to be the optimal size to be transported through domestic networks and to provide reasonable loading/quality experiences.</p>

<p>Examples of other valid sizes:</p>

<code>32x32px

64x32px

512x256px

512x512px</code>

<p>On another hand there is a limit for textures per parcel:</p>

<code>log2(n+1) x 10 Amount of textures per parcel. It includes textures imported as part of models.</code>

<strong>UVMapping</strong>

<p>UVmapping is the process of unwrapping the faces of your 3d model into a 2D coordinate that will be used later to add the different maps to your assets. It’s a key part of the creation process. Doing a correct unwrap of your models is a key factor to squeeze the resolution of your models and also it will organize your maps to be flexible for modification.</p>

<p>To know more about UV Unwrapping you can see this awesome video made by the Blender Foundation:</p>

<p>There is another great intermidiate level tutorial for unwrapping UVs made by [Blender Guru] (</p>

<p>) that explains how to unwrap a more complex model:</p>

<strong>Maps</strong>

<p>In the</p>

<p>we explained how Decentraland works with the PBR shaders. In this section we’re going to show you how each texture map modify the shader and the look and feel of the 3D object that later is going to be exported to the world.</p>

<strong>Diffuse Maps</strong>

<p>This is the base color of the object’s surface. Having a balanced color palette between your models is key to achieve a cohesive look and feel for your experience.</p>

<p>Here it is a cool free palette generator in case you need it!</p>

<strong>Coolors:</strong>

<p>Or some palette inspiration provided by awesome films:</p>

<strong>Movies in Color:</strong>

<strong>Metallic Maps</strong>

<p>In a Metallic map, the grayscale map represents the grade of metalness an object posess, being white full metallic and black non metallic. In the following example we see how the light affects the model and how interacts with the environment.</p>

<em>In the image we can see how the dark parts of the texture affect the model. The dark stripes are opaque, while the white stripe is beahving under the metallic shader properties and gray being a mixture between both.</em>

<strong>Roughness Maps</strong>

<p>In a roughness map, darker areas correspond to smoother surfaces, while brighter areas correspond to rough surfaces. This grayscale representation is used by rendering engines to determine how light should be scattered or reflected at different points on the surface.</p>

<strong>Transparent Maps</strong>

<strong>Alpha Clip</strong>

<p>Alpha Clip in Blender, when used with a texture, involves using the alpha channel of the texture to determine which parts of the material should be visible. Pixels with alpha values above a specified threshold are shown, while those below the threshold are discarded, creating a cutout effect based on the texture’s transparency information.</p>

<p>In the following example we used a material with alpha clip, using 2 textures, the diffuse color and the alpha texture in black and white connecting the color to the alpha channel.</p>

<em>As a result we can see the areas painted in black are discarted while the white area are being rendered</em>

<strong>Alpha Blend</strong>

<em>Alpha Blend</em>

<p>allows you to pick intermediate values per region.</p>

<p>Alpha Blend in Blender, when used with a texture, involves blending the transparent and opaque areas of the texture based on its alpha channel. This allows the texture to smoothly combine both visible and see-through portions, interacting naturally with the background or other objects in the scene.</p>

<em>While Alpha Clip render values being 0 or 1 (in a specific threshold) Alpha Blend interpolates the values between 0 and 1. In the example above the alpha blend material shows the complete gradient transition while the alpha clip excludes part of the texture set by the clip threshold</em>

<strong>🔥Optimization Tip🔥</strong>

<li>Take into account that transparent textures (RGB+A) are always more expensive in termns of performance that using a grayscale value for transparencies.</li>

<li>Transparency is always an expensive operation when rendering the scene. Try always to keep the transparencies at minimun and use Alpha Blend only when it’s necessary, otherwise Alpha Clip is preferred rather than Alpha Blend.</li>

<strong>Emissive Maps</strong>

<p>An emissive map is a type of texture map used to control the self-illumination or the emitted light of a surface in a 3D scene. It’s a component of the shader that determines how much light (and color of light) a particular part of a 3D model emits, independently of external light sources. Emissive maps are commonly used to simulate materials or objects that appear to emit their own light.</p>

<em>In this example we can see the use of an emissive map combined with emissive strenght in an environment that uses glow postprocessing to test approxivamtely how the emissive behavies in world.</em>

<strong>Normal Maps</strong>

<p>A normal map is a type of texture used in 3D graphics to simulate fine surface details and create the illusion of complex geometry without actually altering the underlying geometry of a model. It’s commonly used to enhance the realism of low-poly models by adding the appearance of bumps, crevices, and other surface irregularities. It also allows you to keep the object themselves lighter, as lots of details can be provided on the normal map layer instead of complex geometry.</p>

<p>To add a normal map to your material using the</p>

<em>Shader Editor</em>

<p>, you will need to connect the</p>

<strong>Normal Map</strong>

<p>node between the texture and the</p>

<em>Principled BSDF</em>

<p>shader.</p>

<strong>⚠️Important⚠️:</strong>

<blockquote>Never use a texture as albedo and normal at the same time because can create issues when rendering the scene.</blockquote>

<strong>Optimizing Textures</strong>

<p>The process of optimization textures brings a lot of benefits when rendering the scene in the explorer but also it’s a good way to keep the style of your scene consistent and more flexible in the design process. Some of these benefits are:</p>

<p>Having optimized textures in size and compression will run the scene much smoother and faster, making it faster to download and easier to render (specially for players that have a slow internet connection).</p>

<p>It reduces the amount of memory and processing power to render your experience, resulting in a better user experience for your players.</p>

<p>It saves storage from the community content servers.</p>

<p>Using</p>

<strong>Texture Atlases</strong>

<p>and/or</p>

<strong>Trim Sheets</strong>

<p>will give you more flexibility to iterate the creation of your scene and style consistensy between the objects. Using these techniques you can easily swap textures, adjust colors or patterns instead of doing it individually for each model.</p>

<p>Sharing textures across models allows to have less textures per scene, reducing the draw calls in game drastically. If you’re working with glbs (with embebbed textures) you will find an extruder in the following guidelines to extract the textures from it, redirecting the models to use the same texture.</p>

<strong>Shared Textures Between glTFs Models</strong>

<p>A wise and common practice for optimizing your scene is sharing textures and materials between models across the scene. Doing this will reduce the draw calls drastically and your Decentraland scene will run much smoother.</p>

<p>The following tool based on</p>

<strong>,</strong>

<p>offers some optimizations that will make 3D models lighter and faster to download for players in your scene.</p>

<strong>Mac:</strong>

<strong>PC:</strong>

<p>It converts .gltf format into .glb, which is binary and so occupies a lot less. It also places texture files outside the 3D model, which allows you to use the same texture on multiple models.</p>

<p>📔 Note: .glb format by default always has textures embedded in the file. The engine can’t recognize two embedded textures as the same, they need to be external files that share a same hash.</p>

<strong>How To Use GLB Texture Extractor.</strong>

<p>In this example scene, we have a simple sci-fi scene in Blender.</p>

<p>This scene contains the base environment for the static models but there are also two other assets, a droid and a spaceship that we want to export separately in order to move them later by code, so they can interact with the players. In this case we used 4 textures (one for the floor, one atlas color map for most of the assets, one emissive and a UI sci-fi texture for the panels)</p>

<p>Once we export all of these assets to the models folder we have 3 models, the environment static scene, the spaceship and the droid.</p>

<p>But we have a problem, the .glb files have the textures embedded in them, so if you are exporting different assets that reuse the textures, these would be duplicated each time there is a new asset in the folder. To avoid having duplicated textures we can use this helpful tool.</p>

<blockquote>⚠️ IMPORTANT NOTE: Before using the tool do a BACKUP of your models, just in case something goes wrong!!!</blockquote>

<strong>On Mac:</strong>

<p>Once you have exported all the assets to your models folder you can drag the script file to it.</p>

<p>1 - Open the folder in the terminal by dragging the folder to it.</p>

<p>2 - Drag the texture-extractor.sh to the terminal.</p>

<p>3 - Run the command. It may take some seconds to process all the assets. After that, you will see something like this:</p>

<p>4 - Go to your models folder and there will be one new folder called “out” in which you will see your new assets with the textures extracted.</p>

<p>5 - Replace all the assets for the new ones! Also once you finished erase the “texture-extractor.sh” and the empty folder “out”.</p>

<strong>On Windows</strong>

<p>Once you have exported all the assets to your models folder you can drag the script file into it.</p>

<p>1 - Double click on glb_texture_extract.bat to extract the files. If Windows warns you about unrecognized app, go to</p>

<strong>More Info</strong>

<p>and then</p>

<strong>Run anyway</strong>

<p>.</p>

<p>2 - The script will generate a folder called out , there you will fid all new .glb files with its extracted textures.</p>

<p>5 - Replace all assets with the new ones. Once finished, delete the “texture-extractor.bat” script and the empty “out” folder.</p>

<p>If you follow all the steps your scene will be much faster now and the assets will share the same texture! When we work with several assets and big scenes the improvement is quite noticeable! With this tool you can save quite a lot of megabytes of information!</p>

<blockquote>⚠️ After completing this step, it is crucial to check that every texture follows the guidelines. If the textures do not follow the guidelines or are too heavy, optimize them to be lighter before deploying. The recommended texture size for performant scenes is 512x512px. Also check resolution, images with more than 72 DPI would affect performance and won’t make the image look any better.</blockquote>

<strong>Texture Atlas/ Trim Sheets</strong>

<p>A texture atlas is a single image file that contains data from several smaller images packed together. Rather than having one texture for each mesh, several meshes share a larger texture.</p>

<p>You can create a texture atlas before making the asset, which means that the asset is UV-unwrapped according to the texture atlas. This requires some early planning when creating the texture.</p>

<p>Alternatively, you can create the texture atlas after the asset is finished by merging textures in painting software. However, this also means that the UV islands must be rearranged according to the texture.</p>

<p>Below is an image showing several 3D objects that use one texture set:</p>

<p>Another way to do Atlases is the use of Trim Sheets, a common technique in 3D modeling and game development that big studios and game industry use to ensure visual consistency and efficent art pipeline. Trim Sheets is the usage of a single image or texture that contains multiple small details or elements that can be applied to different parts of a model. This technique is very useful when creating large scenes and it needs to be considered in the first stage of the art pipeline.</p>

<em>A collage example of a Trim Sheet that uses a diffuse texture, normal and emissive.</em>

<p>There is a great</p>

<p>by</p>

<p>that explain the use of Trim Sheets using Blender!</p>

<strong>Texture Naming</strong>

<strong>It’s crucial to name our textures correctly.</strong>

<p>Having a correct naming for the texture will:</p>

<li>Make your art pipeline more efficient, flexible, organized, easy to target and modify if it’s necessary.</li>

<li>Avoid of to overlap textures with the same name using the texture extractor or others tools.</li>

<li>Avoid issues of overlapping textures when using Asset Bundles.</li>

<li>More efficient way to pain point issues when analasing the scene.</li>

<strong>How to proper name your Textures:</strong>

<strong>Asset name</strong>

<li>should clearly represent what the texture is.</li>

<li>Textures name should start with the prefix</li>

<code>T_</code>

<li>.</li>

<li>Texture name should end with the suffix that defines the texture type:</li>

<code>_D</code>

<li>-</li>

<strong>Diffuse/ Color Map</strong>

<code>_A</code>

<li>-</li>

<strong>Alpha Texture</strong>

<code>_MT</code>

<li>-</li>

<strong>Metallic</strong>

<code>_R</code>

<li>-</li>

<strong>Roughness</strong>

<code>_N</code>

<strong>- Normal Map</strong>

<code>_E</code>

<li>-</li>

<strong>Emission</strong>

<p>Example: If it’s a diffuse map of brick texture for a wall, the name</p>

<code>T_BrickWall_D</code>

<p>could be appropriate. If it’s a Normal Map of the same asset the name could be</p>

<code>T_BrickWall_N</code>

<strong>Examples:</strong>

<li>🟢</li>

<strong>Prefer</strong>

<li>starting texture name with -</li>

<code>T_Parquet_D</code>

<li>,</li>

<code>T_Floor_R</code>

<li>,</li>

<code>T_Pipes_MT</code>

<li>,</li>

<li>🔴</li>

<strong>Avoid</strong>

<li>starting texture name with -</li>

<code>Image_</code>

<li>,</li>

<code>sprite_</code>

<li>,</li>

<code>Untitled</code>

<strong>Optional Tools</strong>

<p>There are lots of addons and externals tools that facilitate the work when creating assets to make the pipeline faster and more efficient, some of they are free and some to purchase, to name a few:</p>

<strong>UVTools</strong>

<strong>UV Packer (Free)</strong>

<li>:https://www.uv-packer.com/blender/</li>

<strong>Zen UV:</strong>

<strong>Uvpackmaster 3:</strong>

<strong>Image Compressors</strong>

<p>There are several image compressors online that you can use in order to make your textures lighter. To name a few:</p>

<strong>CompressPNG:</strong>

<strong>TinyPNG:</strong>

<strong>FreeConvert:</strong>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/shape-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/materials/#pooling-entities-and-components

<title>Materials via code | Decentraland Documentation</title>

<strong>Materials via code</strong>

<h1>Materials via code</h1>

<h2>Materials</h2>

<p>Materials can be applied to entities that use primitive shapes (cube, sphere, plane, etc) by setting them as a component.</p>

<p>You can either set a</p>

<code>Material</code>

<p>or a</p>

<code>BasicMaterial</code>

<p>component. Each entity can only have one of these. Both components have several fields that allow you to configure the properties of the material, add a texture and set the texture’s mapping.</p>

<p>You can’t add material components to</p>

<em>glTF</em>

<p>models.</p>

<em>glTF</em>

<p>models include their own materials that are implicitly imported into a scene together with the model.</p>

<p>When importing a 3D model with its own materials, keep in mind that not all shaders are supported by the Decentraland engine. Only standard materials and PBR (physically based rendering) materials are supported. See</p>

<p>for more details.</p>

<h2>Create and apply a material</h2>

<p>The following example creates a material, sets some of its fields to give it a red color and metallic properties, and then applies the material to an entity that also has a</p>

<code>boxShape</code>

<p>component.</p>

<p>See</p>

<p>) for a full list of all the fields that can be configured in a</p>

<code>Material</code>

<p>of</p>

<code>BasicMaterial</code>

<p>component.</p>

<h2>Basic materials</h2>

<p>Instead of the</p>

<code>Material</code>

<p>component, you can define a material through the</p>

<code>BasicMaterial</code>

<p>entity. This creates materials that are shadeless and are not affected by light. This is useful for creating user interfaces that should be consistently bright, it can also be used to give your scene a more minimalist look.</p>

<strong>📔 Note</strong>

<blockquote>: Basic materials have some property names that are different from those in normal materials. For example it uses</blockquote>

<code>texture</code>

<blockquote>instead of</blockquote>

<code>albedoTexture</code>

<blockquote>.</blockquote>

<h2>Material colors</h2>

<p>Give a material a plain color. In a</p>

<code>BasicMaterial</code>

<p>component, you set the</p>

<code>color</code>

<p>field. In a</p>

<code>Material</code>

<p>component, you set the</p>

<code>albedoColor</code>

<p>field. Albedo colors respond to light and can include shades on them.</p>

<p>All color fields are either of type</p>

<code>Color3</code>

<p>or</p>

<code>Color4</code>

<p>.</p>

<code>Color3</code>

<p>holds three values, for</p>

<em>Red</em>

<p>,</p>

<em>Green</em>

<p>and</p>

<em>Blue</em>

<p>. Each of these numbers is between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>.</p>

<code>Color4</code>

<p>holds those same three values and a fourth value for</p>

<em>Alpha</em>

<p>, also between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>, where</p>

<em>0</em>

<p>is completely transparent and</p>

<em>1</em>

<p>is completely opaque.</p>

<strong>📔 Note</strong>

<blockquote>: If you set any color in</blockquote>

<code>albedoColor</code>

<blockquote>to a value higher than</blockquote>

<em>1</em>

<blockquote>, it will appear as</blockquote>

<em>emissive</em>

<blockquote>, with more intensity the higher the value. So for example,</blockquote>

<code>new Color3(15, 0, 0)</code>

<blockquote>produces a very bright red glowing color.</blockquote>

<p>You can also pick predetermined colors using the following functions of the</p>

<code>Color3</code>

<p>object:</p>

<p>You can otherwise pick a random color using the following function:</p>

<p>If you prefer to specify a color using hexadecimal values, as is often done in JavaScript web development, you can do so using the</p>

<code>.FromHexString()</code>

<p>function</p>

<p>The</p>

<code>Color3</code>

<p>object also includes a lot of other functions to add, substract, compare, lerp, or convert the format of colors.</p>

<p>You can also edit the following fields in a</p>

<code>Material</code>

<p>component to fine-tune how its color is percieved:</p>

<em>emissiveColor</em>

<li>: The color emitted from the material.</li>

<em>ambientColor</em>

<li>: AKA</li>

<em>Diffuse Color</em>

<li>in other nomenclature.</li>

<em>reflectionColor</em>

<li>: The color reflected from the material.</li>

<em>reflectivityColor</em>

<li>: AKA</li>

<em>Specular Color</em>

<li>in other nomenclature.</li>

<h4>Change a color gradually</h4>

<p>Change a color gradually with linear interpolation between two colors, using the</p>

<code>.Lerp()</code>

<p>function.</p>

<p>The example above changes the color of a material from red to yellow, incrementally shifting it on every frame.</p>

<h2>Using textures</h2>

<p>Reference an image file as a texture by creating a</p>

<code>Texture</code>

<p>component. You can then reference this texture component in the fields of both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>components.</p>

<p>In a</p>

<code>Material</code>

<p>component, you can set the</p>

<code>albedoTexture</code>

<p>field to a texture image. Albedo textures respond to light and can include shades on them.</p>

<p>While creating a texture, you can also pass additional parameters:</p>

<code>samplingMode</code>

<li>: Determines how pixels in the texture are stretched or compressed when rendered</li>

<code>wrap</code>

<li>: Determines how a texture is tiled onto an object (see</li>

<li>)</li>

<h4>Textures from an external URL</h4>

<p>You can point the texture of your material to an external URL instead of an internal path in the scene project.</p>

<p>The URL must start with</p>

<code>https</code>

<p>,</p>

<code>http</code>

<p>URLs aren’t supported. The site where the image is hosted should also have</p>

<p>that permit externally accessing it.</p>

<h4>Textures on basic materials</h4>

<p>In a</p>

<code>BasicMaterial</code>

<p>component, you can set the</p>

<code>texture</code>

<p>field to an image texture. This will render a texture that isn’t affected by lighting.</p>

<h4>Multi-layered textures</h4>

<p>It also allows you to use several image files as layers to compose more realistic textures, for example including a</p>

<code>bumpTexture</code>

<p>and a</p>

<code>refractionTexture</code>

<p>.</p>

<p>In the example above, the image for the material is located in a</p>

<code>materials</code>

<p>folder, which is located at root level of the scene project folder.</p>

<strong>💡 Tip</strong>

<p>: We recommend keeping your texture image files separate in a</p>

<code>/materials</code>

<p>folder inside your scene.</p>

<p>A material can have multiple layers of texture, you can see what these are on a source code editor by clicking</p>

<code>.</code>

<p>and letting the autocomplete menu show you the list.</p>

<h4>Texture wrapping</h4>

<p>If you want the texture to be mapped to specific scale or alignment on your entities, then you need to configure</p>

<em>uv</em>

<p>properties on the</p>

<p>.</p>

<p>You set</p>

<em>u</em>

<p>and</p>

<em>v</em>

<p>coordinates on the 2D image of the texture to correspond to the vertices of the shape. The more vertices the entity has, the more</p>

<em>uv</em>

<p>coordinates need to be defined on the texture, a plane for example needs to have 8</p>

<em>uv</em>

<p>points defined, 4 for each of its two faces.</p>

<p>The following example includes a function that simplifies the setting of uvs. The</p>

<code>setUVs</code>

<p>function defined here receives a number of rows and columns as parameters, and sets the uvs so that the texture image is repeated a specific number of times.</p>

<p>For setting the UVs for a</p>

<code>BoxShape</code>

<p>component, the same structure applies. Each of the 6 faces of the cube takes 4 values, one for each corner. All of these 24 values are listed as a single array.</p>

<p>You can also define how the texture is tiled if the mapping spans more than the dimensions of the texture image. The</p>

<code>Texture</code>

<p>component lets you configure the wrapping mode by setting the</p>

<code>wrap</code>

<p>field. The wrapping mode can be</p>

<code>CLAMP</code>

<p>,</p>

<code>WRAP</code>

<p>or</p>

<code>MIRROR</code>

<p>.</p>

<code>CLAMP</code>

<li>: The texture is only displayed once in the specified size. The rest of the surface of the mesh is left transparent.</li>

<code>WRAP</code>

<li>: The texture is repeated as many times as it fits in the mesh, using the specified size.</li>

<code>MIRROR</code>

<li>: As in wrap, the texture is repeated as many times as it fits, but the orientation of these repetitions is mirrored.</li>

<strong>📔 Note</strong>

<blockquote>: The</blockquote>

<code>wrap</code>

<blockquote>property must be set when instancing the texture, after that it’s a read-only property.</blockquote>

<p>The example above sets the wrapping mode to</p>

<code>MIRROR</code>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Uv properties are currently only available on</blockquote>

<code>PlaneShape</code>

<blockquote>and on</blockquote>

<code>BoxShape</code>

<blockquote>components.</blockquote>

<h4>Texture scaling</h4>

<p>When textures are stretched or shrinked to a different size from the original texture image, this can sometimes create artifacts. In a 3D environment, the effects of perspective cause this naturally. There are various</p>

<p>algorithms that exist to compensate for this in different ways. The</p>

<code>Texture</code>

<p>object uses the</p>

<em>bilinear</em>

<p>algorithm by default, but it lets you configure it to use the</p>

<em>nearest neighbor</em>

<p>or</p>

<em>trilinear</em>

<p>algorithms instead by setting the</p>

<code>samplingMode</code>

<p>property.</p>

<p>The example above uses a nearest neighbor algorithm. This setting is ideal for pixel art style graphics, as the contours will remain sharply marked as the texture is seen larger on screen instead of being blurred.</p>

<h2>Avatar Portraits</h2>

<p>To display a thumbnail image of any player, create an</p>

<code>AvatarTexture</code>

<p>, passing the address of an existing player. This creates a texture from a 256x256 image of the player, showing head and shoulders. The player is displayed wearing the set of wearables that the current server last recorded.</p>

<h2>Transparent materials</h2>

<p>To make a material with a plain color transparent, simply define the color as a</p>

<code>Color4</code>

<p>, and set the 4th value to something between</p>

<em>0</em>

<p>and</p>

<em>1</em>

<p>. The closer to</p>

<em>1</em>

<p>, the more opaque it will be.</p>

<p>To make a material with texture transparent:</p>

<li>Set an image in</li>

<code>alphaTexture</code>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: This must be a single-channel image. In this image use the color red to determine what parts of the real texture should be transparent.</blockquote>

<li>Optionally set the</li>

<code>transparencyMode</code>

<li>to: -</li>

<code>OPAQUE</code>

<li>: No transparency at all -</li>

<code>ALPHATEST</code>

<li>: Each pixel is either completely opaque or completely transparent, based on a threshold. -</li>

<code>ALPHABLEND</code>

<li>: Intermediate values are possible based on the value of each pixel.</li>

<li>If you set the</li>

<code>transparencyMode</code>

<li>to</li>

<code>ALPHATEST</code>

<li>, you can fine tune the threshold used to determine if each pixel is transparent or not. Set the</li>

<code>alphaTest</code>

<li>property between</li>

<em>0</em>

<li>and</li>

<em>1</em>

<li>. By default its value is</li>

<em>0.5</em>

<li>.</li>

<h2>Casting no shadows</h2>

<p>To prevent a material from casting shadows over other objects, both</p>

<code>Material</code>

<p>and</p>

<code>BasicMaterial</code>

<p>have a</p>

<code>castShadows</code>

<p>property that you can set to</p>

<em>false</em>

<p>. This property is always</p>

<em>true</em>

<p>by default.</p>

<h2>Reuse materials</h2>

<p>If multiple entities in your scene use a same material, there’s no need to create an instance of the material component for each. All entities can share one same instance, this keeps your scene lighter to load and prevents you from exceeding the maximum amount of materials per scene.</p>

<h2>Video playing</h2>

<p>To stream video from a URL into a material, or play a video from a file stored in the scene, see</p>

<p>.</p>

<p>The video is used as a texture on a material, you can set any of the other properties of materials to alter how the video screen looks.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/shape-components/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/entities-components/#pooling-entities-and-components

<title>Entities and components | Decentraland Documentation</title>

<strong>Entities and components</strong>

<h1>Entities and components</h1>

<p>Decentraland scenes are built around</p>

<em>entities</em>

<em>components</em>

<em>systems</em>

<p>. This is a common pattern used in the architecture of several game engines, that allows for easy composability and scalability.</p>

<h2>Overview</h2>

<em>Entities</em>

<p>are the basic unit for building everything in Decentraland scenes. All visible and invisible 3D objects and audio players in your scene will each be an entity. An entity is nothing more than a container that holds components. The entity itself has no properties or methods of its own, it simply groups several components together.</p>

<em>Components</em>

<p>define the traits of an entity. For example, a</p>

<code>transform</code>

<p>component stores the entity’s coordinates, rotation and scale. A</p>

<code>BoxShape</code>

<p>component gives the entity a box shape when rendered in the scene, a</p>

<code>Material</code>

<p>component gives the entity a color or texture. You could also create a custom</p>

<code>health</code>

<p>component to store an entity’s remaining health value, and add it to entities that represent non-player enemies in a game.</p>

<p>If you’re familiar with web development, think of entities as the equivalent of</p>

<em>Elements</em>

<p>in a</p>

<em>DOM</em>

<p>tree, and of components as</p>

<em>attributes</em>

<p>of those elements.</p>

<strong>📔 Note</strong>

<blockquote>: In previous versions of the SDK, the</blockquote>

<em>scene state</em>

<blockquote>was stored in an object that was separate from the entities themselves. As of version 5.0, the</blockquote>

<em>scene state</em>

<blockquote>is directly embodied by the components that are used by the entities in the scene.</blockquote>

<p>Components like</p>

<code>Transform</code>

<p>,</p>

<code>Material</code>

<p>or any of the</p>

<em>shape</em>

<p>components are closely tied in with the rendering of the scene. If the values in these components change, that alone is enough to change how the scene is rendered in the next frame.</p>

<p>Components are meant to store data about their parent entity. They only store this data, they shouldn’t modify it themselves. All changes to the values in the components are carried out by</p>

<p>. Systems are completely decoupled from the components and entities themselves. Entities and components are agnostic to what</p>

<em>systems</em>

<p>are acting upon them.</p>

<p>See</p>

<p>for a reference of all the available constructors for predefined components.</p>

<h2>Syntax for entities and components</h2>

<p>Entities and components are declared as TypeScript objects. The example below shows some basic operations of declaring, configuring and assigning these.</p>

<h2>Add entities to the engine</h2>

<p>When you create a new entity, you’re instancing an object and storing it in memory. A newly created entity isn’t</p>

<em>rendered</em>

<p>and it won’t be possible for a player to interact with it until it’s added to the</p>

<em>engine</em>

<p>.</p>

<p>The engine is the part of the scene that sits in the middle and manages all of the other parts. It determines what entities are rendered and how players interact with them. It also coordinates what functions from</p>

<p>are executed and when.</p>

<p>In the example above, the newly created entity isn’t viewable by players on your scene until it’s added to the engine.</p>

<strong>📔 Note</strong>

<blockquote>: Entities aren’t added to</blockquote>

<blockquote>either until they are added to the engine.</blockquote>

<p>It’s sometimes useful to preemptively create entities and not add them to the engine until they are needed. This is especially true for entities that have elaborate geometries that might otherwise take long to load.</p>

<p>When an entity is added to the engine, its</p>

<code>alive</code>

<p>property is implicitly set to</p>

<em>true</em>

<p>. You can check if an entity is currently added to the engine via this property.</p>

<strong>📔 Note</strong>

<blockquote>: It’s always recommended to add a</blockquote>

<code>Transform</code>

<blockquote>component to an entity before adding it to the engine. Entities that don’t have a Transform component are rendered in the</blockquote>

<em>(0, 0, 0)</em>

<blockquote>position of the scene, so if the entity is added before it has a</blockquote>

<code>Transform</code>

<blockquote>, it will be momentarily rendered in that position, and with its original size and rotation.</blockquote>

<h2>Remove entities from the engine</h2>

<p>Entities that have been added to the engine can also be removed from it. When an entity is removed, it stops being rendered by the scene and players can no longer interact with it.</p>

<p>Note: Removed entities are also removed from all</p>

<p>.</p>

<p>If your scene has a pointer referencing a removed entity, it will remain in memory, allowing you to still access and change its component’s values and add it back.</p>

<p>If a removed entity has child entities, all children of that entity are removed too.</p>

<h2>Nested entities</h2>

<p>An entity can have other entities as children. Thanks to this, we can arrange entities into trees, just like the HTML of a webpage.</p>

<p>To set an entity as the parent of another, simply use</p>

<code>.setParent()</code>

<p>:</p>

<strong>📔 Note</strong>

<blockquote>: Child entities should not be explicitly added to the engine, as they are already added via their parent entity.</blockquote>

<p>Once a parent is assigned, it can be read off the child entity with</p>

<code>.getParent()</code>

<p>.</p>

<p>If a parent entity has a</p>

<code>transform</code>

<p>component that affects its position, scale or rotation, its children entities are also affected.</p>

<li>For</li>

<strong>position</strong>

<li>, the parent’s center is</li>

<em>0, 0, 0</em>

<li>For</li>

<strong>rotation</strong>

<li>the parent’s rotation is the quaternion</li>

<em>0, 0, 0, 1</em>

<li>(equivalent to the Euler angles</li>

<em>0, 0, 0</em>

<li>)</li>

<li>For</li>

<strong>scale</strong>

<li>, the parent is considered to have a size of</li>

<em>1</em>

<li>. Any resizing of the parent affects scale and position in proportion.</li>

<p>Entities with no shape component are invisible in the scene. These can be used as wrappers to handle and position multiple entities as a group.</p>

<p>To remove an entity’s parent, you can assign the entity’s parent to</p>

<code>null</code>

<p>.</p>

<p>If you set a new parent to an entity that already had a parent, the new parent will overwrite the old one.</p>

<h2>Get an entity by ID</h2>

<p>Every entity in your scene has a unique autogenrated</p>

<em>id</em>

<p>property. You can retrieve a specific entity from the engine based on this ID, by referring to the</p>

<code>engine.entities[]</code>

<p>array.</p>

<p>For example, if a player’s click or a raycast hits an entity, this will return the id of the hit entity, and you can use the command above to fetch the entity that matches that id.</p>

<h2>Add a component to an entity</h2>

<p>When a component is added to an entity, the component’s values affect the entity.</p>

<p>One way of doing this is to first create the component instance, and then add it to an entity in a separate expression:</p>

<p>You can otherwise use a single expression to both create a new instance of a component and add it to an entity:</p>

<strong>📔 Note</strong>

<blockquote>: In the example above, as you never define a pointer to the entity’s material component, you need to refer to it through its parent entity using</blockquote>

<code>.getComponent()</code>

<blockquote>.</blockquote>

<h4>Add or replace a component</h4>

<p>By using</p>

<code>.addComponentOrReplace()</code>

<p>instead of</p>

<code>.addComponent()</code>

<p>you overwrite any existing components of the same kind on a specific entity.</p>

<h2>Remove a component from an entity</h2>

<p>To remove a component from an entity, simply use the entity’s</p>

<code>removeComponent()</code>

<p>method.</p>

<p>If you attempt to remove a component that doesn’t exist in the entity, this action won’t raise any errors.</p>

<p>A removed component might still remain in memory even after removed. If your scene adds new components and removes them regularly, these removed components will add up and cause memory problems. It’s advisable to instead use an</p>

<p>when possible to handle these components.</p>

<h2>Access a component from an entity</h2>

<p>You can reach components through their parent entity by using the entity’s</p>

<code>.getComponent()</code>

<p>function.</p>

<p>The</p>

<code>getComponent()</code>

<p>function fetches a reference to the component object. If you change the values of what’s returned by this function, you’re changing the component itself. For example, in the example above, we’re setting the</p>

<code>position</code>

<p>stored in the component to</p>

<em>(5, 0, 5)</em>

<p>.</p>

<p>The example above directly modifies the value of the</p>

<em>x</em>

<p>scale on the Transform component.</p>

<p>If you’re not entirely sure if the entity does have the component you’re trying to retrieve, use</p>

<code>getComponentOrNull()</code>

<p>or</p>

<code>getComponentOrCreate()</code>

<p>If the component you’re trying to retrieve doesn’t exist in the entity:</p>

<code>getComponent()</code>

<li>returns an error.</li>

<code>getComponentOrNull()</code>

<li>returns</li>

<code>Null</code>

<li>.</li>

<code>getComponentOrCreate()</code>

<li>instances a new component in its place and retrieves it.</li>

<p>When you’re dealing with</p>

<p>, you can also get a component by</p>

<em>space name</em>

<p>instead of by type. For example, both</p>

<code>BoxShape</code>

<p>and</p>

<code>SphereShape</code>

<p>occupy the</p>

<code>shape</code>

<p>space of an entity. If you don’t know which of these an entity has, you can fetch the</p>

<code>shape</code>

<p>of the entity, and it will return whichever component is occupying the</p>

<code>shape</code>

<p>space.</p>

<h2>Pooling entities and components</h2>

<p>If you plan to spawn and despawn similar entities from your scene, it’s often a good practice to keep a fixed set of entities in memory. Instead of creating new entities and deleting them, you could add and remove existing entities from the engine. This is an efficient way to deal with the player’s memory.</p>

<p>Entities that are not added to the engine aren’t rendered as part of the scene, but they are kept in memory, making them quick to load if needed. Their geometry doesn’t add up to the maximum triangle count for your scene while they aren’t being rendered.</p>

<p>When adding an entity to the engine, its</p>

<code>alive</code>

<p>field is implicitly set to</p>

<code>true</code>

<p>, when removing it, this field is set to</p>

<code>false</code>

<p>.</p>

<p>Using an object pool has the following benefits:</p>

<li>If your entity uses a complex 3D model or texture, it might take the scene some time to load it from the content server. If the entity is already in memory when it’s needed, then that delay won’t happen.</li>

<li>This is a solution to avoid a common problem, where each entity that’s removed could remain lingering in memory after being removed, and these unused entities could add up till they become too many to handle. By recycling the same entities, you ensure this won’t happen.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-metadata/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/external-links/

<title>Outbound links | Decentraland Documentation</title>

<strong>Outbound links</strong>

<h1>Outbound links</h1>

<p>You can add links from your scene out to other content, either to other scenes or to external websites.</p>

<h2>Teleports</h2>

<p>To teleport a player to another scene, call the following function, indicating the coordinates that you want players to teleport to.</p>

<p>Players are presented a confirmation screen before they are teleported, this screen displays information from the destination scene’s</p>

<code>scene.json file</code>

<p>, including the scene</p>

<code>name</code>

<p>,</p>

<code>description</code>

<p>and</p>

<code>navmapThumbnail</code>

<p>. See</p>

<p>for details on how to set this data.</p>

<p>You can also teleport players to the most crowded place in Genesis City by doing</p>

<code>teleportTo(‘crowd’)</code>

<p>, which is equivalent to typing</p>

<code>/goto crowd</code>

<p>in the chat. Similarly you can teleport players to a random location from the curated list that you reach with</p>

<code>/goto magic</code>

<p>by doing ``teleportTo(‘magic’)`.</p>

<p>Bare in mind that teleports take you to a scene in the indicated coordinates, but not necessarily to that same coordinates. This means that when travelling to a scene that has multiple parcels, players may not be landing on the same coordinates as specified, but rather into one of the spawn points designated by the creator of the scene.</p>

<p>To move a player to another set of coordinates inside the current scene, use the</p>

<code>movePlayerTo()</code>

<p>function instead. See</p>

<p>.</p>

<h2>External links</h2>

<p>To add a link to an external website, use the</p>

<code>openExternalURL()</code>

<p>command.</p>

<p>To prevent any abusive usage of this feature to spam players, it’s only possible to call the</p>

<code>openExternalURL</code>

<p>from an explicit click or button event on an entity. It’s not possible to call this function as a result of a timer, or a collision area, or a global click event.</p>

<p>When</p>

<code>openExternalURL</code>

<p>is called, players are prompted with a confirmation screen, where they are informed of where the link will take them, and where can accept of decline to visit the link.</p>

<p>The link is opened in a new tab, keeping the original tab in Decentraland.</p>

<p>If players tick the</p>

<em>trust this domain</em>

<p>checkbox, they won’t be prompted again during their session, as long as the link comes from the same scene and is to the same domain.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/external-links/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/move-player/

<title>Move a player | Decentraland Documentation</title>

<strong>Move a player</strong>

<h1>Move a player</h1>

<p>To change the player’s position in the scene, use the</p>

<code>movePlayerTo()</code>

<p>function. This function takes two arguments:</p>

<code>position</code>

<li>: Where to move the player, expressed as an object with</li>

<em>x</em>

<li>,</li>

<em>y</em>

<li>, and</li>

<em>z</em>

<li>properties.</li>

<code>cameraTarget</code>

<li>: (optional) What direction to make the player face, expressed as an object with</li>

<em>x</em>

<li>,</li>

<em>y</em>

<li>, and</li>

<em>z</em>

<li>properties that represent the coordinates of a point in space to stare at. If no value is provided, the player will maintain the same rotation as before moving.</li>

<p>The player’s movement occurs instantly, without any confirmation screens or camera transitions.</p>

<strong>📔 Note</strong>

<blockquote>: Players can only be moved if they already are standing inside the scene’s bounds, and can only be moved to locations that are inside the limits of the scene’s bounds. You can’t use</blockquote>

<code>movePlayerTo()</code>

<blockquote>to transport a player to another scene. To move a player to another scene, see</blockquote>

<blockquote>.</blockquote>

<p>You must first add the</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<p>permission to the</p>

<code>scene.json</code>

<p>file before you can use this feature. If not yet present, create a</p>

<code>requiredPermissions</code>

<p>property at root level in the JSON file to assign it this permission.</p>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: To prevent abusive behavior that might damage a player’s experience, the ability to move a player is handled as a permission. Currently, this permission has no effect in how the player experiences the scene. In the future, players who walk into a scene with this permission in the</blockquote>

<code>scene.json</code>

<blockquote>file will be requested to grant the scene the ability to move them.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/move-player/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/external-links/#teleports

<title>Outbound links | Decentraland Documentation</title>

<strong>Outbound links</strong>

<h1>Outbound links</h1>

<p>You can add links from your scene out to other content, either to other scenes or to external websites.</p>

<h2>Teleports</h2>

<p>To teleport a player to another scene, call the following function, indicating the coordinates that you want players to teleport to.</p>

<p>Players are presented a confirmation screen before they are teleported, this screen displays information from the destination scene’s</p>

<code>scene.json file</code>

<p>, including the scene</p>

<code>name</code>

<p>,</p>

<code>description</code>

<p>and</p>

<code>navmapThumbnail</code>

<p>. See</p>

<p>for details on how to set this data.</p>

<p>You can also teleport players to the most crowded place in Genesis City by doing</p>

<code>teleportTo(‘crowd’)</code>

<p>, which is equivalent to typing</p>

<code>/goto crowd</code>

<p>in the chat. Similarly you can teleport players to a random location from the curated list that you reach with</p>

<code>/goto magic</code>

<p>by doing ``teleportTo(‘magic’)`.</p>

<p>Bare in mind that teleports take you to a scene in the indicated coordinates, but not necessarily to that same coordinates. This means that when travelling to a scene that has multiple parcels, players may not be landing on the same coordinates as specified, but rather into one of the spawn points designated by the creator of the scene.</p>

<p>To move a player to another set of coordinates inside the current scene, use the</p>

<code>movePlayerTo()</code>

<p>function instead. See</p>

<p>.</p>

<h2>External links</h2>

<p>To add a link to an external website, use the</p>

<code>openExternalURL()</code>

<p>command.</p>

<p>To prevent any abusive usage of this feature to spam players, it’s only possible to call the</p>

<code>openExternalURL</code>

<p>from an explicit click or button event on an entity. It’s not possible to call this function as a result of a timer, or a collision area, or a global click event.</p>

<p>When</p>

<code>openExternalURL</code>

<p>is called, players are prompted with a confirmation screen, where they are informed of where the link will take them, and where can accept of decline to visit the link.</p>

<p>The link is opened in a new tab, keeping the original tab in Decentraland.</p>

<p>If players tick the</p>

<em>trust this domain</em>

<p>checkbox, they won’t be prompted again during their session, as long as the link comes from the same scene and is to the same domain.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/move-player/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-metadata/#required-permissions

<title>Scenes | Decentraland Documentation</title>

<strong>Scenes</strong>

<h1>Scenes</h1>

<p>All scenes have a</p>

<code>scene.json</code>

<p>file where you can set metadata for the scene. Some fields in this file are predefined with information that’s necessary for the Decentraland client.</p>

<p>You’re also free to add any fields that you wish. In the future, custom fields can then be checked by alternative clients, or other scripts embedded in interactive inventory items.</p>

<h2>Scene parcels</h2>

<p>When</p>

<p>a scene, the</p>

<code>scene.json</code>

<p>file must include information about what parcels will be occupied by this scene in the Decentraland map. The CLI reads this information from off this field and deploys to those parcels directly.</p>

<p>The default scene has its coordinates set to</p>

<em>0,0</em>

<p>, this information is not necessary to change while developing a scene offline, unless you need to occupy multiple parcels. You will need to change this before deploying, to coordinates where you do have deploy permissions.</p>

<p>The</p>

<code>base</code>

<p>field defines which parcel to consider the base parcel. If your scene has a single parcel, the base should be that parcel. If your scene has multiple parcels, the base should be the bottom-left (South-West) parcel. All entity positions will be measured in reference to the South-West corner of this parcel.</p>

<p>To display multiple parcels in the scene preview, list as many parcels as you intend to use. They don’t need to be the exact parcels you’ll deploy to, but they should all be adjacent and arranged in the same way in relation to each other.</p>

<h3>Set parcels via the command line</h3>

<p>You can set the parcels in your scene by running the</p>

<code>dcl coords</code>

<p>command in your scene folder. This is especially useful for large scenes, as you don’t need to list every parcel involved.</p>

<strong>Single parcel</strong>

<p>Pass a single argument with the scene coords. This coordinate is also set as the base parcel.</p>

<code>dcl coords <parcel></code>

<p>For example:</p>

<code>dcl coords 15,-26</code>

<strong>Multiple parcels</strong>

<p>Pass two arguments: the South-West and the North-East parcels. The South-West parcel is also set as the base parcel.</p>

<code>dcl coords <parcel> <parcel></code>

<strong>💡 Tip</strong>

<blockquote>: The South-West parcel is always the one with the lowest numbers on both the</blockquote>

<em>X</em>

<blockquote>and</blockquote>

<em>Y</em>

<blockquote>coordinates.</blockquote>

<p>For example:</p>

<code>dcl coords 15,-26 17,-24</code>

<p>This command generates a 3x3 scene, with its base parcel in</p>

<code>15,-26</code>

<p>.</p>

<strong>Customize Base Parcel</strong>

<p>Pass three arguments: the South-West and the North-East parcels, and the parcel to use as a base parcel.</p>

<code>dcl coords <parcel> <parcel> <parcel></code>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<strong>Non-square scenes</strong>

<p>The above commands all generate rectangular-shaped scenes. Decentraland scenes can have L shapes or other configurations. You can generate a larger square with</p>

<code>dcl coords</code>

<p>and then manually remove excess parcels from the</p>

<code>scene.json</code>

<p>file.</p>

<strong>📔 Note</strong>

<blockquote>: The base parcel must be one of the parcels in the scene.</blockquote>

<h2>Scene title, description, and image</h2>

<p>Give your scene a title, a description and a thumbnail image to attract players to your scene and so they know what to expect.</p>

<p>Players will see these when they select the parcels of your scene on the map, they will also see these in a confirmation screen when being</p>

<p>there by another scene.</p>

<p>When players navigate the world and enter your scene, they are able to read the scene title from under the minimap.</p>

<p>The thumbnail should be a</p>

<em>.png</em>

<p>or</p>

<em>.jpg</em>

<p>image of a recommended size of</p>

<em>228x160</em>

<p>pixels. The minimum supported size is</p>

<em>196x143</em>

<p>pixels. The image may be stretched if the width-to-height proportions don’t match</p>

<em>228x160</em>

<p>.</p>

<p>The image on</p>

<code>navmapThumbnail</code>

<p>should be a path to an image file in the project folder. It can also be a URL link to an image hosted elsewhere.</p>

<strong>📔 Note</strong>

<blockquote>: If you host an image elsewhere, make sure this is in a site that has permissive CORS policies for displaying content on other sites.</blockquote>

<h2>Contact information</h2>

<p>In case you want other developers to be able to reach out to you, you can add contact information into the</p>

<code>scene.json</code>

<p>file.</p>

<h2>Spawn location</h2>

<p>The</p>

<code>spawnPoints</code>

<p>field defines where players spawn when they access your scene directly, either by directly typing in the coordinates into the browser or teleporting.</p>

<p>Your scene might have objects that can block players from moving if they happen to spawn right over them, like trees or stairs, or your scene might have an elevated terrain. It would be a bad experience for players if they spawned over something that doesn’t let them move. That’s why you have the option to set multiple spawn positions in ad-hoc locations.</p>

<p>The position is comprised of coordinates inside the scene. These numbers refer to a position within the parcel, similar to what you’d use in the scene’s code in a Transform component to</p>

<p>.</p>

<strong>💡 Tip</strong>

<blockquote>: Define a</blockquote>

<blockquote>for the</blockquote>

<strong>x</strong>

<blockquote>and</blockquote>

<strong>z</strong>

<blockquote>locations to prevent users spawning all together in the same spot.</blockquote>

<p>If your scene does not define any spawn points, users might appear at any random location within the base parcel. In the past, the reference client always spawned users in the</p>

<strong>0,0</strong>

<p>position. Make sure you update your scene.json if this is not the behavior you expect.</p>

<strong>📔 Note</strong>

<blockquote>: All spawn points must be within the parcels that make up the scene. You can’t spawn a player outside the space of these parcels.</blockquote>

<h3>Multiple spawn points</h3>

<p>A single scene can have multiple spawn points. This is useful to limit the overlapping of players if they all visit a scene at the same time. To have many spawn points, simply list them as an array.</p>

<p>Spawn points marked as</p>

<code>default</code>

<p>are given preference. When there are multiple spawn points marked as</p>

<code>default</code>

<p>, one of them will be picked randomly from the list.</p>

<strong>📔 Note</strong>

<blockquote>: In future releases, when a player tries to spawn into a scene and the default spawn points are occupied by other players, the player will be sent to another of the listed locations. This will open the door to allowing players to teleport to a spawn point based on the spawn point’s name, as described in the</blockquote>

<code>scene.json</code>

<blockquote>.</blockquote>

<h3>Spawn regions</h3>

<p>You can set a whole region in the scene to act as a spawn point. By specifying an array of two numbers on any of the dimensions of the position, players will appear in a random location within this range of numbers. This helps prevent the overlapping of entering players.</p>

<p>In the example above, players may appear anywhere in the square who’s corners are on</p>

<em>1,1,2</em>

<p>and</p>

<em>5,1,4</em>

<p>.</p>

<h3>Rotation</h3>

<p>You can also specify the rotation of players when they spawn, so that they’re facing in a specific direction. This allows you to have better control over their first impression, and can be useful when wanting to help steer them towards a specific direction.</p>

<p>Simply add a</p>

<code>cameraTarget</code>

<p>field to the spawn point data. The value of</p>

<code>cameraTarget</code>

<p>should reference a location in space, with</p>

<em>x</em>

<p>,</p>

<em>y</em>

<p>and</p>

<em>z</em>

<p>coordinates relative to the scene, just like the</p>

<code>position</code>

<p>field.</p>

<p>This example spawns a player on</p>

<em>5, 1, 4</em>

<p>looking East at</p>

<em>10, 1, 4</em>

<p>. If the spawn position is a range, then the player’s rotation will always match the indicated target. If there are multiple spawn points, each can have its own separate target.</p>

<h2>Age Rating</h2>

<p>The</p>

<code>rating</code>

<p>field is used to classify the content of your scene based on its appropriateness for different age groups. It helps in filtering content for players. The rating is a</p>

<strong>single-letter code</strong>

<p>that you should add to your</p>

<code>scene.json</code>

<p>file. Here are the available options:</p>

<strong>🟢</strong>

<code>T</code>

<strong>for Teens (13+)</strong>

<li>: This is the minimum age requirement as specified in Decentraland’s</li>

<li>. Opt for this category if your scene is limited to moderate violence, suggestive or horror-themed content, simulated gambling, and mild language.</li>

<strong>🟡</strong>

<code>A</code>

<strong>for Adults (18+)</strong>

<li>: Choose this category if your scene features any of the following: intense offensive language, graphic violence, explicit sexual content and/or nudity, real money gambling, or substances like alcohol, tobacco, and drugs.</li>

<h3>Restricted Content</h3>

<p>There is a third category for scenes: 🔴</p>

<code>R</code>

<p>for Restricted. This rating is manually applied by Content Moderators to scenes that violate Decentraland’s</p>

<p>. Violations may include, but are not limited to:</p>

<li>Suspicious content or spam</li>

<li>Abusive or hateful content</li>

<li>Sexual or degrading content</li>

<li>Child abuse</li>

<li>Harassment or bullying</li>

<li>Promotion of terrorism/violence</li>

<li>IP/Copyright infringement</li>

<p>Scenes with this rating won’t load and no one will be able to interact with them. If your scene falls into this category, you should review and update it to comply with the</p>

<p>.</p>

<strong>📔 Note</strong>

<blockquote>: Incorrectly categorizing your scene may result in player reports and subsequent moderation actions. For more details, refer to</blockquote>

<blockquote>.</blockquote>

<h2>Required Permissions</h2>

<p>The</p>

<code>requiredPermissions</code>

<p>property manages various controlled features that could be used in an abusive way and damage a player’s experience.</p>

<p>The corresponding features are blocked from being used by the scene, unless the permission is requested in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, the following permissions are managed on all content:</p>

<code>ALLOW_TO_MOVE_PLAYER_INSIDE_SCENE</code>

<li>: Refers to</li>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<li>: Refers to</li>

<p>Portable experiences and smart wearables are also affected by the following permissions:</p>

<code>USE_WEB3_API</code>

<li>: Refers to interacting with the player’s browser wallets, to make transactions or sign messages.</li>

<code>USE_FETCH</code>

<li>: Refers to sending http requests to 3rd party servers, using</li>

<code>fetch</code>

<li>or</li>

<code>signedFetch</code>

<code>USE_WEBSOCKET</code>

<li>: Refers to opening websocket connections with 3rd party servers</li>

<code>OPEN_EXTERNAL_LINK</code>

<li>: Refers to prompting the player to open links to external sites</li>

<p>If a</p>

<code>requiredPermissions</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<strong>📔 Note</strong>

<blockquote>: In future releases, when a player enters a scene that has items listed in the</blockquote>

<code>requiredPermissions</code>

<blockquote>property, the scene will prompt the player to grant these permissions. The player will be able to decline these permissions for that scene.</blockquote>

<h2>Feature Toggles</h2>

<p>There are certain features that can be disabled in specific scenes so that players can’t use these abusively. The</p>

<code>featureToggles</code>

<p>property manages these permissions.</p>

<p>The corresponding features are enabled by default, unless specified as</p>

<em>dissabled</em>

<p>in the</p>

<code>scene.json</code>

<p>file.</p>

<p>Currently, only the following feature is handled like this:</p>

<code>voiceChat</code>

<li>: Refers to players using their microphones to have conversations over voice chat with other nearby players.</li>

<p>-</p>

<code>portableExperiences</code>

<p>: This setting will set the behavior for any portable experience of a player while standing inside the your scene. This includes not only</p>

<p>but also</p>

<p>. With this setting, you can chose to either keep them all enabled (default), disable them, or hide their UI. This is useful for scenes where portable experiences might give an unfair advantage to some players, for example using a jetpack in a parkour challenge. It’s also recommended to prevent these in scenes where blockchain transactions take place, and where a malicious portable experience could potentially impersonate the scene´s UI.</p>

<p>If a</p>

<code>featureToggles</code>

<p>property doesn’t exist in your</p>

<code>scene.json</code>

<p>file, create it at root level in the json tree.</p>

<h2>Worlds Configuration</h2>

<p>When you are planning to upload yor scene to a Decentraland</p>

<p>instead of Genesis City, you must specify the NAME that you are going to target. On the other hand, if your world meets the requirements to be listed on</p>

<p>(owning a LAND or having an active LAND rental contract), and you prefer not to list your scene, you can also configure it accordingly.</p>

<code>{

"worldConfiguration" : {

"name": "my-name.dcl.eth",

"placesConfig": {

"optOut": true

}

}

}</code>

<strong>📔 Note</strong>

<blockquote>: Attempting to upload a scene with the `worldConfiguration`` section to a Catalyst will result in the deployment being rejected.</blockquote>

<h2>Fetch metadata from scene code</h2>

<p>You may need a scene’s code to access the fields from the metadata, like the parcels that the scene is deployed to, or the spawn point positions. This is especially useful for scenes that are meant to be replicated, or for code that is meant to be reused in other scenes. It’s also very useful for smart items, where the smart item’s code might for example need to know where the scene limits are.</p>

<p>To access this data, first import the</p>

<code>ParcelIdentity</code>

<p>library to your scene:</p>

<p>Then you can call the</p>

<code>getParcel()</code>

<p>function from this library, which returns a json object that includes much of the contents of the scene.json file.</p>

<p>The example bleow shows the path to obtain several of the more common fields you might need from this function’s response:</p>

<strong>📔 Note</strong>

<blockquote>:</blockquote>

<code>getParcel()</code>

<blockquote>needs to be run as an</blockquote>

<blockquote>, since the response may delay a fraction of a second or more in returning data.</blockquote>

<h2>Tags</h2>

<p>You can add tags to your scene to help players and users explore Decentraland better. These tags are used in the</p>

<p>to categorize each place and make it easier for users to find what they’re intreseted in.</p>

<p>You can only use a preselected list of tags and a maximum of 3 tags per scene.</p>

<p>The tags you can use are:</p>

<code>art</code>

<code>game</code>

<code>casino</code>

<code>social</code>

<code>music</code>

<code>fashion</code>

<code>crypto</code>

<code>education</code>

<code>shop</code>

<code>business</code>

<code>sports</code>

<p>For example, an Scene could be tagged as</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>by adding the following to the</p>

<code>scene.json</code>

<p>After that, the scene will be listed on the Places dApp under the</p>

<code>game</code>

<p>and</p>

<code>casino</code>

<p>categories.</p>

<p>Here is how the tag names look on the Places dApp:</p>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/scene-metadata/#required-permissions

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/trigger-emotes/

<title>Trigger emotes | Decentraland Documentation</title>

<strong>Trigger emotes</strong>

<h1>Trigger emotes</h1>

<p>To make a player perform an emote, use the</p>

<code>triggerEmote()</code>

<p>function. Note that only existing default emotes are supported for now. This function takes a single argument:</p>

<code>emote</code>

<li>: An emote from the</li>

<code>PredefinedEmote</code>

<li>enum.</li>

<p>Only the emotes in the</p>

<code>PredefinedEmote</code>

<p>enum are currently supported. This list includes the following:</p>

<li>‘WAVE’</li>

<li>‘FIST_PUMP’</li>

<li>‘ROBOT’</li>

<li>‘RAISE_HAND’</li>

<li>‘CLAP’</li>

<li>‘MONEY’</li>

<li>‘KISS’</li>

<li>‘TIK’</li>

<li>‘HAMMER’,</li>

<li>‘TEKTONIK’</li>

<li>‘DONT_SEE’</li>

<li>‘HANDS_AIR’</li>

<li>‘SHRUG’</li>

<li>‘DISCO’</li>

<li>‘DAB’</li>

<li>‘HEAD_EXPLODE’</li>

<p>The emote animation is seen both by the player (in 3rd person view) and any other players around. If the player walks, runs or jumps, they will interrupt the animation and return to playing the corresponding animations for these actions.</p>

<strong>📔 Note</strong>

<blockquote>: Players can only be animated if they already are standing inside the scene’s bounds, not if they are on a neighboring scene.</blockquote>

<p>Before you can use this feature, you must add the</p>

<code>ALLOW_TO_TRIGGER_AVATAR_EMOTE</code>

<p>permission to the</p>

<code>scene.json</code>

<p>file. If not yet present, create a</p>

<code>requiredPermissions</code>

<p>property at root level in the JSON file to assign it this permission.</p>

<p>See</p>

<p>for more details.</p>

<strong>📔 Note</strong>

<blockquote>: To prevent abusive behavior that might damage a player’s experience, the ability to make a player perform an emote is handled as a permission. Currently, this permission has no effect in how the player experiences the scene. In the future, players who walk into a scene with this permission in the</blockquote>

<code>scene.json</code>

<blockquote>file will be requested to grant the scene the ability to play emotes on them.</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/creator

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/sdk7/dev-workflow/

<title>Development workflow | Decentraland Documentation</title>

<strong>Development workflow</strong>

<h1>Development workflow</h1>

<p>This document outlines the steps recommended for developing a scene for Decentraland, from ideation to publishing and beyond.</p>

<h2>Install the Decentraland Editor</h2>

<p>Make sure you have the Decentraland Editor installed.</p>

<li>.</li>

<h2>Design your experience</h2>

<p>Think about how much space you need to take up, what kind of distribution, what kinds of mechanics you want players to be able to carry out, etc. The following documents can serve as a guide:</p>

<h2>Where to publish</h2>

<p>In Decentraland, content is published to adjacent plots of land in a finit amount of space. Players can freely walk from one to the other. Each scene is its own contained little world, items from one scene can’t extend out into another scene, and the code for each scene is sandboxed from all others.</p>

<p>Permission to publish to each of these is controlled via tokens. You don’t need land to develop a scene, but you will need access to land once you’re ready to publish. Alternatively, you have the option to publish to Decentraland</p>

<p>, which are self-contained and isolated scenes.</p>

<p>The following options are available:</p>

<li>Obtain permissions from a land owner</li>

<li>Publish to a Decentraland World, see</li>

<li>to learn more.</li>

<p>See</p>

<p>for more details.</p>

<h2>Templates and examples</h2>

<p>When creating a new scene, choose amongst several base template scenes that include some basic code and 3d models. Use these to get started faster.</p>

<li>: here you can find a large collection of example scenes, each showcasing different mechanics that you can borrow. You can also clone any of these scenes and use it as a starting point.</li>

<li>: these can simplify many common tasks.</li>

<h2>Art assets</h2>

<p>If you’re an experienced artist or you have access to someone who is, you can create custom</p>

<code>.gltf</code>

<p>or</p>

<code>.glb</code>

<p>models for your scene. See</p>

<p>for tips on how to create 3D models for Decentraland.</p>

<p>There are many sources to obtain free or paid art assets. For example:</p>

<li>(3D models made primarily for 3D printing, but adaptable to Virtual Worlds)</li>

<h2>Run a local preview</h2>

<p>To run a preview of your scene, open a Visual Studio Code window on your project’s root folder and click the</p>

<strong>Preview</strong>

<p>button on the Decentraland Editor tab.</p>

<li>) for more details.</li>

<li>Check the</li>

<li>for tips on how to debug any issues.</li>

<strong>💡 Tip</strong>

<blockquote>: If you get stuck trying to debug an issue, visit the</blockquote>

<blockquote>to get help from other developers.</blockquote>

<em>Optional</em>

<p>: Your scene`s mechanics might rely on a 3rd party server to carry out player validations, permanent data storage, or other functionalities. See</p>

<h2>Publish to the test server</h2>

<p>Deploy your scene to a test server. This server is not private but only accessible via a specific URL, so players won’t bump into your tested scene involuntarily.</p>

<li>.</li>

<h2>Publish to Decentraland</h2>

<p>Once you’re happy with your scene, it’s time to publish it to the production environment. There all players will have access to it if they visit the scene’s coordinates.</p>

<li>.</li>

<strong>📔 Note</strong>

<blockquote>: Before you do, check that your scene has all the necessary metadata: name, description, a preview image, spawn points. See</blockquote>

<blockquote>for details.</blockquote>

<h2>Promote</h2>

<p>Once your scene is out there, you want to give it visibility and have people visit it. There are a number of ways you can shine a spotlight on it:</p>

<li>Share it on social media</li>

<li>: create an event to promote your scene</li>

<li>: ensure your scene is well positoned here, encourage players to vote your scene to get more visibility</li>

<h2>Iterate</h2>

<p>One great advantage of Decentraland is that you can easily iterate over your scenes. Measure your scene’s success with players, then keep publishing changes as you perfect the experience for your players.</p>

<li>.</li>

<h2>Giving back</h2>

<p>Decentraland is a community project, the community of creators learns together and leverage each other’s creations. Consider the following:</p>

<li>Join the</li>

<li>and help other developers in need of advice.</li>

<li>Share your scene’s code as an open source repo on GitHub.</li>

<li>Build a minimal example to share a specific reusable mechanic, as an open source repo on GitHub.</li>

<li>Make a PR to the</li>

<li>to include your scenes.</li>

<li>Write a library that encapsulates the complexity of common challenges, so others can overcome them easily.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/creator/wearables/wearables-overview/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/wearables/creating-wearables/

<title>Creating Wearables | Decentraland Documentation</title>

<strong>Creating Wearables</strong>

<h1>Creating Wearables</h1>

<h1>Intro</h1>

<p>This guide introduces the basics for creating custom 3D models for Decentraland wearables. It explains how the Decentraland avatar system works, and it illustrates how to properly model your own wearables.</p>

<em>Note: this guide assumes that you already have some basic to intermediate knowledge of 3D modeling. If you’re new to 3D modeling,</em>

<em>.</em>

<p>Before you get started, download the example files for reference meshes and textures:</p>

<h1>The Decentraland Avatar System</h1>

<p>The Decentraland “avatar system” is the broad collection of different body components and subcomponents that can be decorated with custom wearables. These components are:</p>

<li>Body shape</li>

<li>Head</li>

<li>Head shape</li>

<li>Eyebrows</li>

<li>Eyes</li>

<li>Mouth</li>

<li>Upper body</li>

<li>Lower body</li>

<li>Handwear</li>

<li>Feet</li>

<li>Accessories</li>

<strong>Base Body Shape</strong>

<p>After downloading the base avatar example file, load the model into your 3D editor, like Blender.</p>

<p>You’ll notice that each model contains 8 different meshes related to an armature. These meshes represent the head, eyebrows, eyes, mouth, upper body, lower body, hands and feet. You can use these example models as a reference and starting point for your own custom wearable.</p>

<p>Currently, there are two body shapes: A or B.</p>

<strong>Head</strong>

<em>The base head includes different meshes attached that can be customizables as wearables: Eyebrows, Eyes and Mouth work as transparency masks rendered in front of the face.</em>

<strong>Upper Body</strong>

<em>The upper body, or torso, of an avatar. Does not includes the hands.</em>

<strong>Lower Body</strong>

<em>The lower body includes the pelvis and legs of an avatar.</em>

<strong>Hands</strong>

<em>The hands are the same for Shape A and B, and start on the wrists of an avatar.</em>

<strong>Feet</strong>

<em>Feet include ankles and foot.</em>

<strong>Important: Do not modify the vertices “cuts/stitches” between the head, upper and lower body.</strong>

<p>Each part of the body has caps, making them “water tight”. These caps exist to prevent unsightly glitches if there are any animation clipping problems due to bad skin weighting. It’s best to not remove these caps when editing the mesh.</p>

<h1>Building 3D Models for Wearables</h1>

<strong>Tris, materials and texture limitations</strong>

<p>To ensure that Decentraland runs smoothly for all players, it is important to create wearable models without using too many triangles, materials and textures. The goal is to keep the 3D models as simple as possible so they can be easily rendered, without sacrificing too much detail.</p>

<p>There are limits for the number of triangles and textures that can be used for each wearable or accessory:</p>

<li>No more than 1.5K triangles per wearable slot: hat, helmet, upper body, lower body, feet and hair.</li>

<li>No more than 500 triangles per categories: mask, eyewear, earring, tiara, top_head and facial hair.</li>

<li>For hand accessories, the budget is 1k tris. If the hand wear hides the base hand of the avatar, the budget is 1.5k tris.</li>

<li>No more than 2 textures (at a resolution of 512x512px or lower) per wearable. All textures must be square at 72 pixel/inch resolution.</li>

<li>No more than 2 materials (without counting the AvatarSkin_MAT)</li>

<li>In the case of skin wearable, the amount of tris allowed are 5k and 5 textures.</li>

<strong>Wearable Tris Combiner:</strong>

<em>If the wearable hide other wearables the creator is allowed to combine the tris per slot. For example: if you want to do a jumpsuit you could create it using the upper body category hiding lower body; in that case you could have 1.5K</em>

<p>2= 3K triangles.*</p>

<p>In the case of the helmet, if you hide all the head wearables (head, earrings, eyewear, tiara, hat, facial_hair, hair and top_head you can reach the 4k tris, 2 materials and 2 textures)</p>

<h3>Max Width, Height and Depth Dimension of the Wearables</h3>

<p>There is a distance limit for wearables to ensure that they do not obstruct the visibility of other players screens or invading the scene space in an excessive way.</p>

<p>The dimension for the wearables cannot exceed:</p>

<code>Height: 2.42 m</code>

<p>,</p>

<code>Width: 2,42 m</code>

<p>,</p>

<code>Depth: 1,4 m</code>

<strong>Maps</strong>

<p>Decentraland wearables currently supports 3 types of maps, which are:</p>

<strong>Base Color</strong>

<li>: This is the main texture with the colors and details of your model.</li>

<strong>Emission</strong>

<li>: This map is for the parts that are glowing in your model. The emission map goes in a separated material specifically for emission.</li>

<strong>Alpha</strong>

<li>: This map is to handle transparency. It uses the opacity channel of the texture. (</li>

<em>It is always preferable to use Alpha Clip rather than Alpha Blend, using a black and white texture for the cutout</em>

<li>)</li>

<p>Because Decentraland reference client uses of a Toon Shader for the avatar materials, some maps are</p>

<strong>not necessary</strong>

<p>like:</p>

<strong>Normal maps:</strong>

<li>textures used to simulate high-resolution details on low-polygon models by encoding surface normals as RGB values.</li>

<strong>Roughness maps:</strong>

<li>textures used to define the surface roughness of 3D objects.</li>

<p>To use these maps in Decentraland the workaround is to bake them in one texture. You can find more info about baking textures here:</p>

<strong>Normals</strong>

<strong>Decentraland engine render only one side normals.</strong>

<p>(That means that a plane only will be visible from one side, the other side won’t be rendered) So, to ensure that your 3D is absolutely correct with the normals we can check that in two different ways.</p>

<p>The first one is to toggle the “Backface culling” on the Material properties settings, this is a good practice for spot inverted normals, like in this image:</p>

<p>The second way to check if the normals are right is by toggling “Face orientation” on the viewport overlay options. It will turn your model blue, but don’t worry. The blue faces are the correct ones and the red ones are the ones that needs to be corrected, you can find this option here:</p>

<strong>Armature</strong>

<p>Remember not to change any of the specifications, naming conventions, hierarchy, or transforms of the given armature. Changing any of these will cause the wearable to stop working in the client after exporting.</p>

<p>Be sure that the armature imported has no any</p>

<em>end</em>

<p>or</p>

<em>neutral</em>

<p>bones, otherwise the wearable is not going to work after exporting to the builder. If you are importing an .fbx that has this issue you can toggle</p>

<em>Ignore Leaf Bones</em>

<p>when importing the armature.</p>

<strong>Eyebrows, Eyes and Mouth</strong>

<p>These meshes work with a transparent shader so you don’t have to do anything aside from creating your own png texture for the new eyebrow, eye, or mouth style you want and placing it correctly into the UV map. These textures should be 256x256px and need to have an alpha channel for transparency.</p>

<p>Here are some example png textures:</p>

<em>Eyes and Eyewbrows use the same mesh and UV map.</em>

<em>Mouth mesh and UV map.</em>

<p>To visualize the final result you’ll need to use these nodes (in Blender):</p>

<strong>Masks:</strong>

<p>The Avatar Editor has different color options that players can choose from to customize their avatars.</p>

<p>These color choices are applied to a specific mask in the wearable.</p>

<p>The black area in the image on the left (Eyes Mask) indicates the area of the texture on the right (Eyes Base) that will be colored. It’s important to remember that irises always need to have a grey scale (if the iris is pure black, the tint isn’t going to work. By the contrary, if the iris is pure white it would be fully tinted by the selected color using the editor).</p>

<strong>Handwear</strong>

<p>There are two types of</p>

<strong>Handwear</strong>

<p>you can do under the same category.</p>

<strong>Replacing Hands:</strong>

<p>If you want to create handwear that replaces both hands you would probably need to override the</p>

<strong>hand</strong>

<p>base mesh. Doing that, the limit for the handwear wearable would be 1500 tris.</p>

<strong>Hand Accessories:</strong>

<p>Also you can create hand accessories like watches, bracelets, rings, etc. In that sense, the hand doesn’t need to be overridden and the limit is 1000 tris per item.</p>

<blockquote>Note: The</blockquote>

<strong>handwear</strong>

<blockquote>category is specifically for hand accessories or replacing hands that follow the avatar armature with proper skinning. It is not meant for items such as swords, shields, or any similar asset. Submitting an item that doesn’t follow these specifications may result in rejection by the curators committee.</blockquote>

<strong>Hair and Facial Hair</strong>

<p>There are two important things to remember when creating custom hair wearables.</p>

<p>First, try to follow the shape of the head. You can always refer to the head mesh provided in the example files if you need a place to start.</p>

<p>Second, if you want users to be able to change the color of the hair or facial hair using the avatar editor, then you need to paint the hair in grayscale and use “Hair” in the naming of the material (example “M_Hair_Short”). If you want to include other object which doesn’t is influenced by tint just don’t add that naming convention.</p>

<em>Lower tones of gray will appear darker and higher tones of gray will appear brighter, multiplied by the color selected from the user in the avatar editor.</em>

<strong>Base Materials and Textures</strong>

<p>There are two basic materials for avatar models. One is the material used for the wearable itself and the other one is used for the skin.</p>

<p>Each base mesh comes with its own skin texture.</p>

<p>The skin texture is made in grayscale so it allows the render engine to tint the skin of the avatar using the editor according to the user’s preference. In order to be able to tint the skin color using the editor the name of the material must be</p>

<em>AvatarSkin_MAT</em>

<p>.</p>

<blockquote>Important: always preserve the UV mapping for any body part that is exposed by a wearable, like the legs exposed by the shorts or skirts.</blockquote>

<p><img src="/images/wearables-and-emotes/creating-wearables/19_skin_uv.png"width=“600”/></p>

<p>You can create custom textures for your wearables! However, it’s always best to use a single, very small, texture file for each wearable. Using the default AvatarWearable_MAT texture provided in the example files will guarantee that your wearables are performant!</p>

<p>✨ In the case you want to do your own textures for the model we recommend the following addons for better UV Unwrapping:</p>

<strong>UVPacker</strong>

<p>UvPacker is a free addon that helps you to pack and organize your uvs with just a few clicks. As Decentraland works with 512x for the wearables this tool is a great assist to create better and more organized textures.</p>

<p>You can download directly from the website here:</p>

<strong>https://www.uv-packer.com/download/</strong>

<strong>UVToolKit</strong>

<p>UvToolKit is a addon that helps you to expand your UV settings and options to create great UVs in blender.</p>

<p>Here is the link for the download:</p>

<strong>https://alexbel.gumroad.com/l/NbMya</strong>

<strong>Skin Weighting</strong>

<p>Skin weighting is the process of determining which bones in the avatar’s rigging affect which wearables during an animation.</p>

<p>When skin weighting our new wearables, there are several considerations we need to keep in mind.</p>

<p>Each asset must be weighted to the full skeleton. For example, an upper body asset will look like this when applying skin weights:</p>

<p>Wearables that meet at intersections between body parts must be fully weighted to the same bone. For example, in these two green zones, the vertices in the neck need to be fully weighted to the “Neck” bone only.</p>

<strong>Key Bones</strong>

<p>The “key” bones to use when skin weighting are:</p>

<strong>Head Bone:</strong>

<p>for the hair, earrings, tiaras, eyes, eyebrows, mouth and any accessory that needs to follow the head’s movement.</p>

<strong>Neck Bone:</strong>

<p>for the main head and upper body’s intersecting vertices.</p>

<strong>Hips Bone:</strong>

<p>for the upper body and lower body’s intersecting vertices.</p>

<strong>Right Leg and Left Leg Bones:</strong>

<p>for the lower body and feet intersecting vertices.</p>

<strong>Right Forearm and Left Forearm</strong>

<p>for the hands intersecting vertices.</p>

<p>⚠️</p>

<strong>Hint</strong>

<li>Remember, you can use any bone to influence any mesh’s vertices! For example, you could create a new foot mesh for a tall pair of boots, and skin weight the top of the boot to the “Leg Bones”. Or, you could create some long hair and use the “Shoulder” or “Spine” bones to influence the hair when the avatar moves around.</li>

<li>It’s always recommendable to keep a symmetry from both sides of the rig, left and right should have similar bone influences.</li>

<li>As a common advice, a vertex cannot be influenced by more than 4 bones or joints.</li>

<li>Keep in mind to export the armature exactly as the one provided in the documentation. If it has any other bones like</li>

<em>"_end_bones"</em>

<li>or similar is not going to work on the client.</li>

<strong>Exporting Wearables</strong>

<p>When exporting wearables, make sure there are no other bones outside of the given Armature. A common problem when importing armatures between different software is the appearance of</p>

<em>"_end"</em>

<p>or</p>

<em>"_neutral"</em>

<p>bones. Be sure to remove those before exporting. Otherwise, it is very likely that the wearables will not work on the client afterwards.</p>

<p>To export the wearable, select the object and then the armature. Be sure to not export anything else, such as cameras, lights, or empty objects.</p>

<p>Next, export the wearable in</p>

<em>glTF2.0</em>

<p>format. Make sure you only export the wearable with its skinning properties, and without any other unnecessary features like animation or shape keys.</p>

<h1>Good Practices For Modeling</h1>

<strong>Change Your Mesh From T-Pose To A-Pose</strong>

<p>When you’re making wearables, the best way to visualize the final result, and to facilitate how you handle topology and position of the wearable is to work with the model in A-Pose. In order to do that you have to follow this simple steps:</p>

<li>First select the upper body, then you have to toggle “</li>

<strong>Edit mode</strong>

<li>” and “</li>

<strong>On cage</strong>

<li>” in the armature modifier.</li>

<li>Now, in pose mode you can rotate the arms 60°.</li>

<li>You can edit your mesh in A-Pose instead of T-pose.</li>

<li>But it is also good to keep in mind that you can easily alternate from A-Pose to T-Pose just toggling back the “Edit mode” and “On cage” in the armature modifier.</li>

<strong>Joint deformation:</strong>

<p>In order to get the best results on the wearable topology when it comes to joints (arms or legs, for example) it’s important to have good practices when creating loops. Here we can see the difference on the deformation of the mesh for different loop cuts:</p>

<p>A good way to ensure that everything is deforming correctly is to do a weight paint like the following example:</p>

<strong>Skirts</strong>

<p>A useful tip and good practice when modeling skirts/dresses is to add additional loopcuts in the intersections of the folds. This will be very handy when you have to paint the weights of the rig.</p>

<p>With this loopcuts the vertex influence look a lot more smooth and give you better results when you’re animating a skirt/dress.</p>

<p>Here is an example of how the bone influence should be:</p>

<strong>Hats</strong>

<p>A good practice when creating hats is to add a hair to the base mesh of the hat and then hide the category</p>

<em>hair</em>

<p>using the editor. Doing this is going to prevent that the hat clips with other hairs and reduce unexpected results.</p>

<strong>Add Polygon Count</strong>

<p>A valuable tip is to always keep on track of the polycount of your models. To do that in blender you need to turn on statistics on the viewport overlays panel.</p>

<h2>Resources</h2>

<p>In this shared folder you can find base models, textures, and various other resources, including examples of fully-created wearables. Feel free to leverage these resources when creating your own.</p>

# End of the information extracted from the URL: https://decentraland.org

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/overview/what-is-the-dao/

<title>What is the DAO | Decentraland Documentation</title>

<strong>What is the DAO</strong>

<h1>What is the DAO</h1>

<p>The Decentraland DAO is the decision-making tool for MANA, NAMES and LAND holders in Decentraland’s virtual world. Through votes in the DAO, the community can issue grants and make changes to the lists of banned names, POIs, and catalyst nodes. The DAO also controls the LAND and Estate smart contracts.</p>

<p>Issuing grants and making changes to the records and contracts owned by the DAO can only be done by using predefined proposals accessible in</p>

<p>.</p>

<p>These proposals, the votes submitted, and final results are all stored in IPFS via Snapshot, a gas-less voting client. Approved proposals with binding actions are enacted on the Ethereum blockchain by a committee by means of a multi-sig wallet. This committee is overseen by the Security Advisory Board (SAB), another multisig with trusted key holders. This Committee was voted into place by the community in the previous release of the DAO.</p>

<p>.</p>

<p>The remainder of this document explains in greater detail what the DAO is, how it works, and what it can be used for.</p>

<p>For a detailed tutorial on how to use the Decentraland DAO, visit the</p>

<p>.</p>

<h2>The DAO is powered by smart contracts</h2>

<p>All DAOs, or decentralized autonomous organizations, are part of a new approach to organizational management and decision making made possible by Ethereum.</p>

<p>Ethereum extended what’s possible with blockchains by adding the ability to decentralize the handling of data more complex than just records of token ownership. Ethereum did this by allowing people to put smart contracts on a blockchain.</p>

<h3>What’s a smart contract?</h3>

<p>A smart contract is a computer program that is run on the Ethereum blockchain. It can store both functions (bits of code that do things) and data (information). Smart contracts are often compared to vending machines. If you put in specific inputs, you get specific outputs. If I walk up to a vending machine, insert $1, and press the “orange soda” button, then I’ll get an orange soda if there’s any left in the machine. If there’s no more orange sodas, I’ll get my dollar back.</p>

<p>Smart contracts work the same way, people can interact with them by sending information with the expectation of receiving specific results or information. Just like the vending machine doesn’t have a little person inside handing out sodas, smart contracts are automatic (dare we say, autonomous).</p>

<p>If you’d like to learn more about Ethereum smart contracts, the</p>

<p>is the best place to dive in.</p>

<h3>The DAO controls Decentraland’s critical smart contracts</h3>

<p>The second important quality of smart contracts is their</p>

<strong>ability to own other smart contracts</strong>

<p>.</p>

<p>That’s right, every smart contract has its own address (just like the address of your Ethereum wallet) that allows it to own other smart contracts and cryptocurrencies.</p>

<p>So, in slightly more technical terms, a DAO is one or more smart contracts that can perform specific, pre-defined tasks and maintain ownership of cryptocurrencies. DAOs are built in such a way that they will only perform their tasks under specific conditions, such as the passing of a proposal voted on by a group of people who own a certain token (like MANA, NAMES or LAND). All of this is done on a blockchain. Hence the name, “decentralized autonomous organization”.</p>

<p>Decentraland’s DAO also owns a sum of MANA and other tokens along with the LAND and Estate smart contracts.</p>

<p>has been set aside to help sponsor community grants and to help grow the Decentraland platform according to the decisions and directions voted on by the community.</p>

<strong>📔 Note</strong>

<p>The DAO does not own, and so cannot modify, the</p>

<p>.</p>

<p>The MANA contract’s owner is the</p>

<p>. The owner of the TokenSale contract is a separate contract that self-destructed on deployment (</p>

<p>). This means that there is no other contract or wallet with the permissions to modify or pause the MANA supply.</p>

<p>There is other information that the DAO controls as well, such as the list of harmful or offensive names that are not permitted in Decentraland, a list of notable locations (POIs or Points of Interest) to be promoted to new users, and the list of community run servers that host Decentraland’s virtual world.</p>

<p>Transferring any of the DAO’s MANA, modifying the LAND or Estate smart contracts, or modifying any of the other listed information controlled by the DAO</p>

<strong>can only be done</strong>

<p>with the approval of MANA, NAMES and LAND holders.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/overview/what-is-the-dao/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/dao/dao-userguide/

<title>DAO User Guide | Decentraland Documentation</title>

<strong>DAO User Guide</strong>

<h1>DAO User Guide</h1>

<h2>Table of Contents</h2>

<h2>Logging in</h2>

<p>To get started with the DAO, visit</p>

<p>. You will be presented with a welcome screen and quick start tutorial.</p>

<p>After reading the quick start tutorial, click</p>

<strong>Sign In</strong>

<p>. You must connect a wallet in order to use the DAO. Currently, you can use either</p>

<strong>Metamask</strong>

<p>or</p>

<strong>Fortmatic</strong>

<p>. Make sure the wallet you’re using holds the relevant tokens for participating in the DAO (MANA, NAMES, or LAND)</p>

<p>After connecting your wallet you will be taken to the homepage of the DAO featuring a list of all currently active proposals.</p>

<h2>Voting power</h2>

<p>Voting power is calculated from the total balance of MANA, NAMES and LAND associated with the wallet connected with the DAO.</p>

<strong>The DAO looks at both your wrapped and unwrapped balances, so you do not need to unwrap any MANA to achieve your full voting power.</strong>

<p>However, you can unwrap any previously wrapped MANA at any time from the “Voting Power” tab. There is still a gas fee associated with unwrapping MANA as it is a transaction on the Eth mainnet.</p>

<p>Your vote in the Decentraland DAO is weighted according to the balance of MANA, NAMES and LAND associated with the account you log in with.</p>

<p>To view your current voting power, navigate to the</p>

<strong>Voting Power</strong>

<p>tab.</p>

<h4>How is voting power calculated?</h4>

<p>Voting power is represented as</p>

<strong>“VP”</strong>

<p>. MANA, NAME and LAND contribute to your total voting power as follows:</p>

<li>1 MANA contributes 1 VP</li>

<li>1 NAME contributes 100 VP</li>

<li>1 LAND parcel contributes 2000 VP</li>

<li>Each Estate is worth 2000 multiplied by the number of single LAND parcels in that Estate. For example, an Estate with 2 parcels will contribute 4000 VP to your total voting power.</li>

<h4>What happens if your voting power changes before a proposal closes?</h4>

<p>If your MANA or LAND balance changes, it will affect your voting power, but only on proposals that are created after your balance changes.</p>

<p>The moment a new proposal is created, the DAO looks at all voters’ MANA and LAND balances to calculate their voting power. In other words, when you vote on a proposal, the voting power of your vote will be equal to the balance you had at the instant the proposal was initially created. You may vote with that VP, then change your MANA/LAND balance without affecting the weight of your vote.</p>

<h4>Why does the Decentraland DAO use weighted votes?</h4>

<p>If the Decentraland DAO gave each Ethereum address one vote, and each vote was weighted equally, then users could create as many separate addresses as they wanted to obtain more voting power.</p>

<p>Determining voting power by considering the MANA, NAME and LAND balances is currently the most secure way to limit the amount of influence each voter may have. Additionally, the more MANA, NAME or LAND you own in Decentraland, the greater your personal stake is considered to be, thus earning your vote more influence within the DAO.</p>

<h2>Approve/Reject conditions</h2>

<p>Depending on the type of proposal, a certain amount of participating VP is needed to consider the votation valid. You will see this referenced on the Governance dApp as the</p>

<strong>Acceptance Threshold</strong>

<p>for the proposal. Once the acceptance threshold has been met, a proposal is approved if the total voting power in favor of the proposal is greater than the total voting power against the proposal. This is the typical 50/50 majority model we expect to see in most democratic votes.</p>

<p>The only type of proposal that do not follow this rule are the</p>

<strong>Pre-proposal polls</strong>

<p>. Since these proposals are considered a non-binding mechanism to gather community feedback around an idea, they do not have predefined Yes/No options for voting. Users might add more that two options making them a multiple choice poll. It is important to mention that if the Pre-proposal polls reach the Acceptance Threshold defined of 500k VP, they might get promoted to a</p>

<strong>Draft proposal</strong>

<p>and end up being a binding</p>

<strong>Governance proposal</strong>

<p>.</p>

<h2>Browsing all proposals</h2>

<p>To view all proposals in the DAO, visit</p>

<p>. The homepage of the DAO lists all recently added proposals sorted from most recent to oldest, by default.</p>

<p>You can filter proposals by</p>

<strong>Outcomes</strong>

<p>:</p>

<strong>Active</strong>

<li>– proposals that are currently being voted on</li>

<strong>Passed</strong>

<li>– proposals that have been approved by the community</li>

<strong>Rejected</strong>

<li>– proposals that have already been voted on and either were rejected by the community or didn’t met the acceptance threshold</li>

<strong>Enacted</strong>

<li>– proposals that have been enacted on-chain by the DAO Committee</li>

<strong>Finished</strong>

<li>– proposals that are closed, but do not have yes/no results, like multiple choice polls</li>

<p>You can also filter proposals by</p>

<strong>Category</strong>

<p>using the category column in the left side of the UI:</p>

<strong>All proposals</strong>

<li>– displays all proposals regardless of category or outcome</li>

<strong>Catalyst Node</strong>

<li>– only displays proposals to add new Catalyst nodes</li>

<strong>Point of Interest</strong>

<li>– only displays proposals to add new POIs</li>

<strong>Name Ban</strong>

<li>– only displays proposals to ban a name</li>

<strong>Grant Request</strong>

<li>– only displays grant requests</li>

<strong>Pre-proposal Poll</strong>

<li>– only displays non-binding polls</li>

<strong>Draft proposal</strong>

<li>– only displays draft proposals</li>

<strong>Governance proposal</strong>

<li>– only displays final binding governance proposals</li>

<p>To view only proposals that have been passed, click the</p>

<strong>Enacted</strong>

<p>tab. Enacted proposals in this tab are sorted from most recent to oldest by default.</p>

<h2>Viewing a proposal</h2>

<p>To read a proposal, just click on the proposal’s title to view the details page.</p>

<p>Each proposal detail page includes all of the descriptive information provided by the person who submitted the proposal.</p>

<p>You’ll also find links to the proposal’s discussion thread in the Forum, buttons to add a proposal to your watch list, the current voting results, buttons to vote, the acceptance threshold, your current Voting Power and who voted on the proposal.</p>

<p>Proposal details pages also list the unique avatar name associated with the Ethereum address that opened the proposal, if one exists, and the start and end dates of the proposal.</p>

<p>Finally, you’ll see a link to the proposals entry on Snapshot – the voting platform used by the Decentraland DAO.</p>

<h2>Adding proposals to your watch list</h2>

<p>To add a proposal to your watch list, view the proposal’s detail page and click</p>

<strong>Add to my Watchlist</strong>

<p>.</p>

<p>To remove a proposal from your watchlist, click</p>

<strong>Remove from my Watchlist</strong>

<p>from the proposal’s detail page. You can also click the red flag icon on any proposal currently in your watchlist to remove it.</p>

<h2>Participating in the Forum discussions</h2>

<p>As a governance platform, the Decentraland DAO is most effective when paired with frequent discussion within the community. Every time a new proposal is opened on</p>

<strong>governance.decentraland.org</strong>

<p>, an accompanying topic is automatically opened on</p>

<p>.</p>

<p>Before casting your vote, please take the time to view and join in on these forum discussions. Click the button</p>

<strong>Discuss in the forum</strong>

<p>from the details page of any DAO proposal you wish to discuss. You can also browse open topics by navigating to</p>

<p>, heading to the</p>

<strong>Governance</strong>

<p>category, and browsing the open topics.</p>

<p>You don’t need to own tokens to participate in these discussions! Everyone is welcome to contribute to the conversation.</p>

<h2>Voting</h2>

<p>To vote on a proposal, log into the DAO at</p>

<p>with a wallet that contains MANA, NAME or LAND.</p>

<strong>Minimum balance needed to vote:</strong>

<p>Only MANA, NAME or LAND holders may vote on proposals in the Decentraland DAO.</p>

<strong>The current minimum balance needed to have a weighted vote on proposals in the DAO is 1VP</strong>

<p>Voting with a balance of zero will result in a vote with a weight of 0, which does not impact the final results.</p>

<p>To vote on a proposal once you’ve connected your wallet, simply view the proposal’s detail page and click the</p>

<strong>VOTE YES</strong>

<p>or</p>

<strong>VOTE NO</strong>

<p>button, or select one of the multiple choice options if it is a poll, according to how you’d like to vote.</p>

<p>Make sure that you read the full proposal so that you understand the issue being discussed and what will happen if the proposal is approved or rejected.</p>

<p>After clicking the Vote button, your connected Ethereum wallet will prompt you to sign the transaction. Remember, this is only a signed transaction, and requires no gas fee.</p>

<p>You will be given the option of adding the proposal to your watch list, this is a nice way to track the proposals you’re interested in. If you don’t want to add the proposal to your Watchlist, just click</p>

<strong>No thanks</strong>

<p>.</p>

<p>After submitting your vote, you can change it at any time leading up to the end of the voting period - as shown in the proposal’s detail page.</p>

<h4>What happens if your VP changes before a proposal is complete?</h4>

<p>The DAO calculates your voting power for each individual proposal at the moment each proposal is created. If your VP changes after this moment, it will not affect your vote on that proposal.</p>

<p>For a full discussion of voting power, and how and when it is calculated, please see the</p>

<p>section of the User Guide.</p>

<h2>Creating a proposal</h2>

<p>To create a new proposal in the Decentraland DAO, start by logging in at</p>

<p>and connecting a wallet that contains MANA, NAME or LAND.</p>

<p>After logging in and connecting your wallet, click</p>

<strong>Submit a proposal</strong>

<p>and select the proposal category you want to use. Each category will provide a form allowing you to provide the relevant information for your proposal.</p>

<p>The form for every category is different, so make sure that you select the correct category for your proposal. The proposal forms in the DAO support Markdown, so you can format the content of your proposal to make it more readable. This is especially helpful for longer proposals.</p>

<p>To preview your rendered Markdown text, toggle the</p>

<strong>Preview</strong>

<p>switch. If you aren’t familiar with Markdown, you can use simple plain text.</p>

<p>Some proposal categories have minimum VP submission thresholds, meaning you have to have at least certain amount of VP to submit the proposals. This will be informed to you on the Governance dApp.</p>

<p>After completing the proposal form for the category you’ve selected, click</p>

<strong>Submit proposal</strong>

<p>. After successfully submitting your proposal, you will be taken to your new proposal’s detail page where you can add it to your watchlist and cast your vote.</p>

<h2>Proposal Categories</h2>

<h3>Binding Proposals</h3>

<h4>📍 Point of interest</h4>

<p>Points of interest are notable locations in Decentraland. These “POIs” are promoted in several areas of the virtual world’s UI, and are promoted as good places for users to explore, especially people new to Decentraland.</p>

<p>If you have created a location, or have found a location that you think should be on this list, or if you think a current POI should be removed since it’s no longer interesting, you can use this proposal category to present your suggestion to the DAO.</p>

<h4>🚫 Name ban</h4>

<p>The “banned name” list includes offensive or harmful avatar and location names that are not permitted in Decentraland. Any names on this list cannot be claimed, used, or transferred between users. To suggest banning a name, you can use the Name ban proposal category in the DAO.</p>

<h4>🌐 Catalyst nodes</h4>

<p>Catalyst nodes are the community-run servers that provide the content and establish the peer-to-peer connections needed to keep Decentraland’s virtual world running. Whenever a user visits play.decentraland.org, they are connected to one of these nodes. However, only nodes that have been approved by the DAO are used in Decentraland’s network.</p>

<p>To suggest the addition of a new node to the network, you can use the Catalyst Node category.</p>

<h3>Governance Process Proposals</h3>

<p>Some proposals are not as simple as adding or removing an item from a list, they require community signaling, discussions and implementation paths. These proposals should be submitted thorugh a three-stage governance process that starts with a poll and ends with a binding proposal.</p>

<p>The voting process includes three steps: a Pre-Proposal Poll, a Draft Proposal, and a Governance Proposal. Each tier will have progressively increasing submission and passage thresholds to ensure important governance decisions are made by a representative majority (based on Voting Power). Each step must reach the defined VP threshold to be promoted to the next one.</p>

<h4>📊 Pre-proposal Poll</h4>

<p>This is the first step to get to the final binding Governance proposal. Polls in the Decentraland DAO are non-binding, multiple choice questionnaires that may be used to measure the community’s general opinion or sentiment regarding different issues. They are non-binding in that the DAO does not automatically act on the results of any of these polls. If a pre-proposal poll gathers enough participating VP (500k VP is the acceptance threshold) it might get promoted to Draft proposal.</p>

<h4>📊 Draft Proposal</h4>

<p>A Draft Proposal presents a potential policy to the community in a structured format and formalizes the discussion about the proposal’s potential impacts and implementation pathways. A Draft Proposal that fails or does not reach this threshold can be amended and resubmitted one time. If a Draft proposal gathers enough participating VP (1M VP is the acceptance threshold) it might get promoted to a binding Governance proposal.</p>

<h4>📊 Governance Proposal</h4>

<p>This is the last step of the Governance process and is the only one that is binding. This proposal must flesh out all the details, data, methods, assesments or any other relevant information for implementing this proposal. A Governance proposal is accepted if it meets the acceptance threshold of 6M VP and the Yes option gets a simple majority.</p>

<h2>Deleting a proposal</h2>

<p>Proposals can only be deleted by the person who created them.</p>

<p>To delete one of your proposals, navigate to the details page of the proposal you want to delete. Click</p>

<strong>Delete Proposal</strong>

<p>at the bottom of the right hand column. You will have to confirm your deletion.</p>

<p>Be careful! Deleted proposals cannot be restored!</p>

<p>If you delete a proposal after people have voted on it, nothing will happen. Deleted proposals with binding actions will not be enacted by the DAO Committee.</p>

# End of the information extracted from the URL: https://decentraland.org

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/faq/

<title>FAQ | Decentraland Documentation</title>

<strong>FAQ</strong>

<h1>FAQ</h1>

<h2>What equipment or software do I need to play in Decentraland?</h2>

<p>A PC or Mac running Chrome, Firefox or Brave. See</p>

<strong>Can I play on a mobile device?</strong>

<p>For the moment we don’t support mobile devices. But please stay tuned!</p>

<strong>Can I log in from multiple computers?</strong>

<p>Yes, you can run Decentraland from multiple computers as long as you have your digital wallet installed on each machine.</p>

<strong>Can I use a different browser?</strong>

<p>While it may be technically possible to use another browser, we recommend Chrome, Firefox or Brave to ensure optimal performance.</p>

<h2>Can I login with my email or social media account?</h2>

<p>Yes! You can easily login with your email address or social media account.</p>

<h2>Do I need a wallet to play in Decentraland?</h2>

<p>If you want to fully enjoy the Decentraland experience, we recommend you get yourself a digital wallet. Digital wallets work as your personal account, keeping all your digital assets (such as names, collectibles, LANDs) and in-world progress safe.</p>

<p>If you choose to experience Decentraland Explorer without a wallet, the information will only be locally stored: you will be able to walk around, customize your Avatar and chat with others in-world, but you won’t have the chance to receive daily rewards, participate in events or log in with a different device using the same Guest ID and Avatar.</p>

<p>If this is the first time you’re hearing about digital wallets, we recommend reading</p>

<p>.</p>

<h2>I lost my digital wallet! What happens with my account?</h2>

<p>If you lose access to your wallet you will lose your Avatar, name, any of the wearables or NFT items stored within. Please remember to always keep your wallet recovery pass phrases in a safe and secure location.</p>

<h2>What is MANA?</h2>

<p>is Decentraland’s fungible, ERC20 cryptocurrency token. MANA is burned, or spent, in exchange for LAND parcels. For a current summary of critical stats like total and circulating supply, please visit our</p>

<p>transparency dashboard. See the</p>

<p>for more information.</p>

<h2>Will I be able to buy things other than LAND with MANA?</h2>

<p>Yes! In addition to burning MANA in exchange for LAND, users will be able to trade MANA with other users in exchange for goods and services hosted within Decentraland.</p>

<h2>Some players have fancy wearables. How can I get them?</h2>

<p>The Avatar editor provides a big selection of wearables and accessories – all for free. You can also buy exclusive wearables in the</p>

<p>or earn them by participating in different events.</p>

<h2>What do the collectibles colors mean?</h2>

<p>Each collectible is assigned a rarity category, represented by a different name and color and denoting supply of collectible.</p>

<p>Their maximum issuance is:</p>

<li>Common: 100000</li>

<li>Uncommon: 10000</li>

<li>Rare: 5000</li>

<li>Epic: 1000</li>

<li>Legendary: 100</li>

<li>Mythic: 10</li>

<li>Unique: 1</li>

<h2>Can I claim my Avatar name later?</h2>

<p>Yes. Visit the</p>

<p>page in the Builder to claim it. All you need is an installed digital wallet and at least 100 MANA to burn. Another alternative is to buy a name in the</p>

<p>.</p>

<h2>How can I block or report a player?</h2>

<p>Click on another player’s Avatar to see their card, then click on the tab block to view options. By blocking a player you will still see them on screen but they won’t be able to write to you on the chat window. If you report a player, you will be able to bring a player’s conduct to the attention of</p>

<p>.</p>

<h2>How can I report a scene?</h2>

<p>Locate the Flag Scene button (Beneath the mini map). Select a category that you believe the scene belongs to. Identify the issues present in the scene and submit the report.</p>

<h2>What is LAND?</h2>

<p>LAND is a non-fungible digital asset maintained in an Ethereum smart contract. LAND is divided into parcels that are referenced using unique x,y cartesian coordinates. Each LAND token includes a record of its coordinates, its owner, and a reference to a content description file or</p>

<p>that describes and encodes the content the owner wishes to serve on his or her land.</p>

<h2>How large is a tile of LAND?</h2>

<p>Land parcels are 16m x 16m, or 52ft x 52ft. Height is restricted based on</p>

<p>.</p>

<h2>What is an Estate?</h2>

<p>Like LAND, an estate is a non-fungible digital asset. An estate is an association of two or more directly adjacent parcels of LAND. These parcels must be directly adjacent and cannot be separated by a road, plaza or any other parcel. By connecting parcels to form Estates, you can more easily manage your larger LAND holdings. Estates are especially useful when building larger scenes that span more than one parcel.</p>

<h2>How can I buy LAND or Estates in Decentraland?</h2>

<p>You can visit the</p>

<p>to browse through all of the available LANDs or Estates of LAND that are currently for sale.

On December 15th, 2017, we held our first LAND auction, called the Terraform Event, to distribute the first parcels of LAND to the community. The auction concluded in January 2018 and LAND tokens have been distributed to participants.</p>

<h2>What does ‘owning’ virtual LAND mean and how does it work?</h2>

<p>LAND within Decentraland is represented by non-fungible LAND tokens (meaning that each is unique and cannot be replicated) that track ownership on the Ethereum blockchain. Owning LAND within Decentraland is akin to owning any other unique, crypto asset like</p>

<p>or</p>

<p>, however you will be able to use your LAND within Decentraland to build three dimensional spaces and applications. LAND is built on our</p>

<p>standard, making it a digital asset that can be traded with other users, like other digital assets.</p>

<h2>Why is LAND scarce?</h2>

<p>Like CryptoKitties and CryptoPunks, LAND is a non-fungible digital asset. To ensure that the value of LAND parcels remains stable, the amount of land in Decentraland corresponds to the fixed, total amount of MANA.</p>

<p>Without LAND scarcity, many parcels would likely be left abandoned, negatively impacting the quality of content in Decentraland and the user experience.</p>

<h2>Does Decentraland run on top of its own blockchain?</h2>

<p>Decentraland uses the Ethereum blockchain to store and verify information about LAND ownership and LAND content. It does not run on its own independent blockchain. Content within Decentraland is hosted and served to users via a network of community-owned content servers.</p>

<h2>Who validates transactions?</h2>

<p>The Ethereum LAND smart contract registers any changes to the state of a parcel of LAND, such as a change in the contents of the LAND or a transfer of ownership. These changes are recorded and verified by the Ethereum blockchain.</p>

<h2>How is content distributed?</h2>

<p>The visual, audio and three dimensional content of Decentraland will be stored in a network of content servers. Anyone can submit a server to join this network, but it must be voted on by the community. This is handled by a</p>

<p>. When you visit Decentraland, the content needed to render your location will be pulled from the content servers. Each LAND token, stored on the Ethereum blockchain, is associated with an x,y location within the world and links to the content for that location.</p>

<h2>What tools should I use to start building in Decentraland?</h2>

<p>There are two ways to create 3D content for Decentraland:</p>

<p>The</p>

<p>is an easy drag and drop visual tool. You have access to a large library of pre-made items, including interactive items that react to player feedback. You can also import and use your own custom 3D models.</p>

<p>The</p>

<p>is for creating scenes writing code, which gives you much more power and flexibility.</p>

<p>Both tools can also be combined. You can create a scene visually with the Builder, then export it and work with its code to add interactive functionality. You can also use the SDK to create</p>

<p>and place these using the Builder.</p>

<p>You will be able to use tools like SketchUp, Blender, and Maya to create 3D models that you can then import into Decentraland, these models must be in</p>

<em>.gltf</em>

<p>or</p>

<em>.glb</em>

<p>format.</p>

<h2>Will I be able to control who can see content on my parcels?</h2>

<p>Yes. You will be able to control how certain content on your parcel is served to other users within the Decentraland platform. For example, you could make 3D models, images, video, or sound content only visible to a player in Decentraland after they have submitted a payment or fulfilled some other requirement.</p>

<p>However, remember that by uploading content to the content servers you are essentially making it publicly available since the content servers are a distributed file system. While we intend to make it possible to limit how that content is served to players through a Decentraland client, the content itself will always remain discoverable on the content servers.</p>

<p>You will be able to control who you can see and interact with (and who can see and interact with you) within Decentraland. For example, imagine that you have a house on your parcel and you only want to invite certain friends into your house. You will be able to specify which players you can see (and which players can see you) within your house, but you won’t necessarily be able to prevent anyone from seeing your house or its contents since the assets required to render your house reside on the content server.</p>

<h2>Can I monetize my content?</h2>

<p>Yes. You are free to decide whether you will charge other players to access your content and how you will implement said charge. Decentraland is in no way involved in the monetization of your content and does not guarantee any return, profit or income. The success of the platform depends entirely on the efforts of the users. Your fate, your success, and eventually your journey, depends on you, your efforts, your imagination.</p>

<h2>I need support! Where can I contact you?</h2>

<p>In case of any questions or issues, please reach out to us at</p>

<p>or visit</p>

<p>.

You can also join our</p>

<p>and visit our #help channel to ask whatever questions you have. We’ll answer as soon as possible. Our friendly community members can help too. While you’re there why not check out some of the other channels to learn more about Decentraland?</p>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/faq/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/general/hardware-requirements/

<title>Hardware requirements | Decentraland Documentation</title>

<strong>Hardware requirements</strong>

<h1>Hardware requirements</h1>

<p>These are the minimum hardware specs required to successfully run the Decentraland explorer.</p>

<p>The minimum requirements differ depending on if you’re running Decentraland via a web browser, or if you’re running a locally installed desktop client. The desktop client has considerably lower requirements, as it’s not limited by the browser.</p>

<strong>📔 Note</strong>

<blockquote>: Decentraland currently does not run on any mobile devices.</blockquote>

<h2>Web Client</h2>

<p>Minimum GPU</p>

<li>Intel HD/UHD 9th gen or equivalent</li>

<p>Recommended GPU</p>

<li>Geforce 900 series or equivalent</li>

<h2>Desktop Client</h2>

<p>Minimum GPU</p>

<li>AMD Radeon HD 6700 series or equivalent</li>

<p>Recommended GPU</p>

<li>AMD Radeon RX 500 series or equivalent</li>

<p>Minimum GPU MEMORY:</p>

<li>1GB</li>

<p>Recommended GPU MEMORY:</p>

<li>4GB</li>

<p>Minimum RAM:</p>

<li>4GB</li>

<p>Recommended RAM</p>

<li>16GB</li>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/faq/

# Start of the information extracted from the URL: https://docs.decentraland.org/blockchain-integration/get-a-wallet/

<title>Get a Wallet For Beginners | Decentraland Documentation</title>

<strong>Get a Wallet For Beginners</strong>

<h1>Get a Wallet For Beginners</h1>

<h2>What is a wallet?</h2>

<p>Decentraland uses the Ethereum blockchain to record the ownership of all digital assets and tradable items.</p>

<p>Digital wallets are tools that work as a bridge between the blockchain and the dApp (decentralized applications). This means that with a wallet you will be able to monitor your available funds, transaction history and security options.</p>

<h2>Do I need a wallet to play in Decentraland?</h2>

<p>If you want to fully enjoy the Decentraland experience, we highly recommend you get yourself a digital wallet. Why? Because it will work as your personal account, allowing you to connect from different devices, keeping all your digital assets (such as names, collectibles, LANDs) and progress safe.</p>

<p>If you choose to experience Decentraland without a wallet, the information will be only be locally stored: you will be able to walk around, customize your avatar and chat with others in-world, but you won’t have the chance to receive daily rewards, participate in events or log in with a different device using the same Guest ID and Avatar.</p>

<h2>How do I get a digital wallet?</h2>

<p>To enter Decentraland, you must use a wallet that is integrated to your web browser, so we recommend you</p>

<h2>Wallet address</h2>

<p>All wallets have a public and private key. A public key Is a unique identifier for your wallet and it looks like this:</p>

<strong>0xcba113f589805095a892ecefdb4eb83eff45d98</strong>

<p>. It is basically a name that you can share freely with others and it’s used to direct assets to your wallet.</p>

<p>The private key is used by your wallet to sign each transaction and certify that it was truly sent by you. It is also used to restore your wallet in case you forget your password.</p>

<p>Keep in mind that a digital wallet is like a bank account, so make sure you</p>

<strong>don’t forget your password, or backup phrase. Keep them in a safe place and don’t share them with anyone.</strong>

<h2>What is Ether (ETH), and how do I send it to my wallet?</h2>

<p>For executing transactions, you’ll need to put money in your wallet. dApps based on Ethereum, like Decentraland, use Ether: a digital currency that powers the Ethereum network. It acts like any other currency, in that its value fluctuates with the market.</p>

<li>You need to convert your currency (e.g. USD, CAD, GBP) into Ether to pay for things such as a collectibles.</li>

<h2>How do I get Ether?</h2>

<em>For US citizens only:</em>

<p>You can purchase ETH for the MetaMask Browser Extension with the Coinbase service.</p>

<li>Click the</li>

<code>Buy</code>

<li>button.</li>

<li>Select the</li>

<code>Coinbase</code>

<li>option.</li>

<li>Click the</li>

<code>Continue to Coinbase</code>

<li>button to purchase Ethereum.</li>

<em>For the rest of the World:</em>

<p>You need to buy ETH from Coinbase or another exchange using normal fiat currency.</p>

<li>Copy your MetaMask address by clicking on your name account and address.</li>

<li>Select</li>

<code>Copy Address to clipboard</code>

<li>.</li>

<li>Go to Coinbase or another exchange.</li>

<li>Click</li>

<code>Accounts</code>

<li>in your top navigation.</li>

<li>Select your ETH wallet and click</li>

<code>buy</code>

<li>.</li>

<li>Follow the steps to</li>

<code>Add payment method</code>

<li>and paste your MetaMask address with the amount you’d like to transfer.</li>

<h2>What is MANA and how do I get it?</h2>

<p>is Decentraland’s fungible (reproducible or interchangeable) cryptocurrency token. It is burned, or spent in exchange for LAND parcels, wearables and names.</p>

<p>Steps to buy MANA:</p>

<li>First, you need to register with an exchange that lists MANA (such as</li>

<li>,</li>

<li>,</li>

<li>).</li>

<li>Secondly, you will need to deposit funds into your account. While things change rapidly in the crypto world, it’s not likely that there’s an exchange available to convert your USD directly for MANA. If that’s the case, you’ll first need to obtain a cryptocurrency listed in a currency pair with MANA, such as Ether (ETH), and then exchange it for Decentraland’s native token.</li>

<li>Third, once logged into your exchange account, click on the “Markets” or “Exchange” link and search for your desired currency pairing. For example, MANA/ETH. In the “Buy” field, you can then specify the amount of MANA you want to buy or the amount of ETH you want to spend. Make sure you take a moment to review the full details of the transaction including any fees that apply and the total cost of completing your purchase.</li>

<h2>What is ‘gas’?</h2>

<p>‘Gas’ is a shorthand term used to describe the cost of powering a transaction or contract in Ethereum. Because blockchain is decentralized, every transaction is distributed through multiple computers, not a central server. This ensures each token – in this case, each collectible – is secure and one-of-a-kind. It also takes a lot of computational power, which is covered by the cost of gas.</p>

<em>‘Gas’ is composed of two parts: Gas Price and Gas Limit. Gas Price is what you offer to pay the miners (in a tiny measurement of ether called ‘gwei’) for each operation to execute the smart contract. Gas Limit is how many operations you let them do before they run out of gas and drop the transaction.</em>

<em>1 gwei = 1/1,000,000,000th of an Ether.</em>

<p>To summarize, Gas Price (gwei) is the amount of Ether offered per gas unit to pay miners to process your transaction. The higher the gas price you set, the faster your transaction will get processed. So, for more important transactions – such as a collectible that you really like ;D – think about increasing the suggested gas price.</p>

<strong>For extra technical information, visit</strong>

# End of the information extracted from the URL: https://docs.decentraland.org/blockchain-integration/get-a-wallet/

# Start of the information extracted from the URL: https://docs.decentraland.org/player/blockchain-integration/ethereum-essentials/

<title>About the blockchain | Decentraland Documentation</title>

<strong>About the blockchain</strong>

<h1>About the blockchain</h1>

<p>All blockchains are in essence decentralized databases that are distributed among the machines of a network. Transactions are grouped into “blocks” and processed sequentially to form a</p>

<em>chain</em>

<p>of events.</p>

<p>Ethereum is one of the most popular blockchains. What sets it apart from others, such as Bitcoin, is that it uses the blockchain as storage for more than just a record of currency transactions. Ethereum can store more complex information to distinguish different kinds of tokens or even handle unique tokens with specific characteristics. The Ethereum blockchain also runs smart contracts, these allow to execute more complex transactions that can also depend on agreed upon events.</p>

<p>Decentraland uses the Ethereum blockchain to record the ownership of the digital assets, and other tradable items that can be read and reacted to by a 3D scene.</p>

<p>The blockchain isn’t used to store the scene state, player position or anything that needs to change in real time as a player interacts with a scene, all of that is either stored locally on each player’s machine, or on a private server owned by the scene owner. The developers of each scene must choose what information is worth storing on the blockchain, and what to store in a private server.</p>

<h2>Wallets</h2>

<p>Ethereum tokens are held by wallets. An Ethereum wallet can hold various tokens, including Ether, MANA, LAND, and other tokens that may be used by games or experiences in Decentraland.</p>

<p>There are many wallet providers where you can hold Decentraland tokens. To use the Marketplace, or to enter Decentraland, you must use a wallet that is integrated to your web browser, so we recommend that you use:</p>

<li>/</li>

<li>hardware wallets</li>

<p>Every wallet has a public and a private key. The hash of your public key is your wallet’s unique address, used to route transactions and identify a player. Your private key is used by your wallet to sign each transaction that you send to the network and certify that it was truly sent by you. Your private key is also used to restore your wallet in case you forget your password, so keep it in a safe place and don’t share it with anyone.</p>

<p>In Decentraland, player identities are built around wallets. Since wallet public keys are unique, your scene can use them to identify a Decentraland user in a persistent way. Wallets can also hold different tokens that can give a player a unique avatar, a wearable item, permissions to enter scenes that choose to restrict access, a special weapon to use in a game, etc.</p>

<h2>Transactions</h2>

<p>Transactions make changes to the information that’s stored in the blockchain. Typical transactions involve tokens changing owners, for example user A giving his LAND token to user B in exchange for an amount of MANA tokens. In the Ethereum network, however, a transaction can also mean changing the information that’s stored about a token without changing its owner. For example, changing the description of a parcel, or merging several parcels into an Estate.</p>

<p>All transactions that occur in Ethereum’s main chain have a cost that is paid in Ether tokens. This fee is referred to as the ‘gas’ fee, and it’s paid to the network user that ‘mines’ the transaction.</p>

<p>When you request a transaction to take place, you set the gas price that you’re willing to pay for the transaction to be mined. Transactions that offer higher prices get mined faster, since miners give these priority. Market prices for these transactions oscillate regularly, they tend to be more expensive when there is a higher usage of the network. Make sure that what you offer isn’t below the market price, otherwise your transaction could remain in an unprocessed pool indefinitely.</p>

<p>All transactions must be signed by an Ethereum address, using the addresse’s private key. This is what certifies that the transaction was carried out by that address.</p>

<h4>Transaction validation</h4>

<p>Blockchain transactions aren’t immediate, they require time to be “mined” by one of the nodes in the network, and then to be propagated throughout the rest of the machines. The more transactions that are being requested by the network, the more time they take to be validated.</p>

<p>In brief terms, this is how a transaction is validated:</p>

<li>A new transaction occurs, it goes into a pool of unconfirmed transactions.</li>

<li>One of the machines in the network successfully solves an algorithm to mine a new “block” containing a handful of transactions from this pool, including this one. It attaches this new block to the end of the chain.</li>

<li>The block is shared with other machines of the network. Each machine verifies that each transaction in a block is valid and checks the block’s hash to ensure it’s legitimate, then it adds it to its own version of the chain.</li>

<li>The new block is propagated throughout the whole network. There’s a universally shared understanding that this transaction has taken place.</li>

<h4>Sidechains</h4>

<p>Decentraland is partnering with</p>

<p>to create a</p>

<em>sidechain</em>

<p>(a special kind of blockchain) that will be able to handle transactions faster and cheaper than the main Ethereum network. This sidechain will be ideal for in-game transactions, as changes can occur closer to real time and at a very low cost. For transactions that involve valuable items, we’ll still recommend the main Ethereum chain, as it will be more secure.</p>

<p>Each developer working on a scene will be able to choose whether to use the mainchain, the sidechain or a combination of both for different transactions.</p>

<p>The sidechain will be kept interoperable with the Ethereum’s mainchain. You’ll be able to load tokens from the main chain into the side chain and vice versa. Transactions that take place in the sidechain are eventually reflected in the mainchain when the tokens “exit” back into the mainchain.</p>

<p>Read more about this in</p>

<p>.</p>

<h4>Trigger transactions from a scene</h4>

<p>Your scene’s code can trigger transactions, both on the Ethereum mainchain and on Decentraland’s sidechain. You could have a store in your scene that sells tokens (like NFTs), or have a game that rewards game items to players that achieve certain goals.

The user must always approve these transactions explicitly on their Ethereum client. For example, when using Metamask, Metamask prompts the user to accept each transaction before it’s processed.

Read [game design doc] for more ideas about how to integrate a scene to the blockchain. See [blockchain operations] for instructions on how to implement these integrations.</p>

<h2>Types of tokens</h2>

<p>Different types of tokens can be handled in the Ethereum network. A few standards have emerged that group tokens that share the same characteristics.</p>

<p>In Decentraland, you can use tokens to represent items that relate to your game or experience, such as a weapon or a trophy. As tokens are held in a player’s wallet, they accompany a player from scene to scene, so each scene can choose if and how they want to react to every existing kind of token.</p>

<p>Read</p>

<p>on our blog for a more in-depth look at the emergence and evolution of non-fungible tokens.</p>

<h4>Fungible tokens</h4>

<p>If an item is fungible, then it can be substituted or exchanged for any similar item. Fiat currencies, like the US dollar, are fungible. One dollar bill can be exchanged for any other dollar bill.</p>

<p>Cryptocurrency tokens like Bitcoin, Ethereum, and MANA are all fungible because one token unit can be exchanged for any other token unit.</p>

<p>You could also create custom fungible tokens to use in Decentraland scenes and use them to depict items that are all equal and have no distinctive or customizable properties between them. You could, for example, create a game that revolves around collecting a large quantity of identical items, and represent these through a fungible token . You could also use a fungible token to represent a golden ticket that gives players who hold it access to a specific region or service.</p>

<em>ERC20</em>

<p>is the most accepted standard for fungible tokens in the Ethereum Network. MANA is built upon this standard.</p>

<h4>Non-Fungible tokens</h4>

<p>Non-fungible tokens (or NFTs) have characteristics that make each unit objectively different from others. Parcels of LAND in Decentraland are NFTs, as the location of each parcel is unique. The adjacency to other parcels, roads, or districts make these locations relevant to token owners.</p>

<p>In Decentraland, you can use NFTs to represent in-game items such as avatars, wearables, weapons, and other inventory items. You could, for example, use a single type of NFT to represent all weapons in your game, and differentiate them by setting different properties in these NFT.</p>

<p>NFTs can be used to provide provably scarce digital goods. Because of the legitimate scarcity made possible by the blockchain, buyers can rest assured that the art they purchase is, in fact, rare. This gives digital art real value that we’ve never seen before.</p>

<p>Game items will have a history that’s stored in the blockchain. This history could deem an item more valuable, for example if it was used to accomplish great achievements or used by someone who’s admired.</p>

<p>Depending on the contract describing the token, each NFT could either be immutable, or you could allow players to customize and change certain characteristics about them if they choose to.</p>

<em>ERC721</em>

<p>is the most accepted standard for non-fungible tokens in the Ethereum Network. LAND tokens follow the ERC721 standard.</p>

<h2>Smart Contracts</h2>

<p>A contract consists of a both code (its methods) and data (its state) that resides at a specific address on the Ethereum blockchain.</p>

<p>The methods in a contract are always called via a transaction that has the</p>

<em>to</em>

<p>field set to the contract’s address. The code that’s executed by the contract’s method can include calls to other contracts, these trigger more transactions that have the</p>

<em>from</em>

<p>field set to the contract’s address.</p>

<p>A contract can’t trigger any actions on its own or based on a time event. All actions performed by a smart contract always arise from a transaction that calls one of the contract’s functions.

You can use smart contracts to condition transactions based on custom conditions. For example, players could stake a bet on the outcome of a game, and the corresponding payments would occur as soon as the outcome of the game is informed to the contract.

The entire code for a smart contract is public to whoever wants to read it. This allows developers to create publicly verifiable rules.

All Tokens are defined by a smart contract that specifies its characteristics and what can be done with it. Decentraland has written and maintains a number of smart contracts. LAND and MANA tokens themselves are defined by the</p>

<em>LANDregistry</em>

<p>and</p>

<em>MANAtoken</em>

<p>contracts respectively.</p>

<p>You can find the address of every contract created by Decentraland in</p>

<p>.</p>

<p>You can read the full code of each of those contracts, as it’s public information on the blockchain. You can find the contract by name on</p>

<p>and read its content there.</p>

<h2>dApps</h2>

<em>dApps</em>

<p>(decentralized applications) are applications that are built upon smart contracts and the blockchain.</p>

<p>A dApp can be as simple as something that validates that your wallet holds a certain token and lets you use a service. Or it can be a fully fledged application with its own UI, such as the Decentraland Marketplace.</p>

<p>If you want to build your own dApp around Decentrlanad, see</p>

<p>.</p>

<h2>Ropsten test network</h2>

<p>Before you deploy a smart contract, create a new type of token, or a Decentraland scene that relies on transactions on the Ethereum network, you need to make sure that it has no bugs or gaps that malicious users could exploit.</p>

<p>The Ropsten test network is an alternative version of Ethereum that’s specifically made for running tests.</p>

<p>Tokens in the Ropsten network have no real value, so you can afford to make mistakes without running any real risk. You can replenish any lost tokens for free by using a faucet:</p>

<li>Ropsten Ether faucet (</li>

<li>)</li>

<li>Ropsten MANA faucet (</li>

<li>)</li>

<p>If you’re developing a scene that triggers transactions, testing these transactions in the Ropsten network is free, as the tokens you send don’t have a value. In mainnet you would otherwise have to pay at the very least a real gas fee in Ether for each test transaction you carry out.</p>

<p>Once you’re confident that your code works as expected and can’t be exploited, you can deploy to the Ethereum mainnet.</p>

<h2>Blockchain reorgs</h2>

<p>Occasionally, multiple machines will create alternative new blocks at roughly the same time. This is a problem, because this forks the chain into two diverging versions that could potentially contradict each other. When a fork occurs, Ethereum solves this by always giving priority to the longest chain and discarding any shorter chains. Even though it’s possible for two rivaling chains to exist at the same time, soon one of the two chains will add another block and outgrow the other. Due to the time it takes to solve the mining algorithms, it becomes increasingly difficult for rivaling chains to keep growing in perfect sync with each other. Sooner or later one will prevail over the other.</p>

<p>When one chain outgrows the other and the dispute is resolved, machines that had adopted the shorter chain need to make adjustments. This is what’s known as a “reorg”. They need to roll back on all of the transactions included in the blocks from the branch they’re in until they reach the point at which the fork occurred. Then they need to add the new blocks from the longer branch that’s considered legitimate.</p>

<p>Rolled back transactions may return to the pool of pending transactions until they’re picked up again by a miner (or are discarded). Any gas fees paid for these transactions are also rolled back.</p>

<p>Blocks that were just added to the end of a chain have a substantial chance of being rolled back because of the mechanisms explained above. As subsequent blocks are added to the end of the chain, it becomes less and less likely that the blocks that are further back in the blockchain could be rolled back, because that would require a larger reorg. Due to this, each new block that’s added to the end of the chain after a transaction is called a confirmation for that transaction.</p>

<p>When creating applications (or scenes) that use information from off the blockchain, you should be aware of the occurrence of reorgs. You might want to only consider transactions as verified when a certain number of confirmations have occurred, and the transaction is no longer at the very end of the chain.</p>

<p>Using several confirmations will make the information very stable, but transactions will take a long time to be reflected.

Using few confirmations, changes will be reflected faster, but there will sometimes be hiccups that appear to undo transactions when reorgs occur. If these transactions have off-chain consequences in your scene, then you might need to somehow reverse these consequences as well.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/player/blockchain-integration/ethereum-essentials/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/second-layer/

<title>Second layer blockchain | Decentraland Documentation</title>

<strong>Second layer blockchain</strong>

<h1>Second layer blockchain</h1>

<h2>About second layer solutions</h2>

<p>Any transaction that affects the blockchain takes time to complete, and costs gas. Both these things are obstacles to making blockchain gaming popular, because players usually don’t have the patience to wait that long for their actions to take effect, and aren’t willing to spend money on many transactions as they play.</p>

<p>A common workaround is to keep most of the game-play off-chain, and only carry out blockchain transactions for key events, like earning a game item or registering a high score.</p>

<p>However, another way to overcome these limitations, as well as other scalability issues that are inherent to blockchains, is to rely on a</p>

<em>second layer</em>

<p>blockchain, also called a</p>

<em>side-chain</em>

<p>.</p>

<p>A second layer is another blockchain that sits as an intermediary between a decentralized app and the main chain. This layer is more lightweight and can therefore provide faster responses and at a much lower gas cost.</p>

<p>Instead of making transactions directly into the main chain, transactions are done on the side chain, and then it’s the duty of the side-chain to eventually sync these changes with the main chain.</p>

<p>The side-chain is able to provide faster responses because it’s a smaller network with less nodes. The transactions that are carried out in the second layer are initially less secure, but they are eventually committed to the main chain in bulks, and all of the security checks of the main chain can be enforced there.</p>

<p>The side-chain is also able to lower individual transaction costs significantly because it groups many transactions into a single one when syncing with the main chain. So the gas that would need to be paid for one transaction on the main chain can be divided over several thousand transactions.</p>

<p>Also, when syncing with the main chain, several redundant transactions can be avoided entirely, further reducing transaction costs. For example, if Alice transfers 1 ETH to Bob, and then Bob transfers 1 ETH to Carol, then those two transactions can be simplified into one, by registering that Alice transfers directly to Carol.</p>

<p>Decentraland has a partnership with</p>

<p>, who provide their own side-chain on Ethereum. Their side-chain can be used by scenes to support fast and very cheap transactions.</p>

<h2>Add Polygon support to a scene</h2>

<p>To easily make use of MANA on Polygon’s side-chain in your scene, use the</p>

<p>. This library includes simple functions to allow players in your scene to make transactions with MANA on Polygon’s network, check the player’s current balance of MANA on Polygon, and transfer MANA between mainchain and Polygon.</p>

<p>Players don’t need to switch networks on their browser wallets to operate on Polygon’s network, since these are handled via metatransactions.</p>

<h2>Try the Polygon Testnet</h2>

<p>In order to use Polygon’s Matic Testnet, you should first have:</p>

<p>Ether in Ropsten network. You can obtain it for free from various external faucets like</p>

<p>.</p>

<p>MANA in Ropsten network. You can obtain it for free here</p>

<p>.</p>

<p>Then you must configure your Metamask account to include the Matic Testnet.</p>

<p>To do this:</p>

<li>Switch networks on Metamask by clicking on the name of the current network and selecting</li>

<em>Custom RPC</em>

<li>at the bottom of the dropdown.</li>

<li>Fill in ‘Matic Testnet’ as</li>

<em>Network name</em>

<li>and</li>

<li>as</li>

<em>New RPC URL</em>

<li>and the same value as</li>

<em>Block Explorer URL</em>

<li>. For</li>

<em>Symbol</em>

<li>set</li>

<strong>MATIC</strong>

<li>Click ‘Save’ to add this new network to Metamask.</li>

<strong>📔 Note</strong>

<blockquote>: Learn more about how to set up Matic on their</blockquote>

# End of the information extracted from the URL: https://docs.decentraland.org/player/blockchain-integration/ethereum-essentials/

# Start of the information extracted from the URL: https://docs.decentraland.org/creator/development-guide/create-a-dapp/

<title>Create a dApp | Decentraland Documentation</title>

<strong>Create a dApp</strong>

<h1>Create a dApp</h1>

<p>You can create your own decentralized apps (dApps) to interface with Decentraland’s smart contracts and expose their functionality in more elaborate and friendlier ways.</p>

<h2>What is a dApp</h2>

<p>A decentralized application, or dApp, is one that runs on a distributed peer to peer network rather than from a central server.</p>

<p>In the context of blockchain, a dApp uses smart contracts and possibly a P2P network, instead of a Web API service. A dApp may also expose a front end and cache information from the blockchain temporarily, but its output is ultimately reflected on-chain.</p>

<p>See</p>

<p>for a more complete overview about dApps.</p>

<h2>Decentraland smart contracts</h2>

<p>Decentraland has written and maintains a number of smart contracts that interact with LAND and MANA tokens.</p>

<p>LAND and MANA tokens themselves are defined by the</p>

<em>LANDregistry</em>

<p>and</p>

<em>MANAtoken</em>

<p>contracts respectively. The list also includes more specific contracts like creating an estate out of several parcels or mortgaging parcels.</p>

<li>:

You can find a full list of each of our contracts and their addresses.</li>

<p>Note that each contract has a production version in</p>

<em>mainnet</em>

<p>and a test version in</p>

<em>ropsten</em>

<p>and that each has a different address.</p>

<p>You can read the full code of each contract, as it’s public information on the blockchain. For example, you can find the contract by name on</p>

<p>to read its contents.</p>

<h2>dApp boilerplate code</h2>

<li>: This Boilerplate code can be a great starting point for building your own dApp.</li>

<h2>Helper libraries</h2>

<p>While building our own dApps internally, we put together some helper libraries that you might also find useful.</p>

<p>: This is a low level library with utility functions to work with the Ethereum blockchain.</p>

<p>: This is a higher level library with common modules for dApps. The modules in this library are built using</p>

<code>Decentraland-eth</code>

<p>.</p>

<p>: This library contains a selection of reusable UI elements that are included in Decentraland’s projects.</p>

<h2>Sample dApps</h2>

<p>Below are links to the full code of several dApps that we built around Decentraland, these might help you build your own:</p>

<p>: This basic dApp provides free Ropsten MANA.</p>

<p>: This basic dApp creates an invitation NFT that was used when Decentraland was in a closed beta stage. In the early days, whitelisted players that held this NFT were the only ones able to enter the metaverse.</p>

<p>: This is the full application that runs the Decentraland</p>

<p>. To make it run fast, it requires a database and a backend server connected to the Ethereum network to create indexes with information about LAND.</p>

<h2>dApp testing framework</h2>

<p>Before launching your dApp into production, we recommend testing it first.</p>

<li>: We put this framework together to help you run tests on your dApp.</li>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/faq/

# Start of the information extracted from the URL: https://docs.decentraland.org/decentraland/glossary/

<title>Glossary | Decentraland Documentation</title>

<strong>Glossary</strong>

<h1>Glossary</h1>

<h3>dApp</h3>

<p>Short for decentralized application, a dApp is any application that is designed to run on a blockchain network, like Ethereum.</p>

<h3>District</h3>

<p>Groups of adjacent parcels that share similar user interests. For a record of the original district proposals, please see</p>

<p>.</p>

<h3>ERC20 Token</h3>

<p>A fungible (reproducible or interchangeable) token built using an Ethereum smart contract according to the</p>

<p>. MANA is Decentraland’s ERC20 token.</p>

<h3>Ethereum</h3>

<p>A decentralized platform for building applications based on smart contracts. Decentraland is being built on the Ethereum platform. For more information, please visit</p>

<h3>Fungible Token</h3>

<p>A fungible token is any token whose fundamental unit or characteristic is interchangeable with other tokens of the same set. In other words, fungible tokens are not unique. Examples of fungible tokens are Decentraland’s MANA or Ethereum’s Ether.</p>

<h3>Genesis City</h3>

<p>The geographic center of Decentraland, set at an area of 90,000 parcels, with 36,041 parcels dedicated to community districts. The remaining parcels of Genesis City were auctioned to users during the Terraform Event, or LAND auction.</p>

<h3>LAND</h3>

<p>LAND is a scarce, non-fungible digital asset maintained in an Ethereum smart contract that represents the parcels of virtual land within Decentraland.</p>

<h3>MANA</h3>

<p>MANA is Decentraland’s fungible, ERC20 cryptocurrency token limited to a total original supply of 2,805,886,393, and current total supply of 2,194,916,827. Back in November of 2018, the keys that had custody of the MANA smart contract were sent to a (self-destructed address)[https://etherscan.io/address/0xdf861993edbe95bafbfa7760838f8ebbd5afda9f], the recommended method to “throw away the keys” in Ethereum. This effectively made the MANA smart contract forever immutable, with no ability to mint more tokens or pause it. MANA’s purpose is to allow users of Decentraland to purchase LAND and goods and services from other users.</p>

<h3>MetaMask</h3>

<p>A browser extension that allows you to access and run dApps without running an entire node on the Ethereum blockchain. For more information, and to install MetaMask to begin using Decentraland’s features, please see</p>

<h3>NFT (Non-Fungible Token)</h3>

<p>In contrast to a fungible token, non-fungible tokens are unique, distinguishable digital assets. The information contained within a non-fungible token is unique to that token, like a serial number or coordinates for a parcel of LAND in Decentraland. This means that one non-fungible token can never be swapped, or exchanged, for any other token. Decentraland’s LAND is one example of a non-fungible digital asset, along with CryptoKitties or CryptoPunks.</p>

<h3>Parcel</h3>

<p>A 16 meter by 16 meter piece of LAND within Decentraland.</p>

<h3>Scene</h3>

<p>A scene within Decentraland comprises the 3D objects, textures, and audio content rendered on a LAND parcel or group of parcels.</p>

<h3>Smart Contract</h3>

<p>A smart contract is simply a program on the Ethereum blockchain that facilitates and verifies digital transactions. Ethereum smart contracts enable developers to build decentralized applications that can track and transfer ownership of digital assets on a trustless network.</p>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/faq/

# Start of the information extracted from the URL: https://decentraland.org/marketplace/

<title>Decentraland - Marketplace</title>

<noscript>You need to enable JavaScript to run this app.</noscript>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/faq/

# Start of the information extracted from the URL: https://decentraland.org/dao/

<title>Decentraland DAO</title>

<h1>Decentraland DAO</h1>

<h3>The virtual world in your hands</h3>

<p>By signing up you are subscribing to news about Decentraland DAO.</p>

<h2>What is the Decentraland DAO?</h2>

<p>DAO stands for "Decentralized Autonomous Organization". The Decentraland DAO owns the most important smart contracts and assets that make up Decentraland – the LAND Contract, the Estates Contract, Wearables, Content Servers and the Marketplace. It also owns a substantial purse of MANA which allows it to be truly autonomous as well as subsidize various operations and initiatives throughout Decentraland.</p>

<h2>Why has the DAO been created? How is it relevant to me?</h2>

<p>Decentraland is the first fully decentralized virtual world. It was always part of the original vision to hand over control to the people who create and play in this virtual space. In short – you, the users. Through the DAO, you are in control of the policies created to determine how the world behaves: for example, what kinds of wearable items are allowed (or disallowed) after the launch of the DAO, moderation of content, LAND policy and auctions, among others.</p>

<h2>How does the DAO work?</h2>

<p>The community will propose and vote on policy updates, future LAND auctions, whitelisting of NFT contracts to be allowed inside the World, Builder and Marketplace, and whatever the community deems relevant. Voting takes place on the Decentraland DAO's governance interface, powered by Aragon.</p>

<h2>What kinds of things will you get to determine?</h2>

<p>Over the coming year we’ll be scheduling votes to decide on a range of issues, including (but not limited to)</p>

<h2>What is the Decentraland Grants Program?</h2>

<p>Submit your project through the grants program for the DAO to vote. Grantees receive funding, support and help showcasing their initiative.</p>

<h3>What about MANA?</h3>

<p>MANA has already been fully decentralized, in the sense that the private key that controlled its smart contract</p>

<h2>More Info</h2>

<h3>Security Advisory Board? What’s that?</h3>

<p>The DAO is supported by the Security Advisory Board (SAB). The SAB acts as the guarantor of contract security, tasked with the job of providing a swift response to bug reports. The Board will be able to quickly upgrade the smart contract implementation of the LAND and Estate contracts and replace it with a bug-free version upon receiving a responsible disclosure bug report. All contract updates must be unanimous. Comprising 5 members, the Board will be made up of several expert entities or individuals initially chosen by the Decentraland team and later appointed by the community.</p>

<h3>How can SAB members be changed?</h3>

<p>Members can be changed by the Aragon DAO – a vote must be started to remove or install a new member. This is an action that will involve the community using wMANA. A member of the SAB creates a vote for the community to add or remove a member of the SAB and community members use wMANA to cast their vote. "You can</p>

<p>."</p>

<h3>How do I elevate a Vote?</h3>

<p>Initially, until fraud risk is reduced to its minimum extent possible, votes will only be created and scheduled by the Security Advisory Board (SAB).</p>

# End of the information extracted from the URL: https://docs.decentraland.org/player/general/faq/

# Start of the information extracted from the URL: https://docs.decentraland.org/development-guide/smart-items/

<title>https://docs.decentraland.org/creator/development-guide/smart-items/</title>

# End of the information extracted from the URL: https://decentraland.org

# Start of the information extracted from the URL: https://docs.decentraland.org/

<title>Decentraland Documentation | Decentraland Documentation</title>

<h1>Decentraland Documentation</h1>

<p>The first-ever virtual world owned by its users</p>

<p>This site is maintained by the Decentraland Foundation.</p>

<p>The content in this site is divided into sections for different user profiles. Choose a section that matches your needs.</p>

<h3>For Players</h3>

<p>Discover how to experience Decentraland and get the most out of it</p>

<h3>For Content Creators</h3>

<p>Learn how to create content for others to experience in Decentraland</p>

<h3>For Contributors</h3>

<p>Learn how you can contribute to building the tools and infrastructure of Decentraland.</p>

# End of the information extracted from the URL: https://decentraland.org

# Start of the information extracted from the URL: https://dao.decentraland.org/

<title>Decentraland DAO</title>

<h1>Decentraland DAO</h1>

<h3>The virtual world in your hands</h3>

<p>By signing up you are subscribing to news about Decentraland DAO.</p>

<h2>What is the Decentraland DAO?</h2>

<p>DAO stands for "Decentralized Autonomous Organization". The Decentraland DAO owns the most important smart contracts and assets that make up Decentraland – the LAND Contract, the Estates Contract, Wearables, Content Servers and the Marketplace. It also owns a substantial purse of MANA which allows it to be truly autonomous as well as subsidize various operations and initiatives throughout Decentraland.</p>

<h2>Why has the DAO been created? How is it relevant to me?</h2>

<p>Decentraland is the first fully decentralized virtual world. It was always part of the original vision to hand over control to the people who create and play in this virtual space. In short – you, the users. Through the DAO, you are in control of the policies created to determine how the world behaves: for example, what kinds of wearable items are allowed (or disallowed) after the launch of the DAO, moderation of content, LAND policy and auctions, among others.</p>

<h2>How does the DAO work?</h2>

<p>The community will propose and vote on policy updates, future LAND auctions, whitelisting of NFT contracts to be allowed inside the World, Builder and Marketplace, and whatever the community deems relevant. Voting takes place on the Decentraland DAO's governance interface, powered by Aragon.</p>

<h2>What kinds of things will you get to determine?</h2>

<p>Over the coming year we’ll be scheduling votes to decide on a range of issues, including (but not limited to)</p>

<h2>What is the Decentraland Grants Program?</h2>

<p>Submit your project through the grants program for the DAO to vote. Grantees receive funding, support and help showcasing their initiative.</p>

<h3>What about MANA?</h3>

<p>MANA has already been fully decentralized, in the sense that the private key that controlled its smart contract</p>

<h2>More Info</h2>

<h3>Security Advisory Board? What’s that?</h3>

<p>The DAO is supported by the Security Advisory Board (SAB). The SAB acts as the guarantor of contract security, tasked with the job of providing a swift response to bug reports. The Board will be able to quickly upgrade the smart contract implementation of the LAND and Estate contracts and replace it with a bug-free version upon receiving a responsible disclosure bug report. All contract updates must be unanimous. Comprising 5 members, the Board will be made up of several expert entities or individuals initially chosen by the Decentraland team and later appointed by the community.</p>

<h3>How can SAB members be changed?</h3>

<p>Members can be changed by the Aragon DAO – a vote must be started to remove or install a new member. This is an action that will involve the community using wMANA. A member of the SAB creates a vote for the community to add or remove a member of the SAB and community members use wMANA to cast their vote. "You can</p>

<p>."</p>

<h3>How do I elevate a Vote?</h3>

<p>Initially, until fraud risk is reduced to its minimum extent possible, votes will only be created and scheduled by the Security Advisory Board (SAB).</p>

