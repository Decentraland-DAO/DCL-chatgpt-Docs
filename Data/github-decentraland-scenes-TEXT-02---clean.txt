<strong>6</strong>

<strong>67</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>179</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Social Client</h1>

<p>Welcome to the Social Client library. This client can be used to interact Decentraland's users, providing the ability to send private messages and add people as friends.</p>

<h2>Installation</h2>

<pre>npm install dcl-social-client</pre>

<h2>Usage</h2>

<p>You can check the entire API</p>

<p>.</p>

<h2>Behind the curtains</h2>

<p>In order to provide reliable communication between users, this client connects to a</p>

<p>server. In particular, we are using the</p>

<p>, since it provides easy ways to send messages of all kinds, raise events, and much more.</p>

<h2>Refresh the API checks.</h2>

<p>We use api-extractor to ensure not poisoning other projects with the types of the Matrix SDK. To do so, api-extractor bundles and checks that the bundle never breaks the types. The bundle is committed and should be generated every time the API changes by running</p>

<code>npm run build && npm run refresh-api</code>

<h2>Contributing</h2>

<p>Run</p>

<pre>npm install

npm run build

npm run</pre>

<h2>About</h2>

<p>ð¡ Interact with Decentraland's users, send private messages and add friends.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>14</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-social-client

# Change to URL: https://github.com/decentraland/cli

# URL: https://github.com/decentraland/cli

<title>GitHub - decentraland/cli: ð» Decentraland command-line interface</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð» Decentraland command-line interface</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/cli</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>36</strong>

<strong>100</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<code>4dc3d96</code>

<h2>Git stats</h2>

<strong>812</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland CLI</h1>

<p>This CLI provides tooling/commands to assist you in the</p>

<p>development process. Some of the commands will help you scaffold a new scene project, locally start and visualize the scene in order to test it and deploy it to a</p>

<p>to be incorporated in your Decentraland parcel.</p>

<h2>Usage</h2>

<p>To install the latest version of</p>

<code>dcl</code>

<p>(Decentraland CLI), run this command:</p>

<pre>npm install -g decentraland</pre>

<p>To learn what you can do with the CLI run the following command:</p>

<pre>dcl --help</pre>

<p>See more details at</p>

<p>.</p>

<h2>Documentation</h2>

<p>For details on how to use Decentraland developer tools, check our</p>

<h2>Contributing</h2>

<li>this repository to your own GitHub account and then</li>

<li>it to your local device.</li>

<li>Install dependencies with</li>

<code>npm install</code>

<li>.</li>

<li>Build the project by running</li>

<code>npm run build</code>

<li>.</li>

<li>Link the CLI with:</li>

<code>npm link</code>

<li>. The</li>

<code>dcl</code>

<li>command should now be available.</li>

<li>You can run tests with</li>

<code>npm test</code>

<strong>NOTE:</strong>

<p>you can set the environment variable</p>

<code>DEBUG=true</code>

<p>to see all debugging info</p>

<h2>Releasing</h2>

<p>Just update the version on the</p>

<code>package.json</code>

<p>file and merge to master.</p>

<h2>Configuration</h2>

<code>dcl</code>

<p>can be configured in several ways to adapt it to another environment other than the default one. To do this you have to either set environment variables or change your</p>

<code>~/.dclinfo</code>

<p>file:</p>

<th>Variable name</th>

<th>Enviroment variable</th>

<code>~/.dclinfo</code>

<td>Provider</td>

<td>RPC_URL</td>

<td>-</td>

<td>MANA Token Contract</td>

<td>MANA_TOKEN</td>

<td>MANAToken</td>

<td>LAND Registry Contract</td>

<td>LAND_REGISTRY</td>

<td>LANDRegistry</td>

<td>Estate Registry Contract</td>

<td>ESTATE_REGISTRY</td>

<td>EstateRegistry</td>

<td>Content Server URL</td>

<td>CONTENT_URL</td>

<td>contentUrl</td>

<td>Segment API key</td>

<td>SEGMENT_KEY</td>

<td>segmentKey</td>

<td>Track Analytics data</td>

<td>TRACK_STATS</td>

<td>trackStats</td>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>ð» Decentraland command-line interface</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>66</strong>

<h3>Watchers</h3>

<strong>33</strong>

<h3>Forks</h3>

<strong>54</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-cli-

# Change to URL: https://github.com/orgs/decentraland/repositories?page=6

# URL: https://github.com/orgs/decentraland/repositories?page=6

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Safe FFmpeg wrapper.</p>

<p>VSCode extension for Decentraland SDK6</p>

<p>SDK Playground</p>

<p>Queries to build the Scenes Ranking</p>

<p>The Graph indexing for the Rentals contract</p>

<p>Official open source React components and examples for building with LiveKit.</p>

<p>Portable Experience Sample</p>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<p>A</p>

<p>graph detaling the ownership and permissions of Land</p>

<p>Catalyst, POIs, Ban Names list</p>

<p>Skyboxes for Explorer</p>

<p>UI to deploy vesting contracts using a minimal proxy</p>

<p>An idiomatic protobuf generator for TypeScript</p>

<p>Efficient glTF 3D import / export package for Unity</p>

<p>About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</p>

<p>Import crashbot data</p>

<p>Avatars smart contract</p>

<p>Scripts for deploying testnet contracts.</p>

<em>6</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer-desktop-launcher

# URL: https://github.com/decentraland/explorer-desktop-launcher

<title>GitHub - decentraland/explorer-desktop-launcher</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-desktop-launcher</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>52</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>112</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Explorer Desktop Launcher</h1>

<p>A launcher to auto update the</p>

<code>unity-renderer</code>

<p>(</p>

<p>)</p>

<h2>Available Scripts</h2>

<code>npm run start</code>

<p>Runs the Electron app in the development mode.</p>

<p>The Electron app will reload if you make edits in the</p>

<code>electron</code>

<p>directory.</p>

<p>You will also see any lint errors in the console.</p>

<h4>Custom arguments</h4>

<p>Use</p>

<code>-- <args></code>

<p>to specify custom arguments</p>

<code>--developer-mode</code>

<li>open the application in Developer Mode (with DevTools)</li>

<code>--custom-url <url></code>

<li>overrides the url, in Developer Mode it can be changed later</li>

<code>--desktop-branch <branch_name></code>

<li>downloads the renderer of the specified branch and uses the corresponding browser-interface</li>

<code>--desktop-version <version></code>

<li>downloads the renderer of the specified version and uses the corresponding browser-interface</li>

<p>e.g.</p>

<code>npm run start -- --developer-mode --desktop-branch main</code>

<code>npm run build</code>

<p>Builds the Electron app package for production to the</p>

<code>dist</code>

<p>folder.</p>

<p>Your Electron app is ready to be distributed!</p>

<code>npm run publish</code>

<p>Build and publish</p>

<h2>Project directory structure</h2>

<pre>my-app/

âââ package.json

â</pre>

<pre>âââ tsconfig.json

âââ public/

â</pre>

<pre>âââ electron/

âÂ Â  âââ main.ts

âÂ Â  âââ tsconfig.json

â</pre>

<pre>âââ build/

âÂ Â  âââ index.html

âÂ Â  âââ static/

âÂ Â  â   âââ css/

âÂ Â  â   âââ js/

âÂ Â  â

âÂ Â  âââ electron/

âÂ Â  Â Â  âââ main.js

â</pre>

<pre>âââ dist/

âââ mac/

âÂ Â  âââ my-app.app

âââ my-app-0.1.0.dmg</pre>

<h2>Artifacts</h2>

<h2>Custom protocol</h2>

<p>The custom protocol is using the prefix</p>

<code>dcl://</code>

<p>We can add the following parameters to the custom protocol to change the behaviour of the Launcher.</p>

<code>DESKTOP-BRANCH=main</code>

<li>: Downloads the renderer of the specified branch</li>

<code>DESKTOP-VERSION=1.0.325-20220517164352.commit-e28a414</code>

<li>: Downloads the renderer of the specified version</li>

<code>DESKTOP-DEVELOPER-MODE</code>

<li>: Open the application in Developer Mode (with DevTools)</li>

<code>PREVIEW-MODE=url</code>

<li>: Opens in PREVIEW MODE the specified URL (confirmation needed)</li>

<p>If you add another parameter, it will be forwarded to the final URL.

For example, if we use</p>

<code>position=10,10&realm=thor</code>

<p>it will be similar as opening:</p>

<p>Example:</p>

<code>dcl://DESKTOP-BRANCH=main&position=10,10&realm=thor</code>

<p>It will use the last desktop renderer version from the</p>

<code>main</code>

<p>branch, and you will enter position 10,10 in the realm</p>

<code>thor</code>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>12</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-explorer-desktop-launcher

# Change to URL: https://github.com/decentraland/rust-ffmpeg

# URL: https://github.com/decentraland/rust-ffmpeg

<title>GitHub - decentraland/rust-ffmpeg: Safe FFmpeg wrapper.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Safe FFmpeg wrapper.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rust-ffmpeg</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>578</strong>

<h2>Files</h2>

<button>View code</button>

<p>This is a fork of the abandoned</p>

<p>crate by</p>

<p>.</p>

<p>Currently supported FFmpeg versions: 3.4.x through 4.4.x.</p>

<p>Build instructions can be found on the</p>

<p>.</p>

<p>Documentation:</p>

<li>;</li>

<li>;</li>

<li>.</li>

<em>Note on upgrading to v4.3.4 or later: v4.3.4 introduced automatic FFmpeg version detection, obsoleting feature flags</em>

<code>ffmpeg4</code>

<em>,</em>

<code>ffmpeg41</code>

<em>,</em>

<code>ffmpeg42</code>

<em>and</em>

<code>ffmpeg43</code>

<em>. If you manually specify any of these features, now is the time to remove them; if you use</em>

<code>ffmpeg43</code>

<em>through the</em>

<code>default</code>

<em>feature, it's still on for backward-compatibility but it has turned into a no-op, and you don't need to do anything. Deprecation plan:</em>

<code>ffmpeg43</code>

<em>will be dropped from default features come 4.4, and all these features will be removed come 5.0.</em>

<em>See</em>

<em>for other information on version upgrades.</em>

<p>A word on versioning: major and minor versions of this crate track major and minor versions of FFmpeg, e.g. 4.2.x of this crate has been updated to support the 4.2.x series of FFmpeg. Patch level is reserved for changes to this crate and does not track FFmpeg patch versions. Since we can only freely bump the patch level, versioning of this crate differs from semver: minor versions may behave like semver major versions and introduce backward-incompatible changes; patch versions may behave like semver minor versions and introduce new APIs. Please peg the version you use accordingly.</p>

<strong>Please realize that this crate is in maintenance-only mode for the most part.</strong>

<p>Which means I'll try my best to ensure the crate compiles against all release branches of FFmpeg 3.4 and later (only the latest patch release of each release branch is officially supported) and fix reported bugs, but if a new FFmpeg version brings new APIs that require significant effort to port to Rust, you might have to send me a PR (and just to be clear, I can't really guarantee I'll have the time to review). Any PR to improve existing API is unlikely to be merged, unfortunately.</p>

<p>ð¤</p>

<strong>If you have significant, demonstrable experience in Rust and multimedia-related programming, please let me know, I'll be more than happy to invite you as a collaborator.</strong>

<p>ð¤</p>

<h2>About</h2>

<p>Safe FFmpeg wrapper.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>181</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/editor-sdk6

# URL: https://github.com/decentraland/editor-sdk6

<title>GitHub - decentraland/editor-sdk6: VSCode extension for Decentraland SDK6</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>VSCode extension for Decentraland SDK6</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/editor-sdk6</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>61</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>129</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Editor SDK6</h1>

<p>This extension includes the following features for Decentraland SDK6 projects:</p>

<strong>Create projects</strong>

<li>: Scaffold a new project of various types: scene, library, portable experience, and smart item.</li>

<strong>Run scenes</strong>

<li>: preview your scenes within VSCode, or launch in a browser.</li>

<strong>Debug scenes</strong>

<li>: set breakpoints, use the debugger to stop/resume execution, see and modify the values of the variables in the scope, step over or step into your code line by line.</li>

<strong>Publish scenes</strong>

<li>: publish your scene to the Genesis City, your own World, or a private/custom server.</li>

<strong>Manage dependencies</strong>

<li>: add, remove, and list the libraries and dependencies that your project is using.</li>

<strong>Preview models</strong>

<li>: you will get an interactive preview when selecting a</li>

<code>.gltf</code>

<li>or</li>

<code>.glb</code>

<li>model.</li>

<h2>About</h2>

<p>VSCode extension for Decentraland SDK6</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-editor-sdk6

# Change to URL: https://github.com/decentraland/sdk-playground

# URL: https://github.com/decentraland/sdk-playground

<title>GitHub - decentraland/sdk-playground: SDK Playground</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>SDK Playground</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-playground</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>17</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>61</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK Playground</h1>

<p>SDK Playground is a React App that embed the Decentraland Preview to create scene and a code editor.</p>

<h2>About</h2>

<p>SDK Playground</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dao-scenes-ranking

# URL: https://github.com/decentraland/dao-scenes-ranking

<title>GitHub - decentraland/dao-scenes-ranking: Queries to build the Scenes Ranking</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Queries to build the Scenes Ranking</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dao-scenes-ranking</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DAO Scenes Ranking</h1>

<p>Queries to reproduce the Scenes Ranking.</p>

<p>First, you need to have available these raw datasets as a table:</p>

<li>rel_scenes_tiles (Link AWS)</li>

<li>scene_wallet_movement (Link AWS)</li>

<li>scene_ranking_weights (Link AWS)</li>

<p>The following queries should be executed on the order below:</p>

<li>scene_visit_web3.sql -> All visits and stay durations to each scene by user that are then</li>

<li>scene_visit_aggregated.sql -> Metrics with the aggregated user activities for each scene</li>

<li>top_scenes_monthly.sql -> We keep the top 100 scenes in terms of visits</li>

<li>scene_ranking_monthly.sql -> The top 100 scenes are ranked according to visists, unique visitors, length of scene stays, retention and returning visists from the same users. The rankings for each metric are taken into account to create a final ranking.</li>

<li>scene_ranking_winners_monthly.sql -> The final winners list, these are going to be the 30 tile owners that had the best scenes, with only the best scene of each owner taken into consideration.</li>

<p>These queries have place holders in the</p>

<code>FROM</code>

<p>statements, you should manually replace them with references to the actual tables on your local db.</p>

<h2>About</h2>

<p>Queries to build the Scenes Ranking</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rentals-graph

# URL: https://github.com/decentraland/rentals-graph

<title>GitHub - decentraland/rentals-graph: The Graph indexing for the Rentals contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>The Graph indexing for the Rentals contract</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rentals-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Rentals graph</h1>

<th>Network</th>

<th>Provider</th>

<th>URL</th>

<th>Current</th>

<th>Previous</th>

<td>Mainnet</td>

<td>Hosted Services</td>

<td>QmcMk21Jdeng7SWv8yqhskhKbykqgH12vE64cnNhzSbXJ8</td>

<td>QmXCbUvhaH7f21sTaD5VtX8ExShUvcCEfV2nPEntTWeAJw</td>

<td>Mainnet</td>

<td>Satsuma</td>

<td>QmcMk21Jdeng7SWv8yqhskhKbykqgH12vE64cnNhzSbXJ8</td>

<td>QmXCbUvhaH7f21sTaD5VtX8ExShUvcCEfV2nPEntTWeAJw</td>

<td>Sepolia</td>

<td>Graph Studio</td>

<td>QmT5YoctTWsbL9LYytTUR8qTXset7seqThgsvccs8YzQyA</td>

<td>-</td>

<td>Goerli</td>

<td>Hosted Services</td>

<td>QmdWQ9zhgAFMEn1Fne6CdJr2bn9yTUnsDbYLeyuttXhq9v</td>

<td>QmPrRyB6npHxp1wqgsYiP4YYSYjjLujGPiDkcoBnjw8KVE</td>

<p>Using</p>

<p>and</p>

<h3>Install</h3>

<pre>npm run ci</pre>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<h4>Get totals</h4>

<h2>About</h2>

<p>The Graph indexing for the Rentals contract</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-rentals-graph

# Change to URL: https://github.com/decentraland/holodeck

# URL: https://github.com/decentraland/holodeck

<title>GitHub - decentraland/holodeck</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/holodeck</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Wearable Preview</h1>

<p>This webapp renders an interactive 3D preview of a wearable or an avatar. It can be configured via query params or via</p>

<code>postMessage</code>

<p>:</p>

<code>contract</code>

<li>: The contract address of the wearable collection.</li>

<code>item</code>

<li>: The id of the item in the collection.</li>

<code>token</code>

<li>: The id of the token (to preview a specific NFT).</li>

<code>profile</code>

<li>: an ethereum address of a profile to load as the base avatar. It can be set to</li>

<code>default</code>

<li>to use a default profile.</li>

<code>urn</code>

<li>: a URN of a wearable or an emote to load. If it is a wearable, it will override anything loaded from a profile. It can be used many times.</li>

<code>url</code>

<li>: a URL of a wearable or an emote to load. If it is a wearable, it will override anything loaded from a profile. It can be used many times. The url will be fetched and must return a valid definition following the</li>

<code>WearableDefinition</code>

<li>or</li>

<code>EmoteDefinition</code>

<li>types.</li>

<code>base64</code>

<li>: a wearable or an emote to load, encoded in base64. If it is a wearable, it will override anything loaded from a profile. It can be used many times. Once parsed it should be a valid definition following the</li>

<code>WearableDefinition</code>

<li>or</li>

<code>EmoteDefinition</code>

<li>types.</li>

<code>skin</code>

<li>: a color to be used by the skin material, it must be in hex.</li>

<code>hair</code>

<li>: a color to be used by the hair material, it must be in hex.</li>

<code>eyes</code>

<li>: a color to be used by the eyes tint, it must be in hex.</li>

<code>bodyShape</code>

<li>: which body shape to use, possible values are</li>

<code>urn:decentraland:off-chain:base-avatars:BaseMale</code>

<li>or</li>

<code>urn:decentraland:off-chain:base-avatars:BaseFemale</code>

<li>.</li>

<code>emote</code>

<li>: the emote that the avatar will play. Default value is</li>

<code>idle</code>

<li>, other possible values are:</li>

<code>clap</code>

<li>,</li>

<code>dab</code>

<li>,</li>

<code>dance</code>

<li>,</li>

<code>fashion</code>

<li>,</li>

<code>fashion-2</code>

<li>,</li>

<code>fashion-3</code>

<li>,</li>

<code>fashion-4</code>

<li>,</li>

<code>love</code>

<li>,</li>

<code>money</code>

<li>,</li>

<code>fist-pump</code>

<li>and</li>

<code>head-explode</code>

<li>.</li>

<code>zoom</code>

<li>: the level of zoom, it must be a number between 1 and 100.</li>

<code>camera</code>

<li>: which camera type to use, either</li>

<code>interactive</code>

<li>or</li>

<code>static</code>

<li>. By default it uses the</li>

<code>interactive</code>

<li>one.</li>

<code>projection</code>

<li>: which projection type to use, either</li>

<code>orthographic</code>

<li>or</li>

<code>perspective</code>

<li>. By default it uses the</li>

<code>perspective</code>

<li>one.</li>

<code>offsetX</code>

<li>: apply an offset in the X position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>offsetY</code>

<li>: apply an offset in the Y position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>offsetZ</code>

<li>: apply an offset in the Z position of the scene. By default is</li>

<code>0</code>

<li>.</li>

<code>cameraX</code>

<li>: set the X position of the camera.</li>

<code>cameraY</code>

<li>: set the Y position of the camera.</li>

<code>cameraZ</code>

<li>: set the Z position of the camera.</li>

<code>wheelZoom</code>

<li>: a multiplier of how much the user can zoom with the mouse wheel. By default is</li>

<code>1</code>

<li>, which means the wheel doesn't do any zoom. If the value were</li>

<code>2</code>

<li>the user would be able to zoom up to 2x.</li>

<code>wheelPrecision</code>

<li>: the higher the value, the slower the wheel zooms when scrolled. By default is</li>

<code>100</code>

<li>.</li>

<code>wheelStart</code>

<li>: a value between 0 and 100 which determines how zoomed in or out the wheel starts. By default is</li>

<code>50</code>

<li>, so the user can zoom in or out. If the value were</li>

<code>0</code>

<li>the zoom would start at minimum and the user would be able to zoom in. If the value were</li>

<code>100</code>

<li>the zoom would start at max and the user would be able to zoom out.</li>

<code>background</code>

<li>: the color of the background in hex, ie:</li>

<code>ff0000</code>

<li>.</li>

<code>peerUrl</code>

<li>: set a custom url for a Catalyst peer.</li>

<code>nftServerUrl</code>

<li>: set a custom url for the NFT API.</li>

<code>disableBackground</code>

<li>: if</li>

<code>true</code>

<li>it will make the background transparent.</li>

<code>disableAutoRotate</code>

<li>: if</li>

<code>true</code>

<li>it will disable the auto-rotate behaviour of the camera.</li>

<code>disableAutoCenter</code>

<li>: if</li>

<code>true</code>

<li>it will disable the auto-center around the bounding box.</li>

<code>disableFace</code>

<li>: if</li>

<code>true</code>

<li>it will disable the facial features.</li>

<code>disableDefaultWearables</code>

<li>: if</li>

<code>true</code>

<li>it will not load the default wearables (it will only load the base body shape).</li>

<code>disableFadeEffect</code>

<li>: if</li>

<code>true</code>

<li>it will disable css transitions (the fade in / fade out effect). This is useful for automation tests.</li>

<code>disableDefaultEmotes</code>

<li>: if</li>

<code>true</code>

<li>and</li>

<code>emote</code>

<li>is not passed, it will not load the default IDLE emote.</li>

<code>showSceneBoundaries</code>

<li>: if</li>

<code>true</code>

<li>it will show a cylinder representing the recommended scene boundaries.</li>

<code>showThumbnailBoundaries</code>

<li>: if</li>

<code>true</code>

<li>it will show a square representing the thumbnail boundaries.</li>

<code>env</code>

<li>: The environment to use, it can be</li>

<code>prod</code>

<li>(uses mainnet wearables and catalysts) or</li>

<code>dev</code>

<li>(uses testnet wearables and catalysts).</li>

<p>Example:</p>

<code>iframe</code>

<h3>API:</h3>

<p>It's possible to load the</p>

<code>babylon-preview</code>

<p>in an iframe and communicate with it via</p>

<code>postMessage</code>

<p>:</p>

<h4>Update/override options</h4>

<p>If you want to update some options without having to reload the iframe, you can send an</p>

<code>update</code>

<p>message with the options and their new values:</p>

<pre>:</pre>

<pre>:</pre>

<code>iframe</code>

<h3>events:</h3>

<p>You can listen to events sent by the iframe via</p>

<code>postMessage</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>message</pre>

<pre>:</pre>

<pre>type</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>controller</code>

<h3>RPC</h3>

<p>The</p>

<code>controller</code>

<p>allows to take screenshots and get metrics from the scene, and also control the emote animations (play/pause/stop/goTo).</p>

<p>To use the controller you can send</p>

<code>controller_request</code>

<p>messages and the response will arrive via a</p>

<code>controller_response</code>

<p>message.</p>

<p>The available methods are:</p>

<li>namespace:</li>

<code>scene</code>

<li>method:</li>

<code>getScreenshot</code>

<li>params:</li>

<code>[width: number, height: number]</code>

<li>result:</li>

<code>string</code>

<li>method:</li>

<code>getMetrics</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>Metrics</code>

<li>namespace:</li>

<code>emote</code>

<li>method:</li>

<code>play</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>play</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>play</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>goTo</code>

<li>params:</li>

<code>[seconds: number]</code>

<li>result:</li>

<code>void</code>

<li>method:</li>

<code>getLength</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>number</code>

<li>method:</li>

<code>isPlaying</code>

<li>params:</li>

<code>[]</code>

<li>result:</li>

<code>boolean</code>

<p>This is an example of an RPC:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>id</pre>

<pre>namespace</pre>

<pre>method</pre>

<pre>params</pre>

<pre>:</pre>

<pre>id</pre>

<p>Now you can use it like this:</p>

<h3>Setup</h3>

<code>npm ci</code>

<h3>Development</h3>

<code>npm run start</code>

<h3>Build</h3>

<code>npm run build</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/livekit-components-js

# URL: https://github.com/decentraland/livekit-components-js

<title>GitHub - decentraland/livekit-components-js: Official open source React components and examples for building with LiveKit.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Official open source React components and examples for building with LiveKit.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/livekit-components-js</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>723</strong>

<h2>Files</h2>

<button>View code</button>

<h1>LiveKit Components</h1>

<article>Use this SDK to add real-time video, audio and data features to your React app. By connecting to a self- or cloud-hosted</article>

<article>server, you can quickly build applications like interactive live streaming or video calls with just a few lines of code.</article>

<h2>About LiveKit Components</h2>

<p>Create your</p>

<p>WebRTC experience without worrying about state. LiveKit Components give you a declarative way to build your real-time LiveKit audio/video frontend with React.</p>

<p>Every use case is different and apps in the real world are individual and unique. We don't pretend to have the perfect solution that fits all use cases. Instead, we've taken an approach where we give you reasonable defaults, without taking away full control over each component if you want it.</p>

<h3>ð¤© LiveKit Components handle all state for you</h3>

<p>You don't have to worry about participant or room events to update the state of your application. All components handle state management for you, and by using React contexts, you don't have to route properties through your component tree.</p>

<h3>ð ï¸ Carefully crafted set of components</h3>

<p>We offer all the necessary building blocks to build a live video or audio app in no time.</p>

<h3>ð Beautiful and sane defaults</h3>

<p>We put a lot of effort into creating components that work and look great right out of the gate. Get started quickly by using the defaults of your components or overwrite them by simply adding children.</p>

<pre>LiveKitRoom></pre>

<h3>ð¨ Style them the way you want</h3>

<p>Because most of the components are merely wrappers around standard HTML-Elements you can overwrite the basic component style how ever you want.</p>

<p>On top of that we provide a handful of pre-defined css variables to easily theme LiveKit Components to your needs.</p>

<p>To add styling from our @livekit/components-styles package:</p>

<p>Import all styles including the default theme</p>

<p>And add a theme data attribute to the</p>

<code><LiveKitRoom/></code>

<p>or any HTML container, to gain access to default LiveKit styles.</p>

<pre>="</pre>

<pre>"</pre>

<h3>ð Room to grow: create your own components</h3>

<p>The component we offer does not fit your requirements? We have the solution for you! Each component comes with its own React hook that allows you to create your own component with minimal boilerplate. Of course, you can also combine your own component with our pre-built components. It's common to start with our components to quickly sketch out a concept, and then replace some of them with your own components to build something we could never have imagined.</p>

<h2>Get started</h2>

<p>The best way to get started is to use the</p>

<code>@livekit/components-react</code>

<p>package and install it.</p>

<pre>yarn add @livekit/components-react livekit-client</pre>

<p>or</p>

<pre>npm install @livekit/components-react livekit-client</pre>

<p>Creating a full fledged video conference is as easy as</p>

<h2>Examples</h2>

<p>There are some basic example on how to use and customize LiveKit Components in the</p>

<p>In order to set the examples up locally follow the</p>

<p>.</p>

<p>We also have a fully featured video conferencing application built on top of LiveKit Components</p>

<p>that powers</p>

<p>.</p>

<h2>FAQ</h2>

<h3>Why is there a @livekit/components-core package?</h3>

<p>By abstracting most of the state handling logic into a common core we wanted to make sure that other framework implementations can be created with minimal code duplication. We chose observables as the main data structure for this core as its concepts translate really well to for example React's hooks, solid's signals, Svelte's stores, Vue's composables, and angular loves observables out of the box.</p>

<h3>Did you consider using Custom Elements?</h3>

<p>Yes, we did consider building LK Components with custom elements (web components). We ultimately decided against it in order to give users the option to develop within the constraints of their chosen framework with all its specific concepts (e.g. in the case of react hooks, context etc.). That said the road towards supporting custom elements isn't entirely closed off. If the adoption of custom elements gains traction we can imagine providing a framework implementation that additionally compiles to custom elements (e.g. solid or svelte).</p>

<h3>Will there be an implementation for my favorite framework?</h3>

<p>The highest priority is currently to get the core and react packages to a stable version that people love to work with. Once this is done we will decide on what other frameworks we might to support officially. If you want to develop an implementation for your favorite framework based on the core package we'd love to talk to you about it!</p>

<h2>Development Setup</h2>

<h3>Setup Monorepo</h3>

<p>This repo consists of multiple packages that partly build on top of each other.

It relies on yarn workspaces and</p>

<p>(which gets installed automatically).</p>

<p>On the root level:</p>

<pre>yarn install</pre>

<p>In order to link up initial dependencies and check whether everything has installed correctly run</p>

<pre>yarn build</pre>

<p>This will build all the packages in</p>

<code>/packages</code>

<p>and the examples in</p>

<code>/examples</code>

<p>once.</p>

<p>After that you can use a more granular command to only rebuild the packages you are working on.

E.g. to test and automatically rebuild package dependencies for the nextjs example, run:</p>

<pre>yarn dev:next</pre>

<strong>Note</strong>

<p>for the examples to work you'll need to make sure to copy the the contents of .env.example in the specific example folder to a newly created .env.local file and adjust the values accordingly to your livekit server setup.</p>

<h2>Monorepo Navigation</h2>

<strong>Docs</strong>

<strong>Framework Implementations</strong>

<li>:</li>

<strong>Examples</strong>

<strong>Internal Packages</strong>

<th>LiveKit Ecosystem</th>

<td>Client SDKs</td>

<b>Components</b>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Server SDKs</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Services</td>

<td>Â·</td>

<td>Â·</td>

<td>Resources</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<td>Â·</td>

<h2>About</h2>

<p>Official open source React components and examples for building with LiveKit.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>43</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk7-streaming-world

# URL: https://github.com/decentraland/sdk7-streaming-world

<title>GitHub - decentraland/sdk7-streaming-world</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk7-streaming-world</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>152</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Streaming World Test</h1>

<h1>Adding a new scene</h1>

<p>Check the parcel usage running</p>

<code>node scripts/checkParcelsCollision.js</code>

<p>. The plaza is a rect from 72,-9 to 81,10.</p>

<p>Visit the collection of all the scenes in this repo deployed at</p>

<h2>Before commit</h2>

<p>You will need to make sure the workspace is in good shape for the CI. TO do so, run:</p>

<code>npm run update-parcels && npm run sync && npm run test && npm run format</code>

<li>Then commit</li>

<p>This project uses NPM workspaces, that means all scenes must have their own package.json with an unique name</p>

<h2>Testing pull requests</h2>

<p>Each pull request generates a permanent new realm in</p>

<code>offline:offline</code>

<p>mode. The instructions to enter the realm are posted as a PR comment after passes. The realm is stored in a static CDN, and its name takes the commit hash of the repository. Making realms easy to access even if the PR was merged.</p>

<p>To keep consistent code styles, there is an automated CI step. If the build fails, please make sure to run</p>

<code>npm run format</code>

<p>and commit the changes.</p>

<h2>Testing main branch</h2>

<p>In a Decentraland explorer execute:</p>

<code>/changerealm https://sdk-team-cdn.decentraland.org/ipfs/streaming-world-main</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>15</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/smart-wearable-sample

# URL: https://github.com/decentraland/smart-wearable-sample

<title>GitHub - decentraland/smart-wearable-sample: Portable Experience Sample</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Portable Experience Sample</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/smart-wearable-sample</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland scene</h1>

<p>This folder contains all the necessary files to launch a Decentraland scene.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Portable Experience Sample</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scene

# Change to URL: https://github.com/deploy-to-decentraland

# Change to URL: https://github.com/decentraland/meet

# URL: https://github.com/decentraland/meet

<title>GitHub - decentraland/meet: Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/meet</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>73</strong>

<h2>Files</h2>

<button>View code</button>

<h1>LiveKit Meet</h1>

<strong>Try the demo</strong>

<p>â¢</p>

<p>â¢</p>

<p>â¢</p>

<p>â¢</p>

<p>LiveKit Meet is an open source video conferencing app built on</p>

<p>,</p>

<p>, and Next.js. It's been completely redesigned from the ground up using our new components library.</p>

<h2>Tech Stack</h2>

<li>This is a</li>

<li>project bootstrapped with</li>

<code>create-next-app</code>

<li>.</li>

<li>App is built with</li>

<li>library.</li>

<h2>Demo</h2>

<p>Give it a try at</p>

<p>.</p>

<h2>Dev Setup</h2>

<p>Steps to get a local dev setup up and running:</p>

<li>Run</li>

<code>yarn install</code>

<li>to install all dependencies.</li>

<li>Copy</li>

<code>.env.example</code>

<li>in the project root and rename it to</li>

<code>.env.local</code>

<li>.</li>

<li>Update the missing environment variables in the newly created</li>

<code>.env.local</code>

<li>file.</li>

<li>Run</li>

<code>yarn dev</code>

<li>to start the development server and visit</li>

<li>to see the result.</li>

<li>Start development ð</li>

<h2>About</h2>

<p>Open source video conferencing app built on LiveKit Components, LiveKit Cloud, and Next.js.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>60</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/LAND-permissions-graph

# URL: https://github.com/decentraland/LAND-permissions-graph

<title>GitHub - decentraland/LAND-permissions-graph: A http://thegraph.com/ graph detaling the ownership and permissions of Land</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A</p>

<p>graph detaling the ownership and permissions of Land</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/LAND-permissions-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Ownership and permissions graph</h1>

<p>A</p>

<p>detaling the ownership and permissions of</p>

<code>LAND</code>

<p>and</p>

<code>Estate</code>

<p>s. It's used to make decisions about the historical ownership or permissions of a LAND or Estate.</p>

<p>For clarity, the rest of the file uses</p>

<code>Parcel</code>

<p>and</p>

<code>LAND</code>

<p>interchangeably,</p>

<code>Land</code>

<p>, refers to both</p>

<code>LAND</code>

<p>and</p>

<code>Estate</code>

<th>Network</th>

<th>Provider</th>

<th>URL</th>

<th>Current</th>

<th>Previous</th>

<td>Mainnet</td>

<td>Satsuma</td>

<td>QmZWZWLQqY7FqsjjTsShheSZDSmj1Q3RLogNSwME3yep4Q</td>

<td>-</td>

<td>Mainnet</td>

<td>Hosted Services</td>

<td>QmZWZWLQqY7FqsjjTsShheSZDSmj1Q3RLogNSwME3yep4Q</td>

<td>-</td>

<td>Sepolia</td>

<td>Graph Studio</td>

<td>QmfKfXNfmLrj3DprHtqKmdmCMa7BKqdki7rMiai6byWTQN</td>

<td>-</td>

<td>Goerli</td>

<td>Hosted Services</td>

<td>QmQwkZwFANnwH3bpKdrTD6xUnxs3vgjnD1CX6CKVX49aix</td>

<td>-</td>

<p>Using</p>

<p>and</p>

<h2>Index</h2>

<h2>Permission types</h2>

<p>There are two types of permissions, address-level and Land-level. Address level permissions are given by an address to another address, and grant you access to all of the Land of the recipient. Land level permissions grant you access to a particular Land.</p>

<p>For more information check the roles section of these proposal:</p>

<h2>Entities</h2>

<p>You can check the graph entities in the</p>

<p>file in this repo, or directly on the</p>

<p>. They are:</p>

<strong>Data related</strong>

<strong>Permissions related</strong>

<li>: Address level</li>

<li>: Land level</li>

<li>: Land level</li>

<li>: Land level</li>

<h3>Parcel and Estate</h3>

<p>These entities have information for all parcels (</p>

<code>LAND</code>

<p>) and estates (</p>

<code>Estate</code>

<p>) in Decentraland. Most of the information for each is self-evident, but there are a few interesting props:</p>

<code>Parcel {

id: ID!

(...)

owner: Wallet

owners: [Owner!]

operators: [Operator!]

operator: Bytes

updateOperator: Bytes

updateOperators: [UpdateOperator!]

estate: Estate

estates: [EstateHistory!]

}

Estate {

id: ID!

(...)

owner: Wallet!

owners: [Owner!]

operators: [Operator!]

operator: Bytes

updateOperator: Bytes

updateOperators: [UpdateOperator!]

}</code>

<p>For both</p>

<code>Parcel</code>

<p>s and</p>

<code>Estate</code>

<p>s the entity holds the current owner/operator/updateOperator, but also has a historical array consisting of</p>

<p>s and</p>

<p>s, so you don't necessarily have to query those entities separately.</p>

<p>Also, for parcels, you have a historical array of</p>

<p>so you can check to which Estates the parcel belonged to, if any</p>

<h3>Data</h3>

<p>The parsed data string for each parcel and estate</p>

<h3>Wallet</h3>

<p>All addresses that have either a parcel or a estate in Decentraland</p>

<h3>EstateHistory</h3>

<p>Has a tally</p>

<strong>per parcel</strong>

<p>of each Estate. The Entity allows you to check how many times a parcel was added or removed to an Estate and when. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The</p>

<code>ID</code>

<p>of each EstateHistory is composed of</p>

<code>{blockNumber}-{logIndex}-{type}-{estateId}</code>

<p>, where type is</p>

<code>AddLand</code>

<p>or</p>

<code>RemoveLand</code>

<p>. For example:</p>

<code>10004651-60-RemoveLand-1053</code>

<p>Example query: Get the historical Estate data for the parcel (49,5)</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>{</pre>

<pre>}</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]

}

}</pre>

<p>If you check those results, you can see that the parcel (</p>

<code>49,5</code>

<p>) was first added to the Estate</p>

<code>1053</code>

<p>, to then be removed and re-added to</p>

<code>3673</code>

<h3>Authorization</h3>

<p>Address-level permissions for Land, composed of</p>

<code>UpdateManager</code>

<p>and</p>

<code>ApprovalForAll</code>

<p>. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The id of each Entity is composed of</p>

<code>{blockNumber}-{logIndex}-{type}</code>

<p>where type is Operator or Manager. The type is what let's you know which type of Authorization was given.</p>

<p>The Authorization type is not tied to a particular LAND or Estate, that is why it has the</p>

<code>tokenAddress</code>

<p>property, it'll refer to the EstateRegistry or LANDRegistry respectively, or maybe a new asset in the future. The</p>

<code>operator</code>

<p>prop is the address that received the Authorization</p>

<p>Example query: Get all the authorizations an address gave</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

) {</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]

}

}</pre>

<p>This can be read as: The address</p>

<code>0x1fc5616bb5cc9774c23b734a1a4e5ec82ebdc89a</code>

<p>gave ApprovalForAll permissions to</p>

<code>0x8e5660b4ab70168b5a6feea0e0315cb49c8cd539</code>

<p>to manage both their LANDs (</p>

<code>0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d</code>

<p>) and Estates (</p>

<code>0x959e104e1a4db6317fa58f8295f586e1a978c297</code>

<p>)</p>

<h3>Owner</h3>

<p>Land-level permission, denotes</p>

<p>of each Land. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The id of each Entity is composed of</p>

<code>{blockNumber}-{logIndex}-{type}</code>

<p>where type is Owner. The prop</p>

<code>eventName</code>

<p>is here for completeness sake, as it's always a</p>

<code>Transfer</code>

<p>.</p>

<p>Example query: Get the historical owners for the parcel (-69,8)</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]

}

}</pre>

<p>The last owner on this result set, should always coincide with the</p>

<code>Parcel</code>

<p>entity</p>

<code>owner</code>

<p>prop. You could check it here by adding</p>

<pre>{

(...)</pre>

<pre>{</pre>

<pre>{</pre>

<pre>}

}

}</pre>

<p>to the query</p>

<h3>Operator and UpdateOperator</h3>

<p>Land-level permissions, composed of</p>

<p>and</p>

<p>. These entities give you a clear idea of which address gave which permission, and to which Land. The data is timestamped to allow for historical queries, the last record by</p>

<code>createdAt</code>

<p>is the most recent.

The id of each Entity is composed of</p>

<code>{blockNumber}-{logIndex}-{type}</code>

<p>where type is Operator or UpdateOperator. You can check which type of event triggered the permission by getting the</p>

<code>eventName</code>

<p>prop, which could be:</p>

<li>Approval: Grant/revoke operator permissions</li>

<li>UpdateOperator: Grant/revoke update operator permissions</li>

<li>Transfer: Reset permissions</li>

<p>Example query: Get the operator and update operator historical data for the (89,-139) parcel</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}

}</pre>

<p>Result</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

],</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>},

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]

}

}</pre>

<p>You can see in the results how the address is null on Transfers, as the Land-level persmissions are cleared</p>

<h2>Example Query</h2>

<p>Get all permissions an address (</p>

<code>0x4fee7b061c97c9c496b01dbce9cdb10c02f0a0be</code>

<p>) has for a particular Land (</p>

<code>20,12</code>

<p>):</p>

<p>First we check the parcel itself, for the current Land-level permissions and to check if it's in a Estate:</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}) {</pre>

<pre>{</pre>

<pre>}</pre>

<pre>{</pre>

<pre>}

}

}</pre>

<p>Result:</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>},</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]

}

}</pre>

<p>Here we can tell that:</p>

<li>The Parcel does not belong to a Estate</li>

<li>Our address is the operator of the Parcel</li>

<p>Next we have to check address level permissions, to do that, we have to check if the owner of the parcel,</p>

<code>0x7a536388147c04c5407ca6a7117141faa611bdde</code>

<p>, has given an</p>

<p>to it:</p>

<pre>{</pre>

<pre>(</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>}</pre>

<pre>:</pre>

<pre>:</pre>

<pre>) {</pre>

<pre>}

}</pre>

<p>Result:</p>

<pre>{</pre>

<pre>: {</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]

}

}</pre>

<p>We can see here that our operator has an Operator (</p>

<code>ApprovalForAll</code>

<p>) permission for all LANDs (</p>

<code>0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d</code>

<p>) our owner has.</p>

<strong>In conclusion</strong>

<p>:</p>

<p>The address</p>

<code>0x4fee7b061c97c9c496b01dbce9cdb10c02f0a0be</code>

<p>is</p>

<li>The operator of</li>

<code>(20,12)</code>

<li>Has all</li>

<code>ApprovalForAll</code>

<li>permissions over</li>

<code>0x7a536388147c04c5407ca6a7117141faa611bdde</code>

<li>LAND. As long as</li>

<code>0x7a536388147c04c5407ca6a7117141faa611bdde</code>

<li>has</li>

<code>(20,12)</code>

<li>, she will have access.</li>

<h2>Run</h2>

<pre>npm run codegen

npm run build

npm run deploy</pre>

<h2>About</h2>

<p>A</p>

<p>graph detaling the ownership and permissions of Land</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-lists-graph

# URL: https://github.com/decentraland/decentraland-lists-graph

<title>GitHub - decentraland/decentraland-lists-graph: Catalyst, POIs, Ban Names list</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Catalyst, POIs, Ban Names list</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-lists-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland lists graph</h1>

<li>Mainnet:</li>

<li>(QmTBP7FEU1gHJaSev3wZsyoV47rV8hWdTpH1JnU2Krzycy)</li>

<li>Ropsten:</li>

<li>(QmdZDDBGi4gyrSaJH8hCU493c1iQvMhAEyKSTDAoH4DHZ5)</li>

<li>Sepolia:</li>

<li>(QmQyDBMkGXZpubcKKnomnmDU2z5FhjCEuHr2FYhGS2esU2)</li>

<li>Goerli:</li>

<li>(QmPNMrWGnkpikrEgDktwKZaFhhaZz2DLGLrSAhMZZdrsye)</li>

<h3>Install</h3>

<pre>npm run install</pre>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<p>Ethereum addresses should be passed lowercased:</p>

<code>0xB549B2442b2BD0a53795BC5cDcBFE0cAF7ACA9f8</code>

<li>â</li>

<code>0xb549b2442b2bd0a53795bc5cdcbfe0caf7aca9f8</code>

<li>â</li>

<h4>Get active Catalyst, POIs or Names</h4>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Get totals</h4>

<h2>About</h2>

<p>Catalyst, POIs, Ban Names list</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-lists-graph

# Change to URL: https://github.com/decentraland/ethereum-blocks

# URL: https://github.com/decentraland/ethereum-blocks

<title>GitHub - decentraland/ethereum-blocks</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ethereum-blocks</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Blocks info to be used on multichain snapshot strategy</h1>

<h2>URLS:</h2>

<li>(QmXebqMHXdRKeUzqkiNPDhWdqZCzqadGRmhfb1qfikHhzC)</li>

<li>(QmSRbWhQhAn7onR6LszorPTLu5gdU6Kn8pfhwSVSGJZyKN)</li>

<li>(QmZ18hhCLAnx3ehh1pGvBqT7QndrXoQNV5YKCoeur7Jupr)</li>

<li>(QmZ18hhCLAnx3ehh1pGvBqT7QndrXoQNV5YKCoeur7Jupr)</li>

<li>(QmfJgvNwvA19ErStudGK92d9tqLkYE7rAZ3wKguQQu5xHQ)</li>

<li>(QmSRbWhQhAn7onR6LszorPTLu5gdU6Kn8pfhwSVSGJZyKN)</li>

<h2>Install</h2>

<pre>npm i</pre>

<h2>Deploy</h2>

<pre>npm run deploy:mainnet

npm run deploy:mumbai</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>222</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer-skyboxes

# URL: https://github.com/decentraland/explorer-skyboxes

<title>GitHub - decentraland/explorer-skyboxes: Skyboxes for Explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Skyboxes for Explorer</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-skyboxes</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>explorer-skyboxes</h1>

<p>Skyboxes for Explorer</p>

<h2>About</h2>

<p>Skyboxes for Explorer</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/platform-substreams-indexer

# URL: https://github.com/decentraland/platform-substreams-indexer

<title>GitHub - decentraland/platform-substreams-indexer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/platform-substreams-indexer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>19</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-substreams</h1>

<p>An implementation of StreamingFast's substreams for dcl contracts</p>

<h1>Substreams</h1>

<p>Developer preview</p>

<p>Substreams is a powerful blockchain indexing technology, developed for The Graph Network.</p>

<p>Substreams enables developers to write Rust modules, composing data streams alongside the community, and provides extremely high performance indexing by virtue of parallelization, in a streaming-first fashion.</p>

<p>Substreams has all the benefits of StreamingFast Firehose, like low-cost caching and archiving of blockchain data, high throughput processing, and cursor-based reorgs handling.</p>

<h1>Running the substreams</h1>

<p>First, compile the substreams modules:</p>

<code>cargo build --release --target wasm32-unknown-unknown</code>

<p>Then, run the module that you want:</p>

<code>substreams run -e mainnet.eth.streamingfast.io:443 substreams.yaml map_collection_created --start-block 10000001 --stop-block +1</code>

<h1>Running the sink module</h1>

<p>You'll need to have the</p>

<p>cli installed. I recommend using the</p>

<code>go</code>

<p>installation:</p>

<code>go install github.com/streamingfast/substreams-sink-postgres/cmd/substreams-sink-postgres@latest.</code>

<p>Check if you have the GOPATH as part of your</p>

<code>PATH</code>

<p>. If not, add it:</p>

<code>export PATH=$PATH:$(go env GOPATH)/bin</code>

<p>Finally, run the sink</p>

<code>substreams-sink-postgres run \

"psql://db_user:db_pass@localhost:5432/db_name?sslmode=disable" \

"polygon.streamingfast.io:443" \

"substreams.yaml" \

db_out</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/vestings-builder

# URL: https://github.com/decentraland/vestings-builder

<title>GitHub - decentraland/vestings-builder: UI to deploy vesting contracts using a minimal proxy</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>UI to deploy vesting contracts using a minimal proxy</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/vestings-builder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Vesting Generator</h1>

<p>Allows the deployment of a single or multiple</p>

<p>contracts.

Still supports the deployment of the original</p>

<p>contract.</p>

<h2>Use it</h2>

<p>to deploy a single</p>

<code>PeriodicTokenVesting</code>

<p>contract.</p>

<p>to deploy multiple</p>

<code>PeriodicTokenVesting</code>

<p>contracts in batch using a csv file.</p>

<p>To use the UI for deploying the original</p>

<code>TokenVesting</code>

<p>contract, you have to append</p>

<code>/old</code>

<p>to the URL. For example:</p>

<p>to deploy a single</p>

<code>TokenVesting</code>

<p>contract.</p>

<p>to deploy a multiple</p>

<code>TokenVesting</code>

<p>contracts in batch using a csv file.</p>

<p>For single deployments, you can set values optionally through the URL instead of filling them in the form by providing query params for each of them as follows:</p>

<code>https://vestings-deployer.vercel.app/?owner=<address>&beneficiary=<address>&token=<address></code>

<p>Query params supported by the</p>

<code>PeriodicTokenVesting</code>

<p>deployment UI are:</p>

<code>owner=<address>

beneficiary=<address>

token=<address>

revocable=<yes|no>

pausable=<yes|no>

linear=<yes|no>

start=<yyyy-mm-dd>

period=<seconds>

cliff=<seconds>

vestedPerPeriod=<comma separated numbers></code>

<p>Query params supported by the original</p>

<code>TokenVesting</code>

<p>deployment UI are:</p>

<code>beneficiary=<address>

token=<address>

cliff=<seconds>

revocable=<yes|no>

start=<yyyy-mm-dd>

duration=<seconds></code>

<h2>Development</h2>

<p>Required software</p>

<code>node ^16

npm ^7</code>

<p>Install dependencies.</p>

<pre>npm ci</pre>

<p>Run frontend.</p>

<pre>npm start</pre>

<p>Compile Smart Contracts inside the</p>

<code>./contracts</code>

<p>directory.</p>

<pre>npx hardhat compile</pre>

<p>Run Smart Contract tests.</p>

<pre>npx hardhat</pre>

<p>Run Smart Contract tests with coverage.</p>

<pre>npx hardhat coverage</pre>

<h1>Periodic Token Vesting</h1>

<p>Allows vesting an ERC20 token through consecutive periods of time of the same length.</p>

<p>Each period is defined with an amount of tokens to be vested.

If the contract is defined as Linear, the amount defined in the current period will be vested proportionally to the time that has elapsed.

If it is not, only when the period elapses the amount defined will be vested.</p>

<p>The beneficiary is the only address able to release vested tokens.

When releasing, the beneficiary can choose which address will receive the vested tokens as well as the amount.

The beneficiary can also transfer the beneficiary status to another address.</p>

<p>When initializing the contract, it can be defined as revocable and/or pausable.

Only the owner can pause or revoke the contract.

If the contract is paused or revoked, tokens will stop vesting up to that timestamp.

A paused contract can be unpaused, resuming the normal course of the vesting.

However, revoking a contract is irreversible, once revoked the vesting is stopped forever.</p>

<p>The contract will start vesting the moment it has been defined to do so, despite if it has been funded with tokens.

The beneficiary is only able to release an amount of tokens that the contract actually has in its balance.

For example, if the contract has vested 100 tokens, but it only has 10 in its balance, the beneficiary will only be able to release up to 10 tokens.

It will fail otherwise.</p>

<p>Moreover, the amount of tokens in the contract's balance that exceeds the amount of tokens that will be vested through the sum of all periods is considered surplus.

The owner of the contract can release any amount of surplus tokens to the desired recipient.

When a contract is revoked, all non-vested tokens will become surplus, allowing the owner of the contract to withdraw them.</p>

<h2>Deployment and Initialization</h2>

<p>The contract has been developed to be used as the implementation of multiple proxies.

The deployed contract cannot be used directly as it cannot be initialized due to the</p>

<code>_disableInitializers</code>

<p>in its constructor which is intended to prevent the initialization of implementations.</p>

<p>Once a proxy is deployed with the implementation address being the deployed PeriodicTokenVesting contract, it has to be initialized once calling the</p>

<code>initialize</code>

<p>function.</p>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>)</pre>

<pre>initializer {}</pre>

<h2>Examples</h2>

<strong>Example 1</strong>

<p>We might want to create a vesting with the following conditions:</p>

<li>4 years duration</li>

<li>1 year cliff</li>

<li>10k tokens in total to be vested</li>

<li>Tokens are vested per quarter instead of every second after the cliff</li>

<li>The first 3 years will vest 25% of the total and the last year will vest the rest</li>

<p>For the requirements mentioned previously we would need to provide the following data to obtain a vesting program that fits it.</p>

<h3>isLinear</h3>

<p>Has to be false, this is because we want tokens to be vested quarterly and not every second.</p>

<h3>periodDuration</h3>

<p>Has to be a quarter of a year (7889400 seconds). As tokens are vested quarterly, we will be defining periods that have this duration each.</p>

<h3>cliffDuration</h3>

<p>Has to be a year (31557600 seconds). The beneficiary will not vest anything for the first year.</p>

<h3>vestedPerPeriod</h3>

<p>Contains how much tokens will be vested after each period passes. Each period lasts a quarter and in 4 years, which is the total duration of the vesting, there are 16 quarters. This means we have to define how much is vested on each of these 16 periods.</p>

<p>25% will be vested on the first 3 years and 75% will be released on the last year. Meaning 2500 tokens are vested on the first 3 years and 7500 on the last one.</p>

<p>We need to configure 16 periods to reflect these values, so the first 2.5k tokens will be distributed in the first 12 periods and the 7.5k tokens in the last 4 periods. Leaving us with an array that looks like the following:</p>

<p>Every quarter that passes will vest the amount defined for the corresponding period, always taking into consideration the cliff. In this example, when the year elapses, 208.33 * 4 will be vested as the cliff is over. Then, every quarter that passes will vest the extra tokens it has defined until all periods are over and the 10k can be released.</p>

<strong>Example 2</strong>

<p>We might want to create a vesting with the following conditions:</p>

<li>3 years duration</li>

<li>A year and a half of cliff</li>

<li>2k are vested the first year, 4k the second, and 6k the third, for a total of 12k tokens</li>

<li>Tokens are vested every second</li>

<p>This kind of vesting might never exist as a real use case, however, this just shows the flexibility this contract provides.</p>

<h3>isLinear</h3>

<p>Has to be true because we want tokens to be vested every second, not by quarters of a year like Example 1.</p>

<h3>periodDuration</h3>

<p>We are asked to vest different amounts on each year, so we will need to configure 3 different periods. As we have 3 periods in a vesting of 3 years, the period duration should be of a year.</p>

<h3>cliffDuration</h3>

<p>The cliff has to be of a year and a half so that's it.</p>

<h3>vestedPerPeriod</h3>

<p>We have been asked to vest different amount of tokens each year of the vesting, so we will need to defined 3 different periods.</p>

<p>We have a cliff of a year and a half, so until that time elapses, the contract will vest nothing. Once the year and a half passes, the contract will vest what corresponds to that time. It will vest all the tokens from the first period as it has elapsed completely, and will vest half of the tokens defined in the second period, as only half of that period has passed.

.</p>

<strong>Example 3</strong>

<p>Consider the following setup for the "Higher Tier" schedule:</p>

<li>60000 in tokens total amount</li>

<li>6 Months duration</li>

<li>10k tokens are vested each 30 days, for a total of 60k tokens</li>

<li>Initialized to start on either 1st or 15th of month</li>

<p>This new vesting schedule will follow a step function, where compensation is made available in chunks over periods of time.</p>

<h3>isLinear</h3>

<p>Has to be false, this is because we want tokens to be vested by period and not every second.</p>

<h3>periodDuration</h3>

<p>We are asked to vest different amounts on each 30 days, so we will need to configure 6 different periods. As we have 6 periods in a vesting of 6 months, the period duration should be of 30 days.</p>

<h3>cliffDuration</h3>

<p>The cliff duration is not required when using vesting per period logic. Funds will only vest after the first period duration has passed, the same as using a cliff.</p>

<h3>vestedPerPeriod</h3>

<p>We have been asked to vest an equal amount of tokens each 30 days of the vesting, so we will need to define 6 equal periods.</p>

<p>The contract will vest what corresponds to each period, only after the period has elapsed.

.</p>

<h3>startTime</h3>

<p>The start time will be set to the timestamp of the 1st of 15th of the starting month.</p>

<h2>About</h2>

<p>UI to deploy vesting contracts using a minimal proxy</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-vesting-generator

# Change to URL: https://github.com/decentraland/ts-proto

# URL: https://github.com/decentraland/ts-proto

<title>GitHub - decentraland/ts-proto: An idiomatic protobuf generator for TypeScript</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>An idiomatic protobuf generator for TypeScript</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ts-proto</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>4</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,024</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/ts-proto</h1>

<p>This is a fork of</p>

<p>. Here we use</p>

<code>namespace</code>

<p>exports instead of export object with properties for messages.</p>

<h1>ts-proto</h1>

<code>ts-proto</code>

<p>transforms your</p>

<code>.proto</code>

<p>files into strongly-typed, idiomatic TypeScript files!</p>

<h2>Table of contents</h2>

<h1>Overview</h1>

<p>ts-proto generates TypeScript types from protobuf schemas.</p>

<p>I.e. given a</p>

<code>person.proto</code>

<p>schema like:</p>

<pre>{</pre>

<pre>;

}</pre>

<p>ts-proto will generate a</p>

<code>person.ts</code>

<p>file like:</p>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>...</pre>

<p>It also knows about services and will generate types for them as well, i.e.:</p>

<pre>:</pre>

<pre>:</pre>

<p>It will also generate client implementations of</p>

<code>PingService</code>

<p>; currently</p>

<p>,</p>

<p>,</p>

<p>and</p>

<p>are supported.</p>

<h1>QuickStart</h1>

<code>npm install ts-proto</code>

<code>protoc --plugin=./node_modules/.bin/protoc-gen-dcl_ts_proto --ts_proto_out=. ./simple.proto</code>

<li>(Note that the output parameter name,</li>

<code>ts_proto_out</code>

<li>, is named based on the suffix of the plugin's name, i.e. "ts_proto" suffix in the</li>

<code>--plugin=./node_modules/.bin/protoc-gen-dcl_ts_proto</code>

<li>parameter becomes the</li>

<code>_out</code>

<li>prefix, per</li>

<code>protoc</code>

<li>'s CLI conventions.)</li>

<li>On Windows, use</li>

<code>protoc --plugin=protoc-gen-dcl_ts_proto=.\\node_modules\\.bin\\protoc-gen-ts_proto.cmd--ts_proto_out=. ./simple.proto</code>

<li>(see</li>

<li>)</li>

<li>Ensure you're using a modern</li>

<code>protoc</code>

<li>, i.e. the original</li>

<code>protoc</code>

<code>3.0.0</code>

<li>doesn't support the</li>

<code>_opt</code>

<li>flag</li>

<p>This will generate</p>

<code>*.ts</code>

<p>source files for the given</p>

<code>*.proto</code>

<p>types.</p>

<p>If you want to package these source files into an npm package to distribute to clients, just run</p>

<code>tsc</code>

<p>on them as usual to generate the</p>

<code>.js</code>

<p>/</p>

<code>.d.ts</code>

<p>files, and deploy the output as a regular npm package.</p>

<h2>Buf</h2>

<p>If you're using Buf, pass</p>

<code>strategy: all</code>

<p>in your</p>

<code>buf.gen.yaml</code>

<p>file (</p>

<p>).</p>

<pre>:</pre>

<pre>:

-</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To prevent</p>

<code>buf push</code>

<p>from reading irrelevent</p>

<code>.proto</code>

<p>files, configure</p>

<code>buf.yaml</code>

<p>like so:</p>

<pre>:</pre>

<pre>:</pre>

<p>You can also use the official plugin published to the Buf Registry.</p>

<pre>:</pre>

<pre>:

-</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:

-</pre>

<pre>-</pre>

<h2>ESM</h2>

<p>If you're using a modern TS setup with either</p>

<code>esModuleInterop</code>

<p>or running in an ESM environment, you'll need to pass</p>

<code>ts_proto_opt</code>

<p>s of:</p>

<code>esModuleInterop=true</code>

<li>if using</li>

<code>esModuleInterop</code>

<li>in your</li>

<code>tsconfig.json</code>

<li>, and</li>

<code>importSuffix=.js</code>

<li>if executing the generated ts-proto code in an ESM environment</li>

<h1>Goals</h1>

<p>In terms of the code that</p>

<code>ts-proto</code>

<p>generates, the general goals are:</p>

<li>Idiomatic TypeScript/ES6 types</li>

<code>ts-proto</code>

<li>is a clean break from either the built-in Google/Java-esque JS code of</li>

<code>protoc</code>

<li>or the "make</li>

<code>.d.ts</code>

<li>files the</li>

<code>*.js</code>

<li>comments" approach of</li>

<code>protobufjs</code>

<li>(Techically the</li>

<code>protobufjs/minimal</code>

<li>package is used for actually reading/writing bytes.)</li>

<li>TypeScript-first output</li>

<li>Interfaces over classes</li>

<li>As much as possible, types are just interfaces, so you can work with messages just like regular hashes/data structures.</li>

<li>Only supports codegen</li>

<code>*.proto</code>

<li>-to-</li>

<code>*.ts</code>

<li>workflow, currently no runtime reflection/loading of dynamic</li>

<code>.proto</code>

<li>files</li>

<h2>Non-Goals</h2>

<p>Note that ts-proto is not an out-of-the-box RPC framework; instead it's more of a swiss-army knife (as witnessed by its many config options), that lets you build</p>

<em>exactly</em>

<p>the RPC framework you'd like on top of it (i.e. that best integrates with your company's protobuf ecosystem; for better or worse, protobuf RPC is still a somewhat fragmented ecosystem).</p>

<p>If you'd like an out-of-the-box RPC framework built on top of ts-proto, there are a few examples:</p>

<p>(Note for potential contributors, if you develop other frameworks/mini-frameworks, or even blog posts/tutorials, on using</p>

<code>ts-proto</code>

<p>, we're happy to link to them.)</p>

<h1>Example Types</h1>

<p>The generated types are "just data", i.e.:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Along with</p>

<code>encode</code>

<p>/</p>

<code>decode</code>

<p>factory methods:</p>

<pre>?:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>?:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<p>This allows idiomatic TS/JS usage like:</p>

<pre>: ...</pre>

<pre>: ...</pre>

<pre>...</pre>

<p>Which can dramatically ease integration when converting to/from other layers without

creating a class and calling the right getters/setters.</p>

<h1>Highlights</h1>

<p>A poor man's attempt at "please give us back optional types"</p>

<p>The canonical protobuf wrapper types, i.e.</p>

<code>google.protobuf.StringValue</code>

<p>, are mapped as optional values, i.e.</p>

<code>string | undefined</code>

<p>, which means for primitives we can kind of pretend the protobuf type system has optional types.</p>

<p>(</p>

<strong>Update</strong>

<p>: ts-proto now also supports the proto3</p>

<code>optional</code>

<p>keyword.)</p>

<p>Timestamps are mapped as</p>

<code>Date</code>

<p>(Configurable with the</p>

<code>useDate</code>

<p>parameter.)</p>

<code>fromJSON</code>

<p>/</p>

<code>toJSON</code>

<p>use the</p>

<p>(e.g. timestamps are ISO strings), unlike</p>

<code>protobufjs</code>

<p>.</p>

<p>ObjectIds can be mapped as</p>

<code>mongodb.ObjectId</code>

<p>(Configurable with the</p>

<code>useMongoObjectId</code>

<p>parameter.)</p>

<h1>Auto-Batching / N+1 Prevention</h1>

<p>(Note: this is currently only supported by the Twirp clients.)</p>

<p>If you're using ts-proto's clients to call backend micro-services, similar to the N+1 problem in SQL applications, it is easy for micro-service clients to (when serving an individual request) inadvertantly trigger multiple separate RPC calls for "get book 1", "get book 2", "get book 3", that should really be batched into a single "get books [1, 2, 3]" (assuming the backend supports a batch-oriented RPC method).</p>

<p>ts-proto can help with this, and essentially auto-batch your individual "get book" calls into batched "get books" calls.</p>

<p>For ts-proto to do this, you need to implement your service's RPC methods with the batching convention of:</p>

<li>A method name of</li>

<code>Batch<OperationName></code>

<li>The</li>

<code>Batch<OperationName></code>

<li>input type has a single repeated field (i.e.</li>

<code>repeated string ids = 1</code>

<li>)</li>

<li>The</li>

<code>Batch<OperationName></code>

<li>output type has either a:</li>

<li>A single repeated field (i.e.</li>

<code>repeated Foo foos = 1</code>

<li>)</li>

<em>where the output order is the same as the input</em>

<code>ids</code>

<em>order</em>

<li>, or</li>

<li>A map of the input to an output (i.e.</li>

<code>map<string, Entity> entities = 1;</code>

<li>)</li>

<p>When ts-proto recognizes methods of this pattern, it will automatically create a "non-batch" version of</p>

<code><OperationName></code>

<p>for the client, i.e.</p>

<code>client.Get<OperationName></code>

<p>, that takes a single id and returns a single result.</p>

<p>This provides the client code with the illusion that it can make individual</p>

<code>Get<OperationName></code>

<p>calls (which is generally preferrable/easier when implementing the client's business logic), but the actual implementation that ts-proto provides will end up making</p>

<code>Batch<OperationName></code>

<p>calls to the backend service.</p>

<p>You also need to enable the</p>

<code>useContext=true</code>

<p>build-time parameter, which gives all client methods a Go-style</p>

<code>ctx</code>

<p>parameter, with a</p>

<code>getDataLoaders</code>

<p>method that lets ts-proto cache/resolve request-scoped</p>

<p>, which provide the fundamental auto-batch detection/flushing behavior.</p>

<p>See the</p>

<code>batching.proto</code>

<p>file and related tests for examples/more details.</p>

<p>But the net effect is that ts-proto can provide SQL-/ORM-style N+1 prevention for clients calls, which can be critical especially in high-volume / highly-parallel implementations like GraphQL front-end gateways calling backend micro-services.</p>

<h1>Usage</h1>

<code>ts-proto</code>

<p>is a</p>

<code>protoc</code>

<p>plugin, so you run it by (either directly in your project, or more likely in your mono-repo schema pipeline, i.e. like</p>

<p>or</p>

<p>):</p>

<li>Add</li>

<code>ts-proto</code>

<li>to your</li>

<code>package.json</code>

<li>Run</li>

<code>npm install</code>

<li>to download it</li>

<li>Invoke</li>

<code>protoc</code>

<li>with a</li>

<code>plugin</code>

<li>parameter like:</li>

<pre>protoc --plugin=node_modules/ts-proto/protoc-gen-dcl_ts_proto ./batching.proto -I.</pre>

<code>ts-proto</code>

<p>can also be invoked with</p>

<p>using the</p>

<p>:</p>

<pre>protobuf {

plugins {</pre>

<pre>ts {

path</pre>

<pre>}

}</pre>

<pre>generateProtoTasks {

all()</pre>

<pre>each {</pre>

<pre>task</pre>

<pre>plugins {</pre>

<pre>ts {

option</pre>

<pre>}

}

}

}

}</pre>

<p>Generated code will be placed in the Gradle build directory.</p>

<h3>Supported options</h3>

<p>With</p>

<code>--ts_proto_opt=context=true</code>

<p>, the services will have a Go-style</p>

<code>ctx</code>

<p>parameter, which is useful for tracing/logging/etc. if you're not using node's</p>

<code>async_hooks</code>

<p>api due to performance reasons.</p>

<p>With</p>

<code>--ts_proto_opt=forceLong=long</code>

<p>, all 64-bit numbers will be parsed as instances of</p>

<code>Long</code>

<p>(using the</p>

<p>library).</p>

<p>With</p>

<code>--ts_proto_opt=forceLong=string</code>

<p>, all 64-bit numbers will be output as strings.</p>

<p>With</p>

<code>--ts_proto_opt=forceLong=bigint</code>

<p>, all 64-bit numbers will be output as</p>

<code>BigInt</code>

<p>s. This option still uses the</p>

<code>long</code>

<p>library to encode/decode internally within</p>

<code>protobuf.js</code>

<p>, but then converts to/from</p>

<code>BigInt</code>

<p>s in the ts-proto-generated code.</p>

<p>The default behavior is</p>

<code>forceLong=number</code>

<p>, which will internally still use the</p>

<code>long</code>

<p>library to encode/decode values on the wire (so you will still see a</p>

<code>util.Long = Long</code>

<p>line in your output), but will convert the</p>

<code>long</code>

<p>values to</p>

<code>number</code>

<p>automatically for you. Note that a runtime error is thrown if, while doing this conversion, a 64-bit value is larger than can be correctly stored as a</p>

<code>number</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=esModuleInterop=true</code>

<p>changes output to be</p>

<code>esModuleInterop</code>

<p>compliant.</p>

<p>Specifically the</p>

<code>Long</code>

<p>imports will be generated as</p>

<code>import Long from 'long'</code>

<p>instead of</p>

<code>import * as Long from 'long'</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=env=node</code>

<p>or</p>

<code>browser</code>

<p>or</p>

<code>both</code>

<p>, ts-proto will make environment-specific assumptions in your output. This defaults to</p>

<code>both</code>

<p>, which makes no environment-specific assumptions.</p>

<p>Using</p>

<code>node</code>

<p>changes the types of</p>

<code>bytes</code>

<p>from</p>

<code>Uint8Array</code>

<p>to</p>

<code>Buffer</code>

<p>for easier integration with the node ecosystem which generally uses</p>

<code>Buffer</code>

<p>.</p>

<p>Currently</p>

<code>browser</code>

<p>doesn't have any specific behavior other than being "not</p>

<code>node</code>

<p>". It probably will soon/at some point.</p>

<p>With</p>

<code>--ts_proto_opt=useOptionals=messages</code>

<p>(for message fields) or</p>

<code>--ts_proto_opt=useOptionals=all</code>

<p>(for message and scalar fields), fields are declared as optional keys, e.g.</p>

<code>field?: Message</code>

<p>instead of the default</p>

<code>field: Message | undefined</code>

<p>.</p>

<p>ts-proto defaults to</p>

<code>useOptionals=none</code>

<p>because it:</p>

<li>Prevents typos when initializing messages, and</li>

<li>Provides the most consistent API to readers</li>

<li>Ensures production messages are properly initialized with all fields.</li>

<p>For typo prevention, optional fields make it easy for extra fields to slip into a message (until we get</p>

<p>), i.e.:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<p>For a consistent API, if</p>

<code>SomeMessage.lastName</code>

<p>is optional</p>

<code>lastName?</code>

<p>, then readers have to check</p>

<em>two</em>

<p>empty conditions: a) is</p>

<code>lastName</code>

<code>undefined</code>

<p>(b/c it was created in-memory and left unset), or b) is</p>

<code>lastName</code>

<p>empty string (b/c we read</p>

<code>SomeMessage</code>

<p>off the wire and correctly set</p>

<code>lastName</code>

<p>to empty string)?</p>

<p>For ensuring proper initialization, if later</p>

<code>SomeMessage.middleInitial</code>

<p>is added, but it's marked as optional</p>

<code>middleInitial?</code>

<p>, you may have many call sites in production code that</p>

<em>should</em>

<p>now be passing</p>

<code>middleInitial</code>

<p>to create a valid</p>

<code>SomeMessage</code>

<p>, but are not.</p>

<p>So, between typo-prevention, reader inconsistency, and proper initialization, ts-proto recommends using</p>

<code>useOptionals=none</code>

<p>as the "most safe" option.</p>

<p>All that said, this approach does require writers/creators to set every field (although</p>

<code>fromPartial</code>

<p>and</p>

<code>create</code>

<p>are meant to address this), so if you still want to have optional fields, you can set</p>

<code>useOptionals=messages</code>

<p>or</p>

<code>useOptionals=all</code>

<p>.</p>

<p>(See</p>

<p>and</p>

<p>for discussions on</p>

<code>useOptional</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=exportCommonSymbols=false</code>

<p>, utility types like</p>

<code>DeepPartial</code>

<p>and</p>

<code>protobufPackage</code>

<p>won't be</p>

<code>export</code>

<p>d.</p>

<p>This should make it possible to use create barrel imports of the generated output, i.e.</p>

<code>import * from ./foo</code>

<p>and</p>

<code>import * from ./bar</code>

<p>.</p>

<p>Note that if you have the same message name used in multiple</p>

<code>*.proto</code>

<p>files, you will still get import conflicts.</p>

<p>With</p>

<code>--ts_proto_opt=oneof=unions</code>

<p>,</p>

<code>oneof</code>

<p>fields will be generated as ADTs.</p>

<p>See the "OneOf Handling" section.</p>

<p>With</p>

<code>--ts_proto_opt=unrecognizedEnum=false</code>

<p>enums will not contain an</p>

<code>UNRECOGNIZED</code>

<p>key with value of -1.</p>

<p>With</p>

<code>--ts_proto_opt=removeEnumPrefix=true</code>

<p>generated enums will have the enum name removed from members.</p>

<code>FooBar.FOO_BAR_BAZ = "FOO_BAR_BAZ"</code>

<p>will generate</p>

<code>FooBar.BAZ = "FOO_BAR_BAZ"</code>

<p>With</p>

<code>--ts_proto_opt=lowerCaseServiceMethods=true</code>

<p>, the method names of service methods will be lowered/camel-case, i.e.</p>

<code>service.findFoo</code>

<p>instead of</p>

<code>service.FindFoo</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=snakeToCamel=false</code>

<p>, fields will be kept snake case in both the message keys and the</p>

<code>toJSON</code>

<p>/</p>

<code>fromJSON</code>

<p>methods.</p>

<code>snakeToCamel</code>

<p>can also be set as a</p>

<code>_</code>

<p>-delimited list of strings (comma is reserved as the flag delimited), i.e.</p>

<code>--ts_proto_opt=snakeToCamel=keys_json</code>

<p>, where including</p>

<code>keys</code>

<p>will make message keys be camel case and including</p>

<code>json</code>

<p>will make JSON keys be camel case.</p>

<p>Empty string, i.e.</p>

<code>snakeToCamel=</code>

<p>, will keep both messages keys and</p>

<code>JSON</code>

<p>keys as snake case (it is the same as</p>

<code>snakeToCamel=false</code>

<p>).</p>

<p>Note that to use the</p>

<code>json_name</code>

<p>attribute, you'll have to use the</p>

<code>json</code>

<p>.</p>

<p>The default behavior is</p>

<code>keys_json</code>

<p>, i.e. both will be camel cased, and</p>

<code>json_name</code>

<p>will be used if set.</p>

<p>With</p>

<code>--ts_proto_opt=outputEncodeMethods=false</code>

<p>, the</p>

<code>Message.encode</code>

<p>and</p>

<code>Message.decode</code>

<p>methods for working with protobuf-encoded/binary data will not be output.</p>

<p>This is useful if you want "only types".</p>

<p>With</p>

<code>--ts_proto_opt=outputJsonMethods=false</code>

<p>, the</p>

<code>Message.fromJSON</code>

<p>and</p>

<code>Message.toJSON</code>

<p>methods for working with JSON-coded data will not be output.</p>

<p>This is also useful if you want "only types".</p>

<p>With</p>

<code>--ts_proto_opt=outputPartialMethods=false</code>

<p>, the</p>

<code>Message.fromPartial</code>

<p>and</p>

<code>Message.create</code>

<p>methods for accepting partially-formed objects/object literals will not be output.</p>

<p>With</p>

<code>--ts_proto_opt=stringEnums=true</code>

<p>, the generated enum types will be string-based instead of int-based.</p>

<p>This is useful if you want "only types" and are using a gRPC REST Gateway configured to serialize enums as strings.</p>

<p>(Requires</p>

<code>outputEncodeMethods=false</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=outputClientImpl=false</code>

<p>, the client implementations, i.e.</p>

<code>FooServiceClientImpl</code>

<p>, that implement the client-side (in Twirp, see next option for</p>

<code>grpc-web</code>

<p>) RPC interfaces will not be output.</p>

<p>With</p>

<code>--ts_proto_opt=outputClientImpl=grpc-web</code>

<p>, the client implementations, i.e.</p>

<code>FooServiceClientImpl</code>

<p>, will use the</p>

<p>library at runtime to send grpc messages to a grpc-web backend.</p>

<p>(Note that this only uses the grpc-web runtime, you don't need to use any of their generated code, i.e. the ts-proto output replaces their</p>

<code>ts-protoc-gen</code>

<p>output.)</p>

<p>You'll need to add the</p>

<code>@improbable-eng/grpc-web</code>

<p>and a transport to your project's</p>

<code>package.json</code>

<p>; see the</p>

<code>integration/grpc-web</code>

<p>directory for a working example. Also see</p>

<p>for integrating with</p>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=returnObservable=true</code>

<p>, the return type of service methods will be</p>

<code>Observable<T></code>

<p>instead of</p>

<code>Promise<T></code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=addGrpcMetadata=true</code>

<p>, the last argument of service methods will accept the grpc</p>

<code>Metadata</code>

<p>type, which contains additional information with the call (i.e. access tokens/etc.).</p>

<p>(Requires</p>

<code>nestJs=true</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=addNestjsRestParameter=true</code>

<p>, the last argument of service methods will be an rest parameter with type any. This way you can use custom decorators you could normally use in nestjs.</p>

<p>(Requires</p>

<code>nestJs=true</code>

<p>.)</p>

<p>With</p>

<code>--ts_proto_opt=nestJs=true</code>

<p>, the defaults will change to generate</p>

<p>friendly types & service interfaces that can be used in both the client-side and server-side of NestJS protobuf implementations. See the</p>

<p>for more information and implementation examples.</p>

<p>Specifically</p>

<code>outputEncodeMethods</code>

<p>,</p>

<code>outputJsonMethods</code>

<p>, and</p>

<code>outputClientImpl</code>

<p>will all be false,</p>

<code>lowerCaseServiceMethods</code>

<p>will be true and</p>

<code>outputServices</code>

<p>will be ignored.</p>

<p>Note that</p>

<code>addGrpcMetadata</code>

<p>,</p>

<code>addNestjsRestParameter</code>

<p>and</p>

<code>returnObservable</code>

<p>will still be false.</p>

<p>With</p>

<code>--ts_proto_opt=useDate=false</code>

<p>, fields of type</p>

<code>google.protobuf.Timestamp</code>

<p>will not be mapped to type</p>

<code>Date</code>

<p>in the generated types. See</p>

<p>for more details.</p>

<p>With</p>

<code>--ts_proto_opt=useMongoObjectId=true</code>

<p>, fields of a type called ObjectId where the message is constructed to have on field called value that is a string will be mapped to type</p>

<code>mongodb.ObjectId</code>

<p>in the generated types. This will require your project to install the mongodb npm package. See</p>

<p>for more details.</p>

<p>With</p>

<code>--ts_proto_opt=outputSchema=true</code>

<p>, meta typings will be generated that can later be used in other code generators.</p>

<p>With</p>

<code>--ts_proto_opt=outputTypeAnnotations=true</code>

<p>, each message will be given a</p>

<code>$type</code>

<p>field containing its fully-qualified name. You can use</p>

<code>--ts_proto_opt=outputTypeAnnotations=static-only</code>

<p>to omit it from the</p>

<code>interface</code>

<p>declaration.</p>

<p>With</p>

<code>--ts_proto_opt=outputTypeRegistry=true</code>

<p>, the type registry will be generated that can be used to resolve message types by fully-qualified name. Also, each message will be given a</p>

<code>$type</code>

<p>field containing its fully-qualified name.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=grpc-js</code>

<p>, ts-proto will output service definitions and server / client stubs in</p>

<p>format.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=generic-definitions</code>

<p>, ts-proto will output generic (framework-agnostic) service definitions. These definitions contain descriptors for each method with links to request and response types, which allows to generate server and client stubs at runtime, and also generate strong types for them at compile time. An example of a library that uses this approach is</p>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=nice-grpc</code>

<p>, ts-proto will output server and client stubs for</p>

<p>. This should be used together with generic definitions, i.e. you should specify two options:</p>

<code>outputServices=nice-grpc,outputServices=generic-definitions</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=metadataType=Foo@./some-file</code>

<p>, ts-proto add a generic (framework-agnostic) metadata field to the generic service definition.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=generic-definitions,outputServices=default</code>

<p>, ts-proto will output both generic definitions and interfaces. This is useful if you want to rely on the interfaces, but also have some reflection capabilities at runtime.</p>

<p>With</p>

<code>--ts_proto_opt=outputServices=false</code>

<p>, or</p>

<code>=none</code>

<p>, ts-proto will output NO service definitions.</p>

<p>With</p>

<code>--ts_proto_opt=useAbortSignal=true</code>

<p>, the generated services will accept an</p>

<code>AbortSignal</code>

<p>to cancel RPC calls.</p>

<p>With</p>

<code>--ts_proto_opt=useAsyncIterable=true</code>

<p>, the generated services will use</p>

<code>AsyncIterable</code>

<p>instead of</p>

<code>Observable</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=emitImportedFiles=false</code>

<p>, ts-proto will not emit</p>

<code>google/protobuf/*</code>

<p>files unless you explicit add files to</p>

<code>protoc</code>

<p>like this</p>

<code>protoc --plugin=./node_modules/.bin/protoc-gen-dcl_ts_proto my_message.proto google/protobuf/duration.proto</code>

<p>With</p>

<code>--ts_proto_opt=fileSuffix=<SUFFIX></code>

<p>, ts-proto will emit generated files using the specified suffix. A</p>

<code>helloworld.proto</code>

<p>file with</p>

<code>fileSuffix=.pb</code>

<p>would be generated as</p>

<code>helloworld.pb.ts</code>

<p>. This is common behavior in other protoc plugins and provides a way to quickly glob all the generated files.</p>

<p>With</p>

<code>--ts_proto_opt=importSuffix=<SUFFIX></code>

<p>, ts-proto will emit file imports using the specified suffix. An import of</p>

<code>helloworld.ts</code>

<p>with</p>

<code>fileSuffix=.js</code>

<p>would generate</p>

<code>import "helloworld.js"</code>

<p>. The default is to import without a file extension. Supported by TypeScript 4.7.x and up.</p>

<p>With</p>

<code>--ts_proto_opt=enumsAsLiterals=true</code>

<p>, the generated enum types will be enum-ish object with</p>

<code>as const</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=useExactTypes=false</code>

<p>, the generated</p>

<code>fromPartial</code>

<p>and</p>

<code>create</code>

<p>methods will not use Exact types.</p>

<p>The default behavior is</p>

<code>useExactTypes=true</code>

<p>, which makes</p>

<code>fromPartial</code>

<p>and</p>

<code>create</code>

<p>use Exact type for its argument to make TypeScript reject any unknown properties.</p>

<p>With</p>

<code>--ts_proto_opt=unknownFields=true</code>

<p>, all unknown fields will be parsed and output as arrays of buffers.</p>

<p>With</p>

<code>--ts_proto_opt=onlyTypes=true</code>

<p>, only types will be emitted, and imports for</p>

<code>long</code>

<p>and</p>

<code>protobufjs/minimal</code>

<p>will be excluded.</p>

<p>This is the same as setting</p>

<code>outputJsonMethods=false,outputEncodeMethods=false,outputClientImpl=false,nestJs=false</code>

<p>With</p>

<code>--ts_proto_opt=usePrototypeForDefaults=true</code>

<p>, the generated code will wrap new objects with</p>

<code>Object.create</code>

<p>.</p>

<p>This allows code to do hazzer checks to detect when default values have been applied, which due to proto3's behavior of not putting default values on the wire, is typically only useful for interacting with proto2 messages.</p>

<p>When enabled, default values are inherited from a prototype, and so code can use Object.keys().includes("someField") to detect if someField was actually decoded or not.</p>

<p>Note that, as indicated, this means Object.keys will not include set-by-default fields, so if you have code that iterates over messages keys in a generic fashion, it will have to also iterate over keys inherited from the prototype.</p>

<p>With</p>

<code>--ts_proto_opt=useJsonWireFormat=true</code>

<p>, the generated code will reflect the JSON representation of Protobuf messages.</p>

<p>Requires</p>

<code>onlyTypes=true</code>

<p>. Implies</p>

<code>useDate=string</code>

<p>and</p>

<code>stringEnums=true</code>

<p>. This option is to generate types that can be directly used with marshalling/unmarshalling Protobuf messages serialized as JSON.

You may also want to set</p>

<code>useOptionals=all</code>

<p>, as gRPC gateways are not required to send default value for scalar values.</p>

<p>With</p>

<code>--ts_proto_opt=useNumericEnumForJson=true</code>

<p>, the JSON converter (</p>

<code>toJSON</code>

<p>) will encode enum values as int, rather than a string literal.</p>

<p>With</p>

<code>--ts_proto_opt=initializeFieldsAsUndefined=false</code>

<p>, all optional field initializers will be omited from the generated base instances.</p>

<p>With</p>

<code>--ts_proto_opt=Mgoogle/protobuf/empty.proto=./google3/protobuf/empty</code>

<p>, ('M' means 'importMapping', similar to</p>

<p>), the generated code import path for</p>

<code>./google/protobuf/empty.ts</code>

<p>will reflect the overridden value:</p>

<code>Mfoo/bar.proto=@myorg/some-lib</code>

<li>will map</li>

<code>foo/bar.proto</code>

<li>imports into</li>

<code>import ... from '@myorg/some-lib'</code>

<li>.</li>

<code>Mfoo/bar.proto=./some/local/lib</code>

<li>will map</li>

<code>foo/bar.proto</code>

<li>imports into</li>

<code>import ... from './some/local/lib'</code>

<li>.</li>

<code>Mfoo/bar.proto=some-modules/some-lib</code>

<li>will map</li>

<code>foo/bar.proto</code>

<li>imports into</li>

<code>import ... from 'some-module/some-lib'</code>

<li>.</li>

<strong>Note</strong>

<li>: Uses are accummulated, so multiple values are expected in the form of</li>

<code>--ts_proto_opt=M... --ts_proto_opt=M...</code>

<li>(one</li>

<code>ts_proto_opt</code>

<li>per mapping).</li>

<strong>Note</strong>

<li>: Proto files that match mapped imports</li>

<strong>will not be generated</strong>

<li>.</li>

<p>With</p>

<code>--ts_proto_opt=useMapType=true</code>

<p>, the generated code for protobuf</p>

<code>map<key_type, value_type></code>

<p>will become</p>

<code>Map<key_type, value_type></code>

<p>that uses JavaScript Map type.</p>

<p>The default behavior is</p>

<code>useMapType=false</code>

<p>, which makes it generate the code for protobuf</p>

<code>map<key_type, value_type</code>

<p>with the key-value pair like</p>

<code>{[key: key_type]: value_type}</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=useReadonlyTypes=true</code>

<p>, the generated types will be declared as immutable using typescript's</p>

<code>readonly</code>

<p>modifer.</p>

<p>With</p>

<code>--ts_proto_opt=useSnakeTypeName=false</code>

<p>will remove snake casing from types.</p>

<p>Example Protobuf</p>

<pre>{</pre>

<pre>{</pre>

<pre>{</pre>

<pre>{</pre>

<pre>;</pre>

<pre>;</pre>

<pre>;

}

}

}

}</pre>

<p>by default this is enabled which would generate a type of</p>

<code>Box_Element_Image_Alignment</code>

<p>. By disabling this option the type that is generated would be</p>

<code>BoxElementImageAlignment</code>

<p>.</p>

<p>With</p>

<code>--ts_proto_opt=outputExtensions=true</code>

<p>, the generated code will include proto2 extensions</p>

<p>Extension encode/decode methods are compliant with the</p>

<code>outputEncodeMethods</code>

<p>option, and if</p>

<code>unknownFields=true</code>

<p>,

the</p>

<code>setExtension</code>

<p>and</p>

<code>getExtension</code>

<p>methods will be created for extendable messages, also compliant with</p>

<code>outputEncodeMethods</code>

<p>(setExtension = encode, getExtension = decode).</p>

<p>With</p>

<code>--ts_proto_opt=outputIndex=true</code>

<p>, index files will be generated based on the proto package namespaces.</p>

<p>This will disable</p>

<code>exportCommonSymbols</code>

<p>to avoid name collisions on the common symbols.</p>

<h3>NestJS Support</h3>

<p>We have a great way of working together with</p>

<p>.</p>

<code>ts-proto</code>

<p>generates</p>

<code>interfaces</code>

<p>and</p>

<code>decorators</code>

<p>for you controller, client. For more information see the</p>

<p>.</p>

<h3>Watch Mode</h3>

<p>If you want to run</p>

<code>ts-proto</code>

<p>on every change of a proto file, you'll need to use a tool like</p>

<p>and use it as a script in</p>

<code>package.json</code>

<p>:</p>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<h3>Basic gRPC implementation</h3>

<code>ts-proto</code>

<p>is RPC framework agnostic - how you transmit your data to and from

your data source is up to you. The generated client implementations all expect

a</p>

<code>rpc</code>

<p>parameter, which type is defined like this:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>If you're working with gRPC, a simple implementation could look like this:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h1>Sponsors</h1>

<p>Kudos to our sponsors:</p>

<li>funded ts-proto's initial grpc-web support.</li>

<p>If you need ts-proto customizations or priority support for your company, you can ping me at</p>

<p>.</p>

<h1>Development</h1>

<p>This section describes how to contribute directly to ts-proto, i.e. it's not required for running</p>

<code>ts-proto</code>

<p>in</p>

<code>protoc</code>

<p>or using the generated TypeScript.</p>

<strong>Requirements</strong>

<li>or</li>

<li>v3.19.1</li>

<code>yarn</code>

<li>â</li>

<code>npm install -g yarn</code>

<strong>Setup</strong>

<p>The commands below assume you have</p>

<strong>Docker</strong>

<p>installed. To use a</p>

<strong>local</strong>

<p>copy of</p>

<code>protoc</code>

<p>without docker, use commands suffixed with</p>

<code>:local</code>

<p>. If you are using OS X, install</p>

<strong>coreutils</strong>

<p>,</p>

<code>brew install coreutils</code>

<p>.</p>

<li>Check out the</li>

<li>for the latest code.</li>

<li>Run</li>

<code>yarn install</code>

<li>to install the dependencies.</li>

<li>Run</li>

<code>yarn build:test</code>

<li>to generate the test files.</li>

<em>This runs the following commands:</em>

<code>proto2bin</code>

<li>â Converts integration test</li>

<code>.proto</code>

<li>files to</li>

<code>.bin</code>

<li>.</li>

<code>bin2ts</code>

<li>â Runs</li>

<code>ts-proto</code>

<li>on the</li>

<code>.bin</code>

<li>files to generate</li>

<code>.ts</code>

<li>files.</li>

<code>proto2pbjs</code>

<li>â Generates a reference implementation using</li>

<code>pbjs</code>

<li>for testing compatibility.</li>

<li>Run</li>

<code>yarn test</code>

<strong>Workflow</strong>

<li>Add/update an integration test for your use case</li>

<li>Either find an existing</li>

<code>integration/*</code>

<li>test that is close enough to your use case, e.g. has a</li>

<code>parameters.txt</code>

<li>that matches the</li>

<code>ts_proto_opt</code>

<li>params necessary to reproduce your use case</li>

<li>If creating a new integration test:</li>

<li>Make a new</li>

<code>integration/your-new-test/parameters.txt</code>

<li>with the necessary</li>

<code>ts_proto_opt</code>

<li>params</li>

<li>Create a minimal</li>

<code>integration/your-new-test/your-new-test.proto</code>

<li>schema to reproduce your use case</li>

<li>After any changes to</li>

<code>your-new-test.proto</code>

<li>, or an existing</li>

<code>integration/*.proto</code>

<li>file, run</li>

<code>yarn proto2bin</code>

<li>You can also leave</li>

<code>yarn watch</code>

<li>running, and it should "just do the right thing"</li>

<li>Add/update a</li>

<code>integration/your-new-test/some-test.ts</code>

<li>unit test, even if it's as trivial as just making sure the generated code compiles</li>

<li>Modify the</li>

<code>ts-proto</code>

<li>code generation logic:</li>

<li>Most important logic is found in</li>

<li>.</li>

<li>After any changes to</li>

<code>src/*.ts</code>

<li>files, run</li>

<code>yarn bin2ts</code>

<li>to re-codegen all integration tests</li>

<li>Or</li>

<code>yarn bin2ts your-new-test</code>

<li>to re-codegen a specific test</li>

<li>Again leaving</li>

<code>yarn watch</code>

<li>running should "just do the right thing"</li>

<li>Run</li>

<code>yarn test</code>

<li>to verify your changes pass all existing tests</li>

<li>Commit and submit a PR</li>

<li>Run</li>

<code>yarn format</code>

<li>to format the typescript files.</li>

<li>Make sure to</li>

<code>git add</code>

<li>all of the</li>

<code>*.proto</code>

<li>,</li>

<code>*.bin</code>

<li>, and</li>

<code>*.ts</code>

<li>files in</li>

<code>integration/your-new-test</code>

<li>Sometimes checking in generated code is frowned upon, but given ts-proto's main job is to generate code, seeing the codegen diffs in PRs is helpful</li>

<strong>Dockerized Protoc</strong>

<p>The repository includes a dockerized version of</p>

<code>protoc</code>

<p>, which is configured in</p>

<p>.</p>

<p>It can be useful in case you want to manually invoke the plugin with a known version of</p>

<code>protoc</code>

<p>.</p>

<p>Usage:</p>

<pre>aliases.sh</pre>

<pre>protoc --plugin=/ts-proto/protoc-gen-dcl_ts_proto --ts_proto_out=./output -I=./protos ./protoc/</pre>

<pre>.proto</pre>

<pre>ts-protoc --ts_proto_out=./output -I=./protos ./protoc/</pre>

<pre>.proto</pre>

<li>All paths must be relative paths</li>

<em>within</em>

<li>the current working directory of the host.</li>

<code>../</code>

<li>is not allowed</li>

<li>Within the docker container, the absolute path to the project root is</li>

<code>/ts-proto</code>

<li>The container mounts the current working directory in</li>

<code>/host</code>

<li>, and sets it as its working directory.</li>

<li>Once</li>

<code>aliases.sh</code>

<li>is sourced, you can use the</li>

<code>protoc</code>

<li>command in any folder.</li>

<h1>Assumptions</h1>

<li>TS/ES6 module name is the proto package</li>

<h1>Todo</h1>

<li>Support the string-based encoding of duration in</li>

<code>fromJSON</code>

<li>/</li>

<code>toJSON</code>

<li>Make</li>

<code>oneof=unions</code>

<li>the default behavior in 2.0</li>

<li>Probably change</li>

<code>forceLong</code>

<li>default in 2.0, should default to</li>

<code>forceLong=long</code>

<li>Make</li>

<code>esModuleInterop=true</code>

<li>the default in 2.0</li>

<h1>OneOf Handling</h1>

<p>By default, ts-proto models</p>

<code>oneof</code>

<p>fields "flatly" in the message, e.g. a message like:</p>

<pre>{</pre>

<pre>{</pre>

<pre>;</pre>

<pre>; }

}</pre>

<p>Will generate a</p>

<code>Foo</code>

<p>type with two fields:</p>

<code>field_a: string | undefined;</code>

<p>and</p>

<code>field_b: string | undefined</code>

<p>.</p>

<p>With this output, you'll have to check both</p>

<code>if object.field_a</code>

<p>and</p>

<code>if object.field_b</code>

<p>, and if you set one, you'll have to remember to unset the other.</p>

<p>Instead, we recommend using the</p>

<code>oneof=unions</code>

<p>option, which will change the output to be an Abstract Data Type/ADT like:</p>

<pre>?:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>As this will automatically enforce only one of</p>

<code>field_a</code>

<p>or</p>

<code>field_b</code>

<p>"being set" at a time, because the values are stored in the</p>

<code>eitherField</code>

<p>field that can only have a single value at a time.</p>

<p>(Note that</p>

<code>eitherField</code>

<p>is optional b/c</p>

<code>oneof</code>

<p>in Protobuf means "at most one field" is set, and does not mean one of the fields</p>

<em>must</em>

<p>be set.)</p>

<p>In ts-proto's currently-unscheduled 2.x release,</p>

<code>oneof=unions</code>

<p>will become the default behavior.</p>

<h1>Default values and unset fields</h1>

<p>In core Protobuf (and so also</p>

<code>ts-proto</code>

<p>), values that are</p>

<em>unset</em>

<p>or equal to the default value are not sent over the wire.</p>

<p>For example, the default value of a message is</p>

<code>undefined</code>

<p>. Primitive types take their natural default value, e.g.</p>

<code>string</code>

<p>is</p>

<code>''</code>

<p>,</p>

<code>number</code>

<p>is</p>

<code>0</code>

<p>, etc.</p>

<p>Protobuf chose/enforces this behavior because it enables forward compatibility, as primitive fields will always have a value, even when omitted by outdated agents.</p>

<p>This is good, but it also means</p>

<em>default</em>

<p>and</p>

<em>unset</em>

<p>values cannot be distinguished in</p>

<code>ts-proto</code>

<p>fields; it's just fundamentally how Protobuf works.</p>

<p>If you need primitive fields where you can detect set/unset, see</p>

<p>.</p>

<strong>Encode / Decode</strong>

<code>ts-proto</code>

<p>follows the Protobuf rules, and always returns default values for unsets fields when decoding, while omitting them from the output when serialized in binary format.</p>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>:</pre>

<strong>fromJSON / toJSON</strong>

<p>Reading JSON will also initialize the default values. Since senders may either omit unset fields, or set them to the default value, use</p>

<code>fromJSON</code>

<p>to normalize the input.</p>

<pre>:</pre>

<pre>:</pre>

<p>When writing JSON,</p>

<code>ts-proto</code>

<p>currently does</p>

<strong>not</strong>

<p>normalize message when converting to JSON, other than omitting unset fields, but it may do so in the future.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<li>Please open an issue if you need this behavior.</li>

<h1>Well-Known Types</h1>

<p>Protobuf comes with several predefined message definitions, called "</p>

<p>".

Their interpretation is defined by the Protobuf specification, and libraries are expected to convert these messages to corresponding native types in the target language.</p>

<code>ts-proto</code>

<p>currently automatically converts these messages to their corresponding native types.</p>

<li>â</li>

<code>boolean</code>

<li>â</li>

<code>Uint8Array</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>string[]</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>any[]</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>number</code>

<li>â</li>

<code>string</code>

<li>â</li>

<code>any</code>

<li>(i.e.</li>

<code>number | string | boolean | null | array | object</code>

<li>)</li>

<li>â</li>

<code>{ [key: string]: any }</code>

<h2>Wrapper Types</h2>

<p>Wrapper Types are messages containing a single primitive field, and can be imported in</p>

<code>.proto</code>

<p>files with</p>

<code>import "google/protobuf/wrappers.proto"</code>

<p>.</p>

<p>Since these are</p>

<em>messages</em>

<p>, their default value is</p>

<code>undefined</code>

<p>, allowing you to distinguish unset primitives from their default values, when using Wrapper Types.</p>

<code>ts-proto</code>

<p>generates these fields as</p>

<code><primitive> | undefined</code>

<p>.</p>

<p>For example:</p>

<pre>;</pre>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>:</pre>

<p>When encoding a message the primitive value is converted back to its corresponding wrapper type:</p>

<pre>:</pre>

<p>When calling toJSON, the value is not converted, because wrapper types are idiomatic in JSON.</p>

<pre>:</pre>

<h2>JSON Types (Struct Types)</h2>

<p>Protobuf's language and types are not sufficient to represent all possible JSON values, since JSON may contain values whose type is unknown in advance.

For this reason, Protobuf offers several additional types to represent arbitrary JSON values.</p>

<p>These are called Struct Types, and can be imported in</p>

<code>.proto</code>

<p>files with</p>

<code>import "google/protobuf/struct.proto"</code>

<p>.</p>

<li>â</li>

<code>any</code>

<li>This is the most general type, and can represent any JSON value (i.e.</li>

<code>number | string | boolean | null | array | object</code>

<li>).</li>

<li>â</li>

<code>any[]</code>

<li>To represent a JSON array</li>

<li>â</li>

<code>{ [key: string]: any }</code>

<li>To represent a JSON object</li>

<code>ts-proto</code>

<p>automatically converts back and forth between these Struct Types and their corresponding JSON types.</p>

<p>Example:</p>

<pre>;</pre>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>:</pre>

<p>Encoding a JSON value embedded in a message, converts it to a Struct Type:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Timestamp</h2>

<p>The representation of</p>

<code>google.protobuf.Timestamp</code>

<p>is configurable by the</p>

<code>useDate</code>

<p>flag.</p>

<th>Protobuf well-known type</th>

<th>Default/</th>

<code>useDate=true</code>

<code>useDate=false</code>

<code>useDate=string</code>

<code>google.protobuf.Timestamp</code>

<code>Date</code>

<code>{ seconds: number, nanos: number }</code>

<code>string</code>

<h1>Number Types</h1>

<p>Numbers are by default assumed to be plain JavaScript</p>

<code>number</code>

<p>s.</p>

<p>This is fine for Protobuf types like</p>

<code>int32</code>

<p>and</p>

<code>float</code>

<p>, but 64-bit types like</p>

<code>int64</code>

<p>can't be 100% represented by JavaScript's</p>

<code>number</code>

<p>type, because</p>

<code>int64</code>

<p>can have larger/smaller values than</p>

<code>number</code>

<p>.</p>

<p>ts-proto's default configuration (which is</p>

<code>forceLong=number</code>

<p>) is to still use</p>

<code>number</code>

<p>for 64-bit fields, and then throw an error if a value (at runtime) is larger than</p>

<code>Number.MAX_SAFE_INTEGER</code>

<p>.</p>

<p>If you expect to use 64-bit / higher-than-</p>

<code>MAX_SAFE_INTEGER</code>

<p>values, then you can use the ts-proto</p>

<code>forceLong</code>

<p>option, which uses the</p>

<p>npm package to support the entire range of 64-bit values.</p>

<p>The protobuf number types map to JavaScript types based on the</p>

<code>forceLong</code>

<p>config option:</p>

<th>Protobuf number types</th>

<th>Default/</th>

<code>forceLong=number</code>

<code>forceLong=long</code>

<code>forceLong=string</code>

<td>double</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>float</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>int32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>int64</td>

<td>number*</td>

<td>Long</td>

<td>string</td>

<td>uint32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>uint64</td>

<td>number*</td>

<td>Unsigned Long</td>

<td>string</td>

<td>sint32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>sint64</td>

<td>number*</td>

<td>Long</td>

<td>string</td>

<td>fixed32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>fixed64</td>

<td>number*</td>

<td>Unsigned Long</td>

<td>string</td>

<td>sfixed32</td>

<td>number</td>

<td>number</td>

<td>number</td>

<td>sfixed64</td>

<td>number*</td>

<td>Long</td>

<td>string</td>

<p>Where (*) indicates they might throw an error at runtime.</p>

<h1>Current Status of Optional Values</h1>

<li>Required primitives: use as-is, i.e.</li>

<code>string name = 1</code>

<li>.</li>

<li>Optional primitives: use wrapper types, i.e.</li>

<code>StringValue name = 1</code>

<li>.</li>

<li>Required messages: not available</li>

<li>Optional messages: use as-is, i.e.</li>

<code>SubMessage message = 1</code>

<li>.</li>

<h2>About</h2>

<p>An idiomatic protobuf generator for TypeScript</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>298</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/substreams-sink-postgres

# URL: https://github.com/decentraland/substreams-sink-postgres

<title>GitHub - decentraland/substreams-sink-postgres</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-sink-postgres</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>117</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Substreams Sink PostgreSQL</h1>

<p>This is a command line tool to quickly sync a Substreams with a PostgreSQL database.</p>

<h3>Quickstart</h3>

<p>Install</p>

<code>substreams-sink-postgres</code>

<p>by using the pre-built binary release</p>

<p>. Extract</p>

<code>substreams-sink-postgres</code>

<p>binary into a folder and ensure this folder is referenced globally via your</p>

<code>PATH</code>

<p>environment variable.</p>

<strong>Note</strong>

<p>Or install from source directly</p>

<code>go install github.com/streamingfast/substreams-sink-postgres/cmd/substreams-sink-postgres@latest</code>

<p>.</p>

<p>Start Docker Compose:</p>

<pre>docker compose up</pre>

<strong>Note</strong>

<p>Feel free to skip this step if you already have a running Postgres instance accessible, don't forget to update the connection string in the command below.</p>

<p>Run the setup command:</p>

<pre>substreams-sink-postgres setup</pre>

<pre>docs/tutorial/schema.sql</pre>

<p>This will connect to the given database pointed by</p>

<code>psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable</code>

<p>, create the tables and indexes specified in the given</p>

<code><schema_file></code>

<p>, and will create the required tables to run the sink (e.g. the</p>

<code>cursors</code>

<p>table).</p>

<strong>Note</strong>

<p>For the sake of idempotency, we recommend that the schema file only contain</p>

<code>create table if not exists</code>

<p>statements.</p>

<p>Run the sink</p>

<p>Compile the</p>

<p>tutorial project first:</p>

<pre>docs/tutorial

cargo build --target wasm32-unknown-unknown --release</pre>

<pre>../..</pre>

<p>Once the compilation has completed, let launch the</p>

<code>sink</code>

<p>process.</p>

<strong>Note</strong>

<p>To connect to Substreams you will need an authentication token, follow this</p>

<p>to obtain one.</p>

<pre>substreams-sink-postgres run \</pre>

<pre>\</pre>

<pre>\</pre>

<pre>\

db_out</pre>

<h3>Output Module</h3>

<p>To be accepted by</p>

<code>substreams-sink-postgres</code>

<p>, your module output's type must be a</p>

<p>message. The Rust crate</p>

<p>contains bindings and helpers to implement it easily. Some project implementing</p>

<code>db_out</code>

<p>module for reference:</p>

<li>(some helpers found in</li>

<li>)</li>

<p>By convention, we name the</p>

<code>map</code>

<p>module that emits</p>

<p>output</p>

<code>db_out</code>

<p>.</p>

<p>Note that using prior versions (0.2.0, 0.1.*) of</p>

<code>substreams-database-change</code>

<p>, you have to use</p>

<code>substreams.database.v1.DatabaseChanges</code>

<p>in your</p>

<code>substreams.yaml</code>

<p>and put the respected version of the</p>

<code>spkg</code>

<p>in your</p>

<code>substreams.yaml</code>

<h3>PostgreSQL DSN</h3>

<p>The connection string is provided using a simple string format respecting the URL specification. The DSN format is:</p>

<code>psql://<user>:<password>@<host>/<dbname>[?<options>]</code>

<p>Where</p>

<code><options></code>

<p>is URL query parameters in</p>

<code><key>=<value></code>

<p>format, multiple options are separated by</p>

<code>&</code>

<p>signs. Supported options can be seen</p>

<p>. The options</p>

<code><user></code>

<p>,</p>

<code><password></code>

<p>,</p>

<code><host></code>

<p>and</p>

<code><dbname></code>

<p>should</p>

<strong>not</strong>

<p>be passed in</p>

<code><options></code>

<p>as they are automatically extracted from the DSN URL.</p>

<p>Moreover, the</p>

<code>schema</code>

<p>option key can be used to select a particular schema within the</p>

<code><dbname></code>

<p>database.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/platform-test-helpers

# URL: https://github.com/decentraland/platform-test-helpers

<title>GitHub - decentraland/platform-test-helpers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/platform-test-helpers</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>35</strong>

<h2>Files</h2>

<button>View code</button>

<h1>platform-test-helpers</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/glTFast

# URL: https://github.com/decentraland/glTFast

<title>GitHub - decentraland/glTFast: Efficient glTF 3D import / export package for Unity</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Efficient glTF 3D import / export package for Unity</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/glTFast</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,475</strong>

<h2>Files</h2>

<button>View code</button>

<h1>glTFast for Unity</h1>

<em>glTFast</em>

<p>enables use of</p>

<p>asset files in</p>

<p>.</p>

<p>It focuses on speed, memory efficiency and a small build footprint while also providing:</p>

<li>100%</li>

<li>compliance</li>

<li>Ease of use</li>

<li>Robustness and Stability</li>

<li>Customization and extensibility for advanced users</li>

<p>Check out the</p>

<p>and try the</p>

<p>.</p>

<h2>Features</h2>

<em>glTFast</em>

<p>supports the full</p>

<p>and many extensions. It works with Universal, High Definition and the Built-In Render Pipelines on all platforms.</p>

<p>See the</p>

<p>.</p>

<h3>Workflows</h3>

<p>There are four use-cases for glTF within Unity</p>

<li>Import</li>

<li>in games/applications</li>

<li>(i.e. import assets at design-time)</li>

<li>Export</li>

<li>(save and share dynamic, user-generated 3D content)</li>

<li>(Unity as glTF authoring tool)</li>

<p>Read more about the workflows in the</p>

<p>.</p>

<h2>Installing</h2>

<p>The easiest way to install is to download and open the</p>

<p>It runs a script that installs</p>

<em>glTFast</em>

<p>via a</p>

<p>.</p>

<p>Afterwards</p>

<em>glTFast</em>

<p>and further, optional packages are listed in the</p>

<em>Package Manager</em>

<p>(under</p>

<em>My Registries</em>

<p>) and can be installed and updated from there.</p>

<h3>Optional Packages</h3>

<p>There are some related package that improve</p>

<em>glTFast</em>

<p>by extending its feature set.</p>

<li>(provides support for</li>

<li>)</li>

<li>(provides support for</li>

<li>)</li>

<em>meshoptimizer decompression for Unity</em>

<li>(provides support for</li>

<li>)</li>

<em>glTFast</em>

<p>5.x requires Unity 2019.3 or newer. For older Unity versions see</p>

<p>.</p>

<h2>Usage</h2>

<p>You can load a glTF asset from an URL or a file path.</p>

<h3>Runtime Loading via Component</h3>

<p>Add a</p>

<code>GltfAsset</code>

<p>component to a GameObject.</p>

<h3>Runtime Loading via Script</h3>

<pre>gameObject</pre>

<pre>GLTFast</pre>

<pre>GltfAsset</pre>

<pre>gltf</pre>

<pre>url</pre>

<p>See</p>

<p>in the documentation for more details and instructions how to</p>

<p>via script.</p>

<h3>Editor Import</h3>

<p>Move or copy</p>

<em>glTF</em>

<p>files into your project's</p>

<em>Assets</em>

<p>folder, similar to other 3D formats:</p>

<em>glTFast</em>

<p>will import them to native Unity prefabs and add them to the asset database.</p>

<p>See</p>

<p>in the documentation for details.</p>

<h3>Editor Export</h3>

<p>The main menu has a couple of</p>

<p>under</p>

<code>File > Export</code>

<p>and glTFs can also be

created</p>

<p>.</p>

<h2>Project Setup</h2>

<h3>Materials and Shader Variants</h3>

<p>â IMPORTANT â</p>

<em>glTFast</em>

<p>uses custom shader graphs that you</p>

<strong>have</strong>

<p>to include in builds in order to make materials work. If materials are fine in the Unity Editor but not in builds, chances are some shaders (or variants) are missing.</p>

<p>Read the section</p>

<em>Materials and Shader Variants</em>

<p>in the</p>

<p>for details.</p>

<h2>Get involved</h2>

<p>Contributions in the form of ideas, comments, critique, bug reports, pull requests are highly appreciated. Feel free to get in contact if you consider using or improving</p>

<em>glTFast</em>

<p>.</p>

<h2>Supporters</h2>

<p>Thanks to</p>

<p>for sponsoring the development of skin support! â¤ï¸</p>

<h2>License</h2>

<p>Copyright (c) 2020-2022 Andreas Atteneder, All Rights Reserved.</p>

<p>Licensed under the Apache License, Version 2.0 (the "License");

you may not use files in this repository except in compliance with the License.

You may obtain a copy of the License at</p>

<p>Unless required by applicable law or agreed to in writing, software

distributed under the License is distributed on an "AS IS" BASIS,

WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

See the License for the specific language governing permissions and

limitations under the License.</p>

<h2>Trademarks</h2>

<em>Unity</em>

<p>is a registered trademark of</p>

<p>.</p>

<em>KhronosÂ®</em>

<p>is a registered trademark and</p>

<em>glTFâ¢</em>

<p>is a trademark of</p>

<p>.</p>

<h2>About</h2>

<p>Efficient glTF 3D import / export package for Unity</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>221</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-coingecko

# URL: https://github.com/decentraland/tap-coingecko

<title>GitHub - decentraland/tap-coingecko: About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-coingecko</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-coingecko</h1>

<code>tap-coingecko</code>

<p>is a Singer tap for coingecko.</p>

<p>Built with the</p>

<p>for Singer Taps.</p>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-coingecko --about</pre>

<h3>Configure using environment variables</h3>

<p>This Singer tap will automatically import any environment variables within the working directory's</p>

<code>.env</code>

<p>if the</p>

<code>--config=ENV</code>

<p>is provided, such that config values will be considered if a matching

environment variable is set either in the terminal context or in the</p>

<code>.env</code>

<p>file.</p>

<h3>Source Authentication and Authorization</h3>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-coingecko</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-coingecko --version

tap-coingecko --help

tap-coingecko --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<p>Follow these instructions to contribute to this project.</p>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_coingecko/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-coingecko</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-coingecko --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-coingecko

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-coingecko --version</pre>

<pre>meltano elt tap-coingecko target-jsonl</pre>

<h3>SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>About Singer compatible Tap to get multiple token price data from Coingecko. Designed to use with Meltano.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-decentraland-crashbot

# URL: https://github.com/decentraland/tap-decentraland-crashbot

<title>GitHub - decentraland/tap-decentraland-crashbot: Import crashbot data</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Import crashbot data</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-decentraland-crashbot</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-decentraland-crashbot</h1>

<code>tap-decentraland-crashbot</code>

<p>is a Singer tap for DCLCrashbot.</p>

<p>Built with the</p>

<p>for Singer Taps.</p>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-decentraland-crashbot --about</pre>

<h3>Configure using environment variables</h3>

<p>This Singer tap will automatically import any environment variables within the working directory's</p>

<code>.env</code>

<p>if the</p>

<code>--config=ENV</code>

<p>is provided, such that config values will be considered if a matching

environment variable is set either in the terminal context or in the</p>

<code>.env</code>

<p>file.</p>

<h3>Source Authentication and Authorization</h3>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-decentraland-crashbot</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-decentraland-crashbot --version

tap-decentraland-crashbot --help

tap-decentraland-crashbot --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<p>Follow these instructions to contribute to this project.</p>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_decentraland_crashbot/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-decentraland-crashbot</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-decentraland-crashbot --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-decentraland-crashbot

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-decentraland-crashbot --version</pre>

<pre>meltano elt tap-decentraland-crashbot target-jsonl</pre>

<h3>SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>Import crashbot data</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/tap-decentraland-crashbot

# Change to URL: https://github.com/decentraland/comms-station

# URL: https://github.com/decentraland/comms-station

<title>GitHub - decentraland/comms-station</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/comms-station</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>63</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Welcome</h1>

<p>The Decentraland comms demo station is an educational project, intended for developers to learn about the inner workings of the protocol.</p>

<p>Using the station, you'll be able to manually operate a simple but reasonably featured comms client. The UI is designed to clearly match the source code, so you can read along while you experiment with it.</p>

<h3>Getting Started</h3>

<p>Use the</p>

<p>, or run it locally with:</p>

<code>npm install

npm run dev</code>

<p>This will start a</p>

<code>localhost</code>

<p>dev server.</p>

<p>If you want to follow along with the source code, see</p>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://decentraland.github.io/comms-station/

# URL: https://decentraland.github.io/comms-station/

<title>DCL Comms Station</title>

<h1>Decentraland |</h1>

<small>Comms Demo Station</small>

<h1>Welcome!</h1>

<p>This is an educational Decentraland communications client, meant for developers to

understand the inner workings of the system.

It can discover</p>

<strong>realms</strong>

<p>, connect to their</p>

<strong>RPC</strong>

<p>interface,

use</p>

<strong>Archipelago</strong>

<p>to get an</p>

<strong>island</strong>

<p>assignment and join

the island to</p>

<strong>chat</strong>

<p>with nearby players and inspect their</p>

<strong>profiles</strong>

<p>.</p>

<p>If you're familiar with these concepts, go ahead and start the station. If not, the</p>

<p>is a better place to begin.</p>

<p>You can also follow along with the station's</p>

<p>, which closely mirrors what

you'll see on-screen.</p>

<button>Start</button>

<h2>Create an Identity</h2>

<p>Players in Decentraland have a unique</p>

<strong>identity</strong>

<p>, given by an Ethereum address. The

associated private key can be used to prove this identity when services require it.

Let's generate a random, disposable identity for this session.</p>

<button>Create disposable identity</button>

<h2>Discover Realms</h2>

<p>Decentraland is organized into</p>

<strong>realms</strong>

<p>, i.e. peer servers in the distributed network. Some

realms are maintained by the Decentraland Foundation, others are community contributions.</p>

<p>These servers know about each other. We can connect to the Foundation's main realm and

get a list of all alternatives using the</p>

<p>endpoint.</p>

<button>Discover Realms</button>

<h2>Select a Realm</h2>

<p>We've found a number of realms, each hosted in a different server. Let's connect to one

with a healthy number of currently online players.</p>

<th>Name</th>

<th>URL</th>

<th>Players</th>

<button>Connect</button>

<p>We were disconnected from Archipelago. This can be caused by I/O errors, but the most

frequent cause are timeouts before authentication or between expected messages.

You can refresh this page to reboot the station.</p>

<h2>Start Authentication</h2>

<p>Before we can access any services, we must prove our identity by completing a</p>

<p>.

The server will send us a randomly generated string, and we will sign it with our private

key.</p>

<button>Request Challenge</button>

<h2>Complete Authentication</h2>

<p>We were sent the random string</p>

<p>. We'll use our

private key to produce a valid</p>

<p>,

ending with a signature for this string.</p>

<p>The realm server will validate the chain in our response and verify all signatures before

allowing us to continue.</p>

<button>Respond Challenge</button>

<h2>Report Position</h2>

<p>We are now connected to a realm and have successfully authenticated. The next step is

getting our first</p>

<p>from</p>

<p>.

For this, we have to send (and keep sending) our position in the world map.</p>

<p>We must continue to report our position about once per second, otherwise Archipelago will

assume we're going offline. This periodic update is called a</p>

<p>.</p>

<button>Start heartbeat</button>

<p>We're now sending our periodic position updates and waiting for</p>

<p>to assign us to an island. Let's wait...</p>

<h2>Join Island</h2>

<p>We've been assigned to island</p>

<p>, which uses the</p>

<p>transport. Our island is accepting websocket connections at</p>

<p>.</p>

<button>Connect</button>

<p>We are now connected to island</p>

<p>using the</p>

<p>transport.

There's</p>

<p>other clients in this island. Talk to them!</p>

<em>You joined the island.</em>

<label>Message</label>

<button>Send</button>

<label>x</label>

<label>y</label>

<label>island?</label>

<button>Teleport</button>

<h2>Request Profile</h2>

<p>You can ask for a peer's profile (in this case,</p>

<p>) by sending

a</p>

<code>ProfileRequest</code>

<p>. Recently active clients usually send back a</p>

<code>ProfileResponse</code>

<p>right away.</p>

<p>Inactive clients may not respond, and some clients (such as this one) choose to ignore these

requests.</p>

<button>Request Profile</button>

# Change to URL: https://github.com/decentraland/checker-contract

# URL: https://github.com/decentraland/checker-contract

<title>GitHub - decentraland/checker-contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/checker-contract</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Checker Contract</h1>

<p>Can be used to replace content validation using the blockchain directly instead of relying on subgraphs.</p>

<h2>Development</h2>

<p>Install dependencies with:</p>

<code>npm ci</code>

<h2>ABI</h2>

<p>There is an</p>

<code>abi.json</code>

<p>file inside the scripts folder.</p>

<p>It can be generated by running:</p>

<code>$ npx hardhat run ./scripts/abi.ts</code>

<p>This is just a helper to have the Checker ABI more accessible, It can also be found when compiling the contract on:</p>

<code>./artifacts/contracts/Checker.sol/Checker.json (The Json has an abi property)</code>

<h2>Bytecode</h2>

<p>There is a</p>

<code>bytecode.json</code>

<p>file inside the scripts folder, it has to be regenerated every time the contract changes in order to be able to run:</p>

<code>./scripts/checkLAND/checkLAND.ts</code>

<code>./scripts/checkName/checkName.ts</code>

<code>./scripts/validateThirdParty/validateThirdParty.ts</code>

<code>./scripts/validateWearables/validateWearables.ts</code>

<p>To regenerate it, simply run:</p>

<code>$ npx hardhat run ./scripts/bytecode.ts</code>

<h2>Scripts</h2>

<p>Inside the</p>

<code>./scripts</code>

<p>directory, there are four different subdirectories containing scripts to execute calls to the</p>

<code>Checker</code>

<p>contract functions with various parameters to check the results.</p>

<p>If you dive into the different function directories, you'll find a main script called the same as the directory containing it.</p>

<p>You can run those by executing, in the case of</p>

<code>checkLAND</code>

<p>:</p>

<code>$ npx hardhat run ./scripts/checkLAND/checkLAND.ts --network mainnet</code>

<p>This will run all tests inside the file in the same directory that has a</p>

<code>.test.ts</code>

<p>suffix.</p>

<p>The</p>

<code>--network</code>

<p>flag determines the suite of tests for a given network that have to be run.</p>

<p>A file with</p>

<code>.calls.ts</code>

<p>suffix might be found as well, these serve as a way to check individually the different calls the Checker makes to the provided contracts. For example,</p>

<code>checkLAND</code>

<p>function will make various calls to the LAND and Estate contracts to check the permissions of the provided</p>

<code>sender</code>

<p>.</p>

<p>This file is called with:</p>

<code>$ npx hardhat run ./scripts/checkLAND/checkLAND.calls.ts --network mainnet</code>

<p>A file that ends with</p>

<code>.multi.ts</code>

<p>will call the contract's</p>

<code>multicall</code>

<p>function used to do multiple calls to functions inside the Checker. That function is just a utility to avoid making unnecessary rpc calls when only 1 might suffice.</p>

<code>$ npx hardhat run ./scripts/checkLAND/checkLAND.multi.ts --network mainnet</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ownership-server-owner

# URL: https://github.com/decentraland/ownership-server-owner

<title>GitHub - decentraland/ownership-server-owner</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ownership-server-owner</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ownership-server-owner</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/avatars-contract

# URL: https://github.com/decentraland/avatars-contract

<title>GitHub - decentraland/avatars-contract: Avatars smart contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Avatars smart contract</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/avatars-contract</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>87</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland subdomains Contract</h1>

<h2>Contracts related</h2>

<h3>Mainnet</h3>

<h2>Update 04/04/2023</h2>

<li>DCLControllerV2 =</li>

<code>0xbe92b49aee993adea3a002adcda189a2b7dec56c</code>

<h2>Update 07/10/2020</h2>

<li>ENS Public Resolver =</li>

<code>0x4976fb03c32e5b8cfe2b6ccb31c09ba78ebaba41</code>

<li>ENS Registry =</li>

<code>0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e</code>

<li>ENS Public Resolver =</li>

<code>0xDaaF96c344f63131acadD0Ea35170E7892d3dfBA</code>

<li>ENS Base Registrar =</li>

<code>0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85</code>

<li>ENS Registrar Controller =</li>

<code>undefined yet after migration has finished</code>

<h3>Old</h3>

<li>ENS Registry =</li>

<code>0x314159265dd8dbb310642f98f50c066173c1259b</code>

<li>ENS Public Resolver =</li>

<code>0x226159d592E2b063810a10Ebf6dcbADA94Ed68b8</code>

<li>ENS Base Registrar =</li>

<code>0xfac7bea255a6990f749363002136af6556b31e04</code>

<li>ENS Registrar Controller =</li>

<code>0xb22c1c159d12461ea124b0deb4b5b93020e6ad16</code>

<h3>Goerli</h3>

<li>DCLControllerV2 -</li>

<code>0xe23b047c8ee33d0c423676544bca6d2c9d3faa49</code>

<h3>Ropsten</h3>

<li>ENS Registry =</li>

<code>0x112234455c3a32fd11230c42e7bccd4a84e02010</code>

<li>ENS Public Resolver =</li>

<code>0x12299799a50340fb860d276805e78550cbad3de3</code>

<li>ENS Base Registrar =</li>

<code>0x227fcb6ddf14880413ef4f1a3df2bbb32bcb29d7</code>

<h3>Renew</h3>

<code>dcl</code>

<p>Call</p>

<code>nameExpires</code>

<p>method at</p>

<strong>ENS Base Registrar</strong>

<p>contract to check whether</p>

<code>dcl</code>

<p>domain is close to expire.</p>

<p>If it is about to expire, you can call</p>

<code>renew</code>

<p>method from</p>

<strong>ENS Registrar Controller</strong>

<p>. This method is</p>

<code>payable</code>

<p>so you should send Ether when calling it.

The Ether you send is related to the amount of time to renew the ENS domain.</p>

<h2>About</h2>

<p>Avatars smart contract</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>10</strong>

<h3>Watchers</h3>

<strong>7</strong>

<h3>Forks</h3>

<strong>10</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-subdomains-contract

# Change to URL: https://github.com/decentraland/third-party-aggregator

# URL: https://github.com/decentraland/third-party-aggregator

<title>GitHub - decentraland/third-party-aggregator</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/third-party-aggregator</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>68</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Third Party Aggregator</h1>

<p>UI to simplify the experience of Third Party Registry aggregators.</p>

<p>Allows CRUD operations over third parties.</p>

<h2>Get started</h2>

<code>npm ci</code>

<p>to install dependencies.</p>

<code>node</code>

<p>version 14 was used for this project.</p>

<code>npm start</code>

<p>to run the app locally on</p>

<code>localhost:3000</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/testnet-contract-migrations

# URL: https://github.com/decentraland/testnet-contract-migrations

<title>GitHub - decentraland/testnet-contract-migrations: Scripts for deploying testnet contracts.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Scripts for deploying testnet contracts.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/testnet-contract-migrations</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>91</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Testnet Contract Migrations</h1>

<p>This repository contains a collection of scripts dedicated to migrating Decentraland contracts from Mainnet to another testnet. Currently, the target testnet is Sepolia, but the goal is to support any target chain through configuration, ideally without any code modifications.</p>

<h2>Getting Started</h2>

<p>Start by copying the</p>

<code>.env.example</code>

<p>file into</p>

<code>.env</code>

<p>and filling in the necessary variables:</p>

<strong>TARGET_CHAIN_ID</strong>

<p>This is the identifier of the chain to which contracts will be migrated. It should be the identifier of the chain, not the name. For instance, Sepolia has a chain ID of</p>

<code>11155111</code>

<p>.</p>

<p>Ganache (Local Blockchain for testing) has a chain ID of</p>

<code>1337</code>

<p>. If you define this chain ID, the migration will be run against a local blockchain. We recommend using this approach before the actual migration.</p>

<strong>ETHERSCAN_API_KEY</strong>

<p>This key provides access to the Etherscan API, from which the origin contract data is downloaded, and where contract verifications are performed.</p>

<strong>PRIVATE_KEYS</strong>

<p>This consists of comma-separated private keys for accounts used to deploy the contracts. While it's not required when using the Ganache chain ID (as some test accounts are used), it's mandatory for real deployment. The order in which the keys are defined determines the index of each account. For example,</p>

<code>signers[0]</code>

<p>will correspond to the account from the first PK, and</p>

<code>signers[1]</code>

<p>will be the second. Ensure these accounts have sufficient ETH in the target chain; otherwise, the migration will fail due to insufficient gas.</p>

<strong>INFURA_API_KEY</strong>

<p>Infura is used as the RPC node for deploying the contracts and all other blockchain-related tasks. Without this API key, these tasks can't be completed.</p>

<h2>Usage</h2>

<strong>1 - Download contract data from mainnet</strong>

<p>This step only needs to be executed once unless new contracts are added when a new migration is required. This is because blockchain data is immutable, making multiple fetches unnecessary.</p>

<p>Running</p>

<code>npx ts-node scripts/prepare</code>

<p>will download mainnet contract data from the Etherscan API, as defined in</p>

<p>. It also downloads the contract creation code that was used to deploy the contracts. With both the source code data and the creation code, we can deploy, initialize, and verify the contracts in the following steps.</p>

<p>The contract data that will be downloaded is defined by the map in</p>

<code>scripts/prepare/config.ts</code>

<p>. Whenever something new is added to that map, we recommend running the prepare command again to have all new data available.</p>

<p>The downloaded data can be found in the</p>

<code>scripts/prepare/downloads</code>

<p>directory.</p>

<strong>2 - Run the migration</strong>

<p>Once you have prepared the necessary data, you can execute</p>

<code>npx ts-node scripts/migrate</code>

<p>to begin migrations.</p>

<p>Configurations can be found in the</p>

<code>scripts/migrate/config.ts</code>

<p>file, where the following parameters can be defined:</p>

<strong>deploymentOrder</strong>

<p>As the name suggests, this parameter determines the order in which contracts will be migrated. Not only does it establish the sequence, but it also identifies the contracts that will be deployed. You can select to deploy just a subset of contracts.</p>

<strong>contractDeployerPickers</strong>

<p>This map specifies which account from the provided</p>

<strong>PRIVATE_KEYS</strong>

<p>will deploy each contract.</p>

<strong>constructorFactories</strong>

<p>This map of factories determines how constructor arguments are built for each contract to be deployed.</p>

<strong>postDeployments</strong>

<p>This map defines what actions are to be performed after a contract is deployed. These could range from initializations to checks or mints.</p>

<p>Contracts will be deployed sequentially. Whether the migration succeeds or fails, a</p>

<code>scripts/migrate/migrations/{chainId}.json</code>

<p>file will be created, containing the addresses of the deployed contracts and the constructors used to deploy them, presented in hexadecimal format. If you run the migration again, it will skip over contracts that have already been deployed. This feature is useful if a migration fails due to an incorrect configuration or a gas shortage, as it prevents the need for re-deployment.</p>

<p>To redeploy all contracts, simply delete the file and run the migration again. If you need to redeploy certain contracts but not all, remove their specific entries from the file.</p>

<strong>3 - Verify contracts</strong>

<p>Once all contracts have been migrated, you can verify them on Etherscan by executing</p>

<code>npx ts-node scripts/verify</code>

<p>. The script uses the same list of contracts that were used for the deployment to perform the verification.</p>

<p>The verification process will continue even if a specific contract fails to verify. It merely requests verification and logs the result. You can refer to this log to address any potential issues or make necessary modifications.</p>

<h2>About</h2>

<p>Scripts for deploying testnet contracts.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk-test-scenes

# URL: https://github.com/decentraland/sdk-test-scenes

<title>GitHub - decentraland/sdk-test-scenes</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-test-scenes</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>53</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK Test Scenes</h1>

<p>Welcome to the SDK Test Scene repository! The goal of this repo is to build all scenes listed in</p>

<code>test-scenes</code>

<p>and to fetch and build the scenes repo listed in</p>

<code>src/scenes-repository-list.json</code>

<p>.</p>

<h2>Step to add a local scene</h2>

<li>Just create a new directory with the content of the scene</li>

<h2>Step to add a remote scene (a repository)</h2>

<li>Add a new item to the json file</li>

<code>src/scenes-repository-list.json</code>

<li>, the schema must be:</li>

<pre>url:</pre>

<pre>base?:</pre>

<p>The base param is optional, and always must be defined in the</p>

<code>scene.json</code>

<p>. This param is useful when it's neccesary to move the parcel to another coords. The relocation is defined by the relative</p>

<code>base</code>

<p>coords. For example if you have a scene with</p>

<code>"base": "0,0"</code>

<p>in the</p>

<code>scene.json</code>

<p>, and here you specify</p>

<code>"base": "3,3"</code>

<p>, the scene will be in 3,3 and all parcels move relative to there.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=7

# URL: https://github.com/orgs/decentraland/repositories?page=7

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Reference Client Implementation of the Social Service</p>

<p>Hugo documentation theme for Decentraland</p>

<p>Mana balances subgraph</p>

<p>UniVRM is a gltf-based VRM format implementation for Unity. English is here</p>

<p>. æ¥æ¬èª ã¯ãã¡ã</p>

<p>Third Party API resolver example in Express</p>

<p>decentraland-crypto implementation in Rust</p>

<p>Decentraland ecs math</p>

<p>A library for adding scripting to .NET applications. Supports V8 (Windows, Linux, macOS) and JScript/VBScript (Windows).</p>

<p>ð Decentraland Marketplace Contracts</p>

<p>Ask me anything sessions</p>

<p>Authenticate WebSocket connections using the Decentraland's Authchain</p>

<p>Backend for frontend for Explorer</p>

<p>Common tools and types to share between catalyst servers and clients</p>

<p>Public interface exposed by Kernel</p>

<p>Generate a merkle tree of items by using its content hash</p>

<p>DCL dApps ESLint & Prettier Config</p>

<p>Javascript/Typescript bindings for QuickJS, a modern Javascript interpreter written in C by Fabrice Bellard.</p>

<p>FFmpeg bindings for Rust.</p>

<p>Board for Engagement & Discovery workstream</p>

<p>ð ð­ Set of Wearables NFT contracts</p>

<p>Example of HTTP Server in Rust using Warp and RpcServer using dcl-rpc</p>

<em>7</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/social-client

# URL: https://github.com/decentraland/social-client

<title>GitHub - decentraland/social-client: Reference Client Implementation of the Social Service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Reference Client Implementation of the Social Service</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/social-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Social Client</h1>

<p>Reference Client Implementations of the Social Service</p>

<h2>About</h2>

<p>Reference Client Implementation of the Social Service</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-social-client

# Change to URL: https://github.com/decentraland/documentation-theme

# URL: https://github.com/decentraland/documentation-theme

<title>GitHub - decentraland/documentation-theme: Hugo documentation theme for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Hugo documentation theme for Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/documentation-theme</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>486</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Hugo Book Theme</h1>

<h3>documentation theme as simple as plain book</h3>

<h2>Features</h2>

<li>Clean simple design</li>

<li>Light and Mobile-Friendly</li>

<li>Multi-language support</li>

<li>Customisable</li>

<li>Zero initial configuration</li>

<li>Handy shortcodes</li>

<li>Comments support</li>

<li>Simple blog and taxonomy</li>

<li>Primary features work without JavaScript</li>

<li>Dark Mode</li>

<h2>Requirements</h2>

<li>Hugo 0.68 or higher</li>

<li>Hugo extended version, read more</li>

<h2>Installation</h2>

<h3>Install as git submodule</h3>

<p>Navigate to your hugo project root and run:</p>

<code>git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book</code>

<p>Then run hugo (or set</p>

<code>theme = "hugo-book"</code>

<p>/</p>

<code>theme: hugo-book</code>

<p>in configuration file)</p>

<code>hugo server --minify --theme hugo-book</code>

<h3>Install as hugo module</h3>

<p>You can also add this theme as a Hugo module instead of a git submodule.</p>

<p>Start with initializing hugo modules, if not done yet:</p>

<code>hugo mod init github.com/repo/path</code>

<p>Navigate to your hugo project root and add [module] section to your</p>

<code>config.toml</code>

<p>:</p>

<pre>[</pre>

<pre>]

[[</pre>

<pre>.</pre>

<pre>]]</pre>

<pre>=</pre>

<p>Then, to load/update the theme module and run hugo:</p>

<pre>hugo mod get -u

hugo server --minify</pre>

<h3>Creating site from scratch</h3>

<p>Below is an example on how to create a new site from scratch:</p>

<pre>hugo new site mydocs</pre>

<pre>mydocs

git init

git submodule add https://github.com/alex-shpak/hugo-book themes/hugo-book

cp -R themes/hugo-book/exampleSite/content</pre>

<pre>hugo server --minify --theme hugo-book</pre>

<h2>Menu</h2>

<h3>File tree menu (default)</h3>

<p>By default, the theme will render pages from the</p>

<code>content/docs</code>

<p>section as a menu in a tree structure.

You can set</p>

<code>title</code>

<p>and</p>

<code>weight</code>

<p>in the front matter of pages to adjust the order and titles in the menu.</p>

<h3>Leaf bundle menu (Deprecated, to be removed in June 2022)</h3>

<p>You can also use leaf bundle and the content of its</p>

<code>index.md</code>

<p>file as menu.

Given you have the following file structure:</p>

<code>âââ content

â   âââ docs

â   â   âââ page-one.md

â   â   âââ page-two.md

â   âââ posts

â       âââ post-one.md

â       âââ post-two.md</code>

<p>Create a file</p>

<code>content/menu/index.md</code>

<p>with the content:</p>

<pre>=</pre>

<pre>Book Example</pre>

<pre>({{< relref "/docs/" >}})</pre>

<pre>Page One</pre>

<pre>({{< relref "/docs/page-one" >}})</pre>

<pre>Page Two</pre>

<pre>({{< relref "/docs/page-two" >}})</pre>

<pre>Blog</pre>

<pre>({{< relref "/posts" >}})</pre>

<p>And Enable it by setting</p>

<code>BookMenuBundle: /menu</code>

<p>in Site configuration.</p>

<h2>Blog</h2>

<p>A simple blog is supported in the section</p>

<code>posts</code>

<p>.

A blog is not the primary usecase of this theme, so it has only minimal features.</p>

<h2>Configuration</h2>

<h3>Site Configuration</h3>

<p>There are a few configuration options that you can add to your</p>

<code>config.toml</code>

<p>file.

You can also see the</p>

<code>yaml</code>

<p>example</p>

<p>.</p>

<pre>g</pre>

<pre>=</pre>

<pre>d</pre>

<pre>=</pre>

<pre>d</pre>

<pre>=</pre>

<pre>e</pre>

<pre>=</pre>

<pre>d</pre>

<pre>= [</pre>

<pre>,</pre>

<pre>]

[</pre>

<pre>]</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<pre>=</pre>

<h3>Multi-Language Support</h3>

<p>Theme supports Hugo's</p>

<p>, just follow configuration guide there. You can also tweak search indexing configuration per language in</p>

<code>i18n</code>

<p>folder.</p>

<h3>Page Configuration</h3>

<p>You can specify additional params in the front matter of individual pages:</p>

<pre>t</pre>

<pre>=</pre>

<pre>w</pre>

<pre>=</pre>

<pre>b</pre>

<pre>=</pre>

<pre>b</pre>

<pre>=</pre>

<pre>b</pre>

<pre>=</pre>

<pre>b</pre>

<pre>=</pre>

<pre>b</pre>

<pre>=</pre>

<pre>b</pre>

<pre>=</pre>

<pre>b</pre>

<pre>=</pre>

<h3>Partials</h3>

<p>There are layout partials available for you to easily override components of the theme in</p>

<code>layouts/partials/</code>

<p>.</p>

<p>In addition to this, there are several empty partials you can override to easily add/inject code.</p>

<th>Empty Partial</th>

<th>Placement</th>

<code>layouts/partials/docs/inject/head.html</code>

<td>Before closing</td>

<code><head></code>

<td>tag</td>

<code>layouts/partials/docs/inject/body.html</code>

<td>Before closing</td>

<code><body></code>

<td>tag</td>

<code>layouts/partials/docs/inject/footer.html</code>

<td>After page footer content</td>

<code>layouts/partials/docs/inject/menu-before.html</code>

<td>At the beginning of</td>

<code><nav></code>

<td>menu block</td>

<code>layouts/partials/docs/inject/menu-after.html</code>

<td>At the end of</td>

<code><nav></code>

<td>menu block</td>

<code>layouts/partials/docs/inject/content-before.html</code>

<td>Before page content</td>

<code>layouts/partials/docs/inject/content-after.html</code>

<td>After page content</td>

<code>layouts/partials/docs/inject/toc-before.html</code>

<td>At the beginning of table of contents block</td>

<code>layouts/partials/docs/inject/toc-after.html</code>

<td>At the end of table of contents block</td>

<h3>Extra Customisation</h3>

<th>File</th>

<th>Description</th>

<code>static/favicon.png</code>

<td>Override default favicon</td>

<code>assets/_custom.scss</code>

<td>Customise or override scss styles</td>

<code>assets/_variables.scss</code>

<td>Override default SCSS variables</td>

<code>assets/_fonts.scss</code>

<td>Replace default font with custom fonts (e.g. local files or remote like google fonts)</td>

<code>assets/mermaid.json</code>

<td>Replace Mermaid initialization config</td>

<h3>Plugins</h3>

<p>There are a few features implemented as plugable</p>

<code>scss</code>

<p>styles. Usually these are features that don't make it to the core but can still be useful.</p>

<th>Plugin</th>

<th>Description</th>

<code>assets/plugins/_numbered.scss</code>

<td>Makes headings in markdown numbered, e.g.</td>

<code>1.1</code>

<td>,</td>

<code>1.2</code>

<code>assets/plugins/_scrollbars.scss</code>

<td>Overrides scrollbar styles to look similar across platforms</td>

<p>To enable plugins, add</p>

<code>@import "plugins/{name}";</code>

<p>to</p>

<code>assets/_custom.scss</code>

<p>in your website root.</p>

<h3>Hugo Internal Templates</h3>

<p>There are a few hugo templates inserted in</p>

<code><head></code>

<p>To disable Open Graph inclusion you can create your own empty file</p>

<code>\layouts\_internal\opengraph.html</code>

<p>.

In fact almost empty not quite empty because an empty file looks like absent for HUGO. For example:</p>

<code><!-- --></code>

<h2>Shortcodes</h2>

<p>By default, Goldmark trims unsafe outputs which might prevent some shortcodes from rendering. It is recommended to set</p>

<code>markup.goldmark.renderer.unsafe=true</code>

<p>if you encounter problems.</p>

<pre>[</pre>

<pre>.</pre>

<pre>.</pre>

<pre>]</pre>

<pre>=</pre>

<p>If you are using</p>

<code>config.yaml</code>

<p>or</p>

<code>config.json</code>

<p>, consult the</p>

<h2>Versioning</h2>

<p>This theme follows a simple incremental versioning. e.g.</p>

<code>v1</code>

<p>,</p>

<code>v2</code>

<p>and so on. There might be breaking changes between versions.</p>

<p>If you want lower maintenance, use one of the released versions. If you want to live on the bleeding edge of changes, you can use the</p>

<code>master</code>

<p>branch and update your website when needed.</p>

<h2>Contributing</h2>

<p>Contributions are welcome and I will review and consider pull requests.

Primary goals are:</p>

<li>Keep it simple.</li>

<li>Keep minimal (or zero) default configuration.</li>

<li>Avoid interference with user-defined layouts.</li>

<li>Avoid using JS if it can be solved by CSS.</li>

<p>Feel free to open issues if you find missing configuration or customisation options.</p>

<h2>About</h2>

<p>Hugo documentation theme for Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1.1k</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://decentraland.github.io/documentation-theme

# URL: https://decentraland.github.io/documentation-theme

<title>|</title>

<h1>Decentraland Documentation</h1>

<p>The first-ever virtual world owned by its users</p>

<p>This site is maintained by the Decentraland Foundation.</p>

<p>The content in this site is divided into sections for different user profiles. Choose a section that matches your needs.</p>

# Change to URL: https://github.com/decentraland/mana-graph

# URL: https://github.com/decentraland/mana-graph

<title>GitHub - decentraland/mana-graph: Mana balances subgraph</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Mana balances subgraph</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/mana-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland MANA subgraph</h1>

<li>Mainnet:</li>

<li>(QmVt1A6NAUVGeKZMG2FGs6jws6aHS1CtDgCrkuyD8fiEDW)</li>

<li>Ropsten:</li>

<li>(QmbnEMwrGF6eizBJHLWb4e1YBmru9wh9ED16WhENa2qJtM)</li>

<li>Goerli:</li>

<li>(Qmcor92mZeSiiPEoA7jkp5kT9M9wuZPakXrKPURP2QJCtS)</li>

<li>Mumbai:</li>

<li>(QmSWsSgiH6Z5XDTQqfvPsUeGu6rskpLuQj6smuzcCxhf5x)</li>

<li>Matic:</li>

<li>(QmXC2m6ANv9Vut3FTVdahjAsN3hhVZWbncCfcQmjHzdbCe)</li>

<h3>Install</h3>

<pre>npm run install</pre>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<p>The</p>

<code>id</code>

<p>is the Ethereum address.</p>

<p>Ethereum addresses should be passed lowercased:</p>

<code>0xB549B2442b2BD0a53795BC5cDcBFE0cAF7ACA9f8</code>

<li>â</li>

<code>0xb549b2442b2bd0a53795bc5cdcbfe0caf7aca9f8</code>

<li>â</li>

<h4>Get first 100 account's balances</h4>

<h4>Get an specific account balance</h4>

<pre>:</pre>

<pre>:</pre>

<h3>Troubleshooting</h3>

<li>If you detect that the data is wrong. Check the</li>

<li>to see if the block where the transaction happened has been indexed. If not, wait a little. If yes:</li>

<li>Detect what is the event missed.</li>

<li>Check the</li>

<em>subgraph.yaml</em>

<li>for the event handler function.</li>

<li>Go to the handler function. Handlers are inside</li>

<em>src/handlers</em>

<li>.</li>

<li>Follow the logic to detect what the error could be.</li>

<li>Fix it</li>

<li>Send a PR</li>

<li>If the subgraph indexing has failed. Check the errors in the log</li>

<h2>About</h2>

<p>Mana balances subgraph</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-mana-subgraph

# Change to URL: https://github.com/decentraland/UniVRM

# URL: https://github.com/decentraland/UniVRM

<title>GitHub - decentraland/UniVRM: UniVRM is a gltf-based VRM format implementation for Unity. English is here https://vrm.dev/en/ . æ¥æ¬èª ã¯ãã¡ã https://vrm.dev/</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>UniVRM is a gltf-based VRM format implementation for Unity. English is here</p>

<p>. æ¥æ¬èª ã¯ãã¡ã</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/UniVRM</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>175</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4,820</strong>

<h2>Files</h2>

<button>View code</button>

<h1>UniVRM</h1>

<p>The standard implementation of 3D Avatar file format</p>

<p>for</p>

<p>.</p>

<p>VRM is an extension of</p>

<p>, so this library also support glTF 2.0 files.</p>

<h2>Features</h2>

<p>UniVRM supports the</p>

<p>and the</p>

<p>.</p>

<p>UniVRM can import/export following supported file types at both runtime and editor.</p>

<h3>Supported file types</h3>

<li>VRM 1.0 (.vrm)</li>

<li>VRM 0.x (.vrm)</li>

<li>glTF 2.0 (.glb | .gltf | .zip)</li>

<h3>Import features</h3>

<li>You can import supported file types at both runtime and editor.</li>

<li>Support for async/await importing at runtime.</li>

<li>Support for Migration VRM 0.x files into VRM 1.0 files.</li>

<li>Support for ScriptedImporter for VRM 1.0 and glTF 2.0.</li>

<li>You can import glTF's PBR materials into Unity Built-in RP's Standard materials.</li>

<h3>Export features</h3>

<li>You can export supported file types at both runtime and editor.</li>

<li>You can export Unity Built-in RP's Standard materials into glTF's PBR materials.</li>

<h2>Supported Environments</h2>

<p>The latest UniVRM supports Unity 2020.3 LTS or later.</p>

<p>UniVRM supports scripting backends both .NET and IL2CPP.</p>

<p>UniVRM supports the following building target platforms:</p>

<li>Standalone (Windows/Mac/Linux)</li>

<li>iOS</li>

<li>Android</li>

<li>WebGL</li>

<p>The other platforms maybe work but they are not tested.</p>

<h2>Installation</h2>

<h3>Latest Release</h3>

<summary>Previous Releases</summary>

<p>You can use an previous version of UniVRM if you use an older version of Unity.

These are</p>

<strong>not supported</strong>

<p>.</p>

<th>Unity Version</th>

<th>UniVRM Release</th>

<th>VRM 1.0 support</th>

<td>2019.3</td>

<td>No</td>

<td>2018.4</td>

<td>No</td>

<p>You can install UniVRM using the UnityPackage or the UPM Package.</p>

<h3>UnityPackage</h3>

<p>From the</p>

<p>, you can download the</p>

<code>.unitypackage</code>

<p>files.</p>

<li>For import/export VRM 1.0</li>

<li>You can download</li>

<strong>VRM-0.XXX.X-YYYY.unitypackage</strong>

<li>.</li>

<li>You can also download sample projects as</li>

<strong>VRM_Samples-0.XXX.X-YYYY.unitypackage</strong>

<li>.</li>

<li>For import/export VRM 0.x</li>

<li>You can download</li>

<strong>UniVRM-0.XXX.X-YYYY.unitypackage</strong>

<li>.</li>

<li>You can also download sample projects as</li>

<strong>UniVRM_Samples-0.XXX.X-YYYY.unitypackage</strong>

<li>.</li>

<li>For import/export glTF 2.0</li>

<li>You can download</li>

<strong>VRM-0.XXX.X-YYYY.unitypackage</strong>

<li>.</li>

<h3>UPM Package</h3>

<p>From the</p>

<p>, you can find UPM package urls.</p>

<li>For import/export VRM 1.0</li>

<li>You have to install all of the following UPM packages:</li>

<code>com.vrmc.vrmshaders</code>

<code>com.vrmc.gltf</code>

<code>com.vrmc.vrm</code>

<li>For import/export VRM 0.x</li>

<li>You have to install all of the following UPM packages:</li>

<code>com.vrmc.vrmshaders</code>

<code>com.vrmc.gltf</code>

<code>com.vrmc.univrm</code>

<li>For import/export glTF 2.0</li>

<li>You have to install all of the following UPM packages:</li>

<code>com.vrmc.vrmshaders</code>

<code>com.vrmc.gltf</code>

<p>You can install these UPM packages via</p>

<code>Package Manager</code>

<p>-></p>

<code>+</code>

<p>-></p>

<code>Add package from git URL...</code>

<p>in UnityEditor.</p>

<h2>Documentation</h2>

<h3>For developers</h3>

<h2>License</h2>

<h2>About</h2>

<p>UniVRM is a gltf-based VRM format implementation for Unity. English is here</p>

<p>. æ¥æ¬èª ã¯ãã¡ã</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>394</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/third-party-api-resolver-example

# URL: https://github.com/decentraland/third-party-api-resolver-example

<title>GitHub - decentraland/third-party-api-resolver-example: Third Party API resolver example in Express</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Third Party API resolver example in Express</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/third-party-api-resolver-example</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Third Party API Resolver</h1>

<p>This is an example API resolver which exposes the necessary endpoints so they can in turn be consumed by the builder. It follows</p>

<p>and the accompanying</p>

<p>, using a</p>

<p>as an example.</p>

<h2>How to run</h2>

<p>You'll need to first install the dependencies with:</p>

<pre>npm install</pre>

<p>Then you can do</p>

<pre>npm run start</pre>

<h2>API</h2>

<p>Once again we follow the</p>

<p>here for each endpoint we expose. We'll explain each one briefly, check the docs and</p>

<p>for more info</p>

<h3>@GET /registry/:registry-id/address/:address/assets</h3>

<p>This endpoint is responsible of returning all assets an address own, for a particular registry. It has a</p>

<p>it has to follow.</p>

<h4>Example</h4>

<pre>/v1/registry/invalidregistry/address/0xc04528c14c8ffd84c7c1fb6719b4a89853035cdd/assets

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 0,</pre>

<pre>: 1,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: []

}</pre>

<pre>/v1/registry/cryptoregistry/address/0x1bb1c46af05fed1a407d86c468a783d13a1acf7e/assets

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 0,</pre>

<pre>: 1,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: []

}</pre>

<pre>/v1/registry/cryptoregistry/address/0xc04528c14c8ffd84c7c1fb6719b4a89853035cdd/assets

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 1,</pre>

<pre>: 1,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: [

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 1,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}

]

}</pre>

<h3>@GET /registry/:registry-id/address/:address/assets/:id</h3>

<p>This endpoint is responsible of returning a single asset via it's id. It must belong to the regsitry and to the address. It has a</p>

<p>it has to follow.</p>

<h4>Example</h4>

<pre>/v1/registry/invalidthings/address/0xc04528c14c8ffd84c7c1fb6719b4a89853035cdd/assets/0xb794f5ea0ba39494ce839613fffba74279579268:2

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 0,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<pre>/v1/registry/cryptoregistry/address/0x1bb1c46af05fed1a407d86c468a783d13a1acf7e/assets/0xb794f5ea0ba39494ce839613fffba74279579268:2

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 0,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<pre>/v1/registry/cryptoregistry/address/0xc04528c14c8ffd84c7c1fb6719b4a89853035cdd/assets/0xb794f5ea0ba39494ce839613fffba74279579268:44

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 0,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<pre>/v1/registry/cryptoregistry/address/0xc04528c14c8ffd84c7c1fb6719b4a89853035cdd/assets/0xb794f5ea0ba39494ce839613fffba74279579268:2

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>: 1,</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<h3>@GET /registry/:registryId/owners-bloom-filter</h3>

<p>This endpoint is responsible for returning a</p>

<p>comprising all the owners a registry has. For more information on why this endpoint is required you can check</p>

<p>This example uses the</p>

<p>implementation of</p>

<p>library to get all the available owners and return a JSON response that can later be used like this:</p>

<h4>Example</h4>

<pre>/v1/registry/invalidstuff/owners-bloom-filter

{

data:</pre>

<pre>}</pre>

<pre>/v1/registry/cryptoregistry/owners-bloom-filter

{</pre>

<pre>:</pre>

<pre>}</pre>

<h2>About</h2>

<p>Third Party API resolver example in Express</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-crypto-rust

# URL: https://github.com/decentraland/decentraland-crypto-rust

<title>GitHub - decentraland/decentraland-crypto-rust: decentraland-crypto implementation in Rust</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>decentraland-crypto implementation in Rust</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-crypto-rust</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>87</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland crypto (Rust)</h1>

<p>This crate is a port of</p>

<code>@dcl/crypto</code>

<p>originally implemented on javascript and provides the necessary tools to create and validate

Decentraland's Authentication Chains.</p>

<h2>Test</h2>

<p>To run all tests you need to provide a ethereum rpc endpoint.</p>

<p>First, create a</p>

<code>.cargo/config.toml</code>

<p>file using the template provided in the repository and set your rpc provider.</p>

<pre>cp .cargo/config.toml.example .cargo/config.toml</pre>

<p>Once configured you can run all tests</p>

<pre>cargo</pre>

<pre>--doc</pre>

<h2>Release</h2>

<g-emoji>â ï¸</g-emoji>

<p>Do not modify</p>

<code>package.version</code>

<p>on</p>

<code>Cargo.toml</code>

<p>Use</p>

<p>to create a new version.</p>

<h2>TODO</h2>

<li>serialize and deserialize auth chains</li>

<li>verify auth chains</li>

<li>simple</li>

<li>ephemeral</li>

<li>verify auth chain expiration</li>

<li>verify personal signatures</li>

<li>verify</li>

<li>signatures</li>

<li>create identity</li>

<li>create auth chain from identity</li>

<li>load identity from file</li>

<li>release process</li>

<li>build cache</li>

<li>coverage</li>

<li>publish cargo</li>

<h2>About</h2>

<p>decentraland-crypto implementation in Rust</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-crypto-rust

# Change to URL: https://github.com/decentraland/ecs-math

# URL: https://github.com/decentraland/ecs-math

<title>GitHub - decentraland/ecs-math: Decentraland ecs math</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland ecs math</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ecs-math</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>15</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL Ecs Math components.</h1>

<h2>Installation</h2>

<pre>npm install -D @dcl/ecs-math</pre>

<h2>License</h2>

<p>Apache 2.0</p>

<h2>About</h2>

<p>Decentraland ecs math</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/editor-sdk7-scene-template

# URL: https://github.com/decentraland/editor-sdk7-scene-template

<title>GitHub - decentraland/editor-sdk7-scene-template</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/editor-sdk7-scene-template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Test scene</h1>

<p>This scene is built with the SDK7 in alpha state.</p>

<h1>New ECS for SDK7</h1>

<h2>Entities</h2>

<p>An Entity is just an ID. It is an abstract concept not represented by any data structure. There is no "class Entity". Just a number that is used as a reference to group different components.</p>

<p>Note: Note that it's no longer necessary to separately create an entity and then add it to the engine, this is all done in a single act.</p>

<h2>Components</h2>

<p>The component is just a data container, WITHOUT any functions.</p>

<p>To add a component to an entity, the entry point is now the component type, not the entity.</p>

<p>This is different from how the syntax was in SDK6:</p>

<h3>Base Components</h3>

<p>Base components already come packed as part of the SDK. Most of them interact directly with the renderer in some way. This is the full list of currently supported base components:</p>

<li>Transform</li>

<li>Animator</li>

<li>Material</li>

<li>MeshRenderer</li>

<li>MeshCollider</li>

<li>AudioSource</li>

<li>AudioStream</li>

<li>AvatarAttach</li>

<li>AvatarModifierArea</li>

<li>AvatarShape</li>

<li>Billboard</li>

<li>CameraMode</li>

<li>CameraModeArea</li>

<li>GltfContainer</li>

<li>NftShape</li>

<li>PointerEventsResult</li>

<li>PointerHoverFeedback</li>

<li>PointerLock</li>

<li>Raycast</li>

<li>RaycastResult</li>

<li>TextShape</li>

<li>VisibilityComponent</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Custom Components</h3>

<p>Each component must have a unique number ID. If a number is repeated, the engine or another player receiving updates might apply changes to the wrong component. Note that numbers 1-2000 are reserved for the base components.</p>

<p>When creating a custom component you declare the schema of the data to be stored in it. Every field in a component MUST belong to one of the built-in special schemas provided as part of the SDK. These special schemas include extra functionality that allows them to be serialized/deserialized.</p>

<p>Currently, the names of these special schemas are:</p>

<h4>Primitives</h4>

<code>Schemas.Boolean</code>

<li>: true or false (serialized as a Byte)</li>

<code>Schemas.String</code>

<li>: UTF8 strings (serialized length and content)</li>

<code>Schemas.Float</code>

<li>: single precission float</li>

<code>Schemas.Double</code>

<li>: double precision float</li>

<code>Schemas.Byte</code>

<li>: a single byte, integer with range 0..255</li>

<code>Schemas.Short</code>

<li>: 16 bits signed-integer with range -32768..32767</li>

<code>Schemas.Int</code>

<li>: 32 bits signed-integer with range -2Â³Â¹..(2Â³Â¹-1)</li>

<code>Schemas.Int64</code>

<li>: 64 bits signed-integer</li>

<code>Schemas.Number</code>

<li>: an alias to Schemas.Float</li>

<h4>Specials</h4>

<code>Schemas.Entity</code>

<li>: a wrapper to int32 that casts the type to</li>

<code>Entity</code>

<code>Schemas.Vector3</code>

<li>: a Vector3 with { x, y, z }</li>

<code>Schemas.Quaternion</code>

<li>: a Quaternion with { x, y, z, w}</li>

<code>Schemas.Color3</code>

<li>: a Color3 with { r, g, b }</li>

<code>Schemas.Color4</code>

<li>: a Colo4 with { r, g, b, a }</li>

<h4>Schema generator</h4>

<code>Schemas.Enum</code>

<li>: passing the serialization Schema and the original Enum as generic</li>

<code>Schemas.Array</code>

<li>: passing the item Schema</li>

<code>Schemas.Map</code>

<li>: passing a Map with Schemas as values</li>

<code>Schemas.Optional</code>

<li>: passing the schema to serialize</li>

<p>Below are some examples of how these schemas can be declared.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To then create a custom component using one of these schemas, use the following syntax:</p>

<p>For contrast, below is an example of how components were constructed prior to SDK 7.</p>

<pre>@</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Systems</h2>

<p>Systems are pure & simple functions.

All your logic comes here.

A system might hold data which is relevant to the system itself, but no data about the entities it processes.</p>

<p>To add a system, all you need to do is define a function and add it to the engine. The function may optionally include a</p>

<code>dt</code>

<p>parameter with the delay since last frame, just like in prior versions of the SDK.</p>

<pre>:</pre>

<h3>Query components</h3>

<p>The way to group/query the components inside systems is using the method getEntitiesWith.</p>

<code>engine.getEntitiesWith(...components)</code>

<p>.</p>

<pre>:</pre>

<h2>Mutability</h2>

<p>Mutability is now an important distinction. We can choose to deal with mutable or with immutable versions of a component. We should use</p>

<code>getMutable</code>

<p>only when we plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can't change any of the properties on it.</p>

<p>To fetch the mutable version of a component, call it via</p>

<code>ComponentDefinition.getMutable()</code>

<p>. For example:</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ClearScript

# URL: https://github.com/decentraland/ClearScript

<title>GitHub - decentraland/ClearScript: A library for adding scripting to .NET applications. Supports V8 (Windows, Linux, macOS) and JScript/VBScript (Windows).</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A library for adding scripting to .NET applications. Supports V8 (Windows, Linux, macOS) and JScript/VBScript (Windows).</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ClearScript</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>251</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Description</h1>

<p>ClearScript is a library that makes it easy to add scripting to your .NET applications. It currently supports JavaScript (via</p>

<p>and</p>

<p>) and</p>

<p>.</p>

<h1>Features</h1>

<li>Simple usage; create a script engine, add your objects and/or types, run scripts</li>

<li>Support for several script engines:</li>

<li>,</li>

<li>and</li>

<li>Exposed resources require no modification, decoration, or special coding of any kind</li>

<li>Scripts get simple access to most of the features of exposed objects and types:</li>

<li>Methods, properties, fields, events</li>

<li>(Objects) Indexers, extension methods, conversion operators, explicitly implemented interfaces</li>

<li>(Types) Constructors, nested types</li>

<li>Full support for generic types and methods, including C#-like type inference and explicit type arguments</li>

<li>Exposed .NET collections support native script iteration mechanisms:</li>

<code>for...of</code>

<li>and</li>

<code>for await...of</code>

<code>Enumerator</code>

<code>For Each...Next</code>

<li>Scripts can invoke methods with output parameters, optional parameters, and parameter arrays</li>

<li>Script delegates enable callbacks into script code</li>

<li>Support for exposing all the types defined in one or more assemblies in one step</li>

<li>Optional support for importing types and assemblies from script code</li>

<li>The host can invoke script functions and access script objects directly</li>

<li>Full support for script debugging</li>

<li>Support for fast data transfer to and from</li>

<li>Support for</li>

<li>Support for</li>

<li>Automatic conversion between .NET</li>

<code>BigInteger</code>

<li>and JavaScript</li>

<code>BigInt</code>

<li>.</li>

<li>Optional automatic conversion between .NET</li>

<code>DateTime</code>

<li>and JavaScript</li>

<code>Date</code>

<li>.</li>

<li>Optional automatic conversion between .NET</li>

<li>and JavaScript</li>

<li>.</li>

<li>Support for .NET 5.0+, .NET Framework 4.5+, .NET Core 3.1, and .NET Standard 2.1.</li>

<li>Support for Windows (x86/x64/arm64), Linux (x64/arm/arm64), and macOS (x64/arm64).</li>

<h1>Installation</h1>

<h3>Composite packages</h3>

<p>Everything you need for one platform.</p>

<th>Platform</th>

<th>Packages</th>

<td>Windows</td>

<td>Linux</td>

<td>macOS</td>

<h3>Component packages</h3>

<p>Cross-platform libraries and data.</p>

<th>Component</th>

<th>Packages</th>

<td>Core</td>

<td>JScript/VBScript</td>

<td>V8</td>

<h3>V8 native assembly packages</h3>

<p>Platform-specific V8 libraries.</p>

<th>Platform</th>

<th>Packages</th>

<td>Windows</td>

<td>Linux</td>

<td>macOS</td>

<h1>Documentation</h1>

<h1>Acknowledgments</h1>

<p>We'd like to thank:</p>

<li>.</li>

<li>.</li>

<li>for generously providing the</li>

<code>Httpbin</code>

<li>service.</li>

<li>for generously providing the</li>

<li>Jekyll theme.</li>

<li>for generously providing the</li>

<li>.</li>

<h2>About</h2>

<p>A library for adding scripting to .NET applications. Supports V8 (Windows, Linux, macOS) and JScript/VBScript (Windows).</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Security policy</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>147</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/marketplace-contracts

# URL: https://github.com/decentraland/marketplace-contracts

<title>GitHub - decentraland/marketplace-contracts: ð Decentraland Marketplace Contracts</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Decentraland Marketplace Contracts</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/marketplace-contracts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>13</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>104</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Marketplace Contracts</h1>

<h2>Overview</h2>

<p>Decentraland Marketplace Smart Contract. Check this</p>

<p>for further understanding.</p>

<h2>Install</h2>

<pre>npm i</pre>

<h3>Test</h3>

<pre>npm run</pre>

<h2>About</h2>

<p>ð Decentraland Marketplace Contracts</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>161</strong>

<h3>Watchers</h3>

<strong>20</strong>

<h3>Forks</h3>

<strong>82</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ama

# URL: https://github.com/decentraland/ama

<title>GitHub - decentraland/ama: Ask me anything sessions</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Ask me anything sessions</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ama</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>93</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Ask me anything sessions</h1>

<p>This repo contains the questions and answers from the weekly technical</p>

<strong>Ask me anything</strong>

<p>sessions.

The goal of the sessions is to create a simple, efficient, psychologically safe way to submit questions to the technical experts of the Decentraland Foundation while also sharing the learning from other grantees and members of the community and the sessions are hosted by topic:</p>

<li>Platform: Catalysts and Decentralized Services</li>

<li>dApps: UG wearables and emotes / Marketplaces / LANDs / DCL Names / Smart Contracts</li>

<li>Explorer</li>

<li>SDK (and Kernel)</li>

<p>If you wish to participate in the sessions, just go to the Decentraland</p>

<p>and check the Events section.</p>

<h1>Index</h1>

<li>Topic: Platform and dServices</li>

<li>Topic: SDK</li>

<li>Topic: Explorer</li>

<li>Topic: dApps</li>

<li>Topic: Platform and dServices</li>

<li>Topic: Explorer</li>

<li>Topic: dApps</li>

<li>Topic: Platform and dServices</li>

<li>Topic: SDK</li>

<li>Topic: dApps</li>

<li>Topic: Platform and dServices</li>

<li>Topic: Explorer</li>

<li>Topic: dApps</li>

<li>Topic: Platform and dServices</li>

<li>Topic: dApps</li>

<h2>About</h2>

<p>Ask me anything sessions</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-crypto-middleware-rs

# URL: https://github.com/decentraland/dcl-crypto-middleware-rs

<title>GitHub - decentraland/dcl-crypto-middleware-rs: Authenticate WebSocket connections using the Decentraland's Authchain</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Authenticate WebSocket connections using the Decentraland's Authchain</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-crypto-middleware-rs</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>4</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Authentication Middleware for Rust</h1>

<p>Utils to authenticate a DCL user using the</p>

<p>This crate aims to provide all the utilities needed for authenticating an user when creating a new Rust service.

It can be compared to this</p>

<p>for TS</p>

<p>It provides:</p>

<li>A mechanism for authenticating a WS conneciton.</li>

<li>A verification function for signed fetches to be called as a middleware on a HTTP Server.</li>

<h2>About</h2>

<p>Authenticate WebSocket connections using the Decentraland's Authchain</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-authentication-middleware-for-rust

# Change to URL: https://github.com/decentraland/nats-tools

# URL: https://github.com/decentraland/nats-tools

<title>GitHub - decentraland/nats-tools</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/nats-tools</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/Vtubing

# URL: https://github.com/decentraland/Vtubing

<title>GitHub - decentraland/Vtubing</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/Vtubing</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>29</strong>

<h2>Files</h2>

<button>View code</button>

<p>#DCL Vtubing</p>

<p>test</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-commons

# URL: https://github.com/decentraland/catalyst-commons

<title>GitHub - decentraland/catalyst-commons: Common tools and types to share between catalyst servers and clients</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Common tools and types to share between catalyst servers and clients</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-commons</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>122</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>189</strong>

<h2>Files</h2>

<button>View code</button>

<p>This project has been deprecated, for a fetcher implementation use</p>

<p>for types definition</p>

<h2>About</h2>

<p>Common tools and types to share between catalyst servers and clients</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>14</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/casi-hackers-hackaton

# URL: https://github.com/decentraland/casi-hackers-hackaton

<title>GitHub - decentraland/casi-hackers-hackaton</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/casi-hackers-hackaton</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>casi-hackers</h1>

<h2>SDK 7 - ui FTW !!</h2>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/kernel-interface

# URL: https://github.com/decentraland/kernel-interface

<title>GitHub - decentraland/kernel-interface: Public interface exposed by Kernel</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Public interface exposed by Kernel</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/kernel-interface</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<h1>base-component</h1>

<h2>About</h2>

<p>Public interface exposed by Kernel</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/content-hash-tree

# URL: https://github.com/decentraland/content-hash-tree

<title>GitHub - decentraland/content-hash-tree: Generate a merkle tree of items by using its content hash</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Generate a merkle tree of items by using its content hash</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/content-hash-tree</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>5</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>15</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/content-hash-tree</h1>

<h2>Idea from @uniswap/merkle-distributor</h2>

<h2>Local Development</h2>

<p>The following assumes the use of</p>

<code>node@>=10</code>

<p>.</p>

<h3>Install Dependencies</h3>

<code>npm ci</code>

<h4>Lib</h4>

<h3>Generate a tree</h3>

<h3>Verify whether a contnet hash is part of the tree or not</h3>

<h4>CLI (Benchmark)</h4>

<h3>Generate a tree with content hashes</h3>

<code>npm run generate-merkle-root:data</code>

<em>~10k items: time to completion 788.8ms. Json size: 10mb</em>

<em>~100k items: time to completion 6.7s. Json size: 124mb</em>

<p>This will generate a</p>

<code>proofs.json</code>

<p>file in the root of the project.</p>

<h3>Verify a single proof of a tree with ~100k leafs</h3>

<code>npm run verify-merkle-root:proof</code>

<p>Time to completion 9.294ms. Json size: 4kb</p>

<h2>About</h2>

<p>Generate a merkle tree of items by using its content hash</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/eslint-config-dapps

# URL: https://github.com/decentraland/eslint-config-dapps

<title>GitHub - decentraland/eslint-config-dapps: DCL dApps ESLint & Prettier Config</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>DCL dApps ESLint & Prettier Config</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/eslint-config-dapps</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>16</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL dApps ESLint & Prettier Config</h1>

<h2>Installation</h2>

<pre>npm install -D @dcl/eslint-config-dapps</pre>

<h2>Usage</h2>

<p>In</p>

<code>eslintrc.json</code>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>In</p>

<code>tsconfig.json</code>

<p>:</p>

<pre>:</pre>

<p>In</p>

<code>prettier.config.js</code>

<p>:</p>

<pre>...</pre>

<p>In</p>

<code>.prettierrc.json</code>

<p>:</p>

<h2>License</h2>

<p>Apache 2.0</p>

<h2>About</h2>

<p>DCL dApps ESLint & Prettier Config</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/quickjs-emscripten

# URL: https://github.com/decentraland/quickjs-emscripten

<title>GitHub - decentraland/quickjs-emscripten: Javascript/Typescript bindings for QuickJS, a modern Javascript interpreter written in C by Fabrice Bellard.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Javascript/Typescript bindings for QuickJS, a modern Javascript interpreter written in C by Fabrice Bellard.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/quickjs-emscripten</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>320</strong>

<h2>Files</h2>

<button>View code</button>

<h1>quickjs-emscripten</h1>

<p>Javascript/Typescript bindings for QuickJS, a modern Javascript interpreter,

compiled to WebAssembly.</p>

<li>Safely evaluate untrusted Javascript (up to ES2020).</li>

<li>Create and manipulate values inside the QuickJS runtime (</li>

<li>).</li>

<li>Expose host functions to the QuickJS runtime (</li>

<li>).</li>

<li>Execute synchronous code that uses asynchronous functions, with</li>

<li>.</li>

<p>|</p>

<p>|</p>

<p>|</p>

<h2>Usage</h2>

<p>Install from</p>

<code>npm</code>

<p>:</p>

<code>npm install --save quickjs-emscripten</code>

<p>or</p>

<code>yarn add quickjs-emscripten</code>

<p>.</p>

<p>The root entrypoint of this library is the</p>

<code>getQuickJS</code>

<p>function, which returns

a promise that resolves to a</p>

<p>when

the QuickJS WASM module is ready.</p>

<p>Once</p>

<code>getQuickJS</code>

<p>has been awaited at least once, you also can use the</p>

<code>getQuickJSSync</code>

<p>function to directly access the singleton engine in your synchronous code.</p>

<h3>Safely evaluate Javascript code</h3>

<p>See</p>

<pre>:</pre>

<pre>:</pre>

<h3>Interfacing with the interpreter</h3>

<p>You can use</p>

<p>to build a scripting environment by modifying globals and exposing functions

into the QuickJS interpreter.</p>

<p>Each</p>

<code>QuickJSContext</code>

<p>instance has its own environment -- globals, built-in

classes -- and actions from one context won't leak into other contexts or

runtimes (with one exception, see</p>

<p>).</p>

<p>Every context is created inside a</p>

<p>.

A runtime represents a Javascript heap, and you can even share values between

contexts in the same runtime.</p>

<p>When you create a context from a top-level API like in the example above,

instead of by calling</p>

<code>runtime.newContext()</code>

<p>, a runtime is automatically created

for the lifetime of the context, and disposed of when you dispose the context.</p>

<h4>Runtime</h4>

<p>The runtime has APIs for CPU and memory limits that apply to all contexts within

the runtime in aggregate. You can also use the runtime to configure EcmaScript

module loading.</p>

<h3>Memory Management</h3>

<p>Many methods in this library return handles to memory allocated inside the

WebAssembly heap. These types cannot be garbage-collected as usual in

Javascript. Instead, you must manually manage their memory by calling a</p>

<code>.dispose()</code>

<p>method to free the underlying resources. Once a handle has been

disposed, it cannot be used anymore. Note that in the example above, we call</p>

<code>.dispose()</code>

<p>on each handle once it is no longer needed.</p>

<p>Calling</p>

<code>QuickJSContext.dispose()</code>

<p>will throw a RuntimeError if you've forgotten to

dispose any handles associated with that VM, so it's good practice to create a

new VM instance for each of your tests, and to call</p>

<code>vm.dispose()</code>

<p>at the end

of every test.</p>

<p>Here are some strategies to reduce the toil of calling</p>

<code>.dispose()</code>

<p>on each

handle you create:</p>

<h4>Scope</h4>

<p>A</p>

<code>Scope</code>

<p>instance manages a set of disposables and calls their</p>

<code>.dispose()</code>

<p>method in the reverse order in which they're added to the scope. Here's the

"Interfacing with the interpreter" example re-written using</p>

<code>Scope</code>

<p>:</p>

<p>You can also create</p>

<code>Scope</code>

<p>instances with</p>

<code>new Scope()</code>

<p>if you want to manage

calling</p>

<code>scope.dispose()</code>

<p>yourself.</p>

<code>Lifetime.consume(fn)</code>

<code>Lifetime.consume</code>

<p>is sugar for the common pattern of using a handle and then

immediately disposing of it.</p>

<code>Lifetime.consume</code>

<p>takes a</p>

<code>map</code>

<p>function that

produces a result of any type. The</p>

<code>map</code>

<p>fuction is called with the handle,

then the handle is disposed, then the result is returned.</p>

<p>Here's the "Interfacing with interpreter" example re-written using</p>

<code>.consume()</code>

<p>:</p>

<p>Generally working with</p>

<code>Scope</code>

<p>leads to more straight-forward code, but</p>

<code>Lifetime.consume</code>

<p>can be handy sugar as part of a method call chain.</p>

<h3>Exposing APIs</h3>

<p>To add APIs inside the QuickJS environment, you'll need to create objects to

define the shape of your API, and add properties and functions to those objects

to allow code inside QuickJS to call code on the host.</p>

<p>By default, no host functionality is exposed to code running inside QuickJS.</p>

<pre>...</pre>

<pre>...</pre>

<h4>Promises</h4>

<p>To expose an asynchronous function that</p>

<em>returns a promise</em>

<p>to callers within

QuickJS, your function can return the handle of a</p>

<code>QuickJSDeferredPromise</code>

<p>created via</p>

<code>context.newPromise()</code>

<p>.</p>

<p>When you resolve a</p>

<code>QuickJSDeferredPromise</code>

<p>-- and generally whenever async

behavior completes for the VM -- pending listeners inside QuickJS may not

execute immediately. Your code needs to explicitly call</p>

<code>runtime.executePendingJobs()</code>

<p>to resume execution inside QuickJS. This API

gives your code maximum control to</p>

<em>schedule</em>

<p>when QuickJS will block the host's

event loop by resuming execution.</p>

<p>To work with QuickJS handles that contain a promise inside the environment, you

can convert the QuickJSHandle into a native promise using</p>

<code>context.resolvePromise()</code>

<p>. Take care with this API to avoid 'deadlocks' where

the host awaits a guest promise, but the guest cannot make progress until the

host calls</p>

<code>runtime.executePendingJobs()</code>

<p>. The simplest way to avoid this kind

of deadlock is to always schedule</p>

<code>executePendingJobs</code>

<p>after any promise is

settled.</p>

<h4>Asyncify</h4>

<p>Sometimes, we want to create a function that's synchronous from the perspective

of QuickJS, but prefer to implement that function</p>

<em>asynchronously</em>

<p>in your host

code. The most obvious use-case is for EcmaScript module loading. The underlying

QuickJS C library expects the module loader function to return synchronously,

but loading data synchronously in the browser or server is somewhere between "a

bad idea" and "impossible". QuickJS also doesn't expose an API to "pause" the

execution of a runtime, and adding such an API is tricky due to the VM's

implementation.</p>

<p>As a work-around, we provide an alternate build of QuickJS processed by

Emscripten/Binaryen's</p>

<p>compiler transform. Here's how Emscripten's documentation describes Asyncify:</p>

<p>Asyncify lets synchronous C or C++ code interact with asynchronous [host] JavaScript. This allows things like:</p>

<p>A synchronous call in C that yields to the event loop, which allows browser events to be handled.</p>

<p>A synchronous call in C that waits for an asynchronous operation in [host] JS to complete.</p>

<p>Asyncify automatically transforms ... code into a form that can be paused and

resumed ..., so that it is asynchronous (hence the name âAsyncifyâ) even though

[it is written] in a normal synchronous way.</p>

<p>This means we can suspend an</p>

<em>entire WebAssembly module</em>

<p>(which could contain

multiple runtimes and contexts) while our host Javascript loads data

asynchronously, and then resume execution once the data load completes. This is

a very handy superpower, but it comes with a couple of major limitations:</p>

<em>An asyncified WebAssembly module can only suspend to wait for a single

asynchronous call at a time</em>

<p>. You may call back into a suspended WebAssembly

module eg. to create a QuickJS value to return a result, but the system will

crash if this call tries to suspend again. Take a look at Emscripten's documentation

on</p>

<p>.</p>

<em>Asyncified code is bigger and runs slower</em>

<p>. The asyncified build of

Quickjs-emscripten library is 1M, 2x larger than the 500K of the default

version. There may be room for further</p>

<p>Of our build in the future.</p>

<p>To use asyncify features, use the following functions:</p>

<li>: create a runtime inside a new WebAssembly module.</li>

<li>: create runtime and context together inside a new

WebAssembly module.</li>

<li>: create an empty WebAssembly module.</li>

<p>These functions are asynchronous because they always create a new underlying

WebAssembly module so that each instance can suspend and resume independently,

and instantiating a WebAssembly module is an async operation. This also adds

substantial overhead compared to creating a runtime or context inside an

existing module; if you only need to wait for a single async action at a time,

you can create a single top-level module and create runtimes or contexts inside

of it.</p>

<h5>Async module loader</h5>

<p>Here's an example of valuating a script that loads React asynchronously as an ES

module. In our example, we're loading from the filesystem for reproducibility,

but you can use this technique to load using</p>

<code>fetch</code>

<p>.</p>

<pre>:</pre>

<h5>Async on host, sync in QuickJS</h5>

<p>Here's an example of turning an async function into a sync function inside the

VM.</p>

<pre>:</pre>

<h3>Testing your code</h3>

<p>This library is complicated to use, so please consider automated testing your

implementation. We highly writing your test suite to run with both the "release"

build variant of quickjs-emscripten, and also the</p>

<p>build variant.

The debug sync build variant has extra instrumentation code for detecting memory

leaks.</p>

<p>The class</p>

<p>exposes the memory leak detection API, although

this API is only accurate when using</p>

<code>DEBUG_SYNC</code>

<p>variant.</p>

<pre>:</pre>

<pre>:</pre>

<p>For more testing examples, please explore the typescript source of</p>

<p>repository.</p>

<h3>Debugging</h3>

<li>Switch to a DEBUG build variant of the WebAssembly module to see debug log messages from the C part of this library.</li>

<li>Set</li>

<code>process.env.QTS_DEBUG</code>

<li>to see debug log messages from the Javascript part of this library.</li>

<h3>More Documentation</h3>

<p>|</p>

<p>|</p>

<p>|</p>

<h2>Background</h2>

<p>This was inspired by seeing</p>

<p>and Figma's

blogposts about using building a Javascript plugin runtime:</p>

<li>: Describes the LowLevelJavascriptVm interface.</li>

<li>: Figma switches to QuickJS.</li>

<h2>Status & Roadmap</h2>

<strong>Stability</strong>

<p>: Because the version number of this project is below</p>

<code>1.0.0</code>

<p>,

*expect occasional breaking API changes.</p>

<strong>Security</strong>

<p>: This project makes every effort to be secure, but has not been

audited. Please use with care in production settings.</p>

<strong>Roadmap</strong>

<p>: I work on this project in my free time, for fun. Here's I'm

thinking comes next. Last updated 2022-03-18.</p>

<p>Further work on module loading APIs:</p>

<li>Create modules via Javascript, instead of source text.</li>

<li>Scan source text for imports, for ahead of time or concurrent loading.

(This is possible with third-party tools, so lower priority.)</li>

<p>Higher-level tools for reading QuickJS values:</p>

<li>Type guard functions:</li>

<code>context.isArray(handle)</code>

<li>,</li>

<code>context.isPromise(handle)</code>

<li>, etc.</li>

<li>Iteration utilities:</li>

<code>context.getIterable(handle)</code>

<li>,</li>

<code>context.iterateObjectEntries(handle)</code>

<li>.

This better supports user-level code to deserialize complex handle objects.</li>

<p>Higher-level tools for creating QuickJS values:</p>

<li>Devise a way to avoid needing to mess around with handles when setting up

the environment.</li>

<li>Consider integrating</li>

<li>for automatic translation.</li>

<li>Consider class-based or interface-type-based marshalling.</li>

<p>EcmaScript Modules / WebAssembly files / Deno support. This requires me to

learn a lot of new things, but should be interesting for modern browser usage.</p>

<p>SQLite integration.</p>

<h2>Related</h2>

<li>Duktape wrapped in Wasm:</li>

<li>QuickJS wrapped in C++:</li>

<h2>Developing</h2>

<p>This library is implemented in two languages: C (compiled to WASM with

Emscripten), and Typescript.</p>

<h3>The C parts</h3>

<p>The ./c directory contains C code that wraps the QuickJS C library (in ./quickjs).

Public functions (those starting with</p>

<code>QTS_</code>

<p>) in ./c/interface.c are

automatically exported to native code (via a generated header) and to

Typescript (via a generated FFI class). See ./generate.ts for how this works.</p>

<p>The C code builds as both with</p>

<code>emscripten</code>

<p>(using</p>

<code>emcc</code>

<p>), to produce WASM (or

ASM.js) and with</p>

<code>clang</code>

<p>. Build outputs are checked in, so you can iterate on

the Javascript parts of the library without setting up the Emscripten toolchain.</p>

<p>Intermediate object files from QuickJS end up in ./build/quickjs/.</p>

<p>This project uses</p>

<code>emscripten 3.1.32</code>

<p>.</p>

<li>On ARM64, you should install</li>

<code>emscripten</code>

<li>on your machine. For example on macOS,</li>

<code>brew install emscripten</code>

<li>.</li>

<li>If</li>

<em>the correct version of emcc</em>

<li>is not in your PATH, compilation falls back to using Docker.

On ARM64, this is 10-50x slower than native compilation, but it's just fine on x64.</li>

<p>Related NPM scripts:</p>

<code>yarn update-quickjs</code>

<li>will sync the ./quickjs folder with a

github repo tracking the upstream QuickJS.</li>

<code>yarn make-debug</code>

<li>will rebuild C outputs into ./build/wrapper</li>

<code>yarn make-release</code>

<li>will rebuild C outputs in release mode, which is the mode

that should be checked into the repo.</li>

<h3>The Typescript parts</h3>

<p>The ./ts directory contains Typescript types and wraps the generated Emscripten

FFI in a more usable interface.</p>

<p>You'll need</p>

<code>node</code>

<p>and</p>

<code>yarn</code>

<p>. Install dependencies with</p>

<code>yarn install</code>

<p>.</p>

<code>yarn build</code>

<li>produces ./dist.</li>

<code>yarn test</code>

<li>runs the tests.</li>

<code>yarn test --watch</code>

<li>watches for changes and re-runs the tests.</li>

<h3>Yarn updates</h3>

<p>Just run</p>

<code>yarn set version from sources</code>

<p>to upgrade the Yarn release.</p>

<h2>About</h2>

<p>Javascript/Typescript bindings for QuickJS, a modern Javascript interpreter written in C by Fabrice Bellard.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>82</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-l2-utils

# URL: https://github.com/decentraland/decentraland-l2-utils

<title>GitHub - decentraland/decentraland-l2-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-l2-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>10</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>37</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-l2-utils</h1>

<p>This library includes a number of helpful pre-built tools that help you deal with common requirements that involve and interacting with data on the second layer blockchain.</p>

<h2>Using the L2 library</h2>

<p>To use any of the helpers provided by the utils library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm i @dcl/l2-scene-utils eth-connect decentraland-transactions -B</code>

<p>Note: This command also installs the latest version of the decentraland-transactions and eth-connect libraries, that are dependencies of the l2 utils library</p>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add those lines at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<pre>mana</pre>

<h2>MANA Operations</h2>

<p>As MANA is Decentraland's main currency, this library provies tools to make it especially easy to use in a scene.</p>

<h3>Get balance of an address</h3>

<p>To check the balance of a specific address in MANAwei, use the</p>

<code>balance()</code>

<p>function. This function has an optional argument:</p>

<code>address</code>

<li>: Ethereum address to check, if not provided, it will check the balance of the</li>

<pre>mana</pre>

<h3>Send MANA to an address</h3>

<p>To make players in your scene send MANA to a specific address, use the</p>

<code>transfer()</code>

<p>function. This function requires the following arguments:</p>

<code>to</code>

<li>: What ethereum address to send the MANA to</li>

<code>amount</code>

<li>: How many MANAwei to send</li>

<p>For example, your scene can have a button that requests players to make a MANA payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<pre>mana</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction.

Once that transaction is sent on the Matic network, the door opens.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/l2-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>17</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>9</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-l2-utils

# Change to URL: https://github.com/decentraland/protocol-squad-unity-explorer

# URL: https://github.com/decentraland/protocol-squad-unity-explorer

<title>GitHub - decentraland/protocol-squad-unity-explorer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/protocol-squad-unity-explorer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rust-ffmpeg-sys

# URL: https://github.com/decentraland/rust-ffmpeg-sys

<title>GitHub - decentraland/rust-ffmpeg-sys: FFmpeg bindings for Rust.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>FFmpeg bindings for Rust.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rust-ffmpeg-sys</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>252</strong>

<h2>Files</h2>

<button>View code</button>

<p>This is a fork of the abandoned</p>

<p>crate. You can find this crate as</p>

<p>on crates.io.</p>

<p>This crate contains low level bindings to FFmpeg. You're probably interested in the high level bindings instead:</p>

<p>.</p>

<p>A word on versioning: major and minor versions track major and minor versions of FFmpeg, e.g. 4.2.x of this crate has been updated to support the 4.2.x series of FFmpeg. Patch level is reserved for bug fixes of this crate and does not track FFmpeg patch versions.</p>

<h2>Feature flags</h2>

<p>In addition to feature flags declared in</p>

<code>Cargo.toml</code>

<p>, this crate performs various compile-time version and feature detections and exposes the results in additional flags. These flags are briefly documented below; run</p>

<code>cargo build -vv</code>

<p>to view more details.</p>

<code>ffmpeg_<x>_<y></code>

<p>flags (new in v4.3.2), e.g.</p>

<code>ffmpeg_4_4</code>

<p>, indicating the FFmpeg installation being compiled against is at least version</p>

<code><x>.<y></code>

<p>. Currently available:</p>

<code>ffmpeg_3_0</code>

<code>ffmpeg_3_1</code>

<code>ffmpeg_3_2</code>

<code>ffmpeg_3_3</code>

<code>ffmpeg_3_1</code>

<code>ffmpeg_4_0</code>

<code>ffmpeg_4_1</code>

<code>ffmpeg_4_2</code>

<code>ffmpeg_4_3</code>

<code>ffmpeg_4_4</code>

<code>avcodec_version_greater_than_<x>_<y></code>

<p>(new in v4.3.2), e.g.,</p>

<code>avcodec_version_greater_than_58_90</code>

<p>. The name should be self-explanatory.</p>

<code>ff_api_<feature></code>

<p>, e.g.</p>

<code>ff_api_vaapi</code>

<p>, corresponding to whether their respective uppercase deprecation guards evaluate to true.</p>

<code>ff_api_<feature>_is_defined</code>

<p>, e.g.</p>

<code>ff_api_vappi_is_defined</code>

<p>, similar to above except these are enabled as long as the corresponding deprecation guards are defined.</p>

<h2>About</h2>

<p>FFmpeg bindings for Rust.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>65</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/discoverability

# URL: https://github.com/decentraland/discoverability

<title>GitHub - decentraland/discoverability: Board for Engagement & Discovery workstream</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Board for Engagement & Discovery workstream</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/discoverability</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Discoverability</h1>

<p>Board for Engagement & Discovery workstream</p>

<h2>About</h2>

<p>Board for Engagement & Discovery workstream</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/wearables-contracts

# URL: https://github.com/decentraland/wearables-contracts

<title>GitHub - decentraland/wearables-contracts: ð ð­ Set of Wearables NFT contracts</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð ð­ Set of Wearables NFT contracts</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/wearables-contracts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>37</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>220</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentralanad Collection Contracts</h1>

<h2>Install</h2>

<pre>npm i</pre>

<h2>Tests</h2>

<h3>Normal</h3>

<pre>npm run</pre>

<h3>Gas report</h3>

<pre>npm run test:gas-report</pre>

<h3>Deploy</h3>

<pre>npx hardhat run --network</pre>

<pre>network</pre>

<pre>scripts/deploy/deploy.ts</pre>

<p>Available networks:</p>

<code>localhost</code>

<li>. You need to run a local node with</li>

<code>npx hardhat node</code>

<code>deploy</code>

<li>. You must need to export NETWORK with the desired one. E.g:</li>

<code>NETWORK=MUMBAI npx hardhat run --network deploy scripts/deploy.ts</code>

<h2>About</h2>

<p>ð ð­ Set of Wearables NFT contracts</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>59</strong>

<h3>Watchers</h3>

<strong>13</strong>

<h3>Forks</h3>

<strong>26</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/textures-helper

# URL: https://github.com/decentraland/textures-helper

<title>GitHub - decentraland/textures-helper</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/textures-helper</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>30</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Textures Helper</h1>

<p>Textures helper compresses textures using DXT1 mipmapped format.</p>

<h2>Converting an image</h2>

<p>This service exposes an endpoint for compressing textures which expects two inputs</p>

<code>size</code>

<p>as a path parameter and</p>

<code>asset</code>

<p>as a query parameter. The call structure for this endpoint is as follows:</p>

<code>GET <HOST>/content/dxt/:LENGTH?asset=<ASSET-URL></code>

<strong>length</strong>

<li>- must be an integer and a power of two that can go from 128 until 2048</li>

<strong>asset</strong>

<li>- must be a HTTP url referencing the asset to be converted by the service</li>

<p>The response structure will look like:</p>

<code>{

"asset": string,

"conversionRatio":

{

"height": number,

"width": number

}

}</code>

<strong>asset</strong>

<li>- contains the URL of the resized and compressed asset. This URL will point to the CDN configured for this service.</li>

<strong>conversionRatio</strong>

<li>- contains the resize ratio relating old asset size with the new one specified when calling the endpoint</li>

<strong>height</strong>

<li>- newHeight / oldHeight (</li>

<em>fixed to four decimals</em>

<li>)</li>

<strong>width</strong>

<li>- newWidth / oldWidth (</li>

<em>fixed to four decimals</em>

<li>)</li>

<h3>Endpoint call example</h3>

<p>The following call will compress the textures of the asset</p>

<code>bafkreieyj5es7j3mvdyyvvjn3qc3uaotlpsmhjb34rqoumsxpv5fbxieq4</code>

<p>to</p>

<code>CRN</code>

<p>format using</p>

<code>DXT1</code>

<p>and resize the image to the specified size (</p>

<em>512</em>

<p>).</p>

<code>GET https://textures-helper.decentraland.zone/content/dxt/512?asset=https://peer-ap1.decentraland.zone/content/contents/bafkreieyj5es7j3mvdyyvvjn3qc3uaotlpsmhjb34rqoumsxpv5fbxieq4</code>

<h3>Response example</h3>

<p>The call above would return the following response:</p>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

}</pre>

<h3>Authentication</h3>

<p>This service is secured with Auth Chain, therefore it needs to be consumed using</p>

<p>. The</p>

<code>signed fetch</code>

<p>call should include metadata with the following values:</p>

<strong>signer</strong>

<li>-</li>

<strong>dcl:explorer</strong>

<strong>intent</strong>

<li>-</li>

<strong>dcl:explorer:resize-textures</strong>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/warp-server-with-rpc-server

# URL: https://github.com/decentraland/warp-server-with-rpc-server

<title>GitHub - decentraland/warp-server-with-rpc-server: Example of HTTP Server in Rust using Warp and RpcServer using dcl-rpc</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Example of HTTP Server in Rust using Warp and RpcServer using dcl-rpc</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/warp-server-with-rpc-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<p>This repo is an example of an HTTP Server using Warp (Rust framework) and a RpcServer using dcl-rpc living in the same process and using the same tcp listener for connections.</p>

<p>This example was built to test the authentication process for a websocket connection that should be given to the</p>

<code>RpcServer</code>

<p>. This wasn't possible in Actix because their streams are not</p>

<code>Send</code>

<p>and their interfaces to handle websockets don't allow us to build a</p>

<code>WebSocketTransport</code>

<p>, and in tokio-tungstenite because the callback to check headers of a connection donesn't accept a future (for async I/O). Warp uses tokio-tungstenite for websockets but it allows you to give a future on the connection's upgrade event (we are actually not using it in this example) and their interfaces for websockets are compatible with</p>

<code>RpcServer</code>

<h2>About</h2>

<p>Example of HTTP Server in Rust using Warp and RpcServer using dcl-rpc</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=8

# URL: https://github.com/orgs/decentraland/repositories?page=8

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>ðº Tile Map</p>

<p>It brings Javascript runtime capability to Unity3D by integrating QuickJS.</p>

<p>Smart Contract Audit Reports</p>

<p>Gif decoding utility for Unity engine</p>

<p>Metaverse Fashion Week Landingpage</p>

<p>A load testing tool to determine how many users and messages can a matrix instance handle</p>

<p>ð¦¾ PM repository for dServices</p>

<p>Utility to schedule shows as well as synchronize actions with a show</p>

<p>NPC tools for conversational NPCs</p>

<p>IME for Unity WebGL</p>

<p>Reusable contracts</p>

<p>ð Components of a DCL world</p>

<p>ð¨ IPFS Alternative HTTP Interface</p>

<p>API definition for the Social Server implementation</p>

<p>websocket crdt sync server</p>

<p>A server that can generate a image of the face or the full body of an avatar</p>

<p>Synapse authentication server for testing</p>

<p>Aragon apps for Decentraland DAO</p>

<p>Set of common functionality accross Decentraland projects servers</p>

<p>Third-party Marketplace Adapter Smart Contract</p>

<p>NSubstitute is designed as a friendly substitute for .NET mocking libraries.</p>

<p>ð£ Script to help deploy Decentraland's road parcels</p>

<p>Kernel is the glue code between the OS, comms and the Renderer of Decentraland</p>

<p>This repository aims to have the main Decentraland Architecture</p>

<em>8</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tile-map

# URL: https://github.com/decentraland/tile-map

<title>GitHub - decentraland/tile-map: ðº Tile Map</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ðº Tile Map</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tile-map</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>11</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>43</strong>

<h2>Files</h2>

<button>View code</button>

<h1>react-tile-map</h1>

<p>Render a map of tiles, with zoom and panning, desktop or mobile, in React.</p>

<h2>About</h2>

<p>ðº Tile Map</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>8</strong>

<h3>Watchers</h3>

<strong>19</strong>

<h3>Forks</h3>

<strong>13</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-jsb

# URL: https://github.com/decentraland/unity-jsb

<title>GitHub - decentraland/unity-jsb: It brings Javascript runtime capability to Unity3D by integrating QuickJS.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>It brings Javascript runtime capability to Unity3D by integrating QuickJS.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-jsb</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,571</strong>

<h2>Files</h2>

<button>View code</button>

<h1>unity-jsb</h1>

<p>It brings Javascript runtime capability to Unity3D by integrating</p>

<p>.</p>

<strong>Typescript is the scripting language used in unity-jsb, the definition files (d.ts) of exported C# types could be generated with one-click simplicity.</strong>

<strong>v8 is experimentally supported as an alternative backend (only on Windows x64 for now)</strong>

<p>QuickJS is a small and embeddable Javascript engine. It supports the ES2020 specification including modules, asynchronous generators, proxies and BigInt.</p>

<h1>Features</h1>

<li>Unity3D coroutines and C# tasks support in JS async function</li>

<li>Operator overloading for Vector2/Vector3 etc. (only supported with QuickJS)</li>

<li>(development stage only)</li>

<li>Highly integrated with Unity3D</li>

<li>JS implemented</li>

<code>MonoBehaviour</code>

<li>(also available on</li>

<code>Prefab</code>

<li>)</li>

<li>JS implemented</li>

<code>EditorWindow</code>

<li>JS implemented</li>

<code>CustomEditor</code>

<li>(Inspector)</li>

<li>JS implemented</li>

<code>ScriptableObject</code>

<li>JS implemented</li>

<code>AssetPostProcessor</code>

<li>JS/C# interaction without glue code (development stage only)</li>

<li>Generates glue code for better performance</li>

<li>[PLANNED] Generates glue code with</li>

<code>Roslyn</code>

<li>source generator (for Unity2021.3+ only)</li>

<li>[UNFINISHED] JS Worker</li>

<li>[UNFINISHED] Hotfix on C#</li>

<li>[UNFINISHED]</li>

<code>UIElement</code>

<li>support</li>

<p>Supports .NET4.0/dotnetcore3.1/Unity2020.3+ (Windows/macOS/iOS/Android)  x86/x64/arm64

Only tested on macOS with Unity2020.3(INTEL)</p>

<h1>Samples</h1>

<h2>Extends MonoBehaviour</h2>

<pre>@</pre>

<pre>@</pre>

<pre>@</pre>

<pre>@</pre>

<h2>Extends EditorWindow</h2>

<pre>@</pre>

<h2>Hotload</h2>

<p>Script hot-load is supported, you can run the game, edit scripts without stopping playing to see the change affects immediately. The class instance including member variables in scripts (MonoBehaviour/EditorWindow) will be retained, only the type of class itself will be replaced on the fly to the new version.</p>

<h2>Editor Scripting</h2>

<p>Supports editor scripting:</p>

<li>Editor</li>

<li>EditorWindow</li>

<li>ScriptableObject</li>

<li>AssetPostProcessor</li>

<p>Here is an example of EditorWindow totally implemented in typescript.</p>

<em>Only imgui is supported for now.</em>

<h2>Async Functions</h2>

<li>await Unity3D coroutines</li>

<li>await C# Tasks</li>

<p>NOTE: In current version, a C# task returning nothing should use</p>

<code>System.Threading.Tasks.Task</code>

<p>as return type explicitly instead of</p>

<code>void</code>

<p>, then</p>

<code>jsb.Yield</code>

<p>can understand that it's a async task.</p>

<h2>Operator overloading</h2>

<code>Vector3 * Vector3</code>

<p>or</p>

<code>Vector3 * float</code>

<p>is all right, but be caution that there is no value type in Javascript, Vector3 is by-ref in Javascript.</p>

<p>NOTE: Operator overloading is only supported by quickjs.</p>

<h2>Modules</h2>

<h2>WebSocket</h2>

<h2>XMLHttpRequest</h2>

<h2>Worker</h2>

<p>This feature is UNFINISHED, all C# types are not exported into Worker runtime at present.</p>

<h2>Hotfix</h2>

<p>You can replace a tagged C# member method by a script function at runtime. This feature is UNFINISHED.</p>

<pre>:</pre>

<h3>Unity API Docs included in d.ts</h3>

<h3>Strong-typed</h3>

<h1>How to get the minimalistic jsb package</h1>

<p>You could add jsb as a UPM package with this URL:</p>

<p>.</p>

<p>! Samples are not included in UPM package.</p>

<h1>How to get the sample project</h1>

<p>You could clone this repository as a complete sample project.</p>

<h2>Clone</h2>

<code>git clone https://github.com/ialex32x/unity-jsb --depth=1</code>

<h2>Restore node_modules</h2>

<code>npm install</code>

<h2>Re-compile ts source files (only if modified)</h2>

<pre>tsc</pre>

<h2>Generate d.ts</h2>

<p>Open project with Unity3D, run menu command</p>

<code>JS Bridge/Generate Type Definition</code>

<p>NOTE: The split size of the generated d.ts file is configurable in</p>

<code>PrefsEditor</code>

<p>(or directly edit</p>

<code>js-bridge.json</code>

<p>).</p>

<h2>Examples</h2>

<h3>Examples for Unity</h3>

<p>Open</p>

<code>Assets/Examples/Scenes/SampleScene.unity</code>

<p>and select specific example you want to check.</p>

<p>If you use node_modules in your scripts, you need to package them via webpack/gulp when the game actually runs on target platform.</p>

<h3>Example for dotnetcore</h3>

<p>Open this project directory in VSCode, select</p>

<code>dotnetcore example</code>

<p>in</p>

<code>Run And Debug</code>

<p>panel, then just run it.</p>

<h2>How</h2>

<h1>Some experimental works</h1>

<h2>Extra Features (Optional)</h2>

<li>Websocket</li>

<li>XMLHttpRequest</li>

<h2>JSX</h2>

<pre>:</pre>

<pre>:</pre>

<pre>@</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h1>Multi-threading</h1>

<p>Multi-threading is not supported in a single runtime. You need to use worker.</p>

<h1>Debugger</h1>

<p>Remote debugging is now available with Chrome DevTools.</p>

<p>NOTE:</p>

<em>It's still in experimental stage.</em>

<h1>Referenced libraries</h1>

<li>A Javascript (QuickJS) Binding for Godot</li>

<h2>About</h2>

<p>It brings Javascript runtime capability to Unity3D by integrating QuickJS.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>38</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/smart-contract-audits

# URL: https://github.com/decentraland/smart-contract-audits

<title>GitHub - decentraland/smart-contract-audits: Smart Contract Audit Reports</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Smart Contract Audit Reports</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/smart-contract-audits</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Smart Contracts Audits</h1>

<h3>Table of Contents</h3>

<h2>Smart Contract Audits</h2>

<h3>LAND Registry</h3>

<li>2022/04/01 -</li>

<li>2022/04/01 -</li>

<li>2020/06/19 -</li>

<li>2018/07/06 -</li>

<h3>Estate Registry</h3>

<li>2022/05/28 -</li>

<li>2020/06/19 -</li>

<li>2018/08/22 -</li>

<h3>Marketplace</h3>

<li>2021/12/01 -</li>

<li>2021/12/03 -</li>

<li>2018/09/28 -</li>

<h3>Bids</h3>

<li>2021/09/20 -</li>

<li>2021/12/01 -</li>

<li>2021/12/03 -</li>

<li>2019/02/18 -</li>

<h3>DCL Names</h3>

<li>2023/03/03 -</li>

<li>2020/01/20 -</li>

<li>2019/06/03 -</li>

<h3>Collections</h3>

<li>2022/05/01 -</li>

<li>2021/11/10 -</li>

<li>2021/11/10 -</li>

<li>2022/04/11 -</li>

<li>2022/04/11 -</li>

<li>2021/09/10 -</li>

<li>2021/09/20 -</li>

<li>2021/04/26 -</li>

<li>2020/10/13 -</li>

<li>2020/05/04 -</li>

<li>2020/05/04 -</li>

<h3>LAND Second Auction</h3>

<li>2018/10/12 -</li>

<h3>PassThrough</h3>

<li>2019/01/07 -</li>

<li>2019/01/15 -</li>

<h3>Burners</h3>

<li>2019/01/10 -</li>

<li>2019/06/03 -</li>

<h3>Rentals</h3>

<li>2022/12/04 -</li>

<li>2022/10/25 -</li>

<li>2022/06/22 -</li>

<h3>Common Contracts</h3>

<li>2022/12/04 -</li>

<li>2022/10/25 -</li>

<li>2022/06/22 -</li>

<h3>Periodic Token Vesting</h3>

<li>2022/12/05 -</li>

<li>2022/12/02 -</li>

<li>2022/12/02 -</li>

<li>2022/11/10 -</li>

<h2>Well Known Issues</h2>

<h2>About</h2>

<p>Smart Contract Audit Reports</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-smart-contracts-audits

# Change to URL: https://github.com/decentraland/Unity-GifDecoder

# URL: https://github.com/decentraland/Unity-GifDecoder

<title>GitHub - decentraland/Unity-GifDecoder: Gif decoding utility for Unity engine</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Gif decoding utility for Unity engine</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/Unity-GifDecoder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Gif Decoder</h1>

<p>Custom gif decoder written from scratch, designed for Unity engine</p>

<p>There is no gif decoding library for .net, since GifBitmapDecoder is already included in PresentationCore.dll,

but you cant use it in Unity (Since mono doesn't support WPF).</p>

<p>With this library you can decode .gif file from any Stream (file, network, memory, you name it) from any thread.</p>

<h2>Features</h2>

<li>Full format support (87a, 89a, transparency, interlacing, discard methods, etc)</li>

<li>Can be invoked from any thread (since there is no Unity api involved in decoding)</li>

<li>Uses as little memory allocations as possible</li>

<li>Extensively tested on thousands of BTTV emotes</li>

<li>Uses</li>

<code>Color32[]</code>

<li>for color manipulation (Less memory usage and faster texture upload speeds)</li>

<h2>Usage</h2>

<p>Example usage, load all gif frames as textures in single frame</p>

<pre>GifStream</pre>

<pre>yourFile</pre>

<pre>gifStream</pre>

<pre>HasMoreData</pre>

<pre>gifStream</pre>

<pre>CurrentToken</pre>

<pre>GifStream</pre>

<pre>Token</pre>

<pre>Image</pre>

<pre>gifStream</pre>

<pre>Texture2D</pre>

<pre>gifStream</pre>

<pre>Header</pre>

<pre>width</pre>

<pre>gifStream</pre>

<pre>Header</pre>

<pre>height</pre>

<pre>TextureFormat</pre>

<pre>ARGB32</pre>

<pre>frame</pre>

<pre>image</pre>

<pre>colors</pre>

<pre>frame</pre>

<pre>frames</pre>

<pre>frame</pre>

<pre>frameDelays</pre>

<pre>image</pre>

<pre>SafeDelaySeconds</pre>

<pre>GifStream</pre>

<pre>Token</pre>

<pre>Comment</pre>

<pre>gifStream</pre>

<pre>Debug</pre>

<pre>commentText</pre>

<pre>gifStream</pre>

<p>This is just an example, and if you want to make most of this library, you should decode gif in separate thread and create textures on main thread.</p>

<p>Implementation is up to you, but with proper thread management, it can load gifs</p>

<p>(Please note, this is slightly older version of this library and few bugs that are visible in this video are no longer present)</p>

<h2>Safe Delay</h2>

<p>Browsers and plenty of other viewers display gifs with 10ms delay using 100ms delay.</p>

<p>While it is not by specification, there are plenty of gifs which use this delay and look wrong when played at 10ms per frame.

So if you want to use same playback speed as browsers, you should use "Safe" versions of delay</p>

<h2>Performance</h2>

<p>Since gif is archaic format which requires sequential reading of all data (No multithreaded optimizations possible), gif decoding is still very CPU demanding operation, but it doesn't mean that there is no optimizations possible:</p>

<li>Every allocation is reused, so most of allocations will happen on first frame and only grow when next frame require more data to hold than previous</li>

<li>Lzw dictionary uses own byte array heap, so insertions and deletions not use allocations</li>

<li>Pixels decoded from lzw dictionary are placed straight to final location, even when deinterlacing is used, no deinterlace postprocess step</li>

<p>For benchmark: SourPls 3x, 140x140, one global palette, 491 frames</p>

<p>Tested on Windows Desktop with Ryzen 3900x CPU</p>

<p>This library, ~0.96 ms per frame, 385.1kb of memory allocated</p>

<p>UniGif for comparsion, ~19.27ms per frame, 0.81</p>

<strong>gb</strong>

<p>of memory allocated

(It doesn't support decoding outside of coroutines, so i evaluated whole coroutine manually in single frame)</p>

<h2>Encoding</h2>

<p>This library doesn't support gif encoding, as it is more sophisticated process than decoding and currently

i have no programs that require encoding. So no encoding and no plans for implementation.</p>

<h2>Portability</h2>

<p>This library is designed for use in Unity engine, but if for some reason you want to port this somewhere else,

one and only "engine-dependant" class is</p>

<code>UnityEngine.Color32</code>

<p>, swap it with your implementation and port is completed.</p>

<h2>Changelog</h2>

<li>1.0.0</li>

<li>Initial version</li>

<li>1.0.1</li>

<li>Delay changed to int and few utility methods added to read it as seconds or milliseconds</li>

<li>1.0.2</li>

<li>Image decoding refactoring, resulting nearly 2x performance boost</li>

<li>1.0.3</li>

<li>Minor improvements and typo fixes</li>

<h2>TODO:</h2>

<li>Better documentation</li>

<li>Utility class for common usecases?</li>

<h2>About</h2>

<p>Gif decoding utility for Unity engine</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/fashion-week

# URL: https://github.com/decentraland/fashion-week

<title>GitHub - decentraland/fashion-week: Metaverse Fashion Week Landingpage</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Metaverse Fashion Week Landingpage</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/fashion-week</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>133</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Gatsby minimal starter</h1>

<h2>ð Quick start</h2>

<strong>Create a Gatsby site.</strong>

<p>Use the Gatsby CLI to create a new site, specifying the minimal starter.</p>

<pre>npm init gatsby</pre>

<strong>Start developing.</strong>

<p>Navigate into your new siteâs directory and start it up.</p>

<pre>my-gatsby-site/

npm run develop</pre>

<strong>Open the code and start customizing!</strong>

<p>Your site is now running at</p>

<p>!</p>

<p>Edit</p>

<code>src/pages/index.js</code>

<p>to see your site update in real-time!</p>

<strong>Learn more</strong>

<h2>ð Quick start (Gatsby Cloud)</h2>

<p>Deploy this starter with one click on</p>

<p>:</p>

<h2>About</h2>

<p>Metaverse Fashion Week Landingpage</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/matrix-reloaded

# URL: https://github.com/decentraland/matrix-reloaded

<title>GitHub - decentraland/matrix-reloaded: A load testing tool to determine how many users and messages can a matrix instance handle</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A load testing tool to determine how many users and messages can a matrix instance handle</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/matrix-reloaded</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>74</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Matrix Reloaded</h1>

<p>A tool that can be used to simulate Matrix users behavior for some period of time.</p>

<h2>Setup</h2>

<p>Before running the commands below remember to install the linker used by your OS:</p>

<h3>On Windows:</h3>

<code>cargo install -f cargo-binutils

rustup component add llvm-tools-preview</code>

<h3>On Linux:</h3>

<p>Ubuntu</p>

<pre>sudo apt-get install lld clang</pre>

<p>Arch</p>

<pre>sudo pacman -S lld clang</pre>

<h3>On MacOS:</h3>

<pre>brew install michaeleisel/zld/zld</pre>

<h4>Notes</h4>

<li>You might need to install XCode first from the App Store (not the Command Line Tools)</li>

<li>If Command Line Tools where already present in the system you might need to first 1) make sure XCode is in the</li>

<code>/Applications</code>

<li>directory and not the user apps one and 2) point xcode-select to the actual XCode app by using:</li>

<code>sudo xcode-select -s /Applications/Xcode.app/Contents/Developer</code>

<h2>Quick start</h2>

<li>Usage:</li>

<code>cargo run -- [OPTIONS] --homeserver <HOMESERVER> [OUTPUT]

OPTIONS:

-d, --duration <DURATION>                Tick duration in seconds

-h, --homeserver <HOMESERVER>            Homeserver to use during the simulation

-m, --max-users <MAX_USERS>              Max number of users for current simulation

-t, --ticks <TICKS>                      Number of times to tick during the simulation

-u, --users-per-tick <USERS_PER_TICK>    Number of users to act during the simulation</code>

<h3>Sample results</h3>

<p>After running the test, a directory with the current run will be created in the output directory (</p>

<code>output/{timestamp}</code>

<p>by default) with a file report for each step (e.g.</p>

<code>output/1650978209761/report_1_1650978284466.yaml</code>

<p>) with the following data:</p>

<pre>---</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>For more options and parameters to be configured please see</p>

<code>cargo run -- --help</code>

<p>and the</p>

<p>.</p>

<h2>Contact me</h2>

<h2>About</h2>

<p>A load testing tool to determine how many users and messages can a matrix instance handle</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.commailto:dservices+matrix-load-testing-tool@decentraland.org

# URL: https://github.commailto:dservices+matrix-load-testing-tool@decentraland.org

<title>Welcome to Decentraland</title>

<h1>Decentraland</h1>

<h1>SDK 7</h1>

<h1>Smart Wearables</h1>

<h3>In Decentraland</h3>

<h2>What's new?</h2>

<p>Decentraland is a world built by YOU where the only limit is your imagination. Create and sell Wearables & Emotes, construct captivating scenes and interactive experiences, or set up a personal space in your own World.</p>

<p>The dynamic, virtual social world of Decentraland is home to a vibrant community hosting diverse daily events, ranging from parties, art exhibitions, fashion shows, music festivals, and more to interactive experiences from renown brands like Netflix, Doritos, and Samsung. Make friends, play games, explore, and discover all Decentraland has to offer!</p>

<p>As a fully decentralized metaverse, Decentraland is owned and governed by its users. Join the Decentraland DAO to submit and vote on proposals that affect how the world operates or secure funding for your ideas by applying for grants.</p>

<h2>Trending Items</h2>

<h2>Browse LAND Available for Rent & Sale</h2>

<h2>Make your ideas a reality in the metaverse. Find a team to build with.</h2>

<h2>Worlds</h2>

<h3>Your Personal Space in the Metaverse</h3>

<p>With just a Decentraland NAME you can claim your own corner of the metaverse, separate from the open world of Decentraland, where you can build, experiment, host eventsâwhatever you want, itâs your World!</p>

<h3>Learn more about Decentraland</h3>

<h2>Frequently Asked

Questions</h2>

<h4>What is Decentraland?</h4>

<h4>How do I enter Decentraland?</h4>

<h4>Do I need cryptocurrency or a crypto wallet to use Decentraland?</h4>

<h4>How do I become a Decentraland Creator?</h4>

<h4>What is a NAME?</h4>

<h4>What is the difference between LANDs and Worlds?</h4>

<h4>How can I get help and contact the Support Team?</h4>

<h3>Stay updated with Decentraland</h3>

<h2>RESOURCES</h2>

<h2>CONNECT</h2>

# Change to URL: https://github.com/decentraland/dservices

# URL: https://github.com/decentraland/dservices

<title>GitHub - decentraland/dservices: ð¦¾ PM repository for dServices</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¦¾ PM repository for dServices</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dservices</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dservices</h1>

<p>ð¦¾ PM repository for dServices</p>

<h2>About</h2>

<p>ð¦¾ PM repository for dServices</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/show-management

# URL: https://github.com/decentraland/show-management

<title>GitHub - decentraland/show-management: Utility to schedule shows as well as synchronize actions with a show</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Utility to schedule shows as well as synchronize actions with a show</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/show-management</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>11</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>115</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Show Management</h2>

<p>Show Management Library enables you to schedule videos and synchronize actions with those videos to make a much more immersive show.</p>

<h1>Show Manager Documentation</h1>

<h2>Video Tutorial</h2>

<h2>Install</h2>

<p>To use any of the helpers provided by this library:</p>

<p>Install it as an npm package. Run this command in your scene's project folder:</p>

<code>npm i @dcl/show-management</code>

<p>Add this line at the start of your game.ts file, or any other TypeScript files that require it:</p>

<p>To be recognized you may also have to add an entry in tsconfig.json under paths</p>

<code>{

"compilerOptions": {

...

"paths": {

"@dcl/show-management": [

"node_modules/@dcl/show-management/dist/index.d.ts",

"node_modules\\@dcl\\show-management\\dist\\index.d.ts"

]

}

...

}</code>

<h2>Usage</h2>

<h3>Show Manager</h3>

<p>You will need need to create a ShowManager instance to start and assign it a schedule</p>

<pre>:</pre>

<pre>...</pre>

<h3>Configure Shows</h3>

<p>You must create showData that will define what shows to play and when.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>NOTE:  You maybe tempted to use ISO 8601 date format however there is no garetee 100% support it will be parsed correctly.  ISO 8601 format is the most universally supported however you cannot rely on correct implementation of the standard.</p>

<code>new Date("2022-05-09T16:39:00-04:00").getTime()/1000 //use at your own risk</code>

<p>Here is one of many free helpful converter tools</p>

<p>to you convert to date and time to seconds for startTime</p>

<h4>Configure Show Example</h4>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Syncing Actions to Video</h3>

<p>To sync action to video we make use of a subtitle file format called SubRip Subtitle (SRT).</p>

<p>If you would like to learn more about SRT format check these out</p>

<p>Here is the same SRT example but with comments explaining the components</p>

<p>Credit</p>

<p>Here is an example SRT format with actions in it</p>

<code>1

00:00:01,000 --> 00:00:01,033

ANNOUNCE {"text":"Welcome to our show","duration":3}

ANIMATE djTable {"animationName":"deckTableOn", "loop":true,"bpmSync":true}</code>

<p>See</p>

<p>for how the actions in the subtitle file come to life in your scene</p>

<h3>Run Your Show</h3>

<p>You will need need to create a RunOfShowSystem instance should you want the show to play by it self when the startTime dictage</p>

<h3>Event Listeners</h3>

<p>The Show Manager has no knowlege of your scene and how it should react to the videos.  So your scene react to show events registering to the provided event listeners</p>

<li>addStopShowListeners</li>

<li>addPlayVideoListeners</li>

<li>addVideoStatusChangeListener</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<h3>Display the Show Video</h3>

<p>The Show Manager will create a video texture but does not know where to put it in your scene.  You can register to SHOW_MGR.addPlayVideoListeners and assign the video texture where it needs to go.</p>

<pre>:</pre>

<h3>Perform a specific action for a certian show</h3>

<p>In this example I want to show a countdown to when the next show will be.  Register a listener to  addPlayVideoListeners and perform your logic there</p>

<pre>:</pre>

<h3>Enable Debug UI</h3>

<h3>Show Action Handlers</h3>

<p>Show action handlers are what convert the commands in the subtitle file into something in your scene</p>

<p>There are three types of handlers provided.  Ones that have all the functionality they need and some that need you extend them.  The latter require you to define how they function because there is no way to know exactly how each show will want to implement it.  For example the PAUSE action could mean lots of things, pause 1 animation but play another, hide one entity but show a different entity.  There is no way to predict all this so you must define it.  The third type are onces that you make yourself.</p>

<p>Provided handlers with all functionality provided include</p>

<li>ShowAnimationActionHandler</li>

<li>ShowBpmActionHandler</li>

<li>DefineTargetGroupActionHandler</li>

<li>ShowAnounceActionHandler</li>

<p>Handlers that are recommended you to extend them by defining how they should function</p>

<li>ShowPauseAllActionHandler</li>

<li>ShowStopAllActionHandler</li>

<h4>Show Action Handler Interface</h4>

<p>All action handlers implement a ShowActionHandler.  Matches(), Execute() and DecodeAction() are the most important methods.  Matches tests to see if the handler can process the action,  Execute processes it and DecodeAction provides a way to parse the action to a more structured object</p>

<code>interface ShowActionHandler<T>{

// will test if the action sent can be procssed by this handler

matches(action:string,showActionMgr:ShowActionManager):boolean

// if matches() returns true, execute will be called to process the action

execute(action:string,showActionMgr:ShowActionManager):void

// Will decode/parse the action into a more meaningful structure

decodeAction(action:string,showActionMgr:ShowActionManager):ActionParams<T>

....

}</code>

<h4>Parsing Actions</h4>

<p>The library provides a basic parser</p>

<code>showMgmt.parseActionWithOpts</code>

<p>.  Expected a pattern of:</p>

<code>ACTION_NAME TEXT_NO_SPACES TEXT_NO_SPACES2 ... (optional JSON string to be parsed as the very end)</code>

<p>The return object looks like this</p>

<code>type ActionParams<T>={

array?:string[] //parameters split on whitespace

params?:T // JSON object here if one passed

}</code>

<p>Example</p>

<code>const exampleAction = 'ANIMATE djTable {"animationName":"deckTableOn", "loop":true,"bpmSync":true}'

//when parsed

const parsedActionParams = showMgmt.parseActionWithOpts( exampleAction )

//output will be

{

array: ["ANIMATE","djTable",'{"animationName":"deckTableOn", "loop":true,"bpmSync":true}'],

params: {"animationName":"deckTableOn", "loop":true,"bpmSync":true}

}</code>

<p>You can implement your own parser if need be.</p>

<h4>Override Action Handler Behavior</h4>

<p>To define override an action handler should behave, you must provide a process method.  In this example here it defines how the Anounce action handler should behave.</p>

<p>You can initiate your own version of the class</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>OR fetch the existing one and overwrite its process callback</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Extend Action Handler Behavior</h4>

<p>To extend an action handler behavior, can provide processExt method.  In this example here it defines how to extend PauseAll action handler.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>OR add an onProcessListerner.  The benefit of this is you can register as many actions as you need when you need.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Make Your Own Show Action Handler</h3>

<p>Here is an example of how to make your very own action handler.  In this example we make a new action named "SAY" followed by the text to be said and register it to the show manager.</p>

<p>An example where no arguments are required</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Example where you want to pass arguments.</p>

<pre>?:</pre>

<pre>?:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>?</pre>

<pre>:</pre>

<h3>Adjust Logging Levels</h3>

<p>To avoid flooding logs each class has its own logger named by class name.  You can adjust logging levels for all classes or just a few to suit your needs</p>

<p>Classes of interest</p>

<li>ShowManager - manager class that is called to play shows</li>

<li>RunOfShowSystem - system that processes showSchedule and decides which show to play at the correct time</li>

<li>SubtitleVideoSystem - system that processes video events</li>

<li>SubtitleSystem - system that handles processing subtitles</li>

<li>ShowActionManager - processes an actions to be sent to a handler</li>

<li>ShowActionHandler - the action handlers them self</li>

<pre>:</pre>

<h2>How the Show Management Library Syncs Actions to Videos</h2>

<p>To be able to sync actions to videos we need to know where in the video we are (video currentOffset).</p>

<pre>sequenceDiagram

ShowManager->> ShowManager : playVideo

ShowManager->> VideoSystem : init

VideoSystem->>onVideoEvent: subscribe

VideoSystem->> SubtitleSystem : init

loop onVideo event

onVideoEvent->>VideoSystem: notify video event

end

ShowManager->> SubtitleSystem : subscribe.onCueBeginListeners

loop onUpdate(dt)

VideoSystem->>SubtitleSystem: time progressed

loop check for cues to fire

SubtitleSystem->>SubtitleSystem: check for cues to fire

SubtitleSystem->>SubtitleSystem : onCueBeginListeners: notify cue began

SubtitleSystem-->>ShowManager : runAction

end

end</pre>

<p>The onVideoEvent listener tells us the video is playing, paused, buffering etc.  The onVideoEvent also provides currentOffset which is the video currentOffset time.  You may be wondering why dont we just use onVideoEvent.  It is because the update event does not fire frequently enough to get precise time.  If we only need to know currentOffset updated every second or we would be done.    But for syncing of actions to video we need it to be much more precise.</p>

<p>The VideoSystem keeps track of the delta time from the game clock.  The onVideoEvent listener tells the system when the video is playing.  While the video is playing the system can increment its estimatedOffset using the currentOffset provided by the onVideoEvent listener.  We can now keep track of what time in the video we are at with subsecond precision.</p>

<p>Now that we have precision video offset we can make use of a SubtitleSystem.  The system reads in an SRT format and using the known video offset decides which actions to fire.</p>

<h3>Class Diagram</h3>

<pre>classDiagram

ShowManager "1" o-- "1" SubtitleVideoSystem : Manages Video and Subtitle

SubtitleVideoSystem --|> VideoSystem

SubtitleVideoSystem "1" o-- "1" SubtitleSystem

VideoSystem : VideoTexture videoTexture

VideoSystem --o onVideoEvent

ShowManager "1" o--  "1" ShowActionManager : managers actions

ShowActionManager "1" o--  "*" ShowEntity : registers

ShowActionManager "1" o--  "*" ShowActionHandler : registers

RunOfShowSystem o-- ShowManager : Schedules Videos

class ISystem{

<<interface>>

update(dt:number)

}

class onVideoEvent{

add(listener)

}

class RunOfShowSystem{

update(dt:number)

}

class ShowActionManager{

registerShowEntity(name:string,object:any)

registerHandler(action:ShowActionHandler<any>)

processAction(action:string,handler:ShowActionHandler<any>)

runAction(action: string)

}

class ShowEntity{

appear:() => void

hide:() => void

play:() => void

stop:() => void

triggerEvent: (index: number)=>void

}

class ShowActionHandler{

matches(action:string,showActionMgr:ShowActionManager):boolean

execute(action:string,showActionMgr:ShowActionManager):void

getName():string

addOnProcessListener(listener:OnProcessListener<ActionParams<T>>):void

removeOnProcessListener(listener:OnProcessListener<ActionParams<T>>):void

decodeAction(action:string,showActionMgr:ShowActionManager):ActionParams<T>

}

class ShowManager{

pause()

play()

startShow(showData: ShowType)

playVideo(showData: ShowType, offsetSeconds: number)

addVideoStatusChangeListener(listener:VideoChangeStatusListener)

addPlayVideoListeners(callback:(event:PlayShowEvent)=>void)

addStopShowListeners(callback:(event:StopShowEvent)=>void)

enableDebugUI(val:boolean)

}

class SubtitleSystem{

addCueListener(listener:(cue: NodeCue,event:SubtitleCueEvent))

onCueBegin(cue: NodeCue)

}</pre>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Utility to schedule shows as well as synchronize actions with a show</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-crypto-utils

# URL: https://github.com/decentraland/decentraland-crypto-utils

<title>GitHub - decentraland/decentraland-crypto-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-crypto-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>25</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>121</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-crypto-utils</h1>

<p>This library includes a number of helpful pre-built tools that help you deal with common requirements that involve and interacting with data on the blockchain.</p>

<h2>Using the Crypto library</h2>

<p>To use any of the helpers provided by the utils library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm i @dcl/crypto-scene-utils @dcl/ecs-scene-utils eth-connect -B</code>

<p>Note: This command also installs the latest version of the @dcl/ecs-scene-utils and eth-connect libraries, that are dependencies of the crypto utils library</p>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>crypto.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>MANA Operations</h2>

<p>As MANA is Decentraland's main currency, this library provides tools to make it especially easy to use in a scene.</p>

<h3>Send MANA to an address</h3>

<p>To make players in your scene send MANA to a specific address, use the</p>

<code>send()</code>

<p>function. This function requires the following arguments:</p>

<code>toAddress</code>

<li>: What ethereum address to send the MANA to</li>

<code>amount</code>

<li>: How many MANA tokens to send</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requests players to make a MANA payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, paying the required MANA sum plus an ETH gas fee dictated by the market at that time.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Get a player's MANA Balance</h3>

<p>Look up how much MANA a player has in their wallet. This is useful to know in advance if a player will be able to pay a fee or buy something from the Marketplace.</p>

<p>Check the current player's balance with</p>

<code>myBalance()</code>

<p>. This function doesn't require any arguments.</p>

<p>Check the balance of any other wallet with</p>

<code>balance()</code>

<p>. This function just requires the wallet address to check, as a string.</p>

<h2>Other Currencies</h2>

<p>Any currency token that adheres to the ERC20 standard can be handled by this library.</p>

<h3>Send</h3>

<p>To make players in your scene send a currency token to a specific address, use the</p>

<code>send()</code>

<p>function. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be sent</li>

<code>toAddress</code>

<li>: What ethereum address to send the tokens to</li>

<code>amount</code>

<li>: How many tokens to send</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requests players to make a DAI payment to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to pay the fee.</p>

<pre>...</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, paying the required DAI sum plus an ETH gas fee dictated by the market at that time. Once that transaction is accepted on Metamask, the door opens.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Check balance</h3>

<p>Look up how much of a coin a player has in their wallet. This is useful to know in advance if a player will be able to pay a fee or buy something in the scene.</p>

<p>Check the balance of any other wallet with</p>

<code>balance()</code>

<p>. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: Addess of the token's smart contract.</li>

<code>address</code>

<li>: Wallet address that you want to check the balance of.</li>

<h3>Other functions</h3>

<p>Call any functions that are available in a token's contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass the token's address as a parameter.</p>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<h2>NFTs</h2>

<p>Any non-fungible token that adheres to the ERC721 standard can be handled by this library. Other tokens that don't adhere to the standard but that share common methods with it can also have those methods accessed through the functions in this library.</p>

<h3>Transfer an NFT</h3>

<p>To make players in your scene transfer an NFT to a specific address, use the</p>

<code>transfer()</code>

<p>function. This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be sent</li>

<code>toAddress</code>

<li>: What ethereum address to send the tokens to</li>

<code>tokenId</code>

<li>: The id of the specific token to send within the smart contract</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, the function will not be completed till the transaction is mined and added to a block in the blockchain. If false (default value), the function will be completed as soon as the transaction is requested.</li>

<p>For example, your scene can have a button that requires sending any wearable item to the scene cretor's personal wallet. The button opens a door, but only once a transaction is sent to transfer the token.</p>

<pre>...</pre>

<p>In this scenario, when players click on the button, they are prompted by Metamask to accept the transaction, transfering the NFT token plus paying an ETH gas fee dictated by the market at that time. Once that transaction is accepted on Metamask, the door opens.</p>

<p>What's executed after the</p>

<code>.send()</code>

<p>function ( in the</p>

<code>.then()</code>

<p>statement in this case ) only gets called when the function is finished. If</p>

<code>waitConfirm</code>

<p>is false, then the function ends as soon as the transaction is accepted by the player on Metamask. If</p>

<code>waitConfirm</code>

<p>is true, the function doesn't end until the transaction is mined by the blockchain, which could take a couple of minutes, depending on the gas fee paid.</p>

<p>Having</p>

<code>waitConfirm</code>

<p>set to false makes the scene respond faster, but the transaction at this point has no confirmations from the blockchain, so the function is vulnerable to a 0 gas fee exploit. If a player sets the gas price of the transaction to 0, or lower than the market fee, the transaction will never be carried out by the workers in the blockchain, but the player will experience things as if having paid the price. Setting</p>

<code>waitConfirm</code>

<p>to true prevents this risk, but delays the response of the scene.</p>

<h3>Check player for Tokens</h3>

<p>Check if a player holds any specific tokens in their wallet using</p>

<code>checkTokens()</code>

<p>. You can either check for any token that belogs to a given contract (eg: any cryptokitty), or for particular token IDs within that contract (eg: only for cryptokitty number 500 or 501).</p>

<p>This function requires the following arguments:</p>

<code>contractAddress</code>

<li>: The address of the smart contract for the token to be checked</li>

<code>tokenIds</code>

<li>: One or multiple token IDs to check player ownership. This can be a single number, or an array of multiple numbers.</li>

<p>The function returns</p>

<em>true</em>

<p>or</p>

<em>false</em>

<p>depending on if the player's wallet owns any of the indicated tokens.</p>

<h3>Other functions</h3>

<p>Call any functions that are available in a token's contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass the token's address as a parameter.</p>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<h2>Signing Messages</h2>

<p>Request a player to use the private key of their Ethereum wallet to sign a message.</p>

<p>This is a valuable security measure to validate that the player who owns that wallet was truly there, since the signature of a private key can't be forged. Several smart contracts also require passing signed strings as parameters.</p>

<p>Note: The string for the message to sign must start be preceded by</p>

<code>msg:</code>

<p>.</p>

<p>Whenever the</p>

<code>signMessage()</code>

<p>funcition is called, Metamask will open on the player's browser to request to accept signing the message.</p>

<p>The</p>

<code>signMessage()</code>

<p>function returns an object that contains:</p>

<code>message</code>

<li>: The original message that was signed, preceded by the string</li>

<code># DCL Signed messageâµmsg:</code>

<code>signature</code>

<li>: The string generated from encrypting the original message through the player's private key</li>

<h2>Decentraland contracts</h2>

<p>This library includes an enum list of all official Decentraland-released smart contracts, to easily refer to them when using the different functions.</p>

<p>A separate list exists for contracts on</p>

<code>mainnet</code>

<p>,</p>

<code>ropsten</code>

<p>,</p>

<code>kovan</code>

<p>and</p>

<code>rinkeby</code>

<p>networks.</p>

<h2>The Marketplace</h2>

<p>This library exposes several functions that allow players to interact directly with the Decentraland marketplace from inside a scene.</p>

<h3>Buy an item from the marketplace</h3>

<p>A player can buy an item that's on sale on the Decentraland marketplace without leaving a Decentraland scene, using the</p>

<code>executeOrder()</code>

<p>function.</p>

<p>This function takes three arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token being sold. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<code>price</code>

<li>:</li>

<em>number</em>

<li>The price being paid for the item, in MANA. This number is expressed in full MANA units, not in Wei.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The item needs to be currently published on sale in the Decentraland marketplace.</p>

<p>To buy the item, the player must give the Decentraland Marketplace permissions to operate with MANA on their behalf. If the player doesn't have these permissions set, the</p>

<code>executeOrder()</code>

<p>will ask for two transactions: one to set these permissions and one to do buy the item.</p>

<p>TIP: You can check to see if your wallet has these permissions set by going to the</p>

<p>and seeing if this checkbox is checked:</p>

<strong>Authorize the Marketplace contract to operate MANA on your behalf</strong>

<h3>Check the player's authorizations</h3>

<p>Before a player can buy on the Decentraland Marketplace, they need to give the Marketplace contract permissions to operate with MANA on their behalf. Before a player posts a new order to sell an item, they also need to give the Marketplace permissions to handle items of the contract that items belongs to.</p>

<p>If a player tries to run the</p>

<code>executeOrder()</code>

<p>function without the necessary permissions, the function will handle adding those permissions first.</p>

<p>To check if a player has the necessary permissions to buy with the Marketplace and has enough MANA in their balance, use</p>

<code>isAuthorizedAndHasBalance()</code>

<p>. This function requires one field:</p>

<code>price</code>

<li>:</li>

<em>string</em>

<li>How much MANA the player should have in their balance. This number is expressed in full MANA units, not in Wei.</li>

<p>This function returns</p>

<em>true</em>

<p>only if the player has MANA authorized for the Marketplace, and holds enough MANA currently.</p>

<p>To make the player approve MANA for spending in the Marketplace, you can use the</p>

<code>setApproval()</code>

<p>function of the</p>

<code>currency</code>

<p>section of this library, like so:</p>

<p>To check if a player has all of the possible permissions set up for the Marketplace, run the</p>

<code>isAuthorizedAll()</code>

<p>function. This function has one optional parameter</p>

<code>address</code>

<li>:</li>

<em>string</em>

<li>(optional) What player address to check for permissions. If no value is provided, it uses the current player running the scene.</li>

<p>This function returns an object with three main objects,</p>

<code>bidding</code>

<p>,</p>

<code>buying</code>

<p>, and</p>

<code>selling</code>

<p>. Each of these contains a field for each of the available contracts that might have permissions for that purpose, and for each of these contracts, there's an object containing the address and a boolean for the</p>

<code>authorized</code>

<p>status of that contract for that purpose.</p>

<p>Below is an extract of part of what the response looks like:</p>

<code>{

bidding: {

mana: { address: "0x0f5d2fb29fb7d3cfee444a200298f468908cc942", authorized: true}

},

buying: {

mana: { address: "0x0f5d2fb29fb7d3cfee444a200298f468908cc942", authorized: true}

}.

selling: {

communityContest: { address: "0x32b7495895264ac9d0b12d32afd435453458b1c6", authorized: true},

(...)

}

}</code>

<p>If permissions are missing, they can be added with the</p>

<code>setApproval()</code>

<p>function from the</p>

<code>currency</code>

<p>or the</p>

<code>nft</code>

<p>section of the library, depending on the case.</p>

<h3>Sell from a scene</h3>

<p>A player can put an item on sale on the Marketplace from within a Decentraland scene using the</p>

<code>createOrder()</code>

<p>function.</p>

<p>This function takes three arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token to sell. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<code>price</code>

<li>:</li>

<em>number</em>

<li>The price to set for the order, in MANA. This number is expressed in full MANA units, not in Wei.</li>

<code>expireAt</code>

<li>:</li>

<em>number</em>

<li>(optional) When to expire this offer, expressed as milliseconds since January 1, 1970, 00:00:00 UTC. If a value is not set, it defaults to one month from the present time.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The player creating the order needs to own the token being put on sale. The player must also have permissions set to allow the Marketplace contract to operate with this specific token contract. If it's a wearable, the player must have granted permissions for that specific wearable collection.</p>

<h3>Cancel the selling of a token</h3>

<p>A token that's on sale on the Marketplace can be taken off sale from within a scene, by using the</p>

<code>cancelOrder()</code>

<p>function.</p>

<p>This function takes two arguments:</p>

<code>nftAddress</code>

<li>:</li>

<em>string</em>

<li>The address of the smart contract for the token to sell. For example if this is a Decentraland wearable, it would be the address of the collection that the wearable belongs to.</li>

<code>assetId</code>

<li>:</li>

<em>number</em>

<li>The id of the specific token being traded, within its contract.</li>

<p>TIP: If you navigate the Marketplace to a wearable that's on sale, you'll find both the</p>

<code>nftAddress</code>

<p>and</p>

<code>assetId</code>

<p>are part of the URL. For example, in the url</p>

<p>, the</p>

<code>nftAddress</code>

<p>is</p>

<em>0xd35147be6401dcb20811f2104c33de8e97ed6818</em>

<p>and the</p>

<code>assetId</code>

<p>is</p>

<em>28706</em>

<p>. You can obtain all the required data about wearables on sale by querying the Marketplace API.</p>

<p>NOTE: The player cancelling the order needs to be the creator of the order in the Marketplace and own the token being put on sale. The player must also have permissions set to allow the Marketplace contract to operate with this specific token contract. If it's a wearable, the player must have granted permissions for that specific wearable collection.</p>

<h2>Third parties operating tokens</h2>

<p>You can check if a given contract is allowed to handle a given token for a player, and otherwise carry out a transaction to allow it to.</p>

<p>Many smart contracts require to be given explicit permission by a wallet owner to operate with the token on their behalf, especially when the contract has the ability to remove tokens from the owner's balance.</p>

<h3>Currencies</h3>

<p>To check if a contract has permissions to handle a specific currency token for a player, use the</p>

<code>isApproved()</code>

<p>function. This function takes 3 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>owner</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<p>The</p>

<code>isApproved()</code>

<p>function returns a boolean indicating wether permissions are there or not.</p>

<p>To check how much is the maximum allowance that a contract has to handle a specific currency token for a player, use the</p>

<code>allowance()</code>

<p>function. This function takes three arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>owner</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<p>The</p>

<code>allowance()</code>

<p>function returns a string with the number of allowed currency, expressed in wei units.</p>

<p>To grant permissions to a contract to handle a specific currency token for a player, use the</p>

<code>setApproval()</code>

<p>function. This function takes 4 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>spender</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<code>waitConfirm</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If true, resolve promise when the transaction is mined on the blockchain</li>

<code>amount</code>

<li>:</li>

<em>string</em>

<li>(optional) Maximum amount of the currency to allow the spender to spend</li>

<h3>NFTs</h3>

<p>To check if a contract has permissions to handle a specific type of NFT for a player, use the</p>

<code>isApprovedForAll()</code>

<p>function. This function takes 3 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>assetHolder</code>

<li>:</li>

<em>string</em>

<li>Address of the player that is currently holding the token</li>

<code>operator</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to handle the token</li>

<p>The</p>

<code>isApproved()</code>

<p>function returns a boolean indicating wether permissions are there or not.</p>

<p>To grant permissions to a contract to handle a specific NFT for a player, use the</p>

<code>setApprovalForAll()</code>

<p>function. This function takes 4 arguments:</p>

<code>contractAddress</code>

<li>:</li>

<em>string</em>

<li>Address of the token smartcontract to check</li>

<code>operator</code>

<li>:</li>

<em>string</em>

<li>Address of the contract to check for having permissions to spend the token</li>

<code>approved</code>

<li>:</li>

<em>boolean</em>

<li>(optional) If</li>

<em>true</em>

<li>, sets the contract as approved for this NFT, if</li>

<em>false</em>

<li>, it removes these same approvals.</li>

<em>true</em>

<li>by default.</li>

<h2>Call functions from any contract</h2>

<p>Call any functions that are available in any smart contract by instancing a</p>

<code>contract</code>

<p>object. When doing so, you must pass:</p>

<code>contractAdress</code>

<li>: The token's Ethereum smart contract address.</li>

<code>abi</code>

<li>: The ABI definition for the contract, where all of its functions and parameters are listed</li>

<p>The</p>

<code>getContract()</code>

<p>function also returns the</p>

<code>requestManager</code>

<p>object, which you can use to have greater control over the handling of the transaction.</p>

<pre>contract</pre>

<pre>requestManager</pre>

<p>You can obtain the ABI of a contract on etherscan. For example, if you go to the Etherscan page for the</p>

<p>, you can find the ABI by picking the</p>

<em>Contract</em>

<p>tab in the bottom section and then scrolling down. You can export the ABI to JSON, and add that as a file in your scene's project, or paste its contents into a</p>

<em>.ts</em>

<p>file in your scene's project.</p>

<h2>Avatar</h2>

<h3>Get user information</h3>

<p>To get information about an user, use the</p>

<code>getUserInfo()</code>

<p>function.</p>

<code>getUserInfo</code>

<p>has one optional argument:</p>

<code>address</code>

<li>:</li>

<em>string</em>

<li>which is the ETH address of a user</li>

<p>If an address is not specified, the function will use the address of the current user running the scene.</p>

<p>This example retrieves the data of an address and prints the username in console:</p>

<p>The</p>

<code>getUserData()</code>

<p>function returns the following information:</p>

<code>content</code>

<li>: An array containing four objects, each with the path to a different screenshot of the player: a full body image, and three versions of the face in full and in thumbnail resolution.</li>

<code>metdta</code>

<li>: An object that includes:</li>

<code>avatar</code>

<li>: All of the wearables and configurations on the avatar</li>

<code>inventory</code>

<li>: All of the wearables the player owns</li>

<code>ethAddress</code>

<li>:</li>

<em>(string)</em>

<li>The public key of the player's Ethereum wallet. If the player has no linked wallet, this field will be</li>

<code>null</code>

<li>.</li>

<code>name</code>

<li>: The player's user name, as others see in-world</li>

<code>userId</code>

<li>:</li>

<em>(string)</em>

<li>A UUID string that identifies the player. If the player has a public key, this field will have the same value as the public key.

the player's email and bio if present.</li>

<code>timestamp</code>

<li>: A timestamp for the time this data was fetched.</li>

<p>Note: For any Ethereum transactions with the player, always use the</p>

<code>ethAddress</code>

<p>field, instead of the</p>

<code>userId</code>

<p>.</p>

<h3>Get a user's snapshot images</h3>

<p>Use</p>

<code>getPlayerSnapshots()</code>

<p>to fetch a set of URLs for snapshots of the player wearing the current wearables they have on. These snapshots are available in different resolutions, and both of the face and full body.</p>

<p>The response contains the following data:</p>

<code>face</code>

<li>: URL for the full resolution image of the face, with 512x512 pixels</li>

<code>face128</code>

<li>: URL for the face as a 128x128 pixel image</li>

<code>face256</code>

<li>: URL for the face as a 256x256 pixel image</li>

<code>body</code>

<li>: URL for the full resolution image of the face, with 512x1024 pixels</li>

<p>Optionally pass a player id to fetch the snapshots of that player's particular avatar, it will otherwise fetch the snapshots of the player's avatar.</p>

<pre>:</pre>

<p>This example fetches the snapshots from a specific player, then sets that as a texture on a plane.</p>

<h3>Get user inventory</h3>

<p>To fetch the full inventory of wearable items owned by a player, use the</p>

<code>getUserInventory()</code>

<p>function.</p>

<code>getUserInventory</code>

<p>has one optional argument:</p>

<code>address</code>

<li>:</li>

<em>string</em>

<li>which is the ETH address of an user</li>

<p>If an address is not specified, the function will use the address of the current user running the scene.</p>

<p>This example retrieves the inventory of an address and print a list of items in the console:</p>

<p>This function returns an array with the full names of each wearabe, for example:</p>

<code>["dcl://halloween_2019/zombie_suit_mask", "dcl://community_contest/cw_tuxedo_tshirt_upper_body", "dcl://dcl_launch/mana_hoodie_upper_body"]</code>

<h3>Check if a player has an item</h3>

<p>To check if an item is in the inventory of a player, use the</p>

<code>itemInInventory</code>

<p>function.</p>

<code>itemInInventory</code>

<p>has one required and one optional argument:</p>

<code>wearable</code>

<p>:</p>

<em>string</em>

<p>which is the name of a wearable (e.g.:</p>

<code>dcl://dcl_launch/razor_blade_upper_body</code>

<p>)</p>

<code>equiped</code>

<p>:</p>

<em>boolean</em>

<p>(optional) if true, the player must have the item currently equipped (default: false)</p>

<p>This example checks if the player has the</p>

<em>Razor Blade Jacket</em>

<p>wearable equiped. If so, the function returns</p>

<em>true</em>

<p>.</p>

<p>Tip: You can find out the full name of a wearable by using</p>

<code>getListOfWearables()</code>

<p>to get a full list of all wearables supported by Decentraland, with all their information.</p>

<h3>Check if a player has one of several items</h3>

<p>To check if at least one of several items are in the inventory of a player, use the</p>

<code>itemsInInventory</code>

<p>function.</p>

<code>itemsInInventory</code>

<p>has one required and one optional argument:</p>

<code>wearables</code>

<p>:</p>

<em>string[]</em>

<p>An array with the string names of the wearables to look for (e.g.:</p>

<code>["dcl://dcl_launch/razor_blade_upper_body", "dcl://community_contest/cw_tuxedo_tshirt_upper_body"]</code>

<p>).</p>

<code>equiped</code>

<p>:</p>

<em>boolean</em>

<p>(optional) if true, the player must have one of the items currently equipped (default: false).</p>

<p>This example checks if the player has the Razor Blade Jacket equiped or the Tuxedo Shirt. If so, the function returns</p>

<em>true</em>

<p>.</p>

<p>Tip: You can find out the full name of a wearable by using</p>

<code>getListOfWearables()</code>

<p>to get a full list of all wearables supported by Decentraland, with all their information.</p>

<h3>Get the rarity of the player's rarest item</h3>

<p>Use the</p>

<code>rarestItem()</code>

<p>function to find out what's the rarest item that the player owns.</p>

<p>It returns the rarity category as a value from the</p>

<code>rarityLevel</code>

<p>enum.</p>

<code>rarestItem()</code>

<p>has one optional argument:</p>

<code>equiped</code>

<li>:</li>

<em>boolean</em>

<li>(optional) if true, only the items currently equipped are considered.</li>

<p>This example checks what's the rarest item owned and logs the category name.</p>

<p>Tip: To see the name of the rarity category, rather than the index, reference the</p>

<code>rarityLevel</code>

<p>enum, for example</p>

<code>rarityLevel[response]</code>

<p>.</p>

<h3>Get data of all wearables</h3>

<p>To fetch a list of wearables supported by Decentraland, including their full names, categories, contracts, etc, call the</p>

<code>getListOfWearables()</code>

<p>. This function supports the following filters:</p>

<pre>collectionIds:</pre>

<pre>wearableIds:</pre>

<pre>textSearch:</pre>

<pre>:</pre>

<p>This function returns an array of wearables.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/crypto-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>11</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>10</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-crypto-utils

# Change to URL: https://github.com/decentraland/mini-comms

# URL: https://github.com/decentraland/mini-comms

<title>GitHub - decentraland/mini-comms</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/mini-comms</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>51</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Minimum Viable Comms - Reference implementation of RFC-5</h1>

<h2>Getting Started</h2>

<h3>Dependencies</h3>

<li>Node >= v16</li>

<h3>Installation</h3>

<p>Install Node dependencies:</p>

<code>make install</code>

<h3>Usage</h3>

<p>Build and start the project:</p>

<code>make build

make start</code>

<h3>Test</h3>

<p>Run unit and integration tests:</p>

<code>make build

make test</code>

<h3>Environment Variables</h3>

<h4>Server</h4>

<code>HTTP_SERVER_PORT</code>

<li>: (Defaults to 3000)</li>

<code>HTTP_SERVER_HOST</code>

<li>: (Defaults to 0.0.0.0)</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/webgl-ime-input

# URL: https://github.com/decentraland/webgl-ime-input

<title>GitHub - decentraland/webgl-ime-input: IME for Unity WebGL</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>IME for Unity WebGL</p>

<h3>License</h3>

<summary>MIT, Unknown licenses found</summary>

<h3>Licenses found</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/webgl-ime-input</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>108</strong>

<h2>Files</h2>

<button>View code</button>

<h1>WebGLInput</h1>

<p>IME for Unity WebGL ( Support TextMesh Pro from Unity2018.2 )</p>

<p>support âcopy and pasteâ</p>

<p>support "tab" and "shift+tab" change focus to other InputField</p>

<p>support mobile. (Experiment)</p>

<h1>DEMO</h1>

<h1>How to use</h1>

<p>1.open the Unity Package Manager and add this package from git url:</p>

<code>https://github.com/decentraland/webgl-ime-input.git</code>

<p>2.add "WebGLInput" Component to InputField GameObject</p>

<p>3.build and run!!</p>

<p>no need to setting anything.</p>

<h1>insert \t use tab key instead of changing focus</h1>

<p>Add "WEBGLINPUT_TAB" to Scripting Define Symbols.</p>

<p>and check "Enable Tab Text" at WebGLInput.</p>

<h2>About</h2>

<p>IME for Unity WebGL</p>

<h3>Resources</h3>

<h3>License</h3>

<summary>MIT, Unknown licenses found</summary>

<h3>Licenses found</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>95</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/messaging-service

# URL: https://github.com/decentraland/messaging-service

<title>GitHub - decentraland/messaging-service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/messaging-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/common-contracts

# URL: https://github.com/decentraland/common-contracts

<title>GitHub - decentraland/common-contracts: Reusable contracts</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Reusable contracts</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/common-contracts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>15</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Common Contracts</h1>

<p>Abstract contracts to be used and reused on different projects.</p>

<h2>Install</h2>

<code>npm install -D @dcl/common-contracts</code>

<p>Requires Open Zeppelin upgradable contracts v4.5 as a peer dependency.</p>

<code>npm install -D @openzeppelin/contracts-upgradeable@4.5.0</code>

<h2>Usage</h2>

<code>import "@dcl/common-contracts/signatures/NonceVerifiable.sol";</code>

<h2>Contracts</h2>

<h3>NativeMetaTransaction</h3>

<p>Allows a contract to support meta transactions.</p>

<p>What are meta transactions?</p>

<p>They provide a way for users to enjoy "gasless" transactions by just signing the data of the transaction they want to execute and letting a relayer, which is the one that ends up paying the fees, to execute it.</p>

<h3>ContractNonceVerifiable, SignerNonceVerifiable, AssetNonceVerifiable</h3>

<p>Allows signatures to be invalidated on 3 different levels. Contract, Signer and Asset levels.</p>

<p>The contract should be queried for the current nonces on each level and use those nonces to create a signature.</p>

<p>When the signatures are recovered, they have to be verified with these nonces.</p>

<p>They can be updated in order to invalidate signatures that were created with previous values.</p>

<p>They come separated in 3 different contracts for each level but you might choose if you want all or just a couple depending on your requirements.</p>

<h2>Development</h2>

<h3>Requirements</h3>

<li>Node 16</li>

<li>Npm 8</li>

<h3>Install dependencies</h3>

<code>npm ci</code>

<h3>Compile</h3>

<code>npm run compile</code>

<h3>Test</h3>

<code>npm run test</code>

<p>Will report gas usage.</p>

<code>npx run test:coverage</code>

<p>Will report coverage in the</p>

<code>coverage</code>

<p>directory.</p>

<h2>About</h2>

<p>Reusable contracts</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/world

# URL: https://github.com/decentraland/world

<title>GitHub - decentraland/world: ð Components of a DCL world</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Components of a DCL world</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/world</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>103</strong>

<h2>Files</h2>

<button>View code</button>

<h1>World</h1>

<h2>Components</h2>

<li>Communications coordinator</li>

<li>Communications server</li>

<h2>Running</h2>

<p>The easiest way to run a world node is to use the provided docker-compose file. Remeber to set your GOPATH first (export GOPATH=$HOME/go)</p>

<h2>Cli Usage</h2>

<p>You will need to generate a key first (it will represent the browser's local storage)</p>

<code>build/cli_keygen --curve s256 --outputDir ./keys</code>

<p>Start a bot that will walk around the world and send messages:</p>

<code>build/cli_bot --email= --password= --auth0ClientSecret= --keyPath=./keys/client.key</code>

<p>Note:</p>

<p>To be able to use this tool locally if you are using docker-compose you may want to add this to your /etc/hosts:</p>

<code>127.0.0.1 gameauth coordinator</code>

<h2>About</h2>

<p>ð Components of a DCL world</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/content-service

# URL: https://github.com/decentraland/content-service

<title>GitHub - decentraland/content-service: ð¨ IPFS Alternative HTTP Interface</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¨ IPFS Alternative HTTP Interface</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/content-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>16</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>255</strong>

<h2>Files</h2>

<button>View code</button>

<h1>IMPORTANT</h1>

<p>This repository is outdated and has not been used is a while. If you want to see how Decentraland's distributed content network works, check out</p>

<p>.</p>

<h1>Content Service</h1>

<p>The content service is used to store and distribute content in decentraland that's manipulated by land owners</p>

<p>Our vision of a decentralized platform can't rely on a single centralized server storing an only copy of the virtual world's content. The Content Service allows anyone to host their own instance of the server that stores the world data. Today, the Decentraland client fetches content from a single instance of the content server that's maintained by us. In the future, we want the client to fetch data from multiple replicas of the content, this will guarantee its availability and fast download speeds, independently of the location.</p>

<p>The content hosted in each server includes all the files that make up Decentraland scenes, including .ts scripts, 3D models, texture images, audio files and videos. Currently, each server stores the entirety of the data of all of Genesis city. In future releases of the content service, you'll be able to host a server that only holds the data for specific parcels, to ensure that your scene is always available without depending on any third party.</p>

<p>Each file stored in the content server is cryptographically signed by the parcel owner's key, and the contents of the file are processed to generate a unique hash code, using the same algorithm that IPFS uses to generate its CIDs.</p>

<p>The content server has endpoints that you can send requests to, to fetch data and to validate the authenticity of the signatures on each file.</p>

<h2>Technical overview</h2>

<em>Note: As the original idea was distributing the content through ipfs, all content is still identified by the corresponding hash or CID (though support for ipfs is on hold).</em>

<p>Content is organized by scene and queried by parcel. When querying content, the client must ask for all the scenes that at least partially overlap with a given set of parcels, and then all full scenes need to be downloaded.</p>

<p>For uploading, content must be signed by the owner or update operator of the scene, and CIDs must be calculated for every file in the scene.</p>

<p>The upload process may corrupt scenes, so the client is responsible for checking if a given scene is still valid by checking that all parcels that are used by the scene still belong to the scene. This consideration makes working with this API a little bit tricky.</p>

<h2>Requirements</h2>

<p>The following dependencies need to be installed to run a content service server.</p>

<h2>Setup git hooks Environment for development</h2>

<code>$ make init</code>

<h2>Configuration</h2>

<p>To configure the service, edit the</p>

<code>config.yml</code>

<p>file, in the base directory.</p>

<strong>Note</strong>

<p>: If you use</p>

<code>s3Storage</code>

<p>you need to set AWS environment variables:</p>

<code>AWS_REGION</code>

<p>,</p>

<code>AWS_ACCESS_KEY</code>

<p>, and</p>

<code>AWS_SECRET_KEY</code>

<p>.</p>

<h2>Running</h2>

<p>First start Redis:</p>

<code>$ make ops</code>

<p>Then build the project:</p>

<code>$ make build</code>

<p>You can instead build and run with a single command:</p>

<code>$ make run</code>

<code>make run</code>

<p>starts an instance of the content service server.</p>

<p>Alternatively to docker, you can build and run the server with</p>

<code>$ go build .

$ ./content-service</code>

<h2>API Documentation</h2>

<h2>Replication</h2>

<p>To replicate a</p>

<code>content-service</code>

<p>server run:</p>

<code>$ make replicate</code>

<p>You will recieve a prompt to input the map coordinates for the NW and SE parcels.</p>

<p>This program connects to the server url provided in</p>

<code>config.yml</code>

<p>. It stores the data files in the dir specified by</p>

<code>localstorage</code>

<p>and populates the Redis instance defined in the</p>

<code>redis</code>

<p>field.</p>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>ð¨ IPFS Alternative HTTP Interface</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>20</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/gh-action-release

# URL: https://github.com/decentraland/gh-action-release

<title>GitHub - decentraland/gh-action-release</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/gh-action-release</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>10</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>54</strong>

<h2>Files</h2>

<button>View code</button>

<h1>What is it</h1>

<p>gh-action-release is a Github action that does the following:</p>

<li>Get the tag of the latest release</li>

<li>Read the commits from that tag up to</li>

<code>head</code>

<li>Calculate a new tag version depending on the commit messages (which must follow our</li>

<li>)</li>

<li>Create a new release with that tag version, push the new tag, and generate the release notes</li>

<p>only looks for the merged prs when generating the release notes. The changes will be inside your release, though, they will just not appear listed in the release's description.</p>

<h1>Integration</h1>

<p>Include it in a Github workflow like the following:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:

-</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note that this action receives 1 mandatory and 2 optional parameters:</p>

<code>github_token</code>

<li>(mandatory): neccessary for collecting the repository's data.</li>

<code>dry_run</code>

<li>(optional): makes the action to avoid releasing. When set to true, it only prints. Default is set to false.</li>

<code>repository</code>

<li>(optional): needed when the workflow is being triggered by a cron schedule. Not neccessary and not recommended when triggered manually. Use as follows:</li>

<pre>-</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The workflow that calls it also needs</p>

<code>permissions: write-all</code>

<p>to being able to create the release, as it is in the example.</p>

<g-emoji>â ï¸</g-emoji>

<p>In this example we use the</p>

<p>but keep in mind that adding this token will prevent from other workflows to trigger upon this one. So if you need to trigger another workflow upon the creation of the release, you should add this job to that other workflow. Another solution would be using your own personal access token instead of</p>

<code>GITHUB_TOKEN</code>

<p>but we do not like having personal access tokens binded to our repositories due to security and availability reasons.</p>

<h2>How to run</h2>

<p>Once integrated in any branch, go to your repository page in Github. Click on the</p>

<p>, you will see the name of your workflow there and a button that reads</p>

<code>Run workflow</code>

<p>if it is triggered on</p>

<code>workflow_dispatch</code>

<p>like the one in the example above.</p>

<g-emoji>â ï¸</g-emoji>

<strong>THERE MUST BE A FIRST RELEASE TO WORK</strong>

<p>, so for now you will need to make your first release manually</p>

<h3>Naming convention</h3>

<p>Following the</p>

<p>enables us to bump the version automatically. Any commit pushed to</p>

<code>main</code>

<p>that doesn't respect the convention will be ignored when determining the new version number.</p>

<p>We have developed a workflow which</p>

<strong>enforces a pr's title to follow the naming convention</strong>

<p>to use it along with this action. Please refer to our</p>

<p>.</p>

<h1>Contributing</h1>

<h2>How to build</h2>

<p>You'll need to have a reasonably modern version of</p>

<code>node</code>

<p>handy. This won't work with versions older than 9, for instance.</p>

<p>Install the dependencies</p>

<pre>$ npm install</pre>

<p>Build the typescript and package it for distribution</p>

<pre>$ npm run build</pre>

<pre>npm run package</pre>

<h2>Changing the Code</h2>

<p>The core funcionallity is in</p>

<p>Most toolkit and CI/CD operations involve async operations so the action is run in an async function.</p>

<p>The</p>

<p>defines the inputs and output for your action.</p>

<h2>Creating a pull request</h2>

<p>We follow the</p>

<p>for git usage</p>

<li>In case the PR is done using a branch within the service, it should have the semantic prefix.</li>

<li>Before merging into</li>

<code>main</code>

<li>make sure the squash commit has the correct semantic type prefix.</li>

<p>Adopting this convention helps us keep the commit history tidy and easier to understand, but also makes it easier to write automated tools like this one on top.</p>

<p>Check the Automatic version bumping guide to know how your pull request's title should be.</p>

<h1>Releasing</h1>

<p>This action uses itself to do its own releases! Start a release by running the</p>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/social-service-api-specs

# URL: https://github.com/decentraland/social-service-api-specs

<title>GitHub - decentraland/social-service-api-specs: API definition for the Social Server implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>API definition for the Social Server implementation</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/social-service-api-specs</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Social Service API Definition</h1>

<p>API definition for the Social Service implementation.</p>

<p>Check out the public API docs</p>

<h2>Working on the Social Service API Definition</h2>

<h3>Install</h3>

<li>Install</li>

<li>.</li>

<li>Clone this repo and run</li>

<code>npm install</code>

<li>in the repo root.</li>

<h3>Usage</h3>

<code>npm start</code>

<p>Starts the reference docs preview server.</p>

<code>npm run build</code>

<p>Bundles the definition to the dist folder.</p>

<code>npm test</code>

<p>Validates the definition.</p>

<h2>Readocly</h2>

<p>This repository uses</p>

<p>to generate API reference documentation</p>

<p>The</p>

<code>.redocly.yaml</code>

<p>controls settings for various

tools including the lint tool and the reference

docs engine.  Open it to find examples and</p>

<p>for more information.</p>

<h2>How to Contribute</h2>

<p>To add an endpoint, you need to:</p>

<li>List the path in the openapi/paths directory at</li>

<li>.</li>

<li>Reference it in the social.yaml file at</li>

<li>.</li>

<li>Define it in the friends (*) schema in the components directory at</li>

<li>.</li>

<li>Add an example in the friends (*) examples directory at</li>

<li>.</li>

<p>Note: You may need to create new folders that align with your contribution.</p>

<h2>About</h2>

<p>API definition for the Social Server implementation</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk-ws

# URL: https://github.com/decentraland/sdk-ws

<title>GitHub - decentraland/sdk-ws: websocket crdt sync server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>websocket crdt sync server</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-ws</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>CRDT Websocket Server.</h1>

<h2>About</h2>

<p>websocket crdt sync server</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/crdt-scene

# URL: https://github.com/decentraland/crdt-scene

<title>GitHub - decentraland/crdt-scene: test scene for CRDT protocol</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>test scene for CRDT protocol</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/crdt-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>test scene for CRDT protocol</p>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/snapshot-server

# URL: https://github.com/decentraland/snapshot-server

<title>GitHub - decentraland/snapshot-server: A server that can generate a image of the face or the full body of an avatar</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A server that can generate a image of the face or the full body of an avatar</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/snapshot-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<p>A server that can generate a image of the face or the full body of an avatar</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/synapse-identity-server

# URL: https://github.com/decentraland/synapse-identity-server

<title>GitHub - decentraland/synapse-identity-server: Synapse authentication server for testing</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Synapse authentication server for testing</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/synapse-identity-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<p>Synapse authentication server for testing</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dao-apps

# URL: https://github.com/decentraland/dao-apps

<title>GitHub - decentraland/dao-apps: Aragon apps for Decentraland DAO</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Aragon apps for Decentraland DAO</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dao-apps</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>35</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>63</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Aragon apps for Decentraland DAO</p>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>17</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-server

# URL: https://github.com/decentraland/decentraland-server

<title>GitHub - decentraland/decentraland-server: Set of common functionality accross Decentraland projects servers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Set of common functionality accross Decentraland projects servers</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>21</strong>

<strong>36</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>50</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Server</h1>

<p>Set of common functionality accross Decentraland servers.

You can install it using npm by running:</p>

<pre>npm install --save decentraland-server</pre>

<h3>Scripts</h3>

<strong>build</strong>

<p>Build the lib for use</p>

<strong>lint</strong>

<p>Lint js files with</p>

<code>tslint</code>

<strong>docs</strong>

<p>Builds an static page with the JSDoc documentation</p>

<strong>test</strong>

<p>Run tests using mocha and chai</p>

<h3>Release</h3>

<p>We use</p>

<p>to automate the release process of this package. Every time we merge to</p>

<code>master</code>

<p>, the CI will run</p>

<code>semantic-release</code>

<p>and it will publish a new version of the package. It will determine the next version of the package and it will generate release notes from the commit messages. That's why we enforce the following format for commit messages:</p>

<code>type: message</code>

<p>or</p>

<code>type(scope): messages</code>

<p>for example</p>

<code>feature(Map): added zoom levels</code>

<p>We use</p>

<p>and</p>

<p>to enforce this format on every commit.</p>

<h3>Continuous Deployment</h3>

<p>If you have decentraland-server as a dependency and you're deploying to a Linux system, you might run into an error like this one:</p>

<p>.</p>

<p>The error comes from the installation of</p>

<code>node-hid</code>

<p>, you need to have</p>

<code>libusb</code>

<p>available for it to work, and it's not present in all Linux systems.</p>

<p>You can see an example of a fix in this repos</p>

<code>config.yml</code>

<p>file.</p>

<code>node-hid</code>

<p>is a dependency of</p>

<code>ledgerco</code>

<p>, which in turn is a dependency of</p>

<code>ledger-wallet-provider</code>

<p>, used by this lib.</p>

<h2>About</h2>

<p>Set of common functionality accross Decentraland projects servers</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>20</strong>

<h3>Forks</h3>

<strong>11</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/marketplace-adapter

# URL: https://github.com/decentraland/marketplace-adapter

<title>GitHub - decentraland/marketplace-adapter: Third-party Marketplace Adapter Smart Contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Third-party Marketplace Adapter Smart Contract</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/marketplace-adapter</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>66</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland marketplace-adapter</h1>

<p>Adapter and fee collector contracts for 3rd parties NFTs marketplaces</p>

<h2>Compile</h2>

<p>npx oz compile --solc-version=0.6.8 --optimizer on</p>

<h2>Tests</h2>

<p>npm run test</p>

<h2>Deployment</h2>

<h3>Deploy converters</h3>

<p>oz deploy KyberConverter

oz deploy UniswapV2Converter</p>

<code>? Pick a network infura_ropsten

? _uniswapV2Router: address: 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D</code>

<h3>Deploy MarketFeesCollector</h3>

<p>oz deploy MarketFeesCollector</p>

<code>? Pick a network infura_ropsten

? _converter: 0x5d06D8FE0b791e896801ABc0cc7297F232aD7777

? _reserveToken: 0x2a8fd99c19271f4f04b1b7b9c4f7cf264b626edb</code>

<h2>Deploy BuyAdapter</h2>

<p>oz deploy BuyAdapter</p>

<code>? Pick a network infura_ropsten

? _converter: address: 0x5d06D8FE0b791e896801ABc0cc7297F232aD7777

? _collector: address: 0x5DC888024cB599CfDdb9E6483ED6bAe1fA9e9D18

? _adapderFee: uint256: 10000</code>

<h2>Deployed Ropsten addresses</h2>

<h3>Converters</h3>

<code>KyberConverter: 0x234f6ba3de0494d043e23b5bfb3663366d86272d

UniswapConverter: 0x2782eb28Dcb1eF4E7632273cd4e347e130Ce4646</code>

<h3>MarketFeesCollector</h3>

<code>- Using Kyber: 0xd68db540463ed271302ab19072e26589c9e9d4a1

- Using Uniswap: 0x5DC888024cB599CfDdb9E6483ED6bAe1fA9e9D18</code>

<h3>BuyAdapter:</h3>

<code>- Using Kyber: 0x61fE4a720E177FA01bCa31DDD9CDbD5D5cf7C2ee

- Using Uniswap: 0x8512Fc051B3f8A3A5043F93278DEFe1389E2668C</code>

<h2>About</h2>

<p>Third-party Marketplace Adapter Smart Contract</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-marketplace-adapter

# Change to URL: https://github.com/decentraland/Unity3D-NSubstitute

# URL: https://github.com/decentraland/Unity3D-NSubstitute

<title>GitHub - decentraland/Unity3D-NSubstitute: NSubstitute is designed as a friendly substitute for .NET mocking libraries.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>NSubstitute is designed as a friendly substitute for .NET mocking libraries.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/Unity3D-NSubstitute</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NSubstitute</h1>

<p>Visit the</p>

<p>for more information.</p>

<h2>What is it?</h2>

<p>NSubstitute is designed as a friendly substitute for .NET mocking libraries.</p>

<p>It is an attempt to satisfy our craving for a mocking library with a succinct syntax that helps us keep the focus on the intention of our tests, rather than on the configuration of our test doubles. We've tried to make the most frequently required operations obvious and easy to use, keeping less usual scenarios discoverable and accessible, and all the while maintaining as much natural language as possible.</p>

<p>Perfect for those new to testing, and for others who would just like to to get their tests written with less noise and fewer lambdas.</p>

<li>The package is available on the</li>

<li>. You can install it via</li>

<li>.</li>

<code>openupm add net.tnrd.nsubstitute</code>

<li>You can also install via git url by adding these entries in your</li>

<strong>manifest.json</strong>

<pre>:</pre>

<h2>Getting help</h2>

<p>If you have questions, feature requests or feedback on NSubstitute please</p>

<p>on our project site. All questions are welcome via our project site, but for "how-to"-style questions you can also try</p>

<p>, which often leads to very good answers from the larger programming community. StackOverflow is especially useful if your question also relates to other libraries that our team may not be as familiar with (e.g. NSubstitute with Entity Framework). You can also head on over to the</p>

<p>if you prefer.</p>

<h2>Unity setup</h2>

<p>This project has been tested with Unity</p>

<strong>2019.1.0f2</strong>

<p>and</p>

<strong>2019.4.1f1</strong>

<p>. The setup is slightly different among Unity versions.</p>

<p>The code you want to use for Unit Tests are required to be accompanied by an Assembly Definition. If you are unfamiliar with how to set these up please follow the</p>

<p>.

Please make sure you are familiar with the</p>

<strong>Unity Test Framework</strong>

<p>. The manual is available</p>

<p>.</p>

<strong>Note</strong>

<p>: Not applicable to Unity 2019.1.0f2 (and maybe some versions before 2019.4.1f1)</p>

<p>You need to make sure that reference (in no particular order) the following assembly references:</p>

<li>Castle.Core.dll</li>

<li>NSubstitute.dll</li>

<li>System.Threading.Tasks.Extensions.dll</li>

<p>Your assembly references overview should look somewhat like this.</p>

<p>After you've applied the settings you should be good to go to use NSubstitute within your Unit Tests.</p>

<h2>Basic use</h2>

<p>Let's say we have a basic calculator interface:</p>

<p>We can ask NSubstitute to create a substitute instance for this type. We could ask for a stub, mock, fake, spy, test double etc., but why bother when we just want to substitute an instance we have some control over?</p>

<pre>Substitute</pre>

<g-emoji>â ï¸</g-emoji>

<strong>Note</strong>

<p>: NSubstitute will only work properly with interfaces or with</p>

<code>virtual</code>

<p>members of classes. Be careful substituting for classes with non-virtual members. See</p>

<p>for more information.</p>

<p>Now we can tell our substitute to return a value for a call:</p>

<pre>_calculator</pre>

<pre>Assert</pre>

<pre>_calculator</pre>

<pre>Is</pre>

<p>We can check that our substitute received a call, and did not receive others:</p>

<pre>_calculator</pre>

<pre>_calculator</pre>

<pre>_calculator</pre>

<p>If our Received() assertion fails, NSubstitute tries to give us some help as to what the problem might be:</p>

<code>NSubstitute.Exceptions.ReceivedCallsException : Expected to receive a call matching:

Add(1, 2)

Actually received no matching calls.

Received 2 non-matching calls (non-matching arguments indicated with '*' characters):

Add(1, *5*)

Add(*4*, *7*)</code>

<p>We can also work with properties using the Returns syntax we use for methods, or just stick with plain old property setters (for read/write properties):</p>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Assert</pre>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Is</pre>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Assert</pre>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Is</pre>

<p>NSubstitute supports argument matching for setting return values and asserting a call was received:</p>

<pre>_calculator</pre>

<pre>_calculator</pre>

<pre>Arg</pre>

<pre>_calculator</pre>

<pre>Arg</pre>

<p>We can use argument matching as well as passing a function to Returns() to get some more behaviour out of our substitute (possibly too much, but that's your call):</p>

<pre>_calculator</pre>

<pre>Arg</pre>

<pre>Arg</pre>

<pre>Assert</pre>

<pre>_calculator</pre>

<pre>Is</pre>

<p>Returns() can also be called with multiple arguments to set up a sequence of return values.</p>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Assert</pre>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Is</pre>

<pre>Assert</pre>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Is</pre>

<pre>Assert</pre>

<pre>_calculator</pre>

<pre>Mode</pre>

<pre>Is</pre>

<p>Finally, we can raise events on our substitutes (unfortunately C# dramatically restricts the extent to which this syntax can be cleaned up):</p>

<pre>_calculator</pre>

<pre>PoweringUp</pre>

<pre>_calculator</pre>

<pre>PoweringUp</pre>

<pre>Raise</pre>

<pre>Assert</pre>

<pre>eventWasRaised</pre>

<h2>Other libraries you may be interested in</h2>

<li>: the original Arrange-Act-Assert mocking library for .NET, and a big source of inspiration for NSubstitute.</li>

<li>: another modern mocking library for .NET. If you're not sold on NSubstitute's syntax, try FIE!</li>

<li>: a mocking library for TypeScript inspired by NSubstitute's syntax (</li>

<code>@fluffy-spoon/substitute</code>

<li>on NPM)</li>

<h2>Support</h2>

<p>Unfortunately I have not seen any source to support the Nsubstitute team by means of donating. Please spread your love at the original repository located here:</p>

<p>If you want to support my work you are in no way obliged to, but it is very much appreciated. You can support me by donating through the button below.</p>

<h2>About</h2>

<p>NSubstitute is designed as a friendly substitute for .NET mocking libraries.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>20</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/roads

# URL: https://github.com/decentraland/roads

<title>GitHub - decentraland/roads: ð£ Script to help deploy Decentraland's road parcels</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð£ Script to help deploy Decentraland's road parcels</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/roads</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>ð£ Script to help deploy Decentraland's road parcels</p>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/kernel

# URL: https://github.com/decentraland/kernel

<title>GitHub - decentraland/kernel: Kernel is the glue code between the OS, comms and the Renderer of Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Kernel is the glue code between the OS, comms and the Renderer of Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/kernel</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>20</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>511</strong>

<h2>Files</h2>

<button>View code</button>

<h1>IMPORTANT! This repository is no longer maintained. Migrated to unity-renderer</h1>

<p>This repository was merged to the unity-renderer repository on the following path:</p>

<h1>Decentraland Explorer</h1>

<p>This is the</p>

<p>official repository.</p>

<p>This repository covers mainly the Kernel component of the explorer product.</p>

<p>Kernel component responsibility includes running the SDK scenes, handling back-end business logic and more. This said, you can clone this repo and run the browser version of Explorer. If you want to contribute to our renderer, please check out the unity-renderer repo:</p>

<p>. Unity-renderer repo outputs a npm package that's used on this one for publishing the Explorer.</p>

<h2>Before you start</h2>

<h1>Running the Explorer</h1>

<strong>IMPORTANT:</strong>

<p>If your path has spaces the build process will fail. Make sure to clone this repo in a properly named path.</p>

<h2>Manually (Mac/Linux)</h2>

<p>Make sure you have the following dependencies:</p>

<li>Latest version of GNU make, install it using</li>

<code>brew install make</code>

<li>Node v10 or compatible installed via</li>

<code>sudo apt install nodejs</code>

<li>or</li>

<h3>With Docker (Windows/Mac/Linux) (Recommended)</h3>

<li>Install docker (</li>

<li>)</li>

<li>Navigate to project root and run:</li>

<code>docker compose up</code>

<p>When all the dependencies are in place, you can start building the project.</p>

<p>First off, we need the npm package dependencies. In most of the cases this should be done only once:</p>

<code>npm install</code>

<p>By now, you can run and watch a server with the kernel build by typing:</p>

<code>make watch</code>

<p>The make process will take a while. When its finished, you can start debugging the browser's explorer by going to</p>

<h3>Update local renderer build version</h3>

<p>The unity build used when accessing through localhost can be changed with several commands:</p>

<code>make update-renderer</code>

<li>downloads the renderer build for the master branch and installs it, overwriting the previous build.</li>

<p>Keep in mind that a</p>

<code>make watch</code>

<p>should be run and keep the server up before updating the local build, otherwise it will be replaced by the</p>

<code>make watch</code>

<p>command.</p>

<h3>Run kernel tests</h3>

<p>To see test logs/errors directly in the browser, run:</p>

<code>make watch</code>

<p>Now, navigate to</p>

<h3>Troubleshooting</h3>

<h4>Missing xcrun (macOS)</h4>

<p>If you get the "missing xcrun" error when trying to run the</p>

<code>make watch</code>

<p>command, you should download the latest command line tools for macOS, either by downloading them from</p>

<p>or by re-installing XCode</p>

<h2>Testing your branch using automated builds</h2>

<p>When any commit is pushed to a branch on the server, a build is generated and deployed to:</p>

<code>https://play.decentraland.zone/branch/<branch-name>/index.html</code>

<p>If the CI succeeds, you can browse to the generated link and test your changes. Bear in mind that any push will kick the CI, and there's no need to create a pull request.</p>

<h2>Technical how-to guides and explainers</h2>

<p>For more advanced topics, don't forget to check out our</p>

<p>(ADR) repository.</p>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Kernel is the glue code between the OS, comms and the Renderer of Decentraland</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>21</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>24</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-explorer

# Change to URL: https://github.com/orgs/decentraland/repositories?page=9

# URL: https://github.com/orgs/decentraland/repositories?page=9

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Helper functions to create sprites using Decentraland's SDK</p>

<p>Decentraland ecs types.</p>

<p>RPC Services Generation for Rust</p>

<p>Desktop client for Decentraland, coming soon</p>

<p>Code generation tool for gRPC-like using decentraland/rpc</p>

<p>Sagas to handle voice webRTC SFU</p>

<p>ð° Faucet for all things related to Decentraland</p>

<p>ð What is Decentraland?</p>

<p>Advanced DXTc texture compression and transcoding library</p>

<p>â° Contract for LAND</p>

<p>Third Party Registry Subgraph</p>

<p>ð JavaScript client for the auth-service</p>

<p>ð  Experiment Tracking Tool (A/B Testing)</p>

<p>LocalStorage engine for redux-persistence</p>

<p>ð Persistence layer for redux with flexible backends</p>

<p>DEPRECATED - Ethereum common helpers for Decentraland</p>

<p>â Programmatically write DCL scenes</p>

<p>Review of community proposals for Decentraland's art and applications</p>

<p>ð  Set of common functionality across Decentraland projects.</p>

<p>ðï¸ Decentraland's LAND Marketplace</p>

<em>9</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/livekit-adapter

# URL: https://github.com/decentraland/livekit-adapter

<title>GitHub - decentraland/livekit-adapter</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/livekit-adapter</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-sprites

# URL: https://github.com/decentraland/dcl-sprites

<title>GitHub - decentraland/dcl-sprites: Helper functions to create sprites using Decentraland's SDK</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Helper functions to create sprites using Decentraland's SDK</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-sprites</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Sprite Helpers</h1>

<p>A tiny library that contains helpers for creating and animating sprites using Decentraland's SDK.</p>

<p>This project includes:</p>

<code>createAtlas()</code>

<li>: Generates a sprite based on frames from a texture atlas (meant for UIs)</li>

<code>createSpriteSheet()</code>

<li>: Generates frames from a sprite sheet (meant for animations)</li>

<h2>Getting started</h2>

<p>Install the dependency on your scene's folder by running the following code:</p>

<code>npm i --save dcl-sprites</code>

<p>In your scene's</p>

<code>.tsx</code>

<p>file, import the library:</p>

<code>import { createSpriteSheet, createAtlas } from 'dcl-sprites'</code>

<p>Define a basic material to be used by the sprites:</p>

<p>Basic materials are not affected by light and allow you to change the texture sampling to render pixelart-like textures.</p>

<h2>Use an image atlas</h2>

<p>Texture atlas files contain a series of assorted images of varying sizes and positioning. This library allows you to select a specific rectangular area of the atlas file and apply it as a texture.</p>

<p>Call the</p>

<code>createAtlas()</code>

<p>function to define a custom entity class that uses textures from this atlas. The entity you define through this function will be based on the</p>

<em>plane</em>

<p>entity, but with an added</p>

<code>frame</code>

<p>property to specify which area of the texture to use.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>createAtlas()</code>

<p>function takes the following arguments:</p>

<code>material</code>

<li>: A reference to a material entity. This material should use the texture atlas image file as its texture.</li>

<code>textureSize</code>

<li>: The dimensions (in pixels) of the texture atlas image file.</li>

<code>frames</code>

<li>: A comma-separated list of all the frames to extract from the atlas. Each frame must have a name, x & y coordinates, width and height.</li>

<p>Once the custom class is defined, you can add a new entity of this class to your scene. This entity must include a</p>

<code>frame</code>

<p>property to specify which frame to use out of the ones defined for the class.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: The custom class name must start with an upper case to be recognized by the SDK as a class.</p>

<h2>Image atlas example</h2>

<p>The following example uses a texture atlas to display several individual icons in a scene.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Use a sprite sheet</h2>

<p>Sprite sheet files contain a series of images that are evenly sized and spaced, each of these is meant to be used as a frame in an animation. This library allows you to specify the size of the frames and automatically generates a series of uv mappings that apply each frame as a texture.</p>

<p>Call the</p>

<code>createSpriteSheet()</code>

<p>function to define a custom entity class that uses textures from this sprite sheet. The entity you define through this function will be based on the</p>

<em>plane</em>

<p>entity, but with an added</p>

<code>frame</code>

<p>property to specify which area of the texture to use.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The function takes the following arguments:</p>

<code>material</code>

<li>: A reference to a material entity. This material should use the sprite sheet image file as its texture.</li>

<code>textureSize</code>

<li>: The dimensions (in pixels) of the sprite sheet image file.</li>

<code>cellSize</code>

<li>: The dimensions (in pixels) of each frame. All frames are assumed to be the same size and arranged with no paddings or margins.</li>

<p>Once the custom class is defined, you can add a new entity of this class to your scene. This entity must include a</p>

<code>frame</code>

<p>property to specify which frame to use. Frames will have names that are automatically generated based on the frame number, for example</p>

<code>frame0</code>

<p>or</p>

<code>frame15</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: The custom class name must start with an upper case to be recognized by the SDK as a class.</p>

<h2>Sprite sheet example</h2>

<p>The following example uses a sprite sheet to display frames from a sprite sheet.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The example below takes this a step forward and animates the sprite by determining what frame to use based on a variable on the scene state. It uses a</p>

<code>setInterval()</code>

<p>to change this variable at a regular interval.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<p>Helper functions to create sprites using Decentraland's SDK</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>22</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-sprite-helpers

# Change to URL: https://github.com/decentraland/vr-client

# URL: https://github.com/decentraland/vr-client

<title>GitHub - decentraland/vr-client</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/vr-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>vr-client</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>8</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ecs-types

# URL: https://github.com/decentraland/ecs-types

<title>GitHub - decentraland/ecs-types: Decentraland ecs types.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland ecs types.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ecs-types</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>base-component</h1>

<h2>About</h2>

<p>Decentraland ecs types.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-social-client

# URL: https://github.com/decentraland/unity-social-client

<title>GitHub - decentraland/unity-social-client</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-social-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/protoc-gen-rust

# URL: https://github.com/decentraland/protoc-gen-rust

<title>GitHub - decentraland/protoc-gen-rust: RPC Services Generation for Rust</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>RPC Services Generation for Rust</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/protoc-gen-rust</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>base-ts-project</h1>

<p>Use this project as template for TypeScript libraries</p>

<h2>About</h2>

<p>RPC Services Generation for Rust</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer-desktop

# URL: https://github.com/decentraland/explorer-desktop

<title>GitHub - decentraland/explorer-desktop: Desktop client for Decentraland, coming soon</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Desktop client for Decentraland, coming soon</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-desktop</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>40</strong>

<strong>377</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>240</strong>

<h2>Files</h2>

<button>View code</button>

<g-emoji>â ï¸</g-emoji>

<g-emoji>â ï¸</g-emoji>

<g-emoji>â ï¸</g-emoji>

<h1>Deprecated</h1>

<g-emoji>â ï¸</g-emoji>

<g-emoji>â ï¸</g-emoji>

<g-emoji>â ï¸</g-emoji>

<h1>ï¸</h1>

<p>This repo is archived and deprecated, all its content has been ported to</p>

<p>under</p>

<code>Assets/Desktop</code>

<p>.</p>

<h1>Decentraland Explorer Desktop</h1>

<p>This repository contains the project to compile</p>

<p>to Windows/Mac/Linux and distribute it with the</p>

<p>.</p>

<h2>Before you start</h2>

<h1>Running the explorer in desktop</h1>

<h2>Debug using remote Unity Renderer</h2>

<p>Take this path if you</p>

<strong>are not going</strong>

<p>to change</p>

<p>continuously.</p>

<p>When we clone this repo, we're going to use the code inside the</p>

<p>, and the version will depend on what version we locked.</p>

<p>To update the Unity Renderer version, you can use:</p>

<code>npx @dcl/opscli@next update-renderer-upm --branch <branch></code>

<strong>The repository must always have</strong>

<code>master</code>

<strong>reference to unity-renderer. Only the commit hash may change.</strong>

<h2>Debug using local Unity Renderer</h2>

<p>Take this path if you</p>

<strong>are going</strong>

<p>to change</p>

<p>continuously.</p>

<h3>Using the script</h3>

<p>To update the Unity Renderer version locally, you can use:</p>

<code>npx @dcl/opscli@next update-renderer-upm --path <unity-renderer-path></code>

<h3>Manually</h3>

<p>You need to change the manifest.json in</p>

<code>explorer-desktop/unity-renderer-desktop/Packages/manifest.json</code>

<p>.</p>

<p>Inside it, you need to change the remote path of the package for the absolute path of the local one.</p>

<code>{

"dependencies": {

"com.coffee.git-dependency-resolver": "https://github.com/mob-sakai/GitDependencyResolverForUnity.git",

"com.decentraland.unity-renderer": "file:/unity-renderer/unity-renderer/Assets"

}

}</code>

<p>Please change "</p>

<code>file:/unity-renderer/unity-renderer/Assets</code>

<p>" to the corresponding location (absolute path).</p>

<p>After these steps, you can open</p>

<strong>Unity Renderer</strong>

<p>and</p>

<strong>Unity Renderer Desktop</strong>

<p>project at the same time, and the changes in</p>

<strong>Unity Renderer</strong>

<p>project will be reflected in the</p>

<strong>Unity Renderer Desktop</strong>

<p>immediately.</p>

<h2>Downloading artifacts to test</h2>

<h3>Windows:</h3>

<p>Execute the following commands in</p>

<code>Windows PowerShell</code>

<pre>curl -o unity-renderer-windows.zip https://renderer-artifacts.decentraland.org/desktop/main/unity-renderer-windows.zip</pre>

<pre>Expand-Archive -Path unity-renderer-windows.zip -DestinationPath unity-renderer-windows -Force</pre>

<h3>Mac:</h3>

<p>Execute the following commands:</p>

<pre>curl -o unity-renderer-mac.zip https://renderer-artifacts.decentraland.org/desktop/main/unity-renderer-mac.zip</pre>

<pre>unzip unity-renderer-mac.zip -d unity-renderer-mac</pre>

<h3>Linux:</h3>

<p>Execute the following commands:</p>

<code># Download

curl -o unity-renderer-linux.zip https://renderer-artifacts.decentraland.org/desktop/main/unity-renderer-linux.zip

# Unzip

unzip unity-renderer-linux.zip -d unity-renderer-linux</code>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Desktop client for Decentraland, coming soon</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>36</strong>

<h3>Watchers</h3>

<strong>7</strong>

<h3>Forks</h3>

<strong>22</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-explorer-desktop

# Change to URL: https://github.com/decentraland/protoc-gen-dcl

# URL: https://github.com/decentraland/protoc-gen-dcl

<title>GitHub - decentraland/protoc-gen-dcl: Code generation tool for gRPC-like using decentraland/rpc</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Code generation tool for gRPC-like using decentraland/rpc</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/protoc-gen-dcl</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>protoc-gen-dcl</h1>

<pre>protoc \

-I=</pre>

<pre>/protos \

--js_out=import_style=commonjs,binary:</pre>

<pre>/protos \

--dcl_out=</pre>

<pre>/protos \</pre>

<pre>/protos/index.proto</pre>

<h2>About</h2>

<p>Code generation tool for gRPC-like using decentraland/rpc</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-ui-utils

# URL: https://github.com/decentraland/decentraland-ui-utils

<title>GitHub - decentraland/decentraland-ui-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-ui-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>45</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>112</strong>

<h2>Files</h2>

<button>View code</button>

<h1>UI-library</h1>

<p>A collection of tools for common UI requirements for Decentraland scenes.</p>

<p>To use any of the helpers provided by the UI utils library:</p>

<li>Install the library as an npm package. Run this command in your scene's project folder:</li>

<code>npm i @dcl/ui-scene-utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>ui</code>

<li>. and let the suggestions of your IDE show the available helpers.</li>

<h2>Text Announcement</h2>

<p>To display a text announcement on the center of the screen for a specified amount of time, use the</p>

<code>displayAnnouncement</code>

<p>function.</p>

<p>This function can take the following parameters:</p>

<code>value</code>

<li>: String to display</li>

<code>duration</code>

<li>: Time to keep the text visible (in seconds). Default: 3 seconds. If set to -1, the announcement will remain on screen till it's hidden.</li>

<code>color</code>

<li>: Text color, as a</li>

<em>Color4</em>

<li>, default: yellow.</li>

<code>size</code>

<li>: Font size, default: 50</li>

<code>bordersOff</code>

<li>: The text has a thin black margin unless this field is set to</li>

<em>true</em>

<li>.</li>

<p>To hide any open announcements, you can call</p>

<code>hideAnnouncements()</code>

<p>.</p>

<h2>Counter</h2>

<p>To display a number on a corner of the screen that can be easily updated, you can create a</p>

<code>Counter</code>

<p>.</p>

<p>When instancing a new counter you can pass the following parameters:</p>

<code>value</code>

<li>: Starting value</li>

<code>xOffset</code>

<li>: Offset on X away from the bottom-left corner</li>

<code>yOffset</code>

<li>: Offset on Y away from the bottom-left corner</li>

<code>color</code>

<li>: Text color, white by default</li>

<code>size</code>

<li>: Text size, 25 by default</li>

<code>bordersOff</code>

<li>: The text has a thin black margin unless this field is set to</li>

<em>true</em>

<li>.</li>

<p>Once a</p>

<code>UICounter</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read</code>

<li>: Returns the current value of the counter</li>

<code>increase</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 1.</li>

<code>decrease</code>

<li>: Decreases the number by a given amount. If no parameters are passed, it lowers the value by 1.</li>

<code>set</code>

<li>: Sets the number to a given amount, no matter what the previous value was.</li>

<h2>Corner Labels</h2>

<p>To display text on the bottom-left corner of the screen, you can create a</p>

<code>CornerLabel</code>

<p>.</p>

<p>When instancing a new corner label you can pass the following parameters:</p>

<code>value</code>

<li>: Text to show.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the bottom-right corner.</li>

<code>color</code>

<li>: Text color, white by default</li>

<code>size</code>

<li>: Text size, 25 by default</li>

<code>bordersOff</code>

<li>: The text has a thin black margin unless this field is set to</li>

<em>true</em>

<li>.</li>

<h2>Bar</h2>

<p>To display a bar that can be updated to increase or shorten in length, similar to a typical health bar in games, you can create a</p>

<code>UIBar</code>

<p>.</p>

<p>When instancing a new bar you can pass the following parameters:</p>

<code>value</code>

<li>: Starting value of the bar, from 0 to 1. With 1 the bar is full, with 0 it's empty.</li>

<code>xOffset</code>

<li>: Offset on X away from the bottom-left corner.</li>

<code>yOffset</code>

<li>: Offset on Y away from the bottom-left corner.</li>

<code>fillColor</code>

<li>: Color of the bar filling, red by default.</li>

<code>style</code>

<li>: Margin style of the bar, from a list of different predetermined options in different colors and shapes. It takes a value from the</li>

<code>BarStyles</code>

<li>enum.</li>

<code>scale</code>

<li>: Multiplier to alter the size of the bar proportionally. A scale of 1 = 128 x 32 pixels.</li>

<p>Once a</p>

<code>UIBar</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read</code>

<li>: Returns the current value of the counter.</li>

<code>increase</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 0.1.</li>

<code>decrease</code>

<li>: Secreases the number by a given amount. If no parameters are passed, it lowers the value by 0.1.</li>

<code>set</code>

<li>: Sets the bar to a given value, no matter what the previous value was.</li>

<h2>Corner Icons</h2>

<p>To display an icon of on the bottom-left corner of the screen you can create one of the following:</p>

<code>SmallIcon</code>

<li>: by default 32x32 pixels in size.</li>

<code>MediumIcon</code>

<li>: by default 64x64 pixels in size.</li>

<code>LargeIcon</code>

<li>: by default 128x128 pixels in size.</li>

<p>When instancing a new icon you can pass the following parameters:</p>

<code>image</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the bottom-right corner.</li>

<code>width</code>

<li>: Image width on screen in pixels.</li>

<code>height</code>

<li>: Image height on screen in pixels.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<h2>Loading icon</h2>

<p>To display a loading icon on the center of the screen for a specified amount of time, create a</p>

<code>LoadingIcon</code>

<p>.</p>

<p>When instancing a new loading icon, you can pass the following parameters:</p>

<code>duration</code>

<li>: seconds to display the image onscreen. If not set, or set to 0, it keeps the icon on till you hide it.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the center of the screen.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the center of the screen.</li>

<code>scale</code>

<li>: Multiplier to alter the size of the icon proportionally. A scale of 1 = 48 x 64 pixels.</li>

<p>Once a</p>

<code>LoadingIcon</code>

<p>object is instanced, you can call the</p>

<code>hide()</code>

<p>function to remove it.</p>

<h2>Full screen image</h2>

<p>To display a large image on the center of the screen for a spefified amount of time, create a</p>

<code>CenterImage</code>

<p>. By default images must be 512 x 512 pixels, unless specified.</p>

<p>When instancing a new large image, you can pass the following parameters:</p>

<code>image</code>

<li>: Path to image file.</li>

<code>duration</code>

<li>: Seconds to display the image onscreen, 3 seconds by default. -1 keeps it on till you hide it.</li>

<code>startHidden</code>

<li>: If true, the image starts invisible till you run its</li>

<code>show()</code>

<li>function. Large images may flash white for a second if created and shown at the same time. By deferring the creation you avoid this artifact.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the center of the screen.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the center of the screen.</li>

<code>width</code>

<li>: Image width on screen in pixels, 512 by default.</li>

<code>height</code>

<li>: Image height on screen in pixels, 512 by default.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple images into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>CenterImage</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show</code>

<li>: Shows the image.</li>

<code>hide</code>

<li>: Hides the image.</li>

<h2>Predefined prompt windows</h2>

<p>The UI Utils library includes various common prompt windows to display messages and ask players to take action.</p>

<h3>Ok Prompt</h3>

<p>Displays a prompt window with a custom message and an OK button. The Ok button can either be clicked or triggered by pressing the E key.</p>

<p>When instancing a new Ok Prompt, you can pass the following parameters:</p>

<code>instructions</code>

<li>: Message string.</li>

<code>onAccept</code>

<li>: Function that gets executed if player clicks the button or presses E.</li>

<code>acceptLabel</code>

<li>: Label to go in the accept button, "Ok" by default.</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<p>Note: If the player closes the window with the close icon, the related function isn't called.</p>

<h3>Option Prompt</h3>

<p>Displays a prompt window with a custom message, a title, and two buttons that perform separate actions. The buttons can be clicked or triggered by the E and F keys.</p>

<p>When instancing a new Option Prompt, you can pass the following parameters:</p>

<code>title</code>

<li>: Header in bold letters at the top of the window</li>

<code>instructions</code>

<li>: Smaller print instructions.</li>

<code>onAccept</code>

<li>: Function that gets executed if player clicks accept.</li>

<code>onReject</code>

<li>: Function that gets executed if player clicks reject.</li>

<code>acceptLabel</code>

<li>: String to go in the accept button</li>

<code>rejectLabel</code>

<li>: String to go in the reject button</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<p>Note: If the player closes the window with the close icon, neither of the functions are called.</p>

<h3>Fill in Prompt</h3>

<p>Displays a prompt window with a header, a text field to fill in and a submit button. The value filled into the text box can be used as a parameter in the submit function.</p>

<p>When instancing a new Fill-in Prompt, you can pass the following parameters:</p>

<code>title</code>

<li>: Header in bold letters at the top of the window.</li>

<code>onAccept</code>

<li>: Function that gets executed when player clicks button of presses the E key.</li>

<code>acceptLabel</code>

<li>: String to use as label on the submit button. "Submit" by default.</li>

<code>placeholder</code>

<li>: Text to display as placeholder in the text box.</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, the related function isn't called.</p>

<h2>Custom Prompt Windows</h2>

<p>Custom prompt windows let you arrange as many elements as you want into a window, including buttons, text, checkboxes, switches, textboxes and icons.</p>

<h3>Create a custom prompt</h3>

<p>First create a new</p>

<code>CustomPrompt</code>

<p>object.</p>

<p>When instancing a new CustomPrompt, you can pass the following parameters:</p>

<code>style</code>

<li>: Pick from a few predefined options, some of them using the dark theme, others the light theme. You can also provide a string with a path to a custom image to use as a background instead.</li>

<code>width</code>

<li>: Background width on screen in pixels. The default size depends on the theme used.</li>

<code>height</code>

<li>: Background height on screen in pixels. The default size depends on the theme used.</li>

<code>startHidden</code>

<li>: If true, image starts invisible to load in the background till calling the</li>

<code>show()</code>

<li>function of the prompt object.</li>

<code>onClose</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<p>Note: Stretching the background images away from their default values may lead to blurry corners.</p>

<p>Once you instanced a</p>

<code>CustomPrompt</code>

<p>object, you can add elements to it by calling its various functions.</p>

<p>You can also call the following functions on it:</p>

<code>hide</code>

<li>: Hides the window.</li>

<code>show</code>

<li>: Shows the window if previously closed.</li>

<p>Access all of the UI elements that make up the prompt UI by calling the</p>

<code>elements</code>

<p>property of the prompt object.</p>

<h3>Add Text</h3>

<p>To add text to a custom prompt, use the</p>

<code>addText</code>

<p>function.</p>

<p>The</p>

<code>addText()</code>

<p>function can take the following parameters:</p>

<code>value</code>

<li>: Text to show.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>color</code>

<li>: Text color.</li>

<code>size</code>

<li>: Text size.</li>

<p>The</p>

<code>addText()</code>

<p>function returns a</p>

<code>CustomPromptText</code>

<p>object, that you can then reference to change its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<h3>Add a button</h3>

<p>To add a button to a custom prompt, use the</p>

<code>addButton</code>

<p>function.</p>

<p>The</p>

<code>addButton</code>

<p>function can take the following parameters:</p>

<code>label</code>

<li>: Label to show on the button.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>onClick</code>

<li>: Function to execute when the button is clicked.</li>

<code>style</code>

<li>: Choose out of several predefined style options, with different colors and rounded or square corners.</li>

<p>Note: If you pick the</p>

<code>E</code>

<p>or</p>

<code>F</code>

<p>style, the buttons will also be triggered when pressing the E or F keys respectively.</p>

<p>The</p>

<code>addButton()</code>

<p>function returns a</p>

<code>CustomPromptButton</code>

<p>object, that you can then reference to change its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<code>grayOut</code>

<li>: Sets the text to gray and makes it unclickable.</li>

<code>enable</code>

<li>: Sets the text to white and makes it clickable again.</li>

<h3>Add a Checkbox</h3>

<p>To add a checkbox to a custom prompt, use the</p>

<code>addCheckbox</code>

<p>function.</p>

<p>The</p>

<code>addCheckbox</code>

<p>function can take the following parameters:</p>

<code>label</code>

<li>: Label to show next to the checkbox.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck</code>

<li>: Function to execute when the box is checked.</li>

<code>onUncheck</code>

<li>: Function to execute when the box is unchecked.</li>

<code>large</code>

<li>: The default size of the checkbox is 24 x 24 pixels, checking this box sets the size to 32 x 32.</li>

<code>startChecked</code>

<li>: If true, the box starts checked by default.</li>

<p>The</p>

<code>addCheckbox()</code>

<p>function returns a</p>

<code>CustomPromptCheckbox</code>

<p>object, that you can then reference to change and read its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<code>check</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<code>uncheck</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<p>You can also read the returned object's</p>

<code>checked</code>

<p>property at any time to find its current state.</p>

<h3>Add a Switch</h3>

<p>To add a switch to a custom prompt, use the</p>

<code>addSwitch</code>

<p>function.</p>

<p>The</p>

<code>addSwitch</code>

<p>function can take the following parameters:</p>

<code>label</code>

<li>: Label to show next to the switch.</li>

<code>posX</code>

<li>: Offset on X from the center of the window.</li>

<code>posY</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck</code>

<li>: Function to execute when the switch is activated.</li>

<code>onUncheck</code>

<li>: Function to execute when the switch is deactivated.</li>

<code>style</code>

<li>: Pick between several sizes, with different colors and rounded or square corners. The value must be from the</li>

<code>SwitchStyles</code>

<li>enum.</li>

<code>startChecked</code>

<li>: If true, the switch starts activated by default.</li>

<p>The</p>

<code>addSwitch()</code>

<p>function returns a</p>

<code>CustomPromptSwitch</code>

<p>object, that you can then reference to change and read its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<code>check</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<code>uncheck</code>

<li>: Sets the element to checked, without performing the associated function.</li>

<p>You can also read the returned object's</p>

<code>checked</code>

<p>property at any time to find its current state.</p>

<h3>Add an icon</h3>

<p>To add an icon to a custom prompt, use the</p>

<code>addIcon</code>

<p>function.</p>

<p>The</p>

<code>addIcon</code>

<p>function can take the following parameters:</p>

<code>image</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the window's center.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>width</code>

<li>: Image width on screen in pixels.</li>

<code>height</code>

<li>: Image height on screen in pixels.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<p>The</p>

<code>addIcon()</code>

<p>function returns a</p>

<code>CustomPromptIcon</code>

<p>object, that you can then reference to change its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<h3>Add an input box</h3>

<p>To add an input box to a custom prompt, use the</p>

<code>addTextBox</code>

<p>function.</p>

<p>The</p>

<code>addTextBox</code>

<p>function can take the following parameters:</p>

<code>posX</code>

<li>: Offset on X, relative to the window's center.</li>

<code>posY</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>placeholder</code>

<li>: Text to display in the input box before the player interacts with it.</li>

<code>onChange</code>

<li>: Function that gets executed every time the player edits the content on the input box, once for each character changed.</li>

<p>The</p>

<code>addTextBox()</code>

<p>function returns a</p>

<code>CustomPromptTextBox</code>

<p>object, that you can then reference to change and read its values. This object also has the following functions that can be called any time:</p>

<code>hide</code>

<code>show</code>

<p>You can access the last edited value on the textbox by fetching the</p>

<code>currentText</code>

<p>value of the returned object.</p>

<h3>Full Custom UI example</h3>

<p>Here's a full example of a custom UI:</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/ui-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>15</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>19</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/DCLVideoPlayerUnity

# URL: https://github.com/decentraland/DCLVideoPlayerUnity

<title>GitHub - decentraland/DCLVideoPlayerUnity</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/DCLVideoPlayerUnity</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCLVideoPlayerUnity</h1>

<p>Unity Video Player using FFMPEG for Windows/Linux/Mac</p>

<p>It uses the C video player library:</p>

<p>The CI generates the necessary binaries for Windows/Linux/Mac.</p>

<h2>TODO:</h2>

<li>Improve: Remove YUV->RGB transformation inside DCLVideoPlayer and create a shader in Unity to make the process in the GPU</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/DCLVideoPlayer

# URL: https://github.com/decentraland/DCLVideoPlayer

<title>GitHub - decentraland/DCLVideoPlayer</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/DCLVideoPlayer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>20</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCLVideoPlayer</h1>

<p>VideoPlayer to run videos inside Decentraland for the Native version</p>

<h2>Dependency</h2>

<p>For Mac we're using a static linking, and we compile FFMPEG statically.</p>

<p>The builds is done in this repository:</p>

<h2>Unity Implementation Example</h2>

<h3>UPM Package</h3>

<p>You can import the Unity implementation as an UPM Package with the following link:</p>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in

the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ffmpeg-static

# URL: https://github.com/decentraland/ffmpeg-static

<title>GitHub - decentraland/ffmpeg-static</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ffmpeg-static</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>127</strong>

<h2>Files</h2>

<button>View code</button>

<h1>FFmpeg static build</h1>

<em>STATUS</em>

<p>: community-supported</p>

<p>Three scripts to make a static build of ffmpeg with all the latest codecs (webm + h264).</p>

<p>Just follow the instructions below. Once you have the build dependencies,

run ./build.sh, wait and you should get the ffmpeg binary in target/bin</p>

<h2>Build dependencies</h2>

<code># Debian & Ubuntu

$ apt-get install build-essential curl tar libass-dev libtheora-dev libvorbis-dev libtool cmake automake autoconf

# OS X

# 1. install XCode

# 2. install XCode command line tools

# 3. install homebrew

# brew install cmake automake libtool openssl</code>

<h2>Build & "install"</h2>

<code>$ ./build.sh [-j <jobs>] [-B] [-d]

# ... wait ...

# binaries can be found in ./target/bin/</code>

<p>Ubuntu users can download dependencies and and install in one command:</p>

<code>$ sudo ./build-ubuntu.sh</code>

<p>If you have built ffmpeg before with</p>

<code>build.sh</code>

<p>, the default behaviour is to keep the previous configuration. If you would like to reconfigure and rebuild all packages, use the</p>

<code>-B</code>

<p>flag.</p>

<code>-d</code>

<p>flag will only download and unpack the dependencies but not build.</p>

<p>NOTE: If you're going to use the h264 presets, make sure to copy them along the binaries. For ease, you can put them in your home folder like this:</p>

<code>$ mkdir ~/.ffmpeg

$ cp ./target/share/ffmpeg/*.ffpreset ~/.ffmpeg</code>

<h2>Build in docker</h2>

<code>$ docker build -t ffmpeg-static .

$ docker run -it ffmpeg-static

$ ./build.sh [-j <jobs>] [-B] [-d]</code>

<p>The binaries will be created in</p>

<code>/ffmpeg-static/bin</code>

<p>directory.

Method of getting them out of the Docker container is up to you.</p>

<code>/ffmpeg-static</code>

<p>is a Docker volume.</p>

<h2>Debug</h2>

<p>On the top-level of the project, run:</p>

<code>$ . env.source</code>

<p>You can then enter the source folders and make the compilation yourself</p>

<code>$ cd build/ffmpeg-*

$ ./configure --prefix=$TARGET_DIR #...

# ...</code>

<h2>Remaining links</h2>

<p>I'm not sure it's a good idea to statically link those, but it probably

means the executable won't work across distributions or even across releases.</p>

<code># On Ubuntu 10.04:

$ ldd ./target/bin/ffmpeg

not a dynamic executable

# on OSX 10.6.4:

$ otool -L ffmpeg

ffmpeg:

/usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 125.2.0)</code>

<h2>Community, bugs and reports</h2>

<p>This repository is community-supported. If you make a useful PR then you will

be added as a contributor to the repo. All changes are assumed to be licensed

under the same license as the project (ISC).</p>

<p>As a contributor you can do whatever you want. Help maintain the scripts,

upgrade dependencies and merge other people's PRs. Just be responsible and

make an issue if you want to introduce bigger changes so we can discuss them

beforehand.</p>

<h3>TODO</h3>

<li>Add some tests to check that video output is correctly generated

this would help upgrading the package without too much work</li>

<li>OSX's xvidcore does not detect yasm correctly</li>

<li>remove remaining libs (?)</li>

<h2>Related projects</h2>

<li>FFmpeg Static Builds -</li>

<h2>License</h2>

<p>This project is licensed under the ISC. See the</p>

<p>file for

the legalities.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-exercise-effects

# URL: https://github.com/decentraland/unity-exercise-effects

<title>GitHub - decentraland/unity-exercise-effects</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-exercise-effects</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Battle Simulator - Effects</h1>

<h2>Instructions</h2>

<p>We have a battle simulator that allows two different teams to battle against each other. But we need some cool effects adding! ð¥</p>

<p>Please use your own creative licence to add minimum of 2 effects to the scene.</p>

<p>You must:</p>

<li>Create one effect of your liking as a post-process extending the Unity universal rendering pipeline</li>

<li>Optimize the effects for performance and ensure it works well on both WebGL and desktop platforms (Windows or Mac)</li>

<p>You are free to add anything you like, the more creative the better but here are some examples to get you started:</p>

<h3>Death Effects</h3>

<li>On death units can show a "phase out".</li>

<h3>Laser Effects</h3>

<li>Improved laser / shooting effects.</li>

<h3>Ground Effects</h3>

<li>The effect on the ground could represent which unit is occupying the current location</li>

<li>The more units clustered in a location, the effect should be greater</li>

<li>This can represent how much "power" the team has in an area.</li>

<h3>Unit Info Hover</h3>

<li>Hovering over unit could render an outline-style shader.</li>

<li>The shader could change colour depending on the unit health.</li>

<h2>Additional information</h2>

<p>It is possible to include Unity built-in packages and packages of the Unity Registry, but it is not possible to use

3rd party packages or assets coming from the Asset Store or other sources, except for animations (e.g.

DOTween), and already included in manifest.json</p>

<p>You can modify any code in the project if you see any places which can be improved in example: optimizations

or architecture.</p>

<p>During the review we will look at the code quality and implementation, as well as Unity integration and performance.

It's early prototype, but it's good to follow good practices</p>

<p>Good luck â¨</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/comms-library

# URL: https://github.com/decentraland/comms-library

<title>GitHub - decentraland/comms-library</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/comms-library</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Getting Started with Create React App</h1>

<p>This project was bootstrapped with</p>

<p>.</p>

<h2>Available Scripts</h2>

<p>In the project directory, you can run:</p>

<code>npm start</code>

<p>Runs the app in the development mode.</p>

<p>Open</p>

<p>to view it in the browser.</p>

<p>The page will reload if you make edits.</p>

<p>You will also see any lint errors in the console.</p>

<code>npm test</code>

<p>Launches the test runner in the interactive watch mode.</p>

<p>See the section about</p>

<p>for more information.</p>

<code>npm run build</code>

<p>Builds the app for production to the</p>

<code>build</code>

<p>folder.</p>

<p>It correctly bundles React in production mode and optimizes the build for the best performance.</p>

<p>The build is minified and the filenames include the hashes.</p>

<p>Your app is ready to be deployed!</p>

<p>See the section about</p>

<p>for more information.</p>

<code>npm run eject</code>

<strong>Note: this is a one-way operation. Once you</strong>

<code>eject</code>

<strong>, you canât go back!</strong>

<p>If you arenât satisfied with the build tool and configuration choices, you can</p>

<code>eject</code>

<p>at any time. This command will remove the single build dependency from your project.</p>

<p>Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except</p>

<code>eject</code>

<p>will still work, but they will point to the copied scripts so you can tweak them. At this point youâre on your own.</p>

<p>You donât have to ever use</p>

<code>eject</code>

<p>. The curated feature set is suitable for small and middle deployments, and you shouldnât feel obligated to use this feature. However we understand that this tool wouldnât be useful if you couldnât customize it when you are ready for it.</p>

<h2>Learn More</h2>

<p>You can learn more in the</p>

<p>.</p>

<p>To learn React, check out the</p>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-voice

# URL: https://github.com/decentraland/dcl-voice

<title>GitHub - decentraland/dcl-voice: Sagas to handle voice webRTC SFU</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Sagas to handle voice webRTC SFU</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-voice</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>26</strong>

<h2>Files</h2>

<button>View code</button>

<code>make watch</code>

<code>make build</code>

<h2>About</h2>

<p>Sagas to handle voice webRTC SFU</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/canilla

# URL: https://github.com/decentraland/canilla

<title>GitHub - decentraland/canilla: :potable_water: Faucet for all things related to Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð° Faucet for all things related to Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/canilla</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>23</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>38</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Canilla</h1>

<p>faucet</p>

<h2>About</h2>

<p>ð° Faucet for all things related to Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>15</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/aragonswap

# URL: https://github.com/decentraland/aragonswap

<title>GitHub - decentraland/aragonswap</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/aragonswap</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>16</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/documentation-cn

# URL: https://github.com/decentraland/documentation-cn

<title>GitHub - decentraland/documentation-cn: ð What is Decentraland?</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð What is Decentraland?</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/documentation-cn</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>472</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland documentation</h1>

<h2>Setup</h2>

<li>Add your site and author details in</li>

<code>_config.yml</code>

<li>.</li>

<li>Add your Google Analytics, Disqus and MailChimp keys to</li>

<code>_config.yml</code>

<li>.</li>

<li>Get a workflow going to see your site's output (with</li>

<li>or Jekyll locally).</li>

<h2>Develop</h2>

<p>Base was built with</p>

<p>version 3.4.3, but should support newer versions as well.</p>

<p>Install the dependencies with</p>

<p>:</p>

<pre>$ bundle install</pre>

<p>Run</p>

<code>jekyll</code>

<p>commands through Bundler to ensure you're using the right versions:</p>

<pre>$ bundle</pre>

<pre>jekyll serve --incremental</pre>

<h2>Editing</h2>

<p>Please use Visual Studio Code with Prettier extension to have a consistent coding style</p>

<h4>Posts</h4>

<li>Add, update or remove a post in the</li>

<em>Posts</em>

<li>collection.</li>

<li>The tutorials page is organised by categories.</li>

<li>Change the defaults when new posts are created in</li>

<code>_posts/_defaults.md</code>

<li>.</li>

<h4>Post Series</h4>

<p>To create a new series:</p>

<li>Add a new document to the</li>

<code>sets</code>

<li>collection.</li>

<li>Set the</li>

<code>title</code>

<li>and</li>

<code>description</code>

<li>.</li>

<p>To add a tutorial/post to a series:</p>

<li>Add a</li>

<code>set</code>

<li>field to the tutorial front matter which points to the file name of the desired set without the</li>

<code>.md</code>

<li>extension. e.g. If I have a set at</li>

<code>_sets/getting-started.md</code>

<li>I would use this in my tutorial front matter:</li>

<code>set: getting-started</code>

<li>.</li>

<li>Add a</li>

<code>set_order</code>

<li>field to the tutorial front matter and specify a number. This is the tutorials order in the set.</li>

<h4>Navigation</h4>

<li>Exposed as a data file to give clients better access.</li>

<li>Set in the</li>

<em>Data</em>

<li>/</li>

<em>Navigation</em>

<li>section.</li>

<h4>Footer</h4>

<li>Exposed as a data file to give clients better access.</li>

<li>Set in the</li>

<em>Data</em>

<li>/</li>

<em>Footer</em>

<li>section.</li>

<p>Base template was made by</p>

<p>, the Cloud CMS for Jekyll.</p>

<h2>About</h2>

<p>ð What is Decentraland?</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>19</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-documentation

# Change to URL: https://github.com/decentraland/decentraland-gatsby-deploy

# URL: https://github.com/decentraland/decentraland-gatsby-deploy

<title>GitHub - decentraland/decentraland-gatsby-deploy</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-gatsby-deploy</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>119</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>142</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-gatsby-deploy</h1>

<p>Toolbox collections to create pipeline deploys using pulumi (build on top of</p>

<p>)</p>

<h2>Index</h2>

<h2>API</h2>

<p>Our api are separated in two categories</p>

<li>the recipes: that are ways to build a stand-alone service that can be combined</li>

<li>the platform abstraction: that are simplified ways to configure a platform</li>

<code>buildContentBucket</code>

<h3>recipe</h3>

<p>Creates a</p>

<p>.</p>

<th>params</th>

<th>type</th>

<th>description</th>

<code>name</code>

<code>string</code>

<td>define the name of the services</td>

<code>[required]</code>

<code>acl</code>

<code>pulumi.Input<string></code>

<td>the</td>

<td>to apply.</td>

<code>routingRules</code>

<code>pulumi.Input<aws.s3.RoutingRule></code>

<td>A json array containing</td>

<td>describing redirect behavior and when redirects are applied.</td>

<p>You can use</p>

<code>createRoutingRules</code>

<p>to simplify the</p>

<code>routingRules</code>

<p>definition</p>

<th>return</th>

<th>type</th>

<th>description</th>

<code>Object</code>

<td>bucket definitions</td>

<code>.bucketName</code>

<code>pulumi.Output<string></code>

<td>bucket name</td>

<code>.contentBucket</code>

<code>aws.s3.Bucket</code>

<td>bucket configuration</td>

<code>.contentBucketPolicy</code>

<code>aws.s3.BucketPolicy</code>

<td>bucket policy configuration</td>

<code>buildCloudfrontDistribution</code>

<h3>recipe</h3>

<p>Creates a</p>

<th>params</th>

<th>type</th>

<th>description</th>

<code>config</code>

<code>Object</code>

<code>config.name</code>

<code>string</code>

<td>define the name of the services</td>

<code>[required]</code>

<code>config.usePublicTLD</code>

<code>boolean</code>

<td>defines is the distribution will response to request for the public tld</td>

<code>config.additionalDomains</code>

<code>string[]</code>

<td>defines the list of domains</td>

<code>config.origins</code>

<code>pulumi.Input<pulumi.Input<inputs.cloudfront.DistributionOrigin>[]>;</code>

<td>one or more</td>

<td>for this distribution.</td>

<code>config.orderedCacheBehaviors</code>

<code>pulumi.Input<pulumi.Input<inputs.cloudfront.DistributionOrderedCacheBehavior>[]></code>

<td>an ordered list of cache behaviors resource for this distribution.</td>

<code>config.defaultCacheBehavior</code>

<code>pulumi.Input<inputs.cloudfront.DistributionDefaultCacheBehavior></code>

<td>the default cache behavior for this distribution</td>

<code>[required]</code>

<th>return</th>

<th>type</th>

<th>description</th>

<code>Object</code>

<td>cloudfront definitions</td>

<code>.distribution</code>

<code>aws.cloudfront.Distribution</code>

<td>distribution definition</td>

<code>.logsBucket</code>

<code>aws.s3.Bucket</code>

<td>bucket for</td>

<code>routeToCloudfrontDistribution</code>

<h3>recipe</h3>

<p>Route a domain into a Cloudfront Distribution</p>

<th>params</th>

<th>type</th>

<th>description</th>

<code>domains</code>

<code>string[]</code>

<td>domain list</td>

<code>distribution</code>

<code>Pick<aws.cloudfront.Distribution, "domainName" | "hostedZoneId"></code>

<td>distribution target</td>

<th>returns</th>

<th>type</th>

<th>description</th>

<td>`(aws.route53.Record</td>

<td>cloudflare.Record)[]`</td>

<code>routeToLoadBalancer</code>

<h3>recipe</h3>

<p>Route a domain into a aws Load Balancer</p>

<th>params</th>

<th>type</th>

<th>description</th>

<code>domains</code>

<code>string[]</code>

<td>domain list</td>

<code>distribution</code>

<td>`Pick<aws.lb.LoadBalancer, "dnsName"</td>

<td>"zoneId">`</td>

<th>returns</th>

<th>type</th>

<th>description</th>

<td>`(aws.route53.Record</td>

<td>cloudflare.Record)[]`</td>

<h2>CLIs</h2>

<code>download-release</code>

<li>: download assets from a github release</li>

<code>generate-statics</code>

<li>: generate static version of files</li>

<code>setup-bucket</code>

<li>:</li>

<em>@deprecated</em>

<li>use</li>

<code>cdn-uploader</code>

<li>instead.</li>

<code>setup-environment</code>

<li>: read pulumi configuration and load all public configuration as environment variables</li>

<code>setup-stack</code>

<li>: select a pulumi stack or create it if doesn't exists</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-gatsby-deploy

# Change to URL: https://github.com/decentraland/cdn-uploader

# Change to URL: https://github.com/decentraland/crunch

# URL: https://github.com/decentraland/crunch

<title>GitHub - decentraland/crunch: Advanced DXTc texture compression and transcoding library</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Advanced DXTc texture compression and transcoding library</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/crunch</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>69</strong>

<h2>Files</h2>

<button>View code</button>

<p>crunch/crnlib v1.04 - Advanced DXTn texture compression library</p>

<p>Public Domain - Please see license.txt.</p>

<p>Portions of this software make use of public domain code originally

written by Igor Pavlov (LZMA), RYG (crn_ryg_dxt*), and Sean Barrett (stb_image.c).</p>

<p>If you use this software in a product, an acknowledgment in the product

documentation would be highly appreciated but is not required.</p>

<h2>Overview</h2>

<p>crnlib is a lossy texture compression library for developers that ship

content using the DXT1/5/N or 3DC compressed color/normal map/cubemap

mipmapped texture formats. It was written by the same author as the open

source</p>

<p>.</p>

<p>It can compress mipmapped 2D textures, normal maps, and cubemaps to

approx. 1-1.25 bits/texel, and normal maps to 1.75-2 bits/texel. The

actual bitrate depends on the complexity of the texture itself, the

specified quality factor/target bitrate, and ultimately on the desired

quality needed for a particular texture.</p>

<p>crnlib's differs significantly from other approaches because its

compressed texture data format was carefully designed to be quickly

transcodable directly to DXTn with no intermediate recompression step.

The typical (single threaded) transcode to DXTn rate is generally

between 100-250 megatexels/sec. The current library supports PC

(Win32/x64) and Xbox 360. Fast random access to individual mipmap levels

is supported.</p>

<p>crnlib can also generates standard .DDS files at specified quality

setting, which results in files that are much more compressible by

LZMA/Deflate/etc. compared to files generated by standard DXTn texture

tools (see below). This feature allows easy integration into any engine

or graphics library that already supports .DDS files.</p>

<p>The .CRN file format supports the following core DXTn texture formats:

DXT1 (but not DXT1A), DXT5, DXT5A, and DXN/3DC</p>

<p>It also supports several popular swizzled variants (several are

also supported by AMD's Compressonator):

DXT5_XGBR, DXT5_xGxR, DXT5_AGBR, and DXT5_CCxY (experimental luma-chroma YCoCg).</p>

<h2>Recommended Software</h2>

<p>AMD's</p>

<p>is recommended to view the .DDS files created by the crunch tool and the included example projects.</p>

<p>Note: Some of the swizzled DXTn .DDS output formats (such as DXT5_xGBR)

read/written by the crunch tool or examples deviate from the DX9 DDS

standard, so DXSDK tools such as DXTEX.EXE won't load them at all or

they won't be properly displayed.</p>

<h2>Compression Algorithm Details</h2>

<p>The compression process employed in creating both .CRN and

clustered .DDS files utilizes a very high quality, scalable DXTn

endpoint optimizer capable of processing any number of pixels (instead

of the typical hard coded 16), optional adaptive switching between

several macroblock sizes/configurations (currently any combination of

4x4, 8x4, 4x8, and 8x8 pixel blocks), endpoint clusterization using

top-down cluster analysis, vector quantization (VQ) of the selector

indices, and several custom algorithms for compressing the resulting

endpoint/selector codebooks and macroblock indices. Multiple feedback

passes are performed between the clusterization and VQ steps to optimize

quality, and several steps use a brute force refinement approach to improve

quality. The majority of compression steps are multithreaded.</p>

<p>The .CRN format currently utilizes canonical Huffman coding for speed

(similar to Deflate but with much larger tables), but the next major

version will also utilize adaptive binary arithmetic coding and higher

order context modeling using already developed tech from the my LZHAM

compression library.</p>

<h2>Supported File Formats</h2>

<p>crnlib supports two compressed texture file formats. The first

format (clustered .DDS) is simple to integrate into an existing project

(typically, no code changes are required), but it doesn't offer the

highest quality/compression ratio that crnlib is capable of. Integrating

the second, higher quality custom format (.CRN) requires a few

typically straightforward engine modifications to integrate the

.CRN->DXTn transcoder header file library into your tools/engine.</p>

<h3>.DDS</h3>

<p>crnlib can compress textures to standard DX9-style .DDS files using

clustered DXTn compression, which is a subset of the approach used to

create .CRN files.(For completeness, crnlib also supports vanilla, block

by block DXTn compression too, but that's not very interesting.)

Clustered DXTn compressed .DDS files are much more compressible than

files created by other libraries/tools. Apart from increased

compressibility, the .DDS files generated by this process are completely

standard so they should be fairly easy to add to a project with little

to no code changes.</p>

<p>To actually benefit from clustered DXTn .DDS files, your engine needs to

further losslessly compress the .DDS data generated by crnlib using a

lossless codec such as zlib, lzo, LZMA, LZHAM, etc. Most likely, your

engine does this already. (If not, you definitely should because DXTn

compressed textures generally contain a large amount of highly redundant

data.)</p>

<p>Clustered .DDS files are intended to be the simplest/fastest way to

integrate crnlib's tech into a project.</p>

<h3>.CRN</h3>

<p>The second, better, option is to compress your textures to .CRN files

using crnlib. To read the resulting .CRN data, you must add the .CRN

transcoder library (located in the included single file, stand-alone

header file library inc/crn_decomp.h) into your application. .CRN files

provide noticeably higher quality at the same effective bitrate compared

to clustered DXTn compressed .DDS files. Also, .CRN files don't require

further lossless compression because they're already highly compressed.</p>

<p>.CRN files are a bit more difficult/risky to integrate into a project, but

the resulting compression ratio and quality is superior vs. clustered .DDS files.</p>

<h3>.KTX</h3>

<p>crnlib and crunch can read/write the .KTX file format in various pixel formats.

Rate distortion optimization (clustered DXTc compression) is not yet supported

when writing .KTX files.</p>

<p>The .KTX file format is just like .DDS, except it's a fairly well specified

standard created by the Khronos Group. Unfortunately, almost all of the tools I've

found that support .KTX are fairly (to very) buggy, or are limited to only a handful

of pixel formats, so there's no guarantee that the .KTX files written by crnlib can

be reliably read by other tools.</p>

<h2>Building the Examples</h2>

<p>This release contains the source code and projects for three simple

example projects:</p>

<p>crn_examples.2008.sln is a Visual Studio 2008 (VC9) solution file

containing projects for Win32 and x64. crnlib itself also builds with

VS2005, VS2010, and gcc 4.5.0 (TDM GCC+MinGW).  A codeblocks 10.05

workspace and project file is also included, but compiling crnlib this

way hasn't been tested much.</p>

<h3>example1</h3>

<p>Demonstrates how to use crnlib's high-level C-helper

compression/decompression/transcoding functions in inc/crnlib.h. It's a

fairly complete example of crnlib's functionality.</p>

<h3>example2</h3>

<p>Shows how to transcodec .CRN files to .DDS using</p>

<strong>only</strong>

<p>the functionality in inc/crn_decomp.h. It does not link against against

crnlib.lib or depend on it in any way. (Note: The complete source code,

approx. 4800 lines, to the CRN transcoder is included in inc/crn_decomp.h.)</p>

<p>example2 is intended to show how simple it is to integrate CRN textures

into your application.</p>

<h3>example3</h3>

<p>Shows how to use the regular, low-level DXTn block compressor

functions in inc/crnlib.h. This functionality is included for

completeness. (Your engine or toolchain most likely already has its own

DXTn compressor. crnlib's compressor is typically very competitive or

superior to most available closed and open source CPU-based

compressors.)</p>

<h2>Creating Compressed Textures from the Command Line (crunch.exe)</h2>

<p>The simplest way to create compressed textures using crnlib is to

integrate the bin\crunch.exe or bin\crunch_x64.exe) command line tool

into your texture build toolchain or export process. It can write DXTn

compressed 2D/cubemap textures to regular DXTn compressed .DDS,

clustered (or reduced entropy) DXTn compressed .DDS, or .CRN files. It

can also transcode or decompress files to several standard image

formats, such as TGA or BMP. Run crunch.exe with no options for help.</p>

<p>The .CRN files created by crunch.exe can be efficiently transcoded to

DXTn using the included CRN transcoding library, located in full source

form under inc/crn_decomp.h.</p>

<p>Here are a few example crunch.exe command lines:</p>

<li>Compress blah.tga to blah.dds using normal DXT1 compression:</li>

<code>crunch -file blah.tga -fileformat dds -dxt1</code>

<li>Compress blah.tga to blah.dds using clustered DXT1 at an effective bitrate of 1.5 bits/texel, display image statistic:</li>

<code>crunch -file blah.tga -fileformat dds -dxt1 -bitrate 1.5 -imagestats</code>

<li>Compress blah.tga to blah.dds using clustered DXT1 at quality level 100 (from [0,255]), with no mipmaps, display LZMA statistics:</li>

<code>crunch -file blah.tga -fileformat dds -dxt1 -quality 100 -mipmode none -lzmastats</code>

<li>Compress blah.tga to blah.crn using clustered DXT1 at a bitrate of 1.2 bits/texel, no mipmaps:</li>

<code>crunch -file blah.tga -dxt1 -bitrate 1.2 -mipmode none</code>

<li>Decompress blah.dds to a .tga file:</li>

<code>crunch -file blah.dds -fileformat tga</code>

<li>Transcode blah.crn to a .dds file:</li>

<code>crunch -file blah.crn</code>

<li>Decompress blah.crn, writing each mipmap level to a separate .tga file:</li>

<code>crunch -split -file blah.crn -fileformat tga</code>

<p>crunch.exe can do a lot more, like rescale/crop images before

compression, convert images from one file format to another, compare

images, process multiple images, etc.</p>

<p>Note: I would have included the full source to crunch.exe, but it still

has some low-level dependencies to crnlib internals which I didn't have

time to address. This version of crunch.exe has some reduced

functionality compared to an earlier eval release. For example, XML file

support is not included in this version.</p>

<h2>Using crnlib</h2>

<p>The most flexible and powerful way of using crnlib is to integrate the

library into your editor/toolchain/etc. and directly supply it your

raw/source texture bits. See the C-style API's and comments in

inc/crnlib.h.</p>

<p>To compress, you basically fill in a few structs in and call one function:</p>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<p>Or, if you want crnlib to also generate mipmaps, you call this function:</p>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<p>You can also transcode/uncompress .DDS/.CRN files to raw 32bpp images

using</p>

<code>crn_decompress_crn_to_dds()</code>

<p>and</p>

<code>crn_decompress_dds_to_images()</code>

<p>.</p>

<p>Internally, crnlib just uses inc/crn_decomp.h to transcode textures to

DXTn. If you only need to transcode .CRN format files to raw DXTn bits

at runtime (and not compress), you don't actually need to compile or

link against crnlib at all. Just include inc/crn_decomp.h, which

contains a completely self-contained CRN transcoder in the "crnd"

namespace. The</p>

<code>crnd_get_texture_info()</code>

<p>,</p>

<code>crnd_unpack_begin()</code>

<p>,</p>

<code>crnd_unpack_level()</code>

<p>, etc. functions are all you need to efficiently get

at the raw DXTn bits, which can be directly supplied to whatever API or

GPU you're using. (See example2.)</p>

<p>Important note: When compiling under native client, be sure to define

the</p>

<code>PLATFORM_NACL</code>

<p>macro before including the</p>

<code>inc/crn_decomp.h</code>

<p>header file library.</p>

<h2>Known Issues/Bugs</h2>

<p>crnlib currently assumes you'll be further losslessly compressing its

output .DDS files using LZMA. However, some engines use weaker codecs

such as LZO, zlib, or custom codecs, so crnlib's bitrate measurements

will be inaccurate. It should be easy to allow the caller to plug-in

custom lossless compressors for bitrate measurement.</p>

<p>Compressing to a desired bitrate can be time consuming, especially when

processing large (2k or 4k) images to the .CRN format. There are several

high-level optimizations employed when compressing to clustered DXTn .DDS

files using multiple trials, but not so for .CRN.</p>

<p>The .CRN compressor does not currently use 3 color (transparent) DXT1

blocks at all, only 4 color blocks. So it doesn't support DXT1A

transparency, and its output quality suffers a little due to this

limitation. (Note that the clustered DXTn compressor used when

writing clustered .DDS files does</p>

<em>not</em>

<p>have this limitation.)</p>

<p>Clustered DXT5/DXT5A compressor is able to group DXT5A blocks into

clusters only if they use absolute (black/white) selector indices. This

hurts performance at very low bitrates, because too many bits are

effectively given to alpha.</p>

<p>DXT3 is not supported when writing .CRN or clustered DXTn DDS files.

(DXT3 is supported by crnlib's when compressing to regular DXTn DDS

files.) You'll get DXT5 files if you request DXT3. However, DXT3 is

supported by the regular DXTn block compressor. (DXT3's 4bpp fixed alpha

sucks verses DXT5 alpha blocks, so I don't see this as a bug deal.)</p>

<p>The DXT5_CCXY format uses a simple YCoCg encoding that is workable but

hasn't been tuned for max. quality yet.</p>

<p>Clustered (or rate distortion optimized) DXTc compression is only

supported when writing to .DDS, not .KTX. Also, only plain block by block

compression is supported when writing to ETC1, and .CRN does not support ETC1.</p>

<h2>Compile to Javascript with Emscripten</h2>

<p>Download and install Emscripten:</p>

<p>From the root directory, run:</p>

<pre>/</pre>

<pre>.</pre>

<pre>./</pre>

<pre>.</pre>

<h2>About</h2>

<p>Advanced DXTc texture compression and transcoding library</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>182</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/land

# URL: https://github.com/decentraland/land

<title>GitHub - decentraland/land: â° Contract for LAND</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>â° Contract for LAND</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/land</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>311</strong>

<h2>Files</h2>

<button>View code</button>

<h1>LAND</h1>

<p>Contracts for Decentraland's World.</p>

<h2>Overview</h2>

<p>The LAND contract keeps a record of all the land parcels, who their owner is,

and what data is associated with them. The data associated can be an IPFS

identifier, an IPNS url, or a simple HTTPS endpoint with a land description

file.</p>

<p>Check this</p>

<p>for further understanding.</p>

<h2>License</h2>

<p>Code released under</p>

<p>.</p>

<h2>About</h2>

<p>â° Contract for LAND</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>120</strong>

<h3>Watchers</h3>

<strong>34</strong>

<h3>Forks</h3>

<strong>55</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tpr-graph

# URL: https://github.com/decentraland/tpr-graph

<title>GitHub - decentraland/tpr-graph: Third Party Registry Subgraph</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Third Party Registry Subgraph</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tpr-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>45</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland TPR graph</h1>

<th>Network</th>

<th>URL</th>

<th>Current</th>

<th>Previous</th>

<td>Matic (Satsuma)</td>

<td>QmVbwGkYWs8JvUoyyfQbsyfVzTBHvZA5oLkCChGPUpYU8b</td>

<td>-</td>

<td>Matic (Hosted Services)</td>

<td>QmVbwGkYWs8JvUoyyfQbsyfVzTBHvZA5oLkCChGPUpYU8b</td>

<td>-</td>

<td>Mumbai (Hosted Service)</td>

<td>QmTJR2JMzxvTfUgXaGSPdEcsnb2R5sTUyKS5DuZEMhvMoq</td>

<td>-</td>

<p>Using</p>

<p>and</p>

<h3>Install</h3>

<pre>npm run install</pre>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<p>Ethereum addresses should be passed lowercased:</p>

<code>0xB549B2442b2BD0a53795BC5cDcBFE0cAF7ACA9f8</code>

<li>â</li>

<code>0xb549b2442b2bd0a53795bc5cdcbfe0caf7aca9f8</code>

<li>â</li>

<h4>Get totals</h4>

<h2>About</h2>

<p>Third Party Registry Subgraph</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-tpr-graph

# Change to URL: https://github.com/decentraland/decentraland-auth

# URL: https://github.com/decentraland/decentraland-auth

<title>GitHub - decentraland/decentraland-auth: ð JavaScript client for the auth-service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð JavaScript client for the auth-service</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-auth</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>22</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>69</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-auth</h1>

<p>JavaScript client for the auth-service</p>

<h2>Installation</h2>

<code>$ npm i decentraland-auth</code>

<h2>Usage</h2>

<p>Create an</p>

<code>Auth</code>

<p>instance, login and then get access tokens whenever you need them</p>

<pre>user_id</pre>

<h4>Send signed request</h4>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Generate credentials for message</h4>

<p>This library makes use of</p>

<code>Buffer</code>

<p>, which is not present natively in the browser. There's a polyfill that is included by default by some bundlers (like webpack), but if you don't have it make sure to add it to your project:</p>

<p>.</p>

<h2>API</h2>

<code>new Auth([options])</code>

<p>: Returns a new instance of</p>

<code>Auth</code>

<p>. It takes an optional</p>

<code>options</code>

<p>objects that can contain the following properties:</p>

<code>ephemeralKeyTTL</code>

<p>: Time to live for the ephemeral key (in seconds). Default value is</p>

<code>60 * 60 * 2</code>

<p>(2 hours).</p>

<code>api</code>

<p>: An object with options for the underlying</p>

<code>API</code>

<p>instance:</p>

<code>baseURL</code>

<p>: The base url of the</p>

<code>auth-service</code>

<p>. Default value is</p>

<code>https://auth.decentraland.zone/api/v1</code>

<p>.</p>

<code>loginCallback</code>

<p>: The login callback url. It defaults to</p>

<code>/callback</code>

<p>.</p>

<code>logoutCallback</code>

<p>: The logout callback url. It defaults to</p>

<code>/</code>

<p>.</p>

<code>auth.login([target])</code>

<p>: Returns a promise that will resolve once the user is logged in. The first time it's called it will prompt the user to login though a Popup. If a</p>

<code>target</code>

<p>dom node is provided, instead of a Popup it will insert an iframe inside the target node and use that. If the user closes the Popup the promise will reject. If the user session is still active this method might resolve without having to open a popup.</p>

<code>auth.isLoggedIn()</code>

<p>: Returns a boolean telling wheter the user is logged in or not.</p>

<code>auth.getAccessToken()</code>

<p>: It returns a promise that resolves to an access token. This access token has a short life so it is recommended to get a new token every time you need to use is instead of storing it.</p>

<code>auth.getAccessTokenData()</code>

<p>: It returns a promise that resolves to the payload of the access token (basically the decoded JWT).</p>

<code>auth.logout()</code>

<p>: It returns a promise that resolves once the user is logged out. After using this, the next time the</p>

<code>login()</code>

<p>method is called it will prompt the user with the login flow.</p>

<code>auth.createRequest(url, options?)</code>

<p>: It returns a promise that resolves to a</p>

<code>Request</code>

<p>object that can be used with</p>

<code>fetch</code>

<p>. It takes a URL and the same options as</p>

<code>fetch</code>

<p>.</p>

<code>auth.createHeaders(url, options?)</code>

<p>: It returns a promise that resolves to an object containing the mandatory headers to be used in a signed request. It takes a URL and the same options as</p>

<code>fetch</code>

<p>.</p>

<code>auth.getUserToken()</code>

<p>: It returns a promise that resolves to the</p>

<code>userToken</code>

<p>. This token is the one used to generate the</p>

<code>accessToken</code>

<p>(s).</p>

<code>auth.getEphemeralKey()</code>

<p>: Returns the instance of the ephemeral key.</p>

<code>auth.dispose()</code>

<p>: It removes all the bindings on this instance. It does NOT perform a logout.</p>

<h2>About</h2>

<p>ð JavaScript client for the auth-service</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>20</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-auth

# Change to URL: https://github.com/decentraland/decentraland-experiments

# URL: https://github.com/decentraland/decentraland-experiments

<title>GitHub - decentraland/decentraland-experiments: ð  Experiment Tracking Tool (A/B Testing)</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð  Experiment Tracking Tool (A/B Testing)</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-experiments</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>20</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>36</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraland-experiments</h1>

<p>ð  Experiment Tracking Tool (A/B Testing)</p>

<p>Implemented from</p>

<p>(</p>

<p>)</p>

<h2>Index</h2>

<h2>Installation</h2>

<pre>npm install -s decentraland-experiments</pre>

<h2>Usage</h2>

<h3>Vanilla JS</h3>

<p>Instantiate all experiments</p>

<pre>: ...</pre>

<p>Retrieve and use the test value</p>

<p>Track segments events</p>

<h3>React</h3>

<p>Instantiate all experiments</p>

<pre>: ...</pre>

<p>Retrieve and use the test value</p>

<pre>Button></pre>

<p>Track segments events</p>

<pre>handleClick</pre>

<pre>:</pre>

<pre>handleClick</pre>

<pre>Button></pre>

<h3>React + Context</h3>

<p>Create the new Context without experiments</p>

<p>Instantiate all experiments</p>

<pre>: ...</pre>

<p>Add</p>

<code>Context.Provider</code>

<p>to initial render and set the experiments instance as value property</p>

<p>Add</p>

<code>Context</code>

<p>to the testing element and retrieve the test value</p>

<pre>Button></pre>

<p>Track segments events</p>

<pre>:</pre>

<pre>Button></pre>

<h2>Testing (with Jest)</h2>

<p>Retrieve all values and ensure its types</p>

<h2>About</h2>

<p>ð  Experiment Tracking Tool (A/B Testing)</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>16</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-experiments

# Change to URL: https://github.com/decentraland/redux-persistence-engine-localstorage

# URL: https://github.com/decentraland/redux-persistence-engine-localstorage

<title>GitHub - decentraland/redux-persistence-engine-localstorage: LocalStorage engine for redux-persistence</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>LocalStorage engine for redux-persistence</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/redux-persistence-engine-localstorage</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>redux-persistence-engine-localstorage</h1>

<h3>LocalStorage engine for redux-persistence</h3>

<h2>Installation</h2>

<code>npm install --save redux-persistence-engine-localstorage</code>

<h2>Usage</h2>

<p>Stores everything inside</p>

<code>window.localStorage</code>

<p>.</p>

<p>You can customize the saving and loading process by providing a</p>

<code>replacer</code>

<p>and/or a</p>

<code>reviver</code>

<p>.</p>

<strong>Warning</strong>

<p>:</p>

<code>localStorage</code>

<p>does not expose a async API and every save/load

operation will block the JS thread!</p>

<strong>Warning</strong>

<p>: This library only works on browsers that support Promises (IE11 or better)</p>

<strong>Warning</strong>

<p>: If the browser doest not support LocalStorage, that should be handled before passing the engine to</p>

<code>redux-persistence</code>

<p>(see test)</p>

<h2>About</h2>

<p>LocalStorage engine for redux-persistence</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>18</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/redux-persistence

# URL: https://github.com/decentraland/redux-persistence

<title>GitHub - decentraland/redux-persistence: ð Persistence layer for redux with flexible backends</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Persistence layer for redux with flexible backends</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/redux-persistence</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>10</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ð redux-persistence</h1>

<h3>Persistence layer for redux with flexible backends</h3>

<h2>Features</h2>

<li>Flexible storage engines</li>

<li>: based on window.indexedDb</li>

<li>: based on window.localStorage</li>

<li>Or for environments without</li>

<code>Promise</code>

<li>support</li>

<li>: based on</li>

<code>react-native/AsyncStorage</code>

<li>: save/load via XHR</li>

<li>Flexible state merger functions</li>

<li>: merge plain old JS structures (default)</li>

<li>: merge plain old JS</li>

<strong>and</strong>

<li>objects</li>

<li>Storage engines can be async</li>

<li>Load and save actions that can be observed</li>

<code>{ type: 'REDUX_PERSISTENCE_SAVE', payload: /* state tree */ }</code>

<code>{ type: 'REDUX_PERSISTENCE_LOAD', payload: /* state tree */ }</code>

<li>Various engine decorators</li>

<li>: batch multiple save operations</li>

<li>: use different storage types</li>

<li>: only store a subset of the whole state tree</li>

<li>: load parts of the state tree as</li>

<li>objects</li>

<li>: versioned storage with migrations</li>

<li>Black- and whitelist actions from issuing a save operation</li>

<li>Proper storage limit handling</li>

<li>Typescript support out of the box</li>

<h2>Usage</h2>

<h2>Details</h2>

<h3>This is a fork of</h3>

<code>redux-storage</code>

<p>The original library has issues as old as 2017. This library is meant to fix some of those while also providing out-of-the-box typescript support.</p>

<h3>Engines, Decorators & Mergers</h3>

<p>They all are published as own packages on npm. But as a convention all engines

share the keyword</p>

<p>, decorators can be found

with</p>

<p>and mergers with</p>

<p>. So it's pretty trivial to find all

the additions to</p>

<p>you need ð</p>

<h3>Actions</h3>

<p>will trigger actions after every load or save operation from

the underlying engine.</p>

<p>You can use this, for example, to display a loading screen until the old state

has been restored like this:</p>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Middleware</h3>

<p>You can configure the middleware by passing a second argument to</p>

<code>createMiddleware</code>

<p>.</p>

<code>filterAction</code>

<p>Return</p>

<code>true</code>

<p>for any action that should be accepted by the middleware.</p>

<p>Example:</p>

<pre>:</pre>

<code>transform</code>

<p>Transform and return a new state before saving to the psrovided storage engine.</p>

<p>Example:</p>

<pre>:</pre>

<pre>...</pre>

<code>disableDispatchSaveAction</code>

<p>Don't dispatch a</p>

<code>REDUX_PERSISTENCE_SAVE</code>

<p>action after saving to the provided storage engine,</p>

<code>false</code>

<p>by default.</p>

<p>Example:</p>

<pre>:</pre>

<code>onError</code>

<p>Handle any errors thrown while trying to save to the provided storage engine.</p>

<p>Example:</p>

<pre>:</pre>

<h2>About</h2>

<p>ð Persistence layer for redux with flexible backends</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>17</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-eth

# URL: https://github.com/decentraland/decentraland-eth

<title>GitHub - decentraland/decentraland-eth: DEPRECATED - Ethereum common helpers for Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>DEPRECATED - Ethereum common helpers for Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-eth</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>22</strong>

<strong>63</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>84</strong>

<h2>Files</h2>

<button>View code</button>

<g-emoji>â ï¸</g-emoji>

<h1>DEPRECATED - This repository is no longer maintained</h1>

<h1>Ethereum Commons</h1>

<h1>Ethereum</h1>

<p>Set of utility functions to work with the Ethereum blockchain.</p>

<p>Calling</p>

<code>eth.connect()</code>

<p>should be enough to get you going. If you want to customize this this behaviour, you can check the breakdown below.</p>

<p>Implementations for all important Decentraland contracts live on the</p>

<code>/contracts</code>

<p>folder. An example of its use can be found below.</p>

<h3>index.js</h3>

<p>Main API to interface with web3. Acts as a global singleton and must be connected before calling any other method</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Contract</h3>

<p>An interface to work with Ethereum contracts, takes care of decoding contract data and of calls/transactions.</p>

<h3>txUtils.js</h3>

<p>A set of common utility functions to work with transactions</p>

<h2>Putting it all together</h2>

<p>The idea is to define your own</p>

<code>Contract</code>

<p>s and work with them using</p>

<code>eth</code>

<p>. A typical case is described below:</p>

<em>MANAToken.js</em>

<pre>:</pre>

<pre>:</pre>

<em>On the start of your app, maybe server.js</em>

<pre>:</pre>

<h3>Scripts</h3>

<strong>build</strong>

<p>Build the lib for use</p>

<strong>lint</strong>

<p>Lint TS files with</p>

<code>tslint</code>

<p>and DCL linter rules</p>

<strong>docs</strong>

<p>Builds an static page with the JSDoc documentation</p>

<strong>test</strong>

<p>Run tests using mocha and chai</p>

<code>./test.sh</code>

<h3>Release</h3>

<p>We use</p>

<p>to automate the release process of this package. Every time we merge to</p>

<code>master</code>

<p>, the CI will run</p>

<code>semantic-release</code>

<p>and it will publish a new version of the package. It will determine the next version of the package and it will generate release notes from the commit messages. That's why we enforce the following format for commit messages:</p>

<code>type: message</code>

<p>or</p>

<code>type(scope): messages</code>

<p>for example</p>

<code>feature(Map): added zoom levels</code>

<p>We use</p>

<p>and</p>

<p>to enforce this format on every commit.</p>

<h3>Continuous Deployment</h3>

<p>If you have decentraland-eth as a dependency and you're deploying to a Linux system, you might run into an error like this one:</p>

<p>.</p>

<p>The error comes from the installation of</p>

<code>node-hid</code>

<p>, you need to have</p>

<code>libusb</code>

<p>available for it to work, and it's not present in all Linux systems.</p>

<p>You can see an example of a fix in this repos</p>

<code>config.yml</code>

<p>file.</p>

<code>node-hid</code>

<p>is a dependency of</p>

<code>ledgerco</code>

<p>, which in turn is a dependency of</p>

<code>ledger-wallet-provider</code>

<p>, used by this lib.</p>

<h2>About</h2>

<p>DEPRECATED - Ethereum common helpers for Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>15</strong>

<h3>Watchers</h3>

<strong>25</strong>

<h3>Forks</h3>

<strong>9</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://decentraland.github.io/decentraland-eth/

# URL: https://decentraland.github.io/decentraland-eth/

<title>decentraland-eth</title>

<label>Search</label>

<li>Preparing search index...</li>

<li>The search index is not available</li>

<li>Public</li>

<li>Public/Protected</li>

<li>All</li>

<label>Inherited</label>

<label>Externals</label>

<label>Only exported</label>

<h1>decentraland-eth</h1>

<h1>Ethereum Commons</h1>

<h1>Ethereum</h1>

<p>Set of utility functions to work with the Ethereum blockchain.</p>

<p>Calling</p>

<code>eth.connect()</code>

<p>should be enough to get you going. If you want to customize this this behaviour, you can check the breakdown below.</p>

<p>Implementations for all important Decentraland contracts live on the</p>

<code>/contracts</code>

<p>folder. An example of its use can be found below.</p>

<h3>index.js</h3>

<p>Main API to interface with web3. Acts as a global singleton and must be connected before calling any other method</p>

<code>{ eth }</code>

<code>{ Contract }</code>

<code>abi = [

{</code>

<code>:</code>

<code>,</code>

<code>:</code>

<code>}

]</code>

<code>{</code>

<code>(address: string) {</code>

<code>(address, abi)

}

}</code>

<code>superTokenContract =</code>

<code>SuperTokenContract(</code>

<code>)

eth.connect({</code>

<code>: [superTokenContract]

})

eth.fetchTxStatus(</code>

<code>)</code>

<h3>Contract</h3>

<p>An interface to work with Ethereum contracts, takes care of decoding contract data and of calls/transactions.</p>

<code>{ Contract }</code>

<code>{ abi }</code>

<code>contract =</code>

<code>Contract(</code>

<code>, abi)</code>

<code>contract.sendCall(</code>

<code>, sender, receiver)</code>

<code>contract.transaction(</code>

<code>, manaValue)</code>

<h3>txUtils.js</h3>

<p>A set of common utility functions to work with transactions</p>

<code>{ txUtils }</code>

<code>status = eth.fetchTxStatus(</code>

<code>)</code>

<code>(txUtils.isPending(status)) {</code>

<code>}</code>

<h2>Putting it all together</h2>

<p>The idea is to define your own</p>

<code>Contract</code>

<p>s and work with them using</p>

<code>eth</code>

<p>. A typical case is described below:</p>

<em>MANAToken.js</em>

<code>{ eth }</code>

<code>{ abi }</code>

<code>{</code>

<code>(address: string) {</code>

<code>(address, abi)

}</code>

<code>lockMana(sender, mana) {</code>

<code>.transaction(</code>

<code>, sender, mana, {</code>

<code>:</code>

<code>})

}

}</code>

<code>MANAToken</code>

<em>On the start of your app, maybe server.js</em>

<code>{ eth, contracts }</code>

<code>manaToken =</code>

<code>contracts.MANAToken(</code>

<code>)

eth.connect({</code>

<code>: [

manaToken</code>

<code>]

})

manaToken.lockMana()</code>

<h3>Scripts</h3>

<strong>build</strong>

<p>Build the lib for use</p>

<strong>lint</strong>

<p>Lint TS files with</p>

<code>tslint</code>

<p>and DCL linter rules</p>

<strong>docs</strong>

<p>Builds an static page with the JSDoc documentation</p>

<strong>test</strong>

<p>Run tests using mocha and chai</p>

<h3>Release</h3>

<p>We use</p>

<p>to automate the release process of this package. Every time we merge to</p>

<code>master</code>

<p>, the CI will run</p>

<code>semantic-release</code>

<p>and it will publish a new version of the package. It will determine the next version of the package and it will generate release notes from the commit messages. That's why we enforce the following format for commit messages:</p>

<code>:</code>

<p>or</p>

<code>(scope): messages</code>

<p>for example</p>

<code>: added zoom levels</code>

<p>We use</p>

<p>and</p>

<p>to enforce this format on every commit.</p>

<h3>Continuous Deployment</h3>

<p>If you have decentraland-eth as a dependency and you're deploying to a Linux system, you might run into an error like this one:</p>

<p>.</p>

<p>The error comes from the installation of</p>

<code>node-hid</code>

<p>, you need to have</p>

<code>libusb</code>

<p>available for it to work, and it's not present in all Linux systems.</p>

<p>You can see an example of a fix in this repos</p>

<code>config.yml</code>

<p>file.</p>

<code>node-hid</code>

<p>is a dependency of</p>

<code>ledgerco</code>

<p>, which in turn is a dependency of</p>

<code>ledger-wallet-provider</code>

<p>, used by this lib.</p>

<em>Globals</em>

<wbr>Decentraland</wbr>

<wbr>Vesting"</wbr>

<wbr>Token"</wbr>

<wbr>Token"</wbr>

<wbr>Marketplace"</wbr>

<wbr>Mortgage</wbr>

<wbr>Creator"</wbr>

<wbr>Mortgage</wbr>

<wbr>Manager"</wbr>

<wbr>ReturnMANA"</wbr>

<wbr>Service</wbr>

<wbr>Locator"</wbr>

<wbr>Terraform</wbr>

<wbr>Reserve"</wbr>

<wbr>Contract"</wbr>

<wbr>Event"</wbr>

<wbr>Signed</wbr>

<wbr>Message"</wbr>

<wbr>Abi"</wbr>

<wbr>decoder"</wbr>

<wbr>Utils"</wbr>

<wbr>Utils"</wbr>

<wbr>Ledger</wbr>

<wbr>Wallet"</wbr>

<wbr>Node</wbr>

<wbr>Wallet"</wbr>

<wbr>Wallet"</wbr>

<h2>Legend</h2>

<p>Generated using</p>

# Change to URL: https://github.commodules/_contracts_decentralandvesting_.html

# Change to URL: https://github.com/decentraland/dcl-scene-writer

# URL: https://github.com/decentraland/dcl-scene-writer

<title>GitHub - decentraland/dcl-scene-writer: â Programmatically write DCL scenes</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>â Programmatically write DCL scenes</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-scene-writer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>12</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>53</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dcl-scene-writer</h1>

<h2>About</h2>

<p>â Programmatically write DCL scenes</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>20</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/proposals

# URL: https://github.com/decentraland/proposals

<title>GitHub - decentraland/proposals: Review of community proposals for Decentraland's art and applications</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Review of community proposals for Decentraland's art and applications</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/proposals</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>57</strong>

<h2>Files</h2>

<button>View code</button>

<p>Archived repository, please refer to</p>

<h1>Decentraland Proposals</h1>

<p>Submission, discussion and review of community proposals about how to improve Decentraland.</p>

<h2>How to participate</h2>

<p>The content of this repository contains the formalization of the specification for Decentraland's ecosystem, that comes from the issues submitted.</p>

<li>To start with, you can browse through</li>

<li>.</li>

<li>You can</li>

<li>.</li>

<li>You can also read about the</li>

<li>and submit a formal request for it.</li>

<h2>DSP: Decentraland Specifications Proposals</h2>

<p>A repository that serves as a source of technical information about the

protocols involved within Decentraland.</p>

<h3>Current DSPs</h3>

<li>Decentraland Specifications Proposals and Status</li>

<li>: The Decentraland Specifications Proposal Format</li>

<li>Contracts</li>

<li>: LANDRegistry</li>

<li>: Marketplace v1</li>

<li>: Marketplace v2</li>

<li>Fetching Resources to Render the World</li>

<li>: Parcel Manifest Format</li>

<li>: Loading Parcel Content</li>

<li>Scripting Scenes</li>

<li>: Decentraland Scripting</li>

<li>: Entities Components and Systems</li>

<li>: Portable experiences</li>

<h3>Wishlist</h3>

<li>DSD011: The Terraforming Event</li>

<li>DSD030: WebRTC Signalling Server Specification</li>

<li>DSD040: Serving content over IPFS</li>

<li>DSD060: UX for the in-world experience</li>

<h2>About</h2>

<p>Review of community proposals for Decentraland's art and applications</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>46</strong>

<h3>Watchers</h3>

<strong>38</strong>

<h3>Forks</h3>

<strong>16</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-proposals

# Change to URL: https://github.com/dsp-decentraland-specifications-proposals

# Change to URL: https://github.com/decentraland/decentraland-commons

# URL: https://github.com/decentraland/decentraland-commons

<title>GitHub - decentraland/decentraland-commons: ð  Set of common functionality across Decentraland projects.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð  Set of common functionality across Decentraland projects.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-commons</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>19</strong>

<strong>44</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>313</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Commons</h1>

<p>Set of common functionality accross Decentraland projects.</p>

<h3>Scripts</h3>

<strong>build</strong>

<p>Build the lib for use</p>

<strong>lint</strong>

<p>Lint js files with</p>

<code>tslint</code>

<strong>docs</strong>

<p>Builds an static page with the JSDoc documentation</p>

<strong>test</strong>

<p>Run tests using mocha and chai</p>

<h3>Release</h3>

<p>We use</p>

<p>to automate the release process of this package. Every time we merge to</p>

<code>master</code>

<p>, the CI will run</p>

<code>semantic-release</code>

<p>and it will publish a new version of the package. It will determine the next version of the package and it will generate release notes from the commit messages. That's why we enforce the following format for commit messages:</p>

<code>type: message</code>

<p>or</p>

<code>type(scope): messages</code>

<p>for example</p>

<code>feature(Map): added zoom levels</code>

<p>We use</p>

<p>and</p>

<p>to enforce this format on every commit.</p>

<h3>Continuous Deployment</h3>

<p>If you have commons as a dependency and you're deploying to a Linux system, you might run into an error like this one:</p>

<p>.</p>

<p>The error comes from the installation of</p>

<code>node-hid</code>

<p>, you need to have</p>

<code>libusb</code>

<p>available for it to work, and it's not present in all Linux systems.</p>

<p>You can see an example of a fix in this repos</p>

<code>config.yml</code>

<p>file.</p>

<code>node-hid</code>

<p>is a dependency of</p>

<code>ledgerco</code>

<p>, which in turn is a dependency of</p>

<code>ledger-wallet-provider</code>

<p>, used by this lib.</p>

<h2>About</h2>

<p>ð  Set of common functionality across Decentraland projects.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>17</strong>

<h3>Watchers</h3>

<strong>24</strong>

<h3>Forks</h3>

<strong>13</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/marketplace-legacy

# URL: https://github.com/decentraland/marketplace-legacy

<title>GitHub - decentraland/marketplace-legacy: ðï¸ Decentraland's LAND Marketplace</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ðï¸ Decentraland's LAND Marketplace</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/marketplace-legacy</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>26</strong>

<strong>67</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,151</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Marketplace</h1>

<p>'s LAND Marketplace</p>

<h2>Running the project</h2>

<p>The core technologies of the marketplace are:</p>

<li>and</li>

<li>for the front end</li>

<li>,</li>

<li>nodes and a wallet to use on the browser (</li>

<li>for example).</li>

<li>to transpile the code and</li>

<li>alongside</li>

<li>to lint the code</li>

<p>Once those dependencies are installed you can configure each part of the project.</p>

<p>The backend lives on the</p>

<code>/src</code>

<p>folder and the front on the</p>

<code>/webapp</code>

<p>folder.</p>

<p>Keep in mind that both sides use</p>

<code>dotenv</code>

<p>via</p>

<p>to configure the environment. As such, you'll need to create your own</p>

<code>.env</code>

<p>files, following the</p>

<code>.env.example</code>

<p>s located on each folder.</p>

<p>First of all, you'll need to run</p>

<code>npm install</code>

<p>on both directories. Once that's done, you can move to configuring each part:</p>

<h3>Back-end</h3>

<strong>Creating the DB user</strong>

<li>Create a PostgreSQL named marketplace. You can do it running</li>

<code>$ createuser marketplace</code>

<li>on the terminal or by running the query</li>

<code>CREATE USER marketplace;</code>

<strong>Creating the database</strong>

<li>You'll need to create a</li>

<code>marketplace</code>

<li>database. You can do it running</li>

<code>$ createdb -O marketplace marketplace</code>

<li>on the terminal or by running the query</li>

<code>CREATE DATABASE marketplace OWNER marketplace;</code>

<li>. You can create a</li>

<code>marketplace_test</code>

<li>database if you want to run tests against it.</li>

<strong>Adding the .env files</strong>

<li>Create a</li>

<code>.env</code>

<li>file on the</li>

<code>/src</code>

<li>folder and fill it following the</li>

<code>.env.example</code>

<li>file found there. You can skip most variables as they have a default value. There are some notable exceptions like</li>

<code>CONNECTION_STRING</code>

<li>which might look something like</li>

<code>CONNECTION_STRING="postgres://localhost:5432/marketplace"</code>

<strong>Migrate the database</strong>

<li>Once you have your database you can go ahead and run the database migrations. To do it, simply run</li>

<code>npm run migrate up</code>

<li>. We use</li>

<li>behind the scenes and every argument after</li>

<code>migrate</code>

<li>will be forwarded to it. You environment will be picked up automatically from the</li>

<code>/src/.env</code>

<li>file, but you can override the</li>

<code>CONNECTION_STRING</code>

<li>by explicitly adding it like this</li>

<code>CONNECTION_STRING='' npm run migrate up</code>

<strong>Running the initialize script</strong>

<li>Just run</li>

<code>npm run init-db</code>

<li>. Once it finishes seeding the database, the script will prompt you to add the latest data from the Blockchain to the database. You'll need to have a Ethereum node for this to work (see below). If you want to run that later, you can use</li>

<code>npm run renew-blockchain-data</code>

<li>.</li>

<strong>Running an Ethereum node</strong>

<li>If you want to be able to get data from the Ethereum blockchain, you'll need to have a node running on</li>

<code>http://localhost:8545</code>

<li>. You can use</li>

<li>,</li>

<li>, etc.</li>

<strong>Running the server</strong>

<li>To run the server, go to the</li>

<code>/src</code>

<li>folder and run the</li>

<code>server.js</code>

<li>script like this</li>

<code>babel-node server.js</code>

<strong>Run watchers</strong>

<li>If you want to keep your database up-to-date with the blockchain, you need to run this watcher:</li>

<code>npm run monitor-blockchain</code>

<li>. Keep in mind that the address you use for each contract will determine the network. For more information in event watching, check</li>

<li>.</li>

<p>If you don't want to install</p>

<code>babel-node</code>

<p>globally, you can use</p>

<p>and install it locally.</p>

<h3>Front-end</h3>

<strong>Adding the .env files</strong>

<li>Create an</li>

<code>.env</code>

<li>file on the</li>

<code>/webapp</code>

<li>folder and fill it following the</li>

<code>.env.example</code>

<li>file found there. You will need to specify</li>

<code>NODE_PATH</code>

<li>to be</li>

<code>src/</code>

<li>,</li>

<code>REACT_APP_API_URL</code>

<li>to be</li>

<code>http://localhost:5000/v1</code>

<li>(unless you changed the default server configuration, if so point to the right</li>

<code>host:port</code>

<li>) and</li>

<code>REACT_APP_MANA_TOKEN_CONTRACT_ADDRESS</code>

<li>to Ropsten's MANAToken address:</li>

<code>0x2a8fd99c19271f4f04b1b7b9c4f7cf264b626edb</code>

<li>.</li>

<strong>Running the front-end</strong>

<li>You will need to first have the server running (see above). After that just jump into the webapp folder</li>

<code>$ cd webapp</code>

<li>and start the local development</li>

<code>$ npm start</code>

<h3>Shared code</h3>

<p>There's a</p>

<code>/shared</code>

<p>directory where some of the logic shared between backend and frontend lives (i.e. everything related to rendering the map). We have symlinks that point to this directory from the</p>

<code>src</code>

<p>directories of the server and the UI (</p>

<code>src/shared</code>

<p>and</p>

<code>webapp/src/shared</code>

<p>). This symlinks have been versioned in this repo, but if for some reason they don't work (Windows?) you will need to recreate them in order to</p>

<code>npm start</code>

<p>or</p>

<code>npm build</code>

<p>this project.</p>

<h3>Tests</h3>

<p>To run the backend tests simply run</p>

<code>npm run test</code>

<p>or</p>

<code>npm run watch:test</code>

<p>. You'll need to create your own</p>

<code>.env</code>

<p>file for the</p>

<code>/specs</code>

<p>file mimicking the</p>

<code>.env.example</code>

<p>file that's in there. We do this so you can for example use a dedicated database</p>

<code>CONNECTION_STRING="postgres://localhost:5432/marketplace_test"</code>

<p>.

Remember that if you're using a test database, you'll need to migrate it. You can run</p>

<code>CONNECTION_STRING="postgres://localhost:5432/marketplace_test" npm run migrate up</code>

<p>to do so.</p>

<h2>Migrations</h2>

<p>To keep your database up to date, you'll need to run</p>

<code>npm run migrate up</code>

<p>each time a new migration is introduced. Your database version lives on the</p>

<code>pgmigrations</code>

<p>. Check</p>

<p>for more info.</p>

<h2>Seed</h2>

<p>If you need some test data to test the marketplace, you can use the seed for quick features. Run</p>

<code>npm run seed generate MODEL_NAME -- --amount NUMBER</code>

<p>, (which will look something like this</p>

<code>npm run seed generate Publication -- --amount 2</code>

<p>) and follow the prompts</p>

<h2>Translate</h2>

<p>You can translate automatically from English to the other locales by running the command</p>

<code>npm run translate</code>

<p>, this command will compare all the other locales to</p>

<code>en.json</code>

<p>and if it finds any missing translation it will use Google Translate to add it to the corresponding locale.</p>

<h2>API</h2>

<p>We have documentation for our HTTP API that can be</p>

<p>.</p>

<h2>About</h2>

<p>ðï¸ Decentraland's LAND Marketplace</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>125</strong>

<h3>Watchers</h3>

<strong>37</strong>

<h3>Forks</h3>

<strong>41</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/commons

# URL: https://github.com/decentraland/commons

<title>GitHub - decentraland/decentraland-commons: ð  Set of common functionality across Decentraland projects.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð  Set of common functionality across Decentraland projects.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-commons</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>19</strong>

<strong>44</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>313</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Commons</h1>

<p>Set of common functionality accross Decentraland projects.</p>

<h3>Scripts</h3>

<strong>build</strong>

<p>Build the lib for use</p>

<strong>lint</strong>

<p>Lint js files with</p>

<code>tslint</code>

<strong>docs</strong>

<p>Builds an static page with the JSDoc documentation</p>

<strong>test</strong>

<p>Run tests using mocha and chai</p>

<h3>Release</h3>

<p>We use</p>

<p>to automate the release process of this package. Every time we merge to</p>

<code>master</code>

<p>, the CI will run</p>

<code>semantic-release</code>

<p>and it will publish a new version of the package. It will determine the next version of the package and it will generate release notes from the commit messages. That's why we enforce the following format for commit messages:</p>

<code>type: message</code>

<p>or</p>

<code>type(scope): messages</code>

<p>for example</p>

<code>feature(Map): added zoom levels</code>

<p>We use</p>

<p>and</p>

<p>to enforce this format on every commit.</p>

<h3>Continuous Deployment</h3>

<p>If you have commons as a dependency and you're deploying to a Linux system, you might run into an error like this one:</p>

<p>.</p>

<p>The error comes from the installation of</p>

<code>node-hid</code>

<p>, you need to have</p>

<code>libusb</code>

<p>available for it to work, and it's not present in all Linux systems.</p>

<p>You can see an example of a fix in this repos</p>

<code>config.yml</code>

<p>file.</p>

<code>node-hid</code>

<p>is a dependency of</p>

<code>ledgerco</code>

<p>, which in turn is a dependency of</p>

<code>ledger-wallet-provider</code>

<p>, used by this lib.</p>

<h2>About</h2>

<p>ð  Set of common functionality across Decentraland projects.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>17</strong>

<h3>Watchers</h3>

<strong>24</strong>

<h3>Forks</h3>

<strong>13</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=10

# URL: https://github.com/orgs/decentraland/repositories?page=10

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>ðAgora is an off-chain governance tool for decentralized communities.</p>

<p>ð¡ Sandboxed code execution + Plugins + JSON-RPC engine</p>

<p>Calculator for Curations Committee payments</p>

<p>Automatically deploy scenes using GitHub+CircleCI</p>

<p>ðð¼âE2E testing for dApps using Puppeteer + MetaMask</p>

<p>Tools for generating semi-random noise based on the Perlin and Simplex algorithms, to simulate an organic kind of randomness.</p>

<p>Snapshot voting strategies</p>

<p>Decentraland's Catalyst Comms Peer</p>

<p>Actix-web middleware to expose Prometheus metrics</p>

<p>Transport for comms V3</p>

<p>Technical Tutorials for the Documentation hub</p>

<p>Documentation for the content creators section of docs.decentraland.org</p>

<p>ð What is Decentraland?</p>

<p>SDK Playground</p>

<p>API specification for the DCL Quests Server</p>

<em>10</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/agora

# URL: https://github.com/decentraland/agora

<title>GitHub - decentraland/agora: ðAgora is an off-chain governance tool for decentralized communities.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ðAgora is an off-chain governance tool for decentralized communities.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/agora</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>24</strong>

<strong>17</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>176</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Agora</h1>

<p>A place for the Decentraland community to vote on important topics</p>

<h2>Running the project</h2>

<p>The core technologies of the marketplace are:</p>

<li>and</li>

<li>for the front end</li>

<li>,</li>

<li>nodes and a wallet to use on the browser (</li>

<li>for example).</li>

<li>for static type checking and code transpilation</li>

<li>alongside</li>

<li>to lint the code</li>

<p>Once those dependencies are installed you can configure each part of the project.</p>

<p>The backend lives on the</p>

<code>/src</code>

<p>folder and the front on the</p>

<code>/webapp</code>

<p>folder.</p>

<p>Keep in mind that both sides use</p>

<code>dotenv</code>

<p>via</p>

<p>to configure the environment. As such, you'll need to create your own</p>

<code>.env</code>

<p>files, following the</p>

<code>.env.example</code>

<p>s located on each folder.</p>

<p>First of all, you'll need to run</p>

<code>npm install</code>

<p>on both directories. Once that's done, you can move to configuring each part:</p>

<h3>Back-end</h3>

<strong>Creating the DB user</strong>

<li>Create a PostgreSQL named agora. You can do it running</li>

<code>$ createuser agora</code>

<li>on the terminal or by running the query</li>

<code>CREATE USER agora;</code>

<strong>Creating the database</strong>

<li>You'll need to create a</li>

<code>agora</code>

<li>database. You can do it running</li>

<code>$ createdb -O agora agora</code>

<li>on the terminal or by running the query</li>

<code>CREATE DATABASE agora OWNER agora;</code>

<li>.</li>

<strong>Adding the .env files</strong>

<li>Create a</li>

<code>.env</code>

<li>file on the</li>

<code>/src</code>

<li>folder and fill it following the</li>

<code>.env.example</code>

<li>file found there. You can skip most variables as they have a default value. There are some notable exceptions like</li>

<code>CONNECTION_STRING</code>

<li>which might look something like</li>

<code>CONNECTION_STRING="postgres://localhost:5432/agora"</code>

<strong>Migrate the database</strong>

<li>Once you have your database you can go ahead and run the database migrations. To do it, simply run</li>

<code>npm run migrate up</code>

<li>. We use</li>

<li>behind the scenes and every argument after</li>

<code>migrate</code>

<li>will be forwarded to it. You environment will be picked up automatically from the</li>

<code>/src/.env</code>

<li>file, but you can override the</li>

<code>CONNECTION_STRING</code>

<li>by explicitly adding it like this</li>

<code>CONNECTION_STRING='' npm run migrate up</code>

<strong>Running the initialize script</strong>

<li>Just run</li>

<code>npm run init-db</code>

<li>.</li>

<strong>Running an Ethereum node</strong>

<li>If you want to be able to get data from the Ethereum blockchain, you'll need to have a node running on</li>

<code>http://localhost:8545</code>

<li>. You can use</li>

<li>,</li>

<li>, etc.</li>

<strong>Running the server</strong>

<li>To run the server just run</li>

<code>npm start</code>

<li>on the repo root directory.</li>

<strong>Run watchers</strong>

<li>If you want to keep your database up-to-date with the blockchain, you need to run this watcher:</li>

<code>npm run monitor-balances</code>

<li>. Keep in mind that the address you use for each contract will determine the network. For more information in event watching, check</li>

<li>.</li>

<h3>Front-end</h3>

<strong>Adding the .env files</strong>

<li>Create an</li>

<code>.env</code>

<li>file on the</li>

<code>/webapp</code>

<li>folder and fill it following the</li>

<code>.env.example</code>

<li>file found there. You will need to specify</li>

<code>NODE_PATH</code>

<li>to be</li>

<code>src/</code>

<li>,</li>

<code>REACT_APP_API_URL</code>

<li>to be</li>

<code>http://localhost:5000</code>

<li>(unless you changed the default server configuration, if so point to the right</li>

<code>host:port</code>

<li>) and</li>

<code>REACT_APP_MANA_TOKEN_CONTRACT_ADDRESS</code>

<li>to Ropsten's MANAToken address:</li>

<code>0x2a8fd99c19271f4f04b1b7b9c4f7cf264b626edb</code>

<li>.</li>

<strong>Running the front-end</strong>

<li>You will need to first have the server running (see above). After that just jump into the webapp folder</li>

<code>$ cd webapp</code>

<li>and start the local development</li>

<code>$ npm start</code>

<h2>Migrations</h2>

<p>To keep your database up to date, you'll need to run</p>

<code>npm run migrate up</code>

<p>each time a new migration is introduced. Your database version lives on the</p>

<code>pgmigrations</code>

<p>. Check</p>

<p>for more info.</p>

<h2>Seed</h2>

<p>If you need some test data to test the marketplace, you can use the seed for quick features. Run</p>

<code>npm run seed generate MODEL_NAME -- --amount NUMBER</code>

<h2>Translate</h2>

<p>You can translate automatically from English to the other locales by running the command</p>

<code>npm run translate</code>

<p>, this command will compare all the other locales to</p>

<code>en.json</code>

<p>and if it finds any missing translation it will use Google Translate to add it to the corresponding locale.</p>

<h2>About</h2>

<p>ðAgora is an off-chain governance tool for decentralized communities.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>16</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>13</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-rpc

# URL: https://github.com/decentraland/decentraland-rpc

<title>GitHub - decentraland/decentraland-rpc: ð¡ Sandboxed code execution + Plugins + JSON-RPC engine</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¡ Sandboxed code execution + Plugins + JSON-RPC engine</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-rpc</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>18</strong>

<strong>32</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>196</strong>

<h2>Files</h2>

<button>View code</button>

<p>Archived. Evolved into</p>

<p>.</p>

<code>decentraland-rpc</code>

<p>This repository contains the low-level API that runs the sandboxed code for Decentralands LANDs.</p>

<h2>Scripting</h2>

<p>Scripts are pieces of logic that run inside the context of a Web Worker. Although it's not currently used in the Decentraland specification, it also supports scenes remotely run on a server. The scripts provide the logic that is run inside the player's client. These methods are the lowest level communication layer to the scripting host (generally the</p>

<p>) and consumed by the scripting client (usually the</p>

<p>alongside the code written by users).</p>

<h2>Transports</h2>

<p>The scripts communicate with the host application thru a JSON-RPC2 based protocol using a defined transport. We have 3 built in transports.</p>

<li>: Used to load a sandboxed script locally, inside a WebWorker</li>

<li>: Used to run scripts in remote servers</li>

<li>: Used to run tests, mainly. The script runs in the same execution context as the host.</li>

<h2>Scripting host</h2>

<p>The</p>

<p>is a core piece that instanciates APIs and handles incoming/outgoing messages from the scripts.</p>

<h2>APIs</h2>

<p>APIs work as a bridge between user-created scripts and the lower level APIs of the client (communication, 3D entity management, etc). It provides a set of exposed methods that can be accessed from the script context. These methods are</p>

<code>async</code>

<p>by default and Promises are used as hooks for events that may be triggered in the future (HTTP Responses, entity collisions, etc).</p>

<p>The</p>

<code>@exposeMethod</code>

<p>decorator is provided as means of exposing API methods to the Script.</p>

<p>An example implementation can be found at</p>

<h3>See also</h3>

<h2>Scripts</h2>

<p>The term "script" or sometimes "system" refers to the instance of a user-created script, normally running inside a Web Worker. To access an API instance the decorator</p>

<code>@inject(apiName: string)</code>

<p>function is used. From then on, the user will be able to call all exposed methods and</p>

<code>await</code>

<p>the promises returned by them.</p>

<p>An example implementation can be found at</p>

<h3>See also</h3>

<h1>Related documents</h1>

<p>Why do we create a component based system?</p>

<h1>Decentraland Compiler</h1>

<p>The Decentraland Compiler is a task runner used to build both the Decentraland client, as well as the scenes before deployment.</p>

<p>It must be configured though a</p>

<code>build.json</code>

<p>file in the same folder where it's executed.</p>

<pre>[

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]</pre>

<p>The following command runs the "webpack" kind of task:</p>

<code>decentraland-compiler build.json</code>

<p>It can also be run in watch mode:</p>

<code>decentraland-compiler build.json --watch</code>

<p>To use custom loaders (Webpack builds only) refer to</p>

<h2>Licence</h2>

<p>This repository is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>ð¡ Sandboxed code execution + Plugins + JSON-RPC engine</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>21</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-rpc

# Change to URL: https://github.com/decentraland-compiler

# Change to URL: https://github.com/decentraland/dao-curations-calc

# URL: https://github.com/decentraland/dao-curations-calc

<title>GitHub - decentraland/dao-curations-calc: Calculator for Curations Committee payments</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Calculator for Curations Committee payments</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dao-curations-calc</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>15</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DAO Curations calculator</h1>

<p>This repo is a tool to calculate the fees earned by the curations committee</p>

<h3>Payment rule</h3>

<p>Until 2021-11-25T16:30:00.000Z, fee was 500 MANA and curators were getting 50 MANA

Until 2022-07-18T13:00:00.000Z, fee was 100 MANA and curators were getting 10 MANA

After Polygon block 30863471, curators get nodenodenode</p>

<h2>About</h2>

<p>Calculator for Curations Committee payments</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/worlds-owner

# URL: https://github.com/decentraland/worlds-owner

<title>GitHub - decentraland/worlds-owner</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/worlds-owner</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>16</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Worlds Management</h1>

<p>Welcome to the Worlds management tool!</p>

<p>Here you will find everything you need to set up you our Worlds server.</p>

<h2>Set up</h2>

<h3>Requirements</h3>

<li>You will need to have</li>

<li>installed.</li>

<li>The initialization script runs on Bash. It has not been tested on Windows.</li>

<p>To run a public server, you will also need to:</p>

<li>Have a public domain pointing to your server.</li>

<li>Your server will need to have the HTTP and HTTPS ports open (80 and 443).</li>

<h3>What you will need to configure</h3>

<p>To configure your node, you will have to set some variables in the</p>

<p>file:</p>

<th>Name</th>

<th>Description</th>

<th>Default</th>

<th>Required</th>

<td>EMAIL</td>

<td>Needed to handle the TLS certificates. For example, you will be notified when they are about to expire.</td>

<td>-</td>

<td>yes</td>

<td>HOSTNAME</td>

<td>The public hostname pointing to your server (e.g.</td>

<code>name.domain.com</code>

<td>).</td>

<td>-</td>

<td>yes</td>

<td>WORLDS_CONTENT_SERVER_DOCKER_TAG</td>

<td>The tag of the docker image for the</td>

<td>.</td>

<td>latest</td>

<td>no</td>

<td>WS_ROOM_SERVICE_DOCKER_TAG</td>

<td>The tag of the docker image for the</td>

<td>.</td>

<td>latest</td>

<td>no</td>

<td>MARKETPLACE_SUBGRAPH_URL</td>

<td>The public URL of a Decentraland Marketplace subgraph instance. Defaults to</td>

<code>https://api.thegraph.com/subgraphs/name/decentraland/marketplace</code>

<td>-</td>

<td>no</td>

<h2>Running your Worlds server</h2>

<p>After you have configured everything, all you need to do is run:</p>

<pre>./init.sh</pre>

<h4>How to make sure that your Worlds server is running</h4>

<p>Once you started your Worlds server, after a few seconds you should be able

to test the content services by accessing the URL</p>

<code>https://your-host-name/content/about</code>

<p>in the browser.</p>

<h2>Updating your Worlds server</h2>

<p>To update your Worlds server to a newer version, you can do the same as above:</p>

<pre>./init.sh</pre>

<h2>Stopping your Worlds server</h2>

<p>To stop a specific container on your server:</p>

<pre>docker compose stop container-name</pre>

<p>where</p>

<code>container-name</code>

<p>can be one of</p>

<code>worlds-owner-nginx</code>

<p>,</p>

<code>worlds-owner-certbot</code>

<p>,</p>

<code>worlds-owner-content-server</code>

<p>or</p>

<code>worlds-owner-room-service</code>

<p>.</p>

<p>To stop the whole server:</p>

<pre>docker compose stop</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/debug-comms

# URL: https://github.com/decentraland/debug-comms

<title>GitHub - decentraland/debug-comms</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/debug-comms</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraform

# URL: https://github.com/decentraland/decentraform

<title>GitHub - decentraland/decentraform: Automatically deploy scenes using GitHub+CircleCI</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Automatically deploy scenes using GitHub+CircleCI</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraform</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>decentraform</h1>

<p>Automatically deploy scenes to Decentraland using git</p>

<h2>Motivation</h2>

<p>For a large land owner, it might be difficult to keep track of which scenes should be deployed where. Additionally, a district or an organization might have multiple users trying to deploy. This project is an attempt at optimizing the process to deploy scenes for such users.</p>

<h2>Usage</h2>

<p>This repository uses CircleCI to automatically update scenes on Decentraland. It has three main systems:</p>

<li>Configuration: map which private key to use to deploy each parcel</li>

<li>Scenes: used to organize the latest versions of the pool of scenes to be deployed</li>

<li>Planning: a step comparing the desired state of the deployments vs the actual current deployments on a content server</li>

<li>Deploy: execution of the plan to deploy</li>

<h2>Configuration</h2>

<em>Warning</em>

<p>: Dealing with secrets is dangerous. Make sure you don't hold private keys on your systems (not even temporarily) more than you need. Avoid saving such keys to disk, specially unencrypted. Avoid storing them on your clipboard or any temporary medium that might be watched by processes on the system. Always prefer to use the least amount of privileges, both regarding the permissions of the user or active account, as well as leveraging things like UpdateOperators on LAND and Estate tokens.</p>

<p>The folder</p>

<code>config</code>

<p>contains these files and folders:</p>

<p>addresses.json: maps</p>

<code>x,y</code>

<p>coordinates to the address to use for deployment</p>

<p>keys: a folder to be filled with files that use the Ethereum encrypted private key file format</p>

<p>The deployment phase expects to find the encryption key to open the files on the</p>

<code>keys</code>

<p>folder in an environment variable with the prefix</p>

<code>UNLOCK_</code>

<p>and the ethereum address, with checksum casing, as the suffix.</p>

<h2>Scenes</h2>

<p>The folder</p>

<code>scenes</code>

<p>is where the working copy of all scenes created shall be placed. The intended use of this is to freely download builder scenes in here.</p>

<h2>Planning</h2>

<h3>User Instructions</h3>

<p>Fill in</p>

<code>deploy.json</code>

<p>files on subfolders on the the</p>

<code>deploys</code>

<p>folder. It's recommended to use the</p>

<code>XX-name</code>

<p>convention to organize these files, so as to mark the order in which potentially conflicting rules will be prioritized. Use cases include overriding a deployment temporarily by creating a more prioritary deploy and then delete that file, or overriding a template-based road deployment with a custom one. For example, a folder named</p>

<code>01-roads-automated</code>

<p>might include the automatically generated deployment for a road on</p>

<code>10,10</code>

<p>, but then a folder named</p>

<code>10-road-override</code>

<p>might override that with a scene created with the builder that sports a sign with a name.</p>

<code>deploys

âââ 00-genesis-plaza

âÂ Â  âââ deploy.json

âââ 01-roads-automated

âÂ Â  âââ deploy.json

âââ 02-road-override

âÂ Â  âââ 00-road.-10.10

âÂ Â  âÂ Â  âââ deploy.json

âÂ Â  âââ no-need-to-prioritize-folders.-100.23

âÂ Â      âââ deploy.json

âââ 10-vegas-plaza

âÂ Â  âââ deploy.json

âââ 20-this-will-override-vegas

âÂ Â  âââ deploy.json

âââ voltaire-district-foldernames-can-start-with-anything

âââ deploy.json</code>

<h3>Execution:</h3>

<code>yarn run plan</code>

<li>Generation of</li>

<code>targets</code>

<p>The folder</p>

<code>targets</code>

<p>is created, overriding the values on</p>

<code>scene.json</code>

<p>files to match the information (issuing warnings in the process). These</p>

<code>targets</code>

<p>will follow the same folder structure as the</p>

<code>deploys</code>

<p>folder, but instead of only having</p>

<code>deploys.json</code>

<p>files, it would have the whole source code required for building the scenes.</p>

<li>Validation & Comparison</li>

<p>All the scenes on the</p>

<code>targets</code>

<p>folder are checked against the deployed scenes. A list of deploy targets is crafted, with the folders that would need to be deployed in a file named</p>

<code>plan.json</code>

<p>.</p>

<h2>Deployment:</h2>

<code>yarn run deploy</code>

<p>This will:</p>

<li>Read the</li>

<code>plan.json</code>

<li>file</li>

<li>Execute the deployments</li>

<h1>License</h1>

<p>This code is available under the Apache-2.0 open source license.</p>

<h2>About</h2>

<p>Automatically deploy scenes using GitHub+CircleCI</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dappeteer

# URL: https://github.com/decentraland/dappeteer

<title>GitHub - decentraland/dappeteer: ðð¼âE2E testing for dApps using Puppeteer + MetaMask</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ðð¼âE2E testing for dApps using Puppeteer + MetaMask</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dappeteer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>72</strong>

<h2>Files</h2>

<button>View code</button>

<strong>DEPRECATED</strong>

<h1>- no longer actively maintained</h1>

<p>You can find active and updated fork at</p>

<h1>dAppeteer</h1>

<p>E2E testing for dApps using Puppeteer + MetaMask</p>

<h2>Installation</h2>

<code>$ npm install -s dappeteer</code>

<h2>Usage</h2>

<h2>API</h2>

<code>dappeteer.launch(puppeteer[, launchOptions])</code>

<p>: returns an instance of</p>

<code>browser</code>

<p>, same as</p>

<code>puppeteer.launch</code>

<p>, but it also installs the MetaMask extension. It supports all the regular</p>

<code>puppeteer.launch</code>

<p>options as a second argument with the addition of two extra ones:</p>

<code>metamaskPath</code>

<p>: Path to the MetaMask extension (by default it uses the one bundled)</p>

<code>extensionUrl</code>

<p>: URL of the MetaMask extension, by default it is</p>

<code>chrome-extension://nkbihfbeogaeaoehlefnkodbefgpgknn/popup.html</code>

<p>but if you use a different version you might need to change it use the right extension id.</p>

<code>dappeteer.getMetaMask(browser)</code>

<p>: returns a promise that resolves to an object that allows you to interact with MetaMask by using the following methods:</p>

<code>metamask.createAccount([password])</code>

<p>: it commands MetaMask to create a new account, it resolves when it's done. It can only be used while you haven't signed in yet, otherwise it throws. The password is optional, it defaults to</p>

<code>password1234</code>

<p>.</p>

<code>metamask.importAccount(seed[, password])</code>

<p>: it commands MetaMask to import an account, you need to provide the twelve words seed. It can only be used while you haven't signed in yet, otherwise it throws. The password is optional, it defaults to</p>

<code>password1234</code>

<p>.</p>

<code>metamask.switchAccount(accountIndex)</code>

<p>: it commands MetaMask to switch to a different account, by passing the index/position of the account in the accounts list.</p>

<code>metamask.importPK(privateKey)</code>

<p>: it commands MetaMask to import an private key. It can only be used while you haven't signed in yet, otherwise it throws.</p>

<code>metamask.lock()</code>

<p>: signs out from MetaMask. It can only be used if you arelady signed it, otherwise it throws.</p>

<code>metamask.unlock([password])</code>

<p>: it unlocks the MetaMask extension. It can only be used in you locked/signed out before, otherwise it throws. The password is optional, it defaults to</p>

<code>password1234</code>

<p>.</p>

<code>metamask.switchNetwork(networkName)</code>

<p>: it changes the current selected network.</p>

<code>networkName</code>

<p>can take the following values:</p>

<code>"main"</code>

<p>,</p>

<code>"ropsten"</code>

<p>,</p>

<code>"rinkeby"</code>

<p>,</p>

<code>"kovan"</code>

<p>,</p>

<code>"localhost"</code>

<p>.</p>

<code>metamask.addNetwork(url)</code>

<p>: it adds a custom network to MetaMask.</p>

<code>metamask.confirmTransaction([{ gas, gasLimit }])</code>

<p>: commands MetaMask to submit a transaction. For this to work MetaMask has to be in a transaction confirmation state (basically promting the user to submit/reject a transaction). You can (optionally) pass an object with</p>

<code>gas</code>

<p>and/or</p>

<code>gasLimit</code>

<p>, by default they are</p>

<code>20</code>

<p>and</p>

<code>50000</code>

<p>respectively.</p>

<code>metamask.sign()</code>

<p>: commands MetaMask to sign a message. For this to work MetaMask must be in a sign confirmation state.</p>

<code>metamask.approve()</code>

<p>: enables the app to connect to MetaMask account in privacy mode</p>

<h2>About</h2>

<p>ðð¼âE2E testing for dApps using Puppeteer + MetaMask</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>240</strong>

<h3>Watchers</h3>

<strong>25</strong>

<h3>Forks</h3>

<strong>64</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/crdt

# URL: https://github.com/decentraland/crdt

<title>GitHub - decentraland/crdt</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/crdt</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Migrated to</h2>

<h2>CRDT Protocol</h2>

<p>Example</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/migrated-to-httpsgithubcomdecentralandjs-sdk-toolchain

# Change to URL: https://github.com/decentraland/decentraland-noise-utils

# URL: https://github.com/decentraland/decentraland-noise-utils

<title>GitHub - decentraland/decentraland-noise-utils: Tools for generating semi-random noise based on the Perlin and Simplex algorithms, to simulate an organic kind of randomness.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Tools for generating semi-random noise based on the Perlin and Simplex algorithms, to simulate an organic kind of randomness.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-noise-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>12</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>38</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Noise Utils Library</h1>

<p>This library includes tools for generating semi-random noise based on the Perlin and Simplex algorithms. These are used to generate random sequences of values that have a similarity to the kind of randomness we see in nature. The result is not chaotic noise, but rather smooth curves that trend up and down randomly, and always keeping a fairly even balance.</p>

<h2>Background</h2>

<p>Both Simplex and Perlin Noise are algorithms that are commonly used in new-media art, games, and countless other applications to simulate a kind of randomness that seems natural, that transitions smoothly from one state to another.</p>

<p>Perlin Noise was developed in the 80s by Ken Perlin, then later in the early 2000s Ken Perlin himself also developed the Simplex Noise formula, which produces similar results but at less performance cost and with less artifacts. Aesthetic preference for one or the other is subjective, but in general Simplex is recommended for its lower performance cost.</p>

<p>Both algorithms are based on an n-dimensional grid of values. As we move along this grid in any of its dimensions, values slope up and down smoothly and randomly. We can choose to map these values to whatever we choose in our scenes to achieve a natural-looking kind of randomness. In this library, both algorithms have a 2 dimensional and a 3 dimensional version.</p>

<p>The results of these functions are not truly random, they follow a deterministic pattern. If you start from a fixed seed number, the results will always be the same. By default the library uses a random seed, which ensures that the result will be different every time and the formulas are designed to avoid any clear recognizable patterns.</p>

<h2>Using the Noise library</h2>

<p>To use any of the helpers provided by the noise library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl/noise-utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>Noise.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Simplex</h2>

<p>To use the 2d simplex formula, do</p>

<code>Noise.simplex2()</code>

<p>, to use the 3d simplex formula, do</p>

<code>Noise.simplex3()</code>

<p>.</p>

<p>The 2D version requires two parameters: an</p>

<em>x</em>

<p>and a</p>

<em>y</em>

<p>coordinate. The 3d version also requires a third parameter for th</p>

<em>z</em>

<p>coordinate.</p>

<p>The functions return a single value, that represents a point in the grid system of the algorithm, at the 2d or 3d coordinates indicated in the input parameters.</p>

<p>The following function lays down a grid of cubes at random heights, following a 2d simplex formula so that they are shaped into smooth slopes.</p>

<h2>Perlin</h2>

<p>To use the 2d Perlin formula, do</p>

<code>Noise.perlin2()</code>

<p>, to use the 3d Perlin formula, do</p>

<code>Noise.perlin3()</code>

<p>.</p>

<p>The 2D version requires two parameters: an</p>

<em>x</em>

<p>and a</p>

<em>y</em>

<p>coordinate. The 3d version also requires a third parameter for th</p>

<em>z</em>

<p>coordinate.</p>

<p>The functions return a single value, that represents a point in the grid system of the algorithm, at the 2d or 3d coordinates indicated in the input parameters.</p>

<p>The following function lays down a grid of cubes at random heights, following a 2d Perlin formula so that they are shaped into smooth slopes.</p>

<h2>Changes over time</h2>

<p>We can move over one of the dimensions of the grid system over time to mimic gradual random change.</p>

<p>The following example uses a 3d version of Perlin noise, using the first two dimensions for each position on the canvas, and the third dimension to changes over time.</p>

<h2>One dimensional noise</h2>

<p>This library provides formulas for 2d and 3d noise. In some cases you may want to alter values based on a single parameter (like for example time). In those cases, you can simply use a 2d version of a function, setting a fixed constant value for one of the arguments.</p>

<h2>Full example</h2>

<p>The following example uses a 3d simplex formula to map the heights of several cubes and move them up and down over time. The first two dimensions of the simplex formula relate to the gid positions of each cube, the third dimension advances over time to make these move like waves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>TIP: The speed of the passage of time can make a huge difference on how this effect looks. In this example we increment the time by</p>

<em>dt/4</em>

<p>on every frame, which is approximately</p>

<em>0.00833</em>

<p>(at 30 frames per second). Incrementing the value of the timer by</p>

<em>dt</em>

<p>felt too fast for the desired effect here. Incrementing</p>

<em>1</em>

<p>on every frame, it looked look chaotic, with no apparent relation between one frame and the next. We recommend you try different values till you find what looks right for what you're trying to achieve.</p>

<h2>Pre determined seeds</h2>

<p>By default, the Perlin and simplex noise formulas use a random seed number, so that the result is always different and unpredictable.</p>

<p>For these formulas to always produce the same results, initiate the</p>

<code>Noise</code>

<p>object with a specific seed value. Use</p>

<code>Noise.Init(seed)</code>

<p>, where</p>

<code>seed</code>

<p>is a value between 0 and 1, or between 1 and 65536. After calling the</p>

<code>Init</code>

<p>object with a seed value, you can call the simplex or Perlin functions freely, and their results will be deterministic based on the seed you passed.</p>

<p>This is especially useful to make sure the result looks the same for all players who are in the scene at the same time. Consistency may be important in some cases, for example if the floor level raises players up or down randomly, you want players to all see the elevation patterns match the positions of other players. If all players have initiated their</p>

<code>Noise</code>

<p>object with the same seed value, then passing the same parameters to the Perlin or simplex functions should return the same values on each.

.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl/noise-scene-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<p>Tools for generating semi-random noise based on the Perlin and Simplex algorithms, to simulate an organic kind of randomness.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-noise-utils-library

# Change to URL: https://github.com/decentraland/dcl-deploy-action

# URL: https://github.com/decentraland/dcl-deploy-action

<title>GitHub - decentraland/dcl-deploy-action</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-deploy-action</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dcl-deploy-action</h1>

<p>Usage:</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rentals-contract

# URL: https://github.com/decentraland/rentals-contract

<title>GitHub - decentraland/rentals-contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rentals-contract</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>128</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Rentals Contract</h1>

<p>This contract provides on-chain renting capabilities for Decentraland's LAND and Estates.</p>

<p>By capitalizing on off-chain signatures, users only need to spend gas on critical transactions and avoid operations that can be done safely off-chain like handling listings or offers.</p>

<p>This contract is intended for Decentraland's LAND and Estates but can be used with any ERC721 that has a</p>

<code>setUpdateOperator</code>

<p>function to give operator permissions to an address. For both of these assets, the update operator can deploy scenes on them.</p>

<p>There are various ways to initialize a rent. What all of them have in common is that a user has to send a transaction to initialize the rent using a signature created off-chain by another user as verification of the rental conditions.</p>

<h2>Index</h2>

<h2>Listing</h2>

<p>If I wanted to rent my LAND in order to accrue an extra income from it, I could do so by:</p>

<p>1 - Authorizing the Rentals contract to operate LAND</p>

<p>You can do so by calling</p>

<code>approve</code>

<p>on the LAND contract with the address of the Rentals contract and the token id of the LAND you want to rent.</p>

<p>You can also do it with</p>

<code>setApprovalForAll</code>

<p>on the LAND contract with the address of the Rentals contract.</p>

<p>The difference between one and the other is that you will need to call</p>

<code>approve</code>

<p>for each individual LAND you want to rent, while with</p>

<code>setApprovalForAll</code>

<p>you only have to do it once for all your assets in the contract.</p>

<p>2 - Sign the rental conditions</p>

<p>There are various conditions that you can set for a rental to occur. You can have a glimpse of what these conditions are by looking at the Listing struct.</p>

<code>struct Listing {

address signer;

address contractAddress;

uint256 tokenId;

uint256 expiration;

uint256[3] nonces;

uint256[] pricePerDay;

uint256[] maxDays;

uint256[] minDays;

address target;

bytes signature;

}</code>

<li>signer: The address of the signer, in this case, my address.</li>

<li>contractAddress: The address of the LAND contract.</li>

<li>tokenId: The token id of the LAND I want to rent.</li>

<li>expiration: The timestamp from which the signature will not be valid anymore.</li>

<li>nonces: The three of them have to match the current nonces in the Rentals contract to be valid. Find more about it in the</li>

<li>section.</li>

<li>pricePerDay: Defines the price per day for the min and max days range in the same index.</li>

<li>maxDays: max amount of days the LAND can be rented for a given index.</li>

<li>minDays: min amount of days the LAND has to be be rented for a given index.</li>

<li>target: If defined, only the target address can use the signature, if not, anyone can.</li>

<li>signature: The signature created by signing all the previous data</li>

<p>There are various ways of signing these conditions. One of them can be achieved by using ethers as seen in the</p>

<p>utility file.</p>

<p>Once both the signature and the listings conditions are ready, I, or whichever off-chain system handling this, can store them to make them

available for interested users that want to rent my LAND.</p>

<p>The interested user can interact with the Rentals contract via</p>

<code>acceptListing</code>

<p>with this data to initialize the rent. You can see more about</p>

<p>in its corresponding section.</p>

<h2>Accepting a Listing</h2>

<p>In the case that I am interested in renting a LAND as a tenant I can do the following:</p>

<p>1 - Authorize the Rentals contract to transfer my MANA</p>

<p>Rentals are paid upfront once they are initialized. For this, the Rentals contract needs authorization to move my MANA to the owner of the LAND I'm renting and a small cut to the DAO.</p>

<p>To do this, I can simply call the</p>

<code>approve</code>

<p>function in the MANA contract with the address of the Rentals contract as the spender and a value of MANA greater or equal to the price I have to pay for the rental. I could set an incredibly large number as the value so with just 1 authorization, I can forget about doing it again in the future and just go to step 2 directly.</p>

<p>2 - Obtain a listing and its corresponding signature</p>

<p>In order to accept a listing, I would need to get the listing conditions as well as a signature created by the owner of the LAND I want to rent. This depends on the off-chain system the owner has used to store the information. But once I obtain them, I'm good to call the</p>

<code>acceptListing</code>

<p>function and start the rental.</p>

<p>3 - Call</p>

<code>acceptListing</code>

<p>in the Rentals contract</p>

<p>Once the previous information is at hand, I can finally call the function to accept the listing.</p>

<code>function acceptListing(

Listing calldata _listing,

address _operator,

uint256 _index,

uint256 _rentalDays,

bytes32 _fingerprint

) external</code>

<li>listing:</li>

<li>data containing both the conditions and the signature of owner of the LAND.</li>

<li>operator: The address that will be given operator permitions via the</li>

<code>setUpdateOperator</code>

<li>in the LAND contract. In other words, the user that I want being able to deploy scenes in that LAND, it could be myself if I wanted to but maybe I want someone else to do it.</li>

<li>index: Remember that the Listing contains arrays for pricePerDay, maxDays and minDays? This value determines which index of those arrays I want to choose for this rental.</li>

<li>rentalDays: The amount of days I want to rent this LAND. It has to be in range between the min and max days of the index I choose or else it fails.</li>

<li>fingerprint: In the case of an Estate, this indicates the fingerprint it should have when renting it to me. This prevents the owner to front run me and remove LAND from it before renting it.</li>

<p>If everything is correct, MANA equivalent to the pricePerDay index I've selected, times the rentalDays I provided will be transfered from my address to the lessor (and a fee to the DAO) and the provided operator will start being able to deploy scenes to that LAND.</p>

<h2>Offers</h2>

<p>This is the opposite of a</p>

<p>. In this case, me, as a user interested in renting a certain LAND, would like to sign an Offer for said LAND so the owner has the possibility of renting it to me.</p>

<p>Similar to the Listing, I would need to sign the Offer conditions. These conditions can be seen in the Offer struct of the Rentals contract:</p>

<code>struct Offer {

address signer;

address contractAddress;

uint256 tokenId;

uint256 expiration;

uint256[3] nonces;

uint256 pricePerDay;

uint256 rentalDays;

address operator;

bytes32 fingerprint;

bytes signature;

}</code>

<li>signer: The address of the signer, in this case, my address.</li>

<li>contractAddress: The address of the LAND contract.</li>

<li>tokenId: The token id of the LAND I want to rent.</li>

<li>expiration: The timestamp from which the signature will not be valid anymore.</li>

<li>nonces: The three of them have to match the current nonces in the Rentals contract to be valid. Find more about it in the</li>

<li>section.</li>

<li>pricePerDay: Defines the price per day I'm willing to pay for renting the LAND</li>

<li>rentalDays: The amount of days I want to rent the LAND</li>

<li>operator: The address that will be given operator permissions to deploy scenes to that LAND</li>

<li>fingerprint: If the asset would be an Estate, the fingerprint of that Estate should match the one I'm providing so the owner cannot remove LAND from it before renting it to me.</li>

<li>signature: The signature created by signing all the previous data</li>

<p>There are various ways of signing these conditions. One of them can be achieved by using ethers as seen in the</p>

<p>utility file.</p>

<p>Once both the signature and the listings conditions are ready, I, or whichever off-chain system handling this, can store them to make them

available for the interested owner of that LAND to accept it.</p>

<p>If the owner of the the LAND is interested in the offer, they can interact with the Rentals contract via</p>

<code>acceptOffer</code>

<p>or by sending the asset to the Rentals contract via the</p>

<code>safeTransferFrom</code>

<p>function in the LAND contract, providing the Offer in the last</p>

<code>bytes</code>

<p>parameter. More info on this can be found in the</p>

<p>section.</p>

<h2>Accepting an Offer</h2>

<p>When I, as the current owner of a LAND, see that there is an offer by a much generous user that wants to rent my LAND for a year and for a lot of MANA.</p>

<p>There are 2 ways in which I, with the Offer condition and the offer signature in my possesion, can initialize the rent.</p>

<p>1 - Calling the</p>

<code>acceptListing</code>

<p>function in the Rentals contract.</p>

<p>This function, similarly to Listing, requires that I, as the owner,</p>

<p>the Rentals contract to transfer the LAND.</p>

<p>Once that is out of the way, I can call</p>

<code>acceptListing</code>

<p>function to initialize the rent.</p>

<p>This function only receives one parameter as you can see in the following line:</p>

<code>function acceptOffer(Offer calldata _offer) external</code>

<li>offer:</li>

<li>containing the conditions and the signature of the offer.</li>

<p>2 - Sending the LAND to the Rentals cotract via LAND's</p>

<code>safeTransferFrom</code>

<p>function</p>

<p>Using this method allows me to bypass the authorization requirement, saving some gas fees in the process.</p>

<code>function safeTransferFrom(address from, address to, uint256 assetId, bytes userData) external;</code>

<li>from: My address</li>

<li>to: The Rentals contract address</li>

<li>assetId: The token id of my LAND</li>

<li>userData: The</li>

<li>in bytes</li>

<p>There are many examples on how to create an Offer with ethers in various</p>

<p>tests.</p>

<p>If everything is correct after using any of the 2 previous options to accept an offer, MANA equivalent to the pricePerDay times the rentalDays provided in the offer will be transfered from the tenant to my address (minus a fee for the DAO) and the provided operator in the offer will start being able to deploy scenes to that LAND.</p>

<h2>Claiming back the Asset</h2>

<p>Using LAND as an example, when a rental starts, that rented LAND is transfered to the Rentals contract.</p>

<p>I can get my LAND back ONLY when the rental has finished by calling the</p>

<code>claim</code>

<p>function.</p>

<code>function claim(address _contractAddress, uint256 _tokenId) external</code>

<li>contractAddress: The address of the LAND contract.</li>

<li>tokenId: The id of the LAND.</li>

<p>Once the transaction finishes successfuly, the LAND will be transfered back to me.</p>

<p>Due to how the LAND contract works, claiming the asset back will remove the update operator role from the user that had it during the rent.</p>

<h2>Changing the Update Operator of the Asset</h2>

<p>When accepting an offer or a listing, the tenant provides an address that will act as the update operator of the LAND. This allows that address, once the rental starts, to be able to deploy scenes to the LAND.</p>

<p>As the tenant (The one that pays for the rental), while the rental is ongoing, I can call the</p>

<code>setOperator</code>

<p>function in the Rentals contract to change the address of the asset's update operator.</p>

<code>function setOperator(

address _contractAddress,

uint256 _tokenId,

address _operator

) external</code>

<li>contractAddress: Address of the LAND contract</li>

<li>tokenId: Id of the rented LAND</li>

<li>operator: Address of the new address that will have an update operator role for that LAND.</li>

<p>As the tenant, I can only call this funtion when the rental is ongoing.</p>

<p>As the lessor, I can call this function after the rental is over.</p>

<h2>What happens when the rental ends?</h2>

<p>Once of the most important things to keep in mind when a rental ends, is that the update operator defined by the tenant will still be able to deploy scenes to the LAND.</p>

<p>This is because in order to change or remove the update operator from a LAND, the</p>

<code>setUpdateOperator</code>

<p>function of the asset has to be manually called.</p>

<p>As the original owner of the asset, once the rental is over and I really don't want the operator defined by the tenant to keep deploying stuff after the rental period ends, I could do the following:</p>

<li>Set the update operator manually to one of my liking as instructed</li>

<li>.</li>

<li>Claim the asset back as instructed</li>

<li>.</li>

<li>Accept a new Offer as instructed</li>

<li>, changing the operator of the LAND to the new tenant's operator.</li>

<li>Having a Listing accepted by a new tenant as instructed</li>

<li>, changing the operator of the LAND to the new tenant's operator.</li>

<p>Another important thing to keep in mind is that there is NO need to claim the asset back once the rental is over to rent it again.</p>

<p>After the rent of a LAND is over, the lessor can accept and offer or have a listing accepted and the LAND will be re-rented. This is useful because it saves the original owner from some extra transactions.</p>

<h2>Extending a rental</h2>

<p>BEFORE a rental is over, a new listing or offer for the LAND can be accepted as long as the lessor and tenant in said offer/listing are the same.</p>

<p>Doing so will extend the end date of the rental by the amount of rental days defined.</p>

<h2>Nonces</h2>

<p>The Rentals contract contains various nonces of different types used to verify if a signature is valid. They can be used to</p>

<p>in many levels.</p>

<li>contractNonce: A nonce that once its changed by the owner of the contract, will make all signatures signed with the previous value invalid.</li>

<li>signerNonce: A nonce that once its changed by the sender of the transaction, will make all signatures signed by the sender invalid.</li>

<li>assetNonce: A nonce that once its changed by the sender of the transaction, will make all signatures signed by the sender for a given asset invalid.</li>

<p>The</p>

<code>uint256[3] nonces;</code>

<p>field in the</p>

<p>struct, in order to be valid, must be conformed by the current [contactNonce, signerNonce, assetNonce].</p>

<p>For example, if I wanted to sign a listing, I would need to ask the Rentals contract for these values via the public variables exposed:</p>

<code>uint256 public contractNonce;

mapping(address => uint256) public signerNonce;

mapping(address => mapping(uint256 => mapping(address => uint256))) public assetNonce;</code>

<p>In pseudo js code, if I wanted to rent a LAND, I would need to obtain the nonces doing something like this:</p>

<pre>...</pre>

<pre>:</pre>

<h2>Invalidating Signatures</h2>

<p>Users can invalidate signatures in different ways by updating the contractNonce, the signerNonce and the assetNonce.</p>

<p>They can do so by calling the following functions in the Rentals contract.</p>

<code>function bumpContractNonce() external onlyOwner

function bumpSignerNonce() external

function bumpAssetNonce(address _contractAddress, uint256 _tokenId) external</code>

<code>bumpContractNonce</code>

<p>can only be called by the owner of the Rentals contract, and will be used only on an emergency to invalidate all signatures created with the current nonce.</p>

<code>bumpSignerNonce</code>

<p>can be called by any user, and will invalidate all signatures created by that user with the current nonce.</p>

<code>bumpAssetNonce</code>

<p>can be called by any user, and will invalidate all signatures created by that user for a given asset with the current nonce.</p>

<p>The asset nonce is always bumped for both the lessor and the tenant once a rent is initialized to prevent any other listings or offers with the current nonce to be usable. This is a safety meassure to ensure that the least amount of usable signatures are available off-chain in the case of a signature storage breach.</p>

<p>In the case of the signer nonce, imagine that I signed a lot of listings or offers with the current nonce but for some reason I don't trust the way they are stored, I could just call the asset nonce bump to invalidate them all at once.</p>

<p>The case with the asset nonce is similar but targeted to a certain asset.</p>

<h2>Development</h2>

<p>Install dependencies with</p>

<code>npm ci</code>

<p>Compile contracts with</p>

<code>npm run compile</code>

<p>Run tests with</p>

<code>npm run test</code>

<p>Run tests with coverage with</p>

<code>npm run test:coverage</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>8</strong>

<h3>Watchers</h3>

<strong>7</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-builder-hud

# URL: https://github.com/decentraland/dcl-builder-hud

<title>GitHub - decentraland/dcl-builder-hud</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-builder-hud</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h2>BuilderHUD</h2>

<p>Positioning entities in the sdk can be very difficult - always guessing the x,y,z of something. Well look no further! We have created a visual remote (based of Carl Farvel's original design) to help us position items in the sdk preview just like the Builder tool!</p>

<li>Move entities visually within the sdk local previewer</li>

<li>Save their PRS (position, rotation, scale) to the browser Console for you to easily copy / paste into your code</li>

<li>Add the hud to as many entities as you want!</li>

<h2>Install</h2>

<p>To use any of the helpers provided by this library:</p>

<p>Install this library as an npm package. Run this command in your scene's project folder:</p>

<code>npm install @dcl/builder-hud</code>

<h3>Attaching the hud to entities</h3>

<li>inside your scene code, make sure to import the hud code at the top of your code file

code</li>

<code>import { hud } from "@dcl/builder-hud"</code>

<li>Make sure your entities have a "name" for them. This will make it easier to choose which entity you are modifying in the BuilderHUD tool. Naming an entity is easy; pass a string value "name" into the Entity(). Below, we are naming our entity "Box".</li>

<code>var box = new Entity("Box")</code>

<li>After you give your entity the Transform() component AND add it to the engine, then we can add the entity variable to the hud!</li>

<code>var box = new Entity("Box")

box.addComponent(new BoxShape())

box.addComponent(new Transform({position: new Vector3(4,1,8), rotation: Quaternion.Euler(0,0,0), scale: new Vector3(1,1,1)}))

engine.addEntity(box)

hud.attachToEntity(box)</code>

<h2>Using the HUD</h2>

<p>Once you've followed the steps to add the entities you want to deal with to the HUD, follow these steps:</p>

<p>Open a preview of the scene normally, with</p>

<code>dcl start</code>

<p>.</p>

<p>On the right-hand margin, click the Builder HUD icon to open the full UI.</p>

<p>Note: This icon might be obstructed by the FPS Panel. You can close this panel by opening the Debug Menu (on the right of the minimap), and toggling the eye icon next to "FPS Panel".</p>

<p>Click the left and right icons (</p>

<strong><</strong>

<strong>></strong>

<p>) to</p>

<strong>select an entity</strong>

<p>to handle. The name of the currently selected entity will be displayed in the UI, a green marker will also appear on top of the selected entity.</p>

<p>Toggle between</p>

<strong>P</strong>

<p>: Position,</p>

<strong>R</strong>

<p>Rotation and</p>

<strong>S</strong>

<p>Scale. Then toggle between the different levels of precision for each adjustment (1, 0.1, 0.01, etc).</p>

<p>Use the labeled direction arrows to move/rotate/scale the entity.</p>

<p>Once you're done, click the</p>

<strong>save icon</strong>

<p>to print out the transform values of each of the entities handled by the Builder HUD to console. To see these values, open up the browser console; In Google Chrome go to</p>

<strong>View > Developer > Javascript console</strong>

<p>.</p>

<p>Return to your scene's code, and paste the new transform values on an entity you wish to adjust, when creating its</p>

<code>Transform</code>

<p>component.</p>

<p>For example, for the "Box" entity, you can paste its values in the following snippet:</p>

<p>Note: The Builder HUD is only available while in preview mode. Once your scene is published, players in your scene won't see this UI.</p>

<h2>The scaffold</h2>

<p>Use the scaffold to reach high vantage points that might not be accessible to players in the scene. This might make it a lot easier to position certain entities.</p>

<p>The scaffold starts out on the ground in the scene's south-east corner. Hop on to the platform, then use the arrows in the upper section of the Builder Hud UI to move it around.</p>

<p>Once it starts moving in one direction, it will keep moving till you press another direction key. You can also press the</p>

<strong>Reset icon</strong>

<p>(on the top-left corner of the UI) to return the scaffold to its initial location on the ground.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/matrix-playbook

# URL: https://github.com/decentraland/matrix-playbook

<title>GitHub - decentraland/matrix-playbook</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/matrix-playbook</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>121</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Matrix Playbook</h1>

<p>This repository contains a configuration of</p>

<p>to be used by our instances.</p>

<p>To extend this configuration, more information can be found in</p>

<p>.</p>

<h2>How to use it</h2>

<p>Once you have an</p>

<code>.env</code>

<p>file with the requiered vars, you should run:</p>

<pre>$ ./generate-inventory.sh</pre>

<p>This script will prepare files to be ready for ansible to install matrix.</p>

<h2>Installation</h2>

<p>In order to install Matrix using this playbook:</p>

<pre>$ docker run -it --rm -w /work -v</pre>

<pre>:/work -v</pre>

<pre>/.ssh/id_rsa:/root/.ssh/id_rsa:ro --entrypoint=/bin/sh docker.io/devture/ansible:2.11.6-r1

(inside docker container on</pre>

<pre>)

$ ansible-playbook -i inventory/hosts setup.yml --tags=setup-all</pre>

<p>To start the services, you can add the</p>

<code>start</code>

<p>tag or run again:</p>

<pre>$ ansible-playbook -i inventory/hosts setup.yml --tags=start</pre>

<h3>Explanation</h3>

<p>Using docker allow us to avoid ansible installation in the host, but will requiere SSH access from the container to the host and that's why the private IP is required as env variable and the private key is mounted in the docker command.</p>

<p>The corresponding public key must be included in the</p>

<code>authorized_keys</code>

<p>in order to accept the connection from the container.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/poap-ui

# URL: https://github.com/decentraland/poap-ui

<title>GitHub - decentraland/poap-ui</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/poap-ui</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>15</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Getting Started with Create React App</h1>

<p>This project was bootstrapped with</p>

<p>.</p>

<h2>Available Scripts</h2>

<p>In the project directory, you can run:</p>

<code>yarn start</code>

<p>Runs the app in the development mode.</p>

<p>Open</p>

<p>to view it in the browser.</p>

<p>The page will reload if you make edits.</p>

<p>You will also see any lint errors in the console.</p>

<code>yarn test</code>

<p>Launches the test runner in the interactive watch mode.</p>

<p>See the section about</p>

<p>for more information.</p>

<code>yarn build</code>

<p>Builds the app for production to the</p>

<code>build</code>

<p>folder.</p>

<p>It correctly bundles React in production mode and optimizes the build for the best performance.</p>

<p>The build is minified and the filenames include the hashes.</p>

<p>Your app is ready to be deployed!</p>

<p>See the section about</p>

<p>for more information.</p>

<code>yarn eject</code>

<strong>Note: this is a one-way operation. Once you</strong>

<code>eject</code>

<strong>, you canât go back!</strong>

<p>If you arenât satisfied with the build tool and configuration choices, you can</p>

<code>eject</code>

<p>at any time. This command will remove the single build dependency from your project.</p>

<p>Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except</p>

<code>eject</code>

<p>will still work, but they will point to the copied scripts so you can tweak them. At this point youâre on your own.</p>

<p>You donât have to ever use</p>

<code>eject</code>

<p>. The curated feature set is suitable for small and middle deployments, and you shouldnât feel obligated to use this feature. However we understand that this tool wouldnât be useful if you couldnât customize it when you are ready for it.</p>

<h2>Learn More</h2>

<p>You can learn more in the</p>

<p>.</p>

<p>To learn React, check out the</p>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/snapshot-strategies

# URL: https://github.com/decentraland/snapshot-strategies

<title>GitHub - decentraland/snapshot-strategies: Snapshot voting strategies</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Snapshot voting strategies</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/snapshot-strategies</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>25</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>736</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Snapshot strategies</h1>

<h2>Development</h2>

<h3>Install dependencies</h3>

<pre>yarn</pre>

<h3>Build package</h3>

<pre>yarn build</pre>

<h3>Test strategy with predefined tests</h3>

<p>Note: If you're writing a new strategy, make sure to add it to strategies/index.ts before testing*</p>

<pre>yarn</pre>

<pre>yarn</pre>

<pre>--strategy=erc20-received

yarn</pre>

<pre>--strategy=eth-balance</pre>

<pre>yarn</pre>

<pre>--strategy=eth-balance --more=200</pre>

<h3>Test strategy with different parameters</h3>

<p>Change values inside test/scores.ts and run</p>

<pre>ts-node test/scores.ts</pre>

<h3>Checklist for adding a new strategy</h3>

<p>Here is a simple checklist to look at when reviewing a PR for a new strategy:</p>

<h4>Overview</h4>

<li>The strategy must be unique.</li>

<li>If the strategy does only a single call with an address as input, it's preferable to use the strategy "contract-call" instead of creating a new one.</li>

<h4>Code</h4>

<li>There should be a maximum of 5 requests, a request can use "fetch" a "subgraphRequest" or "multicall".</li>

<li>The strategy should not send a request for each voters, this doesn't scale.</li>

<li>The strategy PR should not add any dependency in Snapshot.js.</li>

<li>The score returned by the strategy should use the same casing for address than on the input, or should return checksum addresses.</li>

<li>Make sure voting power of one address does not depend on other addresses.</li>

<h4>Example</h4>

<li>Example must include at least 1 address with a positive score.</li>

<li>Example must use a snapshot block number in the past.</li>

<h4>Test</h4>

<li>The strategy should take less than 10sec to resolve.</li>

<li>The strategy should work with 500 addresses.</li>

<li>.</li>

<h4>Recommended</h4>

<li>Add a README.md file that describes the strategy and provides an example of parameters.</li>

<li>Use string ABI instead of object.</li>

<h3>License</h3>

<p>.</p>

<h2>About</h2>

<p>Snapshot voting strategies</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>694</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/actix-web-prom

# URL: https://github.com/decentraland/actix-web-prom

<title>GitHub - decentraland/actix-web-prom: Actix-web middleware to expose Prometheus metrics</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Actix-web middleware to expose Prometheus metrics</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/actix-web-prom</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>78</strong>

<h2>Files</h2>

<button>View code</button>

<h1>actix-web-prom</h1>

<p>Prometheus instrumentation for</p>

<p>. This middleware is heavily influenced by the work in</p>

<p>. We track the same default metrics and allow for adding user defined metrics.</p>

<p>By default two metrics are tracked (this assumes the namespace</p>

<code>actix_web_prom</code>

<p>):</p>

<code>actix_web_prom_http_requests_total</code>

<p>(labels: endpoint, method, status): the total number

of HTTP requests handled by the actix HttpServer.</p>

<code>actix_web_prom_http_requests_duration_seconds</code>

<p>(labels: endpoint, method, status): the

request duration for all HTTP requests handled by the actix HttpServer.</p>

<h2>Usage</h2>

<p>First add</p>

<code>actix-web-prom</code>

<p>to your</p>

<code>Cargo.toml</code>

<p>:</p>

<pre>[</pre>

<pre>]</pre>

<pre>=</pre>

<p>You then instantiate the prometheus middleware and pass it to</p>

<code>.wrap()</code>

<p>:</p>

<pre>std</pre>

<pre>collections</pre>

<pre>actix_web</pre>

<pre>web</pre>

<pre>actix_web_prom</pre>

<pre>-></pre>

<pre>-> std</pre>

<pre>io</pre>

<pre>labels =</pre>

<pre>labels</pre>

<pre>prometheus =</pre>

<pre>labels</pre>

<pre>||</pre>

<pre>prometheus</pre>

<pre>web</pre>

<pre>health</pre>

<pre>?</pre>

<pre>?</pre>

<p>Using the above as an example, a few things are worth mentioning:</p>

<code>api</code>

<li>is the metrics namespace</li>

<code>/metrics</code>

<li>will be auto exposed (GET requests only) with Content-Type header</li>

<code>content-type: text/plain; version=0.0.4; charset=utf-8</code>

<code>Some(labels)</code>

<li>is used to add fixed labels to the metrics;</li>

<code>None</code>

<li>can be passed instead

if no additional labels are necessary.</li>

<p>A call to the /metrics endpoint will expose your metrics:</p>

<pre>$ curl http://localhost:8080/metrics</pre>

<pre>api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_bucket{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>,le=</pre>

<pre>} 1

api_http_requests_duration_seconds_sum{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>} 0.00003

api_http_requests_duration_seconds_count{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>} 1</pre>

<pre>api_http_requests_total{endpoint=</pre>

<pre>,label1=</pre>

<pre>,method=</pre>

<pre>,status=</pre>

<pre>} 1</pre>

<h3>Custom metrics</h3>

<p>You instantiate</p>

<code>PrometheusMetrics</code>

<p>and then use its</p>

<code>.registry</code>

<p>to register your custom

metric (in this case, we use a</p>

<code>IntCounterVec</code>

<p>).</p>

<p>Then you can pass this counter through</p>

<code>.data()</code>

<p>to have it available within the resource

responder.</p>

<pre>actix_web</pre>

<pre>web</pre>

<pre>actix_web_prom</pre>

<pre>prometheus</pre>

<pre>opts</pre>

<pre>web</pre>

<pre>-></pre>

<pre>counter</pre>

<pre>-> std</pre>

<pre>io</pre>

<pre>prometheus =</pre>

<pre>counter_opts =</pre>

<pre>,</pre>

<pre>counter =</pre>

<pre>counter_opts</pre>

<pre>prometheus</pre>

<pre>counter</pre>

<pre>||</pre>

<pre>prometheus</pre>

<pre>counter</pre>

<pre>web</pre>

<pre>health</pre>

<pre>?</pre>

<pre>?</pre>

<h3>Custom</h3>

<code>Registry</code>

<p>Some apps might have more than one</p>

<code>actix_web::HttpServer</code>

<p>.

If that's the case, you might want to use your own registry:</p>

<pre>actix_web</pre>

<pre>web</pre>

<pre>actix_web_prom</pre>

<pre>actix_web</pre>

<pre>rt</pre>

<pre>prometheus</pre>

<pre>std</pre>

<pre>thread</pre>

<pre>-></pre>

<pre>-></pre>

<pre>-> std</pre>

<pre>io</pre>

<pre>shared_registry =</pre>

<pre>private_metrics =</pre>

<pre>shared_registry</pre>

<pre>public_metrics =</pre>

<pre>shared_registry</pre>

<pre>private_thread = thread</pre>

<pre>||</pre>

<pre>sys =</pre>

<pre>srv =</pre>

<pre>||</pre>

<pre>private_metrics</pre>

<pre>web</pre>

<pre>private_handler</pre>

<pre>sys</pre>

<pre>srv</pre>

<pre>public_thread = thread</pre>

<pre>||</pre>

<pre>sys =</pre>

<pre>srv =</pre>

<pre>||</pre>

<pre>public_metrics</pre>

<pre>web</pre>

<pre>public_handler</pre>

<pre>sys</pre>

<pre>srv</pre>

<pre>private_thread</pre>

<pre>public_thread</pre>

<h2>About</h2>

<p>Actix-web middleware to expose Prometheus metrics</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>52</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/comms3-transports

# URL: https://github.com/decentraland/comms3-transports

<title>GitHub - decentraland/comms3-transports: Transport for comms V3</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Transport for comms V3</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/comms3-transports</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>48</strong>

<h2>Files</h2>

<button>View code</button>

<h1>comms3-transports</h1>

<p>This library encapsulate the default comms3 transports:</p>

<li>P2P</li>

<li>Websocket</li>

<li>Livekit</li>

<h2>Integration tests</h2>

<p>For livekit/p2p integration test we are using</p>

<p>, check supported platforms there to see if you OS / node version is compatible.</p>

<p>To start a local livekit instance:</p>

<code>docker run --rm -p 7880:7880 \

-p 7881:7881 \

-p 7882:7882/udp \

-v $PWD/test/integration/livekit.yaml:/livekit.yaml \

livekit/livekit-server \

--config /livekit.yaml \

--node-ip 127.0.0.1</code>

<p>Make sure to set the required variables in the</p>

<code>.env</code>

<p>file</p>

<h2>About</h2>

<p>Transport for comms V3</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>13</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/technical-tutorials

# URL: https://github.com/decentraland/technical-tutorials

<title>GitHub - decentraland/technical-tutorials: Technical Tutorials for the Documentation hub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Technical Tutorials for the Documentation hub</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/technical-tutorials</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Migrated repo</h1>

<p>This content has been moved to the documentation repo</p>

<h1>Technical Tutorials</h1>

<p>The goal of this repository is to feed the</p>

<p>with technical tutorials on various subjects related to the Decentraland Platform and Protocol to help the community understand how things work and build new projects on top of it.</p>

<h2>Writing Guidance</h2>

<p>The following section is intended to be a guide with some key points and structure to take into consideration when writing a technical document. This can be handy when starting from scratch and not having much experience in writing:</p>

<p>Start with an Introduction:</p>

<p>What will the reader learn?

What skills will the reader need?

What problem does this article helps solve?</p>

<p>Add</p>

<p>with code snippets or required configurations to ease the execution of the tutorial. Remember to add formatting and folder structure where files belong and make the code as digestible as possible. Remember, instead of doing what's easy for you, do what's easy for your reader.</p>

<p>Know your audience, try to avoid acronyms and add links to glossaries or referenced concepts so that people can drill down if needed. Always use the clearest, simplest language that will do the job.</p>

<p>Conclusion: close up the learning and what you have covered.</p>

<p>The focus of the tutorial should be âhow do I accomplish Xâ, the main content should all be actionable and to the point. Donât go off on tangents explaining everything.</p>

<p>Any useful clarifications can be made as notes. Notes are great to add optional content that gives context but that users can ignore if theyâre in a hurry. It should be easy to tell notes appart from the required reading.</p>

<p>Check some other technical writing guidance, Amazon has some good</p>

<p>to help you improve your writing.</p>

<h2>Writing and Publishing</h2>

<p>The Technical Documentation site is generated by scrapping the</p>

<code>/docs</code>

<p>folder of different repositories. To add a new tutorial, just create the file under</p>

<code>/docs/tutorials</code>

<p>and add a reference to that file in the</p>

<p>.</p>

<p>As of today (June 2022), the publication of the</p>

<p>is done when there is a merge in its</p>

<p>, so to see your documents live you may need to manually trigger the build processes.</p>

<h2>About</h2>

<p>Technical Tutorials for the Documentation hub</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/technical-documentation

# URL: https://github.com/decentraland/technical-documentation

<title>GitHub - decentraland/technical-documentation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/technical-documentation</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>70</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>277</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Contribute to Decentraland Documentation â¨ð.</h1>

<p>Welcome to</p>

<strong>Decentraland technical documentation</strong>

<p>, the goal of this repository is to have a single point of access for all necessary information to use, create and contribute to Decentraland.</p>

<p>The repository will scrap a configurable list of directories and render the content of their docs folder. Sidebar stucture can be completely configured in each repository.</p>

<p>Technical documentation is divided in three major areas:</p>

<li>User: Everything related to the use of the platform</li>

<li>Creator: Information for people wanting to create content inside Decentraland</li>

<li>Contributor: Code documentation for developers wanting to contribute to the project</li>

<h2>How to</h2>

<strong>Step 1: Create and format your documentation files: ð</strong>

<p>In your desired repository:</p>

<li>Create a folder named</li>

<code>docs</code>

<li>at root level</li>

<li>Inside the</li>

<code>docs</code>

<li>folder save your documentation files. Here are some important considerations:</li>

<li>We render documentation from</li>

<li>, so every file must include valid markdown in it's body and the</li>

<code>.md</code>

<li>extension. Unsure about</li>

<code>.md</code>

<li>syntax? Check</li>

<li>If your files include local images please place them at the same folder level as the corresponding</li>

<code>.md</code>

<li>file</li>

<li>In order to render the links to the files in the documentation's site sidebar all</li>

<code>.md</code>

<li>files must include the following</li>

<li>metadata tags at the start:</li>

<code>title</code>

<li>representing the name of the article and</li>

<code>slug</code>

<li>which will be the relative path to the documentation's site url</li>

<p>example:</p>

<code>---

title: "Metaverse runtime"

slug: "the relative slug to your page, ex: /contributor/sdk/diagrams/metaverse-runtime"

---</code>

<li>If using</li>

<code>html</code>

<li>tags please close every tag, specially if they are self-closing like</li>

<code><img /></code>

<li>You can find many</li>

<code>.md</code>

<li>formatters and editor online like</li>

<strong>Step 2: Create a summary.json file with the sidebar desired structure</strong>

<li>The documentation site is completely agnostic to the internal structure of the</li>

<code>docs</code>

<li>folder. To provide a hierarchy for your content a</li>

<code>summary.json</code>

<li>file must be provided</li>

<p>Example:</p>

<code>{

"contributor": [{

"name": "SDK",

"children": [{

"name": "Diagrams",

"children": [{

"name": "Metaverse runtime",

"slug": "/contributor/sdk/diagrams/metaverse-runtime"

}]

}]

}]

}</code>

<p>The code above will render the following structure:</p>

<p>Is there a problem if my category is already used? No. All summary files that share the same category will be grouped when the menu is generated:</p>

<li>See</li>

<strong>Step 3: Add the repository to the scrap list</strong>

<p>Go to</p>

<p>Add your repository to the list in</p>

<code>repositories.json</code>

<p>Please provide the following structure:</p>

<li>name: the name of the repository, it's just a label, has no code implications</li>

<li>url: the repository url</li>

<li>zipUrl: the url to the zip version of the repository you want to add</li>

<p>zipUrl format is:

for specific commits: "</p>

<p>"

for branches: "</p>

<p>"</p>

<p>Why do we ask for zipUrl? To provide the ability to lock the docs to a specific commit or branch. Want to prevent this repo to scrap your latest version? Provide the zip to the commit and edit your docs without fear of breaking anything</p>

<strong>Preview your docs</strong>

<p>Opening a pull request against decentraland/technical-documentation will trigger the test CI pipeline which deploys a test version to the CDN. Feel free to preview your docs in the PR's generated link before merging.</p>

<h3>Contribute to the codebase</h3>

<p>// TO - DO</p>

<h3>Deploy & publish</h3>

<h2>test-static-pipeline</h2>

<p>Repository to test the health and integration of static pipelines</p>

<p>Implements all the pipeline stages of this document:</p>

<p>Every push to master generates an NPM package, it is published with the</p>

<code>@next</code>

<p>dist-tag</p>

<p>Every semver release creates and publishes a</p>

<code>@latest</code>

<p>dist tag</p>

<p>Every time a package is published, the gitlab pipeline pipelines/static-sites-pipeline is triggered. That pipeline uploads the content of the published package to</p>

<code>https://cdn.decentraland.org</code>

<p>The then pipeline starts a rollout pipeline. Which is out of scope of this documentation.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/contribute-to-decentraland-documentation-

# Change to URL: https://github.com/decentraland/documentation-creators

# URL: https://github.com/decentraland/documentation-creators

<title>GitHub - decentraland/documentation-creators: Documentation for the content creators section of docs.decentraland.org</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Documentation for the content creators section of docs.decentraland.org</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/documentation-creators</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>90</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Documentation for the content creators section of docs.decentraland.org</p>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/player-documentation

# URL: https://github.com/decentraland/player-documentation

<title>GitHub - decentraland/player-documentation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/player-documentation</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>38</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland documentation</h1>

<h2>Setup</h2>

<li>Add your site and author details in</li>

<code>_config.yml</code>

<li>.</li>

<li>Add your Google Analytics, Disqus and MailChimp keys to</li>

<code>_config.yml</code>

<li>.</li>

<li>Get a workflow going to see your site's output (with</li>

<li>or Jekyll locally).</li>

<h2>Develop</h2>

<p>Base was built with</p>

<p>version 3.8.4, but should support newer versions as well.</p>

<p>Install the dependencies with</p>

<p>:</p>

<pre>$ bundle install</pre>

<p>Run</p>

<code>jekyll</code>

<p>commands through Bundler to ensure you're using the right versions:</p>

<pre>$ bundle</pre>

<pre>jekyll serve --incremental</pre>

<p>While jekyll is running, you can open the locally hosted version of the docs site on a browser, using</p>

<p>. As you make changes to the source material, the generated site should be updated when reloading.</p>

<h2>Develop (Docker)</h2>

<p>if you have</p>

<p>you also can run your development environment with the follow command</p>

<pre>docker run --rm -p 4000:4000 \

--volume=</pre>

<pre>\

--volume=</pre>

<pre>\

-it jekyll/jekyll:3.8.4 \

jekyll serve --incremental</pre>

<h2>Editing</h2>

<p>Please use Visual Studio Code with Prettier extension to have a consistent coding style</p>

<h3>Posts</h3>

<li>Add, update or remove a post in the</li>

<em>Posts</em>

<li>collection.</li>

<li>The tutorials page is organised by categories.</li>

<li>Change the defaults when new posts are created in</li>

<code>_posts/_defaults.md</code>

<li>.</li>

<h3>Menu</h3>

<li>Add post to menu editing</li>

<code>_data/menu.yml</code>

<h3>Navigation</h3>

<li>Exposed as a data file to give clients better access.</li>

<li>Set in the</li>

<em>Data</em>

<li>/</li>

<em>Navigation</em>

<li>section.</li>

<h3>Footer</h3>

<li>Exposed as a data file to give clients better access.</li>

<li>Set in the</li>

<em>Data</em>

<li>/</li>

<em>Footer</em>

<li>section.</li>

<p>Base template was made by</p>

<p>, the Cloud CMS for Jekyll.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/old-documentation

# URL: https://github.com/decentraland/old-documentation

<title>GitHub - decentraland/old-documentation: ð What is Decentraland?</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð What is Decentraland?</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/old-documentation</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>85</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>670</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland documentation</h1>

<h2>Setup</h2>

<li>Add your site and author details in</li>

<code>_config.yml</code>

<li>.</li>

<li>Add your Google Analytics, Disqus and MailChimp keys to</li>

<code>_config.yml</code>

<li>.</li>

<li>Get a workflow going to see your site's output (with</li>

<li>or Jekyll locally).</li>

<h2>Develop</h2>

<p>Base was built with</p>

<p>version 3.8.4, but should support newer versions as well.</p>

<p>Install the dependencies with</p>

<p>:</p>

<pre>$ bundle install</pre>

<p>Run</p>

<code>jekyll</code>

<p>commands through Bundler to ensure you're using the right versions:</p>

<pre>$ bundle</pre>

<pre>jekyll serve --incremental</pre>

<p>While jekyll is running, you can open the locally hosted version of the docs site on a browser, using</p>

<p>. As you make changes to the source material, the generated site should be updated when reloading.</p>

<h2>Develop (Docker)</h2>

<p>if you have</p>

<p>you also can run your development environment with the follow command</p>

<pre>docker run --rm -p 4000:4000 \

--volume=</pre>

<pre>\

--volume=</pre>

<pre>\

-it jekyll/jekyll:3.8.4 \

jekyll serve --incremental</pre>

<h2>Editing</h2>

<p>Please use Visual Studio Code with Prettier extension to have a consistent coding style</p>

<h3>Posts</h3>

<li>Add, update or remove a post in the</li>

<em>Posts</em>

<li>collection.</li>

<li>The tutorials page is organised by categories.</li>

<li>Change the defaults when new posts are created in</li>

<code>_posts/_defaults.md</code>

<li>.</li>

<h3>Menu</h3>

<li>Add post to menu editing</li>

<code>_data/menu.yml</code>

<h3>Navigation</h3>

<li>Exposed as a data file to give clients better access.</li>

<li>Set in the</li>

<em>Data</em>

<li>/</li>

<em>Navigation</em>

<li>section.</li>

<h3>Footer</h3>

<li>Exposed as a data file to give clients better access.</li>

<li>Set in the</li>

<em>Data</em>

<li>/</li>

<em>Footer</em>

<li>section.</li>

<p>Base template was made by</p>

<p>, the Cloud CMS for Jekyll.</p>

<h2>About</h2>

<p>ð What is Decentraland?</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>41</strong>

<h3>Watchers</h3>

<strong>21</strong>

<h3>Forks</h3>

<strong>132</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/archipelago-service-world

# URL: https://github.com/decentraland/archipelago-service-world

<title>GitHub - decentraland/archipelago-service-world</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago-service-world</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Archipelago Service</h1>

<h2>Getting Started</h2>

<h3>Dependencies</h3>

<li>Node >= v16</li>

<li>running instance.</li>

<code>NATS_URL</code>

<li>environment variable must be set. Eg:</li>

<code>NATS_URL=localhost:4222</code>

<h3>Installation</h3>

<p>Install Node dependencies:</p>

<code>npm install</code>

<h3>Usage</h3>

<p>Build and start the project:</p>

<code>make build

npm run start</code>

<h3>Test</h3>

<p>Run unit and integration tests:</p>

<code>make build

npm run test</code>

<h3>Environment Variables</h3>

<h4>NATS</h4>

<code>NATS_URL</code>

<li>(required): URL of the NATS instance to be connected to</li>

<h4>Server</h4>

<code>HTTP_SERVER_PORT</code>

<li>: (Defaults to 5000)</li>

<code>HTTP_SERVER_HOST</code>

<li>: (Defaults to 0.0.0.0)</li>

<h4>Archipelago</h4>

<code>ARCHIPELAGO_FLUSH_FREQUENCY</code>

<li>: Frequency in seconds for islands/peers updates in Archipelago (Defaults to 2.0)</li>

<code>ARCHIPELAGO_JOIN_DISTANCE</code>

<li>: (Defaults to 64)</li>

<code>ARCHIPELAGO_LEAVE_DISTANCE</code>

<li>: (Defaults to 80)</li>

<code>ARCHIPELAGO_MAX_PEERS_PER_ISLAND</code>

<li>: (Defaults to 100)</li>

<code>ARCHIPELAGO_PARCEL_SIZE</code>

<li>: (Defaults to 16)</li>

<code>ARCHIPELAGO_METRICS_INTERVAL</code>

<li>: Frequency in milliseconds for updating Prometheus metrics (Defaults to 10000)</li>

<code>ARCHIPELAGO_STATUS_UPDATE_INTERVAL</code>

<li>: Frequency in milliseconds for updating Archipelago status information (Defaults to 10000)</li>

<code>CHECK_HEARTBEAT_INTERVAL</code>

<li>: Frequency in milliseconds for checking the last peer update and assume it is active (Defaults to 60000)</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-ecs-utils

# URL: https://github.com/decentraland/decentraland-ecs-utils

<title>GitHub - decentraland/decentraland-ecs-utils</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-ecs-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>35</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>106</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/ecs-scene-utils</h1>

<p>This library includes a number of helpful pre-built tools that include components, methods, and systems. They offer simple solutions to common scenarios that you're likely to run into.</p>

<h2>Using the Utils library</h2>

<p>To use any of the helpers provided by the utils library</p>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl/ecs-scene-utils -B</code>

<li>Run</li>

<code>dcl start</code>

<li>or</li>

<code>dcl build</code>

<li>so the dependencies are correctly installed.</li>

<li>Import the library into the scene's script. Add this line at the start of your</li>

<code>game.ts</code>

<li>file, or any other TypeScript files that require it:</li>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Gradual Movement</h2>

<h3>Move an entity</h3>

<p>To move an entity over a period of time, from one position to another, use the</p>

<code>MoveTransformComponent</code>

<p>component.</p>

<code>MoveTransformComponent</code>

<p>has three required arguments:</p>

<code>start</code>

<li>:</li>

<code>Vector3</code>

<li>for the start position</li>

<code>end</code>

<li>:</li>

<code>Vector3</code>

<li>for the end position</li>

<code>duration</code>

<li>: duration (in seconds) of the translation</li>

<p>This example moves an entity from one position to another over 2 seconds:</p>

<h3>Follow a path</h3>

<p>To move an entity over several points of a path over a period of time, use the</p>

<code>FollowPathComponent</code>

<p>component.</p>

<code>FollowPathComponent</code>

<p>has two required arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that form the path.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<p>This example moves an entity over through four points over 5 seconds:</p>

<h3>Follow a curved path</h3>

<p>To move an entity following a curved path over a period of time, use the</p>

<code>FollowCurvedPathComponent</code>

<p>component.</p>

<p>The curved path is composed of multiple straight line segments put together. You only need to supply a series of fixed path points and a smooth curve is drawn to pass through all of these.</p>

<code>FollowCurvedPathComponent</code>

<p>has three required arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that the curve must pass through.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<code>numberOfSegments</code>

<li>: How many straight-line segments to use to construct the curve.</li>

<p>Tip: Each segment takes at least one frame to complete. Avoid using more than 30 segments per second in the duration of the path, or the entity will move significantly slower while it stops for each segment.</p>

<p>This example moves an entity over through a curve that's subdivided into 40 segments, over a period of 5 seconds. The curve passes through four key points.</p>

<p>The</p>

<code>FollowCurvedPathComponent</code>

<p>also lets you set:</p>

<code>turnToFaceNext</code>

<li>: If true, the entity will rotate on each segment of the curve to always face forward.</li>

<code>closedCircle</code>

<li>: If true, traces a circle that starts back at the beginning, keeping the curvature rounded in the seams too</li>

<h3>Rotate an entity</h3>

<p>To rotate an entity over a period of time, from one direction to another, use the</p>

<code>rotateTransformComponent</code>

<p>component, which works very similarly to the</p>

<code>MoveTransformComponent</code>

<p>component.</p>

<code>rotateTransformComponent</code>

<p>has three required arguments:</p>

<code>start</code>

<li>:</li>

<code>Quaternion</code>

<li>for the start rotation</li>

<code>end</code>

<li>:</li>

<code>Quaternion</code>

<li>for the end rotation</li>

<code>duration</code>

<li>: duration (in seconds) of the rotation</li>

<p>This example rotates an entity from one rotation to another over 2 seconds:</p>

<h3>Sustain rotation</h3>

<p>To rotates an entity continuously, use</p>

<code>KeepRotatingComponent</code>

<p>. The entity will keep rotating forever until it's explicitly stopped or the component is removed.</p>

<code>KeepRotatingComponent</code>

<p>has one required argument:</p>

<code>rotationVelocity</code>

<li>: A quaternion describing the desired rotation to perform each second second. For example</li>

<code>Quaternion.Euler(0, 45, 0)</code>

<li>rotates the entity on the Y axis at a speed of 45 degrees per second, meaning that it makes a full turn every 8 seconds.</li>

<p>The component also contains the following method:</p>

<code>stop()</code>

<li>: stops rotation and removes the component from any entities its added to.</li>

<p>In the following example, a cube rotates continuously until clicked:</p>

<pre>:</pre>

<h3>Change scale</h3>

<p>To adjust the scale of an entity over a period of time, from one size to another, use the</p>

<code>ScaleTransformComponent</code>

<p>component, which works very similarly to the</p>

<code>MoveTransformComponent</code>

<p>component.</p>

<code>ScaleTransformComponent</code>

<p>has three required arguments:</p>

<code>start</code>

<li>:</li>

<code>Vector3</code>

<li>for the start scale</li>

<code>end</code>

<li>:</li>

<code>Vector3</code>

<li>for the end scale</li>

<code>duration</code>

<li>: duration (in seconds) of the scaling</li>

<p>This example scales an entity from one size to another over 2 seconds:</p>

<h3>Non-linear changes</h3>

<p>All of the translation components, the</p>

<code>MoveTransformComponent</code>

<p>,</p>

<code>rotateTransformComponent</code>

<p>,</p>

<code>ScaleTransformComponent</code>

<p>, and</p>

<code>FollowPathComponent</code>

<p>have an optional argument to set the rate of change. By default, the movement, rotation, or scaling occurs at a linear rate, but this can be set to other options.</p>

<p>The following values are accepted:</p>

<code>Interpolation.LINEAR</code>

<code>Interpolation.EASEINQUAD</code>

<code>Interpolation.EASEOUTQUAD</code>

<code>Interpolation.EASEQUAD</code>

<code>Interpolation.EASEINSINE</code>

<code>Interpolation.EASEOUTSINE</code>

<code>Interpolation.EASESINE</code>

<code>Interpolation.EASEINEXPO</code>

<code>Interpolation.EASEOUTEXPO</code>

<code>Interpolation.EASEEXPO</code>

<code>Interpolation.EASEINELASTIC</code>

<code>Interpolation.EASEOUTELASTIC</code>

<code>Interpolation.EASEELASTIC</code>

<code>Interpolation.EASEINBOUNCE</code>

<code>Interpolation.EASEOUTEBOUNCE</code>

<code>Interpolation.EASEBOUNCE</code>

<p>The following example moves a box following an ease-in rate:</p>

<h3>Callback on finish</h3>

<p>All of the translation components, the</p>

<code>MoveTransformComponent</code>

<p>,</p>

<code>rotateTransformComponent</code>

<p>,</p>

<code>ScaleTransformComponent</code>

<p>,</p>

<code>FollowPathComponent</code>

<p>, and</p>

<code>FollowCurvedPathComponent</code>

<p>have an optional argument that executes a function when the translation is complete.</p>

<code>onFinishCallback</code>

<li>: function to execute when movement is done.</li>

<p>The following example logs a message when the box finishes its movement. The example uses</p>

<code>MoveTransformComponent</code>

<p>, but the same applies to</p>

<code>rotateTransformComponent</code>

<p>and</p>

<code>ScaleTransformComponent</code>

<p>.</p>

<p>The</p>

<code>FollowPathComponent</code>

<p>has a two optional arguments that execute functions when a section of the path is complete and when the whole path is complete.</p>

<code>onFinishCallback</code>

<p>: function to execute when movement is complete.</p>

<code>onPointReachedCallback</code>

<p>: function to execute when each section of the path is done.</p>

<p>The following example logs a messages when the box finishes each segment of the path, and another when the entire path is done.</p>

<h2>Toggle</h2>

<p>Use the</p>

<code>ToggleComponent</code>

<p>to switch an entity between two possible states, running a same function on every transition.</p>

<p>The</p>

<code>ToggleComponent</code>

<p>has the following arguments:</p>

<code>startingState</code>

<li>: Starting state of the toggle (ON or OFF)</li>

<code>onValueChangedCallback</code>

<li>: Function to call every time the toggle state changed.</li>

<p>It exposes three methods:</p>

<code>toggle()</code>

<li>: switches the state of the component between ON and OFF</li>

<code>isOn()</code>

<li>: reads the current state of the component, without altering it. It returns a boolean, where</li>

<code>true</code>

<li>means ON.</li>

<code>setCallback()</code>

<li>: allows you to change the function to be executed by</li>

<code>onValueChangedCallback</code>

<li>, for the next time it's toggled.</li>

<p>The following example switches the color of a box between two colors each time it's clicked.</p>

<h3>Combine Toggle with Translate</h3>

<p>This example combines a toggle component with a move component to switch an entity between two positions every time it's clicked.</p>

<h2>Time</h2>

<p>These tools are all related to the passage of time in the scene.</p>

<h3>Delay a function</h3>

<p>Use the</p>

<code>setTimeout</code>

<p>function to delay the execution of a function by a given amount of milliseconds.</p>

<p>This function requires two fields:</p>

<code>ms</code>

<li>: How many milliseconds to delay the function</li>

<code>callback</code>

<li>: The function to execute after the waiting period</li>

<p>This example delays the logging of a message by 1000 milliseconds.</p>

<p>As an alternative, you can add the</p>

<code>Delay</code>

<p>component to an entity.</p>

<p>This example creates an entity that only becomes visible in the scene after 10000 milliseconds (10 seconds) have passed.</p>

<h3>Delay removing an entity</h3>

<p>Add an</p>

<code>ExpireIn</code>

<p>component to an entity to remove it from the scene after an</p>

<code>n</code>

<p>amount of milliseconds.</p>

<p>This example creates an entity that is removed from the scene 500 milliseconds after it's clicked.</p>

<h3>Repeat at an Interval</h3>

<p>Add an</p>

<code>Interval</code>

<p>component to an entity to make it execute a same function every</p>

<code>n</code>

<p>milliseconds.</p>

<p>This example creates an entity that changes its scale to a random size every 500 milliseconds.</p>

<p>To repeat the execution of a task that isn't directly tied to any entity in the scene, create a dummy entity that only holds an</p>

<code>Interval</code>

<p>component.</p>

<h2>Triggers</h2>

<h3>Trigger Component</h3>

<p>The trigger component can execute whatever you want whenever the player's position or the position of a specific entity or type of entity overlaps with an area.</p>

<p>The</p>

<code>TriggerComponent</code>

<p>has the following arguments:</p>

<code>shape</code>

<li>: Shape of the triggering collider area, either a cube or a sphere (</li>

<code>TriggerBoxShape</code>

<li>or</li>

<code>TriggerSphereShape</code>

<li>)</li>

<code>data</code>

<li>: An object of type</li>

<code>TriggerData</code>

<li>containing several optional parameters to configure the behavior of the trigger area.</li>

<p>The</p>

<code>TriggerData</code>

<p>type may contain the following parameters:</p>

<code>onCameraEnter</code>

<li>: Callback function for when the player enters the trigger area</li>

<code>onCameraExit</code>

<li>: Callback function for when the player leaves the trigger area</li>

<code>layer</code>

<li>: Layer of the Trigger, useful to discriminate between trigger events. You can set multiple layers by using a</li>

<code>|</code>

<li>symbol.</li>

<code>triggeredByLayer</code>

<li>: Against which layers to check collisions</li>

<code>onTriggerEnter</code>

<li>: Callback when an entity of a valid layer enters the trigger area</li>

<code>onTriggerExit</code>

<li>: Callback function for when an entity of a valid layer leaves the trigger area</li>

<code>enableDebug</code>

<li>: When true, makes the trigger area visible for debug purposes. Only visible when running a preview locally, not in production.</li>

<p>The following example creates a trigger that changes its position randomly when triggered by the player.</p>

<pre>:</pre>

<pre>:</pre>

<p>Note: The trigger shape can be positioned or stretched, but it can't be rotated on any axis. This is a design decision taken for performance reasons. To cover a slanted area, we recommend adding multiple triggers if applicable.</p>

<p>Each trigger area has a shape for its area to check for collisions, which is completely independent of the visible shape of the entity. The shape of the area can either be determined by a</p>

<code>TriggerBoxShape</code>

<p>or a</p>

<code>TriggerSphereShape</code>

<p>. When instancing these, can set the scale and an offset position. By default, the trigger shape starts in the same position as the entity that has the</p>

<code>TriggerComponent</code>

<p>.</p>

<p>You can check where exactly the trigger area is and its scale by setting the</p>

<code>enableDebug</code>

<p>flag to true. You will then see this shape in the scene when running a preview. This debug shape is only visible in the context of a preview, not once the scene is deployed.</p>

<p>Note: The player's head needs to go into the trigger area to activate it. If only a player's feet or torso are in, that won't trigger it. Setting</p>

<code>enableDebug</code>

<p>to true can help you check how the area overlaps with the player.</p>

<h3>Dissable a collision component</h3>

<code>TriggerComponent</code>

<p>components have an</p>

<code>enabled</code>

<p>property, which is set to</p>

<code>true</code>

<p>by default when creating it. You can use this property to disable the behavior of the component without removing it.</p>

<h3>One Time Trigger</h3>

<p>As a shortcut for creating a trigger area that is only actioned when the player first walks in or out, use the</p>

<code>addOneTimeTrigger()</code>

<p>function.</p>

<p>This function creates a new entity with a</p>

<code>TriggerComponent</code>

<p>, that gets removed as soon as the</p>

<code>onCameraEnter</code>

<p>and</p>

<code>onCameraExit</code>

<p>functions are triggered once. If only one of these is present, the entity is removed as soon it is triggered.</p>

<p>This function is especially useful for optimizing the loading of a scene, so that certain elements aren't loaded till a player walks into an area.</p>

<p>This function takes similar arguments to creating a Trigger component:</p>

<code>shape</code>

<li>: Shape of the triggering collider area, either a cube or a sphere (</li>

<code>TriggerBoxShape</code>

<li>or</li>

<code>TriggerSphereShape</code>

<li>)</li>

<code>data</code>

<li>: An object of type</li>

<code>TriggerData</code>

<li>containing several optional parameters to configure the behavior of the trigger area.</li>

<code>parent</code>

<li>: An entity to set as parent of the entity created by this function. The new entity inherits position, rotation and scale from the parent.</li>

<p>The</p>

<code>TriggerData</code>

<p>type may contain the following parameters:</p>

<code>onCameraEnter</code>

<li>: Callback function for when the player first enters the trigger area</li>

<code>onCameraExit</code>

<li>: Callback function for when the player first leaves the trigger area</li>

<code>enableDebug</code>

<li>: When true, makes the trigger area visible for debug purposes. Only visible when running a preview locally, not in production.</li>

<pre>:</pre>

<pre>:</pre>

<p>In the example above, the trigger area will only display the welcome message the first time the player walks in, and only display the goodbye message the first time the player leaves. After that, the entity is removed from the scene.</p>

<h3>Set a custom shape for player</h3>

<p>You can optionally configure a custom shape and size for the player's trigger area, according to your needs:</p>

<p>Changing this configuration affects the behavior of all</p>

<code>onCameraEnter</code>

<p>and</p>

<code>onCameraExit</code>

<p>functions of all TriggerComponents in the scene.</p>

<h3>Trigger layers</h3>

<p>You can define different layers (bitwise) for triggers, and set which other layers can trigger it.</p>

<p>The following example creates a scene that has:</p>

<li>food (cones)</li>

<li>mice (spheres)</li>

<li>cats (boxes)</li>

<p>Food is triggered (or eaten) by both cats or mice. Also, mice are eaten by cats, so a mouse's trigger area is triggered by only cats.</p>

<p>Cats and mice always move towards the food. When food or mice are eaten, they respawn in a random location.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Conversions</h2>

<p>This library includes a number of helpful functions for common value conversions.</p>

<h4>Clamp</h4>

<p>Use the</p>

<code>clamp()</code>

<p>function to easily clamp possible values between a maximum and a minimum.</p>

<p>The</p>

<code>clamp()</code>

<p>function takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min</code>

<li>: Minimum output value.</li>

<code>max</code>

<li>: Maximum output value.</li>

<p>The following example limits an incoming value between 5 and 15. If the incoming value is less than 5, it will output 5. If the incoming value is more than 15, it will output 15.</p>

<h4>Map</h4>

<p>Use the</p>

<code>map()</code>

<p>function to map a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum.</p>

<p>The</p>

<code>map()</code>

<p>function takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min1</code>

<li>: Minimum value in the range of the input.</li>

<code>max1</code>

<li>: Maximum value in the range of the input.</li>

<code>min2</code>

<li>: Minimum value in the range of the output.</li>

<code>max2</code>

<li>: Maximum value in the range of the output.</li>

<p>The following example maps the value</p>

<em>5</em>

<p>from a scale of 0 to 10 to a scale of 300 to 400. The resulting value is 350, as it keeps the same proportion relative to the new maximum and minimum values.</p>

<h4>World position</h4>

<p>If an entity is parented to another entity, or to the player, then its Transform position will be relative to its parent. To find what its global position is, taking into account any parents, use</p>

<code>getEntityWorldPosition()</code>

<p>.</p>

<p>The</p>

<code>getEntityWorldPosition()</code>

<p>function takes a single argument:</p>

<code>entity</code>

<li>: The entity from which to get the global position</li>

<p>The function returns a</p>

<code>Vector3</code>

<p>object, with the resulting position of adding the given entity and all its chain of parents.</p>

<p>The following example sets a cube as a child of the player, and logs its true position when clicked.</p>

<pre>:</pre>

<h4>World rotation</h4>

<p>If an entity is parented to another entity, or to the player, then its Transform rotation will be relative to its parent. To find what its global rotation is, taking into account any parents, use</p>

<code>getEntityWorldRotation()</code>

<p>.</p>

<p>The</p>

<code>getEntityWorldRotation()</code>

<p>function takes a single argument:</p>

<code>entity</code>

<li>: The entity from which to get the global rotation</li>

<p>The function returns a</p>

<code>Quaternion</code>

<p>object, with the resulting rotation of multiplying the given entity to all its chain of parents.</p>

<p>The following example sets a cube as a child of the player, and logs its true rotation when clicked.</p>

<pre>:</pre>

<h2>Send requests</h2>

<p>Use the</p>

<code>sendRequest()</code>

<p>function to easily send HTTP requests to APIs.</p>

<p>The</p>

<code>sendRequest()</code>

<p>function has a single required argument:</p>

<code>url</code>

<li>: The URL to send the request</li>

<p>NOTE: The sendRequest() function is asynchronous, since it must wait for the external server to respond back before it can return a response. If you need your code to access the data on the request's response, you must use the sendRequest() within an</p>

<code>async</code>

<p>block of code, and add an</p>

<code>await</code>

<p>to the function.</p>

<p>The</p>

<code>sendRequest()</code>

<p>function also lets you use the following arguments, for sending more advanced requests:</p>

<code>method</code>

<li>: The HTTP method to use.</li>

<code>GET</code>

<li>is the default, other common options are</li>

<code>POST</code>

<li>,</li>

<code>PUT</code>

<li>, and</li>

<code>DELETE</code>

<li>.</li>

<code>headers</code>

<li>: The HTTP headers of the request, as a JSON object.</li>

<code>body</code>

<li>: The body of the request, as a JSON object.</li>

<pre>:</pre>

<pre>:</pre>

<h2>Labels</h2>

<p>Add a text label floating over an entity using</p>

<code>addLabel()</code>

<p>.</p>

<p>The</p>

<code>addLabel()</code>

<p>function has just two required arguments:</p>

<code>text</code>

<li>: The string of text to display</li>

<code>parent</code>

<li>: The entity to set the label on</li>

<pre>:</pre>

<p>The</p>

<code>addLabel()</code>

<p>function also lets you set the following:</p>

<code>billboard</code>

<li>: If true, label turns to always face player. True by default.</li>

<code>color</code>

<li>: Text color. Black by default.</li>

<code>size</code>

<li>: Text font size, 3 by default.</li>

<code>textOffset</code>

<li>: Offset from parent entity's position. By default 1.5 meters above the parent.</li>

<p>Tip: The</p>

<code>addLabel()</code>

<p>function returns the created entity used for the text. You can then tweak this entity in any way you choose.</p>

<h2>Debug helpers</h2>

<h4>Debug cube</h4>

<p>Render a simple clickable cube to use as a trigger when debugging a scene with</p>

<code>addTestCube()</code>

<p>.</p>

<p>NOTE: The test cube is only shown in preview, unless configured to appear also in production.</p>

<p>The</p>

<code>addTestCube()</code>

<p>function has just two required arguments:</p>

<code>pos</code>

<li>: The position, rotation and/or scale of the cube, expressed as a TransformConstructorArgs object, as gets passed when creating a</li>

<code>Transform</code>

<li>component.</li>

<code>triggeredFunction</code>

<li>: A function that gets called every time the cube is clicked.</li>

<pre>:</pre>

<p>The</p>

<code>addTestCube()</code>

<p>function also lets you set the following:</p>

<code>label</code>

<li>: An optional label to display floating over the cube</li>

<code>color</code>

<li>: A color for the cube's material.</li>

<code>sphere</code>

<li>: If true, it renders as a Sphere instead of a cube.</li>

<code>noCollider</code>

<li>: If true, the cube won't have a collider and will let players walk through it.</li>

<code>keepInProduction</code>

<li>: If true, it will be visible for players in-world once the scene is deployed. Otherwise, the cube is only present when previewing he scene locally.</li>

<p>Tip: The</p>

<code>addTestCube()</code>

<p>function returns the created entity for the cube. You can then tweak this entity in any way you choose.</p>

<code>addTestCube()</code>

<p>is an async function (because the function first checks if you're in preview or in production). If you need the function to return the cube (instead of a promise of a cube) use it inside an async block of code with an await on the</p>

<code>addTestCube()</code>

<p>function.</p>

<pre>:</pre>

<h2>Action sequence</h2>

<p>Use an action sequence to play a series of actions one after another.</p>

<h3>IAction</h3>

<p>The</p>

<code>IAction</code>

<p>interface defines the actions that can be added into a sequence. It includes:</p>

<code>hasFinished</code>

<li>: Boolean for the state of the action, wether it has finished its execution or not.</li>

<code>onStart()</code>

<li>: First method that is called upon the execution of the action.</li>

<code>update()</code>

<li>: Called on every frame on the action's internal update.</li>

<code>onFinish()</code>

<li>: Called when the action has finished executing.</li>

<h3>Action Sequence Builder</h3>

<p>This object creates action sequences, using simple building blocks.</p>

<p>The</p>

<code>SequenceBuilder</code>

<p>exposes the following methods:</p>

<code>then()</code>

<li>: Enqueue an action so that it's executed when the previous one finishes.</li>

<code>if()</code>

<li>: Use a condition to branch the sequence</li>

<code>else()</code>

<li>: Used with if() to create an alternative branch</li>

<code>endIf()</code>

<li>: Ends the definition of the conditional block</li>

<code>while()</code>

<li>: Keep running the actions defined in a block until a condition is no longer met.</li>

<code>breakWhile()</code>

<li>: Ends the definition of the while block</li>

<h3>Action Sequence System</h3>

<p>The action sequence system takes care of running the sequence of actions. The</p>

<code>ActionsSequenceSystem</code>

<p>exposes the following methods:</p>

<code>startSequence()</code>

<li>: Starts a sequence of actions</li>

<code>setOnFinishCallback()</code>

<li>: Sets a callback for when the whole sequence is finished</li>

<code>isRunning()</code>

<li>: Returns a boolean that determines if the sequence is running</li>

<code>stop()</code>

<li>: Stops a running the sequence</li>

<code>resume()</code>

<li>: Resumes a stopped sequence</li>

<code>reset()</code>

<li>: Resets a sequence so that it starts over</li>

<h3>Full example</h3>

<p>The following example creates a box that changes its scale until clicked. Then it resets its scale and moves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Contribute</h2>

<p>All contributions from the community are encouraged as Pull Requests to this repository. Please notify of any PRs in the Decentraland Discord channels to make sure the team is aware of them.</p>

<p>In order to test any changes made to this library on active scenes, follow these steps:</p>

<li>Run</li>

<code>npm run build</code>

<li>to build internal dependencies in the project folder</li>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>Create a new DCL scene, or pick an existing one</li>

<li>Install the library normally with</li>

<code>npm i @dcl/ecs-scene-utils -B</code>

<li>Import the library normally into the project with</li>

<code>import * as utils from '@dcl/ecs-scene-utils'</code>

<li>On the scene folder, run</li>

<code>npm link @dcl/ecs-scene-utils</code>

<li>Use this scene to try out any functionality you've added or changed to verify that it behaves as expected.</li>

<p>Note: When done testing, run</p>

<code>npm unlink @dcl/ecs-scene-utils</code>

<p>on your scene, so that it no longer depends on your local copy of the library.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>31</strong>

<h3>Watchers</h3>

<strong>23</strong>

<h3>Forks</h3>

<strong>14</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-stats-aggregator

# URL: https://github.com/decentraland/catalyst-stats-aggregator

<title>GitHub - decentraland/catalyst-stats-aggregator</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-stats-aggregator</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>22</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>11</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/test-sdk-playground

# URL: https://github.com/decentraland/test-sdk-playground

<title>GitHub - decentraland/test-sdk-playground: SDK Playground</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>SDK Playground</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/test-sdk-playground</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Getting Started with Create React App</h1>

<p>This project was bootstrapped with</p>

<p>.</p>

<h2>Available Scripts</h2>

<p>In the project directory, you can run:</p>

<code>npm start</code>

<p>Runs the app in the development mode.</p>

<p>Open</p>

<p>to view it in the browser.</p>

<p>The page will reload if you make edits.</p>

<p>You will also see any lint errors in the console.</p>

<code>npm test</code>

<p>Launches the test runner in the interactive watch mode.</p>

<p>See the section about</p>

<p>for more information.</p>

<code>npm run build</code>

<p>Builds the app for production to the</p>

<code>build</code>

<p>folder.</p>

<p>It correctly bundles React in production mode and optimizes the build for the best performance.</p>

<p>The build is minified and the filenames include the hashes.</p>

<p>Your app is ready to be deployed!</p>

<p>See the section about</p>

<p>for more information.</p>

<code>npm run eject</code>

<strong>Note: this is a one-way operation. Once you</strong>

<code>eject</code>

<strong>, you canât go back!</strong>

<p>If you arenât satisfied with the build tool and configuration choices, you can</p>

<code>eject</code>

<p>at any time. This command will remove the single build dependency from your project.</p>

<p>Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except</p>

<code>eject</code>

<p>will still work, but they will point to the copied scripts so you can tweak them. At this point youâre on your own.</p>

<p>You donât have to ever use</p>

<code>eject</code>

<p>. The curated feature set is suitable for small and middle deployments, and you shouldnât feel obligated to use this feature. However we understand that this tool wouldnât be useful if you couldnât customize it when you are ready for it.</p>

<h2>Learn More</h2>

<p>You can learn more in the</p>

<p>.</p>

<p>To learn React, check out the</p>

<p>.</p>

<h2>About</h2>

<p>SDK Playground</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-node-commons

# URL: https://github.com/decentraland/catalyst-node-commons

<title>GitHub - decentraland/catalyst-node-commons</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-node-commons</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>11</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Catalyst Node Commons</h1>

<p>Set of utilities for catalyst nodes</p>

<h2>Tests</h2>

<code>yarn build

yarn test</code>

<h2>Contributing</h2>

<p>Please read</p>

<p>so that you can understand what actions will and will not be tolerated.</p>

<p>Read our</p>

<p>to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes.</p>

<h2>Release</h2>

<li>Create a tag release in Git</li>

<li>It will trigger the CI job which publishes a new docker image version under</li>

<code>@latest</code>

<li>tag</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>12</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-quests-api-spec

# URL: https://github.com/decentraland/dcl-quests-api-spec

<title>GitHub - decentraland/dcl-quests-api-spec: API specification for the DCL Quests Server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>API specification for the DCL Quests Server</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-quests-api-spec</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Quests Server API Definition</h1>

<p>API definition for the Decentraland Quests Server.</p>

<p>Check out the public API docs</p>

<h2>Working on the Catalyst API Definition</h2>

<h3>Install</h3>

<li>Install</li>

<li>.</li>

<li>Clone this repo and run</li>

<code>npm install</code>

<li>in the repo root.</li>

<h3>Usage</h3>

<code>npm start</code>

<p>Starts the reference docs preview server.</p>

<code>npm run build</code>

<p>Bundles the definition to the dist folder.</p>

<code>npm test</code>

<p>Validates the definition.</p>

<h2>Readocly</h2>

<p>This repository uses</p>

<p>to generate API reference documentation</p>

<p>The</p>

<code>.redocly.yaml</code>

<p>controls settings for various

tools including the lint tool and the reference

docs engine.  Open it to find examples and</p>

<p>for more information.</p>

<h2>About</h2>

<p>API specification for the DCL Quests Server</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://decentraland.github.io/dcl-quests-api-spec/

# URL: https://decentraland.github.io/dcl-quests-api-spec/

<title>Decentraland Quests Server</title>

<head>needed for adaptive design</head>

<h1>Decentraland Quests Server</h1>

<p>Download OpenAPI specification</p>

<p>:</p>

<p>Quests can be defined as sets of tasks that the player must complete in order to achieve an objective,  and usually receive a reward for doing so.</p>

<h1>Authentication</h1>

<h2>BasicAuth</h2>

<th>Security Scheme Type</th>

<td>HTTP</td>

<th>HTTP Authorization Scheme</th>

<td>basic</td>

<h1>Quests</h1>

<p>Quests can be defined as sets of tasks that the player must complete in order to achieve an objective, and usually receive a reward for doing so. They are defined by the content creators, either globally (they are visible in all parts of the world) or locally (they only appear in a certain scene). Each player will be able to complete a Quest just once. Quests may have an associated Reward. For this version, only POAP rewards will be available.</p>

<h2>Server Status</h2>

<p>Get Quests Server Status</p>

<h3>Responses</h3>

<strong>200</strong>

<p>OK</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>List of Quests</h2>

<p>Retrieves the list of existing Quests in the Server.</p>

<h5>query</h5>

<h5>Parameters</h5>

<p>When this is set to true the response list of quest will include the tasks for each quest</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of Quests</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Create Quest</h2>

<p>Create a new Quest</p>

<h5>Request Body schema:</h5>

<p>Quest Object</p>

<p>String to identify the quest. This string is used by the scene to reference the quest. If no id is provided, the server will generate one.</p>

<p>Name that appears in the quests menu and on the quest progress UI</p>

<p>When true the Quest is active</p>

<p>Description that appears in the quests menu, when opening the questâs details</p>

<p>String with a URL to an image to display in the quest menu and the quest progress UI. The image should be 122x122 pixels. Make sure you host this image in a location that has a CORS configuration that allows showing the content in Decentraland.</p>

<p>String with a URL to an image to display in the quest menu, when opening the questâs details. The image should be 390x170 pixels. Make sure you host this image in a location that has a CORS configuration that allows showing the content in Decentraland</p>

<p>Conditions that must be met by the player before the quest can be started</p>

<p>If visible, the quest can be found in the quests menu. âvisible_if_can_startâ makes the quest only visible if the player meets the requirements to start it. âsecretâ only makes the quest visible in the quests menu once the player started the quest, by interacting with a scene that gives the instruction to start.</p>

<p>The list of tasks that make up the quest.</p>

<p>By setting this flag to true when providing multiple task entries, you can simplify the payload so that the server automatically assigns each taskâs "previousTask" attribute to the one task declared just before it.</p>

<p>The IDs of any rewards to associate to completing all of the tasks in the quest. Use the rewards endpoint first to create a reward, then use this field to assign an already created reward.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Created Quest details</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Quest</h2>

<p>Retrieves the Quest with the specified questId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Quests object</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Update Quest</h2>

<p>Updates a Quest using the request payload.</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<h5>Request Body schema:</h5>

<p>Quest Object</p>

<p>String to identify the quest. This string is used by the scene to reference the quest. If no id is provided, the server will generate one.</p>

<p>Name that appears in the quests menu and on the quest progress UI</p>

<p>When true the Quest is active</p>

<p>Description that appears in the quests menu, when opening the questâs details</p>

<p>String with a URL to an image to display in the quest menu and the quest progress UI. The image should be 122x122 pixels. Make sure you host this image in a location that has a CORS configuration that allows showing the content in Decentraland.</p>

<p>String with a URL to an image to display in the quest menu, when opening the questâs details. The image should be 390x170 pixels. Make sure you host this image in a location that has a CORS configuration that allows showing the content in Decentraland</p>

<p>Conditions that must be met by the player before the quest can be started</p>

<p>If visible, the quest can be found in the quests menu. âvisible_if_can_startâ makes the quest only visible if the player meets the requirements to start it. âsecretâ only makes the quest visible in the quests menu once the player started the quest, by interacting with a scene that gives the instruction to start.</p>

<p>The list of tasks that make up the quest.</p>

<p>By setting this flag to true when providing multiple task entries, you can simplify the payload so that the server automatically assigns each taskâs "previousTask" attribute to the one task declared just before it.</p>

<p>The IDs of any rewards to associate to completing all of the tasks in the quest. Use the rewards endpoint first to create a reward, then use this field to assign an already created reward.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Updated Quests object</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Delete Quest</h2>

<p>Delete Quest with the specified questId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Quests Deleted successfuly</p>

<strong>401</strong>

<p>Unauthorized</p>

<h1>Quest Tasks</h1>

<p>Each Quest is composed of several tasks that need to be done in order to complete the Quest Task requirements define the dependencies of the task to be available for the player to start working on it. Unless all the requirements of the task are met, the task wonât be displayed in any of the cards of the Quest Log, Quest Details, or Quest Tracker. Tasks may be grouped into different sections inside the Quest. These sections will be defined by the Content Creator, and will provide context to a group of tasks (ie: Day 1, Day 2, etc) Tasks may contain an initial location (x, y), where players can Jump In to start working on it. Teleport will use the closest spawn point to the location described in. the task to teleport the player, otherwise it will use the default spawn point of the scene Tasks could contain individual steps needed to complete the task.</p>

<h2>Create Task</h2>

<p>Creates a Task using details provided in the request body object</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<h5>Request Body schema:</h5>

<p>Task Object</p>

<p>String to identify the task. This string is used by the scene when updating a taskâs status. If no id is provided, the server will generate one.</p>

<p>Label for the task that appears in the quest progress UI and the quest details</p>

<p>Modality of the task:  single | step-based | numeric</p>

<p>TBD</p>

<p>TBD</p>

<p>Coordinates of the parcel on the Decentraland map where this task is carried out. When coordinates are present, the task has a âJump inâ button on the quest progress UI. This button teleports players to those coordinates.</p>

<p>When true, the quest canât be considered finished until this task is completed.</p>

<p>Any progress updates to this task must comply with these validations.</p>

<p>Conditions that must be met by the player before the task is displayed on the UI and can be completed. Only tasks that currently  have their requirements met are visible.</p>

<p>The ID of the task that must be completed immediately before this task can be done, as long as this task has a âcompletedPreviousâ validation.</p>

<p>Conditions that must be met by the player before the task is displayed on the UI and can be completed. Only tasks that currently  have their requirements met are visible.</p>

<p>The list of steps that make up the quest. These are only needed if the progressMode is step-based.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Task Created</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Task</h2>

<p>Retrieve the Task in the specified Quest with the specified taskId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Task unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Task Object</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Update Task</h2>

<p>Update the TaksId inside the QuestId with the request body object details</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Task unique Identifier</p>

<h5>Request Body schema:</h5>

<p>Task Object</p>

<p>String to identify the task. This string is used by the scene when updating a taskâs status. If no id is provided, the server will generate one.</p>

<p>Label for the task that appears in the quest progress UI and the quest details</p>

<p>Modality of the task:  single | step-based | numeric</p>

<p>TBD</p>

<p>TBD</p>

<p>Coordinates of the parcel on the Decentraland map where this task is carried out. When coordinates are present, the task has a âJump inâ button on the quest progress UI. This button teleports players to those coordinates.</p>

<p>When true, the quest canât be considered finished until this task is completed.</p>

<p>Any progress updates to this task must comply with these validations.</p>

<p>Conditions that must be met by the player before the task is displayed on the UI and can be completed. Only tasks that currently  have their requirements met are visible.</p>

<p>The ID of the task that must be completed immediately before this task can be done, as long as this task has a âcompletedPreviousâ validation.</p>

<p>Conditions that must be met by the player before the task is displayed on the UI and can be completed. Only tasks that currently  have their requirements met are visible.</p>

<p>The list of steps that make up the quest. These are only needed if the progressMode is step-based.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Task Updatated</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Delete Task</h2>

<p>Delete the TaksId object inside the specified questId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Task unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Deleted task</p>

<strong>401</strong>

<p>Unauthorized</p>

<h1>Task Steps</h1>

<p>Each task may contain one or more steps. Each step can be triggered individually by the content creator to progress on the task, which will be checked by the server based on the validation rules.</p>

<h2>Create Step</h2>

<p>Creates a Step using details provided in the request body object</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Task unique Identifier</p>

<h5>Request Body schema:</h5>

<p>Step Object</p>

<p>String to identify the step.</p>

<p>List of progress validation rules to determine that the step is completed</p>

<p>Step description</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Step Created</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Step</h2>

<p>Retrieve the Step in the specified taskId that is part of the specified questId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Task unique Identifier</p>

<p>Step unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Step Object</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Update Step</h2>

<p>Update the Step of the specified taksId inside the questId with the request body object details</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Task unique Identifier</p>

<p>Step unique Identifier</p>

<h5>Request Body schema:</h5>

<p>Step Object</p>

<p>String to identify the step.</p>

<p>List of progress validation rules to determine that the step is completed</p>

<p>Step description</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Step Updatated</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Delete Step</h2>

<p>Delete the Step of the taksId object inside the specified questId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Task unique Identifier</p>

<p>Step unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Deleted step</p>

<strong>401</strong>

<p>Unauthorized</p>

<h1>Rewards</h1>

<p>Each quest may have a reward associated with it. For this initial version, we will limit this functionality to a single POAP badge. Each reward defines a âtypeâ of reward that will be granted to each user that completes a particular quest. It describes its characteristics to be able to be shown to the user, but also has a âflowâ that is used to decide how the user will claim that type of reward.</p>

<h2>List of Rewards</h2>

<p>Retrieves the list of existing Quests Rewards in the Server.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of Quests Rewards</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Create Reward</h2>

<p>Create a Reward for a Quest.</p>

<h5>Request Body schema:</h5>

<p>Reward Object</p>

<p>When generating a reward, you donât need to pass an id, the server will assign one automatically. You then need to use this ID when referencing the reward on the quest json.</p>

<p>Currently, the only supported type of reward is âpoapâ. In the future, this field will allow to specify other types.</p>

<p>This name shown on-screen when the player obtains the reward. This name should be human-readable and self explanatory to a player completing the quest.</p>

<p>A URL pointing to an image to be displayed when the player earns this reward. The image should be representative of the reward obtained. If no image is provided, no notification is shown when the user earns the reward. Make sure you host this image in a location that has a CORS configuration that allows showing the content in Decentraland</p>

<p>Define the details of how the reward is given.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Reward created object</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get Reward</h2>

<p>Gets details of a reward</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Reward unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Reward Object</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Update Reward</h2>

<p>Updates a Reward using the request payload</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Reward unique Identifier</p>

<h5>Request Body schema:</h5>

<p>Reward Object</p>

<p>When generating a reward, you donât need to pass an id, the server will assign one automatically. You then need to use this ID when referencing the reward on the quest json.</p>

<p>Currently, the only supported type of reward is âpoapâ. In the future, this field will allow to specify other types.</p>

<p>This name shown on-screen when the player obtains the reward. This name should be human-readable and self explanatory to a player completing the quest.</p>

<p>A URL pointing to an image to be displayed when the player earns this reward. The image should be representative of the reward obtained. If no image is provided, no notification is shown when the user earns the reward. Make sure you host this image in a location that has a CORS configuration that allows showing the content in Decentraland</p>

<p>Define the details of how the reward is given.</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Task Updatated</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Request samples</h3>

<li>Payload</li>

<button>Expand all</button>

<button>Collapse all</button>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Delete Reward</h2>

<p>Delete the Reward with the specified rewardId from the Server</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Reward unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Deleted reward</p>

<strong>401</strong>

<p>Unauthorized</p>

<h1>Quest Progress</h1>

<p>These set of endpoints are used to check the users progress on a Quest</p>

<h2>Get Quest Progress</h2>

<p>Retrieves the Users progress over the Quest with the specified questId</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of users progress</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get User Progress</h2>

<p>Get the progress of a specified user in the Quest</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Ethereum address of the User performing the Quest</p>

<h3>Responses</h3>

<strong>200</strong>

<p>List of user progresses</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Get User Progress Recrod</h2>

<p>Get the progress record of a specified user in the Quest</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Ethereum address of the User performing the Quest</p>

<p>Id of the progress record</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Specific user progresses record in a Quest</p>

<strong>401</strong>

<p>Unauthorized</p>

<h3>Response samples</h3>

<li>200</li>

<button>Expand all</button>

<button>Collapse all</button>

<h2>Revert Latest Progress</h2>

<p>Revert the latest progress done by the specified user in the Quest</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Ethereum address of the User performing the Quest</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Latest progress record reverted</p>

<strong>401</strong>

<p>Unauthorized</p>

<h2>Revert Progress</h2>

<p>Revert the progress with the progressId done by the specified user in the Quest</p>

<h5>path</h5>

<h5>Parameters</h5>

<p>Quest unique Identifier</p>

<p>Ethereum address of the User performing the Quest</p>

<p>Id of the progress record</p>

<h3>Responses</h3>

<strong>200</strong>

<p>Progress record reverted</p>

<strong>401</strong>

<p>Unauthorized</p>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=11

# URL: https://github.com/orgs/decentraland/repositories?page=11

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>ð¡Smart item examples</p>

<p>Smart Item Sample for SDK Cli</p>

<p>Decentraland ECS</p>

<p>Library to group peers in islands according to their position, to decide connection groups</p>

<p>Generate avatar snapshots in a lambda</p>

<p>Main entry point for user's feedback</p>

<p>Lever tap built with the Meltano Tap SDK for Singer Taps.</p>

<p>ð Distinguishable Assets Registry (ERC 721)</p>

<p>SDK Template library</p>

<p>Contracts for the LAND auction</p>

<p>Pass through contract</p>

<p>ð§ª A set of utility contracts used for the Decentraland ecosystem</p>

<p>Stream-based library for parsing and manipulating subtitle files</p>

<p>Some scripts to check the state of catalysts servers</p>

<em>11</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-access-area

# URL: https://github.com/decentraland/dcl-access-area

<title>GitHub - decentraland/dcl-access-area</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-access-area</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dcl-access-area</h1>

<p>This libary makes it easy to create 'restricted' areas within your scene based on different parameters. Some of these parameters are:</p>

<p>NFT Ownership</p>

<li>ETH or Polygon</li>

<li>ERC 721</li>

<li>ERC 1155</li>

<p>Wearables</p>

<li>Is a user wearing certain wearables</li>

<li>Does a user own certain wearables</li>

<li>Filter by 'has all'</li>

<li>Filter by 'has any'</li>

<p>Address Whitelist</p>

<h2>Install</h2>

<p>To use any of the helpers provided by this library:</p>

<p>Install this library as an npm package. Run this command in your scene's project folder:</p>

<code>npm install @dcl/access-area</code>

<p>Install the following dependency libraries, if not already in your project:</p>

<code>npm install @dcl/crypto-scene-utils @dcl/ecs-scene-utils eth-connect -B</code>

<p>Add this line at the start of your game.ts file, or any other TypeScript files that require it:</p>

<h2>Usage</h2>

<p>Create an access area to block any players that don't meet the criteria from being able to enter an area. Players that don't meet the criteria will meet an invisible blocker that will prevent them from walking into the area.</p>

<h3>Configuration</h3>

<p>When creating a new area, pass in a Config object with the following parameters depending on your access requirements:</p>

<code>transform</code>

<p>: pass in the</p>

<code>TransformConstructorArgs</code>

<p>to position, rotate, and scale the access area</p>

<code>debug</code>

<p>: a</p>

<code>boolean</code>

<p>value to toggle showing / hiding the access area locally when testing. When true, the area is visible but doesn't block players from walking into it.</p>

<code>type</code>

<p>: Type of access area. Options are:</p>

<code>NFT</code>

<code>HASWEARABLES</code>

<code>WEARABLESON</code>

<code>nftType</code>

<p>: (optional) to choose between</p>

<code>ERC721</code>

<p>and</p>

<code>ERC1155</code>

<p>nft token standards</p>

<code>contract</code>

<p>: (optional) for the nft contract address</p>

<code>tokenId</code>

<p>: (optional) for the nft token id</p>

<code>chain</code>

<p>: (optional) to choose between ETH and Polygon chains</p>

<code>allowedAddresses</code>

<p>: (optional) arry of eth addresses who will have access to the area</p>

<code>["0xf87a8372437c40ef9176c1b224cbe9307a617a25"]</code>

<code>wearables</code>

<p>: (optional) array of wearable contract addresses and their item id eg.</p>

<code>["urn:decentraland:matic:collections-v2:0xf87a8372437c40ef9176c1b224cbe9307a617a25:1"]</code>

<code>wearablesMatch</code>

<p>: (optional) to filter based on if the user has</p>

<code>ANY</code>

<p>or</p>

<code>ALL</code>

<p>of the wearables given in the array</p>

<code>name</code>

<p>: (optional) parameter to give a name to your entity</p>

<code>deniedMessage</code>

<p>: (optional) parameter to display a message to the user if they are denied access</p>

<code>onDenied</code>

<p>: (optional) callback function when a user is denied access</p>

<strong>DO NOT FORGET TO SET TO DEBUG TO FALSE BEFORE DEPLOYING</strong>

<h3>Check NFT Ownership on ETH (721)</h3>

<p>Create an access area and check if users</p>

<strong>own at least 1</strong>

<p>nft from the contract address.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Check NFT Ownership on ETH (1155)</h3>

<p>Create an access area and check if users</p>

<strong>own at least 1</strong>

<p>nft from the contract address.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Check User Wearing Wearables</h3>

<p>Create an access area and check if users are currently wearing the wearables. Use the</p>

<code>wearablesMatch</code>

<p>option to create a filter based on the user wearing</p>

<code>ALL</code>

<p>or</p>

<code>ANY</code>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Check User Owns Wearables</h3>

<p>Create an access area and check if users are currently owns the wearables. Use the</p>

<code>wearablesMatch</code>

<p>option to create a filter based on the user owning</p>

<code>ALL</code>

<p>or</p>

<code>ANY</code>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/smart-items

# URL: https://github.com/decentraland/smart-items

<title>GitHub - decentraland/smart-items: ð¡Smart item examples</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¡Smart item examples</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/smart-items</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>276</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland smart items</h1>

<p>This repository contains all of the smart itmes that are available by default in the Decentraland</p>

<p>.</p>

<h2>About smart items</h2>

<p>Smart items are special assets that include custom functionality, like buttons that can be pressed or doors that can be opened. Learn more about them in the Builder documentation:</p>

<h2>Creating smart items</h2>

<p>To create your own smart item, it's best to copy one of the existing smart items in this repository and edit it. The main files in a smart item are:</p>

<code>asset.json</code>

<p>: The smart item manifest. Includes name, ID, category, tags. It also defines all the configurable</p>

<strong>parameters</strong>

<p>available in the UI, and all the</p>

<strong>actions</strong>

<p>that can be called by other smart items that share a scene.</p>

<code>item.ts</code>

<p>: Contains the main code that controls the behavior of the item. Must include a class definition for the item, that has an</p>

<code>init()</code>

<p>function (to be called once when the scene starts), and a</p>

<code>spawn()</code>

<p>function (to be called once for every instance of the item when initialized). The</p>

<code>spawn()</code>

<p>function must take an argument of type</p>

<code>Props</code>

<p>that contains all of the parameters configured in the smart item's UI.</p>

<code>game.ts</code>

<p>: Contains a scene that is used for testing the item's functionality locally. This scene can include multiple instances of the item, or other entities to carry out more elaborate tests.</p>

<p>Learn more about how to create custom smart itmes in the SKD documentation:</p>

<p>.</p>

<h2>About</h2>

<p>ð¡Smart item examples</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>19</strong>

<h3>Watchers</h3>

<strong>18</strong>

<h3>Forks</h3>

<strong>19</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-smart-items

# Change to URL: https://github.com/decentraland/comms-v3

# URL: https://github.com/decentraland/comms-v3

<title>GitHub - decentraland/comms-v3</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/comms-v3</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/smart-item-sample

# URL: https://github.com/decentraland/smart-item-sample

<title>GitHub - decentraland/smart-item-sample: Smart Item Sample for SDK Cli</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Smart Item Sample for SDK Cli</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/smart-item-sample</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Smart Item Sample for SDK Cli</p>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/renderer-protocol

# URL: https://github.com/decentraland/renderer-protocol

<title>GitHub - decentraland/renderer-protocol</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/renderer-protocol</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>C#</h1>

<p>Add</p>

<code>GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE</code>

<p>compiler variable to enable compilation without reflection (C# 7.3, or pre-roslyn. May work better for il2cpp pipelines)</p>

<p>"ControlEvent" has a flaw in design coupling subprotocols in the main protocol. We should seek consistency.</p>

<p>Naming in messages is utterly broken, many messages are named "Report" where those are Responses to requests. "Report" is a proactive naming, for notifications. Examples:</p>

<code>SendScreenshot {id, data}</code>

<li>the name should be</li>

<code>ScreenshotResponse { requestId, data }</code>

<code>ReportBuilderCameraTarget{id,vec3}</code>

<li>should be</li>

<code>BuilderRaycastResponse{id,vec3}</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ecs

# URL: https://github.com/decentraland/ecs

<title>GitHub - decentraland/ecs: Decentraland ECS</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland ECS</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ecs</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>16</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>40</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ECS 7</h1>

<h2>Deprecated - Moved to</h2>

<h2>Installing dependencies</h2>

<p>Run</p>

<code>make install</code>

<p>, this will run the</p>

<code>npm install</code>

<p>and other dependencies</p>

<h2>Building</h2>

<p>Run</p>

<code>make build</code>

<h2>Testing</h2>

<p>Run</p>

<code>make test</code>

<p>, you can also debug the test in VS code, selecting the launch</p>

<code>Jest current file</code>

<p>or just</p>

<code>Jest</code>

<p>(this will run all test)</p>

<h2>Wishlist</h2>

<p>Use this project as template for TypeScript libraries</p>

<li>as any MutableGroupOf</li>

<li>Tests for system</li>

<li>use @dcl/ecs-math</li>

<li>Basic Components ( Transform ) w/Tests</li>

<li>Sync Component W/Tests</li>

<li>CRDT System</li>

<li>Kindof Scene Tests. Component & Systems. Maybe physics system? SolarSystem</li>

<li>Integration with old ecs ( CRDT/Door Scene )</li>

<li>RPC Transport. JSON { entityId, componentId, data: } vs Protocol Buffers</li>

<li>EntityID generator</li>

<li>Static vs Dynamic entities.</li>

<li>Sync Components ?</li>

<li>Where the state lives ? State cross realms/islands ? StateFull questions. StorableComponent ?</li>

<h2>About</h2>

<p>Decentraland ECS</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/deprecated---moved-to-httpsgithubcomdecentralandjs-sdk-toolchain

# Change to URL: https://github.com/decentraland/rpc-unity-example

# URL: https://github.com/decentraland/rpc-unity-example

<title>GitHub - decentraland/rpc-unity-example</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rpc-unity-example</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/talent-hub

# URL: https://github.com/decentraland/talent-hub

<title>GitHub - decentraland/talent-hub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/talent-hub</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>talent-hub</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/serverless-snapshots

# URL: https://github.com/decentraland/serverless-snapshots

<title>GitHub - decentraland/serverless-snapshots: Generate avatar snapshots in a lambda</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Generate avatar snapshots in a lambda</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/serverless-snapshots</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Serverless Snapshots</h1>

<p>This serverless functions can generate a snapshot of the face or the full body of an avatar in mainnet or ropsten.</p>

<p>There are 2 endpoints in the api:</p>

<code>GET /api/:network/:type/:address</code>

<p>: This endpoint will fetch the currently pointed profile entity in the desired network for a given address, and redirect with a 302 status code to</p>

<code>/api/:network/:type/:address/:hash</code>

<p>where</p>

<code>:hash</code>

<p>is the entity id.</p>

<code>GET /api/:network/:type/:address/:hash</code>

<p>: This endpoint will generate the desired image type (face or body) for the given address and network, for particular hash, and it will return it with headers to aggressively cache it at the edges/cdn.</p>

<p>The rationale behind this design is to have the first endpoint to be the one used by consumers of the API, and have the second one act as cache, only generating images for new profile deployments.</p>

<h2>About</h2>

<p>Generate avatar snapshots in a lambda</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/lighthouse-service

# URL: https://github.com/decentraland/lighthouse-service

<title>GitHub - decentraland/lighthouse-service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/lighthouse-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<g-emoji>â ï¸</g-emoji>

<h2>Deprecation notice</h2>

<p>This repository was intended to replace the legacy</p>

<code>lighthouse</code>

<p>server, but it is not necessary on the latest comms architecture.</p>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic, adapters, and ports.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/ports</h3>

<p>The layer that communicates with the outside world, such as http, kafka, and the database.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-lever

# URL: https://github.com/decentraland/tap-lever

<title>GitHub - decentraland/tap-lever: Lever tap built with the Meltano Tap SDK for Singer Taps.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Lever tap built with the Meltano Tap SDK for Singer Taps.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-lever</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-lever</h1>

<code>tap-lever</code>

<p>is a Singer tap for the Lever API. Documentation for the API can be found on</p>

<p>.</p>

<p>Built with the</p>

<p>for Singer Taps.</p>

<h2>Installation</h2>

<code>Developer TODO:</code>

<li>Update the below as needed to correctly describe the install procedure. For instance, if you do not have a PyPi repo, or if you want users to directly install from your git repo, you can modify this step as appropriate.</li>

<pre>pipx install tap-lever</pre>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<code>Developer TODO:</code>

<li>Provide a list of config options accepted by the tap.</li>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-lever --about</pre>

<h3>Source Authentication and Authorization</h3>

<code>Developer TODO:</code>

<li>If your tap requires special access on the source system, or any special authentication requirements, provide those here.</li>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-lever</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-lever --version

tap-lever --help

tap-lever --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<code>Developer TODO:</code>

<li>As a first step, scan the entire project for the text "</li>

<code>TODO:</code>

<li>" and complete any recommended steps, deleting the "TODO" references once completed.</li>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_lever/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-lever</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-lever --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Your project comes with a custom</p>

<code>meltano.yml</code>

<p>project file already created. Open the</p>

<code>meltano.yml</code>

<p>and follow any</p>

<em>"TODO"</em>

<p>items listed in

the file.</p>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-lever

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-lever --version</pre>

<pre>meltano elt tap-lever target-jsonl</pre>

<h3>SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>Lever tap built with the Meltano Tap SDK for Singer Taps.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/erc721

# URL: https://github.com/decentraland/erc721

<title>GitHub - decentraland/erc721: ð Distinguishable Assets Registry (ERC 721)</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Distinguishable Assets Registry (ERC 721)</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/erc721</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>157</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ERC 721 (formerly 821)</h1>

<p>Contracts for the standard implementation of the ERC721</p>

<p>Full spec:</p>

<p>Formerly known as 821</p>

<h2>License</h2>

<p>Code released under</p>

<p>.</p>

<h2>About</h2>

<p>ð Distinguishable Assets Registry (ERC 721)</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>94</strong>

<h3>Watchers</h3>

<strong>30</strong>

<h3>Forks</h3>

<strong>38</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/test-new-ecs-scene

# URL: https://github.com/decentraland/test-new-ecs-scene

<title>GitHub - decentraland/test-new-ecs-scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/test-new-ecs-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland scene</h1>

<p>This folder contains all the necessary files to launch a Decentraland scene.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sdk-library

# URL: https://github.com/decentraland/sdk-library

<title>GitHub - decentraland/sdk-library: SDK Template library</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>SDK Template library</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sdk-library</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h2>SDK Library</h2>

<p>This project has the basics to start building your own library for using in Decentraland scenes.</p>

<p>The libraries in the</p>

<p>are available for all to use. We encourage you to create and share your own as well, we'd love to see the community grow and start sharing more reusable solutions to common problems through libraries!</p>

<h2>Publish</h2>

<p>See</p>

<p>for tips on how to design and develop your library, and for simple instructions for publishing it to NPM.</p>

<p>Below is a template to help you craft documentation for your library, so others know how to use it.</p>

<h1>MyAmazingLibrary Documentation</h1>

<p>myAmazingLibrary includes helpful solutions for</p>

<code>< insert use case ></code>

<p>in a Decentraland scene.</p>

<h2>Install</h2>

<p>To use any of the helpers provided by this library:</p>

<p>Install it as an npm package. Run this command in your scene's project folder:</p>

<code>npm install myAmazingLibrary</code>

<p>Add this line at the start of your game.ts file, or any other TypeScript files that require it:</p>

<h2>Usage</h2>

<h3>< use case 1 ></h3>

<p>To do</p>

<code>< insert use case ></code>

<p>, add the</p>

<code>MyAmazingComponent</code>

<p>component to the entity.</p>

<p>MyAmazingComponent requires two arguments when being constructed:</p>

<code>start</code>

<li>: Vector3 for the start position</li>

<code>duration</code>

<li>: duration (in seconds)</li>

<p>MyAmazingComponent can optionally also take the following argument:</p>

<code>color</code>

<li>: Color4 value for the color. If not provided, the default value is</li>

<code>Color4.Red()</code>

<p>This example uses MyAmazingComponent to do</p>

<code>< insert use case ></code>

<p>to an entity over a period of 2 seconds:</p>

<p>Note: Be aware that if < other use case >, MyAmazingComponent will < do some other thing >.</p>

<h3>< use case 2 ></h3>

<p>...</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>SDK Template library</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/land-auction

# URL: https://github.com/decentraland/land-auction

<title>GitHub - decentraland/land-auction: Contracts for the LAND auction</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Contracts for the LAND auction</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/land-auction</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>90</strong>

<h2>Files</h2>

<button>View code</button>

<h1>land-auction</h1>

<p>Contracts for the LAND auction</p>

<h1>Contract Interface</h1>

<h2>LANDAuctionStorage.sol</h2>

<pre>{</pre>

<pre>PERCENTAGE_OF_TOKEN_BALANCE</pre>

<pre>;</pre>

<pre>MAX_DECIMALS</pre>

<pre>;</pre>

<pre>{ created, finished }</pre>

<pre>{</pre>

<pre>slope;</pre>

<pre>base;</pre>

<pre>limit;

}</pre>

<pre>{</pre>

<pre>decimals;</pre>

<pre>shouldBurnTokens;</pre>

<pre>shouldForwardTokens;</pre>

<pre>forwardTarget;</pre>

<pre>isAllowed;

}</pre>

<pre>conversionFee</pre>

<pre>;</pre>

<pre>totalBids</pre>

<pre>;

Status</pre>

<pre>status;</pre>

<pre>gasPriceLimit;</pre>

<pre>landsLimitPerBid;</pre>

<pre>manaToken;

LANDRegistry</pre>

<pre>landRegistry;

ITokenConverter</pre>

<pre>dex;</pre>

<pre>(</pre>

<pre>Token)</pre>

<pre>tokensAllowed;</pre>

<pre>totalManaBurned</pre>

<pre>;</pre>

<pre>startTime;</pre>

<pre>endTime;

Func[]</pre>

<pre>curves;</pre>

<pre>initialPrice;</pre>

<pre>endPrice;</pre>

<pre>duration;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);

}</pre>

<h2>LANDAuction.sol</h2>

<pre>,</pre>

<pre>{</pre>

<pre>(</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,

LANDRegistry</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>()</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner;</pre>

<pre>()</pre>

<pre>onlyOwner;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>onlyOwner;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner;</pre>

<pre>(</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>,</pre>

<pre>);</pre>

<pre>()</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;

}</pre>

<h2>About</h2>

<p>Contracts for the LAND auction</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>8</strong>

<h3>Watchers</h3>

<strong>9</strong>

<h3>Forks</h3>

<strong>9</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/pass-through

# URL: https://github.com/decentraland/pass-through

<title>GitHub - decentraland/pass-through: Pass through contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Pass through contract</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/pass-through</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>pass-through</h1>

<p>Pass through contract for District</p>

<h1>Contract Interface</h1>

<pre>{</pre>

<pre>(</pre>

<pre>)</pre>

<pre>disableMethods;</pre>

<pre>estateRegistry;</pre>

<pre>operator;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);

}</pre>

<pre>,</pre>

<pre>{</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>()</pre>

<pre>()</pre>

<pre>()</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>)

}</pre>

<h2>About</h2>

<p>Pass through contract</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/bid-contract

# URL: https://github.com/decentraland/bid-contract

<title>GitHub - decentraland/bid-contract</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/bid-contract</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>67</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Smart contract for bidding ERC721 tokens</h1>

<p>Bid contract for ERC721 tokens</p>

<h2>Install</h2>

<code>npm i --save-dev bid-contract</code>

<h2>How it works</h2>

<li>Bidders should approve the Bid Contract to operate MANA on their behalf.</li>

<li>Bids are placed on-chain calling</li>

<code>bid(tokenAddress, tokenId, price, duration)</code>

<li>or</li>

<code>bid(tokenAddress, tokenId, price, duration, fingerPrint)</code>

<li>for composable tokens.</li>

<li>Bids can be placed for published & unpublished tokens.</li>

<li>Bids can be cancelled.</li>

<li>A token can have multiple bids, but</li>

<em>only one</em>

<li>per address.</li>

<li>If the token owner wants to accept a bid, he should transfer the token to the Bid Contract using</li>

<code>safeTransferFrom(owner, bid_contract, tokenId, bidId)</code>

<li>.

Once the Bid Contract receives the token (onERC721Received) it will check if the bid is valid and will transfer the MANA from the bidder to the token owner

and the token from the Bid Contract to the bidder.</li>

<li>Fees, if present, are going to be deducted by the bid price.</li>

<li>The bid will remain invalid if:</li>

<li>Expired.</li>

<li>A bid for the same token is accepted.</li>

<li>Fingerprint changed (Only Composable tokens).</li>

<li>If the token has an active publication in the Decentraland Marketplace when a bid is accepted, the order will become invalid because the owner changed.</li>

<li>If the contract is paused, place, cancel and accept bids can not be performed.</li>

<h1>Contract Interface</h1>

<pre>{</pre>

<pre>MAX_BID_DURATION</pre>

<pre>;</pre>

<pre>MIN_BID_DURATION</pre>

<pre>;</pre>

<pre>ONE_MILLION</pre>

<pre>;</pre>

<pre>ERC721_Interface</pre>

<pre>;</pre>

<pre>ERC721_Received</pre>

<pre>;</pre>

<pre>ERC721Composable_ValidateFingerprint</pre>

<pre>;</pre>

<pre>{</pre>

<pre>id;</pre>

<pre>bidder;</pre>

<pre>tokenAddress;</pre>

<pre>tokenId;</pre>

<pre>price;</pre>

<pre>expiresAt;</pre>

<pre>fingerprint;

}</pre>

<pre>manaToken;</pre>

<pre>(</pre>

<pre>(</pre>

<pre>(</pre>

<pre>Bid)))</pre>

<pre>bidsByToken;</pre>

<pre>(</pre>

<pre>(</pre>

<pre>))</pre>

<pre>bidCounterByToken;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>bidIndexByBidId;</pre>

<pre>(</pre>

<pre>(</pre>

<pre>(</pre>

<pre>)))</pre>

<pre>bidIdByTokenAndBidder;</pre>

<pre>feesCollectorCutPerMillion;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>);

}</pre>

<pre>{</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>()</pre>

<pre>()</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>();</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>()</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>,</pre>

<pre>[]</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>();</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>,</pre>

<pre>);</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>(Bid</pre>

<pre>);</pre>

<pre>(</pre>

<pre>)</pre>

<pre>onlyOwner;</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>);</pre>

<pre>(</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;</pre>

<pre>(</pre>

<pre>,</pre>

<pre>)</pre>

<pre>;

}</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>8</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>16</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/aux-contracts

# URL: https://github.com/decentraland/aux-contracts

<title>GitHub - decentraland/aux-contracts: ð§ª A set of utility contracts used for the Decentraland ecosystem</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð§ª A set of utility contracts used for the Decentraland ecosystem</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/aux-contracts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>aux-contracts</h1>

<p>A set of utility contracts used for the Decentraland ecosystem</p>

<h2>About</h2>

<p>ð§ª A set of utility contracts used for the Decentraland ecosystem</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>17</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/subtitle.js

# URL: https://github.com/decentraland/subtitle.js

<title>GitHub - decentraland/subtitle.js: Stream-based library for parsing and manipulating subtitle files</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Stream-based library for parsing and manipulating subtitle files</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/subtitle.js</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>7</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>209</strong>

<h2>Files</h2>

<button>View code</button>

<h1>subtitle</h1>

<p>Stream-based library for parsing and manipulating subtitle files.</p>

<p>John-David Dalton, creator of Lodash</p>

<p>â Stream API</p>

<p>â Written in TypeScript</p>

<p>â SRT support</p>

<p>â Partial support for WebVTT (full support comming soon)</p>

<p>â 100% code coverage</p>

<p>â Actively maintained since 2015</p>

<h2>Installation</h2>

<h3>npm</h3>

<code>npm install @dcl/subtitle-helper</code>

<h2>Usage</h2>

<p>This library provides some stream-based functions to work with subtitles. The following example parses a SRT file, resyncs it and outputs a VTT file:</p>

<pre>:</pre>

<p>It also provides functions like</p>

<code>map</code>

<p>and</p>

<code>filter</code>

<p>:</p>

<pre>:</pre>

<p>Besides the stream functions, this module also provides synchronous functions like</p>

<code>parseSync</code>

<p>and</p>

<code>stringifySync</code>

<p>. However, you should avoid them and use the stream-based functions for better performance:</p>

<pre>:</pre>

<h2>API</h2>

<p>The module exports the following functions:</p>

<code>parse</code>

<code>parseSync</code>

<code>stringify</code>

<code>stringifySync</code>

<code>map</code>

<code>filter</code>

<code>resync</code>

<code>parseTimestamp</code>

<code>parseTimestamps</code>

<code>formatTimestamp</code>

<h3>parse</h3>

<code>parse(): DuplexStream</code>

<p>It returns a Duplex stream for parsing subtitle contents (SRT or WebVTT).</p>

<p>Check out the</p>

<p>section for more use cases.</p>

<h3>parseSync</h3>

<code>parseSync(input: string): Node[]</code>

<strong>NOTE</strong>

<p>: For better perfomance, consider using the stream-based</p>

<code>parse</code>

<p>function</p>

<p>It receives a string containing a SRT or VTT content and returns

an array of nodes:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>stringify</h3>

<code>stringify({ format: 'SRT' | 'vtt' }): DuplexStream</code>

<p>It returns a Duplex that receives parsed nodes and transmits the node formatted in SRT or WebVTT:</p>

<pre>:</pre>

<p>Check out the</p>

<p>section for more use cases.</p>

<h3>stringifySync</h3>

<code>stringify(nodes: Node[], options: { format: 'SRT' | 'vtt }): string</code>

<strong>NOTE</strong>

<p>: For better perfomance, consider using the stream-based</p>

<code>stringify</code>

<p>function</p>

<p>It receives an array of captions and returns a string in SRT (default), but it also supports VTT format through the options.</p>

<pre>:</pre>

<pre>:</pre>

<h3>map</h3>

<code>map(callback: function): DuplexStream</code>

<p>A useful Duplex for manipulating parsed nodes. It works similar to the</p>

<code>Array.map</code>

<p>function, but for streams:</p>

<pre>:</pre>

<h3>filter</h3>

<code>filter(callback: function): DuplexStream</code>

<p>A useful Duplex for filtering parsed nodes. It works similar to the</p>

<code>Array.filter</code>

<p>function, but for streams:</p>

<pre>:</pre>

<h3>resync</h3>

<code>resync(time: number): DuplexStream</code>

<p>Resync all cues from the stream:</p>

<h3>parseTimestamp</h3>

<code>parseTimestamp(timestamp: string): number</code>

<p>Receives a timestamp (SRT or VTT) and returns its value in milliseconds:</p>

<h3>parseTimestamps</h3>

<code>parseTimestamps(timestamps: string): Timestamp</code>

<p>It receives a timestamps string, like</p>

<code>00:01:00,500 --> 00:01:10,800</code>

<p>. It also supports VTT formats like</p>

<code>12:34:56,789 --> 98:76:54,321 align:middle line:90%</code>

<p>.</p>

<h3>formatTimestamp</h3>

<code>formatTimestamp(timestamp: number, options?: { format: 'SRT' | 'vtt' }): string</code>

<p>It receives a timestamp in milliseconds and returns it formatted as SRT or VTT:</p>

<pre>:</pre>

<h2>Examples</h2>

<h3>Nodes</h3>

<p>This is what a list of nodes looks like:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>...</pre>

<p>For now, it only supports two types of node:</p>

<code>header</code>

<p>and</p>

<code>cue</code>

<p>. Soon, it will support more types

like</p>

<code>comment</code>

<p>.</p>

<h3>Convert SRT file to WebVTT</h3>

<pre>:</pre>

<h3>Extract subtitles from a video</h3>

<p>The following example uses the</p>

<code>rip-subtitles</code>

<p>for extracting subtitles from a mkv video and save it

as WebVTT.</p>

<pre>:</pre>

<h3>Create subtitles</h3>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>License</h2>

<p>MIT</p>

<h2>About</h2>

<p>Stream-based library for parsing and manipulating subtitle files</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>63</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-scripts

# URL: https://github.com/decentraland/catalyst-scripts

<title>GitHub - decentraland/catalyst-scripts: Some scripts to check the state of catalysts servers</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Some scripts to check the state of catalysts servers</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-scripts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>29</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Deprecated</h1>

<p>Please don't add functionality here!</p>

<h1>Catalyst Scripts</h1>

<p>This repository is a collection of scripts that are useful in some way regarding catalysts. This can scripts can verify if some condition is true or not, or they might execute a specific action.</p>

<h2>How to use</h2>

<p>First, install all dependencies</p>

<code>npm i</code>

<p>Then, to see the list of available scripts, execute:</p>

<code>npm run</code>

<p>To understand what a script does, execute:</p>

<pre>${</pre>

<h2>About</h2>

<p>Some scripts to check the state of catalysts servers</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>14</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/nats-test

# URL: https://github.com/decentraland/nats-test

<title>GitHub - decentraland/nats-test</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/nats-test</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Nats test</h1>

<p>Run</p>

<code>go run main.go</code>

<code>-debug

Print debug info

-islands int

Total islands to distribute peers between (default 10)

-peers int

Total peers to simulate (default 10000)

-url string

Nats cluster URL (default "nats://127.0.0.1:4222")</code>

<h1>Our test</h1>

<p>Server was:</p>

<code>Image

Ubuntu 20.04 (LTS) x64

Size

4 vCPUs

8GB / 160GB Disk

San Francisco</code>

<p>We had two clients running 6 supernodes each, 500 peers every supernode

We had an extra client droplet running 4 supernodes, 500 peers each</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/pixel-chain-mural-scene

# URL: https://github.com/decentraland/pixel-chain-mural-scene

<title>GitHub - decentraland/pixel-chain-mural-scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/pixel-chain-mural-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Pixel Mural</h1>

<em>A screenshot of the mural-example-scene running in preview.</em>

<p>This scene lets you paint a mural by coloring one pixel at a time in a grid of 32 x 32 pixels. You can then mint the resulting mural as an NFT on</p>

<p>.</p>

<p>This scene shows you:</p>

<li>How to interact with a smart contract to call its functions (Pixelchain's contract, in this case)</li>

<li>How to use the messagebus to sync changes with other players</li>

<li>How to encapsule logic and properties into game objects</li>

<li>How to display a UI with buttons and input fields</li>

<li>How to use trigger areas to delay the rendering of entities till a player enters an area</li>

<li>How to change the materials of a primitive shape</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Paste the following to the end of the URL in the browser window:</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<p>, make it</p>

<p>Note: The mural itself may take some time to load before you can see it.</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<strong>Scene Usage</strong>

<p>Approach the center of the scene for the wall and the pallette to load.</p>

<p>On the different colors of the pallette press E to pick a color, then click on the tiles of the mural to paint them that color. Other players in the scene will also see the mural change.</p>

<p>You can also press F on one of the colors of the swatch to open a UI where you can set a different Hex color. Pixelchain NFTs can only contain up to 12 different colors, but you can pick which colors. So you can change any of the colors and this will be also synced w other players.</p>

<p>When you're happy with your creation, click on the pink cube next to the mural and it will open a UI where you can give your work a name and mint it as a PixelChain NFT.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>15</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/cli-preview-in-server

# URL: https://github.com/decentraland/cli-preview-in-server

<title>GitHub - decentraland/cli-preview-in-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/cli-preview-in-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/deeplink-landing

# URL: https://github.com/decentraland/deeplink-landing

<title>GitHub - decentraland/deeplink-landing</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/deeplink-landing</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Getting Started with Create React App</h1>

<p>This project was bootstrapped with</p>

<p>.</p>

<h2>Available Scripts</h2>

<p>In the project directory, you can run:</p>

<code>yarn start</code>

<p>Runs the app in the development mode.</p>

<p>Open</p>

<p>to view it in the browser.</p>

<p>The page will reload if you make edits.</p>

<p>You will also see any lint errors in the console.</p>

<code>yarn test</code>

<p>Launches the test runner in the interactive watch mode.</p>

<p>See the section about</p>

<p>for more information.</p>

<code>yarn build</code>

<p>Builds the app for production to the</p>

<code>build</code>

<p>folder.</p>

<p>It correctly bundles React in production mode and optimizes the build for the best performance.</p>

<p>The build is minified and the filenames include the hashes.</p>

<p>Your app is ready to be deployed!</p>

<p>See the section about</p>

<p>for more information.</p>

<code>yarn eject</code>

<strong>Note: this is a one-way operation. Once you</strong>

<code>eject</code>

<strong>, you canât go back!</strong>

<p>If you arenât satisfied with the build tool and configuration choices, you can</p>

<code>eject</code>

<p>at any time. This command will remove the single build dependency from your project.</p>

<p>Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except</p>

<code>eject</code>

<p>will still work, but they will point to the copied scripts so you can tweak them. At this point youâre on your own.</p>

<p>You donât have to ever use</p>

<code>eject</code>

<p>. The curated feature set is suitable for small and middle deployments, and you shouldnât feel obligated to use this feature. However we understand that this tool wouldnât be useful if you couldnât customize it when you are ready for it.</p>

<h2>Learn More</h2>

<p>You can learn more in the</p>

<p>.</p>

<p>To learn React, check out the</p>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/FFMPEGMediaDecoder

# URL: https://github.com/decentraland/FFMPEGMediaDecoder

<title>GitHub - decentraland/FFMPEGMediaDecoder</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/FFMPEGMediaDecoder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>24</strong>

<h2>Files</h2>

<button>View code</button>

<p>ViveMediaDecoder

Copyright (c) 2015-2019, HTC Corporation. All rights reserved.</p>

<h2>Introduction:</h2>

<p>ViveMediaDecoder is a high performance video decoding Unity plugin for Windows

which supports streaming multiple formats.</p>

<p>We also provide the samples for playing various video types which includes

2D, stereo 2D, 360, stereo 360. You can build custom VR video player easily

through this plugin.</p>

<p>This software uses FFmpeg 3.4 licensed under LGPL license.

To review the LGPL license, look</p>

<p>.

The FFmpeg 3.4 source code can be downloaded from</p>

<p>.</p>

<h2>Requirements:</h2>

<li>Windows 7</li>

<li>DirectX 11</li>

<li>Unity 5</li>

<li>FFmpeg 3.4</li>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland/repositories?page=12

# URL: https://github.com/orgs/decentraland/repositories?page=12

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>test scene for CRDT protocol</p>

<p>ð² Builder asset packs</p>

<p>Portable Operating System Interface for Decentraland Scenes</p>

<p>nft_bazl gallery</p>

<p>just a simple dummy token</p>

<p>socket pool components for well-know-components</p>

<p>React app for testing WebRTC Selective Forwarding Unit</p>

<p>ion javascript sdk</p>

<p>Pure Go WebRTC SFU</p>

<p>ð Explore Decentraland from a web browser</p>

<p>ð WebRTC Signalling Server that uses Server-Sent Events</p>

<p>A Singer.io Target for Snowflake</p>

<p>Decentraland Library for creating quests ECS components to show in UI</p>

<p>issues, features requests and discussions related to sdk.</p>

<p>Exploration of new RPC mechanisms</p>

<p>This is the backlog for big scale architecture decisions regarding the Explorer product and its sub-products</p>

<p>Allows multiple parties to agree on transactions before execution.</p>

<p>Resharper format pre-commit hook</p>

<em>12</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/pow-authorization-server

# URL: https://github.com/decentraland/pow-authorization-server

<title>GitHub - decentraland/pow-authorization-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/pow-authorization-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>57</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Proof of Work: Authorization Server</h1>

<p>This service exposes an API to authenticate requests using Proof of work.</p>

<p>Auth server creates a challenge that the client needs to solve using Proof Of Work. The challenge consists of:</p>

<li>Complexity: number</li>

<li>Challenge: string</li>

<p>So, the client needs to find a nonce (string), that the following calculation evaluates to true:</p>

<code>hash(challenge + nonce).startsWith('0'.repeat(complexity))</code>

<p>The hash used is</p>

<code>sha256</code>

<p>with</p>

<code>hex</code>

<p>text encoding. Challenge size is 256 bytes.</p>

<p>If the challenge is valid, then the service will return a JWT that contains the nonce which will be used as identifier. The JWT is generated using</p>

<code>RS256</code>

<p>algorithm.</p>

<p>The public key to validate the returned JWT can be obtained in a format of</p>

<code>pem</code>

<p>with type</p>

<code>spki</code>

<p>.</p>

<h2>How to integrate with this server?</h2>

<li>Obtain a challenge:</li>

<code>response = fetch("authserverHostname/challenge")

challenge: string = response.body.challenge

complexity: number = response.body.complexity</code>

<li>Generate challenge:</li>

<p>run</p>

<code>node utils/solveChallenge.js <challenge> <complexity></code>

<li>Obtain JWT:</li>

<code>response = post("authserverHostname/challenge", { complexity, nonce, challenge })

jwt = response.body.jwt

jwtCookieHeader = response.headers['Set-Cookie']</code>

<h2>API Docs</h2>

<h2>Environment Variables</h2>

<code>SECRETS_DIRECTORY</code>

<li>: Path of the folder where the file</li>

<code>public_key.pem</code>

<li>will be stored when the app starts.</li>

<code>COMPLEXITY_RANGES_VARIABLE</code>

<li>: This variable is used to define the ranges of complexity of the challenge sent to the users, it should always contain the 0, the default value is</li>

<code>0:4,600:5,1200:6,2000:7</code>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and ports.</p>

<h3>components</h3>

<p>We use the components abstraction to organize our ports (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>12</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/builder-assets

# URL: https://github.com/decentraland/builder-assets

<title>GitHub - decentraland/builder-assets: ð² Builder asset packs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð² Builder asset packs</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/builder-assets</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>8</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>97</strong>

<h2>Files</h2>

<button>View code</button>

<h1>builder-assets</h1>

<p>This repo contains the assets for the</p>

<p>and a script to deploy them.</p>

<h2>License</h2>

<p>This work is licensed under a</p>

<p>. Feel free to contact us at</p>

<p>for other licensing agreements.</p>

<h2>Deploy</h2>

<h3>Before running</h3>

<p>Some setup before running the deployment script.</p>

<h4>Env file</h4>

<p>You can supply your AWS credentials by creating a</p>

<code>.env</code>

<p>file in the root folder of this project. Check the</p>

<code>.env.example</code>

<p>file to see how the variables should be named.</p>

<h4>Asset pack thumbnail</h4>

<p>Add a</p>

<code>thumbnail.png</code>

<p>file to an asset pack folder for it to be the thumbnail of that pack.</p>

<h4>Asset pack info file</h4>

<p>The file must be called</p>

<code>info.json</code>

<p>and it should have the following properties (example from</p>

<code>MiniTown</code>

<p>, AKA</p>

<code>Genesis City</code>

<p>):</p>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}</pre>

<h4>Generating a new id</h4>

<p>You can use</p>

<h3>How to run</h3>

<pre>builder-assets

npm run bundle -- --src ./assets  --bucket AWS_BUCKET --content-server CONTENT_SERVER_URL --out ./out/path --url https://ALIAS.now.sh</pre>

<pre>./out/path

now</pre>

<pre>ALIAS</pre>

<p>Run</p>

<code>npm run bundle -- --help</code>

<p>to see the help in the terminal</p>

<h2>About</h2>

<p>ð² Builder asset packs</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>20</strong>

<h3>Watchers</h3>

<strong>22</strong>

<h3>Forks</h3>

<strong>19</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/treasure-hunt

# URL: https://github.com/decentraland/treasure-hunt

<title>GitHub - decentraland/treasure-hunt</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/treasure-hunt</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>16</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dao.decentraland.org</h1>

<p>DAO landing page</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/daodecentralandorg

# Change to URL: https://github.com/decentraland/posix

# URL: https://github.com/decentraland/posix

<title>GitHub - decentraland/posix: Portable Operating System Interface for Decentraland Scenes</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Portable Operating System Interface for Decentraland Scenes</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/posix</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>5</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>25</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/posix</h1>

<p>Contains the environment type definitions for the exposed functions in the scenes. For that reason, this repository may be the most important part of the Decentraland's JS SDK.</p>

<h2>Why is it important?</h2>

<strong>To ensure backwards compatibility</strong>

<p>: according to its vision, Decentraland is a project that should be designed to last forever. That may be very difficult or even impractical, with this interface, we can ensure that every piece of JS code runs in a backwards compatible enviroment.</p>

<strong>To enable multiple runtimes</strong>

<p>: keeping the interface simple, help the developers to implement new runtimes without being tied to platform specific APIs, i.e: IndexedDB,</p>

<code>localStorage</code>

<p>, or the</p>

<code>process</code>

<p>variable in NodeJS. As an example, the runtime does not expose</p>

<code>setTimeout</code>

<p>which is not a standard API.</p>

<h2>Contributions</h2>

<p>This repository is append only, more specifically, nothing can be changed or removed once a type declaration gets released with a version tag (excluding the</p>

<code>@next</code>

<p>releases).</p>

<p>That makes this project almost static, because every addition is a maintainability compromise that will last forever.</p>

<p>For exceptional cases, like API additions, it should be a very thoughtful process for the reasons mentioned above, and the proposed mechanism is to first draft the full scope of the solution in a PR explaining the reasons and evaluating other options.</p>

<p>The most common and least "dangerous" addition to this repository are events from the Renderer or the Runtime (see</p>

<code>IEvents</code>

<p>).</p>

<p>Please follow the naming convention for events, it was decided to not use the</p>

<code>on</code>

<p>prefix on events since it is redundant and confusing with observables and event emiters:</p>

<code>events.on("eventName")</code>

<p>is better than</p>

<code>events.on("onEventName")</code>

<p>.</p>

<p>Also notice that</p>

<code>enum</code>

<p>are not allowed in ambient declarations, since enums are also values in Typescript. Use union types instead.</p>

<h2>About</h2>

<p>Portable Operating System Interface for Decentraland Scenes</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/nft_bazl

# URL: https://github.com/decentraland/nft_bazl

<title>GitHub - decentraland/nft_bazl: nft_bazl gallery</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>nft_bazl gallery</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/nft_bazl</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>nft_bazl gallery</p>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/wasm-quickjs-loader

# URL: https://github.com/decentraland/wasm-quickjs-loader

<title>GitHub - decentraland/wasm-quickjs-loader</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/wasm-quickjs-loader</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>WASM QuickJS Loader</h1>

<h2>Setup</h2>

<p>Run</p>

<code>make install</code>

<p>to install wasi-sdk, this provide you of clang binaries and sysroot files to compile.

Also you'll need to install CMake.</p>

<h2>Build</h2>

<p>Run</p>

<code>make build</code>

<h2>TODO: Tests</h2>

<p>There isn't any test for now</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dummy-token

# URL: https://github.com/decentraland/dummy-token

<title>GitHub - decentraland/dummy-token: just a simple dummy token</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>just a simple dummy token</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dummy-token</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Dummy Token</h1>

<p>A simple dummy token. Based on the</p>

<p>.</p>

<h2>Setup</h2>

<li>Run</li>

<code>npm install</code>

<li>to install dependecies</li>

<li>Run</li>

<code>npx hardhat test</code>

<li>to test the code</li>

<li>Start a local development ethereum node on a new terminal using</li>

<code>npx hardhat node</code>

<li>Run</li>

<code>npx hardhat --network localhost run scripts/deploy.js</code>

<li>to deploy the Dummy Token contract, keep note of the</li>

<code>Token Address</code>

<li>that will output in the terminal.</li>

<li>Run</li>

<code>npx hardhat --network localhost faucet <token-address> <your-address></code>

<li>where</li>

<code><token-address></code>

<li>is the address of the Dummy Token contract deployed in the previous step, and</li>

<code><your-address></code>

<li>is your Ethereum address (i.e. your MetaMask account). This will send ETH and DUMMY tokens to your ethereum account.</li>

<li>Connect your MetaMask extension to the</li>

<code>localhost</code>

<li>network. You should have 1 ETH in your balance.</li>

<li>Add the Dummy Token to MetaMask:</li>

<li>Click on</li>

<code>Add Token</code>

<li>Click on</li>

<code>Custom Token</code>

<li>Paste on</li>

<code>Token Contract Address</code>

<li>the Dummy Token contract address (from step 4)</li>

<li>You should see</li>

<code>100 DUMMY</code>

<li>tokens in your wallet</li>

<h2>About</h2>

<p>just a simple dummy token</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/socket-pool

# URL: https://github.com/decentraland/socket-pool

<title>GitHub - decentraland/socket-pool: socket pool components for well-know-components</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>socket pool components for well-know-components</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/socket-pool</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>base-component</h1>

<h2>About</h2>

<p>socket pool components for well-know-components</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/sfu-test

# URL: https://github.com/decentraland/sfu-test

<title>GitHub - decentraland/sfu-test: React app for testing WebRTC Selective Forwarding Unit</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>React app for testing WebRTC Selective Forwarding Unit</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/sfu-test</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Zoomeets</h1>

<p>docker run -p 7000:7000 -p 5000-5200:5000-5200/udp pionwebrtc/ion-sfu:latest-jsonrpc</p>

<h2>About</h2>

<p>React app for testing WebRTC Selective Forwarding Unit</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-zoomeets

# Change to URL: https://github.com/decentraland/ion-sdk-js

# URL: https://github.com/decentraland/ion-sdk-js

<title>GitHub - decentraland/ion-sdk-js: ion javascript sdk</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ion javascript sdk</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ion-sdk-js</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>19</strong>

<strong>71</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>279</strong>

<h2>Files</h2>

<button>View code</button>

<h1>ion-sdk-js</h1>

<p>Frontend sdk for the Ion backend.</p>

<h2>Installation</h2>

<code>npm install ion-sdk-js</code>

<h2>Usage</h2>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<p>ion javascript sdk</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>69</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ion-sfu

# URL: https://github.com/decentraland/ion-sfu

<title>GitHub - decentraland/ion-sfu: Pure Go WebRTC SFU</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Pure Go WebRTC SFU</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ion-sfu</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>22</strong>

<strong>124</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,151</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Ion SFU</h1>

<h4>Go implementation of a WebRTC Selective Forwarding Unit</h4>

<p>A</p>

<p>is a video routing service which allows webrtc sessions to scale more efficiently. This package provides a simple, flexible, high performance Go implementation of a WebRTC SFU. It can be called directly or through a</p>

<p>or</p>

<p>interface.</p>

<h2>Features</h2>

<li>Audio/Video/Datachannel forwarding</li>

<li>Congestion Control (TWCC, REMB, RR/SR)</li>

<li>Unified plan semantics</li>

<li>Pub/Sub Peer Connection (</li>

<code>O(n)</code>

<li>port usage)</li>

<li>Audio level indication (RFC6464). "X is speaking"</li>

<h2>Quickstart</h2>

<p>Run the Echo Test example</p>

<code>docker-compose -f examples/echotest/docker-compose.yaml up</code>

<p>Open the client</p>

<code>http://localhost:8000/</code>

<h3>SFU with json-rpc signaling</h3>

<p>The json-rpc signaling service can be used to easily get up and running with the sfu. It can be used with the</p>

<p>.</p>

<h5>Using golang environment</h5>

<code>go build ./cmd/signal/json-rpc/main.go && ./main -c config.toml</code>

<h5>Using docker</h5>

<code>docker run -p 7000:7000 -p 5000-5200:5000-5200/udp decentraland/ion-sfu:latest-jsonrpc</code>

<h3>SFU with gRPC signaling</h3>

<p>For service-to-service communication, you can use the grpc interface. A common pattern is to call the grpc endpoints from a custom signaling service.</p>

<h5>Using golang environment</h5>

<code>go build ./cmd/signal/grpc/main.go && ./main -c config.toml</code>

<h5>Using docker</h5>

<code>docker run -p 50051:50051 -p 5000-5200:5000-5200/udp decentraland/ion-sfu:latest-grpc</code>

<h2>Documentation</h2>

<p>Answers to some</p>

<p>.</p>

<h2>Examples</h2>

<p>To see some other ways of interacting with the ion-sfu instance, check out our</p>

<p>.</p>

<h2>Media Processing</h2>

<code>ion-sfu</code>

<p>supports real-time processing on media streamed through the sfu using</p>

<code>ion-avp</code>

<p>.</p>

<p>For an example of recording a MediaStream to webm, checkout the</p>

<p>example.</p>

<h3>License</h3>

<p>MIT License - see</p>

<p>for full text</p>

<h2>Development</h2>

<p>Generate the protocol buffers and grpc code:</p>

<li>Best choice (uses docker):</li>

<code>make protos</code>

<li>.</li>

<li>Manually:</li>

<li>Install protocol buffers and the protcol buffers compiler. On Fedora</li>

<code>dnf install protobuf protobuf-compiler</code>

<li>.</li>

<code>go get google.golang.org/grpc/cmd/protoc-gen-go-grpc</code>

<code>go get google.golang.org/protobuf/cmd/protoc-gen-go</code>

<code>protoc --go_out=. --go-grpc_out=. --go_opt=paths=source_relative --go-grpc_opt=paths=source_relative cmd/signal/grpc/proto/sfu.proto</code>

<h2>About</h2>

<p>Pure Go WebRTC SFU</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>280</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/landing-festival

# URL: https://github.com/decentraland/landing-festival

<title>decentraland/landing-festival Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h3>This repository is empty.</h3>

<p>Care to check out the</p>

<p>while you wait?</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/test-scene-integration

# URL: https://github.com/decentraland/test-scene-integration

<title>GitHub - decentraland/test-scene-integration</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/test-scene-integration</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>test-scene-integration</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer

# URL: https://github.com/decentraland/explorer

<title>GitHub - decentraland/explorer: ð Explore Decentraland from a web browser</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Explore Decentraland from a web browser</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>70</strong>

<strong>39</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2,511</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Explorer</h1>

<p>This is the</p>

<p>official repository.</p>

<p>This repository covers mainly the Kernel component of the explorer product.</p>

<p>Kernel component responsibility includes running the SDK scenes, handling back-end business logic and more. This said, you can clone this repo and run the browser version of Explorer. If you want to contribute to our renderer, please check out the unity-renderer repo:</p>

<p>. Unity-renderer repo outputs a npm package that's used on this one for publishing the Explorer.</p>

<h2>Before you start</h2>

<h1>Running the Explorer</h1>

<p>Make sure you have the following dependencies:</p>

<li>Latest version of GNU make, install it using</li>

<code>brew install make</code>

<li>If you are using Windows 10, you must enable the Linux subsystem and install a Linux distro from Windows Store like Ubuntu. Then install all tools and dependecies like nodejs, npm, typescript, make, etcetera.</li>

<li>Node v10 or compatible installed via</li>

<code>sudo apt install nodejs</code>

<li>or</li>

<strong>IMPORTANT:</strong>

<p>If your path has spaces the build process will fail. Make sure to clone this repo in a properly named path.</p>

<p>When all the dependencies are in place, you can start building the project.</p>

<p>First off, we need the npm packages for</p>

<strong>website</strong>

<p>and</p>

<strong>kernel</strong>

<p>. In most of the cases this should be done only once:</p>

<code>cd website

npm install

cd kernel

npm install</code>

<p>By now, you can run and watch a server with the kernel build by typing:</p>

<code>make watch</code>

<p>The make process will take a while. When its finished, you can start debugging the browser's explorer by going to</p>

<h3>Update local renderer build version</h3>

<p>The unity build used when accessing through localhost can be changed with several commands:</p>

<code>make update-renderer</code>

<li>downloads the renderer build for the master branch and installs it, overwriting the previous build.</li>

<p>Keep in mind that a</p>

<code>make watch</code>

<p>should be run and keep the server up before updating the local build, otherwise it will be replaced by the</p>

<code>make watch</code>

<p>command.</p>

<h3>Run kernel tests</h3>

<p>To see test logs/errors directly in the browser, run:</p>

<code>make watch</code>

<p>Now, navigate to</p>

<h3>Troubleshooting</h3>

<h4>Missing xcrun (macOS)</h4>

<p>If you get the "missing xcrun" error when trying to run the</p>

<code>make watch</code>

<p>command, you should download the latest command line tools for macOS, either by downloading them from</p>

<p>or by re-installing XCode</p>

<h2>Testing your branch using automated builds</h2>

<p>When any commit is pushed to a branch on the server, a build is generated and deployed to:</p>

<code>https://play.decentraland.zone/branch/<branch-name>/index.html</code>

<p>If the CI succeeds, you can browse to the generated link and test your changes. Bear in mind that any push will kick the CI, and there's no need to create a pull request.</p>

<h2>Technical how-to guides and explainers</h2>

<p>For more advanced topics, don't forget to check out our</p>

<p>(ADR) repository.</p>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>ð Explore Decentraland from a web browser</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>78</strong>

<h3>Watchers</h3>

<strong>31</strong>

<h3>Forks</h3>

<strong>45</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-geoip

# URL: https://github.com/decentraland/tap-geoip

<title>GitHub - decentraland/tap-geoip</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-geoip</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-geoip</h1>

<code>tap-geoip</code>

<p>is a Singer tap for</p>

<p>- Theoretically it should also work with the commercial version because they share the same data format, but i didn't test it. To locally test this tap, you can download the database once from maxmind, and use a local HTTP server, in this case, set the license key to "none".</p>

<p>Built with the Meltano</p>

<p>for Singer Taps.</p>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-geoip --about</pre>

<p>You should specifiy the following configuration variables to properly import this database:</p>

<li>url_city: URL to obtain the cities database, it can be left as the default if you are using the Lite database.</li>

<li>license_key: Your license key to access the database</li>

<li>languages: Which languages to load into the database, from the ones provided in the zip file</li>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-geoip</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-geoip --version

tap-geoip --help

tap-geoip --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Using with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.</em>

<p>Install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-geoip

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano elt tap-geoip target-jsonl</pre>

<h3>SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rendezvous

# URL: https://github.com/decentraland/rendezvous

<title>GitHub - decentraland/rendezvous: ð WebRTC Signalling Server that uses Server-Sent Events</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð WebRTC Signalling Server that uses Server-Sent Events</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rendezvous</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Signalhub for webrtc connections</h1>

<p>Uses server sent events to share signalling data between webrtc clients to establish a peer to peer connection.</p>

<h2>About</h2>

<p>ð WebRTC Signalling Server that uses Server-Sent Events</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>22</strong>

<h3>Forks</h3>

<strong>10</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/target-snowflake

# URL: https://github.com/decentraland/target-snowflake

<title>GitHub - decentraland/target-snowflake: A Singer.io Target for Snowflake</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A Singer.io Target for Snowflake</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/target-snowflake</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>96</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Target Snowflake</h1>

<p>A</p>

<p>Snowflake target, for use with Singer streams generated by Singer taps.</p>

<h2>Snowflake Connector</h2>

<h2>Install</h2>

<pre>pip install target-snowflake</pre>

<h2>Usage</h2>

<p>Follow the</p>

<p>for setting up separate</p>

<code>tap</code>

<p>and</p>

<code>target</code>

<p>virtualenvs to avoid version

conflicts.</p>

<p>Create a</p>

<p>at</p>

<code>~/singer.io/target_snowflake_config.json</code>

<p>with Snowflake connection

information and target Snowflake schema and warehouse.</p>

<pre>{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}</pre>

<code>1. Run `target-snowfkajke` against a [Singer](https://singer.io) tap.

```bash

~/.virtualenvs/tap-something/bin/tap-something \

| ~/.virtualenvs/target-snowflake/bin/target-snowflake \

--config ~/singer.io/target_snowflake_config.json >> state.json</code>

<p>If you are running windows, the following is equivalent:</p>

<code>venvs\tap-exchangeratesapi\Scripts\tap-exchangeratesapi.exe | ^

venvs\target-snowflake\Scripts\target-snowlfake.exe ^

--config target_snowflake_config.json</code>

<h3>Config.json</h3>

<p>The fields available to be specified in the config file are specified

here.</p>

<th>Field</th>

<th>Type</th>

<th>Default</th>

<th>Details</th>

<code>snowflake_account</code>

<code>["string"]</code>

<code>N/A</code>

<code>ACCOUNT</code>

<td>might require the</td>

<code>region</code>

<td>and</td>

<code>cloud</code>

<td>platform where your account is located, in the form of:</td>

<code><your_account_name>.<region_id>.<cloud></code>

<td>(e.g.</td>

<code>xy12345.east-us-2.azure</code>

<td>)</td>

<code>snowflake_username</code>

<code>["string"]</code>

<code>N/A</code>

<code>snowflake_password</code>

<code>["string", "null"]</code>

<code>null</code>

<code>snowflake_role</code>

<code>["string"]</code>

<code>null</code>

<td>If not specified, Snowflake will use the user's default role.</td>

<code>snowflake_database</code>

<code>["string"]</code>

<code>N/A</code>

<code>snowflake_authenticator</code>

<code>["string"]</code>

<code>"snowflake"</code>

<td>Speifies the authentication provider for snowflake to use. Valud options are the internal one ("snowflake"), a browser session ("externalbrowser"), or Okta ("https://<your_okta_account_name>.okta.com"). See the snowflake docs for more details.</td>

<code>snowflake_schema</code>

<code>["string", "null"]</code>

<code>"PUBLIC"</code>

<code>snowflake_warehouse</code>

<code>["string"]</code>

<code>N/A</code>

<code>invalid_records_detect</code>

<code>["boolean", "null"]</code>

<code>true</code>

<td>Include</td>

<code>false</code>

<td>in your config to disable crashing on invalid records</td>

<code>invalid_records_threshold</code>

<code>["integer", "null"]</code>

<code>0</code>

<td>Include a positive value</td>

<code>n</code>

<td>in your config to allow at most</td>

<code>n</code>

<td>invalid records per stream before giving up.</td>

<code>disable_collection</code>

<code>["string", "null"]</code>

<code>false</code>

<td>Include</td>

<code>true</code>

<td>in your config to disable</td>

<td>.</td>

<code>logging_level</code>

<code>["string", "null"]</code>

<code>"INFO"</code>

<td>The level for logging. Set to</td>

<code>DEBUG</code>

<td>to get things like queries executed, timing of those queries, etc. See</td>

<td>for information about valid values.</td>

<code>persist_empty_tables</code>

<code>["boolean", "null"]</code>

<code>False</code>

<td>Whether the Target should create tables which have no records present in Remote.</td>

<code>state_support</code>

<code>["boolean", "null"]</code>

<code>True</code>

<td>Whether the Target should emit</td>

<code>STATE</code>

<td>messages to stdout for further consumption. In this mode, which is on by default, STATE messages are buffered in memory until all the records that occurred before them are flushed according to the batch flushing schedule the target is configured with.</td>

<code>target_s3</code>

<code>["object", "null"]</code>

<code>N/A</code>

<td>When included, use</td>

<code>S3</code>

<td>to stage files. See</td>

<code>S3</code>

<td>below</td>

<h4>S3 Config.json</h4>

<th>Field</th>

<th>Type</th>

<th>Default</th>

<th>Details</th>

<code>aws_access_key_id</code>

<code>["string"]</code>

<code>N/A</code>

<code>aws_secret_access_key</code>

<code>["string"]</code>

<code>N/A</code>

<code>bucket</code>

<code>["string"]</code>

<code>N/A</code>

<td>Bucket where staging files should be uploaded to.</td>

<code>key_prefix</code>

<code>["string", "null"]</code>

<code>""</code>

<td>Prefix for staging file uploads to allow for better delineation of tmp files</td>

<h2>Limitations</h2>

<li>:</li>

<li>Although Snowflake supports quoted identifiers to have non-alphanumeric values,</li>

<code>target-snowflake</code>

<li>limits

identifiers to uppercase alphanumerics, and underscores</li>

<li>This is done to make querability/useability in Snowflake simpler, so as to not require users to</li>

<em>have</em>

<li>to use

sometimes cumbersome quotes to query their data</li>

<li>Requires a</li>

<li>for every stream.</li>

<li>Only string, string with date-time format, integer, number, boolean,

object, and array types with or without null are supported. Arrays can

have any of the other types listed, including objects as types within

items.</li>

<li>Example of JSON Schema types that work</li>

<code>['number']</code>

<code>['string']</code>

<code>['string', 'null']</code>

<code>['string', 'integer']</code>

<code>['integer', 'number']</code>

<li>Exmaple of JSON Schema types that</li>

<strong>DO NOT</strong>

<li>work</li>

<code>['any']</code>

<code>['null']</code>

<li>JSON Schema combinations such as</li>

<code>anyOf</code>

<li>and</li>

<code>allOf</code>

<li>are not supported.</li>

<li>JSON Schema $ref is partially supported:</li>

<em>NOTE:</em>

<li>The following limitations are known to</li>

<strong>NOT</strong>

<li>fail gracefully</li>

<li>Presently you cannot have any circular or recursive</li>

<code>$ref</code>

<li>s</li>

<code>$ref</code>

<li>s must be present within the schema:</li>

<li>URI's do not work</li>

<li>if the</li>

<code>$ref</code>

<li>is broken, the behaviour is considered unexpected</li>

<li>Any values which are the</li>

<code>string</code>

<code>\\N</code>

<li>will be streamed to Snowflake as the literal</li>

<code>null</code>

<h2>Sponsorship</h2>

<p>Target Snowflake is sponsored by Data Mill (Data Mill Services, LLC)</p>

<p>.</p>

<p>Data Mill helps organizations utilize modern data infrastructure and data science to power analytics, products, and services.</p>

<p>Copyright Data Mill Services, LLC 2018</p>

<h2>About</h2>

<p>A Singer.io Target for Snowflake</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>25</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-ecs-quests

# URL: https://github.com/decentraland/dcl-ecs-quests

<title>GitHub - decentraland/dcl-ecs-quests: Decentraland Library for creating quests ECS components to show in UI</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland Library for creating quests ECS components to show in UI</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-ecs-quests</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>28</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Decentraland Library for creating quests ECS components to show in UI</p>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/new-rpc

# URL: https://github.com/decentraland/new-rpc

<title>GitHub - decentraland/new-rpc: Exploration of new RPC mechanisms</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Exploration of new RPC mechanisms</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/new-rpc</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>18</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<code>@dcl/rpc</code>

<p>This repository contains the low-level API that allows us to run sandboxed (and even remote) code for Decentralands LANDs and other systems like Physics.</p>

<h2>Scripting</h2>

<p>Scripts are pieces of logic that run inside the context of a Web Worker or remotely in a server. They are meant to provide the user a way to run custom logic inside the player's client, allowing the creation of rich experiences inside Decentraland. To achieve this, low level hooks are exposed from the scripting host and consumed by the scripting client.</p>

<h2>Transports</h2>

<p>The scripts communicate with the host application thru a JSON-RPC2 based protocol using a defined transport. We have 3 built in transports.</p>

<li>: Used to load a sandboxed script locally, inside a WebWorker</li>

<li>: Used to run scripts in remote servers</li>

<li>: Used to run tests, mainly. The script runs in the same execution context as the host.</li>

<h2>Scripting host</h2>

<p>The</p>

<p>is a core piece that instanciates APIs and handles incoming/outgoing messages from the scripts.</p>

<h2>APIs</h2>

<p>APIs work as a bridge between user-created scripts and the lower level APIs of the client (communication, 3D entity management, etc). It provides a set of exposed methods that can be accessed from the script context. These methods are</p>

<code>async</code>

<p>by default and Promises are used as hooks for events that may be triggered in the future (HTTP Responses, entity collisions, etc).</p>

<p>The</p>

<code>@exposeMethod</code>

<p>decorator is provided as means of exposing API methods to the Script.</p>

<p>An example implementation can be found at</p>

<h3>See also</h3>

<h2>Scripts</h2>

<p>The term "script" or sometimes "system" refers to the instance of a user-created script, normally running inside a Web Worker. To access an API instance the decorator</p>

<code>@inject(apiName: string)</code>

<p>function is used. From then on, the user will be able to call all exposed methods and</p>

<code>await</code>

<p>the promises returned by them.</p>

<p>An example implementation can be found at</p>

<h3>See also</h3>

<h1>Related documents</h1>

<p>Why do we create a component based system?</p>

<h1>Decentraland Compiler</h1>

<p>The Decentraland Compiler is used to build all sort of TypeScript related projects. Both DCL's client all all of the SDK's dynamic scenes use it. You can think about it as an scoped task runner which only does a few things but it does them well.</p>

<p>To get started create a build.json file:</p>

<pre>[

{</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>,</pre>

<pre>:</pre>

<pre>}

]</pre>

<p>Then run the following command:</p>

<code>decentraland-compiler build.json</code>

<p>To run in watch mode:</p>

<code>decentraland-compiler build.json --watch</code>

<p>To use custom loaders (Webpack builds only) refer to</p>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Exploration of new RPC mechanisms</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/explorer-technical-backlog

# URL: https://github.com/decentraland/explorer-technical-backlog

<title>GitHub - decentraland/explorer-technical-backlog: This is the backlog for big scale architecture decisions regarding the Explorer product and its sub-products</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This is the backlog for big scale architecture decisions regarding the Explorer product and its sub-products</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/explorer-technical-backlog</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Explorer Technical Backlog</h1>

<p>This is the backlog for big scale architecture decisions regarding the Explorer product and its sub-products.</p>

<h2>About</h2>

<p>This is the backlog for big scale architecture decisions regarding the Explorer product and its sub-products</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/add-mana

# URL: https://github.com/decentraland/add-mana

<title>GitHub - decentraland/add-mana</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/add-mana</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Add MANA</h1>

<p>Simple dApp to add the MANA token to Metamask</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/snapshot.js

# URL: https://github.com/decentraland/snapshot.js

<title>GitHub - decentraland/snapshot.js</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/snapshot.js</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>19</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>415</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Snapshot.js</h1>

<h3>Install</h3>

<p>Snapshot.js was designed to work both in the browser and in Node.js.</p>

<h4>Node.js</h4>

<p>To install Snapshot.js on Node.js, open your terminal and run:</p>

<code>npm i @snapshot-labs/snapshot.js</code>

<h4>Browser</h4>

<p>You can create an index.html file and include Snapshot.js with:</p>

<pre>="</pre>

<pre>"</pre>

<h3>License</h3>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>589</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/es5-context

# URL: https://github.com/decentraland/es5-context

<title>GitHub - decentraland/es5-context</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<summary>Unknown and 4 other licenses found</summary>

<h3>Licenses found</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/es5-context</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/es5-context</h1>

<p>This library is a "good enough" effort to sandbox as much as possible the context of the WebWorkers.</p>

<p>With the objective of migrating to a future light weight runtime for the scene code, we must keep our environment as small as possible. That is the reason why we chose to stick to the ES5 standard for our scenes.</p>

<h2>Usage</h2>

<pre>npm i -D @dcl/es5-context</pre>

<h3>Publishing</h3>

<p>This repository is automatically published on merge to master by oddish</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<summary>Unknown and 4 other licenses found</summary>

<h3>Licenses found</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/MultiSigWallet

# URL: https://github.com/decentraland/MultiSigWallet

<title>GitHub - decentraland/MultiSigWallet: Allows multiple parties to agree on transactions before execution.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Allows multiple parties to agree on transactions before execution.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/MultiSigWallet</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>16</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1,068</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Ethereum Multisignature Wallet</h1>

<h2>This repo has been deprecated and replaced by Safe Multisig. Please find the Safe repository here:</h2>

<p>The purpose of multisig wallets is to increase security by requiring multiple parties to agree on transactions before execution. Transactions can be executed only when confirmed by a predefined number of owners. A web user interface can be found</p>

<p>.</p>

<strong>NOTE:</strong>

<p>Not compatible with current NodeJS LTS. Recommended NodeJS version is v6.17.1 (last LTS for v6).</p>

<h2>Features</h2>

<li>Can hold Ether and all kind of tokens with multisig support</li>

<li>Easy to use offline signing (cold wallet) support</li>

<li>Integration with web3 wallets (Metamask, Mist, Parity, etc)</li>

<li>Transaction data and log decoding, makes transactions more readable</li>

<li>Interacting with any contracts with UI support</li>

<li>Hardware wallet support (Ledger Wallet)</li>

<li>Optional email notifications when an event is triggered or you are required to sign a transaction</li>

<h2>Being used by</h2>

<li>Brace</li>

<li>StabL</li>

<h2>Install</h2>

<code># For Ubuntu/Debian you need to install libusb development headers

apt install -y libusb-1.0-0-dev

git clone https://github.com/gnosis/MultiSigWallet.git

cd MultiSigWallet

# Latest NodeJS (v12.13.0) does NOT appear to work correctly.

# You should use NVM and install Node v6.17.1 for best results: https://github.com/nvm-sh/nvm

# Tested by @Privex on 2019-Nov-06 with v6.17.1 with success

nvm install v6.17.1

# node-gyp is required for 'npm install' to work correctly

npm install node-gyp

npm install</code>

<h2>Test</h2>

<h3>Run contract tests:</h3>

<code>npm test</code>

<h3>Run interface tests:</h3>

<code>npm run test-dapp</code>

<h2>Deploy Contracts</h2>

<h3>Deploy multisig wallet:</h3>

<code>truffle migrate <account1,account2,...,accountN> <requiredConfirmations></code>

<h3>Deploy multisig wallet with daily limit:</h3>

<code>truffle migrate <account1,account2,...,accountN> <requiredConfirmations> <dailyLimit></code>

<h2>Deployed instances with significant funds</h2>

<li>Aragon</li>

<li>Bancor</li>

<li>Golem</li>

<li>MysteriumDev</li>

<li>District0x</li>

<h2>Interface Releases</h2>

<p>You can find binaries for OSX, Windows and Linux</p>

<h2>Limitations</h2>

<p>This implementation does not allow the creation of smart contracts via multisignature transactions.

Transactions to address 0 cannot be done. Any other transaction can be done.</p>

<h2>Security</h2>

<p>All contracts are WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</p>

<h2>License</h2>

<h2>FAQ</h2>

<h3>How to set a custom Ethereum Node?</h3>

<p>You can specify a custom Ethereum Node endpoint by going to</p>

<code>settings</code>

<p>page. Click on</p>

<code>Ethereum Node</code>

<p>dropdown menu and select</p>

<code>Custom configuration</code>

<p>, this would make the Ethereum node's field editable. Please write your new endpoint there. Remember, if</p>

<code>Web3 Provider</code>

<p>is set to</p>

<code>Default (Metamask, Mist, Parity)</code>

<p>, Multisig will use the Ethereum Node endpoint coming with the Web3 Provider, so in that case go to your injected Web3 Provider (Metamask for instance) and update/switch your Ethereum Node endpoint.</p>

<h3>I've imported a Multisig address or a contract address into address book but it gets detected as a EOA</h3>

<p>Make sure you're connected to the same network your Multisig/contract was created on, if you created it on Mainnet, you should then connect to Mainnet in order to let the system detect its type correctly.</p>

<h2>About</h2>

<p>Allows multiple parties to agree on transactions before execution.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>779</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/com.decentraland.unity-renderer-test

# URL: https://github.com/decentraland/com.decentraland.unity-renderer-test

<title>GitHub - decentraland/com.decentraland.unity-renderer-test</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/com.decentraland.unity-renderer-test</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>