<td>â</td>

<td>Archipelago</td>

<td>WIP</td>

<h1>Runtime 6 support (aka SDK6)</h1>

<th>Feature</th>

<th>Bevy</th>

<th>Babylon</th>

<th>Godot</th>

<th>Foundation Client</th>

<code>Native support</code>

<td>â</td>

<td>â</td>

<td>â</td>

<td>â</td>

<code>Proxy support</code>

<td>â</td>

<td>â</td>

<h1>Proposal #2: implementation part 1</h1>

<h3>SDK Components</h3>

<th>SDK Component</th>

<th>Bevy</th>

<th>Godot</th>

<code>PointerLock</code>

<code>AvatarModifierArea</code>

<code>NftShape</code>

<code>VideoEvent</code>

<code>Tween</code>

<code>TweenSequence</code>

<code>TweenState</code>

<h3>Explorer functionality Components</h3>

<th>Web3 - Sign-in</th>

<th>Bevy</th>

<th>Godot</th>

<code>External wallet</code>

<code>Browser wallet</code>

<code>Web2 method</code>

<h1>Future Ideas</h1>

<th>Feature</th>

<th>Description</th>

<code>ReferenceMaterial</code>

<td>SDK Component</td>

<td>Reuse materials and reference an entity to use its material while reducing hundreds of CRDT messages</td>

<code>CinematicCamera</code>

<td>SDK Component</td>

<td>Ability to attach the camera to a specific entity while standing on a scene. Enables cinematic cameras and new game modes.</td>

<td>GameServers</td>

<td>Enables scenes to run inside a specialized server. The server connects to comms and is considered an authority. The scene can trust messages from the server and automatic entity synchronization can be configured.</td>

<td>Enable actors for comms</td>

<td>A novel communications architecture to enable third party actors to join the communications network of Decentraland. Unblocks game servers</td>

<td>Raycast from global scenes</td>

<h1>Links</h1>

<p>Governance proposal:</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/hammurabi

# URL: https://github.com/decentraland/hammurabi

<title>GitHub - decentraland/hammurabi: Repository to host the reference implementation made in Babylon.js by the Protocol Squad</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Repository to host the reference implementation made in Babylon.js by the Protocol Squad</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/hammurabi</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>37</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>38</strong>

<h2>Files</h2>

<button>View code</button>

<h1>hammurabi</h1>

<p>The reference/educational implementation of the Decentraland protocol.</p>

<p>This implementation uses the babylon.js framework and runs entirely on web browsers.</p>

<p>This project's goals are to:</p>

<li>document current and future protocol standards</li>

<li>experiment with changes to the protocol</li>

<li>guide new contributors into how Decentraland works</li>

<li>enable easy prototyping of new features</li>

<p>This repository is the companion material for the implementation guide (still work in progress, check out this</p>

<p>and</p>

<p>).</p>

<strong>Status: Proof of Concept, does not run</strong>

<h1>Commit Guide</h1>

<li>This commit sets up the tooling to build the project. It uses Typescript as language,</li>

<code>esbuild</code>

<li>to compile and build the project,</li>

<code>npm</code>

<li>for package management,</li>

<code>jest</code>

<li>for tests, and GitHub actions for continuous integrattion.</li>

<h1>Building and Running</h1>

<li>Clone the repo using</li>

<code>git clone https://github.com/decentraland/hammurabi</code>

<code>cd hammurabi</code>

<li>to move into the repo</li>

<code>make watch</code>

<li>to start the development web server</li>

<li>Open</li>

<code>https://localhost:7081</code>

<p>Additionally,</p>

<code>make build</code>

<p>builds the project into the</p>

<code>./static</code>

<p>folder, and</p>

<code>make test</code>

<p>executes all tests.</p>

<h2>Testing</h2>

<code>make test</code>

<li>executes all the tests</li>

<code>make test-watch</code>

<li>executes all the tests and watches for file changes to run the tests again</li>

<code>make test-watch TESTARGS='test/file.spec.ts'</code>

<li>runs the tests of</li>

<code>test/file.spec.ts</code>

<h2>Testing realm</h2>

<p>This repository includes a "testing realm". It is a set of scenes compiled and served statically as a regular realm. The file structure is generated by running the</p>

<code>sdk-commands export-static</code>

<p>command of the Decentraland SDK.</p>

<p>Since it uses the SDK out of the box, it is also possible to run the scenes in the embedded official Decentraland Explorer for compliance testing. You can do that by running</p>

<code>make sdk-watch</code>

<p>, it will first build the scenes and then launch a web server to use the explorer. It is important to notice that the babylon exlorer does not work with the "sdk-watch" mode yet, it only works with static the files generated by</p>

<code>make build-testing-realm</code>

<h2>About</h2>

<p>Repository to host the reference implementation made in Babylon.js by the Protocol Squad</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-builder

# URL: https://github.com/decentraland/unity-builder

<title>GitHub - decentraland/unity-builder: Build Unity projects for different platforms</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Build Unity projects for different platforms</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-builder</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>6</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>434</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Unity - Builder</h1>

<p>(Not affiliated with Unity Technologies)</p>

<p>GitHub Action to</p>

<p>for different platforms.</p>

<p>Part of the</p>

<p>open source project.</p>

<h2>How to use</h2>

<p>Find the</p>

<p>on the GameCI</p>

<p>.</p>

<h2>Related actions</h2>

<p>Visit the

GameCI</p>

<p>status repository for related Actions.</p>

<h2>Community</h2>

<p>Feel free to join us on</p>

<p>and engage with the community.</p>

<h2>Contributing</h2>

<p>To help improve the documentation, please find the docs</p>

<p>.</p>

<p>To contribute to Unity Builder, kindly read the</p>

<p>.</p>

<h2>Support us</h2>

<p>GameCI is free for everyone forever.</p>

<p>You can support us at</p>

<p>.</p>

<h2>Licence</h2>

<p>This repository is</p>

<p>licensed.</p>

<p>This includes all contributions from the community.</p>

<h2>About</h2>

<p>Build Unity projects for different platforms</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>210</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/nft-server

# URL: https://github.com/decentraland/nft-server

<title>GitHub - decentraland/nft-server: NFT Server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>NFT Server</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/nft-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>22</strong>

<strong>27</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>271</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NFT Server</h1>

<p>This server is meant to aggregate data from different subgraphs under a single API.</p>

<h1>Run the project</h1>

<pre>npm install</pre>

<p>After that you'll need to up check the</p>

<code>.env.example</code>

<p>file and create your own</p>

<code>.env</code>

<p>file. Some properties have defaults. Once you're done, you can run the project!</p>

<pre>npm start</pre>

<pre>npm run start:watch</pre>

<h1>Modules</h1>

<h2>NFTs</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/nfts</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>name</code>

<li>,</li>

<code>recently_listed</code>

<li>,</li>

<code>recently_sold</code>

<li>,</li>

<code>cheapest</code>

<li>.</li>

<code>category</code>

<li>: Filter by</li>

<code>NFTCategory</code>

<li>. Possible values:</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>wearable</code>

<li>,</li>

<code>ens</code>

<li>.</li>

<code>owner</code>

<li>: Filter by owner. Type:</li>

<code>address</code>

<li>.</li>

<code>isOnSale</code>

<li>: Only return results that have an open, non-expired listing. Type:</li>

<code>boolean</code>

<li>.</li>

<code>search</code>

<li>: Free text search. Type:</li>

<code>string</code>

<li>.</li>

<code>isLand</code>

<li>: Only return results that their</li>

<code>category</code>

<li>is either</li>

<code>parcel</code>

<li>or</li>

<code>estate</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emoteGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>creator</code>

<li>: Filter results by the creator address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>itemRarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type</li>

<code>string</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>isOnRent</code>

<li>: Filter results by NFTs that are on rent. Possible values:</li>

<code>true</code>

<li>,</li>

<code>false</code>

<code>rentalStatus</code>

<li>: Filter results by</li>

<code>Rental status</code>

<li>. Can be used only when querying NFTs that are on rent using the</li>

<code>isOnRent</code>

<li>flag. Possible values:</li>

<code>open</code>

<li>,</li>

<code>executed</code>

<li>,</li>

<code>claimed</code>

<li>,</li>

<code>cancelled</code>

<li>.</li>

<code>minPrice</code>

<li>: Filter results by minimun price. Type:</li>

<code>number</code>

<code>maxPrice</code>

<li>: Filter results by max price. Type:</li>

<code>number</code>

<code>adjacentToRoad</code>

<li>: Filter land that is next to a road. Type:</li>

<code>boolean</code>

<code>minDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of minimun this value. Type:</li>

<code>number</code>

<code>maxDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of maximun this value. Type</li>

<code>number</code>

<code>minEstateSize</code>

<li>: Filter results by minimum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>maxEstateSize</code>

<li>: Filter results by maximum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>rentalDays</code>

<li>: Filter lands that have the possibility to be rented at least one of the days listed on rentalDays. Type:</li>

<code>number</code>

<li>. Repeatable</li>

<h2>Items</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/items</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>recently_reviewed</code>

<li>,</li>

<code>recently_sold</code>

<li>,</li>

<code>name</code>

<li>,</li>

<code>cheapest</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>rarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>isSoldOut</code>

<li>: Only return results that are sold out (all NFTs have been minted). Type:</li>

<code>boolean</code>

<li>.</li>

<code>isOnSale</code>

<li>: Only return results that can be bought (</li>

<code>CollectionStore</code>

<li>has been added as minter, and there's still available supply to mint). Type:</li>

<code>boolean</code>

<li>.</li>

<code>search</code>

<li>: Free text search. Type:</li>

<code>string</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emoteGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>id</code>

<li>: Filter results by id. It supports multiple values by adding the query param multiple times. Type:</li>

<code>contractAddress-itemId</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>minPrice</code>

<li>: Return only sales with a price higher than this. Type</li>

<code>number</code>

<li>.</li>

<code>maxPrice</code>

<li>: Return only sales with a price lower than this. Type</li>

<code>number</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>urn</code>

<li>: Filter results by URN. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<h2>Catalog</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/catalog</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>limit</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>offset</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>recently_sold</code>

<li>,</li>

<code>cheapest</code>

<li>,</li>

<code>most_expensive</code>

<li>,</li>

<code>recently_listed</code>

<li>.</li>

<code>sortDirection</code>

<li>: Sort direction results. Possible values:</li>

<code>asc</code>

<li>,</li>

<code>desc</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>rarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>isSoldOut</code>

<li>: Only return results that are sold out (all NFTs have been minted). Type:</li>

<code>boolean</code>

<li>.</li>

<code>isOnSale</code>

<li>: Only return results that can be bought (</li>

<code>CollectionStore</code>

<li>has been added as minter, and there's still available supply to mint). Type:</li>

<code>boolean</code>

<li>.</li>

<code>search</code>

<li>: Free text search. Type:</li>

<code>string</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>id</code>

<li>: Filter results by id. It supports multiple values by adding the query param multiple times. Type:</li>

<code>contractAddress-itemId</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>minPrice</code>

<li>: Return only sales with a price higher than this. Type</li>

<code>number</code>

<li>.</li>

<code>maxPrice</code>

<li>: Return only sales with a price lower than this. Type</li>

<code>number</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>onlyMinting</code>

<li>: Only return results that are only available for minting. Type</li>

<code>boolean</code>

<li>.</li>

<code>onlyListing</code>

<li>: Only return results that have opened listing and no minting. Type</li>

<code>boolean</code>

<li>.</li>

<h2>Orders</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/orders</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_listed</code>

<li>,</li>

<code>recently_updated</code>

<li>,</li>

<code>cheapest</code>

<li>.</li>

<code>marketplaceAddress</code>

<li>: Filter results by marketplace contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>owner</code>

<li>: Filter by owner. Type:</li>

<code>address</code>

<li>.</li>

<code>buyer</code>

<li>: Filter by buyer. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>status</code>

<li>: Filter results by</li>

<code>OrderStatus</code>

<li>. Possible values:</li>

<code>open</code>

<li>,</li>

<code>sold</code>

<li>,</li>

<code>cancelled</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Bids</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/bids</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_offered</code>

<li>,</li>

<code>recently_updated</code>

<li>,</li>

<code>most_expensive</code>

<li>.</li>

<code>bidAddress</code>

<li>: Filter results by bid contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>bidder</code>

<li>: Filter by bidder. Type:</li>

<code>address</code>

<li>.</li>

<code>seller</code>

<li>: Filter by seller. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>status</code>

<li>: Filter results by</li>

<code>BidStatus</code>

<li>. Possible values:</li>

<code>open</code>

<li>,</li>

<code>sold</code>

<li>,</li>

<code>cancelled</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Mints</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/mints</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_minted</code>

<li>,</li>

<code>most_expensive</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. Type:</li>

<code>address</code>

<li>.</li>

<code>beneficiary</code>

<li>: Filter by beneficiary. Type:</li>

<code>address</code>

<li>.</li>

<code>minter</code>

<li>: Filter by minter. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>issuedId</code>

<li>: Filter results by</li>

<code>issuedId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>isSale</code>

<li>: Return only mints that came from a sale.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Sales</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/sales</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>recently_sold</code>

<li>,</li>

<code>most_expensive</code>

<li>.</li>

<code>type</code>

<li>: Filter by sale type. Possible values:</li>

<code>order</code>

<li>,</li>

<code>bid</code>

<li>,</li>

<code>mint</code>

<li>.</li>

<code>category</code>

<li>: Filter by NFT category. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>ens</code>

<li>,</li>

<code>wearable</code>

<li>.</li>

<code>seller</code>

<li>: Filter by seller. Type:</li>

<code>address</code>

<li>.</li>

<code>buyer</code>

<li>: Filter by buyer. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>tokenId</code>

<li>: Filter results by</li>

<code>tokenId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>itemId</code>

<li>: Filter results by</li>

<code>itemId</code>

<li>. Type:</li>

<code>string</code>

<li>.</li>

<code>from</code>

<li>: Return only sales that happened after this timestamp. Type</li>

<code>number</code>

<li>.</li>

<code>to</code>

<li>: Return only sales that happened before this timestamp. Type</li>

<code>number</code>

<li>.</li>

<code>minPrice</code>

<li>: Return only sales with a price higher than this. Type</li>

<code>number</code>

<li>.</li>

<code>maxPrice</code>

<li>: Return only sales with a price lower than this. Type</li>

<code>number</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Accounts</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/accounts</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>most_sales</code>

<li>,</li>

<code>most_purchases</code>

<li>,</li>

<code>most_spent</code>

<li>,</li>

<code>most_earned</code>

<li>,</li>

<code>most_royalties</code>

<li>.</li>

<code>id</code>

<li>: Filter by user address. Type:</li>

<code>string</code>

<li>.</li>

<code>address</code>

<li>: Currently the same as id, Filter by user address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>string</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Collections</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/collections</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>newest</code>

<li>,</li>

<code>name</code>

<li>,</li>

<code>recently_reviewed</code>

<li>,</li>

<code>size</code>

<li>.</li>

<code>name</code>

<li>: Filter by the collection name. Type:</li>

<code>string</code>

<li>.</li>

<code>search</code>

<li>: Filter collections containing the search value in its name, case insensitive. Type:</li>

<code>string</code>

<li>.</li>

<code>creator</code>

<li>: Filter by creator. Type:</li>

<code>address</code>

<li>.</li>

<code>contractAddress</code>

<li>: Filter results by contract address. Type:</li>

<code>address</code>

<li>.</li>

<code>isOnSale</code>

<li>: Return only collections are currently on sale. Type:</li>

<code>boolean</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Contracts</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/contracts</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type:</li>

<code>number</code>

<li>.</li>

<code>skip</code>

<li>: Skip results. Type:</li>

<code>number</code>

<li>.</li>

<code>sortBy</code>

<li>: Sort results. Possible values:</li>

<code>name</code>

<li>.</li>

<code>category</code>

<li>: Filter by</li>

<code>NFTCategory</code>

<li>. Possible values:</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>wearable</code>

<li>,</li>

<code>ens</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<h2>Analytics</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/analytics/:timeframe</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>URL Params</strong>

<p>:</p>

<code>timeframe</code>

<li>: The timeframe within the analytic data was gather. Possible values:</li>

<code>day</code>

<li>|</li>

<code>week</code>

<li>|</li>

<code>month</code>

<li>|</li>

<code>all</code>

<h2>Volume</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/volume/:timeframe</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>URL Params</strong>

<p>:</p>

<code>timeframe</code>

<li>: The timeframe within the analytic data was gather. Possible values:</li>

<code>day</code>

<li>|</li>

<code>week</code>

<li>|</li>

<code>month</code>

<li>|</li>

<code>all</code>

<h2>Trendings</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/trendings</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>Query Params</strong>

<p>:</p>

<code>size</code>

<li>: The amount of trending items to return</li>

<h2>Rankings</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/rankings/:timeframe</code>

<strong>Type</strong>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<strong>URL Params</strong>

<p>:</p>

<code>timeframe</code>

<li>: The timeframe within the analytic data was gather. Possible values:</li>

<code>day</code>

<li>|</li>

<code>week</code>

<li>|</li>

<code>month</code>

<li>|</li>

<code>all</code>

<code>entity</code>

<li>: The entity that wants to get ranked. Possible values:</li>

<code>items</code>

<li>|</li>

<code>creators</code>

<li>|</li>

<code>collectors</code>

<strong>Query Params</strong>

<p>:</p>

<code>first</code>

<li>: Limit the number of results. Type: number.</li>

<code>rarity</code>

<li>: Filter the results by the rarity. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>category</code>

<li>: Filter the results by wearable category. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>.</li>

<h2>Prices</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/prices</code>

<strong>Type</strong>

<p>:</p>

<strong>Query Params</strong>

<p>:</p>

<code>category</code>

<li>: Filter by</li>

<code>NFTCategory</code>

<li>. Possible values:</li>

<code>land</code>

<li>,</li>

<code>parcel</code>

<li>,</li>

<code>estate</code>

<li>,</li>

<code>wearable</code>

<li>,</li>

<code>emote</code>

<li>and</li>

<code>ens</code>

<li>.</li>

<code>assetType</code>

<li>: Filter by</li>

<code>AssetType</code>

<li>. Possible values:</li>

<code>item</code>

<li>or</li>

<code>nft</code>

<li>.</li>

<code>isWearableHead</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and are part of the avatar's head. Type</li>

<code>boolean</code>

<li>.</li>

<code>isWearableAccessory</code>

<li>: Only return results that their category is</li>

<code>wearable</code>

<li>and accessories (not a part of the body).</li>

<code>isWearableSmart</code>

<li>: Only return smart wearables. Type</li>

<code>boolean</code>

<li>.</li>

<code>wearableCategory</code>

<li>: Filter results by</li>

<code>WearableCategory</code>

<li>. Possible values:</li>

<code>eyebrows</code>

<li>,</li>

<code>eyes</code>

<li>,</li>

<code>facial_hair</code>

<li>,</li>

<code>hair</code>

<li>,</li>

<code>mouth</code>

<li>,</li>

<code>upper_body</code>

<li>,</li>

<code>lower_body</code>

<li>,</li>

<code>feet</code>

<li>,</li>

<code>earring</code>

<li>,</li>

<code>eyewear</code>

<li>,</li>

<code>hat</code>

<li>,</li>

<code>helmet</code>

<li>,</li>

<code>mask</code>

<li>,</li>

<code>tiara</code>

<li>,</li>

<code>top_head</code>

<li>,</li>

<code>skin</code>

<li>,</li>

<code>hands_wear</code>

<li>.</li>

<code>wearableGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emoteCategory</code>

<li>: Filter results by</li>

<code>EmoteCategory</code>

<li>. Possible values:</li>

<code>dance</code>

<li>,</li>

<code>stunt</code>

<li>,</li>

<code>greetings</code>

<li>,</li>

<code>fun</code>

<li>,</li>

<code>poses</code>

<li>,</li>

<code>reactions</code>

<li>,</li>

<code>horror</code>

<li>,</li>

<code>miscellaneous</code>

<li>.</li>

<code>emoteGender</code>

<li>: Filter results by</li>

<code>GenderFilterOption</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>male</code>

<li>,</li>

<code>female</code>

<li>,</li>

<code>unisex</code>

<li>.</li>

<code>emotePlayMode</code>

<li>: Filter results by</li>

<code>EmotePlayMode</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>simple</code>

<li>,</li>

<code>loop</code>

<code>contractAddress</code>

<li>: Filter results by contract address. It supports multiple values by adding the query param multiple times. Type:</li>

<code>address</code>

<li>.</li>

<code>itemRarity</code>

<li>: Filter results by</li>

<code>Rarity</code>

<li>. It supports multiple values by adding the query param multiple times. Possible values:</li>

<code>unique</code>

<li>,</li>

<code>mythic</code>

<li>,</li>

<code>legendary</code>

<li>,</li>

<code>epic</code>

<li>,</li>

<code>rare</code>

<li>,</li>

<code>uncommon</code>

<li>,</li>

<code>common</code>

<li>.</li>

<code>network</code>

<li>: Filter results by</li>

<code>Network</code>

<li>. Possible values:</li>

<code>ETHEREUM</code>

<li>,</li>

<code>MATIC</code>

<li>.</li>

<code>adjacentToRoad</code>

<li>: Filter land that is next to a road. Type:</li>

<code>boolean</code>

<code>minDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of minimun this value. Type:</li>

<code>number</code>

<code>maxDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of maximun this value. Type</li>

<code>number</code>

<code>minEstateSize</code>

<li>: Filter results by minimum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>maxEstateSize</code>

<li>: Filter results by maximum amount of parcels in the Estate. Type:</li>

<code>number</code>

<h2>Stats</h2>

<strong>Endpoint</strong>

<p>:</p>

<code>/v1/stats/:category/:stat</code>

<strong>Type</strong>

<p>:</p>

<strong>URL Params</strong>

<p>:</p>

<code>category</code>

<li>: The category asking stats about. Possible values:</li>

<code>estate</code>

<li>.</li>

<code>stat</code>

<li>: The resource stat asked.</li>

<li>Possible values:</li>

<li>For resource</li>

<code>estate</code>

<li>:</li>

<code>size</code>

<strong>Query Params</strong>

<p>:</p>

<code>isOnSale</code>

<li>: Only return results that have an open, non-expired listing. Type:</li>

<code>boolean</code>

<li>.</li>

<code>adjacentToRoad</code>

<li>: Filter land that is next to a road. Type:</li>

<code>boolean</code>

<code>minDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of minimun this value. Type:</li>

<code>number</code>

<code>maxDistanceToPlaza</code>

<li>: Filter land that has a distance to a plaza of maximun this value. Type</li>

<code>number</code>

<code>minEstateSize</code>

<li>: Filter results by minimum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>maxEstateSize</code>

<li>: Filter results by maximum amount of parcels in the Estate. Type:</li>

<code>number</code>

<code>minPrice</code>

<li>: Filter results by minimun price. Type:</li>

<code>number</code>

<code>maxPrice</code>

<li>: Filter results by max price. Type:</li>

<code>number</code>

<h2>About</h2>

<p>NFT Server</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>18</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>24</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/dcl-http-prom-metrics

# URL: https://github.com/decentraland/dcl-http-prom-metrics

<title>GitHub - decentraland/dcl-http-prom-metrics: Library to collect and expose Prometheus metrics from an HTTP Rust server.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Library to collect and expose Prometheus metrics from an HTTP Rust server.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/dcl-http-prom-metrics</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dcl-http-prom-metrics</h1>

<p>Library to collect and expose Prometheus metrics from an HTTP Rust server.</p>

<h2>Supported Frameworks</h2>

<li>Actix</li>

<h2>Usage</h2>

<h2>About</h2>

<p>Library to collect and expose Prometheus metrics from an HTTP Rust server.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/substreams-reorg-handler

# URL: https://github.com/decentraland/substreams-reorg-handler

<title>GitHub - decentraland/substreams-reorg-handler: A server that handles the substreams reorgs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A server that handles the substreams reorgs</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-reorg-handler</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Reorg Handler</h2>

<p>Endpoint:</p>

<code>/v1/reorg-handler</code>

<p>The Reorg Handler provides an endpoint to handle blockchain reorganizations. It takes in the last valid block number and the corresponding schema to handle the reorganization accordingly.</p>

<h3>Type</h3>

<p>This handler function does not specifically return a structured object. It returns an appropriate response based on the provided parameters.</p>

<h3>Query Params:</h3>

<code>last_valid_block</code>

<li>: The last block number that is considered valid. It's used to determine the point at which the reorganization must be handled. Type:</li>

<code>number</code>

<li>.</li>

<code>schema</code>

<li>: The schema to be used in handling the reorganization. Type:</li>

<code>string</code>

<li>.</li>

<h3>Request Headers:</h3>

<li>The request may include standard HTTP headers.</li>

<h3>Response:</h3>

<code>200 OK</code>

<li>: Successful handling of the reorganization.</li>

<code>400 BAD REQUEST</code>

<li>: If the</li>

<code>last_valid_block</code>

<li>or</li>

<code>schema</code>

<li>parameters are missing, the endpoint will return a 400 Bad Request status code with the message "Missing parameters."</li>

<h3>Example Usage:</h3>

<p>To invoke the reorg handler with a specific block number and schema, you can make an HTTP request to the endpoint:</p>

<h3>Code Implementation:</h3>

<p>The handler function for this endpoint is implemented in the</p>

<code>createReorgHandler</code>

<p>function, which accepts the reorg components and returns the request handler to process the reorganization.</p>

<h3>Note:</h3>

<p>Make sure to provide both the</p>

<code>last_valid_block</code>

<p>and</p>

<code>schema</code>

<p>parameters in the query string for the handler to process the reorganization correctly. If any of these parameters are missing, the handler will return a bad request response.</p>

<h2>About</h2>

<p>A server that handles the substreams reorgs</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/contracts

# URL: https://github.com/decentraland/contracts

<title>GitHub - decentraland/contracts: ð Decentraland contract addresses</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð Decentraland contract addresses</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/contracts</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>221</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Contract Addresses</h1>

<h2>See addresses</h2>

<p>To add new addresses edit</p>

<h2>About</h2>

<p>ð Decentraland contract addresses</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>23</strong>

<h3>Watchers</h3>

<strong>23</strong>

<h3>Forks</h3>

<strong>14</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/status-page

# URL: https://github.com/decentraland/status-page

<title>GitHub - decentraland/status-page: DCL status page</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>DCL status page</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/status-page</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>76</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL Status Page</h1>

<p>This repository contains the front end for the Decentraland Status page published at</p>

<h2>Build and Run</h2>

<p>Just run clone the repo and run</p>

<code>yarn install</code>

<p>and</p>

<code>yarn start</code>

<h2>Deploy</h2>

<p>The website is deployed using CloudFlare pages with each merge to the</p>

<code>main</code>

<p>branch.</p>

<h2>Dependencies</h2>

<strong>Incidents</strong>

<p>Details and history of the incidents come from the</p>

<p>expose at</p>

<strong>Public Metrics API</strong>

<p>This site uses the</p>

<p>at</p>

<p>to populate the Metrics content</p>

<h2>About</h2>

<p>DCL status page</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/public-metrics-exporter

# Change to URL: https://github.com/orgs/decentraland/repositories?page=5

# URL: https://github.com/orgs/decentraland/repositories?page=5

<title>Decentraland Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>Create simple client/server RPCs over a transport</p>

<p>Github Action to return a Unity pro license.</p>

<p>Exports data from Decentraland's subgraphs at</p>

<p>Shared knowledge base of incidents Root Cause Analysis</p>

<p>Tool for benchmarking RPC Servers of the Decentraland RPC implementation</p>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<p>Favorites server implementation</p>

<p>Pick Up Example Quest Scene</p>

<p>Proxy server that relays transactions to Biconomy, using some restrictions</p>

<p>ð½ Decentraland Collections Graph</p>

<p>Sends pointer deploymens via Server Sent Events</p>

<p>Decentraland RPC - Rust implementation</p>

<p>ð¡ Interact with Decentraland's users, send private messages and add friends.</p>

<p>Repository to host the reference implementation made in Babylon.js by the Protocol Squad</p>

<p>ð» Decentraland command-line interface</p>

<em>5</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/mini-rpc

# URL: https://github.com/decentraland/mini-rpc

<title>GitHub - decentraland/mini-rpc: Create simple client/server RPCs over a transport</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Create simple client/server RPCs over a transport</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/mini-rpc</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>9</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>16</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl/mini-rpc</h1>

<p>This package can be used to create clients and servers over an abstract transport, and it includes some transport implementations.</p>

<h2>Installation</h2>

<pre>npm i @dcl/mini-rpc</pre>

<h2>Usage</h2>

<p>You need to define the methods, and optionally you can also add events</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Then you can implement the client by extending the</p>

<code>RPC</code>

<p>class and using the internal</p>

<code>request</code>

<p>method</p>

<pre>:</pre>

<pre>:</pre>

<pre>key</pre>

<pre>:</pre>

<pre>:</pre>

<pre>key</pre>

<pre>value</pre>

<pre>:</pre>

<pre>key</pre>

<pre>:</pre>

<pre>key</pre>

<strong>NOTE</strong>

<p>: You will need to pass an id to the</p>

<code>RPC</code>

<p>super constructor, in this case</p>

<code>"my-rpc"</code>

<p>you will need to use the same name for the server implementation. This is so multiples clients and servers can work over the same single transport.</p>

<p>To implement the server you do the same thing but use the internal</p>

<code>handle</code>

<p>to implement the methods</p>

<pre>:</pre>

<pre>key</pre>

<pre>key</pre>

<pre>value</pre>

<pre>key</pre>

<pre>path</pre>

<p>Now you can create a transport and use the client like this</p>

<pre>name</pre>

<p>And the server like this</p>

<pre>:</pre>

<h2>Test</h2>

<pre>npm</pre>

<p>Or with coverage reports</p>

<pre>npm run test:coverage</pre>

<h2>Build</h2>

<pre>npm run build</pre>

<h2>Release</h2>

<p>To release a new version of this package create a</p>

<p>via GitHub</p>

<h2>About</h2>

<p>Create simple client/server RPCs over a transport</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/social-rpc-client-js

# URL: https://github.com/decentraland/social-rpc-client-js

<title>GitHub - decentraland/social-rpc-client-js</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/social-rpc-client-js</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Social Service JS Client</h1>

<p>The Decentraland Social Service JS Client is a Websocket client which uses the</p>

<p>to communicate with the</p>

<p>.</p>

<h2>Collaboration</h2>

<h3>Setting up the development environment</h3>

<p>In order to build the client, you'll need to have</p>

<p>and</p>

<p>installed.</p>

<h3>Installing the dependencies</h3>

<p>Run the NPM install command to install all the dependencies needed to run the project.</p>

<pre>npm install</pre>

<h3>Building the client</h3>

<p>Run the NPM build command to build the client.</p>

<pre>npm build</pre>

<p>This command will:</p>

<li>Compile the protocol buffer's definitions for the RPC protocol of the Social Service, generating the corresponding TypeScript definitions.</li>

<li>Compile the TypeScript code of the client.</li>

<p>A distributable will be generated in the</p>

<code>dist</code>

<p>folder, containing all the client's code and types.</p>

<h2>Using the client</h2>

<h3>Basic setup and usage</h3>

<p>To use the client, install the package in your NPM project:</p>

<pre>npm install -S @dcl/social-rpc-client</pre>

<p>Import the client creator function from the installed package:</p>

<p>Create a new client instance by providing the client with:</p>

<li>A URL to the Social Service's REST API</li>

<li>A URL to the Social Service's Websocket endpoint</li>

<li>The user's address (the same as the one used to sign the identity)</li>

<li>An identity, signed with the user's wallet.</li>

<p>The</p>

<code>createSocialClient</code>

<p>will connect perform the required operations to connect to the Social Service and will return the connected client.</p>

<p>Use the client to interact with the Social Service:</p>

<p>The client exposes the methods available through the</p>

<p>and a disconnect method which disconnects the client from the Social Service.</p>

<h3>Generating an identity</h3>

<p>To authenticate users with the Social Service, you'll need to generate an identity for them. To do so, the</p>

<code>@dcl/crypto</code>

<p>library provides the</p>

<code>Authenticator.initializeAuthChain</code>

<p>method. Use it to generate an identity for your users:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/--decentraland-social-service-js-client

# Change to URL: https://github.com/decentraland/watermelon

# URL: https://github.com/decentraland/watermelon

<title>GitHub - decentraland/watermelon</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/watermelon</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>watermelon</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-return-license

# URL: https://github.com/decentraland/unity-return-license

<title>GitHub - decentraland/unity-return-license: Github Action to return a Unity pro license.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Github Action to return a Unity pro license.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-return-license</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>3</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Unity - Return license</h1>

<p>(Not affiliated with Unity Technologies)</p>

<p>GitHub Action to</p>

<p>.

Part of the</p>

<p>open source project.</p>

<h2>How to use</h2>

<p>Find the</p>

<p>on the GameCI</p>

<p>.</p>

<h2>Related actions</h2>

<p>Visit the

GameCI</p>

<p>status repository for related Actions.</p>

<h2>Community</h2>

<p>Feel free to join us on</p>

<p>and engage with the community.</p>

<h2>Contributing</h2>

<p>To help improve the documentation, please find the docs</p>

<p>.</p>

<p>To contribute to this project, kindly read the</p>

<p>.</p>

<h2>Licence</h2>

<h2>About</h2>

<p>Github Action to return a Unity pro license.</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>11</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-decentraland-api

# URL: https://github.com/decentraland/tap-decentraland-api

<title>GitHub - decentraland/tap-decentraland-api</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-decentraland-api</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>27</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>135</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-decentraland-api</h1>

<code>tap-decentraland-api</code>

<p>is a Singer tap for the Decentraland API.</p>

<p>Build with the</p>

<p>.</p>

<h2>Installation</h2>

<pre>pipx install tap-decentraland-api</pre>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<p>You need to specify if you are trying to get test or production data by setting property</p>

<code>api_url</code>

<p>, configs are provided in the config folder.</p>

<h3>Executing the Tap Directly</h3>

<p>Use docker to debug this tap directly using target-jsonl like this:</p>

<pre>./docker-run.sh</pre>

<h2>Developer Resources</h2>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-decentraland-api

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-decentraland-api --version</pre>

<pre>meltano elt tap-decentraland-api target-jsonl</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/tap-decentraland-api

# Change to URL: https://github.com/decentraland/archipelago-prometheus-nats-exporter

# URL: https://github.com/decentraland/archipelago-prometheus-nats-exporter

<title>GitHub - decentraland/archipelago-prometheus-nats-exporter</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago-prometheus-nats-exporter</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/tap-decentraland-thegraph

# URL: https://github.com/decentraland/tap-decentraland-thegraph

<title>GitHub - decentraland/tap-decentraland-thegraph: Exports data from Decentraland's subgraphs at https://thegraph.com/</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Exports data from Decentraland's subgraphs at</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/tap-decentraland-thegraph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>28</strong>

<strong>2</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>123</strong>

<h2>Files</h2>

<button>View code</button>

<h1>tap-decentraland-thegraph</h1>

<code>tap-decentraland-thegraph</code>

<p>is a Singer tap for DecentralandTheGraph.</p>

<p>Build with the</p>

<p>.</p>

<h2>Installation</h2>

<code>Developer TODO:</code>

<li>Update the below as needed to correctly describe the install procedure. For instance, if you do not have a PyPi repo, or if you want users to directly install from your git repo, you can modify this step as appropriate.</li>

<pre>pipx install tap-decentraland-thegraph</pre>

<h2>Configuration</h2>

<h3>Accepted Config Options</h3>

<code>Developer TODO:</code>

<li>Provide a list of config options accepted by the tap.</li>

<p>A full list of supported settings and capabilities for this

tap is available by running:</p>

<pre>tap-decentraland-thegraph --about</pre>

<h3>Source Authentication and Authorization</h3>

<code>Developer TODO:</code>

<li>If your tap requires special access on the source system, or any special authentication requirements, provide those here.</li>

<h2>Usage</h2>

<p>You can easily run</p>

<code>tap-decentraland-thegraph</code>

<p>by itself or in a pipeline using</p>

<p>.</p>

<h3>Executing the Tap Directly</h3>

<pre>tap-decentraland-thegraph --version

tap-decentraland-thegraph --help

tap-decentraland-thegraph --config CONFIG --discover</pre>

<pre>./catalog.json</pre>

<h2>Developer Resources</h2>

<code>Developer TODO:</code>

<li>As a first step, scan the entire project for the text "</li>

<code>TODO:</code>

<li>" and complete any recommended steps, deleting the "TODO" references once completed.</li>

<h3>Initialize your Development Environment</h3>

<pre>pipx install poetry

poetry install</pre>

<h3>Create and Run Tests</h3>

<p>Create tests within the</p>

<code>tap_decentraland_thegraph/tests</code>

<p>subfolder and

then run:</p>

<pre>poetry run pytest</pre>

<p>You can also test the</p>

<code>tap-decentraland-thegraph</code>

<p>CLI interface directly using</p>

<code>poetry run</code>

<p>:</p>

<pre>poetry run tap-decentraland-thegraph --help</pre>

<h3>Testing with</h3>

<strong>Note:</strong>

<em>This tap will work in any Singer environment and does not require Meltano.

Examples here are for convenience and to streamline end-to-end orchestration scenarios.</em>

<p>Your project comes with a custom</p>

<code>meltano.yml</code>

<p>project file already created. Open the</p>

<code>meltano.yml</code>

<p>and follow any</p>

<em>"TODO"</em>

<p>items listed in

the file.</p>

<p>Next, install Meltano (if you haven't already) and any needed plugins:</p>

<pre>pipx install meltano</pre>

<pre>tap-decentraland-thegraph

meltano install</pre>

<p>Now you can test and orchestrate using Meltano:</p>

<pre>meltano invoke tap-decentraland-thegraph --version</pre>

<pre>meltano elt tap-decentraland-thegraph target-jsonl</pre>

<h3>Singer SDK Dev Guide</h3>

<p>See the</p>

<p>for more instructions on how to use the Singer SDK to

develop your own taps and targets.</p>

<h2>About</h2>

<p>Exports data from Decentraland's subgraphs at</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>5</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/tap-decentraland-thegraph

# Change to URL: https://github.com/decentraland/archipelago-nats

# URL: https://github.com/decentraland/archipelago-nats

<title>GitHub - decentraland/archipelago-nats</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/archipelago-nats</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rca

# URL: https://github.com/decentraland/rca

<title>GitHub - decentraland/rca: Shared knowledge base of incidents Root Cause Analysis</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Shared knowledge base of incidents Root Cause Analysis</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rca</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>95</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Root Cause Analysis</h1>

<p>When facing production incidents we usually need quick mitigation to put out the fire and there is no time to deeply look at the underlying causes, treating symptoms and not the problem.</p>

<p>The goal of an RCA process is to discover the real cause behind the incident to fully understand how to solve it, prevent it in the future and have a record of successful strategies in order to share knowledge and repeat things that worked.</p>

<em>Incidents could be defined as events that cause disruption to or a reduction in the quality of a production service or product feature which requires an emergency response.</em>

<p>In addition to discovering the root cause, we should strive to provide context and information that will result in an action or a decision: good analysis is actionable analysis.</p>

<p>The content on this repository should be shared once the incidents are mitigated or resolved so that potential vulnerabilities are not exposed.</p>

<p>In order to perform an Incident Analysis, you can choose the tool that better fits the situation, some common examples are:</p>

<p>,</p>

<p>(many potential causes, cause & effect) or</p>

<p>Incidents Severity is categorized on the following levels:</p>

<strong>SEV-1</strong>

<li>: Critical issues impacting more than 50% of our users (a.k.a âOh Fuck!â). The incident degrades the experience to a point in which the user decides to drop Decentraland Platform. Requires immediate resolution</li>

<strong>SEV-2</strong>

<li>: Critical system issue actively impacting a limited number of users. The users can still interact in Decentraland word but they get frustrated by the inability to live a full experience. Requires immediate resolution</li>

<strong>SEV-3</strong>

<li>: Stability or minor user impacting issue that requires immediate attention from the service owner, otherwise it might become a SEV-2 incident. Very restricted incident that is internally visible and should be mitigated as soon as possible; without extended user awareness and impacting non-critical flows</li>

<strong>SEV-4</strong>

<li>: Minor issue requiring action but not affecting the ability to use the platform</li>

<strong>SEV-5</strong>

<li>: Cosmetic issues or bugs not affecting the usersâ ability to use the platform, but it's relevant to give awareness to the other teams</li>

<p>To add new incidents use the date of the event as the Id with the following format</p>

<code>YYYY-MM-DD</code>

<p>. If there is more than one event on the same date you may need to use a suffix as part of the file name.</p>

<h2>Incidents Index</h2>

<li>Wearables not loading on some users backpack due to corrupted dropped wearable</li>

<li>CDN proxies stopped working affecting the ability to join Decentraland and some sites</li>

<li>Infura outage caused problem with different Services</li>

<li>Some issues were detected after the explorer release on</li>

<li>Social metrics tracking discrepancies</li>

<li>Catalyst node continuously rebooted after an update rollout</li>

<li>Cloudflare XSS protection prevented some users to deploy scenes or smart wearables</li>

<li>The Graph indexing delay prevented users from changing their wearables</li>

<li>Scenes not loading in Europe region</li>

<li>Users not able to save passport</li>

<li>Users not able to see or chat with each other</li>

<li>Some 3D models not rendering</li>

<li>Marketplace failed to display NFTs</li>

<li>3d models from other scenes appearing on other scense</li>

<li>Users joined to the #mvmf channel noticing huge lags</li>

<li>NFTs with animated gif thumbnails have stopped showing thumbnails</li>

<li>Changes in user profile not updating in peer perspective</li>

<li>Scenes MessageBus not working in production</li>

<li>Chat & Friends service unavailable</li>

<li>Some Realms show partial info of others</li>

<li>Higher than normal crashes on desktop platforms (windows)</li>

<li>Wrong online users metric on the status page</li>

<li>SDK Preview doesnât work</li>

<li>Desktop launcher doesn't launch correct version</li>

<li>Users unable to obtain their correct profiles</li>

<li>Users with many wearables are being shown an empty list</li>

<li>Some users are not able to list or make friend requests</li>

<li>Users unable to login to DG realm</li>

<li>Loading an avatar with Thunder Earrings is crashing the client</li>

<li>The teleport get freezed for all users using DEBUG_MODE</li>

<li>Transak widget not working</li>

<li>Social Service Migration</li>

<li>Reference client cannot be launched</li>

<li>Get Friends, Private Chat and Friends Requests not working</li>

<li>Ghost mode in builder</li>

<li>NFT names not displaying as alias</li>

<li>Chats showing out of order</li>

<li>User connections constantly reconnected to the same realm</li>

<li>Users are not visible in any realm other than Heimdallr</li>

<li>Some users are not loading</li>

<li>Cannot log in to Goerli network</li>

<li>Mic remains open when releasing the T key</li>

<li>Users are not able to join Decentraland</li>

<li>Marketplace search not working</li>

<h2>Vulnerabilities Index</h2>

<li>Potentially outdated prices provided by the implementation of ChainlinkOracle</li>

<li>Take over of broken or expired Links</li>

<li>Arbitrary Modification content stored on S3</li>

<li>Cloudflare bypass for Biz environment</li>

<li>Broken access control when deleting single items</li>

<li>Subdomain takeover of osquery.decentraland.org</li>

<li>Stored XSS - Execute Malicious Javascript on Victim's Browser</li>

<li>AWS Credentials leaked in Docker Image</li>

<li>SQL injection on governance API</li>

<li>Misconfigured SSO Function Allows Authenticated Access To Grafana</li>

<li>Dangling Call from wMana</li>

<h2>About</h2>

<p>Shared knowledge base of incidents Root Cause Analysis</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rpc-server-benchmarker

# URL: https://github.com/decentraland/rpc-server-benchmarker

<title>GitHub - decentraland/rpc-server-benchmarker: Tool for benchmarking RPC Servers of the Decentraland RPC implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Tool for benchmarking RPC Servers of the Decentraland RPC implementation</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rpc-server-benchmarker</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Benchmarking tool for RPC Servers</h1>

<p>Project structure:</p>

<li>benchmarker: RPC Client on Typescript. In charge of setting up multiple clients and making requests</li>

<li>rs-server: RPC Server on Rust. The rs-server will clone the rpc-rust repo because it's still not published as a package.</li>

<li>ts-server: RPC Server on Node.</li>

<code>tsc --init</code>

<li>project with minimum needed stuff.</li>

<li>api.proto: Where the protocol and service are defined, shared by the benchmarker, rs-server and ts-server.</li>

<li>book-large-content.txt: Large file that both servers use to store a book into an in-memory database which contains this large text in its</li>

<code>content</code>

<li>field.</li>

<h2>How to use it?</h2>

<p>Make sure you have</p>

<code>node</code>

<p>,</p>

<code>rust</code>

<p>and</p>

<code>cargo</code>

<p>installed.</p>

<h3>Prepare environment</h3>

<p>To have all ready to make benchmarks, you must run:</p>

<pre>make build-ts</pre>

<pre>make build-rs</pre>

<p>After both commands finished you are ready.</p>

<h3>Run the tool</h3>

<pre>make ab server={SERVER_TO_RUN} n={TOTAL_REQUEST_TO_DO} c={CONCURRENCY_LEVEL_FOR_REQUESTS}</pre>

<code>server</code>

<li>: Value could be</li>

<code>rs</code>

<li>for Rust and</li>

<code>ts</code>

<li>for Typescript (node).</li>

<code>n</code>

<li>: Refers to total requests to be done by the</li>

<code>benchmarker</code>

<li>. eg: 10000 (used for the presentation benchmarking)</li>

<code>c</code>

<li>: Refers to the concurrency level of the tool. eg: 100 (used for the presentation benchmarking)</li>

<p>After running the tool, a</p>

<code>.csv</code>

<p>file will be created with a the type of the metric measure and the elapsed time.</p>

<code>${type},${elapsed_time}</code>

<p>, there are two different types, one</p>

<code>WHOLECONNECTION</code>

<p>refers to the entire client connection and other one</p>

<code>GETLARGEBOOKREQUEST</code>

<p>that refers to just the request that fetches the book with a</p>

<code>content</code>

<p>field with 1MB.</p>

<p>The tool also throws an output with some stats similar to</p>

<code>Apache Benchmarking</code>

<p>-> mean, min, max, and percentiles (percentiles are just for the GetBook request). This output shows:</p>

<code>Handle Client time</code>

<li>metric: refers to the elapsed time for the entire client connection</li>

<code>Rpc Client</code>

<li>metric: refers to the elapsed time for the client creation and the connection is established with server.</li>

<code>Rpc Port</code>

<li>metric: refers to the elapsed time for the port creation, that it's also a request.</li>

<code>Request time</code>

<li>metric: refers to the elapsed time for the</li>

<code>GetBook</code>

<li>request (the same as</li>

<code>GETLARGEBOOKREQUEST</code>

<li>)</li>

<code>percentiles</code>

<li>metric: refers to the elapsed time percentiles for the</li>

<code>GetBook</code>

<li>request</li>

<p>Output example</p>

<pre>Total</pre>

<pre>duration: {NUMBER}

Request / Second: {NUMBER}

Handle Client</pre>

<pre>(mean): {NUMBER}

Rpc Client (mean):  {NUMBER}

Rpc Port (mean):  {NUMBER}

Request</pre>

<pre>(mean):  {NUMBER}

Handle Client</pre>

<pre>(min):  {NUMBER}

Rpc Client (min):  {NUMBER}

Rpc Port (min):  {NUMBER}

Request</pre>

<pre>(min):  {NUMBER}

Handle Client</pre>

<pre>(max):  {NUMBER}

Rpc Client (max):  {NUMBER}

Rpc Port (max):  {NUMBER}

Request</pre>

<pre>(max):  {NUMBER}

Percentiles:  {</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER},</pre>

<pre>: {NUMBER} }</pre>

<h2>TODO:</h2>

<li>Adds a benchmarker-rs with the</li>

<code>RpcClient</code>

<li>written in Rust</li>

<li>Adds C# implementation for benchmarking</li>

<h2>About</h2>

<p>Tool for benchmarking RPC Servers of the Decentraland RPC implementation</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-gltf

# URL: https://github.com/decentraland/unity-gltf

<title>GitHub - decentraland/unity-gltf: This is a copy of https://github.com/atteneder/glTFast to avoid LTS fork quota</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<h3>License</h3>

<summary>Apache-2.0, Apache-2.0 licenses found</summary>

<h3>Licenses found</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-gltf</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>unity-gltf</h1>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<h2>About</h2>

<p>This is a copy of</p>

<p>to avoid LTS fork quota</p>

<h3>Resources</h3>

<h3>License</h3>

<summary>Apache-2.0, Apache-2.0 licenses found</summary>

<h3>Licenses found</h3>

<h3>Code of conduct</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Sponsor this project</h2>

<strong>tteneder</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/marketplace-favorites-server

# URL: https://github.com/decentraland/marketplace-favorites-server

<title>GitHub - decentraland/marketplace-favorites-server: Favorites server implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Favorites server implementation</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/marketplace-favorites-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>8</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>98</strong>

<h2>Files</h2>

<button>View code</button>

<h1>marketplace-favorites-server</h1>

<h2>About</h2>

<p>Favorites server implementation</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/builder-client

# URL: https://github.com/decentraland/builder-client

<title>GitHub - decentraland/builder-client</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/builder-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>28</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>162</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Builder client</h1>

<h2>Using the Builder client</h2>

<p>Using the builder client requires an</p>

<code>AuthIdentity</code>

<p>to be created.</p>

<p>An</p>

<code>AuthIdentity</code>

<p>is an object containing:</p>

<li>An ephemeral identity, that is, an address and a private and public key generated randomly.</li>

<li>An expiration date, used to expire any signed messages.</li>

<li>An AuthChain, which is a list of authorization objects used to validate the signed messages.</li>

<p>The library provides a function</p>

<code>createIdentity</code>

<p>that uses a</p>

<code>Signer</code>

<p>from</p>

<code>ethers</code>

<p>, but any other implementation can be created to craft such identity.</p>

<p>Creating the identity using the</p>

<code>createIdentity</code>

<p>can be easily done in NodeJS by instantiating an ethers wallet using a private key:</p>

<p>or by using a JsonRpcProvider:</p>

<p>To use the</p>

<code>BuilderClient</code>

<p>, just instantiate the class with the builder-server url, the identity and the signer's address:</p>

<h2>Using the Item Factory</h2>

<p>Building items is done by using the</p>

<code>ItemFactory</code>

<p>. The</p>

<code>ItemFactory</code>

<p>is a class that can be instantiated with an older item or in blank.</p>

<h3>Initializing a new item</h3>

<p>If the factory was instantiated without an item, a new item can be created by using the</p>

<code>newItem</code>

<p>method that creates a basic item to later work on it.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Editing an item</h3>

<p>An</p>

<code>ItemFactory</code>

<p>instantiated with an older item or with a new item can modify every aspect of the item. This is done by using the factory methods:</p>

<h3>Adding or removing representations to an item</h3>

<p>Representations can be added using the</p>

<code>withRepresentation</code>

<p>: or</p>

<code>withoutRepresentation</code>

<p>methods.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>or deleted from the item using the</p>

<code>withoutRepresentation</code>

<p>method:</p>

<p>When defining the representation's content, the</p>

<code>contents</code>

<p>field must contain the model and the thumbnail.

The library's user is responsible for providing a thumbnail. The thumbnail can be also be changed / set using the</p>

<code>withThumbnail</code>

<p>method.</p>

<h3>Loading items from files</h3>

<p>This library provides a function</p>

<code>loadItem</code>

<p>that can be used to load an item from a file. The function accepts four types of files:</p>

<li>A zip file that contains only the item's contents.</li>

<li>A model file, that contains only the item's model.</li>

<li>A zip file that contains the item's contents and the wearable config file</li>

<code>wearable.json</code>

<li>describing the item's information.</li>

<li>A zip file that contains the item's contents, the builder config file</li>

<code>builder.json</code>

<li>describing information required for the builder platform and</li>

<strong>optionally</strong>

<li>the wearable config file</li>

<code>wearable.json</code>

<li>describing the item's information.</li>

<p>For the 1st and 2nd cases, the function will create a</p>

<code>LoadedItem</code>

<p>object that will contain the item's contents as</p>

<code>RawContent</code>

<p>,

that is content ready to be used with the ItemFactory, and the property</p>

<code>mainModel</code>

<p>that defines the main model file of the contents.</p>

<p>After loading the file, the</p>

<code>LoadedItem</code>

<p>object can be used to create an item using the</p>

<code>ItemFactory</code>

<p>:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>For the 3rd case, the function will create a</p>

<code>LoadedItem</code>

<p>object that will contain the item's contents as</p>

<code>RawContent</code>

<p>, and it will also contain the wearable property

that contains the information of the wearable config file.</p>

<p>A wearable config file is a JSON file that contains the item's information and it has the following shape:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>After loading the file zip file that contains a</p>

<code>wearable.json</code>

<p>file, the</p>

<code>LoadedItem</code>

<p>object can be used to create an item using the</p>

<code>ItemFactory</code>

<p>:</p>

<p>For the 4th case, providing a</p>

<code>builder.json</code>

<p>file we can extract information related to the Builder platform. This file can be accompanied optionally with a</p>

<code>wearable.json</code>

<p>file,

resulting in a zipped wearable that describes a wearable and its place in the Builder platform.</p>

<pre>:</pre>

<pre>:</pre>

<p>After loading the file zip file that contains a</p>

<code>builder.json</code>

<p>and</p>

<code>wearable.json</code>

<p>files, the</p>

<code>LoadedItem</code>

<p>object can be used to create an item using the</p>

<code>ItemFactory</code>

<p>:</p>

<strong>To consider</strong>

<p>The item's thumbnail and the wearable image must be set either manually, by using the factory's</p>

<code>withThumbnail</code>

<p>method or by including the file</p>

<code>thumbnail.png</code>

<p>in the item's contents.</p>

<h3>Building an item</h3>

<p>Building an item is the last step of the item's creation. The</p>

<code>build</code>

<p>method returns a</p>

<code>Promise</code>

<p>that resolves to an object containing the

item and the item's new contents, that is the variables values that are needed to do an item insert or update using the client.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/collections-graph

# URL: https://github.com/decentraland/collections-graph

<title>GitHub - decentraland/collections-graph: ð½ Decentraland Collections Graph</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð½ Decentraland Collections Graph</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/collections-graph</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>274</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland collections graph</h1>

<th>Network</th>

<th>Provider</th>

<th>URL</th>

<th>Current</th>

<th>Previous</th>

<td>Mainnet</td>

<td>Satsuma</td>

<td>Qmf4SMTepdDoFh1ozcaAUMieGF83tnNa2G2Jr4KkH5jPRA</td>

<td>QmcyYqqmE3egvtZReHk1aVxmZawxRSECuj1PcZLgMVzHSp</td>

<td>Mainnet</td>

<td>Hosted Services</td>

<td>Qmf4SMTepdDoFh1ozcaAUMieGF83tnNa2G2Jr4KkH5jPRA</td>

<td>QmP2EQebbD9W8AaphRTzNUL7NLdMH8FdqNNWtqUiNg2VkB</td>

<td>Sepolia</td>

<td>Satsuma</td>

<td>QmSYyRTthY69mSHxkAY6ym3beCWQr97NwecWdpxjiHypKh</td>

<td>QmWQZiMSV5AnUPN34NFmAYtxGntxewMUUwuS9r5vBpc5Ys</td>

<td>Sepolia</td>

<td>Graph Studio</td>

<td>QmSYyRTthY69mSHxkAY6ym3beCWQr97NwecWdpxjiHypKh</td>

<td>QmWQZiMSV5AnUPN34NFmAYtxGntxewMUUwuS9r5vBpc5Ys</td>

<td>Goerli</td>

<td>Satsuma</td>

<td>QmZXxk89ZunJvXNsckSioadZNQW7VBydrGfXTqS2ivzHqU</td>

<td>QmUvtxgRKdFf1zcZZLrJ5nZ6HyoUYKPtByGQigP4rHxwSj</td>

<td>Goerli</td>

<td>Hosted Services</td>

<td>QmZXxk89ZunJvXNsckSioadZNQW7VBydrGfXTqS2ivzHqU</td>

<td>QmUvtxgRKdFf1zcZZLrJ5nZ6HyoUYKPtByGQigP4rHxwSj</td>

<td>Matic</td>

<td>Satsuma</td>

<td>QmPAV5PzFgu7iaiSYYmRTPGFR4ADGfeKSTPqTPt5eKVAVv</td>

<td>QmdavX3eGWLYCjjzYAZv924hyoLv8f9Rg6FxHD7kAJ4fXn</td>

<td>Matic</td>

<td>Hosted Services</td>

<td>QmPAV5PzFgu7iaiSYYmRTPGFR4ADGfeKSTPqTPt5eKVAVv</td>

<td>QmXEwSeNTT5xHRQPcTUDQJayjjfhcbaxYf2o7ycuYf8YF7</td>

<td>Matic Temp</td>

<td>Hosted Services</td>

<td>QmTKztw187jUHZ33S2pndtyo68K462XwewcvMVAVH7mwZR</td>

<td>Qmf3igvJs24gozdwCwnDyPNz9DEBQMPQRFmEhUzEvgxZSq</td>

<td>Mumbai</td>

<td>Satsuma</td>

<td>QmYVGaMGvqkcBMrJ4F5XrkzwCzhB3FfJvHRBERbtgovCai</td>

<td>QmRpCReFLwhB4tATJhur1MEjsPY1Rgo2yVrd5oinnjCrAy</td>

<td>Mumbai</td>

<td>Hosted Service</td>

<td>QmYVGaMGvqkcBMrJ4F5XrkzwCzhB3FfJvHRBERbtgovCai</td>

<td>QmegTREYw1Li3DYMAcCVJDcoBuquoCFKDUCzxrxyGhWwUW</td>

<p>Using</p>

<p>and</p>

<h3>Install</h3>

<pre>npm ci</pre>

<h3>Test</h3>

<p>Tests are defined inside the</p>

<code>./tests</code>

<p>directory and executed using:</p>

<pre>npm</pre>

<strong>Take into consideration:</strong>

<code>Postgres 14</code>

<p>is required to run tests locally because</p>

<code>graph-node</code>

<p>, the underlying engine to index the subgraph, needs it.</p>

<p>An alternative to run tests locally without installing Postgres is through `Docker. To run them, use the following command:</p>

<code>npm run test:docker</code>

<strong>CI Notice:</strong>

<p>Tests are run on the CI using</p>

<code>npm test</code>

<p>because the</p>

<code>ubuntu-latest</code>

<p>image used in the CI contains Postgres 14.</p>

<p>More about how to write subgraph tests can be found on the</p>

<p>.</p>

<h3>Deploy</h3>

<pre>npm run deploy:{network}</pre>

<h3>Queries</h3>

<p>The collection's</p>

<code>id</code>

<p>is the smart contract address of the collection.

The item's</p>

<code>id</code>

<p>is</p>

<code>{collection_contract_address}-{item_blochain_id}</code>

<p>. The</p>

<code>item_blockchain_id</code>

<p>is the index of the item in the collection. E.g: if you have a collection with 2 items, the first is</p>

<code>0</code>

<p>and the second one is</p>

<code>1</code>

<p>. Therefore, the id of the first item will be:</p>

<code>{contract_address}-0</code>

<p>Ethereum addresses should be passed lowercased:</p>

<code>0xB549B2442b2BD0a53795BC5cDcBFE0cAF7ACA9f8</code>

<li>â</li>

<code>0xb549b2442b2bd0a53795bc5cdcbfe0caf7aca9f8</code>

<li>â</li>

<h4>Get first 5 collections and items balances</h4>

<pre>:</pre>

<pre>:</pre>

<h3>Get Item Metadata</h3>

<pre>:</pre>

<h4>Get first 5 Collection NFTs</h4>

<p>Owner's</p>

<code>id</code>

<p>is the owner's Ethereum address</p>

<pre>:</pre>

<h4>Get first 5 Collection NFTs Orders</h4>

<pre>:</pre>

<h4>Get totals</h4>

<h2>About</h2>

<p>ð½ Decentraland Collections Graph</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>14</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-collections-graph

# Change to URL: https://github.com/decentraland/deployments-sse

# URL: https://github.com/decentraland/deployments-sse

<title>GitHub - decentraland/deployments-sse: Sends pointer deploymens via Server Sent Events</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Sends pointer deploymens via Server Sent Events</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/deployments-sse</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and components (ports).</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic and adapters.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our adapters (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<p>Sends pointer deploymens via Server Sent Events</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/ownership-server

# URL: https://github.com/decentraland/ownership-server

<title>GitHub - decentraland/ownership-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/ownership-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>22</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Ownership Server</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/catalyst-run

# URL: https://github.com/decentraland/catalyst-run

<title>GitHub - decentraland/catalyst-run</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/catalyst-run</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>23</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Example</h1>

<code>docker pull quay.io/decentraland/catalyst-run:next

docker run --env-file .env --env-file .env-database-content -e TARGET_CATALYST_URL=https://peer-ue-2.decentraland.zone --rm -it --network="catalyst-owner_default" --mount type=bind,src=/opt/ebs/contents,dst=/app/contents quay.io/decentraland/catalyst-run:next dist/sepolia-migration.js

docker run --env-file .env --env-file .env-database-content -e TARGET_CATALYST_URL=https://peer-ue-2.decentraland.zone -e MIGRATION_PRIVATE_KEY=xx --rm -it --network="catalyst-owner_default" --mount type=bind,src=/opt/ebs/contents,dst=/app/contents quay.io/decentraland/catalyst-run:next dist/sepolia-migration.js</code>

<p>Or just run a node cli:</p>

<code>docker run --env-file .env --env-file .env-database-content  --rm -it --network="catalyst-owner_default" quay.io/decentraland/catalyst-run:next</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/linker-dapp

# URL: https://github.com/decentraland/linker-dapp

<title>GitHub - decentraland/linker-dapp</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/linker-dapp</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>19</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>31</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Linker App.</h1>

<h3>Development</h3>

<p>For local development start the linker dApp using the CLI (ie.</p>

<code>dcl deploy</code>

<p>or</p>

<code>dcl world-acl</code>

<p>) and then point the</p>

<code>/api</code>

<p>calls to the local port where the CLI is serving the linker dApp (ie.</p>

<code>http://localhost:8000/api</code>

<p>instead of</p>

<code>/api</code>

<p>).</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>7</strong>

<h3>Forks</h3>

<strong>4</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rpc-rust

# URL: https://github.com/decentraland/rpc-rust

<title>GitHub - decentraland/rpc-rust: Decentraland RPC - Rust implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland RPC - Rust implementation</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/rpc-rust</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>14</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>108</strong>

<h2>Files</h2>

<button>View code</button>

<h1>dcl-rpc</h1>

<p>The Rust implementation of Decentraland RPC. At Decentraland, we have our own implementation of RPC for communications between the different services.</p>

<p>Currently, there are other implementations:</p>

<h2>Requirements</h2>

<li>Install Just</li>

<h3>Install Just for commands</h3>

<pre>cargo install just</pre>

<h2>Examples</h2>

<h3>Run the integration example</h3>

<p>RPC Client in Rust and RPC Server in Rust running Websocket transport example, Memory Transport example and example using different types of transports</p>

<code>just run-integration</code>

<h3>Run the integration example with an specific transport</h3>

<p>RPC Client in Rust and RPC Server in Rust running the example passed to the command</p>

<code>just run-integration {ws|memory|dyn}</code>

<h3>Run the multi language integration example</h3>

<p>RPC Client in Typescript and RPC Server in Rust using WebSockets</p>

<code>just run-multilang</code>

<p>You can find the code for these examples in the</p>

<code>examples/</code>

<p>directory.</p>

<h2>Usage</h2>

<h3>Import</h3>

<pre>[</pre>

<pre>]</pre>

<pre>=</pre>

<pre>[</pre>

<pre>]</pre>

<pre>=</pre>

<pre>=</pre>

<h3>Protobuf</h3>

<p>Create a file</p>

<code>app.proto</code>

<p>to define the messages that will be used, for example:</p>

<pre>;</pre>

<pre>;</pre>

<pre>{</pre>

<pre>;

}</pre>

<pre>{</pre>

<pre>(</pre>

<pre>)</pre>

<pre>(</pre>

<pre>) {}

}</pre>

<p>Then, define a</p>

<code>build.rs</code>

<p>file to build the types of the message:</p>

<pre>std</pre>

<pre>io</pre>

<pre>-></pre>

<pre>conf = prost_build</pre>

<pre>conf</pre>

<pre>dcl_rpc</pre>

<pre>codegen</pre>

<pre>conf</pre>

<pre>?</pre>

<p>The</p>

<code>build.rs</code>

<p>script runs every time that your</p>

<code>.proto</code>

<p>changes. The script will generate a file in the</p>

<code>OUT_DIR</code>

<p>, named as the</p>

<code>package</code>

<p>field in the</p>

<code>.proto</code>

<p>file (if it's not declared, the name will be '_.rs'). This file will include:</p>

<li>All your declared messages in the</li>

<code>.proto</code>

<li>as Rust structs. *1</li>

<li>(</li>

<code>#[cfg(feature = "server")]</code>

<li>) A trait, named</li>

<code>{YOUR_RPC_SERVICE_NAME}Server: Send + Sync + 'static</code>

<li>, with the methods defined in your service for the server side. So you should use this trait to build an implementation with the business logic. *2</li>

<li>(</li>

<code>#[cfg(feature = "client")]</code>

<li>) A trait, named</li>

<code>{YOUR_RPC_SERVICE_NAME}ClientDefinition<T: Transport + 'static>: ServiceClient<T> + Send + Sync + 'static</code>

<li>, and an implementation of it for the client side, named</li>

<code>{YOUR_RPC_SERVICE_NAME}Client</code>

<li>. You could use this auto-generated implementation when using the</li>

<code>RpcClient</code>

<li>passing the implementation (struct with the trait implemented) as a generic in the</li>

<code>load_module</code>

<li>function, which it'll be in charge of requesting the procedures of your service. But you could also have your own implementation of the</li>

<code>{YOUR_RPC_SERVICE_NAME}ClientDefinition</code>

<li>trait, as long as the implementations meets with trait's and</li>

<code>RpcClient</code>

<li>requirements .  *3</li>

<li>(</li>

<code>#[cfg(feature = "server")]</code>

<li>)  A struct in charge of registering your declared service when a</li>

<code>RpcServerPort</code>

<li>is created. You should use this struct and its registering function inside the</li>

<code>RpcServer</code>

<li>port creation handler. *4</li>

<p>To import them you must add:</p>

<pre>concat!</pre>

<pre>env!</pre>

<pre>,</pre>

<p>This statement should be added to the</p>

<code>src/lib.rs</code>

<p>in order to make the auto-generated code part of your crate, otherwise it will treat every include as different types.</p>

<h3>Server Side</h3>

<pre>dcl_rpc</pre>

<pre>transports</pre>

<pre>web_socket</pre>

<pre>server</pre>

<pre>service_module_definition</pre>

<pre>ws_server =</pre>

<pre>connection_listener = ws_server</pre>

<pre>ctx =</pre>

<pre>server =</pre>

<pre>ctx</pre>

<pre>server</pre>

<pre>|</pre>

<pre>|</pre>

<pre>port</pre>

<pre>echo_service</pre>

<pre>server_events_sender = server</pre>

<pre>tokio</pre>

<pre>connection</pre>

<pre>= connection_listener</pre>

<pre>transport =</pre>

<pre>connection</pre>

<pre>server_events_sender</pre>

<pre>transport</pre>

<pre>_</pre>

<pre>=></pre>

<pre>_</pre>

<pre>=></pre>

<pre>server</pre>

<p>Implement the trait for your service</p>

<pre>-></pre>

<pre>request</pre>

<h3>Client Side</h3>

<p>Initiate a WebSocket Client Connection and send a Hello World message to the echo server.</p>

<pre>dcl_rpc</pre>

<pre>transports</pre>

<pre>web_socket</pre>

<pre>client</pre>

<pre>ws_rust</pre>

<pre>client_connection =</pre>

<pre>client_transport =</pre>

<pre>client_connection</pre>

<pre>client =</pre>

<pre>client_transport</pre>

<pre>port = client</pre>

<pre>module = port</pre>

<pre>response = module</pre>

<h2>About</h2>

<p>Decentraland RPC - Rust implementation</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/rpc-csharp

# Change to URL: https://github.com/decentraland/substreams-sink-postgres-fork

# URL: https://github.com/decentraland/substreams-sink-postgres-fork

<title>GitHub - decentraland/substreams-sink-postgres-fork</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-sink-postgres-fork</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>166</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Substreams Sink PostgreSQL</h1>

<p>This is a command line tool to quickly sync a Substreams with a PostgreSQL database.</p>

<h3>Quickstart</h3>

<p>Install</p>

<code>substreams-sink-postgres</code>

<p>by using the pre-built binary release</p>

<p>. Extract</p>

<code>substreams-sink-postgres</code>

<p>binary into a folder and ensure this folder is referenced globally via your</p>

<code>PATH</code>

<p>environment variable.</p>

<strong>Note</strong>

<p>Or install from source directly</p>

<code>go install github.com/streamingfast/substreams-sink-postgres/cmd/substreams-sink-postgres@latest</code>

<p>.</p>

<p>Start Docker Compose:</p>

<pre>docker compose up</pre>

<strong>Note</strong>

<p>Feel free to skip this step if you already have a running Postgres instance accessible, don't forget to update the connection string in the command below.</p>

<p>Run the setup command:</p>

<pre>substreams-sink-postgres setup</pre>

<pre>docs/tutorial/schema.sql</pre>

<p>This will connect to the given database pointed by</p>

<code>psql://dev-node:insecure-change-me-in-prod@localhost:5432/dev-node?sslmode=disable</code>

<p>, create the tables and indexes specified in the given</p>

<code><schema_file></code>

<p>, and will create the required tables to run the sink (e.g. the</p>

<code>cursors</code>

<p>table).</p>

<strong>Note</strong>

<p>For the sake of idempotency, we recommend that the schema file only contain</p>

<code>create table if not exists</code>

<p>statements.</p>

<p>Run the sink</p>

<p>Compile the</p>

<p>tutorial project first:</p>

<pre>docs/tutorial

cargo build --target wasm32-unknown-unknown --release</pre>

<pre>../..</pre>

<p>Once the compilation has completed, let launch the</p>

<code>sink</code>

<p>process.</p>

<strong>Note</strong>

<p>To connect to Substreams you will need an authentication token, follow this</p>

<p>to obtain one.</p>

<pre>substreams-sink-postgres run \</pre>

<pre>\</pre>

<pre>\</pre>

<pre>\

    db_out</pre>

<h3>Output Module</h3>

<p>To be accepted by</p>

<code>substreams-sink-postgres</code>

<p>, your module output's type must be a</p>

<p>message. The Rust crate</p>

<p>contains bindings and helpers to implement it easily. Some project implementing</p>

<code>db_out</code>

<p>module for reference:</p>

<li>(some helpers found in</li>

<li>)</li>

<p>By convention, we name the</p>

<code>map</code>

<p>module that emits</p>

<p>output</p>

<code>db_out</code>

<p>.</p>

<p>Note that using prior versions (0.2.0, 0.1.*) of</p>

<code>substreams-database-change</code>

<p>, you have to use</p>

<code>substreams.database.v1.DatabaseChanges</code>

<p>in your</p>

<code>substreams.yaml</code>

<p>and put the respected version of the</p>

<code>spkg</code>

<p>in your</p>

<code>substreams.yaml</code>

<h3>PostgreSQL DSN</h3>

<p>The connection string is provided using a simple string format respecting the URL specification. The DSN format is:</p>

<code>psql://<user>:<password>@<host>/<dbname>[?<options>]</code>

<p>Where</p>

<code><options></code>

<p>is URL query parameters in</p>

<code><key>=<value></code>

<p>format, multiple options are separated by</p>

<code>&</code>

<p>signs. Supported options can be seen</p>

<p>. The options</p>

<code><user></code>

<p>,</p>

<code><password></code>

<p>,</p>

<code><host></code>

<p>and</p>

<code><dbname></code>

<p>should</p>

<strong>not</strong>

<p>be passed in</p>

<code><options></code>

<p>as they are automatically extracted from the DSN URL.</p>

<p>Moreover, the</p>

<code>schema</code>

<p>option key can be used to select a particular schema within the</p>

<code><dbname></code>

<p>database.</p>

<h3>Advanced Topics</h3>

<h4>High Throughput Injection</h4>

<p>Important</p>

<p>This method will be useful if you insert a lot of data into the database. If the standard ingestion speed satisfy your needs, continue to use it, the steps below are an advanced use case.</p>

<p>The</p>

<code>substreams-sink-postgres</code>

<p>contains a fast injection mechanism for cases where big data needs to be dump into the database. In those cases, it may be preferable to dump every files to CSV and then use</p>

<code>COPYFROM</code>

<p>to transfer data super quick to Postgres.</p>

<p>The idea is to first dump the Substreams data to</p>

<code>CSV</code>

<p>files using</p>

<code>substreams-sink-postgres generate-csv</code>

<p>command:</p>

<pre>substreams-sink-postgres generate-csv</pre>

<pre>mainnet.eth.streamingfast.io:443</pre>

<pre>spkg</pre>

<pre>db_out ./data/tables :14490000</pre>

<p>Note</p>

<p>We are using 14490000 as our stop block, pick you stop block close to chain's HEAD or smaller like us to perform an experiment, adjust to your needs.</p>

<p>This will generate block segmented CSV files for each table in your schema inside the folder</p>

<code>./data/tables</code>

<p>. Next step is to actually inject those CSV files into your database. You can use</p>

<code>psql</code>

<p>and inject directly with it.</p>

<p>We offer</p>

<code>substreams-sink-postgres inject-csv</code>

<p>command as a convenience. It's a per table invocation but feel free to run each table concurrently, your are bound by your database as this point, so it's up to you to decide you much concurrency you want to use. Here a small</p>

<code>Bash</code>

<p>command to loop through all tables and inject them all</p>

<pre>\

  substreams-sink-postgres inject-csv</pre>

<pre>./data/tables</pre>

<pre>:14490000</pre>

<pre>\</pre>

<pre>[[</pre>

<pre>0 ]]</pre>

<pre>\</pre>

<p>Those files are then inserted in the database efficiently by doing a</p>

<code>COPY FROM</code>

<p>and reading the data from a network pipe directly.</p>

<p>The command above will also pick up the</p>

<code>cursors</code>

<p>table injection as it's a standard table to write. The table is a bit special as it contains a single file which is contains the</p>

<code>cursor</code>

<p>that will handoff between CSV injection and going back to "live" blocks. It's extremely important that you validate that this table has been properly populated. You can do this simply by doing:</p>

<pre>substreams-sink-postgres tools --dsn=</pre>

<pre>cursor</pre>

<pre>Module eaf2fc2ea827d6aca3d5fee4ec9af202f3d1b725: Block</pre>

<p>This should emit a single line, the</p>

<code>Module <hash></code>

<p>should fit the for</p>

<code>db_out</code>

<p>(check</p>

<code>substreams info <spkg></code>

<p>to see your module's hashes) and the block number should fit your last block you written.</p>

<p>Warning</p>

<p>Failure to properly populate will 'cursors' table will make the injection starts from scratch when you will do</p>

<code>substreams-sink-postgres run</code>

<p>to bridge with "live" blocks as no cursor will exist so we will start from scratch.</p>

<p>Once data has been injected and you validated the</p>

<code>cursors</code>

<p>table, you can then simply start streaming normally using:</p>

<pre>substreams-sink-postgres run</pre>

<pre>mainnet.eth.streamingfast.io:443</pre>

<pre>spkg</pre>

<pre>db_out</pre>

<p>This will start back at the latest block written and will start to handoff streaming to a "live" blocks.</p>

<h5>Performance Knobs</h5>

<p>When generating the CSV files, optimally choosing the</p>

<code>--buffer-max-size</code>

<p>configuration value can drastically increase your write throughput locally but even more if your target store is an Amazon S3, Google Cloud Storage or Azure bucket. The flag controls how many bytes of the files is to be held in memory. By having bigger amount of buffered bytes, data is transferred in big chunk to the storage layer leading to improve performance. In lots of cases, the full file can be held in memory leading to a single "upload" call being performed having even better performance.</p>

<p>When choosing this value you should consider 2 things:</p>

<li>One buffer exist by table in your schema, so if there is 12 tables and you have a 128 MiB buffer, you could have up to 1.536 GiB (</li>

<code>128 MiB * 12</code>

<li>) of RAM allocated to those buffers.</li>

<li>Amount of RAM you want to allocate.</li>

<p>Let's take a container that is going to have 8 GiB of RAM. We suggest leaving 512 MiB for other part of the</p>

<code>generate-csv</code>

<p>tasks, which mean we could dedicated 7.488 GiB to buffering. If your schema has 10 tables, you should use</p>

<code>--buffer-max-size=785173709</code>

<p>(</p>

<code>7.488 GiB / 10 = 748.8 MiB = 785173709</code>

<p>).</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/substreams-server

# URL: https://github.com/decentraland/substreams-server

<title>GitHub - decentraland/substreams-server</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/substreams-server</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>12</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>36</strong>

<h2>Files</h2>

<button>View code</button>

<h1>template-server</h1>

<h2>Architecture</h2>

<p>Extension of "ports and adapters architecture", also known as "hexagonal architecture".</p>

<p>With this architecture, code is organized into several layers: logic, controllers, adapters, and components (ports).</p>

<h2>Application lifecycle</h2>

<strong>Start application lifecycle</strong>

<li>- Handled by</li>

<li>in only one line of code:</li>

<code>Lifecycle.run({ main, initComponents })</code>

<strong>Create components</strong>

<li>- Handled by</li>

<li>in the function</li>

<code>initComponents</code>

<strong>Wire application & start components</strong>

<li>- Handled by</li>

<li>in the funciton</li>

<code>main</code>

<li>.</li>

<li>First wire HTTP routes and other events with</li>

<li>Then call to</li>

<code>startComponents()</code>

<li>to initialize the components (i.e. http-listener)</li>

<p>The same lifecycle is also valid for tests:</p>

<h2>Namespaces</h2>

<h3>src/logic</h3>

<p>Deals with pure business logic and shouldn't have side-effects or throw exceptions.</p>

<h3>src/controllers</h3>

<p>The "glue" between all the other layers, orchestrating calls between pure business logic and adapters.</p>

<p>Controllers always receive an hydrated context containing components and parameters to call the business logic e.g:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>src/adapters</h3>

<p>The layer that converts external data representations into internal ones, and vice-versa. Acts as buffer to protect the service from changes in the outside world; when a data representation changes, you only need to change how the adapters deal with it.</p>

<h3>src/components.ts</h3>

<p>We use the components abstraction to organize our adapters (e.g. HTTP client, database client, redis client) and any other logic that needs to track mutable state or encode dependencies between stateful components. For every environment (e.g. test, e2e, prod, staging...) we have a different version of our component systems, enabling us to easily inject mocks or different implementations for different contexts.</p>

<p>We make components available to incoming http and kafka handlers. For instance, the http-server handlers have access to things like the database or HTTP components, and pass them down to the controller level for general use.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/renderer-bff

# URL: https://github.com/decentraland/renderer-bff

<title>GitHub - decentraland/renderer-bff</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/renderer-bff</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>14</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Renderer BFF</h1>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/unity-exercise-battle

# URL: https://github.com/decentraland/unity-exercise-battle

<title>GitHub - decentraland/unity-exercise-battle</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/unity-exercise-battle</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Battle Simulator</h1>

<p>In this simulator, armies of varying units and sizes will battle using a set of very simple AI strategies.</p>

<h2>Launch Menu</h2>

<p>This is the simulator entry point, in which the following options can be set per army:</p>

<li>Warriors amount</li>

<li>Archers amount</li>

<li>Strategy type</li>

<p>Then, there's the "launch" button that will put the user on the battle phase.</p>

<h2>Battle</h2>

<p>In this phase, the two armies will fight for victory. The battle will start according to the options selected at the

launch menu.</p>

<h3>Basic Rules</h3>

<li>Units can't overlap other units</li>

<li>To avoid too much dispersion, units must be at least 80 meters close to the center point of all units</li>

<li>All units have attack, speed, and defense values. When any unit attacks, the hit formula

is</li>

<code>defender.health -= attacker.attack - defender.defense</code>

<li>.</li>

<li>Any unit must not move distances that surpass its own speed on a single frame.</li>

<li>All units have attack cooldown values. Any unit can't attack if the cooldown value is above zero.</li>

<li>If health falls under zero, a given unit dies.</li>

<li>When all the units for a given army dies, a ending menu is instantiated. This menu will have a button that can get the

user to the launch menu to start a new simulation.</li>

<p>Armies are composed by the following unit types:</p>

<h3>Warrior</h3>

<th>Attribute</th>

<th>Value</th>

<td>Attack range</td>

<td>2.5 meters</td>

<td>Attack cooldown</td>

<td>1 second</td>

<td>Attack amount</td>

<td>20 pts</td>

<td>Health</td>

<td>50 pts</td>

<td>Defense</td>

<td>5 pts</td>

<h3>Archer</h3>

<th>Attribute</th>

<th>Value</th>

<td>Attack range</td>

<td>20 meters</td>

<td>Attack cooldown</td>

<td>5 seconds</td>

<td>Post-attack delay</td>

<td>1 second</td>

<td>Attack amount</td>

<td>10 pts</td>

<td>Health</td>

<td>5 pts</td>

<td>Defense</td>

<td>0 pts</td>

<strong>Special rules:</strong>

<p>When the archer attacks, it spawns an arrow that flies in a straight direction and impacts the target

from a distance. After the archer attacks, it has a</p>

<code>postAttackDelay</code>

<p>attribute that prevents further movement for its

given time.</p>

<h3>Strategies</h3>

<p>There are only two strategies that are outlined below</p>

<strong>Basic</strong>

<p>Any Unit will just pick the nearest enemy, and advance to it. It will attack as soon the enemy falls within

its</p>

<code>attackRange</code>

<p>attribute.</p>

<strong>Defensive</strong>

<p>Any Unit will just pick the nearest enemy, and advance to it. Warriors will back off when their</p>

<code>attackCooldown > 0</code>

<p>.

Archers will try to get as far as possible but within their</p>

<code>attackRange</code>

<p>. If any enemy unit gets too near the Archer,

the Archer will try to move away but at the same time circle its foe.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>8</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/matrix-client

# URL: https://github.com/decentraland/matrix-client

<title>GitHub - decentraland/matrix-client: ð¡  Interact with Decentraland's users, send private messages and add friends.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð¡ Interact with Decentraland's users, send private messages and add friends.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/matrix-client</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>67</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>179</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Social Client</h1>

<p>Welcome to the Social Client library. This client can be used to interact Decentraland's users, providing the ability to send private messages and add people as friends.</p>

<h2>Installation</h2>

<pre>npm install dcl-social-client</pre>

<h2>Usage</h2>

<p>You can check the entire API</p>

<p>.</p>

<h2>Behind the curtains</h2>

<p>In order to provide reliable communication between users, this client connects to a</p>

<p>server. In particular, we are using the</p>

<p>, since it provides easy ways to send messages of all kinds, raise events, and much more.</p>

<h2>Refresh the API checks.</h2>

<p>We use api-extractor to ensure not poisoning other projects with the types of the Matrix SDK. To do so, api-extractor bundles and checks that the bundle never breaks the types. The bundle is committed and should be generated every time the API changes by running</p>

<code>npm run build && npm run refresh-api</code>

<h2>Contributing</h2>

<p>Run</p>

<pre>npm install

npm run build

npm run</pre>

<h2>About</h2>

<p>ð¡ Interact with Decentraland's users, send private messages and add friends.</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>14</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-social-client

# Change to URL: https://github.com/decentraland/cli

# URL: https://github.com/decentraland/cli

<title>GitHub - decentraland/cli: ð» Decentraland command-line interface</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>ð» Decentraland command-line interface</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/cli</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>36</strong>

<strong>100</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>812</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland CLI</h1>

<p>This CLI provides tooling/commands to assist you in the</p>

<p>development process. Some of the commands will help you scaffold a new scene project, locally start and visualize the scene in order to test it and deploy it to a</p>

<p>to be incorporated in your Decentraland parcel.</p>

<h2>Usage</h2>

<p>To install the latest version of</p>

<code>dcl</code>

<p>(Decentraland CLI), run this command:</p>

<pre>npm install -g decentraland</pre>

<p>To learn what you can do with the CLI run the following command:</p>

<pre>dcl --help</pre>

<p>See more details at</p>

<p>.</p>

<h2>Documentation</h2>

<p>For details on how to use Decentraland developer tools, check our</p>

<h2>Contributing</h2>

<li>this repository to your own GitHub account and then</li>

<li>it to your local device.</li>

<li>Install dependencies with</li>

<code>npm install</code>

<li>.</li>

<li>Build the project by running</li>

<code>npm run build</code>

<li>.</li>

<li>Link the CLI with:</li>

<code>npm link</code>

<li>. The</li>

<code>dcl</code>

<li>command should now be available.</li>

<li>You can run tests with</li>

<code>npm test</code>

<strong>NOTE:</strong>

<p>you can set the environment variable</p>

<code>DEBUG=true</code>

<p>to see all debugging info</p>

<h2>Releasing</h2>

<p>Just update the version on the</p>

<code>package.json</code>

<p>file and merge to master.</p>

<h2>Configuration</h2>

<code>dcl</code>

<p>can be configured in several ways to adapt it to another environment other than the default one. To do this you have to either set environment variables or change your</p>

<code>~/.dclinfo</code>

<p>file:</p>

<th>Variable name</th>

<th>Enviroment variable</th>

<code>~/.dclinfo</code>

<td>Provider</td>

<td>RPC_URL</td>

<td>-</td>

<td>MANA Token Contract</td>

<td>MANA_TOKEN</td>

<td>MANAToken</td>

<td>LAND Registry Contract</td>

<td>LAND_REGISTRY</td>

<td>LANDRegistry</td>

<td>Estate Registry Contract</td>

<td>ESTATE_REGISTRY</td>

<td>EstateRegistry</td>

<td>Content Server URL</td>

<td>CONTENT_URL</td>

<td>contentUrl</td>

<td>Segment API key</td>

<td>SEGMENT_KEY</td>

<td>segmentKey</td>

<td>Track Analytics data</td>

<td>TRACK_STATS</td>

<td>trackStats</td>

<h2>Copyright info</h2>

<p>This repository is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>ð» Decentraland command-line interface</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>66</strong>

<h3>Watchers</h3>

<strong>33</strong>

<h3>Forks</h3>

<strong>54</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-cli-

# Change to URL: https://github.com/decentraland-scenes/Awesome-Repository

# URL: https://github.com/decentraland-scenes/Awesome-Repository

<title>GitHub - decentraland-scenes/Awesome-Repository: A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Awesome-Repository</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<pre>Add 800 add-ons repo</pre>

<code>2006371</code>

<h2>Git stats</h2>

<strong>199</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland Awesome Repository</h1>

<p>Welcome to the Decentraland Awesome repository!</p>

<p>This is a large collection of example scenes, libraries, and full tutorials meant to help you build scenes for Decentraland!</p>

<summary>Content Index</summary>

<p>If you can think of an example that is easy to understand and covers valuable topics that aren't covered here, you're encouraged to create a</p>

<strong>Pull Request</strong>

<p>and</p>

<p>!</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Key Concepts</h2>

<p>For a fully comprehensive introduction, we recommend you read the following topics from the Documentation:</p>

<p>See the</p>

<p>to find more specific information about various other.</p>

<h2>Examples</h2>

<h3>Wearables</h3>

<h4>Add-ons</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Contains all the add-ons of the Feet category: Left base, Right base, Left shoelaces, Right shoelaces, Left sole, Right sole, Left toecap, Right toecap, Left toecap sole and Right toecap sole.</td>

<td>Contains all the add-ons of the female Lower body category: Waist, Left thigh, Right thigh, Left knee, Right knee, Left leg and Right leg.</td>

<td>Contains all the add-ons of the male Lower body category: Waist, Left thigh, Right thigh, Left knee, Right knee, Left leg and Right leg.</td>

<td>Contains all the add-ons of the female Upper body category: Torso, Neck, Left arm, Right arm, Left elbow, Right elbow, Left forearm and Right forearm.</td>

<td>Contains all the add-ons of the male Upper body category: Torso, Neck, Left arm, Right arm, Left elbow, Right elbow, Left forearm and Right forearm.</td>

<td>Contains the original body parts with the skin texture of all the previous categories, this is useful if you want to build a wearable with short sleeves or with certain parts exposed such as a thigh, knee, etc.</td>

<h3>Essentials</h3>

<h4>Basics</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Use the Utils library to shift the position of a door gradually. Clicks on the door toggle it from open to closed.</td>

<td>Use the Utils library to rotate a door gradually. Clicks on the door toggle it from open to closed.</td>

<td>Use the Utils library to scale items and delay actions. Also include 3D models and sounds.</td>

<td>A simple example of each way in which players can use button events to interact with the scene. Each shape's color is activated by interacting with it in a special way.</td>

<td>Play different songs by pressing buttons on a jukebox.</td>

<td>A first encounter with Systems, Custom Components and Component Groups. Check out the</td>

<td>.)</td>

<td>Control animations on a 3D model. Toggle them on or off when clicking on the model.</td>

<td>A character walks along a fixed path, using lerp over each segment of the path. If you approach it, it will switch states to yelling at you. Check out the</td>

<td>.</td>

<td>A new bird spawns every time you click a tree. Each bird moves on its own to random positions.</td>

<td>Use planes to create a particle system that simulates smoke rising.</td>

<td>Combines animations, sound, and tiles on the floor that randomly change color to the beat.</td>

<td>Use ray casting to trace a line in space and check for intersections. Cubes change material when hit by the laser. They also change when being pointed at by the player.</td>

<td>A simple scene that shows a spritesheet animation of a robot talking. The different expressions of the robot are all stored in the same image.</td>

<td>Move a shark along the segments of a curve to swim in circles.</td>

<td>A simple AI character that randomly chooses what action to take: follow you, sit or remain idle. Tell it to sit or stand up by clicking it, or tell it to drink water by clicking its bowl.</td>

<td>Use workspaces to preview multiple adjacent scenes/portable experiences at onces and see how they interact.</td>

<h4>Game Mechanics</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Arcade cabinets containing variations of the classic Breakout game.</td>

<td>Swapping out the default avatar for another character model.</td>

<td>A beer dispenser that uses P2P messaging so that you can pour beer for yourself and friends.</td>

<td>A coconut shy built using cannon.js physics engine.</td>

<td>Coins are picked up once the player walk over them.</td>

<td>Spawning enemy spaceships from various shaped portals.</td>

<td>Click an item to hold it and drop it somewhere else in the scene.</td>

<td>Click an item to hold it in the air and carry it or toss it around the scene using physics.</td>

<td>An inflatable-punch-bag scene built using cannon.js physics engine.</td>

<td>Various items like health packs and ammo that are picked up when players walk over them.</td>

<td>Using emote events as key bindings for switching between multiple paint colors, which can be expanded for something like weapon switching.</td>

<td>Reflecting a ray off of multiple objects at arbitrary angles.</td>

<td>A puzzle game where you reflect a beam of light to a target using a series of mirrors.</td>

<td>A simple platformer that demonstrates various platform movements using code.</td>

<td>A UI window presents texts from an NPC, allowing you to use Mouse Clicks, E and F keys to advance the conversation or answer questions.</td>

<td>Using the new spawn feature to recreate a simple Portal clone.</td>

<td>Using simple planes to create a force field effect that blocks the player from reaching the access card.</td>

<td>Based on the classic Sokoban puzzle game where you push statues onto marked spots.</td>

<td>Use noise generation to imitate the kind of randomness you see in nature.</td>

<td>A rocket board that you can stand on and pilot. The board uses the cannon.js physics engine so you experience the momentum and inertia effects.</td>

<td>A simple platformer that demonstrates rotating various platforms using code.</td>

<td>Shoot at moving targets. Bullet holes appear in the spots where shots hit.</td>

<td>Shoot at moving targets. Bullet holes appear at whatever angle the bullet strikes the target.</td>

<td>Cover as much of the ground as you can with paint before calculating the area covered by it.</td>

<td>A platform that moves when the player stands on one of the switches.</td>

<td>A tin-can-alley scene built using cannon.js physics engine.</td>

<td>Example of how to create a projectile with physics and combining that with the new spawn feature to create a translocator disc.</td>

<td>A zombie will chase you around and attack you once it gets near.</td>

<td>Players wearing smart wearables are blocked from certain aspects of the scene, to prevent unfair advantages over others.</td>

<td>Use UVs to map a video to multiple surfaces, constructing a single image that adjusts as the player changes their angle.</td>

<td>Control a flock of birds so that they each take off when you walk near. They can then land back on uneven terrain.</td>

<td>Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</td>

<td>Implementation of Boids. Flock behavior of fish or birds</td>

<td>Use A* Search algorithm to help guide the NPC.</td>

<h4>Event Hosting</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A video streamed from an external URL. The repo includes instructions for various alternatives for uploading the video content.</td>

<td>Interact with the</td>

<td>contract to mint a POAP token when clicking on a booth.</td>

<td>Grant admin players special abilities, including kick other players out, and displaying UI announcements.</td>

<td>Only load certain entities when the player walks into a room or region.</td>

<td>Make players dance in a loop when they stand in certain areas of your scene.</td>

<td>Schedule the start of a video, then sync the timing of actions in the scene to the video</td>

<td>A simple scene with a green screen that can be used for photoshoots. You can change the background color too.</td>

<td>Demonstrates how to UV map a video texture onto many many planes</td>

<h4>Physics</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Kick balls around and make them bounce off each other, using the cannon.js library for physics.</td>

<td>Drive a car through piles of boxes and see them tumble down, using cannon.js for physics.</td>

<td>A bouncing ball using the box2d physics library to simulate physics in a 2D space.</td>

<h4>3D Art</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>35+ Opensource builds and assets for Decentraland by MrDhingia.</td>

<td>Improve the conversion optimization and user flow of your build by indicating key areas with these animated GLB files by DOCTORdripp.</td>

<td>Everything you need to start your wearable creation journey. Created by Nikki Fuego and Doki.</td>

<h3>Monetization and Blockchain</h3>

<h4>Crypto Libraries</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Request MANA donations to a wallet.</td>

<td>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</td>

<td>Check for token or wearable ownership to easily control access to a scene area</td>

<td>Add a button that is only activated by paying a MANA sum to a specified address.</td>

<td>Add a lever that only switches state by paying a MANA sum to a specified address.</td>

<td>Fetch the list of wearables that a player currently has on. If they have something in the eyewear category, open the door for them.</td>

<td>Display all wearables on sale on L2 and purchase them in-world. You can also configure it to only display certain collections.</td>

<h4>Displaying NFTs</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Display a 2D NFT in a picture frame.</td>

<td>Display a collection of 2D NFTs in picture frames, these swap every few seconds, taking data from a JSON file.</td>

<h4>Interact Directly With Contract</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Interact with the MANA contract to burn MANA fees collected over time by the Market place in a ceremonious way.</td>

<td>Paint a mural made from 32 x 32 pixels. You can then mint the image as a</td>

<td>NFT.</td>

<h3>Multiplayer and APIs</h3>

<h4>Hit an API</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Hit a world clock API to check the time, start a party if it's after 9PM.</td>

<td>Hit a world clock API to sync the position of a tram line, so all players see them on the same location. Each tram does a full loop every 3 minutes, basing its position on every frame relative to the time.</td>

<td>Query the Decentraland Events API for any events that are currently active to display their info. If more than one, flip through them on the display.</td>

<td>Check a weather API, then represent the weather conditions, whatever they are.</td>

<h4>Run Server-Side Validations</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Hit a server that validates that the player really is in Decentraland, in a specific parcel, with a recent time-stamp, and signed a message cryptographically with their ephemeral key.</td>

<h4>Message Bus</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>The cubes in this fountain have several animations that each set can play. When a player pushes a button, all players see the same animation.</td>

<td>A meter that goes up based on the number of claps from players applauding in the scene.</td>

<td>Play the keys of this piano by stepping on them. All players will hear the notes that are played.</td>

<h4>API as Database</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A fully scalable inventory and leveling system ready for integration into any game.</td>

<td>Upload player's final scores to a server, the best ones are displayed for all to see on a board.</td>

<td>Players that sign this guest-book upload their user name and address to the server. All signatures are fetched when opening the book.</td>

<td>Create 2D pixel art by painting tiles. Players are synced through both the messagebus and a DB in a server.</td>

<td>Create 3D voxel art by placing cubes in place. Players are synced through both the messagebus and a DB in a server.</td>

<td>Create musical patterns that are played in sequence. Players are synced through both the messagebus and a DB in a server.</td>

<h4>Plain WebSockets</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>(server code only)</td>

<td>A basic server that broadcasts all messages it receives to all other players in a room.</td>

<td>A minimal scene where clicking on cubes changes their color. The broadcast server syncs these changes to all other players in the same realm.</td>

<td>Each player runs physics client side. Websockets sends information about new forces applied to the entities. The broadcast server syncs these changes to all other players in the same realm.</td>

<td>Each player runs physics client side. Websockets sends information about the throwing of the frisbee. The frisbee is hidden when picked up by a player.</td>

<td>Each player runs physics client side. Websockets sends information about the throwing of the ball. The ball is hidden when picked up by a player.</td>

<td>Display messages being posted to Decentraland discord server in real time inside the world</td>

<h4>Colyseus</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A basic server that broadcasts all messages it receives to all other players in a room.</td>

<td>A team game for 2 players or more, where tiles switch colors when walked on. The server keeps track of the game's state, and has the final word about when the game ends and who won.</td>

<td>A game of deceit and secret identities. One player is randomly assigned as the trator, that will work against the others to sabotage the space ship.</td>

<td>Listen to OSC messages from any source, relay them to affect Decentraland scenes in real time via a Colyseus server.</td>

<h3>Full Scenes</h3>

<h4>Public Scenes</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>A fully equipeped venue ready for live events, with video streaming and POAP dispenser.</td>

<td>A 24/7 nightclub, with lights and smoke effects, arcade machines, and much more.</td>

<td>A simple generic museum to display NFT art and a few common additional features.</td>

<td>A simple generic store to sell wearables, with a few common additional features.</td>

<td>The full code used in Genesis Plaza (0,0), including all the interactive elements found there.</td>

<td>The full code used in Soho Plaza (-75,0), including all the interactive elements found there.</td>

<td>An escape room full of puzzles to solve. A</td>

<td>covers how to make it, starting from the essentials.</td>

<td>A puzzle game based on 2048, where you merge similar gems into valuable ones, till you reach the value of 2048.</td>

<td>A racing game that shows what the Infinity Engine code can do.</td>

<td>Assets and code used for the Metaverse Music Festival (MVMF) 2022 Main Stage Scene</td>

<td>Assets and code used for the Metaverse Music Festival (MVMF) 2022 Tower of Babel Scene</td>

<td>Multiplayer Snowball Fight Arena</td>

<h4>Community Modules</h4>

<th>Example</th>

<th>Thumbnail</th>

<th>Description</th>

<td>Two player game of checkers, with fully outlined peer-to-peer networking.</td>

<td>Provides easy-to-use interfaces to generate NFT (2D and 3D) displays. By simply editing the JSON files a user can quickly add displays to their scene.</td>

<td>Provides all the tools need to create your own parkour stadium. Includes: multiple platform types, collectibles, traps, checkpoint/respawn mechanics.</td>

<td>Provides all the utilities required to create card games in Decentraland. Also comes pre-packed with several card games that act as functional examples!</td>

<td>Create an interactive art exhibition with images, videos, and 3D art that rotate to face the player and lower to eye level upon approach. It can be deployed to Decentraland Worlds, so there are no size constraints aside from MB. Made by KJ of Low Poly Models.</td>

<h3>Game Jam Winners</h3>

<p>You can access the code submitted by previous game jam competitions, for those scenes that creators chose to make open source.</p>

<h2>Libraries</h2>

<p>Note that each library is only compatible with either SDK 6 or SDK 7, use libraries that match the version of the Decentraland project you're working on.</p>

<h3>SDK 7</h3>

<th>Article</th>

<th>Description</th>

<td>A very handy collection of common tasks made simple. Gradually move, rotate or scale over time. Add trigger areas, delay an action, run an event periodically, and more!. Replaces SDK6 ECS Utils</td>

<td>A collection of tools for creating Non-Player-Characters (NPCs). These are capable of having conversations with the player, and play different animations. Replaces SDK6 NPC Utils</td>

<td>A collection of tools for common UI requirements for Decentraland scenes. Replaces SDK6 UI Utils</td>

<h3>SDK 6</h3>

<th>Article</th>

<th>Description</th>

<td>A very handy collection of common tasks made simple. Gradually move, rotate or scale over time. Add trigger areas, delay an action, run an event periodically, and more!. Migrating to SDK7, see</td>

<td>UI Prefab components and functions for common game UI elements. Show health-bars, labels, counters, icons, prompt windows, NPC dialogs</td>

<td>Tools to easily create non-player characters (NPCs) that you can have a conversation with. They can ask quesions, play animations, turn around to always face the player, etc. Migrating to SDK7, see UI Toolkit Migrating to SDK7, see</td>

<td>Several functions to allow you to easily carry out operations with MANA, other currencies, NFTs, the Marketplace, sign messages or anything that involves smart contracts.</td>

<td>Several functions to allow you to easily carry out operations with MANA in a Layer 2 Ethereum network, with significantly reduced gas fees and transaction delays.</td>

<td>Several functions to easily controll player acccess to an area in the scene, based on ownership of tokens, wearables or allowlist of player IDs.</td>

<td>To use on servers that interact with Decentraland scenes, to validate that a request truly comes from a real player that is in fact in Decentraland.</td>

<td>A Scene Object Model (SOM) file lists all of the GLTF or GLB models to load into a Decentraland scene. This module contains a SceneObject data structure used to define the models and their positioning in the world, and a ModelLoader class that handles the loading and positioning at runtime.</td>

<td>Tools for generating semi-random noise based on the Perlin and Simplex algorithms. These generate random sequences of values similar to the kind of randomness seen in nature.</td>

<td>A suite of entities, debug utilities and helper functions that will speed up your decentraland SDK development.</td>

<td>A set of tools for managing the playing of videos and video playlists, together with synchronized events in the scnene like animations. It reads subtitle-like instructions with time-stamps to match timing with the video.</td>

<p>Note: To update these libraries from versions older than February 9th 2021, see the</p>

<h2>Tutorials</h2>

<h3>Video tutorials</h3>

<p>Find a full playlist of all Decentraland video tutorials here:</p>

<h3>Escape Room Video Tutorial Series</h3>

<p>This series of 5 minute videos covers a number of essential concepts, game mechanics and coding best practices. They take you through the whole process of building a full escape room game.</p>

<p>Tip: The videos are presented in the above link together with written accompanying content, including all the code in case you want to copy and paste parts of it.</p>

<p>The full code from the tutorial is available in this</p>

<p>.</p>

<h3>Multiplayer and APIs</h3>

<th>Article</th>

<th>Description</th>

<td>Send requests to an API to fetch data.</td>

<td>Launch your own server on Firebase to handle HTTP requests from your scene and store data in a DB.</td>

<td>Build a WebSockets server to handle real-time updates.</td>

<h3>Other</h3>

<th>Article</th>

<th>Description</th>

<td>Tips and tricks that went into the creation of Genesis Plaza, regarding best practices and optimization.</td>

<td>Guidance about several features that were first introduced with Genesis Plaza, like video and audio streaming, teleports, external links, etc.</td>

<td>Tips and tricks that went into the creation of Salmonomicon (-50,0). Mostly related to UI and ray casting.</td>

<h3>Guest Posts</h3>

<th>Article</th>

<th>Description</th>

<td>A walkthrough by Surz about how to create a UI for your scene.</td>

<td>A walkthrough by Interweaver about how to pick up objects and place them in position, snapping to a grid.</td>

<td>A walkthrough by Brent Greyling about creating an animated fireplace using 2D sprite images.</td>

<td>Part 1 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>Part 2 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>Part 3 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>Part 4 in a series by Baus that goes from scene building essentials to using smart contracts.</td>

<td>A walkthrough by Holodot about how to place NFT 2D art in a scene.</td>

<h3>3D Modeling for Decentraland</h3>

<th>Video</th>

<th>Description</th>

<td>Add a collider to an existing 3D model, to prevent players from walking through it.</td>

<td>Download a freely licenced 3D model and apply free animations that you can download from Mixamo to it.</td>

<td>Download a freely licenced 3D model, import it into Blender and then create an</td>

<em>armature</em>

<td>to manually create your own</td>

<em>animations</em>

<td>for it.</td>

<h3>DevOps</h3>

<th>Video</th>

<th>Description</th>

<td>How to use git actions to deploy a scene from a branch.</td>

<h2>Copyright info</h2>

<p>All of these scenes are open source, protected with a standard Apache 2 licence. This licence states that this content can be used freely, even commercially, as long as you acknowledge the author. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>294</strong>

<h3>Watchers</h3>

<strong>27</strong>

<h3>Forks</h3>

<strong>58</strong>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes

# URL: https://github.com/decentraland-scenes

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h1>decentraland-scenes</h1>

<h2>Pinned</h2>

<tool-tip>Awesome-Repository</tool-tip>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<h3>Repositories</h3>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<h4>People</h4>

<p>This organization has no public members. You must be a member to see whoâs a part of this organization.</p>

<h4>Top languages</h4>

<h4>Most used topics</h4>

<p>Loadingâ¦</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories

# URL: https://github.com/orgs/decentraland-scenes/repositories

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>A fully fledged game, based on the popular game 2048.</p>

<p>port of</p>

<p>colyseus-sdk7</p>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<p>Basic 101 Avocado Tutorial</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/dcl-npc-toolkit

# URL: https://github.com/decentraland-scenes/dcl-npc-toolkit

<title>GitHub - decentraland-scenes/dcl-npc-toolkit</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-npc-toolkit</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>13</strong>

<strong>16</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<code>963dc76</code>

<h2>Git stats</h2>

<strong>94</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NPC-library</h1>

<p>A collection of tools for creating Non-Player-Characters (NPCs). These are capable of having conversations with the player, and play different animations.</p>

<p>Capabilities of the NPCs in this library:</p>

<p>Start a conversation when clicked or when walking near</p>

<p>Trigger any action when clicked or when walking near</p>

<p>Trigger any action when the player walks away</p>

<p>Turn around slowly to always face the player</p>

<p>Play an animation in the NPC 3d model, optionally returning to loop the idle animation afterwards</p>

<p>The dialog messages can also require that the player chooses options, and any action can be triggered when the player picks an option or advances past a message.</p>

<h2>Install the library</h2>

<h2>Via the Decentraland Editor</h2>

<p>Follow the steps in</p>

<p>with Visual Studio Code open on your project folder.</p>

<p>Open the Decentraland Editor tab. Note that the bottom section lists all of your projectâs currently installed dependencies.</p>

<p>Click the + icon on the header of the Dependencies view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write Â´dcl-npc-toolkitÂ´ and press Enter.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>index.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, call the</li>

<code>create</code>

<li>function passing it a</li>

<code>TransformType</code>

<li>and a</li>

<code>NPCData</code>

<li>object. The</li>

<code>NPCData</code>

<li>object requires a minimum of a</li>

<code>NPCType</code>

<li>and a function to trigger when the NPC is activated:</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<li>Write a dialog script for your character, preferably on a separate file, making it of type</li>

<code>Dialog[]</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Via the CLI</h2>

<li>Install the library as an npm bundle. Run this command in your scene's project folder:</li>

<li>Install the dependent sdk utils library as an npm bundle. Run this command in your scene's project folder:</li>

<code>npm i @dcl-sdk/utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>index.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, call the</li>

<code>create</code>

<li>function passing it a</li>

<code>TransformType</code>

<li>and a</li>

<code>NPCData</code>

<li>object. The</li>

<code>NPCData</code>

<li>object requires a minimum of a</li>

<code>NPCType</code>

<li>and a function to trigger when the NPC is activated:</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<li>Write a dialog script for your character, preferably on a separate file, making it of type</li>

<code>Dialog[]</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>NPC Default Behavior</h2>

<p>NPCs at the very least must have:</p>

<code>position</code>

<p>: (</p>

<em>TransformType</em>

<p>) Must include position, rotation and scale.</p>

<code>NPCData</code>

<p>: (</p>

<em>Data Object</em>

<p>) with a minimum of two variables</p>

<code>type</code>

<p>: (</p>

<em>NPCType</em>

<p>) you have the choice to use a custom GLB object or an</p>

<code>AvatarShape</code>

<p>for your npc</p>

<code>NPCType.CUSTOM</code>

<code>NPCType.AVATAR</code>

<code>onActivate()</code>

<p>: (</p>

<em>()=> void</em>

<p>) A function to call when the NPC is activated.</p>

<em>if you decide to use a</em>

<code>NPCType.CUSTOM</code>

<em>GLB model for your avatar, you must pass in a model object inside the</em>

<code>NPCData</code>

<code>model</code>

<li>: (</li>

<em>string</em>

<li>) The path to a 3D model</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>With this default configuration, the NPC behaves in the following way:</p>

<p>The</p>

<code>onActivate()</code>

<p>function is called when pressing E on the NPC, and when the player walks near at a distance of 6 meters.</p>

<p>Once activated, there's a cooldown period of 5 seconds, that prevents the NPC to be activated again.</p>

<p>After walking away from the NPC, if its dialog window was open it will be closed, and if the NPC was rotating to follow the player it will stop.</p>

<p>If the NPC already has an open dialog window, clicking on the NPC won't do anything, to prevent accidentally clicking on it while flipping through the conversation.</p>

<p>If the NPC has an animation named 'Idle', it will play it in a loop. If other non-looping animations are played, it will return to looping the 'Idle' animation after the indicated duration.</p>

<p>Many of these behaviors can be overridden or tweaked with the exposed properties.</p>

<h2>SDK7 UI</h2>

<p>With sdk7, there are new ways to implement similar features from sdk6, one of them being the way 2D UI objects get created. To add the NPC dialogs to your sdk7 2D UI:</p>

<p>create a variable to hold</p>

<em>all</em>

<p>of your 2D UI objects</p>

<p>import the NPC UI from the library and add the React object to your scene UI tree</p>

<p>create a function to be called once to render all of your 2D UI objects</p>

<pre>UiEntity></pre>

<p>Note: The UI drawn by this library library requires fetching images from an external URL. For the scene to allow you to do this, you must include the</p>

<code>ALLOW_MEDIA_HOSTNAMES</code>

<p>scene permission and add</p>

<code>decentraland.org</code>

<p>to the list of allowed domains in your</p>

<code>scene.json</code>

<p>file. Learn more about</p>

<p>.</p>

<pre>: [</pre>

<pre>],</pre>

<pre>: [</pre>

<pre>],</pre>

<h2>NPC Additional Properties</h2>

<p>To configure other properties of an NPC, add a fourth argument as an</p>

<code>NPCData</code>

<p>object. This object can have the following optional properties:</p>

<code>idleAnim</code>

<p>:</p>

<em>(string)</em>

<p>Name of the idle animation in the model. This animation is always looped. After playing a non-looping animation it returns to looping this one.</p>

<code>faceUser</code>

<p>:</p>

<em>(boolean)</em>

<p>Set if the NPC rotates to face the user while active.</p>

<code>dialogSound</code>

<p>:</p>

<em>(string)</em>

<p>Path to sound file to play once for every entry shown on the UI. If the dialog entry being shown has an</p>

<code>audio</code>

<p>field, the NPC will play the file referenced by the</p>

<code>audio</code>

<p>field instead.</p>

<code>coolDownDuration</code>

<p>:</p>

<em>(number)</em>

<p>Change the cooldown period for activating the NPC again. The number is in seconds.</p>

<code>hoverText</code>

<p>:</p>

<em>(string)</em>

<p>Set the UI hover feedback when pointing the cursor at the NPC.</p>

<em>TALK</em>

<p>by default.</p>

<code>onlyClickTrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by walking near. Just by clicking on it or calling its</p>

<code>activate()</code>

<p>function.</p>

<code>onlyETrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by walking near. Just by pressing the E key on it or calling its</p>

<code>activate()</code>

<p>function.</p>

<code>onlyExternalTrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by clicking, pressing E, or walking near. Just by calling its</p>

<code>activate()</code>

<p>function.</p>

<code>reactDistance</code>

<p>:</p>

<em>(number)</em>

<p>Radius in meters for the player to activate the NPC or trigger the</p>

<code>onWalkAway()</code>

<p>function when leaving the radius.</p>

<code>continueOnWalkAway</code>

<p>:</p>

<em>(boolean)</em>

<p>If true,when the player walks out of the</p>

<code>reactDistance</code>

<p>radius, the dialog window stays open and the NPC keeps turning to face the player (if applicable). It doesn't affect the triggering of the</p>

<code>onWalkAway()</code>

<p>function.</p>

<code>onWalkAway</code>

<p>: (</p>

<em>()=> void</em>

<p>) Function to call every time the player walks out of the</p>

<code>reactDistance</code>

<p>radius.</p>

<code>walkingAnim</code>

<p>:</p>

<em>(string)</em>

<p>Name of the walking animation on the model. This animation is looped when calling the</p>

<code>followPath()</code>

<p>function.</p>

<code>walkingSpeed</code>

<p>:</p>

<em>(number)</em>

<p>Speed of the NPC when walking. By default</p>

<em>2</em>

<p>.</p>

<code>path</code>

<p>:</p>

<em>(Vector3)</em>

<p>Default path to walk. If a value is provided for this field on NPC initialization, the NPC will walk over this path in loop from the start.</p>

<code>bubbleHeight</code>

<p>:</p>

<em>(number)</em>

<p>The height at which to display the speech bubble above the head of the NPC.</p>

<code>textBubble</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, NPC starts with a speech bubble object ready to be accessed from the start. Otherwise, they text bubble is only built on the first call to</p>

<code>talkBubble()</code>

<p>on the NPC.</p>

<code>noUI</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, no UI object is built for UI dialogs for this NPC. This may help optimize the scene if this feature is not used.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Get NPC Data</h2>

<p>There are several properties you can check on an NPC to know what its current state is:</p>

<code>.state</code>

<p>: An enum value of type</p>

<code>NPCState</code>

<p>. Supported values are</p>

<code>NPCState.STANDING</code>

<p>(default),</p>

<code>NPCState.TALKING</code>

<p>, and</p>

<code>NPCState.FOLLOWPATH</code>

<p>.</p>

<code>TALKING</code>

<p>is applied when the dialog window is opened, and set back to</p>

<code>STANDING</code>

<p>when the window is closed.</p>

<code>FOLLOWPATH</code>

<p>is applied when the NPC starts walking, and set back to</p>

<code>STANDING</code>

<p>when the NPC finishes its path or is stopped.</p>

<code>.introduced</code>

<p>: Boolean, false by default. Set to true if the NPC has spoken to the player at least once in this session.</p>

<code>.visible</code>

<p>: Returns a Boolean, false by default. True if the dialog window for this NPC is currently open.</p>

<code>.inCooldown</code>

<p>: Boolean, false by default. True if the NPC was recently activated and it's now in cooldown. The NPC won't respond to being activated till</p>

<code>inCooldown</code>

<p>is false.</p>

<p>TIP: If you want to force an activation of the NPC in spite of the</p>

<code>inCooldown</code>

<p>value, you can force this value to true before activating.</p>

<h2>NPC Callable Actions</h2>

<p>An NPC object has several callable functions that come with the class:</p>

<h3>Talk</h3>

<p>To start a conversation with the NPC using the dialog UI, call the</p>

<code>talk()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>script</code>

<li>:</li>

<em>(Dialog[])</em>

<li>This array contains the information to manage the conversation, including events that may be triggered, options to choose, etc.</li>

<p>It can also take the following optional parameters:</p>

<code>startIndex</code>

<p>:</p>

<em>(number | string)</em>

<p>The</p>

<em>Dialog</em>

<p>object from the</p>

<code>script</code>

<p>array to open first. By default this is</p>

<em>0</em>

<p>, the first element of the array. Pass a number to open the entry on a given array position, or pass a string to open the entry with a</p>

<code>name</code>

<p>property matching that string.</p>

<code>duration</code>

<p>:</p>

<em>(number)</em>

<p>Number of seconds to wait before closing the dialog window. If no value is set, the window is kept open till the player reaches the end of the conversation or something else closes it.</p>

<p>Learn how to build a script object for NPCs in a section below.</p>

<h3>Play Animations</h3>

<p>By default, the NPC will loop an animation named 'Idle', or with a name passed in the</p>

<code>idleAnim</code>

<p>parameter.</p>

<p>Make the NPC play another animation by calling the</p>

<code>playAnimation()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>animationName</code>

<li>:</li>

<em>(string)</em>

<li>The name of the animation to play.</li>

<p>It can also take the following optional parameters:</p>

<code>noLoop</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, plays the animation just once. Otherwise, the animation is looped.</p>

<code>duration</code>

<p>:</p>

<em>(number)</em>

<p>Specifies the duration in seconds of the animation. When finished, it returns to playing the idle animation.</p>

<p>Note: If</p>

<code>noLoop</code>

<p>is true but no</p>

<code>duration</code>

<p>is set, the model will stay still after playing the animation instead of returning to the idle animation.</p>

<h3>Change idle animation</h3>

<p>The NPC's idle animation is looped by default whenever the NPC is not playing any other animations. In some cases you may want to have different idle animations depending on the circumstances, like while in a conversation, or if the NPC changes its general attitude after some event.</p>

<p>You set the NPC's idle animation when creating the NPC, using the</p>

<code>idleAnim</code>

<p>field. To change this animation at some later time, use</p>

<code>changeIdleAnim()</code>

<p>.</p>

<p>The</p>

<code>changeIdleAnim()</code>

<p>function takes two arguments:</p>

<code>animation</code>

<p>: The name of the new animation to set as the idle animation</p>

<code>play</code>

<p>: Optionally pass this value as</p>

<em>true</em>

<p>if you want this new animation to start playing right away.</p>

<h3>Activate</h3>

<p>The</p>

<code>activate()</code>

<p>function can be used to trigger the</p>

<code>onActivate()</code>

<p>function, as an alternative to pressing E or walking near.</p>

<p>The</p>

<code>activate()</code>

<p>function is callable even when in cool down period, and it doesn't start a new cool down period.</p>

<h3>Stop Walking</h3>

<p>If the NPC is currently walking, call</p>

<code>stopWalking()</code>

<p>to stop it moving and return to playing its idle animation.</p>

<code>stopWalking()</code>

<p>can be called with no parameters, or it can also be called with:</p>

<code>duration</code>

<li>: Seconds to wait before starting to walk again. If not provided, the NPC will stop walking indefinitely.</li>

<p>Note: If the NPC is has its dialog window open when the timer for the</p>

<code>duration</code>

<p>ends, the NPC will not return to walking.</p>

<p>To make the NPC play a different animation from idle when paused, call</p>

<code>playAnimation()</code>

<p>after</p>

<code>stopWalking()</code>

<p>.</p>

<h3>Follow Path</h3>

<p>Make an NPC walk following a path of</p>

<code>Vector3</code>

<p>points by calling</p>

<code>followPath()</code>

<p>. While walking, the NPC will play the</p>

<code>walkingAnim</code>

<p>if one was set when defining the NPC. The path can be taken once or on a loop.</p>

<code>followPath()</code>

<p>can be called with no parameters if a</p>

<code>path</code>

<p>was already provided in the NPC's initialization or in a previous calling of</p>

<code>followPath()</code>

<p>. If the NPC was previously in the middle of walking a path and was interrupted, calling</p>

<code>followPath()</code>

<p>again with no arguments will return the NPC to that path.</p>

<p>Note: If the NPC is initialized with a</p>

<code>path</code>

<p>value, it will start out walking that path in a loop, no need to run</p>

<code>followPath()</code>

<p>.</p>

<code>followPath()</code>

<p>has a single optional parameter of type</p>

<code>FollowPathData</code>

<p>. This object may have the following optional fields:</p>

<p>path: Array of</p>

<code>Vector3</code>

<p>positions to walk over.</p>

<p>speed: Speed to move at while walking this path. If no</p>

<code>speed</code>

<p>or</p>

<code>totalDuration</code>

<p>is provided, it uses the NPC's</p>

<code>walkingSpeed</code>

<p>, which is</p>

<em>2</em>

<p>by default.</p>

<p>totalDuration: The duration in</p>

<em>seconds</em>

<p>that the whole path should take. The NPC will move at the constant speed required to finish in that time. This value overrides that of the</p>

<em>speed</em>

<p>.</p>

<p>loop:</p>

<em>boolean</em>

<p>If true, the NPC walks in circles over the provided set of points in the path.</p>

<em>false</em>

<p>by default, unless the NPC is initiated with a</p>

<code>path</code>

<p>, in which case it starts as</p>

<em>true</em>

<p>.</p>

<p>curve:</p>

<em>boolean</em>

<p>If true, the path is traced a single smooth curve that passes over each of the indicated points. The curve is made out of straight-line segments, the path is stored with 4 times as many points as originally defined.</p>

<em>false</em>

<p>by default.</p>

<p>startingPoint: Index position for what point to start from on the path.</p>

<em>0</em>

<p>by default.</p>

<p>onFinishCallback: Function to call when the NPC finished walking over all the points on the path. This is only called when</p>

<code>loop</code>

<p>is</p>

<em>false</em>

<p>.</p>

<p>onReachedPointCallback: Function to call once every time the NPC reaches a point in the path.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>NPC Walking Speed</h4>

<p>The following list of factors are used to determine speed in hierarchical order:</p>

<code>totalDuration</code>

<p>parameter set when calling</p>

<code>followPath()</code>

<p>is used over the total distance travelled over the path.</p>

<code>speed</code>

<p>parameter set when calling</p>

<code>followPath()</code>

<code>walkingSpeed</code>

<p>parameter set when initializing NPC</p>

<p>Default value</p>

<em>2</em>

<p>.</p>

<h4>Joining the path</h4>

<p>If the NPC's current position when calling</p>

<code>followPath()</code>

<p>doesn't match the first position in the</p>

<code>path</code>

<p>array (or the one that matches the</p>

<code>startingPoint</code>

<p>value), the current position is added to the</p>

<code>path</code>

<p>array. The NPC will start by walking from its current position to the first point provided in the path.</p>

<p>The</p>

<code>path</code>

<p>can be a single point, and the NPC will then walk a from its current position to that point.</p>

<p>Note: If the speed of the NPC is determined by a</p>

<code>totalDuration</code>

<p>value, the segment that the NPC walks to join into the path is counted as part of the full path. If this segment is long, it will increase the NPC walking speed so that the full path lasts as what's indicated by the</p>

<code>totalDuration</code>

<p>.</p>

<p>In this example the NPC is far away from the start of the path. It will first walk from</p>

<em>10, 0, 10</em>

<p>to</p>

<em>2, 0, 2</em>

<p>and then continue the path.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Example Interrupting the NPC</h4>

<p>In the following example, an NPC starts roaming walking over a path, pausing on every point to call out for its lost kitten. If the player activates the NPC (by pressing E on it or walking near it) the NPC stops, and turns to face the player and talk. When the conversation is over, the NPC returns to walking its path from where it left off.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>End interaction</h3>

<p>The</p>

<code>endInteraction()</code>

<p>function can be used to abruptly end interactions with the NPC.</p>

<p>If applicable, it closes the dialog UI, hides speech bubbles, and makes the NPC stop rotating to face the player.</p>

<p>As an alternative, you can call the</p>

<code>handleWalkAway()</code>

<p>function, which has the same effects (as long as</p>

<code>continueOnWalkAway</code>

<p>isn't set to true), but also triggers the</p>

<code>onWalkAway()</code>

<p>function.</p>

<h2>NPC Dialog Window</h2>

<p>You can display an interactive dialog window to simulate a conversation with a non-player character (NPC).</p>

<p>The conversation is based on a script in JSON format. The script can include questions that can take you forward or backward, or end the conversation.</p>

<h3>The NPC script</h3>

<p>Each entry on the script must include at least a</p>

<code>text</code>

<p>field, but can include several more fields to further customize it.</p>

<p>Below is a minimal dialog.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The player advances through each entry by clicking the mouse button. Once the last is reached, clicking again closes the window, as it's marked as</p>

<code>isEndOfDialog</code>

<p>.</p>

<p>The script must adhere to the following schema:</p>

<pre>:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<p>Note: A</p>

<code>Dialog</code>

<p>object can be used as an input both for the</p>

<code>talk()</code>

<p>function (that is displayed in the UI), and the</p>

<code>talkBubble()</code>

<p>function (that is displayed in a floating bubble over the NPC). Properties marked with</p>

<code>*</code>

<p>are only applicable to UI dialogs.</p>

<p>You can set the following fields to change the appearance of a dialog:</p>

<code>text</code>

<p>: The dialog text</p>

<code>fontSize</code>

<p>: Size of the text</p>

<p>Other fields:</p>

<code>buttons *</code>

<p>: An array of buttons to use in a question entry, covered in the next section.</p>

<code>audio</code>

<p>: String with the path to an audio file to play once when this dialog is shown on the UI.</p>

<code>typeSpeed</code>

<p>: The text appears one character at a time, simulating typing. Players can click to skip the animation. Tune the speed of this typing (30 by default) to go slower or faster. Set to</p>

<em>-1</em>

<p>to skip the animation.</p>

<h4>Questions and conversation trees</h4>

<p>The script can include questions that prompt the player to pick between two or up to four options. These questions can branch the conversation out and trigger other actions in the scene.</p>

<p>Note: Questions are only used by UI dialogs. If used in a speech bubble, questions will be displayed as regular entries with no buttons or options.</p>

<p>To make an entry a question, set the</p>

<code>isQuestion</code>

<p>field to</p>

<em>true</em>

<p>. This displays a set of buttons rather than the click icon. It also disables the click to advance to the next entry.</p>

<p>The</p>

<code>buttons</code>

<p>property of an entry contains an array of</p>

<code>ButtonData</code>

<p>objects, each one of these defines one button.</p>

<p>When on a question entry, you must provide at least the following for each button:</p>

<code>label</code>

<p>:</p>

<em>(string)</em>

<p>The label to show on the button.</p>

<code>goToDialog</code>

<p>:</p>

<em>(number | string)</em>

<p>The index or name of the next dialog entry to display when activated.</p>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>You can also set the following:</p>

<code>triggeredActions</code>

<p>:</p>

<em>( () => void )</em>

<p>An additional function to run whenever the button is activated</p>

<code>fontSize</code>

<p>:</p>

<em>(number)</em>

<p>Font size of the text</p>

<code>offsetX</code>

<p>:</p>

<em>(number)</em>

<p>Offset of the label on the X axis, relative to its normal position.</p>

<code>offsetY</code>

<p>:</p>

<em>(number)</em>

<p>Offset of the label on the Y axis, relative to its normal position.</p>

<p>All buttons can be clicked to activate them. Additionally, the first button in the array can be activated by pressing the</p>

<em>E</em>

<p>key. The second button in the array can be activated by pressing the</p>

<em>F</em>

<p>key,</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Triggering functions from the dialog</h4>

<p>You can run functions that may affect any other part of your scene. These functions get triggered when the player interacts with the dialog window, or when the NPC displays speech bubbles.</p>

<code>triggeredByNext</code>

<p>: Is executed when the player advances to the next dialog on a non-question dialog. The function also gets called if the dialog is the end of the conversation. It also gets called when a speech bubble advances to the next entry.</p>

<code>triggeredActions</code>

<p>: This property is associated to a button and is executed on a question dialog if the player activates the corresponding button. You can have up to 4 different buttons per entry, each with its own actions.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>No-NPC Dialogs</h2>

<p>You can open a Dialog window that isn't associated with any</p>

<code>NPC</code>

<p>object in the scene. The</p>

<code>openDialogWindow()</code>

<p>function has all the same functionality as calling the</p>

<code>talk()</code>

<p>function on an NPC, but may be more practical in scenarios where a character isn't physically there, or where the conversation isn't with a particular character.</p>

<h3>The Dialog window</h3>

<p>To create a new dialog window, call</p>

<code>createDialogWindow()</code>

<p>and store as a variable. This will instantiate the window but keep it hidden until you open it.</p>

<p>When instantiating a new blank dialog, you can pass the following optional parameters:</p>

<code>defaultPortrait</code>

<p>: Sets a default portrait image to use on the left of all dialogs that don't specify an image. If a dialog has no portrait and no default is provided, no image is shown on the left. This field expects a</p>

<code>Portrait</code>

<p>object, that may include the following fields: -</p>

<code>path</code>

<p>: Path to the image file -</p>

<code>xOffset</code>

<p>: Offset on X, relative to the normal position of the portrait. -</p>

<code>yOffset</code>

<p>: Offset on Y, relative to the normal position of the portrait. -</p>

<code>section</code>

<p>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</p>

<code>ImageSection</code>

<p>object, specifying</p>

<code>sourceWidth</code>

<p>and</p>

<code>sourceHeight</code>

<p>, and optionally also</p>

<code>sourceLeft</code>

<p>and</p>

<code>sourceTop</code>

<p>.</p>

<code>useDarkTheme</code>

<p>: Switch the style of the window to the dark theme.</p>

<code>sound</code>

<p>: Path to a sound file that will be played once for every dialog entry shown, as long as the dialog entry doesn't have its own</p>

<code>audio</code>

<p>property.</p>

<p>Once you have created a dialog window, you can open a dialog window with the</p>

<code>openDialogWindow()</code>

<p>function.</p>

<p>When calling this function, you must specify:</p>

<code>NPCScript</code>

<li>: A JSON object composed of an array of</li>

<code>Dialog</code>

<li>objects, that includes all the dialog tree.</li>

<p>A second optional parameter is also available:</p>

<code>textId</code>

<li>: The index or</li>

<code>name</code>

<li>property of the entry to show first from the script. The first entry is 0.</li>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>Close a dialog window at any time by calling the</p>

<code>closeDialogWindow()</code>

<p>function.</p>

<p>For details on how to construct the dialog tree, see the sections above. The required</p>

<code>NPCScript</code>

<p>by the</p>

<code>DialogWindow</code>

<p>has exactly the same characteristics as the one used on the</p>

<code>NPC</code>

<p>object when calling the</p>

<code>talk()</code>

<p>function.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<p>Run</p>

<code>npm run build</code>

<p>for the internal files of the library to be generated</p>

<p>Run</p>

<code>npm run link</code>

<p>on this repository</p>

<p>On a new Decentraland scene, import this library as you normally would and include the tests you need</p>

<p>On the scene directory, run</p>

<code>npm link dcl-npc-toolkit</code>

<p>Note: When done testing, run</p>

<code>npm unlink</code>

<p>on both folders, so that the scene stops using the local version of the library.</p>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to automatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/dcl-ui-toolkit

# URL: https://github.com/decentraland-scenes/dcl-ui-toolkit

<title>GitHub - decentraland-scenes/dcl-ui-toolkit</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-ui-toolkit</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>1</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<button>â¦</button>

<pre>This reverts commit</pre>

<tt>3b55322</tt>

<pre>.</pre>

<code>106cc1e</code>

<h2>Git stats</h2>

<strong>19</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentraland UI utils library</h1>

<p>A collection of tools for common UI requirements for Decentraland scenes.</p>

<h2>Install the library</h2>

<h2>Via the Decentraland Editor</h2>

<p>To use any of the helpers provided by the utils library, follow the steps in</p>

<p>with Visual Studio Code open on your project folder.</p>

<p>Open the Decentraland Editor tab. Note that the bottom section lists all of your projectâs currently installed dependencies.</p>

<p>Click the + icon on the header of the Dependencies view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write</p>

<code>dcl-ui-toolkit</code>

<p>and press Enter.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>index.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<p>Add following to your scene intialization code:</p>

<p>Add the following permissions for fetching media on the 'scene.json' file. See</p>

<p>for more details:</p>

<pre>: [</pre>

<pre>],</pre>

<pre>: [</pre>

<pre>],</pre>

<h2>Via the CLI</h2>

<p>To use any of the helpers provided by the utils library</p>

<p>Install it as an</p>

<code>npm</code>

<p>package. Run this command in your scene's project folder:</p>

<code>npm install dcl-ui-toolkit</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<p>Add following to your scene intialization code:</p>

<p>Add the following permissions for fetching media on the 'scene.json' file. See</p>

<p>for more details:</p>

<pre>: [</pre>

<pre>],</pre>

<pre>: [</pre>

<pre>],</pre>

<h2>Text Announcement</h2>

<p>To display a text announcement on the center of the screen for a specified amount of time, use the</p>

<code>Announcement</code>

<p>class.</p>

<pre>:</pre>

<pre>:</pre>

<p>When instancing, you can pass the following parameters:</p>

<code>value: string</code>

<li>: String to display.</li>

<code>duration: number = 3</code>

<li>: Time to keep the text visible (in seconds). If set to -1, the announcement will remain on screen till it's hidden.</li>

<code>color: Color4 = Color4.Yellow()</code>

<li>*: Text color, as a</li>

<code>Color4</code>

<li>.</li>

<code>size: number = 50</code>

<li>*: Font size.</li>

<code>xOffset: number = 0</code>

<li>*: Offset from the center on the X axis.</li>

<code>yOffset: number = 0</code>

<li>*: Offset from the center on the Y axis.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the announcement starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created announcement.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>After creating,</p>

<code>Announcement</code>

<p>has methods to control visibility:</p>

<code>hide(): void</code>

<li>: Hides the announcement.</li>

<code>show(): void</code>

<li>: Shows the announcement (that will be automatically hidden after the specified</li>

<code>duration</code>

<li>).</li>

<pre>:</pre>

<pre>:</pre>

<p>Announcement components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>text component.</li>

<h2>Counter</h2>

<p>To display a number on a corner of the screen that can be easily updated, you can create a</p>

<code>UICounter</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new counter you can pass the following parameters:</p>

<code>value: number</code>

<li>: Numeric starting value.</li>

<code>xOffset: number = -40</code>

<li>*: Offset on X away from the bottom-right corner.</li>

<code>yOffset: number = 70</code>

<li>*: Offset on Y away from the bottom-right corner.</li>

<code>color: Color4 = Color4.White()</code>

<li>*: Text color.</li>

<code>size: number = 25</code>

<li>*: Text size.</li>

<code>fixedDigits: number = 0</code>

<li>*: Number of digits to use,</li>

<code>0</code>

<li>allows any digits number.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the counter starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created counter.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>UICounter</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read(): number</code>

<li>: Returns the current value of the counter.</li>

<code>increase(amount?: number): void</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 1.</li>

<code>decrease(amount?: number): void</code>

<li>: Decreases the number by a given amount. If no parameters are passed, it lowers the value by 1.</li>

<code>set(amount: number): void</code>

<li>: Sets the number to a given amount, no matter what the previous value was.</li>

<code>show(): void</code>

<li>: Shows the counter.</li>

<code>hide(): void</code>

<li>: Hides the counter.</li>

<pre>:</pre>

<pre>:</pre>

<p>Counter components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>text component.</li>

<h2>Corner Labels</h2>

<p>To display text on the bottom-left corner of the screen, you can create a</p>

<code>CornerLabel</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new corner label you can pass the following parameters:</p>

<code>value: string | number</code>

<li>- Text to show.</li>

<code>xOffset: number = -70</code>

<li>*: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset: number = 40</code>

<li>*: Offset on Y, relative to the bottom-right corner.</li>

<code>color: Color4 = Color4.White()</code>

<li>*: Text color.</li>

<code>size: number = 25</code>

<li>*: Text size.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the label starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created label.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>After the</p>

<code>CornerLabel</code>

<p>is being instanced, you can call this methods:</p>

<code>hide(): void</code>

<li>: Hides the label.</li>

<code>show(): void</code>

<li>: Shows the label.</li>

<pre>:</pre>

<pre>:</pre>

<p>Label components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>text component.</li>

<h2>Bar</h2>

<p>To display a bar that can be updated to increase or shorten in length, similar to a typical health bar in games, you can create a</p>

<code>UIBar</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new bar you can pass the following parameters:</p>

<code>value: number</code>

<li>: Starting value of the bar, from 0 to 1. With 1 the bar is full, with 0 it's empty.</li>

<code>xOffset: number = -30</code>

<li>*: Offset on X away from the bottom-right corner.</li>

<code>yOffset: number = 60</code>

<li>*: Offset on Y away from the bottom-right corner.</li>

<code>color: Color4: Color4.Red()</code>

<li>*: Color of the bar filling.</li>

<code>style: BarStyles = BarStyles.ROUNDSILVER</code>

<li>*: Margin style of the bar, from a list of different predetermined options in different colors and shapes. It takes a value from the</li>

<code>BarStyles</code>

<li>enum.</li>

<code>scale: number = 1</code>

<li>*: Multiplier to alter the size of the bar proportionally. A scale of 1 = 128 x 32 pixels.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the bar starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created progress bar.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>UIBar</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>read(): number</code>

<li>: Returns the current value of the counter.</li>

<code>increase(amount?: number): void</code>

<li>: Increases the number by a given amount. If no parameters are passed, it raises the value by 0.1.</li>

<code>decrease(amount?: number): void</code>

<li>: Decreases the number by a given amount. If no parameters are passed, it lowers the value by 0.1.</li>

<code>set(value: amount): void</code>

<li>: Sets the bar to a given value, no matter what the previous value was.</li>

<code>hide(): void</code>

<li>: Hides the bar.</li>

<code>show(): void</code>

<li>: Shows the bar.</li>

<pre>:</pre>

<pre>:</pre>

<p>Progress bar components that you can interact with:</p>

<code>barElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>wrapper component.</li>

<code>backgroundElement: EntityPropTypes</code>

<li>: Props for</li>

<code>UiEntity</code>

<li>component that is responsible for the background.</li>

<code>processElement: EntityPropTypes</code>

<li>: Props for</li>

<code>UiEntity</code>

<li>component that is responsible for displaying the progress.</li>

<h2>Corner Icons</h2>

<p>To display an icon of on the bottom-left corner of the screen you can create one of the following:</p>

<code>Icon</code>

<li>: generic component that accepts</li>

<code>size</code>

<li>parameter.</li>

<code>SmallIcon</code>

<li>: by default 32x32 pixels in size.</li>

<code>MediumIcon</code>

<li>: by default 64x64 pixels in size.</li>

<code>LargeIcon</code>

<li>: by default 128x128 pixels in size.</li>

<pre>:</pre>

<p>When instancing a new icon you can pass the following parameters:</p>

<code>image: string</code>

<li>*: Path to the image file.</li>

<code>xOffset: number = -30</code>

<li>*: Offset on X, relative to the bottom-right corner.</li>

<code>yOffset: number = -50</code>

<li>*: Offset on Y, relative to the bottom-right corner.</li>

<code>width?: number</code>

<li>*: Image width on screen in pixels. Default value depends on icon's type (</li>

<code>32</code>

<li>for</li>

<code>SmallIcon</code>

<li>,</li>

<code>64</code>

<li>for</li>

<code>MediumIcon</code>

<li>and</li>

<code>128</code>

<li>for</li>

<code>LargeIcon</code>

<li>).</li>

<code>height?: number</code>

<li>*: Image height on screen in pixels. Default value depends on icon's type (</li>

<code>32</code>

<li>for</li>

<code>SmallIcon</code>

<li>,</li>

<code>64</code>

<li>for</li>

<code>MediumIcon</code>

<li>and</li>

<code>128</code>

<li>for</li>

<code>LargeIcon</code>

<li>).</li>

<code>size: 'small' | 'medium' | 'large'</code>

<li>: Icon sizes.</li>

<strong>Available only for</strong>

<code>Icon</code>

<li>.</li>

<code>section?: ImageAtlasData</code>

<li>*: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageAtlasData</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>,</li>

<code>sourceHeight</code>

<li>,</li>

<code>sourceLeft</code>

<li>,</li>

<code>sourceTop</code>

<li>,</li>

<code>atlasWidth</code>

<li>and</li>

<code>atlasHeight</code>

<li>.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the icon starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created icon.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>After the icon is being instanced, you can call this methods to manipulate it's visibility:</p>

<code>hide(): void</code>

<li>: Hides the icon.</li>

<code>show(): void</code>

<li>: Shows the icon.</li>

<p>Icon components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h2>Loading icon</h2>

<p>To display a loading icon on the center of the screen for a specified amount of time, create a</p>

<code>LoadingIcon</code>

<p>.</p>

<pre>:</pre>

<p>When instancing a new loading icon, you can pass the following parameters:</p>

<code>duration: number = 0</code>

<li>: seconds to display the image onscreen. If not set, or set to 0, it keeps the icon on till you hide it.</li>

<code>xOffset: number = 0</code>

<li>*: Offset on X, relative to the center of the screen.</li>

<code>yOffset: number = 0</code>

<li>*: Offset on Y, relative to the center of the screen.</li>

<code>scale: number = 1</code>

<li>*: Multiplier to alter the size of the icon proportionally. A scale of 1 = 50 x 66 pixels.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the icon starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created loading icon.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>LoadingIcon</code>

<p>object is instanced, you can call this methods:</p>

<code>hide(): void</code>

<li>: Hides the icon.</li>

<code>show(): void</code>

<li>: Shows the icon.</li>

<p>Loading icon components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h2>Large image</h2>

<p>To display a large image on the center of the screen for a specified amount of time, create a</p>

<code>CenterImage</code>

<p>. By default images must be 512 x 512 pixels, unless specified.</p>

<pre>:</pre>

<p>When instancing a new large image, you can pass the following parameters:</p>

<code>image: string</code>

<li>*: Path to image file.</li>

<code>duration: number</code>

<li>: Seconds to display the image onscreen. -1 keeps it on till you hide it.</li>

<code>xOffset: number = 0</code>

<li>*: Offset on X, relative to the center of the screen.</li>

<code>yOffset: number = 0</code>

<li>*: Offset on Y, relative to the center of the screen.</li>

<code>width: number = 512</code>

<li>*: Image width on screen in pixels.</li>

<code>height: number = 512</code>

<li>*: Image height on screen in pixels.</li>

<code>section?: ImageAtlasData</code>

<li>*: Use only a section of the image file, useful when arranging multiple images into an image atlas. This field takes an</li>

<code>ImageAtlasData</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>,</li>

<code>sourceHeight</code>

<li>,</li>

<code>sourceLeft</code>

<li>,</li>

<code>sourceTop</code>

<li>,</li>

<code>atlasWidth</code>

<li>and</li>

<code>atlasHeight</code>

<li>.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the image starts invisible till you run its</li>

<code>show()</code>

<li>function. Large images may flash white for a second if created and shown at the same time. By deferring the creation you avoid this artifact.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the created image.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Once a</p>

<code>CenterImage</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the image.</li>

<code>hide(): void</code>

<li>: Hides the image.</li>

<p>Large image components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h2>Predefined prompt windows</h2>

<p>The UI Utils library includes various common prompt windows to display messages and ask players to take an action.</p>

<h3>Ok Prompt</h3>

<p>Displays a prompt window with a custom message and an OK button. The Ok button can either be clicked or triggered by pressing the E key.</p>

<p>When instancing a new Ok Prompt, you can pass the following parameters:</p>

<code>text: string</code>

<li>: Message string.</li>

<code>onAccept?: () => void</code>

<li>: Function that gets executed if player clicks the button or presses E.</li>

<code>acceptLabel: string = 'Ok'</code>

<li>: Label to go in the accept button.</li>

<code>useDarkTheme: boolean = false</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>width: number = 400</code>

<li>: Width of the prompt.</li>

<code>height: number = 250</code>

<li>: Height of the prompt.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, the related</p>

<code>onAccept</code>

<p>function isn't called.</p>

<p>Once a</p>

<code>OkPrompt</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the prompt.</li>

<code>hide(): void</code>

<li>: Hides the prompt.</li>

<p>Note: prompt will not be closed automatically after the user clicks the button or presses the E key. You should close it manually using the</p>

<code>hide</code>

<p>method.</p>

<p>Prompt parts that you can interact with:</p>

<code>textElement: PromptText</code>

<li>: Main text element of the prompt.</li>

<code>buttonElement: PromptButton</code>

<li>: Accept button of the prompt.</li>

<code>closeIcon: PromptCloseIcon</code>

<li>: Close icon of the prompt.</li>

<h3>Option Prompt</h3>

<p>Displays a prompt window with a custom message, a title, and two buttons that perform separate actions. The buttons can be clicked or triggered by the E and F keys.</p>

<p>When instancing a new Option Prompt, you can pass the following parameters:</p>

<code>title: string | number</code>

<li>: Header at the top of the window.</li>

<code>titleSize: number = 24</code>

<li>: Size of the header text.</li>

<code>text: string | number</code>

<li>: Smaller print instructions displayed at the center of the prompt.</li>

<code>textSize: number = 21</code>

<li>: Size of the prompt text.</li>

<code>onAccept?: () => void</code>

<li>: Function that gets executed if player clicks accept (left) button or presses the E key.</li>

<code>onReject?: () => void</code>

<li>: Function that gets executed if player clicks reject (right) button or presses the F key.</li>

<code>acceptLabel: string = 'Yes'</code>

<li>: String to go in the accept button</li>

<code>rejectLabel: string = 'No'</code>

<li>: String to go in the reject button</li>

<code>useDarkTheme: boolean = false</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>width: number = 400</code>

<li>: Width of the prompt.</li>

<code>height: number = 250</code>

<li>: Height of the prompt.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, neither of the functions are called.</p>

<p>Once a</p>

<code>OptionPrompt</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the prompt.</li>

<code>hide(): void</code>

<li>: Hides the prompt.</li>

<p>Note: prompt will not be closed automatically after the user clicks buttons or presses the E or F key. You should close it manually using the</p>

<code>hide</code>

<p>method.</p>

<p>Prompt parts that you can interact with:</p>

<code>titleElement: PromptText</code>

<li>: Title element of the prompt.</li>

<code>textElement: PromptText</code>

<li>: Main text element of the prompt.</li>

<code>primaryButtonElement: PromptButton</code>

<li>: Primary button of the prompt.</li>

<code>secondaryButtonElement: PromptButton</code>

<li>: Secondary button of the prompt.</li>

<code>closeIcon: PromptCloseIcon</code>

<li>: Close icon of the prompt.</li>

<h3>Fill in Prompt</h3>

<p>Displays a prompt window with a header, a text field to fill in and a submit button. The value filled into the text box can be used as a parameter in the submit function.</p>

<p>When instancing a new Fill-in Prompt, you can pass the following parameters:</p>

<code>title: string | number</code>

<li>: Header at the top of the window.</li>

<code>titleSize: number = 24</code>

<li>: Size of the header text.</li>

<code>onAccept: (value: string) => void</code>

<li>: Function that gets executed when player clicks the button or presses the E key.</li>

<code>acceptLabel: string = 'Submit'</code>

<li>: String to use as label on the submit button.</li>

<code>placeholder: string = 'Fill in'</code>

<li>: Text to display as placeholder in the text box.</li>

<code>useDarkTheme: boolean = false</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>width: number = 400</code>

<li>: Width of the prompt.</li>

<code>height: number = 250</code>

<li>: Height of the prompt.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible till you run its</li>

<code>show()</code>

<li>function.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Note: If the player closes the window with the close icon, the related function isn't called.</p>

<p>Once a</p>

<code>FillInPrompt</code>

<p>object is instanced, you can call the following functions on it:</p>

<code>show(): void</code>

<li>: Shows the prompt.</li>

<code>hide(): void</code>

<li>: Hides the prompt.</li>

<p>Note: prompt will not be closed automatically after the user clicks the button or presses the E key. You should close it manually using the</p>

<code>hide</code>

<p>method.</p>

<p>Prompt parts that you can interact with:</p>

<code>titleElement: PromptText</code>

<li>: Title element of the prompt.</li>

<code>inputElement: PromptInput</code>

<li>: Input field element of the prompt.</li>

<code>buttonElement: PromptButton</code>

<li>: Submit button of the prompt.</li>

<code>closeIcon: PromptCloseIcon</code>

<li>: Close icon of the prompt.</li>

<h2>Custom Prompt Windows</h2>

<p>Custom prompt windows let you arrange as many elements as you want into a window, including buttons, text, checkboxes, switches, textboxes and icons.</p>

<h3>Create a custom prompt</h3>

<p>First create a new</p>

<code>CustomPrompt</code>

<p>object.</p>

<pre>:</pre>

<p>When instancing a new CustomPrompt, you can pass the following parameters:</p>

<code>style: PromptStyles = PromptStyles.LIGHT</code>

<li>: Pick from a few predefined options, some of them using the dark theme, others the light theme.</li>

<code>width: number = 400</code>

<li>: Background width on screen in pixels. The default size depends on the theme used.</li>

<code>height: number = 250</code>

<li>: Background height on screen in pixels. The default size depends on the theme used.</li>

<code>startHidden: boolean = true</code>

<li>: If true, the prompt starts invisible to load in the background till calling the</li>

<code>show()</code>

<li>function of the prompt object.</li>

<code>onClose?: () => void</code>

<li>: If provided, a callback function that fires when the prompt is closed via the (X) button.</li>

<p>Note: Stretching the background images away from their default values may lead to blurry corners.</p>

<p>Once you instanced a</p>

<code>CustomPrompt</code>

<p>object, you can add elements to it by calling its various functions.</p>

<p>You can also call the following functions on it:</p>

<code>hide</code>

<li>: Hides the window.</li>

<code>show</code>

<li>: Shows the window if previously closed.</li>

<p>Access all of the UI elements that make up the prompt UI by calling the</p>

<code>elements</code>

<p>property of the prompt object.</p>

<h3>Customizing close button</h3>

<p>When you're creating a prompt, it'll have a close button at the upper right corner. Anytime you can access</p>

<code>closeIcon</code>

<p>property of</p>

<code>PromptCloseIcon</code>

<p>type to change some of it's options:</p>

<code>width: number = 32</code>

<li>: Button width.</li>

<code>height: number = 32</code>

<li>: Button height.</li>

<code>xPosition: number = 10</code>

<li>: Offset on X from the top of the window.</li>

<code>yPosition: number = 10</code>

<li>: Offset on X from the right of the window.</li>

<code>onMouseDown: () => void</code>

<li>: Callback that is called when the user clicks on the button.</li>

<p>Note: When changing the</p>

<code>onMouseDown</code>

<p>, be sure to call the</p>

<code>hide</code>

<p>method of the related popup's to close it.</p>

<p>Close button components that you can interact with:</p>

<code>iconElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>image component.</li>

<h3>Add text</h3>

<p>To add text to a custom prompt, use the</p>

<code>addText</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addText()</code>

<p>function can take the following parameters:</p>

<code>value: string | number</code>

<li>: Text to show.</li>

<code>xPosition: number</code>

<li>: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>: Offset on Y from the center of the window.</li>

<code>color: Color4 = Color4.Black()</code>

<li>: Text color.</li>

<code>size: number = 14</code>

<li>: Text size.</li>

<code>startHidden: boolean = false</code>

<li>: If true, text will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the created</p>

<code>PromptText</code>

<p>.</p>

<p>The</p>

<code>addText()</code>

<p>function returns a</p>

<code>PromptText</code>

<p>object, that you can then reference to change its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<li>: Hides the text.</li>

<code>show(): void</code>

<li>: Shows the text.</li>

<p>Text components that you can interact with:</p>

<code>textElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the underlying</li>

<code>Label</code>

<li>component.</li>

<h3>Add a button</h3>

<p>To add a button to a custom prompt, use the</p>

<code>addButton</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addButton</code>

<p>function can take the following parameters:</p>

<code>text: string | number</code>

<li>*: Label to show on the button.</li>

<code>xPosition: number</code>

<li>*: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>*: Offset on Y from the center of the window.</li>

<code>onMouseDown: () => void</code>

<li>*: Function to execute when the button is clicked.</li>

<code>style: PromptButtonStyles = PromptButtonStyles.ROUNDSILVER</code>

<li>: Choose out of several predefined style options, with different colors and rounded or square corners.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the button will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: options marked with</p>

<code>*</code>

<p>can later be changed by accessing the relevant properties of the returned</p>

<code>PromptButton</code>

<p>.</p>

<p>Note: If you pick the</p>

<code>E</code>

<p>or</p>

<code>F</code>

<p>style, the buttons will also be triggered when pressing the E or F keys respectively.</p>

<p>The</p>

<code>addButton()</code>

<p>function returns a</p>

<code>PromptButton</code>

<p>object, that you can then reference to change its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<code>grayOut(): void</code>

<li>: Sets the text to gray and makes it unclickable.</li>

<code>enable(): void</code>

<li>: Sets the text to white and makes it clickable again.</li>

<p>Button components that you can interact with:</p>

<code>labelElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>Label</code>

<li>component that is responsible for the button label.</li>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the button background image.</li>

<code>iconElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the button icon.</li>

<h3>Add a Checkbox</h3>

<p>To add a checkbox to a custom prompt, use the</p>

<code>addCheckbox</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addCheckbox</code>

<p>function can take the following parameters:</p>

<code>text: string</code>

<li>: Label to show next to the checkbox.</li>

<code>xPosition: number</code>

<li>: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck?: () => void</code>

<li>: Function to execute when the box is checked.</li>

<code>onUncheck?: () => void</code>

<li>: Function to execute when the box is unchecked.</li>

<code>large: boolean = false</code>

<li>: If</li>

<code>true</code>

<li>, the box size to 32 x 32.</li>

<code>startChecked: boolean = false</code>

<li>: If true, the box starts checked by default.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the checkbox will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startChecked</code>

<p>and</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the created</p>

<code>PromptCheckbox</code>

<p>.</p>

<p>The</p>

<code>addCheckbox()</code>

<p>function returns a</p>

<code>PromptCheckbox</code>

<p>object, that you can then reference to change and read its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<code>check(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<code>uncheck(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<p>Checkbox components and components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the checkbox's box image.</li>

<code>labelElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the</li>

<code>Label</code>

<li>component that is responsible for the checkbox label.</li>

<h3>Add a Switch</h3>

<p>To add a switch to a custom prompt, use the</p>

<code>addSwitch</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addSwitch</code>

<p>function can take the following parameters:</p>

<code>text: string</code>

<li>: Label to show next to the switch.</li>

<code>xPosition: number</code>

<li>: Offset on X from the center of the window.</li>

<code>yPosition: number</code>

<li>: Offset on Y from the center of the window.</li>

<code>onCheck?: () => void</code>

<li>: Function to execute when the switch is activated.</li>

<code>onUncheck?: () => void</code>

<li>: Function to execute when the switch is deactivated.</li>

<code>style: PromptSwitchStyles = PromptSwitchStyles.ROUNDGREEN</code>

<li>: Pick between several sizes, with different colors and rounded or square corners. The value must be from the</li>

<code>SwitchStyles</code>

<li>enum.</li>

<code>startChecked: boolean = false</code>

<li>: If true, the switch starts activated by default.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the switch will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>The</p>

<code>addSwitch()</code>

<p>function returns a</p>

<code>PromptSwitch</code>

<p>object, that you can then reference to change and read its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<code>check(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<code>uncheck(): void</code>

<li>: Sets the element to checked,</li>

<strong>without</strong>

<li>performing the associated function.</li>

<p>Switch has components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the</li>

<code>UiEntity</code>

<li>component that is responsible for the switch icon.</li>

<code>labelElement: EntityPropTypes & UiLabelProps</code>

<li>: Props for the</li>

<code>Label</code>

<li>component that is responsible for the switch label.</li>

<h3>Add an icon</h3>

<p>To add an icon to a custom prompt, use the</p>

<code>addIcon</code>

<p>function.</p>

<pre>:</pre>

<p>The</p>

<code>addIcon</code>

<p>function can take the following parameters:</p>

<code>image: string</code>

<li>: Path to the image file.</li>

<code>xPosition: number = 0</code>

<li>: Offset on X, relative to the window's center.</li>

<code>yPosition: number = 0</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>width: number = 128</code>

<li>: Image width on screen in pixels.</li>

<code>height: number = 128</code>

<li>: Image height on screen in pixels.</li>

<code>section?: ImageAtlasData</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageAtlasData</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>,</li>

<code>sourceHeight</code>

<li>,</li>

<code>sourceLeft</code>

<li>,</li>

<code>sourceTop</code>

<li>,</li>

<code>atlasWidth</code>

<li>and</li>

<code>atlasHeight</code>

<li>.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the switch will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the returned</p>

<code>PromptIcon</code>

<p>.</p>

<p>The</p>

<code>addIcon()</code>

<p>function returns a</p>

<code>PromptIcon</code>

<p>object, that you can then reference to change its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<p>Icon components that you can interact with:</p>

<code>imageElement: EntityPropTypes</code>

<li>: Props for the underlying</li>

<code>UiEntity</code>

<li>component.</li>

<h3>Add an input box</h3>

<p>To add an input box to a custom prompt, use the</p>

<code>addTextBox</code>

<p>function.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>addTextBox</code>

<p>function can take the following parameters:</p>

<code>xPosition: number</code>

<li>: Offset on X, relative to the window's center.</li>

<code>yPosition: number</code>

<li>: Offset on Y, relative to the window's center.</li>

<code>placeholder: string | number = 'Fill in'</code>

<li>: Text to display in the input box before the player interacts with it.</li>

<code>onChange?: (value: string) => void</code>

<li>: Function that gets executed every time the player edits the content on the input box, once for each character changed.</li>

<code>startHidden: boolean = false</code>

<li>: If true, the switch will be invisible till calling the</li>

<code>show()</code>

<li>function.</li>

<p>Note: you can later change all of this options (except</p>

<code>startHidden</code>

<p>) by accessing the relevant properties of the returned</p>

<code>PromptInput</code>

<p>.</p>

<p>The</p>

<code>addTextBox()</code>

<p>function returns a</p>

<code>PromptInput</code>

<p>object, that you can then reference to change and read its values. This object has the following functions that can be called any time:</p>

<code>hide(): void</code>

<code>show(): void</code>

<p>You can access the last edited value on the textbox by fetching the</p>

<code>currentText</code>

<p>value of the returned object.</p>

<p>Input components that you can interact with:</p>

<code>fillInBoxElement: EntityPropTypes & Partial<UiInputProps></code>

<li>: Props for the underlying</li>

<code>Input</code>

<li>component.</li>

<h3>Full Custom UI example</h3>

<p>Here's a full example of a custom UI:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Combine with custom UI</h2>

<p>If you want to combine elements from the UI Toolkit with your own</p>

<p>in the same scene, you need to render all of the UI via a single call to the</p>

<code>ReactEcsRenderer.setUiRenderer</code>

<p>function. You can combine both into a single call in the following way:</p>

<p>For example:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Build the project by running</li>

<code>npm run build</code>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On the scene directory, after you installed the dependency, run</li>

<code>npm link @dcl-sdk/ui-utils</code>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to automatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-ui-utils-library

# Change to URL: https://github.com/decentraland-scenes/dcl-dynamic-ui

# URL: https://github.com/decentraland-scenes/dcl-dynamic-ui

<title>GitHub - decentraland-scenes/dcl-dynamic-ui</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-dynamic-ui</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>@dcl-sdk/utils</h1>

<p>This library includes a number of helpful pre-built tools that offer simple solutions to common scenarios that you're likely to run into.</p>

<h2>Using the Utils library</h2>

<p>To use any of the helpers provided by the utils library you must install it in your Decentrland project.</p>

<h3>Via the Decentraland Editor</h3>

<p>Make sure you've</p>

<p>.</p>

<li>Open your scene's folder using Visual Studio Code.</li>

<strong>ð Note</strong>

<p>: The Visual Studio window must be at the root folder of the scene project.</p>

<p>Open the Decentraland Editor tab on Visual Studio. Note that the bottom section lists all of your project's currently installed dependencies.</p>

<p>Click the</p>

<code>+</code>

<p>icon on the header of the</p>

<strong>Dependencies</strong>

<p>view.</p>

<p>Visual Studio opens an input box at the top of the screen. Write</p>

<code>@dcl-sdk/utils</code>

<p>and hit enter. The dependency is then installed to your scene.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h3>Via the CLI</h3>

<li>Install it as an</li>

<code>npm</code>

<li>package. Run this command in your scene's project folder:</li>

<code>npm install @dcl-sdk/utils</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of TypeScript files that require it:</p>

<li>In your TypeScript file, write</li>

<code>utils.</code>

<li>and let the suggestions of your IDE show the available helpers.</li>

<h2>Debug helpers</h2>

<h3>Label</h3>

<p>Add a text label floating over an entity using</p>

<code>utils.addLabel</code>

<p>. It has two required arguments:</p>

<code>text</code>

<li>: The string of text to display.</li>

<code>parent</code>

<li>: The entity to set the label on.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addLabel</code>

<p>also lets you set the following:</p>

<code>billboard</code>

<li>: If true, label turns to always face player. True by default.</li>

<code>color</code>

<li>: Text color. Black by default.</li>

<code>size</code>

<li>: Text font size, 3 by default.</li>

<code>textOffset</code>

<li>: Offset from parent entity's position. By default 1.5 meters above the parent.</li>

<p>Tip:</p>

<code>utils.addLabel</code>

<p>returns the created entity used for the text. You can then tweak this entity in any way you choose.</p>

<h3>Debug cube</h3>

<p>Render a simple clickable cube to use as a trigger when debugging a scene with</p>

<code>utils.addTestCube</code>

<p>. It has two required arguments:</p>

<code>transform</code>

<li>: The position, rotation and/or scale of the cube, expressed as a</li>

<code>TransformType</code>

<li>object, as gets passed when creating a</li>

<code>Transform</code>

<li>component.</li>

<code>triggeredFunction</code>

<li>: A function that gets called every time the cube is clicked.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<code>utils.addTestCube</code>

<p>also lets you set the following:</p>

<code>label</code>

<li>: An optional label to display floating over the cube.</li>

<code>color</code>

<li>: A color for the cube's material.</li>

<code>sphere</code>

<li>: If true, it renders as a Sphere instead of a cube.</li>

<code>noCollider</code>

<li>: If true, the cube won't have a collider and will let players walk through it.</li>

<p>Tip:</p>

<code>utils.addTestCube</code>

<p>returns the created entity for the cube. You can then tweak this entity in any way you choose.</p>

<h2>Tweens</h2>

<h3>Translate an entity</h3>

<p>To change entity's position over a period of time, use the</p>

<code>utils.tweens.startTranslation</code>

<p>.</p>

<p>This example moves an entity from one position to another over 2 seconds:</p>

<h3>Rotate an entity</h3>

<p>To rotate an entity over a period of time, from one direction to another, use</p>

<code>utils.tweens.startRotation</code>

<p>.</p>

<p>This example rotates an entity from one directions to another over 2 seconds:</p>

<h3>Scale an entity</h3>

<p>To adjust the scale of an entity over a period of time, from one size to another, use</p>

<code>utils.tweens.startScaling</code>

<p>.</p>

<p>This example scales an entity from one size to another over 2 seconds:</p>

<h3>Non-linear changes</h3>

<p>All tweens accept an optional argument which sets the rate of change. By default, translation, rotation, or scaling occur at a linear rate, but this can be set to other options.</p>

<code>utils.InterpolationType</code>

<p>enumeration lists all available interpolation types.</p>

<p>The following example moves a box following a quadratic ease-in rate:</p>

<h3>Stopping tweens and callbacks</h3>

<code>utils.tweens.stopTranslation</code>

<p>,</p>

<code>utils.tweens.stopRotation</code>

<p>and</p>

<code>utils.tweens.stopScaling</code>

<p>stop translation, rotation and scaling respectively.</p>

<p>In the following example tweens affecting a box are stopped when player clicks on a sphere:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>All tweens accept an optional argument</p>

<code>onFinishCallback</code>

<p>which is executed when a tween is complete. It is not executed if a tween was explicitly stopped via stop methods. Use</p>

<code>utils.tweens.getTranslationOnFinishCallback</code>

<p>,</p>

<code>utils.tweens.getRotationOnFinishCallback</code>

<p>and</p>

<code>utils.tweens.getScalingOnFinishCallback</code>

<p>to obtain tween's callback and call it before stopping a tween, if required.</p>

<p>The following example logs a message when the box finishes its movement.</p>

<h2>Perpetual motions</h2>

<h3>Perpetual rotation</h3>

<p>To rotate an entity continuously, use</p>

<code>utils.perpetualMotions.startRotation</code>

<p>. The entity will keep rotating forever until it's explicitly stopped.</p>

<code>rotationVelocity</code>

<p>argument is a quaternion describing the desired rotation to perform each second second. For example</p>

<code>Quaternion.fromEulerDegrees(0, 45, 0)</code>

<p>rotates the entity on the Y axis at a speed of 45 degrees per second, meaning that it makes a full turn every 8 seconds.</p>

<p>Rotation can be stopped by calling</p>

<code>utils.perpetualMotions.stopRotation</code>

<p>.</p>

<p>In the following example, a cube rotates continuously until clicked:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Path following</h2>

<h3>Straight path</h3>

<p>To move an entity over several points of a path over a period of time, use</p>

<code>utils.paths.startStraightPath</code>

<p>. Along with an entity which will follow a path you must specify two arguments:</p>

<code>points</code>

<li>: An array of</li>

<code>Vector3</code>

<li>positions that form the path.</li>

<code>duration</code>

<li>: The duration (in seconds) of the whole path.</li>

<p>There is one optional argument:</p>

<code>faceDirection</code>

<li>: When set to true, an entity will be rotated to face the direction of its movement.</li>

<p>This example moves an entity through four points over 10 seconds:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Smooth path</h3>

<p>To make an entity follow a smooth path over a period of time, use</p>

<code>utils.paths.startSmoothPath</code>

<p>. The smooth path is composed of multiple straight line segments put together. You only need to supply a series of fixed path points and a smooth curve is drawn to pass through all of these. You must specify an amount of segments via</p>

<code>segmentCount</code>

<p>argument.</p>

<code>faceDirection</code>

<p>argument works for smooth paths too.</p>

<p>This example makes entity follow a smooth path that's subdivided into 20 segments, over a period of 10 seconds. The curve passes through four key points.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>If the first and last points of a smooth path are identical, the library tries to facilitate smooth orientation change during movement over a loop. In the example below a box loops through three points forever.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Stopping paths and callbacks</h3>

<p>Just like tweens, paths can be stopped: use</p>

<code>utils.paths.stopPath</code>

<p>for that purpose. Again, like tweens, path starting functions accept optional</p>

<code>onFinishCallback</code>

<p>argument which is executed after a path finishes. If a path was explicitly stopped via</p>

<code>utils.paths.stopPath</code>

<p>, callback is not executed. Use</p>

<code>utils.paths.getOnFinishCallback</code>

<p>to obtain a callback and call it before stopping a path, if required.</p>

<p>Paths also accept optional</p>

<code>onPointReachedCallback</code>

<p>argument which is executed when a path reaches one of its milestones (</p>

<code>points</code>

<p>).</p>

<p>The following example logs a messages when the box finishes each segment of the path, and another when the entire path is done.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Toggle</h2>

<code>utils.toggles.*</code>

<p>family of functions enables switching an entity between two possible states, running a specified callback on every transition.</p>

<code>utils.toggles.addToggle</code>

<p>assigns an initial state (either</p>

<code>utils.ToggleState.On</code>

<p>or</p>

<code>utils.ToggleState.Off</code>

<p>) to an entity and the function to be run on a state change.</p>

<code>utils.toggles.removeToggle</code>

<p>removes the toggle from an entity.</p>

<p>Entity's state can be set explicitly via</p>

<code>utils.toggles.set</code>

<p>or flipped via</p>

<code>utils.toggles.flip</code>

<p>. Query entity's state by calling</p>

<code>utils.toggles.isOn</code>

<p>: it returns a boolean, where</p>

<code>true</code>

<p>means ON.</p>

<p>Callback can be changed by calling</p>

<code>utils.toggles.setCallback</code>

<p>.</p>

<p>The following example switches the color of a box between two colors each time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Combine toggle with a tween</h3>

<p>This example combines a toggle with a tween to switch an entity between two positions every time it's clicked.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Timers</h2>

<p>These tools are all related to the passage of time in the scene.</p>

<h3>Delay a function</h3>

<p>Use</p>

<code>utils.timers.setTimeout</code>

<p>to delay the execution of a function by a given amount of milliseconds.</p>

<p>This example delays the logging of a message by 1000 milliseconds.</p>

<h3>Repeat at an interval</h3>

<p>Use</p>

<code>utils.timers.setInterval</code>

<p>to execute a function every</p>

<code>n</code>

<p>milliseconds.</p>

<p>This example creates an entity that changes its scale to a random size every 2 seconds.</p>

<h3>Canceling execution</h3>

<p>Both</p>

<code>utils.timers.setInterval</code>

<p>and</p>

<code>utils.timers.setTimeout</code>

<p>return a unique</p>

<code>TimerId</code>

<p>which can be used to cancel delayed or repeated execution by calling</p>

<code>utils.timers.clearInterval</code>

<p>and</p>

<code>utils.timers.clearTimeout</code>

<p>respectively. In the example below a box keep changing its color every second until it's clicked on.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Triggers</h2>

<code>utils.triggers.*</code>

<p>family of functions powers trigger areas which can be added to entities and which report when intersections with other trigger areas arise or cease.</p>

<h3>Create a trigger</h3>

<p>Use</p>

<code>utils.triggers.addTrigger</code>

<p>to add a trigger area to an entity. It has the following arguments:</p>

<code>entity</code>

<li>: Trigger's owner entity. Trigger area's coordinates depend on</li>

<code>entity</code>

<li>'s Transform component.</li>

<code>layerMask</code>

<li>: Specificies layers to which this trigger belongs to. The library provides eight layers:</li>

<code>utils.LAYER_1</code>

<li>, ...</li>

<code>utils.LAYER_8</code>

<li>. If an entity is supposed to belong to multiple layers, for example layer 1 and layer 3, set</li>

<code>layerMask</code>

<li>to a combination of layer constants separated by</li>

<code>|</code>

<li>(bitwise OR):</li>

<code>utils.LAYER_1 | utils.LAYER_3</code>

<li>. If an entity is supposed to belong to all 8 layers, set</li>

<code>layerMask</code>

<li>to</li>

<code>utils.ALL_LAYERS</code>

<li>. Default value of</li>

<code>layerMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity does not belong to any layer and won't be able to trigger other entities (it still can be triggered by others, see</li>

<code>triggeredByMask</code>

<li>below).</li>

<code>triggeredByMask</code>

<li>: Specifies layers which can trigger an entity. For example, if an entity is supposed to be triggered by entities that belong to either or both layer 2 and layer 4, set</li>

<code>triggeredByMask</code>

<li>to</li>

<code>utils.LAYER_2 | utils.LAYER_4</code>

<li>. Default value of</li>

<code>triggeredByMask</code>

<li>is</li>

<code>utils.NO_LAYERS</code>

<li>, i.e. an entity won't be triggered by other entities at all. When set to</li>

<code>utils.ALL_LAYERS</code>

<li>an entity will be triggered by all entities that belong to at least one layer.</li>

<code>areas</code>

<li>: An array of shapes (either boxes or spheres) which describes trigger area. A box is indicated by the object</li>

<code>{type: 'box', position?: Vector3, scale?: Vector3}</code>

<li>, and a sphere by the object</li>

<code>{type: 'sphere', position?: Vector3, radius?: number}</code>

<li>.</li>

<code>position</code>

<li>,</li>

<code>scale</code>

<li>and</li>

<code>radius</code>

<li>fields are optional and default to</li>

<code>{x: 0, y: 0, z: 0}</code>

<li>,</li>

<code>{x: 1, y: 1, z: 1}</code>

<li>and</li>

<code>1</code>

<li>respectively. Please note that box's or sphere's coordinates are relative to</li>

<code>entity</code>

<li>'s Transform. Additionally, box areas always stay axis-aligned, disregarding</li>

<code>entity</code>

<li>'s rotation.</li>

<code>onEnterCallback</code>

<li>: This function will be called when a trigger's area intersects with an area of another, layer-compatible trigger. It will receive an entity which owns intersecting trigger as a single argument.</li>

<code>onExitCallback</code>

<li>: This function will be called when a trigger's area no longer intersects with an area of another trigger. It will receive an entity which owns formerly intersecting trigger as a single argument.</li>

<code>debugColor</code>

<li>: Defines a color of trigger area's shapes when debug visualization is active: call</li>

<code>utils.triggers.enableDebugDraw(true)</code>

<li>to enable it.</li>

<p>The following example creates a trigger that changes its position randomly when triggered by the player. Please note that the library automatically creates a trigger area for the player entity: it's a box closely matching avatar's shape with</p>

<code>layerMask</code>

<p>set to</p>

<code>utils.LAYER_1</code>

<p>and</p>

<code>triggeredByMask</code>

<p>set to</p>

<code>utils.NO_LAYERS</code>

<p>.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>Tip: to set a custom shape and other parameters of player's trigger first remove a default trigger via</p>

<code>utils.triggers.removeTrigger(engine.PlayerEntity)</code>

<p>and then specify your own trigger via</p>

<code>utils.triggers.addTrigger(engine.PlayerEntity, ...)</code>

<p>.</p>

<h3>Disable a trigger</h3>

<p>You can temporarily disable a trigger by calling</p>

<code>utils.triggers.enableTrigger(entity, false)</code>

<p>. Enable it again by calling</p>

<code>utils.triggers.enableTrigger(entity, true)</code>

<p>. Remove trigger altogether by calling</p>

<code>utils.triggers.removeTrigger(entity)</code>

<p>.</p>

<h3>One time Trigger</h3>

<p>As a shortcut for creating a trigger area that is only actioned once when the player first walks in or out, use the</p>

<code>utils.triggers.oneTimeTrigger</code>

<p>. This function has same arguments as</p>

<code>utils.triggers.addTrigger</code>

<p>, apart for</p>

<code>onExitCallback</code>

<p>. This function is especially useful for optimizing the loading of a scene, so that certain elements aren't loaded till a player walks into an area.</p>

<p>In the example below, the trigger area will only display welcome message the first time a player walks in. After that, the entity is removed from the scene.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Trigger layers</h3>

<p>You can define different layers for triggers, and set which other layers can trigger it.</p>

<p>The following example creates a scene that has:</p>

<li>food (green box)</li>

<li>mouse (blue sphere)</li>

<li>cat (red sphere)</li>

<p>Food is triggered (or eaten) by both cat and mouse. Also, mice are eaten by cats, so a mouse's trigger area is triggered only by a cat.</p>

<p>Cat and mouse always move towards the food. When food or mouse are eaten, they respawn in a random location.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Math</h2>

<h3>Remap</h3>

<code>utils.remap</code>

<p>maps a value from one range of values to its equivalent, scaled in proportion to another range of values, using maximum and minimum. It takes the following arguments:</p>

<code>value</code>

<li>: Input number to convert</li>

<code>min1</code>

<li>: Minimum value in the range of the input.</li>

<code>max1</code>

<li>: Maximum value in the range of the input.</li>

<code>min2</code>

<li>: Minimum value in the range of the output.</li>

<code>max2</code>

<li>: Maximum value in the range of the output.</li>

<p>The following example maps the value</p>

<em>5</em>

<p>from a scale of 0 to 10 to a scale of 300 to 400. The resulting value is 350, as it keeps the same proportion relative to the new maximum and minimum values.</p>

<h3>World position</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform position will be relative to its parent. To find what its global position is, taking into account any parents, use</p>

<code>utils.getWorldPosition</code>

<p>. It returns a</p>

<code>Vector3</code>

<p>object, with the resulting position of adding the given entity and all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world position.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>World rotation</h3>

<p>If an entity is parented to another entity, or to the player, then its Transform rotation will be relative to its parent. To find what its global rotation is, taking into account any parents, use</p>

<code>utils.getWorldRotation</code>

<p>. It returns a</p>

<code>Quaternion</code>

<p>object, with the resulting rotation of multiplying the given entity to all its chain of parents.</p>

<p>The following example sets a cube as a child of another cube, and logs its world rotation.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>##Â Other helpers</p>

<p>The library offers a few other functions that may be useful as shortcuts for common use cases.</p>

<p>##Â Get entity parent</p>

<p>Returns an entity that is the parent of the provided entity.</p>

<h2>Get entities with parent</h2>

<p>Returns an array of entities that all share the provided entity as parent.</p>

<h2>Get player position</h2>

<p>Returns the position of the player's avatar.</p>

<p>Note: Always call this function inside the main() function, a function called indirectly by it, or a system. Otherwise, you might be attempting to fetch data that doesn't yet exist.</p>

<h2>Play sound</h2>

<p>Plays a sound from an audio file, at a given location in the scene. This saves you from having to create an entity and give it a position and AudioSource component.</p>

<h2>Action sequence</h2>

<p>Use an action sequence to play a series of actions one after another.</p>

<h3>IAction</h3>

<p>The</p>

<code>actions.IAction</code>

<p>interface defines the actions that can be added into a sequence. It includes:</p>

<code>hasFinished</code>

<li>: Boolean for the state of the action, wether it has finished its execution or not.</li>

<code>onStart()</code>

<li>: First method that is called upon the execution of the action.</li>

<code>update()</code>

<li>: Called on every frame on the action's internal update.</li>

<code>onFinish()</code>

<li>: Called when the action has finished executing.</li>

<h3>Sequence builder</h3>

<p>This object creates action sequences, using simple building blocks.</p>

<p>The</p>

<code>actions.SequenceBuilder</code>

<p>exposes the following methods:</p>

<code>then()</code>

<li>: Enqueue an action so that it's executed when the previous one finishes.</li>

<code>if()</code>

<li>: Use a condition to branch the sequence</li>

<code>else()</code>

<li>: Used with if() to create an alternative branch</li>

<code>endIf()</code>

<li>: Ends the definition of the conditional block</li>

<code>while()</code>

<li>: Keep running the actions defined in a block until a condition is no longer met.</li>

<code>breakWhile()</code>

<li>: Ends the definition of the while block</li>

<h3>Sequence runner</h3>

<p>The</p>

<code>actions.SequenceRunner</code>

<p>object takes care of running sequences created by</p>

<code>actions.SequenceBuilder</code>

<p>. It exposes the following methods:</p>

<code>startSequence()</code>

<li>: Starts a sequence of actions</li>

<code>setOnFinishCallback()</code>

<li>: Sets a callback for when the whole sequence is finished</li>

<code>isRunning()</code>

<li>: Returns a boolean that determines if the sequence is running</li>

<code>stop()</code>

<li>: Stops a running the sequence</li>

<code>resume()</code>

<li>: Resumes a stopped sequence</li>

<code>reset()</code>

<li>: Resets a sequence so that it starts over</li>

<code>destroy()</code>

<li>: Removes a sequence from the engine</li>

<h3>Full example</h3>

<p>The following example creates a box that changes its scale until clicked. Then it resets its scale and moves.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/claiming-wearables-sdk7

# URL: https://github.com/decentraland-scenes/claiming-wearables-sdk7

<title>GitHub - decentraland-scenes/claiming-wearables-sdk7: Using the rewards server to claim wearables</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Using the rewards server to claim wearables</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/claiming-wearables-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Template scene</h1>

<h2>Try it out</h2>

<strong>Previewing the scene</strong>

<p>Download this repository.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>What's new on SDK 7</h2>

<p>Below are some basic concepts about the SDK 7 syntax. For more details, see the</p>

<p>.</p>

<h3>Entities</h3>

<p>An Entity is just an ID. It is an abstract concept not represented by any data structure. There is no "class Entity". Just a number that is used as a reference to group different components.</p>

<p>Note: Note that it's no longer necessary to separately create an entity and then add it to the engine, this is all done in a single act.</p>

<h3>Components</h3>

<p>The component is just a data container, WITHOUT any functions.</p>

<p>To add a component to an entity, the entry point is now the component type, not the entity.</p>

<p>This is different from how the syntax was in SDK6:</p>

<h4>Base Components</h4>

<p>Base components already come packed as part of the SDK. Most of them interact directly with the renderer in some way. This is the full list of currently supported base components:</p>

<li>Transform</li>

<li>Animator</li>

<li>Material</li>

<li>MeshRenderer</li>

<li>MeshCollider</li>

<li>AudioSource</li>

<li>AudioStream</li>

<li>AvatarAttach</li>

<li>AvatarModifierArea</li>

<li>AvatarShape</li>

<li>Billboard</li>

<li>CameraMode</li>

<li>CameraModeArea</li>

<li>GltfContainer</li>

<li>NftShape</li>

<li>PointerEventsResult</li>

<li>PointerHoverFeedback</li>

<li>PointerLock</li>

<li>Raycast</li>

<li>RaycastResult</li>

<li>TextShape</li>

<li>VisibilityComponent</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Custom Components</h4>

<p>Each component must have a unique number ID. If a number is repeated, the engine or another player receiving updates might apply changes to the wrong component. Note that numbers 1-2000 are reserved for the base components.</p>

<p>When creating a custom component you declare the schema of the data to be stored in it. Every field in a component MUST belong to one of the built-in special schemas provided as part of the SDK. These special schemas include extra functionality that allows them to be serialized/deserialized.</p>

<p>Currently, the names of these special schemas are:</p>

<h5>Primitives</h5>

<code>Schemas.Boolean</code>

<li>: true or false (serialized as a Byte)</li>

<code>Schemas.String</code>

<li>: UTF8 strings (serialized length and content)</li>

<code>Schemas.Float</code>

<li>: single precission float</li>

<code>Schemas.Double</code>

<li>: double precision float</li>

<code>Schemas.Byte</code>

<li>: a single byte, integer with range 0..255</li>

<code>Schemas.Short</code>

<li>: 16 bits signed-integer with range -32768..32767</li>

<code>Schemas.Int</code>

<li>: 32 bits signed-integer with range -2Â³Â¹..(2Â³Â¹-1)</li>

<code>Schemas.Int64</code>

<li>: 64 bits signed-integer</li>

<code>Schemas.Number</code>

<li>: an alias to Schemas.Float</li>

<h5>Specials</h5>

<code>Schemas.Entity</code>

<li>: a wrapper to int32 that casts the type to</li>

<code>Entity</code>

<code>Schemas.Vector3</code>

<li>: a Vector3 with { x, y, z }</li>

<code>Schemas.Quaternion</code>

<li>: a Quaternion with { x, y, z, w}</li>

<code>Schemas.Color3</code>

<li>: a Color3 with { r, g, b }</li>

<code>Schemas.Color4</code>

<li>: a Colo4 with { r, g, b, a }</li>

<h5>Schema generator</h5>

<code>Schemas.Enum</code>

<li>: passing the serialization Schema and the original Enum as generic</li>

<code>Schemas.Array</code>

<li>: passing the item Schema</li>

<code>Schemas.Map</code>

<li>: passing a Map with Schemas as values</li>

<code>Schemas.Optional</code>

<li>: passing the schema to serialize</li>

<p>Below are some examples of how these schemas can be declared.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To then create a custom component using one of these schemas, use the following syntax:</p>

<p>For contrast, below is an example of how components were constructed prior to SDK 7.</p>

<pre>@</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Systems</h3>

<p>Systems are pure & simple functions.

All your logic comes here.

A system might hold data which is relevant to the system itself, but no data about the entities it processes.</p>

<p>To add a system, all you need to do is define a function and add it to the engine. The function may optionally include a</p>

<code>dt</code>

<p>parameter with the delay since last frame, just like in prior versions of the SDK.</p>

<pre>:</pre>

<h4>Query components</h4>

<p>The way to group/query the components inside systems is using the method getEntitiesWith.</p>

<code>engine.getEntitiesWith(...components)</code>

<p>.</p>

<pre>:</pre>

<h3>Mutability</h3>

<p>Mutability is now an important distinction. We can choose to deal with mutable or with immutable versions of a component. We should use</p>

<code>getMutable</code>

<p>only when we plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can't change any of the properties on it.</p>

<p>To fetch the mutable version of a component, call it via</p>

<code>ComponentDefinition.getMutable()</code>

<p>. For example:</p>

<h2>About</h2>

<p>Using the rewards server to claim wearables</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Genesis-Plaza-SDK7

# URL: https://github.com/decentraland-scenes/Genesis-Plaza-SDK7

<title>GitHub - decentraland-scenes/Genesis-Plaza-SDK7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Genesis-Plaza-SDK7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>34</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>626</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Genesis-Plaza SDK7</h1>

<p>NOTICE!</p>

<p>Code that has been commented out and needs revisiting should be tagged with</p>

<code>/*

//TODO TAG:PORT-REIMPLEMENT-ME

code block to be revistied here

*/</code>

<h2>How to deploy</h2>

<p>NOTE: This is deployed by a git action

branches are configured to auto deploy.  Merge code ready to release into release branch</p>

<li>testing = peer-testing</li>

<p>This folder contains all the necessary files to launch a Decentraland scene.</p>

<em>A few screenshots of Genesis Plaza.</em>

<h2>Description</h2>

<p>The newly revamped</p>

<p>.</p>

<p>Read the behind the scenes from this scene in these blog posts:</p>

<p>This scene contains a lot of useful mechanics, including:</p>

<li>Interacting with an NPC</li>

<li>Fetching data from APIs</li>

<li>Adding teleports to other scenes</li>

<li>Adding external links outside Decentraland</li>

<li>Syncing player actions with the messagebus</li>

<li>Streaming audio</li>

<li>Streaming video</li>

<li>Displaying a custom UI</li>

<p>Because it can be hard to find specific things in such a large repository, some of the most interesting bits of the scene have been exported into their own example repos:</p>

<li>: A UI window presents texts from an NPC, allowing you to use the Right Click, E and F keys to advance the conversation or answer questions.</li>

<li>: Display a 2D NFT in a picture frame.</li>

<li>: Query the Decentraland Events API for any events that are currently active to display their info. If more than one, flip through them on the display.</li>

<li>: Play the keys of this piano by stepping on them. All players will hear the notes that are played.</li>

<li>: Create musical patterns that are played in sequence. Players are synced through both the messagebus and a DB in a server.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of the same server that's used by Genesis Plaza. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>. To store data on an Amazon S3 server, as done here, you'll also need to set up your own Amazon S3, and fetch credentials for that account to include in your server folder.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Links</h2>

<h2>Acknowledgements</h2>

<li>Thank you to</li>

<li>for providing sample code of the NPC used in</li>

<em>alice.mp3</em>

<li>modified from</li>

<em>bela.mp3</em>

<li>modified from</li>

<em>betty</em>

<li>.mp3_ modified from</li>

<em>bob.mp3</em>

<li>modified from</li>

<em>charlie</em>

<li>.mp3_ modified from</li>

<em>marsha.mp3</em>

<li>modified from</li>

<em>ron.mp3</em>

<li>modified from</li>

<em>beerPump.mp3</em>

<li>modified from</li>

<em>error.mp3</em>

<li>modified from</li>

<em>pickUp.mp3</em>

<li>modified from</li>

<em>putDown.mp3</em>

<li>modified from</li>

<em>swallow.mp3</em>

<li>modified from</li>

<em>micFeedback.mp3</em>

<li>modified from</li>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/npc-dialog-example-scene

# URL: https://github.com/decentraland-scenes/npc-dialog-example-scene

<title>GitHub - decentraland-scenes/npc-dialog-example-scene: Example scene showing basic dialog interactions with NPCs.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/npc-dialog-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NPC Dialog Example Scene</h1>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<em>demo of npc-dialog-example-scene running in preview.</em>

<p>This scene shows you:</p>

<li>How to animate a 3D model</li>

<li>How to use the</li>

<li>to create a Non-Player Character</li>

<li>How to display a whole text tree from a JSON file into a UI</li>

<li>How to use E and F buttons to pick options in a text tree</li>

<li>How to keep an NPC facing the player as the player moves</li>

<p>Tip: Find full documentation for the NPC Utils library</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the NPC to start a conversation, use E and F keys to choose options when prompted.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Acknowledgements</h2>

<li>Thank you to</li>

<li>for providing sample code of the NPC used in</li>

<em>alice.mp3</em>

<li>modified from (</li>

<li>)</li>

<em>bob.mp3</em>

<li>modified from (</li>

<li>)</li>

<em>charlie</em>

<li>.mp3_ modified from (</li>

<li>)</li>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Example scene showing basic dialog interactions with NPCs.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>8</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland/decentraland-npc-utils

# URL: https://github.com/decentraland/decentraland-npc-utils

<title>GitHub - decentraland/decentraland-npc-utils: NPC tools for conversational NPCs</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>NPC tools for conversational NPCs</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland/decentraland-npc-utils</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>32</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>117</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NPC-library</h1>

<p>A collection of tools for creating Non-Player-Characters (NPCs). These are capable of having conversations with the player, and play different animations.</p>

<p>Capabilities of the NPCs in this library:</p>

<li>Start a conversation when clicked or when walking near</li>

<li>Trigger any action when clicked or when walking near</li>

<li>Trigger any action when the player walks away</li>

<li>Turn around slowly to always face the player</li>

<li>Play an animation in the NPC 3d model, optionally returning to loop the idle animation afterwards</li>

<p>The dialog messages can also require that the player chooses options, and any action can be triggered when the player picks an option or advances past a message.</p>

<p>To use NPCs in your scene:</p>

<li>Install the library as an npm bundle. Run this command in your scene's project folder:</li>

<code>npm i @dcl/npc-scene-utils -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, create an</li>

<code>NPC</code>

<li>type object, passing it at least a position, a path to a 3d model, and a function to trigger when the NPC is activated:</li>

<pre>:</pre>

<li>Write a dialog script for your character, preferably on a separate file, making it of type</li>

<code>Dialog[]</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>NPC Default Behavior</h2>

<p>NPCs at the very least must have:</p>

<code>position</code>

<li>: (</li>

<em>TranformConstructorArgs</em>

<li>). Can include position, rotation and scale.</li>

<code>model</code>

<li>: (</li>

<em>string</em>

<li>) The path to a 3D model</li>

<code>onActivate()</code>

<li>: (</li>

<em>()=> void</em>

<li>) A function to call when the NPC is activated.</li>

<pre>:</pre>

<p>With this default configuration, the NPC behaves in the following way:</p>

<li>The</li>

<code>onActivate()</code>

<li>function is called when pressing E on the NPC, and when the player walks near at a distance of 6 meters.</li>

<li>Once activated, there's a cooldown period of 5 seconds, that prevents the NPC to be activated again.</li>

<li>After walking away from the NPC, if its dialog window was open it will be closed, and if the NPC was rotating to follow the player it will stop.</li>

<li>If the NPC already has an open dialog window, clicking on the NPC won't do anything, to prevent accidentally clicking on it while flipping through the conversation.</li>

<li>If the NPC has an animation named 'Idle', it will play it in a loop. If other non-looping animations are played, it will return to looping the 'Idle' animation after the indicated duration.</li>

<p>Many of these behaviors can be overriden or tweaked with the exposed properties.</p>

<h2>NPC Additional Properties</h2>

<p>To configure other properties of an NPC, add a fourth argument as an</p>

<code>NPCData</code>

<p>object. This object can have the following optional properties:</p>

<code>idleAnim</code>

<li>:</li>

<em>(string)</em>

<li>Name of the idle animation in the model. This animation is always looped. After playing a non-looping animation it returns to looping this one.</li>

<code>faceUser</code>

<li>:</li>

<em>(boolean)</em>

<li>Set if the NPC rotates to face the user while active.</li>

<code>turnSpeed</code>

<li>:</li>

<em>(number)</em>

<li>If</li>

<code>faceUser</code>

<li>is true,</li>

<code>turnSpeed</code>

<li>determines the speed at which the NPC turns to face the player. 2 by default.</li>

<code>portrait</code>

<li>:</li>

<em>(string</em>

<li>or</li>

<em>ImageData)</em>

<li>2D image to show on the left-hand side of the dialog window. The structure of an</li>

<code>ImageData</code>

<li>object is described in detail below.</li>

<code>darkUI</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the dialog UI uses the dark theme.</li>

<code>dialogSound</code>

<li>:</li>

<em>(string)</em>

<li>Path to sound file to play once for every entry shown on the UI. If the dialog entry being shown has an</li>

<code>audio</code>

<li>field, the NPC will play the file referenced by the</li>

<code>audio</code>

<li>field instead.</li>

<code>coolDownDuration</code>

<li>:</li>

<em>(number)</em>

<li>Change the cooldown period for activating the NPC again. The number is in seconds.</li>

<code>hoverText</code>

<li>:</li>

<em>(string)</em>

<li>Set the UI hover feedback when pointing the cursor at the NPC.</li>

<em>TALK</em>

<li>by default.</li>

<code>onlyClickTrigger</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the NPC can't be activated by walking near. Just by clicking on it or calling its</li>

<code>activate()</code>

<li>function.</li>

<code>onlyETrigger</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the NPC can't be activated by walking near. Just by pressing the E key on it or calling its</li>

<code>activate()</code>

<li>function.</li>

<code>onlyExternalTrigger</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, the NPC can't be activated by clicking, pressing E, or walking near. Just by calling its</li>

<code>activate()</code>

<li>function.</li>

<code>reactDistance</code>

<li>:</li>

<em>(number)</em>

<li>Radius in meters for the player to activate the NPC or trigger the</li>

<code>onWalkAway()</code>

<li>function when leaving the radius.</li>

<code>continueOnWalkAway</code>

<li>:</li>

<em>(boolean)</em>

<li>If true,when the player walks out of the</li>

<code>reactDistance</code>

<li>radius, the dialog window stays open and the NPC keeps turning to face the player (if applicable). It doesn't affect the triggering of the</li>

<code>onWalkAway()</code>

<li>function.</li>

<code>onWalkAway</code>

<li>: (</li>

<em>()=> void</em>

<li>) Function to call every time the player walks out of the</li>

<code>reactDistance</code>

<li>radius.</li>

<code>walkingAnim</code>

<li>:</li>

<em>(string)</em>

<li>Name of the walking animation on the model. This animation is looped when calling the</li>

<code>followPath()</code>

<li>function.</li>

<code>walkingSpeed</code>

<li>:</li>

<em>(number)</em>

<li>Speed of the NPC when walking. By default</li>

<em>2</em>

<li>.</li>

<code>path</code>

<li>:</li>

<em>(Vector3)</em>

<li>Default path to walk. If a value is provided for this field on NPC initialization, the NPC will walk over this path in loop from the start.</li>

<code>bubbleHeight</code>

<li>:</li>

<em>(number)</em>

<li>The height at which to display the speech bubble above the head of the NPC.</li>

<code>textBubble</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, NPC starts with a speech bubble object ready to be accessed from the start. Otherwise, they text bubble is only built on the first call to</li>

<code>talkBubble()</code>

<li>on the NPC.</li>

<code>noUI</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, no UI object is built for UI dialogs for this NPC. This may help optimize the scene if this feature is not used.</li>

<p>The</p>

<code>ImageData</code>

<p>type that can be used on the</p>

<code>portrait</code>

<p>field is an object that may include the following:</p>

<code>path</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the normal position of the image.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the normal position of the image.</li>

<code>width</code>

<li>: The width to show the image onscreen.</li>

<code>height</code>

<li>: The height to show the image onscreen.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Check NPC State</h2>

<p>There are several properties you can check on an NPC to know what its current state is:</p>

<code>.state</code>

<li>: An enum value of type</li>

<code>NPCState</code>

<li>. Supported values are</li>

<code>NPCState.STANDING</code>

<li>(default),</li>

<code>NPCState.TALKING</code>

<li>, and</li>

<code>NPCState.FOLLOWPATH</code>

<li>.</li>

<code>TALKING</code>

<li>is applied when the dialog window is opened, and set back to</li>

<code>STANDING</code>

<li>when the window is closed.</li>

<code>FOLLOWPATH</code>

<li>is applied when the NPC starts walking, and set back to</li>

<code>STANDING</code>

<li>when the NPC finishes its path or is stopped.</li>

<code>.introduced</code>

<li>: Boolean, false by default. Set to true if the NPC has spoken to the player at least once in this session.</li>

<code>.dialog.isDialogOpen()</code>

<li>: Returns a Boolean, false by default. True if the dialog window for this NPC is currently open.</li>

<code>.inCooldown</code>

<li>: Boolean, false by default. True if the NPC was recently activated and it's now in cooldown. The NPC won't respond to being activated till</li>

<code>inCooldown</code>

<li>is false.</li>

<p>TIP: If you want to force an activation of the NPC in spite of the</p>

<code>inCooldown</code>

<p>value, you can force this value to true before activating.</p>

<h2>NPC Callable Actions</h2>

<p>An NPC object has several callable functions that come with the class:</p>

<h3>Talk</h3>

<p>To start a conversation with the NPC using the dialog UI, call the</p>

<code>talk()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>script</code>

<li>:</li>

<em>(Dialog[])</em>

<li>This array contains the information to manage the conversation, including events that may be triggered, options to choose, etc.</li>

<p>It can also take the following optional parameters:</p>

<code>startIndex</code>

<li>:</li>

<em>(number | string)</em>

<li>The</li>

<em>Dialog</em>

<li>object from the</li>

<code>script</code>

<li>array to open first. By default this is</li>

<em>0</em>

<li>, the first element of the array. Pass a number to open the entry on a given array position, or pass a string to open the entry with a</li>

<code>name</code>

<li>property matching that string.</li>

<code>duration</code>

<li>:</li>

<em>(number)</em>

<li>Number of seconds to wait before closing the dialog window. If no value is set, the window is kept open till the player reaches the end of the conversation or something else closes it.</li>

<p>Learn how to build a script object for NPCs in a section below.</p>

<h3>Speech Bubbles</h3>

<p>Besides the UI dialog window, NPCs can show speech bubbles over their heads. This alternative is less invasive to the player, but also non-interactive. Players can't alter the pace of the conversation or provide answers to questions.</p>

<p>For an NPC to talk with bubbles:</p>

<p>The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>script</code>

<li>:</li>

<em>(Dialog[])</em>

<li>This array contains the information to manage the conversation, including events that may be triggered, options to choose, etc.</li>

<p>It can also take the following optional parameters:</p>

<code>startIndex</code>

<li>:</li>

<em>(number | string)</em>

<li>The</li>

<em>Dialog</em>

<li>object from the</li>

<code>script</code>

<li>array to open first. By default this is</li>

<em>0</em>

<li>, the first element of the array. Pass a number to open the entry on a given array position, or pass a string to open the entry with a</li>

<code>name</code>

<li>property matching that string.</li>

<p>To interrupt the flow of an NPC's dialog windows, you can either:</p>

<li>Run</li>

<code>.endInteraction()</code>

<li>on the NPC</li>

<li>Run</li>

<code>.closeDialogWindow()</code>

<li>on the NPC's</li>

<code>bubble</code>

<li>object</li>

<li>Run</li>

<code>.closeDialogEndAll()</code>

<li>on the NPC's</li>

<code>bubble</code>

<li>object</li>

<p>The first two options keep running any</p>

<code>triggeredByNext()</code>

<p>functions associated to the dialogs being shown on the bubble, the third option prevents running these.</p>

<h3>Play Animations</h3>

<p>By default, the NPC will loop an animation named 'Idle', or with a name passed in the</p>

<code>idleAnim</code>

<p>parameter.</p>

<p>Make the NPC play another animation by calling the</p>

<code>playAnimation()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>animationName</code>

<li>:</li>

<em>(string)</em>

<li>The name of the animation to play.</li>

<p>It can also take the following optional parameters:</p>

<code>noLoop</code>

<li>:</li>

<em>(boolean)</em>

<li>If true, plays the animation just once. Otherwise, the animation is looped.</li>

<code>duration</code>

<li>:</li>

<em>(number)</em>

<li>Specifies the duration in seconds of the animation. When finished, it returns to playing the idle animation.</li>

<p>Note: If</p>

<code>noLoop</code>

<p>is true but no</p>

<code>duration</code>

<p>is set, the model will stay still after playing the animation instead of returning to the idle animation.</p>

<h3>Change idle animation</h3>

<p>The NPC's idle animation is looped by default whenever the NPC is not playing any other animations. In some cases you may want to have different idle animations depending on the circumstances, like while in a conversation, or if the NPC changes its general attitude after some event.</p>

<p>You set the NPC's idle animation when creating the NPC, using the</p>

<code>idleAnim</code>

<p>field. To change this animation at some later time, use</p>

<code>changeIdleAnim()</code>

<p>.</p>

<p>The</p>

<code>changeIdleAnim()</code>

<p>function takes two arguments:</p>

<code>animation</code>

<li>: The name of the new animation to set as the idle animation</li>

<code>play</code>

<li>: Optionally pass this value as</li>

<em>true</em>

<li>if you want this new animation to start playing right away.</li>

<h3>Activate</h3>

<p>The</p>

<code>activate()</code>

<p>function can be used to trigger the</p>

<code>onActivate()</code>

<p>function, as an alternative to pressing E or walking near.</p>

<p>The</p>

<code>activate()</code>

<p>function is callable even when in cool down period, and it doesn't start a new cool down period.</p>

<h3>Stop Walking</h3>

<p>If the NPC is currently walking, call</p>

<code>stopWalking()</code>

<p>to stop it moving and return to playing its idle animation.</p>

<code>stopWalking()</code>

<p>can be called with no parameters, or it can also be called with:</p>

<code>duration</code>

<li>: Seconds to wait before starting to walk again. If not provided, the NPC will stop walking indefinitely.</li>

<p>Note: If the NPC is has its dialog window open when the timer for the</p>

<code>duration</code>

<p>ends, the NPC will not return to walking.</p>

<p>To make the NPC play a different animation from idle when paused, call</p>

<code>playAnimation()</code>

<p>after</p>

<code>stopWalking()</code>

<p>.</p>

<h3>Follow Path</h3>

<p>Make an NPC walk following a path of</p>

<code>Vector3</code>

<p>points by calling</p>

<code>followPath()</code>

<p>. While walking, the NPC will play the</p>

<code>walkingAnim</code>

<p>if one was set when defining the NPC. The path can be taken once or on a loop.</p>

<code>followPath()</code>

<p>can be called with no parameters if a</p>

<code>path</code>

<p>was already provided in the NPC's initialization or in a previous calling of</p>

<code>followPath()</code>

<p>. If the NPC was previously in the middle of walking a path and was interrupted, calling</p>

<code>followPath()</code>

<p>again with no arguments will return the NPC to that path.</p>

<p>Note: If the NPC is initialized with a</p>

<code>path</code>

<p>value, it will start out walking that path in a loop, no need to run</p>

<code>followPath()</code>

<p>.</p>

<code>followPath()</code>

<p>has a single optional parameter of type</p>

<code>FollowPathData</code>

<p>. This object may have the following optinal fields:</p>

<li>path: Array of</li>

<code>Vector3</code>

<li>positions to walk over.</li>

<li>speed: Speed to move at while walking this path. If no</li>

<code>speed</code>

<li>or</li>

<code>totalDuration</code>

<li>is provided, it uses the NPC's</li>

<code>walkingSpeed</code>

<li>, which is</li>

<em>2</em>

<li>by default.</li>

<li>totalDuration: The duration in</li>

<em>seconds</em>

<li>that the whole path should take. The NPC will move at the constant speed required to finish in that time. This value overrides that of the</li>

<em>speed</em>

<li>.</li>

<li>loop:</li>

<em>boolean</em>

<li>If true, the NPC walks in circles over the provided set of points in the path.</li>

<em>false</em>

<li>by default, unless the NPC is initiated with a</li>

<code>path</code>

<li>, in which case it starts as</li>

<em>true</em>

<li>.</li>

<li>curve:</li>

<em>boolean</em>

<li>If true, the path is traced a single smooth curve that passes over each of the indicated points. The curve is made out of straight-line segments, the path is stored with 4 times as many points as originally defined.</li>

<em>false</em>

<li>by default.</li>

<li>startingPoint: Index position for what point to start from on the path.</li>

<em>0</em>

<li>by default.</li>

<li>onFinishCallback: Function to call when the NPC finished walking over all the points on the path. This is only called when</li>

<code>loop</code>

<li>is</li>

<em>false</em>

<li>.</li>

<li>onReachedPointCallback: Function to call once every time the NPC reaches a point in the path.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>NPC Walking Speed</h4>

<p>The following list of factors are used to determine speed in hierarchical order:</p>

<code>totalDuration</code>

<li>parameter set when calling</li>

<code>followPath()</code>

<li>is used over the total distance travelled over the path.</li>

<code>speed</code>

<li>parameter set when calling</li>

<code>followPath()</code>

<code>walkingSpeed</code>

<li>parameter set when initializing NPC</li>

<li>Default value</li>

<em>2</em>

<li>.</li>

<h4>Joining the path</h4>

<p>If the NPC's current position when calling</p>

<code>followPath()</code>

<p>doesn't match the first position in the</p>

<code>path</code>

<p>array (or the one that matches the</p>

<code>startingPoint</code>

<p>value), the current position is added to the</p>

<code>path</code>

<p>array. The NPC will start by walking from its current position to the first point provided in the path.</p>

<p>The</p>

<code>path</code>

<p>can be a single point, and the NPC will then walk a from its current position to that point.</p>

<p>Note: If the speed of the NPC is determined by a</p>

<code>totalDuration</code>

<p>value, the segment that the NPC walks to join into the path is counted as part of the full path. If this segment is long, it will increase the NPC walking speed so that the full path lasts as what's indicated by the</p>

<code>totalDuration</code>

<p>.</p>

<p>In this example the NPC is far away from the start of the path. It will first walk from</p>

<em>10, 0, 10</em>

<p>to</p>

<em>2, 0, 2</em>

<p>and then continue the path.</p>

<pre>:</pre>

<pre>:</pre>

<h4>Example Interrupting the NPC</h4>

<p>In the following example, an NPC starts roaming walking over a path, pausing on every point to call out for its lost kitten. If the player activates the NPC (by pressing E on it or walking near it) the NPC stops, and turns to face the player and talk. When the conversation is over, the NPC returns to walking its path from where it left off.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>End interaction</h3>

<p>The</p>

<code>endInteraction()</code>

<p>function can be used to abruptly end interactions with the NPC.</p>

<p>If applicable, it closes the dialog UI, hides speech bubbles, and makes the NPC stop rotating to face the player.</p>

<p>As an alternative, you can call the</p>

<code>handleWalkAway()</code>

<p>function, which has the same effects (as long as</p>

<code>continueOnWalkAway</code>

<p>isn't set to true), but also triggers the</p>

<code>onWalkAway()</code>

<p>function.</p>

<h2>NPC Dialog Window</h2>

<p>You can display an interactive dialog window to simulate a conversation with a non-player character (NPC).</p>

<p>The conversation is based on a script in JSON format. The script can include questions that can take you forward or backward, or end the conversation.</p>

<h3>The NPC script</h3>

<p>Each entry on the script must include at least a</p>

<code>text</code>

<p>field, but can include several more fields to further customize it.</p>

<p>Below is a minimal dialog.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The player advances through each entry by clicking the mouse button. Once the last is reached, clicking again closes the window, as it's marked as</p>

<code>isEndOfDialog</code>

<p>.</p>

<p>The script must adhere to the following schema:</p>

<pre>:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<p>Note: A</p>

<code>Dialog</code>

<p>object can be used as an input both for the</p>

<code>talk()</code>

<p>function (that is displayed in the UI), and the</p>

<code>talkBubble()</code>

<p>function (that is displayed in a floating bubble over the NPC). Properties marked with</p>

<code>*</code>

<p>are only applicabe to UI dialogs.</p>

<p>You can set the following fields to change the appearance of a dialog:</p>

<code>text</code>

<li>: The dialog text</li>

<code>fontSize</code>

<li>: Size of the text</li>

<code>offsetX *</code>

<li>: Offset of the text on the X axis, relative to its normal position.</li>

<code>offsetY *</code>

<li>: Offset of the text on the Y axis, relative to its normal position.</li>

<code>portrait *</code>

<li>: Sets the portrait image to use on the left. This field expects a</li>

<code>Portrait</code>

<li>object.</li>

<code>image *</code>

<li>: Sets a second image to use on the right of the dialog, and slightly up. This field expects an</li>

<code>ImageData</code>

<li>object.</li>

<p>The</p>

<code>ImageData</code>

<p>required for the</p>

<code>portrait</code>

<p>and</p>

<code>image</code>

<p>fields, may include the following:</p>

<code>path</code>

<li>: Path to the image file.</li>

<code>xOffset</code>

<li>: Offset on X, relative to the normal position of the image.</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the normal position of the image.</li>

<code>width</code>

<li>: The width to show the image onscreen.</li>

<code>height</code>

<li>: The height to show the image onscreen.</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<p>Other fields:</p>

<code>name</code>

<li>: Optionally add a name to an entry, this serves to more easily refer to an entry.</li>

<code>buttons *</code>

<li>: An array of buttons to use in a question entry, covered in the next section.</li>

<code>audio</code>

<li>: String with the path to an audio file to play once when this dialog is shown on the UI.</li>

<code>typeSpeed</code>

<li>: The text appears one character at a time, simulating typing. Players can click to skip the animation. Tune the speed of this typing (30 by default) to go slower or faster. Set to</li>

<em>-1</em>

<li>to skip the animation.</li>

<code>skipable *</code>

<li>: If true, a "Skip" button appears in the corner to let players jump to the next non-skipable dialog, or close the dialog. Question dialogs can't be skiped.</li>

<p>Add format tags within the</p>

<code>text</code>

<p>string to accentuate parts of the text.</p>

<li>Use</li>

<code><b></b></code>

<li>for</li>

<strong>bold</strong>

<li>Use</li>

<code><i></i></code>

<li>for</li>

<em>italics</em>

<li>Use</li>

<code><color="red"></color></code>

<li>to color text</li>

<p>For example:</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Questions and conversation trees</h4>

<p>The script can include questions that prompt the player to pick between two or up to four options. These questions can branch the conversation out and trigger other actions in the scene.</p>

<p>Note: Questions are only used by UI dialogs. If used in a speech bubble, questions will be displayed as regular entries with no buttons or options.</p>

<p>To make an entry a question, set the</p>

<code>isQuestion</code>

<p>field to</p>

<em>true</em>

<p>. This displays a set of buttons rather than the click icon. It also disables the click to advance to the next entry.</p>

<p>The</p>

<code>buttons</code>

<p>property of an entry contains an array of</p>

<code>ButtonData</code>

<p>objects, each one of these defines one button.</p>

<p>When on a question entry, you must provide at least the following for each button:</p>

<code>label</code>

<li>:</li>

<em>(string)</em>

<li>The label to show on the button.</li>

<code>goToDialog</code>

<li>:</li>

<em>(number | string)</em>

<li>The index or name of the next dialog entry to display when activated.</li>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>You can also set the following:</p>

<code>triggeredActions</code>

<li>:</li>

<em>( () => void )</em>

<li>An additional function to run whenever the button is activated</li>

<code>fontSize</code>

<li>:</li>

<em>(number)</em>

<li>Font size of the text</li>

<code>offsetX</code>

<li>:</li>

<em>(number)</em>

<li>Offset of the label on the X axis, relative to its normal position.</li>

<code>offsetY</code>

<li>:</li>

<em>(number)</em>

<li>Offset of the label on the Y axis, relative to its normal position.</li>

<p>All buttons can be clicked to activate them. Additionally, the first button in the array can be activated by pressing the</p>

<em>E</em>

<p>key. The second button in the array can be activated by pressing the</p>

<em>F</em>

<p>key,</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Triggering functions from the dialog</h4>

<p>You can run functions that may affect any other part of your scene. These functions get triggered when the player interacts with the dialog window, or when the NPC displays speech bubbles.</p>

<code>triggeredByNext</code>

<p>: Is executed when the player advances to the next dialog on a non-question dialog. The function also gets called if the dialog is the end of the conversation. It also gets called when a speech bubble advances to the next entry.</p>

<code>triggeredActions</code>

<p>: This property is associated to a button and is executed on a question dialog if the player activates the corresponding button. You can have up to 4 different buttons per entry, each with its own actions.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Skipping Dialogs</h4>

<p>Each dialog has an optional</p>

<code>skipable</code>

<p>property. If true, a button appears in the bottom-left corner of the dialog window. Players can click this button or press F to skip all the following dialogs.</p>

<p>When skipping, players will jump forward in the conversation till</p>

<li>They reach a dialog that doesn't have the</li>

<code>skipable</code>

<li>property.</li>

<li>They reach a dialog with</li>

<code>isQuestion=true</code>

<li>.</li>

<li>They reach a dialog that has the</li>

<code>skipable</code>

<li>property and</li>

<code>isEndOfDialog</code>

<li>, in which case the dialog window is closed.</li>

<h2>No-NPC Dialogs</h2>

<p>You can open a Dialog window that isn't associated with any</p>

<code>NPC</code>

<p>object in the scene. The</p>

<code>DialogWindow</code>

<p>object has all the same functionality as calling the</p>

<code>talk()</code>

<p>function on an NPC, but may be more practical in scenarios where a character isn't physically there, or where the conversation isn't with a particular character.</p>

<h3>The Dialog window</h3>

<p>To create a new dialog window, create a new</p>

<code>DialogWindow</code>

<p>object. This will instantiate the window but keep it hidden until you open it.</p>

<p>When instantiating a new DialogWindow, you can pass the following parameters:</p>

<code>defaultPortrait</code>

<li>: Sets a default portrait image to use on the left of all dialogs that don't specify an image. If a dialog has no portrait and no default is provided, no image is shown on the left. This field expects a</li>

<code>Portrait</code>

<li>object, that may include the following fields: -</li>

<code>path</code>

<li>: Path to the image file -</li>

<code>xOffset</code>

<li>: Offset on X, relative to the normal position of the portrait. -</li>

<code>yOffset</code>

<li>: Offset on Y, relative to the normal position of the portrait. -</li>

<code>section</code>

<li>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</li>

<code>ImageSection</code>

<li>object, specifying</li>

<code>sourceWidth</code>

<li>and</li>

<code>sourceHeight</code>

<li>, and optionally also</li>

<code>sourceLeft</code>

<li>and</li>

<code>sourceTop</code>

<li>.</li>

<code>useDarkTheme</code>

<li>: Switch the style of the window to the dark theme.</li>

<code>sound</code>

<li>: Path to a sound file that will be played once for every dialog entry shown, as long as the dialog entry doesn't have its own</li>

<code>audio</code>

<li>property.</li>

<p>Once a</p>

<code>DialogWindow</code>

<p>object is instanced, you can open a dialog window with the</p>

<code>openDialogWindow()</code>

<p>function.</p>

<p>When calling this function, you must specify:</p>

<code>NPCScript</code>

<li>: A JSON object composed of an array of</li>

<code>Dialog</code>

<li>objects, that includes all the dialog tree.</li>

<p>A second optional parameter is also available:</p>

<code>textId</code>

<li>: The index or</li>

<code>name</code>

<li>property of the entry to show first from the script. The first entry is 0.</li>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>Close a dialog window at any time by calling the</p>

<code>closeDialogWindow()</code>

<p>function.</p>

<p>For details on how to construct the dialog tree, see the sections above. The required</p>

<code>NPCScript</code>

<p>by the</p>

<code>DialogWindow</code>

<p>has exactly the same characteristics as the one used on the</p>

<code>NPC</code>

<p>object when calling the</p>

<code>talk()</code>

<p>function.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<li>Run</li>

<code>npm run build</code>

<li>for the internal files of the library to be generated</li>

<li>Run</li>

<code>npm run link</code>

<li>on this repository</li>

<li>On a new Decentraland scene, import this library as you normally would and include the tests you need</li>

<li>On the scene directory, run</li>

<code>npm link @dcl/npc-scene-utils</code>

<p>Note: When done testing, run</p>

<code>npm unlink</code>

<p>on both folders, so that the scene stops using the local version of the library.</p>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to atumatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<p>NPC tools for conversational NPCs</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>16</strong>

<h3>Watchers</h3>

<strong>6</strong>

<h3>Forks</h3>

<strong>19</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Certified-criptokitty

# URL: https://github.com/decentraland-scenes/Certified-criptokitty

<title>GitHub - decentraland-scenes/Certified-criptokitty: Displays an NFT taken from a contract address</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Displays an NFT taken from a contract address</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Certified-criptokitty</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Certified-criptokitty</h1>

<p>Displays an NFT taken from a contract address</p>

<p>This scene shows you:</p>

<li>How to display a 2D NFT in a picture frame in a scene</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Displays an NFT taken from a contract address</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Events-API

# URL: https://github.com/decentraland-scenes/Events-API

<title>GitHub - decentraland-scenes/Events-API: Call the Decentraland Events API to display events that are currently going on</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Call the Decentraland Events API to display events that are currently going on</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Events-API</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>17</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Events API Board</h1>

<p>Call the Decentraland Events API to display events that are currently going on. If there are several active at the same time, it will cycle through up to 5 events.</p>

<p>This scene shows you:</p>

<li>How to call the Decentraland Events API</li>

<li>How to handle async functions that require waiting for a response</li>

<li>How to parse a JSON response from an API</li>

<li>How to parse incoming text fields so that they adjust to line width and a maximum length</li>

<li>How to use a system to shuffle through different in-world UI screens</li>

<li>How to use a teleport to travel to other locations in Decentraland</li>

<p>Events that are currently going on have a</p>

<code>live</code>

<p>field =</p>

<em>true</em>

<p>, so it's easy to filter through the returned events to only pick those that are live.</p>

<p>The board displays the event's title, screenshot, location, and location name (if applicable). The board also works as a teleport when clicked, taking players to the currently displayed event.</p>

<h2>About the events API:</h2>

<p>Root URL:</p>

<p>Events are always ordered by their</p>

<code>start_at</code>

<p>time</p>

<p>optional params:</p>

<li>limit: only show x amount of events</li>

<li>offset: start showing events from x position onwards</li>

<li>position: a single event on x position</li>

<li>estate_id: only events that happen in a given estate</li>

<li>user: only events created by a given user</li>

<li>onlyUpcoming: only events that have not started yet</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>If there are no live events right now, you won't see the board when running the preview. If there are several live events, they will be shuffled through every few seconds, or you can also click on the dots on the bottom of the board to switch through them manually.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Call the Decentraland Events API to display events that are currently going on</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/piano-floor-example-scene

# URL: https://github.com/decentraland-scenes/piano-floor-example-scene

<title>GitHub - decentraland-scenes/piano-floor-example-scene: A piano floor where you walk on the keys to play.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A piano floor where you walk on the keys to play.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/piano-floor-example-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>15</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Piano Floor Example Scene</h1>

<em>demo of piano-floor-example-scene running in preview.</em>

<p>A piano floor where the player walks on the keys to play.</p>

<p>This scene shows you:</p>

<li>How to play sounds from files</li>

<li>How to change the material of a primitive shape</li>

<li>How to use the trigger area from the Utils library to activate something when a player walks over it</li>

<li>How to keep players synced by using the messagebus to communicate each player's actions to others</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Step on the keys to activate each note.</p>

<p>If there are multiple players in the scene, they should all hear what each other plays. You can simulate this by opening two browser tabs with the same preview.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A piano floor where you walk on the keys to play.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Zenquencer

# URL: https://github.com/decentraland-scenes/Zenquencer

<title>GitHub - decentraland-scenes/Zenquencer: A musical sequencer based on dragging stones into position</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A musical sequencer based on dragging stones into position</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Zenquencer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>10</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Zenquencer</h1>

<p>A sequencer that can be used to make music with others, writing musical patterns by activating stones.</p>

<p>When notes are played, activated or deactivated, these changes are shared with nearby players via the message bus. The note pattern is also stored in an Amazon S3 server.</p>

<p>This scene shows you:</p>

<li>How to use the message bus to keep players in sync with each other's actions while they're together in the scene</li>

<li>How to send HTTP requests to an API to store the scene state in a permanent place, so others can then retrieve changes</li>

<li>How to set up a server that is capable of handling the storage of data in a separate Amazon S3 server</li>

<li>How to obtain the realm that a player is currently on</li>

<li>How to play sounds from a file</li>

<li>How to use a system to coordinate the timing of various actions</li>

<li>How to use the utils library</li>

<code>Delay</code>

<li>component to buffer the updating various changes to the server</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of the same server that's used by Genesis Plaza. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>. To store data on an Amazon S3 server, as done here, you'll also need to set up your own Amazon S3, and fetch credentials for that account to include in your server folder.</p>

<h2>About syncing changes between players</h2>

<p>When a player comes into the scene, they download the latest pattern from off the server. Then, as different players that are there change the pattern, they get these changes from each other using the Message Bus, they donât need to check the server regularly to know whatâs new.</p>

<p>For this to work properly, we need to keep a separate version of this pattern for each realm and know what realm each player is on when they update the pattern. This is because only players that are in the same realm message each other via the Message Bus. There would otherwise be odd inconsistencies in what the pattern ends up being when players that are in different realms modify the same pattern without notifying each other. The scene includes the playerâs realm as part of the requests it sends, and the server then handles a different .json file depending on the realm.</p>

<p>Note: This works fine as long as the scene is deployed in one single place in the map. If various copies of the same scene exist and call the same server, writing to the same database, then that could be a problem. If two players are interacting with the two different versions of the scene, they will be acting upon the same database, but they won't share changes via the message bus. This will result in inconsistencies in between what each one sees and the final result being stored.</p>

<p>Another noteworthy thing weâre doing in this example is that changes arenât sent to the server right away, but instead we do a little buffer using the utils.Delay component, so that if the player changes several notes in quick succession, the server only gets notified of the final state of the pattern. This helps reduce the number of requests that the server needs to handle. For it to work, each update request needs to send the full state of the pattern, rather than just the changed elements.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>About</h2>

<p>A musical sequencer based on dragging stones into position</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/portal-ble-experience

# URL: https://github.com/decentraland-scenes/portal-ble-experience

<title>GitHub - decentraland-scenes/portal-ble-experience: A simple portable experience where you can create portals anywhere in the world</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/portal-ble-experience</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>portal-ble-experience</h1>

<h2>About</h2>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Genesis-Plaza

# URL: https://github.com/decentraland-scenes/Genesis-Plaza

<title>GitHub - decentraland-scenes/Genesis-Plaza: The newly revamped Genesis Plaza.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>The newly revamped Genesis Plaza.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Genesis-Plaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>38</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>772</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Genesis-Plaza</h1>

<em>A few screenshots of Genesis Plaza.</em>

<h2>Description</h2>

<p>The newly revamped</p>

<p>.</p>

<p>Read the behind the scenes from this scene in these blog posts:</p>

<p>This scene contains a lot of useful mechanics, including:</p>

<li>Interacting with an NPC</li>

<li>Fetching data from APIs</li>

<li>Adding teleports to other scenes</li>

<li>Adding external links outside Decentraland</li>

<li>Syncing player actions with the messagebus</li>

<li>Streaming audio</li>

<li>Streaming video</li>

<li>Displaying a custom UI</li>

<p>Because it can be hard to find specific things in such a large repository, some of the most interesting bits of the scene have been exported into their own example repos:</p>

<li>: A UI window presents texts from an NPC, allowing you to use the Right Click, E and F keys to advance the conversation or answer questions.</li>

<li>: Display a 2D NFT in a picture frame.</li>

<li>: Query the Decentraland Events API for any events that are currently active to display their info. If more than one, flip through them on the display.</li>

<li>: Play the keys of this piano by stepping on them. All players will hear the notes that are played.</li>

<li>: Create musical patterns that are played in sequence. Players are synced through both the messagebus and a DB in a server.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of the same server that's used by Genesis Plaza. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>. To store data on an Amazon S3 server, as done here, you'll also need to set up your own Amazon S3, and fetch credentials for that account to include in your server folder.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Links</h2>

<h2>Acknowledgements</h2>

<li>Thank you to</li>

<li>for providing sample code of the NPC used in</li>

<em>alice.mp3</em>

<li>modified from</li>

<em>bela.mp3</em>

<li>modified from</li>

<em>betty</em>

<li>.mp3_ modified from</li>

<em>bob.mp3</em>

<li>modified from</li>

<em>charlie</em>

<li>.mp3_ modified from</li>

<em>marsha.mp3</em>

<li>modified from</li>

<em>ron.mp3</em>

<li>modified from</li>

<em>beerPump.mp3</em>

<li>modified from</li>

<em>error.mp3</em>

<li>modified from</li>

<em>pickUp.mp3</em>

<li>modified from</li>

<em>putDown.mp3</em>

<li>modified from</li>

<em>swallow.mp3</em>

<li>modified from</li>

<em>micFeedback.mp3</em>

<li>modified from</li>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>The newly revamped Genesis Plaza.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>20</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>17</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/conway-game-of-life

# URL: https://github.com/decentraland-scenes/conway-game-of-life

<title>GitHub - decentraland-scenes/conway-game-of-life</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/conway-game-of-life</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Conway Game of Life</h1>

<p>A scene that implements the Conway Game of Life</p>

<p>More info:</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/deploy-to-decentraland

# Change to URL: https://github.com/decentraland-scenes/Quest-drink-of-the-gods-2023

# URL: https://github.com/decentraland-scenes/Quest-drink-of-the-gods-2023

<title>GitHub - decentraland-scenes/Quest-drink-of-the-gods-2023: A scene showing a working quest</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene showing a working quest</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Quest-drink-of-the-gods-2023</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Template scene</h1>

<h2>Try it out</h2>

<strong>Previewing the scene</strong>

<p>Download this repository.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>What's new on SDK 7</h2>

<p>Below are some basic concepts about the SDK 7 syntax. For more details, see the</p>

<p>.</p>

<h3>Entities</h3>

<p>An Entity is just an ID. It is an abstract concept not represented by any data structure. There is no "class Entity". Just a number that is used as a reference to group different components.</p>

<p>Note: Note that it's no longer necessary to separately create an entity and then add it to the engine, this is all done in a single act.</p>

<h3>Components</h3>

<p>The component is just a data container, WITHOUT any functions.</p>

<p>To add a component to an entity, the entry point is now the component type, not the entity.</p>

<p>This is different from how the syntax was in SDK6:</p>

<h4>Base Components</h4>

<p>Base components already come packed as part of the SDK. Most of them interact directly with the renderer in some way. This is the full list of currently supported base components:</p>

<li>Transform</li>

<li>Animator</li>

<li>Material</li>

<li>MeshRenderer</li>

<li>MeshCollider</li>

<li>AudioSource</li>

<li>AudioStream</li>

<li>AvatarAttach</li>

<li>AvatarModifierArea</li>

<li>AvatarShape</li>

<li>Billboard</li>

<li>CameraMode</li>

<li>CameraModeArea</li>

<li>GltfContainer</li>

<li>NftShape</li>

<li>PointerEventsResult</li>

<li>PointerHoverFeedback</li>

<li>PointerLock</li>

<li>Raycast</li>

<li>RaycastResult</li>

<li>TextShape</li>

<li>VisibilityComponent</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Custom Components</h4>

<p>Each component must have a unique number ID. If a number is repeated, the engine or another player receiving updates might apply changes to the wrong component. Note that numbers 1-2000 are reserved for the base components.</p>

<p>When creating a custom component you declare the schema of the data to be stored in it. Every field in a component MUST belong to one of the built-in special schemas provided as part of the SDK. These special schemas include extra functionality that allows them to be serialized/deserialized.</p>

<p>Currently, the names of these special schemas are:</p>

<h5>Primitives</h5>

<code>Schemas.Boolean</code>

<li>: true or false (serialized as a Byte)</li>

<code>Schemas.String</code>

<li>: UTF8 strings (serialized length and content)</li>

<code>Schemas.Float</code>

<li>: single precission float</li>

<code>Schemas.Double</code>

<li>: double precision float</li>

<code>Schemas.Byte</code>

<li>: a single byte, integer with range 0..255</li>

<code>Schemas.Short</code>

<li>: 16 bits signed-integer with range -32768..32767</li>

<code>Schemas.Int</code>

<li>: 32 bits signed-integer with range -2Â³Â¹..(2Â³Â¹-1)</li>

<code>Schemas.Int64</code>

<li>: 64 bits signed-integer</li>

<code>Schemas.Number</code>

<li>: an alias to Schemas.Float</li>

<h5>Specials</h5>

<code>Schemas.Entity</code>

<li>: a wrapper to int32 that casts the type to</li>

<code>Entity</code>

<code>Schemas.Vector3</code>

<li>: a Vector3 with { x, y, z }</li>

<code>Schemas.Quaternion</code>

<li>: a Quaternion with { x, y, z, w}</li>

<code>Schemas.Color3</code>

<li>: a Color3 with { r, g, b }</li>

<code>Schemas.Color4</code>

<li>: a Colo4 with { r, g, b, a }</li>

<h5>Schema generator</h5>

<code>Schemas.Enum</code>

<li>: passing the serialization Schema and the original Enum as generic</li>

<code>Schemas.Array</code>

<li>: passing the item Schema</li>

<code>Schemas.Map</code>

<li>: passing a Map with Schemas as values</li>

<code>Schemas.Optional</code>

<li>: passing the schema to serialize</li>

<p>Below are some examples of how these schemas can be declared.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To then create a custom component using one of these schemas, use the following syntax:</p>

<p>For contrast, below is an example of how components were constructed prior to SDK 7.</p>

<pre>@</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Systems</h3>

<p>Systems are pure & simple functions.

All your logic comes here.

A system might hold data which is relevant to the system itself, but no data about the entities it processes.</p>

<p>To add a system, all you need to do is define a function and add it to the engine. The function may optionally include a</p>

<code>dt</code>

<p>parameter with the delay since last frame, just like in prior versions of the SDK.</p>

<pre>:</pre>

<h4>Query components</h4>

<p>The way to group/query the components inside systems is using the method getEntitiesWith.</p>

<code>engine.getEntitiesWith(...components)</code>

<p>.</p>

<pre>:</pre>

<h3>Mutability</h3>

<p>Mutability is now an important distinction. We can choose to deal with mutable or with immutable versions of a component. We should use</p>

<code>getMutable</code>

<p>only when we plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can't change any of the properties on it.</p>

<p>To fetch the mutable version of a component, call it via</p>

<code>ComponentDefinition.getMutable()</code>

<p>. For example:</p>

<h2>About</h2>

<p>A scene showing a working quest</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>0</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/moving-platforms

# URL: https://github.com/decentraland-scenes/moving-platforms

<title>GitHub - decentraland-scenes/moving-platforms: A simple platformer that demonstrates various platform movements using code.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/moving-platforms</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Moving Platforms</h1>

<em>demo of moving-platforms scene running in preview.</em>

<h2>Description</h2>

<p>A simple platformer that demonstrates various platform movements using code, which then enables you to sync up the position of the platforms with other players in the scene should you choose to do so. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>The aim is to collect the coin by moving and jumping between platforms. Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>Acknowledgements</h2>

<em>coinPickup.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/block-portable-experiences

# URL: https://github.com/decentraland-scenes/block-portable-experiences

<title>GitHub - decentraland-scenes/block-portable-experiences: Forbid players from claiming a prize if wearing any portable experience</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/block-portable-experiences</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Block Smart Wearables</h1>

<p>Forbid players from claiming a prize if having any smart wearables or portable experiences on.</p>

<p>The scene includes a series of slightly challenging jumps up to the top, and a treasure to claim at the end. This scene checks if a player is wearing a smart wearable or has a portable experience active, such as a jetpack or any other item that might allow the player to have an unfair advantage over others. It also makes sure the player hasn't had a portable experience on at any given time since having stepped into the scene's parcels.</p>

<p>To enjoy the scene in full, the player must disable all portable experiences (either by deactivating them or by taking off their corresponding wearables), then step out of the scene and back in.</p>

<p>Note: An easier but more abrupt alternative is to use the "portableExperiences" feature toggle in scene.json. This will turn off any portable experiences for the player as soon as they walk in, read more</p>

<p>.</p>

<p>The scene does the following checks:</p>

<li>It checks for portable experiences upon loading</li>

<li>It listens for avatar change events, then checks for portable experiences, in case the player has put on a smart wearable.</li>

<li>It checks for portable experiences again when the player steps into the scene</li>

<h2>About</h2>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/greenScreen

# URL: https://github.com/decentraland-scenes/greenScreen

<title>GitHub - decentraland-scenes/greenScreen: Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/greenScreen</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Green Screen</h1>

<p>A simple single-parcel Green Screen Scene. Ideal for photoshoots and showing off wearables or emotes in videos.</p>

<p>You can switch background colors by clicking on the different sphere buttons.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/dcl-access-library

# URL: https://github.com/decentraland-scenes/dcl-access-library

<title>GitHub - decentraland-scenes/dcl-access-library: A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-access-library</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Simple Example with dcl-access library</h1>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>This scene shows you:</p>

<li>How to block players who don't own a certain token from entering an area</li>

<li>How to block players who don't own a certain token from entering an area</li>

<li>How to block players who don't aren't currently wearing a certain wearable from entering an area</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.

Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Weather-simulation

# URL: https://github.com/decentraland-scenes/Weather-simulation

<title>GitHub - decentraland-scenes/Weather-simulation: A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Weather-simulation</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Weather API</h2>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes

Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>This scene shows you:</p>

<li>How to call a REST API and parse a JSON response</li>

<li>How to conditionally render different scenarios based on the API's responses</li>

<li>How to simulate rain by moving multiple entities down and recycling them</li>

<li>How to sumulate snow by slowly moving arnd rotating multiple entities down and recyling them</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>You need create an account on the the</p>

<p>. Then, replace the values of the fields</p>

<code>appId</code>

<p>and</p>

<code>APIkey</code>

<p>with your own credentials.</p>

<p>You can also replace the values of</p>

<code>lat</code>

<p>and</p>

<code>lon</code>

<p>to access weather data from a different location. By default they're set to point to the city of Buenos Aires.</p>

<p>Modify the value of</p>

<code>fakeWeather</code>

<p>to see different weather conditions independently of what the real weather is. For example, if you set it to "snow" you will see snow. If</p>

<code>fakeWeather = null</code>

<p>, the scene will call the weather API with your credentials.</p>

<p>You can also modify</p>

<code>dropSpeed</code>

<p>and</p>

<code>flakeSpeed</code>

<p>to change the speed at which raindrops or snowflakes fall. This speed is the amount of milliseconds it takes them to fall.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>8</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Laser-ray-casting

# URL: https://github.com/decentraland-scenes/Laser-ray-casting

<title>GitHub - decentraland-scenes/Laser-ray-casting: A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Laser-ray-casting</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Laser ray casting</h2>

<p>A scene that shows how</p>

<p>can be used to trace an imaginary line in space and check for object collision.</p>

<p>This scene shows you:</p>

<li>How to use ray cast to check if an entity intersects with a line in space</li>

<li>How to use ray cast to check if an entity is being pointed at by the player</li>

<li>How to change a material on a primitive shape</li>

<li>How to use a system to keep moving multiple entities as in a conveyor</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Notice that boxes that intersect with the laser change their material and become emissive while being hit. Also, if you point your cursor at a box it will change its color to green.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Jukebox

# URL: https://github.com/decentraland-scenes/Jukebox

<title>GitHub - decentraland-scenes/Jukebox: A scene where you can play different songs by pressing buttons on a jukebox.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Jukebox</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>29</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Jukebox</h2>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>This scene shows you</p>

<li>How to play audio from a file</li>

<li>How to use systems to move entities gradually</li>

<li>How to use a</li>

<code>Lerp()</code>

<li>function to gradually move something from a starting point to an ending point over a given time</li>

<li>How to handle click events</li>

<li>How to arrange entities into parents and children to position them relative to each other</li>

<li>How to create custom components to store custom data</li>

<li>How to use component groups to handle multiple entities</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click the buttons on the jukebox to select different songs. Any other currently playing song is stopped and is button is unpressed.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Castaway-2048

# URL: https://github.com/decentraland-scenes/Castaway-2048

<title>GitHub - decentraland-scenes/Castaway-2048: A fully fledged game, based on the popular game 2048.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A fully fledged game, based on the popular game 2048.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Castaway-2048</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>35</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Castaway 2048</h1>

<p>A fully fledged game, based on the popular game 2048, where the values are represented by a series of gems of increasing values. Click and drag to displace the gems on the board and merge them into greater values till you reach 2048.</p>

<p>This scene shows you</p>

<li>How to capture global mouse events and detect swipes in different directions</li>

<li>How to handle the spawning and recycling of entities with an entity pool</li>

<li>How to handle moving of various entities over positions on a grid</li>

<li>How to use component groups to treat many entities of a same type in the same ways</li>

<li>How to create custom components to store custom data</li>

<li>How to use systems to carry out changes in the game</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click the treasure chest to open it or to reset the game.</p>

<p>Click and drag in a direction to move all the gems in that direction. If two identical gems are merged, they grow into a more valuable one, keep merging them until you reach one of 2048 value.</p>

<p>If all the spaces are full and you can't free them by merging gems, you loose.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A fully fledged game, based on the popular game 2048.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/cube-jumper-colyesus-sdk7

# URL: https://github.com/decentraland-scenes/cube-jumper-colyesus-sdk7

<title>GitHub - decentraland-scenes/cube-jumper-colyesus-sdk7: port of https://github.com/colyseus/decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>port of</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/cube-jumper-colyesus-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>27</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Cube Jumper SDK7 Test scene</h1>

<p>This scene is built with the SDK7 in alpha state.</p>

<p>Port of</p>

<p>v15

@colyseus/arena => @colyseus/tools</p>

<li>"colyseus.js": "^0.15.0-preview.7"</li>

<li>"colyseus.js": "0.14.15-alpha.0"</li>

<h1>New ECS for SDK7</h1>

<h2>Entities</h2>

<p>An Entity is just an ID. It is an abstract concept not represented by any data structure. There is no "class Entity". Just a number that is used as a reference to group different components.</p>

<p>Note: Note that it's no longer necessary to separately create an entity and then add it to the engine, this is all done in a single act.</p>

<h2>Components</h2>

<p>The component is just a data container, WITHOUT any functions.</p>

<p>To add a component to an entity, the entry point is now the component type, not the entity.</p>

<p>This is different from how the syntax was in SDK6:</p>

<h3>Base Components</h3>

<p>Base components already come packed as part of the SDK. Most of them interact directly with the renderer in some way. This is the full list of currently supported base components:</p>

<li>Transform</li>

<li>Animator</li>

<li>Material</li>

<li>MeshRenderer</li>

<li>MeshCollider</li>

<li>AudioSource</li>

<li>AudioStream</li>

<li>AvatarAttach</li>

<li>AvatarModifierArea</li>

<li>AvatarShape</li>

<li>Billboard</li>

<li>CameraMode</li>

<li>CameraModeArea</li>

<li>GltfContainer</li>

<li>NftShape</li>

<li>PointerEventsResult</li>

<li>PointerHoverFeedback</li>

<li>PointerLock</li>

<li>Raycast</li>

<li>RaycastResult</li>

<li>TextShape</li>

<li>VisibilityComponent</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>Custom Components</h3>

<p>Each component must have a unique number ID. If a number is repeated, the engine or another player receiving updates might apply changes to the wrong component. Note that numbers 1-2000 are reserved for the base components.</p>

<p>When creating a custom component you declare the schema of the data to be stored in it. Every field in a component MUST belong to one of the built-in special schemas provided as part of the SDK. These special schemas include extra functionality that allows them to be serialized/deserialized.</p>

<p>Currently, the names of these special schemas are:</p>

<h4>Primitives</h4>

<code>Schemas.Boolean</code>

<li>: true or false (serialized as a Byte)</li>

<code>Schemas.String</code>

<li>: UTF8 strings (serialized length and content)</li>

<code>Schemas.Float</code>

<li>: single precission float</li>

<code>Schemas.Double</code>

<li>: double precision float</li>

<code>Schemas.Byte</code>

<li>: a single byte, integer with range 0..255</li>

<code>Schemas.Short</code>

<li>: 16 bits signed-integer with range -32768..32767</li>

<code>Schemas.Int</code>

<li>: 32 bits signed-integer with range -2Â³Â¹..(2Â³Â¹-1)</li>

<code>Schemas.Int64</code>

<li>: 64 bits signed-integer</li>

<code>Schemas.Number</code>

<li>: an alias to Schemas.Float</li>

<h4>Specials</h4>

<code>Schemas.Entity</code>

<li>: a wrapper to int32 that casts the type to</li>

<code>Entity</code>

<code>Schemas.Vector3</code>

<li>: a Vector3 with { x, y, z }</li>

<code>Schemas.Quaternion</code>

<li>: a Quaternion with { x, y, z, w}</li>

<code>Schemas.Color3</code>

<li>: a Color3 with { r, g, b }</li>

<code>Schemas.Color4</code>

<li>: a Colo4 with { r, g, b, a }</li>

<h4>Schema generator</h4>

<code>Schemas.Enum</code>

<li>: passing the serialization Schema and the original Enum as generic</li>

<code>Schemas.Array</code>

<li>: passing the item Schema</li>

<code>Schemas.Map</code>

<li>: passing a Map with Schemas as values</li>

<code>Schemas.Optional</code>

<li>: passing the schema to serialize</li>

<p>Below are some examples of how these schemas can be declared.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>To then create a custom component using one of these schemas, use the following syntax:</p>

<p>For contrast, below is an example of how components were constructed prior to SDK 7.</p>

<pre>@</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Systems</h2>

<p>Systems are pure & simple functions.

All your logic comes here.

A system might hold data which is relevant to the system itself, but no data about the entities it processes.</p>

<p>To add a system, all you need to do is define a function and add it to the engine. The function may optionally include a</p>

<code>dt</code>

<p>parameter with the delay since last frame, just like in prior versions of the SDK.</p>

<pre>:</pre>

<h3>Query components</h3>

<p>The way to group/query the components inside systems is using the method getEntitiesWith.</p>

<code>engine.getEntitiesWith(...components)</code>

<p>.</p>

<pre>:</pre>

<h2>Mutability</h2>

<p>Mutability is now an important distinction. We can choose to deal with mutable or with immutable versions of a component. We should use</p>

<code>getMutable</code>

<p>only when we plan to make changes to a component. Dealing with immutable versions of components results in a huge gain in performance.</p>

<p>The</p>

<code>.get()</code>

<p>function in a component returns an immutable version of the component. You can only read its values, but can't change any of the properties on it.</p>

<p>To fetch the mutable version of a component, call it via</p>

<code>ComponentDefinition.getMutable()</code>

<p>. For example:</p>

<h2>About</h2>

<p>port of</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/colyseus/decentraland

# URL: https://github.com/colyseus/decentraland

<title>GitHub - colyseus/decentraland: Colyseus + Decentraland demonstration</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Colyseus + Decentraland demonstration</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>colyseus/decentraland</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Colyseus + Decentraland</h1>

<p>See how to use it on</p>

<p>or</p>

<p>.</p>

<h2>License</h2>

<p>MIT</p>

<h2>About</h2>

<p>Colyseus + Decentraland demonstration</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>12</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/colyseus--decentraland

# Change to URL: https://github.com/decentraland-scenes/inworld-ai-colyseus-proxy-service

# URL: https://github.com/decentraland-scenes/inworld-ai-colyseus-proxy-service

<title>GitHub - decentraland-scenes/inworld-ai-colyseus-proxy-service</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/inworld-ai-colyseus-proxy-service</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Welcome to Inworld AI Colyseus Service!</h1>

<p>Inworld AI JS SDK is not compatible with DCL runtime (depends on too many things the Decentraland runtime does not have out of the box). This provides a workaround by acting as a proxy.  There are benefits to this approach such as the ability upgrade the SDK, bug fixing (to some extent) to optimize and the connection on the server instead of on the client.</p>

<p>This project has been created using</p>

<code>create-colyseus-app</code>

<p>- an npm init template for kick starting a Colyseus project in TypeScript.</p>

<h2>âï¸ Usage</h2>

<p>In the proxy server code folder, from terminal run</p>

<code>npm install</code>

<p>only required the first time</p>

<p>Start server</p>

<code>npm run start</code>

<p>You will see the following meaning it started successfully.  You may visit localhost:2567 this URL in a browser to also verify</p>

<code>ð  Your Colyseus App

âï¸  Listening on ws://localhost:2567</code>

<h2>Configuration</h2>

<h3>Proxy Server</h3>

<code>development.env</code>

<p>- configuration for local server</p>

<code>arena.env</code>

<p>- configuration for deployed server</p>

<p>In both of these you will find configuration that needs to be updated.</p>

<p>NOTE: Server must be restarted to pick up changes.</p>

<code># configuration for NpcChatRoom.ts should you connnect directly to it

NPC_ROOM_INWORLD_KEY= SECRET

NPC_ROOM_INWORLD_SECRET= SECRET

NPC_ROOM_INWORLD_SCENE=workspaces/{WORKSPACE_NAME}/scenes/{SCENE_NAME}

# configuration for GenesisPlazaRoom should you connnect to this room

GENESIS_CITY_NPC_ROOM_INWORLD_KEY= SECRET

GENESIS_CITY_NPC_ROOM_INWORLD_SECRET= SECRET

GENESIS_CITY_NPC_ROOM_INWORLD_SCENE=workspaces/{WORKSPACE_NAME}/scenes/{SCENE_NAME}</code>

<code>INWORLD_KEY</code>

<p>and</p>

<code>INWORLD_SECRET</code>

<p>Go to the InWorld AI studio.  Under the Integrations section you will create a key and secret</p>

<code>INWORLD_SCENE</code>

<p>will be taken from the URL of your created scene</p>

<h2>Structure</h2>

<code>index.ts</code>

<li>: main entry point, register an empty room handler and attach</li>

<code>@colyseus/monitor</code>

<code>src/rooms/MyRoom.ts</code>

<li>: an empty room handler for you to implement your logic</li>

<code>src/rooms/schema/NpcChatRoom.ts</code>

<li>: is the room you that handles proxying requests to and from Inworld AI.</li>

<code>src/rooms/schema/GenesisPlazaRoom.ts</code>

<li>: is the room you will connect to using a command pattern passing calls to NpcChatRoom.  This allows you to put other game logic in here and keep it encapsulated</li>

<code>loadtest/example.ts</code>

<li>: scriptable client for the loadtest tool (see</li>

<code>npm run loadtest</code>

<li>)</li>

<code>package.json</code>

<li>:</li>

<code>scripts</code>

<li>:</li>

<code>npm start</code>

<li>: runs</li>

<code>ts-node-dev index.ts</code>

<code>npm run loadtest</code>

<li>: runs the</li>

<code>@colyseus/loadtest</code>

<li>tool for testing the connection, using the</li>

<code>loadtest/example.ts</code>

<li>script.</li>

<code>tsconfig.json</code>

<li>: TypeScript configuration file</li>

<h2>License</h2>

<p>MIT</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/colyseus-sdk7

# URL: https://github.com/decentraland-scenes/colyseus-sdk7

<title>GitHub - decentraland-scenes/colyseus-sdk7: colyseus-sdk7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>colyseus-sdk7</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/colyseus-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Colyseus Template scene</h1>

<h2>Try it out</h2>

<code>npm run start</code>

<h2>About</h2>

<p>colyseus-sdk7</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/store-template-scene

# URL: https://github.com/decentraland-scenes/store-template-scene

<title>GitHub - decentraland-scenes/store-template-scene: A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/store-template-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Store Template</h1>

<p>A large template scene with default art, meant for using in Worlds, 10 x 10 parcels. The scene doesn't include anything interactive.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command inside this scene root directory:</p>

<pre>npm install @dcl/sdk@next</pre>

<strong>Previewing the scene</strong>

<p>Download this full repository from</p>

<p>, including this and several other example scenes on SDK7.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Streaming-Theatre

# URL: https://github.com/decentraland-scenes/Streaming-Theatre

<title>GitHub - decentraland-scenes/Streaming-Theatre: A large scene for worlds, with a simple screen ready for streaming video</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Streaming-Theatre</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Streaming Theatre Template</h1>

<p>A large scene for worlds, with a screen ready for streaming video.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command inside this scene root directory:</p>

<pre>npm install @dcl/sdk@next</pre>

<strong>Previewing the scene</strong>

<p>Download this full repository from</p>

<p>, including this and several other example scenes on SDK7.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/mansion-template-scene

# URL: https://github.com/decentraland-scenes/mansion-template-scene

<title>GitHub - decentraland-scenes/mansion-template-scene: A simple scene with default art meant for Worlds, with 10x10 parcels</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/mansion-template-scene</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>9</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Mansion Template</h1>

<p>A large template scene with default art, meant for using in Worlds, 10 x 10 parcels. The scene doesn't include anything interactive.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command inside this scene root directory:</p>

<pre>npm install @dcl/sdk@next</pre>

<strong>Previewing the scene</strong>

<p>Download this full repository from</p>

<p>, including this and several other example scenes on SDK7.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Office-template

# URL: https://github.com/decentraland-scenes/Office-template

<title>GitHub - decentraland-scenes/Office-template: A template scene with default art, featuring an office. This is built for using in Worlds</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Office-template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Office Template</h1>

<p>A large template scene with default art, meant for using in Worlds, 10 x 10 parcels. The scene doesn't include anything interactive.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command inside this scene root directory:</p>

<pre>npm install @dcl/sdk@next</pre>

<strong>Previewing the scene</strong>

<p>Download this full repository from</p>

<p>, including this and several other example scenes on SDK7.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Nightclub-template

# URL: https://github.com/decentraland-scenes/Nightclub-template

<title>GitHub - decentraland-scenes/Nightclub-template: A large scene for worlds, with default art, featuring a cool nightclub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Nightclub-template</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>SDK7 Nighclub template</h1>

<p>A large scene with default art for a nightclub. Contains default art, several animated models with effects, that aren't playing by default. It includes a large screen with a video stream.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command inside this scene root directory:</p>

<pre>npm install @dcl/sdk@next</pre>

<strong>Previewing the scene</strong>

<p>Download this full repository from</p>

<p>, including this and several other example scenes on SDK7.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/skybox-ai-sdk7

# URL: https://github.com/decentraland-scenes/skybox-ai-sdk7

<title>GitHub - decentraland-scenes/skybox-ai-sdk7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/skybox-ai-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>15</strong>

<h2>Files</h2>

<button>View code</button>

<h1>AI Generated Skybox</h1>

<p>This scene uses a Blockade Gamesâ</p>

<p>to build a skybox around the player. Note that this requires a pretty large scene area, ideally in a Decentraland World.</p>

<p>The scene maps the texture generated by this tool to a large cube, which is attached to the player's position, and moves together with the player to maintain the illusion of the background being always out of reach.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command inside this scene root directory:</p>

<pre>npm install @dcl/sdk@next</pre>

<strong>Previewing the scene</strong>

<p>Download this full repository from</p>

<p>, including this and several other example scenes on SDK7.</p>

<p>Install the</p>

<p>Open a Visual Studio Code window on this scene's root folder. Not on the root folder of the whole repo, but instead on this sub-folder that belongs to the scene.</p>

<p>Open the Decentraland Editor tab, and press</p>

<strong>Run Scene</strong>

<p>Alternatively, you can use the command line. Inside this scene root directory run:</p>

<code>npm run start</code>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 license. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/inworld-ai-sdk7

# URL: https://github.com/decentraland-scenes/inworld-ai-sdk7

<title>GitHub - decentraland-scenes/inworld-ai-sdk7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/inworld-ai-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>7</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>84</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Inworld.ai Example</h1>

<p>This is an example scene to create AI NPCs SDK7 backed by</p>

<p>service</p>

<p>Deployed here</p>

<p>Zone (InworldAiSdk7.dcl.eth)</p>

<h2>Code</h2>

<p>RemoteNpc (</p>

<code>src/remoteNpc.ts</code>

<p>) is a new class that wraps the existing NPC object. See for more details there</p>

<p>.</p>

<p>It adds the additional configuration for an NPC that talks to a remote server for the dialog.</p>

<p>StreamedMessage (</p>

<code>src/streamedMsgs.ts</code>

<p>) is a utilty that implements an Iterator pattern to enable the scene to group messages from Inworld and use them with the NPC Dialog in a serial and squential way.</p>

<code>received stream of all Inworld messages all at once

show utterance1

player clicks next

show utterance2

player clicks next</code>

<h2>Customize</h2>

<code>src/NPCs/customUi.ts</code>

<p>creates a custom 2D UI to enable the player to type a question for the NPC. Customize this as you want</p>

<h2>Configuration</h2>

<h3>Scene</h3>

<p>You may want to configure endpoints for your local environment in the instance where you do not want or need to run Colyseus and login server locally</p>

<p>Found in</p>

<code>src/config.ts</code>

<p>there are variables in the following format so you could have configurations for multiple environments</p>

<code>const VARIABLE: Record<string, string> = {

  local: "local value",

  dev: "dev value",

  stg: "staging value",

  prd: "production value",

};</code>

<code>ENV</code>

<p>- The environment for which values are to be used (local,dev,prod,etc.)</p>

<code>COLYSEUS_ENDPOINT_URL</code>

<p>- Websocker endpoint</p>

<code>const COLYSEUS_ENDPOINT_URL: Record<string, string> = {

  local: "ws://127.0.0.1:2567",  //default local server port

  dev: "YOUR-DEV-ENDPOINT-HERE",

  stg: "YOUR-STG-ENDPOINT-HERE",

  prd: "YOUR-PROD-ENDPOINT-HERE",

};</code>

<h3>Should you make your own Inworld Scene and Characters</h3>

<p>src/npcSetup.ts</p>

<code>const myRemoteNPC = new RemoteNpc(

    {resourceName:"workspaces/{SCENE_NAME_HERE/characters/{CHARACTER_NAME_HERE}"}

    //CONFIG FOR NPC (from dcl-npc-tookit)

    {

        type: npcLib.NPCType.CUSTOM,

        model: {},

        onActivate: () => {}

    },

    //ADDITIONAL CONFIG FOR REMOTE NPC

    {

      predefinedQuestions: NpcQuestionData[],

      npcAnimations:DOGE_NPC_ANIMATIONS,

      thinking:{

        enabled:true,

        model: new GLTFShape('models/loading-icon.glb'),

        offsetX: 0,

        offsetY: 2 ,

        offsetZ: 0

      }

      ,onEndOfRemoteInteractionStream: ()=>{

        showInputOverlay(true)

      }

      ,onEndOfInteraction: ()=>{

        //end of interaction

      }

    }

  }</code>

<h2>Try it out</h2>

<h4>Run Colyseus (Multiplayer server) (seperate tab)</h4>

<p>Optional...if you only want to see the code in action no need run the proxy server. The example scene is pointed our Genesis Plaza proxy server so you should be able to fully run these example scene without the server side. Should you choose create your own scene and characters you will need to run your own server.</p>

<p>To create your own scene and characters follow the documentation found here</p>

<p>. Once you are finished run your local server.</p>

<p>Instructions here</p>

<p>Default endpoint can be found at</p>

<p>In the Decentrlaand scene code Change in src/config.ts to point at your local</p>

<code>const ENV = "prd"

to

const ENV = "local"</code>

<p>This will make is so your scene uses local: "ws://127.0.0.1:2567" from the COLYSEUS_ENDPOINT_URL varaible</p>

<p>Full instructions for running the proxy server can be found here Instructions here</p>

<h4>Run Decentraland Scene (seperate tab)</h4>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  npm run start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the NPC to start a conversation, use E and F keys to choose options when prompted.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/run-decentraland-scene-seperate-tab

# Change to URL: https://github.com/decentraland-scenes/avocado

# URL: https://github.com/decentraland-scenes/avocado

<title>GitHub - decentraland-scenes/avocado: Basic 101 Avocado Tutorial</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Basic 101 Avocado Tutorial</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/avocado</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Avocado</h2>

<p>A 101 first example scene to learn the basics of the Decentraland SDK.</p>

<p>See</p>

<p>This scene shows you:</p>

<li>How to add an entity</li>

<li>How to assign a 3D model to an entity</li>

<li>How to position an entity</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the door to open and close it.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Basic 101 Avocado Tutorial</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>8</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/wearables-store

# URL: https://github.com/decentraland-scenes/wearables-store

<title>GitHub - decentraland-scenes/wearables-store</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/wearables-store</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>39</strong>

<h2>Files</h2>

<button>View code</button>

<p>Flat Screen TV version of the Decentraland Wearable store

by DOCTORdripp</p>

<p>This 1-tier flat screen revision can be repurposed onto any flat space. Optionally replace</p>

<code>models/menu/wardrobe.glb</code>

<p>with your custom model or an empty model if you wish to position a flat store on a wall.</p>

<h1>Wearables Store</h1>

<p>This store allows you to purchase wearables on the Polygon L2 layer from an in-world.</p>

<p>The scene is configured to display all of the wearables currently on sale on L2. You can configure this scene to only display certain collections of wearables, for example to have a private store with only your collections.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start --web3</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Note: When running a preview of a scene that uses one of the ethereum libraries, you must have Metamask or Dapper open and you must add this string.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Scene usage</h2>

<p>Click on the menu on the right to navigate the different collections. When a collection is selected, use E and F to scroll through the different items in that collection. Then select an item to see more details.</p>

<p>To buy an item, hit the</p>

<code>Buy</code>

<p>button. Note that you must be connected with a web3 browser extension by starting the preview with</p>

<code>dcl start --web3</code>

<p>, and the connected account must have MANA on the Polygon network.</p>

<p>On your first transaction, the UI will ask you to first sign an approval for letting this contract spend your Polygon MANA. This transaction is free of charge, as it runs on the Polygon network.</p>

<p>As of then, any purchases you do via this store will require no gas, only the cost in MANA of the item itself. You approve them by signing a message on Metamask or your web3 browser extension of choice.</p>

<h2>Customize</h2>

<p>In the current scene, in game.ts, you'll notice there are two wearable wardrobes being created. A simple one that by default displays all of the available L2 wearables, and one that is configured to only display specific collections.</p>

<pre>:</pre>

<pre>:</pre>

<p>The</p>

<code>createWearableStore()</code>

<p>function takes the following arguments</p>

<li>A transform component, with position, rotation & scale</li>

<li>An optional array of all the wearable collections you want it to display. If none are provided, it displays all wearables in L2.</li>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>10</strong>

<h3>Watchers</h3>

<strong>5</strong>

<h3>Forks</h3>

<strong>7</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=2

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=2

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A zombie will chase you around and attack you once it gets near.</p>

<p>Crypto Valley art gallery</p>

<p>This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the Show Management Library</p>

<p>Signed fetch base implementation</p>

<p>The full Soho Plaza in Genesis City</p>

<p>Dressable AvatarShape scene where the user can flip through several wearables and outfits on a mannequin</p>

<p>Decentraland Foundation HQ Building</p>

<p>A puffer fish that inflates and deflates when clicked. This scene uses the Utils library.</p>

<p>A cutting edge racing game</p>

<p>A simple scene showing how to create a leader board for high scores</p>

<p>Sign a guestbook. User names are stored in a RESFful API, whic is also included in this repo.</p>

<p>A musical sequencer based on dragging stones into position</p>

<p>Tutorial for multiplayer with Colyseus</p>

<p>Route OSC messages to Decentraland scenes, via Colyseus</p>

<p>A multiplayer game with websockets</p>

<p>A simple scene with an interactive booth that gives out POAP tokens to certify the player's attendance to an event</p>

<em>2</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/AI_Generated-skybox_SDK7

# URL: https://github.com/decentraland-scenes/AI_Generated-skybox_SDK7

<title>decentraland-scenes/AI_Generated-skybox_SDK7 Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h3>This repository is empty.</h3>

<p>Care to check out the</p>

<p>while you wait?</p>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/dcl-npc-toolkit-demo

# URL: https://github.com/decentraland-scenes/dcl-npc-toolkit-demo

<title>GitHub - decentraland-scenes/dcl-npc-toolkit-demo</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-npc-toolkit-demo</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>NPC-library</h1>

<p>A collection of tools for creating Non-Player-Characters (NPCs). These are capable of having conversations with the player, and play different animations.</p>

<p>Capabilities of the NPCs in this library:</p>

<p>Start a conversation when clicked or when walking near</p>

<p>Trigger any action when clicked or when walking near</p>

<p>Trigger any action when the player walks away</p>

<p>Turn around slowly to always face the player</p>

<p>Play an animation in the NPC 3d model, optionally returning to loop the idle animation afterwards</p>

<p>The dialog messages can also require that the player chooses options, and any action can be triggered when the player picks an option or advances past a message.</p>

<p>To use NPCs in your scene:</p>

<li>Install the library as an npm bundle. Run this command in your scene's project folder:</li>

<code>npm i dcl-npc-toolkit -B</code>

<p>Run</p>

<code>dcl start</code>

<p>or</p>

<code>dcl build</code>

<p>so the dependencies are correctly installed.</p>

<p>Import the library into the scene's script. Add this line at the start of your</p>

<code>game.ts</code>

<p>file, or any other TypeScript files that require it:</p>

<li>In your TypeScript file, call the</li>

<code>create</code>

<li>function passing it a</li>

<code>TransformType</code>

<li>and a</li>

<code>NPCData</code>

<li>object. The</li>

<code>NPCData</code>

<li>object requires a minimum of a</li>

<code>NPCType</code>

<li>and a function to trigger when the NPC is activated:</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<li>Write a dialog script for your character, preferably on a separate file, making it of type</li>

<code>Dialog[]</code>

<li>.</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>NPC Default Behavior</h2>

<p>NPCs at the very least must have:</p>

<code>position</code>

<p>: (</p>

<em>TransformType</em>

<p>) Must include position, rotation and scale.</p>

<code>NPCData</code>

<p>: (</p>

<em>Data Object</em>

<p>) with a minimum of two variables</p>

<code>type</code>

<p>: (</p>

<em>NPCType</em>

<p>) you have the choice to use a custom GLB object or an</p>

<code>AvatarShape</code>

<p>for your npc</p>

<code>NPCType.CUSTOM</code>

<code>NPCType.AVATAR</code>

<code>onActivate()</code>

<p>: (</p>

<em>()=> void</em>

<p>) A function to call when the NPC is activated.</p>

<em>if you decide to use a</em>

<code>NPCType.CUSTOM</code>

<em>GLB model for your avatar, you must pass in a model object inside the</em>

<code>NPCData</code>

<code>model</code>

<li>: (</li>

<em>string</em>

<li>) The path to a 3D model</li>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>With this default configuration, the NPC behaves in the following way:</p>

<p>The</p>

<code>onActivate()</code>

<p>function is called when pressing E on the NPC, and when the player walks near at a distance of 6 meters.</p>

<p>Once activated, there's a cooldown period of 5 seconds, that prevents the NPC to be activated again.</p>

<p>After walking away from the NPC, if its dialog window was open it will be closed, and if the NPC was rotating to follow the player it will stop.</p>

<p>If the NPC already has an open dialog window, clicking on the NPC won't do anything, to prevent accidentally clicking on it while flipping through the conversation.</p>

<p>If the NPC has an animation named 'Idle', it will play it in a loop. If other non-looping animations are played, it will return to looping the 'Idle' animation after the indicated duration.</p>

<p>Many of these behaviors can be overridden or tweaked with the exposed properties.</p>

<h2>NPC Additional Properties</h2>

<p>To configure other properties of an NPC, add a fourth argument as an</p>

<code>NPCData</code>

<p>object. This object can have the following optional properties:</p>

<code>idleAnim</code>

<p>:</p>

<em>(string)</em>

<p>Name of the idle animation in the model. This animation is always looped. After playing a non-looping animation it returns to looping this one.</p>

<code>faceUser</code>

<p>:</p>

<em>(boolean)</em>

<p>Set if the NPC rotates to face the user while active.</p>

<code>dialogSound</code>

<p>:</p>

<em>(string)</em>

<p>Path to sound file to play once for every entry shown on the UI. If the dialog entry being shown has an</p>

<code>audio</code>

<p>field, the NPC will play the file referenced by the</p>

<code>audio</code>

<p>field instead.</p>

<code>coolDownDuration</code>

<p>:</p>

<em>(number)</em>

<p>Change the cooldown period for activating the NPC again. The number is in seconds.</p>

<code>hoverText</code>

<p>:</p>

<em>(string)</em>

<p>Set the UI hover feedback when pointing the cursor at the NPC.</p>

<em>TALK</em>

<p>by default.</p>

<code>onlyClickTrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by walking near. Just by clicking on it or calling its</p>

<code>activate()</code>

<p>function.</p>

<code>onlyETrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by walking near. Just by pressing the E key on it or calling its</p>

<code>activate()</code>

<p>function.</p>

<code>onlyExternalTrigger</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, the NPC can't be activated by clicking, pressing E, or walking near. Just by calling its</p>

<code>activate()</code>

<p>function.</p>

<code>reactDistance</code>

<p>:</p>

<em>(number)</em>

<p>Radius in meters for the player to activate the NPC or trigger the</p>

<code>onWalkAway()</code>

<p>function when leaving the radius.</p>

<code>continueOnWalkAway</code>

<p>:</p>

<em>(boolean)</em>

<p>If true,when the player walks out of the</p>

<code>reactDistance</code>

<p>radius, the dialog window stays open and the NPC keeps turning to face the player (if applicable). It doesn't affect the triggering of the</p>

<code>onWalkAway()</code>

<p>function.</p>

<code>onWalkAway</code>

<p>: (</p>

<em>()=> void</em>

<p>) Function to call every time the player walks out of the</p>

<code>reactDistance</code>

<p>radius.</p>

<code>walkingAnim</code>

<p>:</p>

<em>(string)</em>

<p>Name of the walking animation on the model. This animation is looped when calling the</p>

<code>followPath()</code>

<p>function.</p>

<code>walkingSpeed</code>

<p>:</p>

<em>(number)</em>

<p>Speed of the NPC when walking. By default</p>

<em>2</em>

<p>.</p>

<code>path</code>

<p>:</p>

<em>(Vector3)</em>

<p>Default path to walk. If a value is provided for this field on NPC initialization, the NPC will walk over this path in loop from the start.</p>

<code>noUI</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, no UI object is built for UI dialogs for this NPC. This may help optimize the scene if this feature is not used.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>Get NPC Data</h2>

<p>There are several properties you can check on an NPC to know what its current state is:</p>

<code>.state</code>

<p>: An enum value of type</p>

<code>NPCState</code>

<p>. Supported values are</p>

<code>NPCState.STANDING</code>

<p>(default),</p>

<code>NPCState.TALKING</code>

<p>, and</p>

<code>NPCState.FOLLOWPATH</code>

<p>.</p>

<code>TALKING</code>

<p>is applied when the dialog window is opened, and set back to</p>

<code>STANDING</code>

<p>when the window is closed.</p>

<code>FOLLOWPATH</code>

<p>is applied when the NPC starts walking, and set back to</p>

<code>STANDING</code>

<p>when the NPC finishes its path or is stopped.</p>

<code>.introduced</code>

<p>: Boolean, false by default. Set to true if the NPC has spoken to the player at least once in this session.</p>

<code>.visible</code>

<p>: Returns a Boolean, false by default. True if the dialog window for this NPC is currently open.</p>

<code>.inCooldown</code>

<p>: Boolean, false by default. True if the NPC was recently activated and it's now in cooldown. The NPC won't respond to being activated till</p>

<code>inCooldown</code>

<p>is false.</p>

<p>TIP: If you want to force an activation of the NPC in spite of the</p>

<code>inCooldown</code>

<p>value, you can force this value to true before activating.</p>

<h2>NPC Callable Actions</h2>

<p>An NPC object has several callable functions that come with the class:</p>

<h3>Talk</h3>

<p>To start a conversation with the NPC using the dialog UI, call the</p>

<code>talk()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>script</code>

<li>:</li>

<em>(Dialog[])</em>

<li>This array contains the information to manage the conversation, including events that may be triggered, options to choose, etc.</li>

<p>It can also take the following optional parameters:</p>

<code>startIndex</code>

<p>:</p>

<em>(number | string)</em>

<p>The</p>

<em>Dialog</em>

<p>object from the</p>

<code>script</code>

<p>array to open first. By default this is</p>

<em>0</em>

<p>, the first element of the array. Pass a number to open the entry on a given array position, or pass a string to open the entry with a</p>

<code>name</code>

<p>property matching that string.</p>

<code>duration</code>

<p>:</p>

<em>(number)</em>

<p>Number of seconds to wait before closing the dialog window. If no value is set, the window is kept open till the player reaches the end of the conversation or something else closes it.</p>

<p>Learn how to build a script object for NPCs in a section below.</p>

<h3>Play Animations</h3>

<p>By default, the NPC will loop an animation named 'Idle', or with a name passed in the</p>

<code>idleAnim</code>

<p>parameter.</p>

<p>Make the NPC play another animation by calling the</p>

<code>playAnimation()</code>

<p>function. The function takes the following</p>

<strong>required</strong>

<p>parameter:</p>

<code>animationName</code>

<li>:</li>

<em>(string)</em>

<li>The name of the animation to play.</li>

<p>It can also take the following optional parameters:</p>

<code>noLoop</code>

<p>:</p>

<em>(boolean)</em>

<p>If true, plays the animation just once. Otherwise, the animation is looped.</p>

<code>duration</code>

<p>:</p>

<em>(number)</em>

<p>Specifies the duration in seconds of the animation. When finished, it returns to playing the idle animation.</p>

<p>Note: If</p>

<code>noLoop</code>

<p>is true but no</p>

<code>duration</code>

<p>is set, the model will stay still after playing the animation instead of returning to the idle animation.</p>

<h3>Change idle animation</h3>

<p>The NPC's idle animation is looped by default whenever the NPC is not playing any other animations. In some cases you may want to have different idle animations depending on the circumstances, like while in a conversation, or if the NPC changes its general attitude after some event.</p>

<p>You set the NPC's idle animation when creating the NPC, using the</p>

<code>idleAnim</code>

<p>field. To change this animation at some later time, use</p>

<code>changeIdleAnim()</code>

<p>.</p>

<p>The</p>

<code>changeIdleAnim()</code>

<p>function takes two arguments:</p>

<code>animation</code>

<p>: The name of the new animation to set as the idle animation</p>

<code>play</code>

<p>: Optionally pass this value as</p>

<em>true</em>

<p>if you want this new animation to start playing right away.</p>

<h3>Activate</h3>

<p>The</p>

<code>activate()</code>

<p>function can be used to trigger the</p>

<code>onActivate()</code>

<p>function, as an alternative to pressing E or walking near.</p>

<p>The</p>

<code>activate()</code>

<p>function is callable even when in cool down period, and it doesn't start a new cool down period.</p>

<h3>Stop Walking</h3>

<p>If the NPC is currently walking, call</p>

<code>stopWalking()</code>

<p>to stop it moving and return to playing its idle animation.</p>

<code>stopWalking()</code>

<p>can be called with no parameters, or it can also be called with:</p>

<code>duration</code>

<li>: Seconds to wait before starting to walk again. If not provided, the NPC will stop walking indefinitely.</li>

<p>Note: If the NPC is has its dialog window open when the timer for the</p>

<code>duration</code>

<p>ends, the NPC will not return to walking.</p>

<p>To make the NPC play a different animation from idle when paused, call</p>

<code>playAnimation()</code>

<p>after</p>

<code>stopWalking()</code>

<p>.</p>

<h3>Follow Path</h3>

<p>Make an NPC walk following a path of</p>

<code>Vector3</code>

<p>points by calling</p>

<code>followPath()</code>

<p>. While walking, the NPC will play the</p>

<code>walkingAnim</code>

<p>if one was set when defining the NPC. The path can be taken once or on a loop.</p>

<code>followPath()</code>

<p>can be called with no parameters if a</p>

<code>path</code>

<p>was already provided in the NPC's initialization or in a previous calling of</p>

<code>followPath()</code>

<p>. If the NPC was previously in the middle of walking a path and was interrupted, calling</p>

<code>followPath()</code>

<p>again with no arguments will return the NPC to that path.</p>

<p>Note: If the NPC is initialized with a</p>

<code>path</code>

<p>value, it will start out walking that path in a loop, no need to run</p>

<code>followPath()</code>

<p>.</p>

<code>followPath()</code>

<p>has a single optional parameter of type</p>

<code>FollowPathData</code>

<p>. This object may have the following optional fields:</p>

<p>path: Array of</p>

<code>Vector3</code>

<p>positions to walk over.</p>

<p>speed: Speed to move at while walking this path. If no</p>

<code>speed</code>

<p>or</p>

<code>totalDuration</code>

<p>is provided, it uses the NPC's</p>

<code>walkingSpeed</code>

<p>, which is</p>

<em>2</em>

<p>by default.</p>

<p>totalDuration: The duration in</p>

<em>seconds</em>

<p>that the whole path should take. The NPC will move at the constant speed required to finish in that time. This value overrides that of the</p>

<em>speed</em>

<p>.</p>

<p>loop:</p>

<em>boolean</em>

<p>If true, the NPC walks in circles over the provided set of points in the path.</p>

<em>false</em>

<p>by default, unless the NPC is initiated with a</p>

<code>path</code>

<p>, in which case it starts as</p>

<em>true</em>

<p>.</p>

<p>curve:</p>

<em>boolean</em>

<p>If true, the path is traced a single smooth curve that passes over each of the indicated points. The curve is made out of straight-line segments, the path is stored with 4 times as many points as originally defined.</p>

<em>false</em>

<p>by default.</p>

<p>startingPoint: Index position for what point to start from on the path.</p>

<em>0</em>

<p>by default.</p>

<p>onFinishCallback: Function to call when the NPC finished walking over all the points on the path. This is only called when</p>

<code>loop</code>

<p>is</p>

<em>false</em>

<p>.</p>

<p>onReachedPointCallback: Function to call once every time the NPC reaches a point in the path.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>NPC Walking Speed</h4>

<p>The following list of factors are used to determine speed in hierarchical order:</p>

<code>totalDuration</code>

<p>parameter set when calling</p>

<code>followPath()</code>

<p>is used over the total distance travelled over the path.</p>

<code>speed</code>

<p>parameter set when calling</p>

<code>followPath()</code>

<code>walkingSpeed</code>

<p>parameter set when initializing NPC</p>

<p>Default value</p>

<em>2</em>

<p>.</p>

<h4>Joining the path</h4>

<p>If the NPC's current position when calling</p>

<code>followPath()</code>

<p>doesn't match the first position in the</p>

<code>path</code>

<p>array (or the one that matches the</p>

<code>startingPoint</code>

<p>value), the current position is added to the</p>

<code>path</code>

<p>array. The NPC will start by walking from its current position to the first point provided in the path.</p>

<p>The</p>

<code>path</code>

<p>can be a single point, and the NPC will then walk a from its current position to that point.</p>

<p>Note: If the speed of the NPC is determined by a</p>

<code>totalDuration</code>

<p>value, the segment that the NPC walks to join into the path is counted as part of the full path. If this segment is long, it will increase the NPC walking speed so that the full path lasts as what's indicated by the</p>

<code>totalDuration</code>

<p>.</p>

<p>In this example the NPC is far away from the start of the path. It will first walk from</p>

<em>10, 0, 10</em>

<p>to</p>

<em>2, 0, 2</em>

<p>and then continue the path.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Example Interrupting the NPC</h4>

<p>In the following example, an NPC starts roaming walking over a path, pausing on every point to call out for its lost kitten. If the player activates the NPC (by pressing E on it or walking near it) the NPC stops, and turns to face the player and talk. When the conversation is over, the NPC returns to walking its path from where it left off.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h3>End interaction</h3>

<p>The</p>

<code>endInteraction()</code>

<p>function can be used to abruptly end interactions with the NPC.</p>

<p>If applicable, it closes the dialog UI, hides speech bubbles, and makes the NPC stop rotating to face the player.</p>

<p>As an alternative, you can call the</p>

<code>handleWalkAway()</code>

<p>function, which has the same effects (as long as</p>

<code>continueOnWalkAway</code>

<p>isn't set to true), but also triggers the</p>

<code>onWalkAway()</code>

<p>function.</p>

<h2>NPC Dialog Window</h2>

<p>You can display an interactive dialog window to simulate a conversation with a non-player character (NPC).</p>

<p>The conversation is based on a script in JSON format. The script can include questions that can take you forward or backward, or end the conversation.</p>

<h3>The NPC script</h3>

<p>Each entry on the script must include at least a</p>

<code>text</code>

<p>field, but can include several more fields to further customize it.</p>

<p>Below is a minimal dialog.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<p>The player advances through each entry by clicking the mouse button. Once the last is reached, clicking again closes the window, as it's marked as</p>

<code>isEndOfDialog</code>

<p>.</p>

<p>The script must adhere to the following schema:</p>

<pre>:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<pre>?:</pre>

<p>Note: A</p>

<code>Dialog</code>

<p>object can be used as an input both for the</p>

<code>talk()</code>

<p>function (that is displayed in the UI), and the</p>

<code>talkBubble()</code>

<p>function (that is displayed in a floating bubble over the NPC). Properties marked with</p>

<code>*</code>

<p>are only applicable to UI dialogs.</p>

<p>You can set the following fields to change the appearance of a dialog:</p>

<code>text</code>

<p>: The dialog text</p>

<code>fontSize</code>

<p>: Size of the text</p>

<p>Other fields:</p>

<code>buttons *</code>

<p>: An array of buttons to use in a question entry, covered in the next section.</p>

<code>audio</code>

<p>: String with the path to an audio file to play once when this dialog is shown on the UI.</p>

<code>typeSpeed</code>

<p>: The text appears one character at a time, simulating typing. Players can click to skip the animation. Tune the speed of this typing (30 by default) to go slower or faster. Set to</p>

<em>-1</em>

<p>to skip the animation.</p>

<h4>Questions and conversation trees</h4>

<p>The script can include questions that prompt the player to pick between two or up to four options. These questions can branch the conversation out and trigger other actions in the scene.</p>

<p>Note: Questions are only used by UI dialogs. If used in a speech bubble, questions will be displayed as regular entries with no buttons or options.</p>

<p>To make an entry a question, set the</p>

<code>isQuestion</code>

<p>field to</p>

<em>true</em>

<p>. This displays a set of buttons rather than the click icon. It also disables the click to advance to the next entry.</p>

<p>The</p>

<code>buttons</code>

<p>property of an entry contains an array of</p>

<code>ButtonData</code>

<p>objects, each one of these defines one button.</p>

<p>When on a question entry, you must provide at least the following for each button:</p>

<code>label</code>

<p>:</p>

<em>(string)</em>

<p>The label to show on the button.</p>

<code>goToDialog</code>

<p>:</p>

<em>(number | string)</em>

<p>The index or name of the next dialog entry to display when activated.</p>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>You can also set the following:</p>

<code>triggeredActions</code>

<p>:</p>

<em>( () => void )</em>

<p>An additional function to run whenever the button is activated</p>

<code>fontSize</code>

<p>:</p>

<em>(number)</em>

<p>Font size of the text</p>

<code>offsetX</code>

<p>:</p>

<em>(number)</em>

<p>Offset of the label on the X axis, relative to its normal position.</p>

<code>offsetY</code>

<p>:</p>

<em>(number)</em>

<p>Offset of the label on the Y axis, relative to its normal position.</p>

<p>All buttons can be clicked to activate them. Additionally, the first button in the array can be activated by pressing the</p>

<em>E</em>

<p>key. The second button in the array can be activated by pressing the</p>

<em>F</em>

<p>key,</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h4>Triggering functions from the dialog</h4>

<p>You can run functions that may affect any other part of your scene. These functions get triggered when the player interacts with the dialog window, or when the NPC displays speech bubbles.</p>

<code>triggeredByNext</code>

<p>: Is executed when the player advances to the next dialog on a non-question dialog. The function also gets called if the dialog is the end of the conversation. It also gets called when a speech bubble advances to the next entry.</p>

<code>triggeredActions</code>

<p>: This property is associated to a button and is executed on a question dialog if the player activates the corresponding button. You can have up to 4 different buttons per entry, each with its own actions.</p>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<pre>:</pre>

<h2>No-NPC Dialogs</h2>

<p>You can open a Dialog window that isn't associated with any</p>

<code>NPC</code>

<p>object in the scene. The</p>

<code>openDialogWindow()</code>

<p>function has all the same functionality as calling the</p>

<code>talk()</code>

<p>function on an NPC, but may be more practical in scenarios where a character isn't physically there, or where the conversation isn't with a particular character.</p>

<h3>The Dialog window</h3>

<p>To create a new dialog window, call</p>

<code>createDialogWindow()</code>

<p>and store as a variable. This will instantiate the window but keep it hidden until you open it.</p>

<p>When instantiating a new blank dialog, you can pass the following optional parameters:</p>

<code>defaultPortrait</code>

<p>: Sets a default portrait image to use on the left of all dialogs that don't specify an image. If a dialog has no portrait and no default is provided, no image is shown on the left. This field expects a</p>

<code>Portrait</code>

<p>object, that may include the following fields: -</p>

<code>path</code>

<p>: Path to the image file -</p>

<code>xOffset</code>

<p>: Offset on X, relative to the normal position of the portrait. -</p>

<code>yOffset</code>

<p>: Offset on Y, relative to the normal position of the portrait. -</p>

<code>section</code>

<p>: Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an</p>

<code>ImageSection</code>

<p>object, specifying</p>

<code>sourceWidth</code>

<p>and</p>

<code>sourceHeight</code>

<p>, and optionally also</p>

<code>sourceLeft</code>

<p>and</p>

<code>sourceTop</code>

<p>.</p>

<code>useDarkTheme</code>

<p>: Switch the style of the window to the dark theme.</p>

<code>sound</code>

<p>: Path to a sound file that will be played once for every dialog entry shown, as long as the dialog entry doesn't have its own</p>

<code>audio</code>

<p>property.</p>

<p>Once you have created a dialog window, you can open a dialog window with the</p>

<code>openDialogWindow()</code>

<p>function.</p>

<p>When calling this function, you must specify:</p>

<code>NPCScript</code>

<li>: A JSON object composed of an array of</li>

<code>Dialog</code>

<li>objects, that includes all the dialog tree.</li>

<p>A second optional parameter is also available:</p>

<code>textId</code>

<li>: The index or</li>

<code>name</code>

<li>property of the entry to show first from the script. The first entry is 0.</li>

<p>TIP: It's always better to refer to an entry by name, since the array index might shift if you add more entries and it can get hard to keep track of these references.</p>

<p>Close a dialog window at any time by calling the</p>

<code>closeDialogWindow()</code>

<p>function.</p>

<p>For details on how to construct the dialog tree, see the sections above. The required</p>

<code>NPCScript</code>

<p>by the</p>

<code>DialogWindow</code>

<p>has exactly the same characteristics as the one used on the</p>

<code>NPC</code>

<p>object when calling the</p>

<code>talk()</code>

<p>function.</p>

<h2>Contribute</h2>

<p>In order to test changes made to this repository in active scenes, do the following:</p>

<p>Run</p>

<code>npm run build</code>

<p>for the internal files of the library to be generated</p>

<p>Run</p>

<code>npm run link</code>

<p>on this repository</p>

<p>On a new Decentraland scene, import this library as you normally would and include the tests you need</p>

<p>On the scene directory, run</p>

<code>npm link dcl-npc-toolkit</code>

<p>Note: When done testing, run</p>

<code>npm unlink</code>

<p>on both folders, so that the scene stops using the local version of the library.</p>

<h2>CI/CD</h2>

<p>This repository uses</p>

<code>semantic-release</code>

<p>to automatically release new versions of the package to NPM.</p>

<p>Use the following convention for commit names:</p>

<code>feat: something</code>

<p>: Minor release, every time you add a feature or enhancement that doesnât break the api.</p>

<code>fix: something</code>

<p>: Bug fixing / patch</p>

<code>chore: something</code>

<p>: Anything that doesn't require a release to npm, like changing the readme. Updating a dependency is</p>

<strong>not</strong>

<p>a chore if it fixes a bug or a vulnerability, that's a</p>

<code>fix</code>

<p>.</p>

<p>If you break the API of the library, you need to do a major release, and that's done a different way. You need to add a second comment that starts with</p>

<code>BREAKING CHANGE</code>

<p>, like:</p>

<code>commit -m "feat: changed the signature of a method" -m "BREAKING CHANGE: this commit breaks the API, changing foo(arg1) to foo(arg1, arg2)"</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/inworld-ai-sdk6

# URL: https://github.com/decentraland-scenes/inworld-ai-sdk6

<title>GitHub - decentraland-scenes/inworld-ai-sdk6</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/inworld-ai-sdk6</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>39</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Inworld.ai Example</h1>

<p>This is an example scene to create AI NPCs backed by</p>

<p>service</p>

<p>Deployed here</p>

<p>Zone (InworldAiSdk6.dcl.eth)</p>

<h2>Code</h2>

<p>RemoteNpc (</p>

<code>src/aiNpc/npc/remoteNpc.ts</code>

<p>) is a new class that wraps the existing NPC object.  See for more details there</p>

<p>.</p>

<p>It adds the additional configuration for an NPC that talks to a remote server for the dialog.</p>

<p>StreamedMessage (</p>

<code>src/aiNpc/npc/streamedMsgs.ts</code>

<p>) is a utilty that implements an Iterator pattern to enable the scene to group messages from Inworld AI and use them with the NPC Dialog in a serial and squential way.</p>

<code>received stream of all Inworld AI messages all at once

show utterance1

player clicks next

show utterance2

player clicks next</code>

<h2>Customize</h2>

<code>src/aiNpc/npc/customNPCUI.ts</code>

<p>creates a custom 2D UI to enable the player to type a question for the NPC.  Customize this as you want</p>

<h2>Configuration</h2>

<h3>Scene</h3>

<p>You may want to configure endpoints for your local environment in the instance where you do not want or need to run Colyseus and login server locally</p>

<p>Found in</p>

<code>src/config.ts</code>

<p>there are variables in the following format so you could have configurations for multiple environments</p>

<code>const VARIABLE: Record<string, string> = {

  local: "local value",

  dev: "dev value",

  stg: "staging value",

  prd: "production value",

};</code>

<code>ENV</code>

<p>- The environment for which values are to be used (local,dev,prod,etc.)</p>

<code>COLYSEUS_ENDPOINT_URL</code>

<p>- Websocker endpoint</p>

<code>const COLYSEUS_ENDPOINT_URL: Record<string, string> = {

  local: "ws://127.0.0.1:2567",  //default local server port

  dev: "YOUR-DEV-ENDPOINT-HERE", 

  stg: "YOUR-STG-ENDPOINT-HERE",

  prd: "YOUR-PROD-ENDPOINT-HERE", 

};</code>

<h3>Should you make your own Inworld AI Scene and Characters</h3>

<p>src/aiNpc/npc/npcSetup.ts</p>

<code>const myRemoteNPC = new RemoteNpc(

    {resourceName:"workspaces/{SCENE_NAME_HERE/characters/{CHARACTER_NAME_HERE}"}

    

    , new npc.NPC( .... )//YOUR NPC_OBJECT_FROM @dcl/npc-scene-utils

    

    //ADDITIONAL CONFIG FOR REMOTE NPC

    {

      npcAnimations:DOGE_NPC_ANIMATIONS,

      thinking:{

        enabled:true,

        model: new GLTFShape('models/loading-icon.glb'),

        offsetX: 0,

        offsetY: 2 ,

        offsetZ: 0

      }

      ,onEndOfRemoteInteractionStream: ()=>{

        showInputOverlay(true)

      }

      ,onEndOfInteraction: ()=>{

        //end of interaction

      }

    }

  }</code>

<h2>Try it out</h2>

<h4>Run Colyseus (Multiplayer server) (seperate tab)</h4>

<p>Optional...if you only want to see the code in action no need run the proxy server.  The example scene is pointed our Genesis Plaza proxy server so you should be able to fully run these example scene without the server side.  Should you choose create your own scene and characters you will need to run your own server.</p>

<p>To create your own scene and characters follow the documentation found here</p>

<p>.   Once you are finished run your local server.</p>

<p>Instructions here</p>

<p>Default endpoint can be found at</p>

<p>In the Decentrlaand scene code Change in src/config.ts to point at your local</p>

<code>const ENV = "prd"

to

const ENV = "local"</code>

<p>This will make is so your scene uses local: "ws://127.0.0.1:2567" from the COLYSEUS_ENDPOINT_URL varaible</p>

<p>Full instructions for running the proxy server can be found here Instructions here</p>

<h4>Run Decentraland Scene (seperate tab)</h4>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the NPC to start a conversation, use E and F keys to choose options when prompted.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Importing-Modules

# URL: https://github.com/decentraland-scenes/Importing-Modules

<title>GitHub - decentraland-scenes/Importing-Modules</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Importing-Modules</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Topics</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/zombie-attack

# URL: https://github.com/decentraland-scenes/zombie-attack

<title>GitHub - decentraland-scenes/zombie-attack: A zombie will chase you around and attack you once it gets near.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A zombie will chase you around and attack you once it gets near.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/zombie-attack</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Zombie Attack</h1>

<em>demo of zombie-attack scene running in preview.</em>

<h2>Description</h2>

<p>A zombie will chase you around and attack you once it gets near. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<p>A zombie will chase you around and attack you once it gets near.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/world-stage-metaverse-festival

# URL: https://github.com/decentraland-scenes/world-stage-metaverse-festival

<title>GitHub - decentraland-scenes/world-stage-metaverse-festival</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/world-stage-metaverse-festival</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>54</strong>

<h2>Files</h2>

<button>View code</button>

<h1>world-stage-metaverse-festival</h1>

<p>Assets and code used for the</p>

<p>.</p>

<p>This work is licensed under a</p>

<p>.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/crypto-valley-art-gallery

# URL: https://github.com/decentraland-scenes/crypto-valley-art-gallery

<title>GitHub - decentraland-scenes/crypto-valley-art-gallery: Crypto Valley art gallery</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Crypto Valley art gallery</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/crypto-valley-art-gallery</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>18</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<p>Crypto Valley art gallery</p>

<h3>Topics</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/show-management

# URL: https://github.com/decentraland-scenes/show-management

<title>GitHub - decentraland-scenes/show-management: This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the Show Management Library</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the Show Management Library</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/show-management</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>21</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Show Management</h1>

<h2>Description</h2>

<p>This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the</p>

<p>.</p>

<p>This scene shows you:</p>

<li>How to schedule playing a video streamed on-demand to play at a certain time</li>

<li>How to sync actions in the scene to moments in the video</li>

<p>Note: For details on how to store videos in servers that can be fetched from Decentraland, see</p>

<h2>Video Tutorial</h2>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the Show Management Library</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/video-streaming

# URL: https://github.com/decentraland-scenes/video-streaming

<title>GitHub - decentraland-scenes/video-streaming</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/video-streaming</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>34</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Video Streaming</h1>

<p>A simple scene with a video screen that loops a video that was uploaded to Vimeo.</p>

<p>This scene shows you:</p>

<li>How to stream videos from an external source</li>

<li>How to configure the properties of a material for the best image clarity on a video</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h1>Setting up the Server for Streaming</h1>

<em>NOTE: These are just brief notes from my meeting with HPrivakos (will tidy up later...)</em>

<h2>Choosing a hosting option</h2>

<p>There are a number of options for streaming video. The simplest option is to use a managed hosting provider like</p>

<p>or</p>

<p>where you pay a fee to the provider to manage all the streaming infrastructure. The other recommended alternative is to set up your own server, using free software but paying for hosting on a platform like Digital Ocean. All these options have pros and cons for different scenarios. You should evaluate what's best for you taking into account your needs, technical skills and budget.</p>

<h3>Managed hosted</h3>

<strong>Vimeo Pro (or higher)</strong>

<p>:</p>

<p>Pros:</p>

<li>Should be able to support unlimited concurrent users</li>

<li>Is extremely easy to set up</li>

<li>Costs $20 USD a month</li>

<li>Offers analytics dashboard</li>

<p>Cons:</p>

<li>Only allows you to stream pre-loaded videos,</li>

<strong>no live streaming</strong>

<li>.</li>

<li>In this modality, players see the video start when each arrives to the scene. What they see may be out of sync with each other.</li>

<strong>Vimeo Premium</strong>

<p>Pros:</p>

<li>Should be able to support unlimited concurrent users</li>

<li>Is extremely easy to set up</li>

<li>Allows for</li>

<strong>live streaming</strong>

<li>Offers analytics dashboard</li>

<p>Cons:</p>

<li>Costs $75 usd a month</li>

<strong>Livepeer Studio</strong>

<p>:</p>

<p>Pros:</p>

<li>Easy to set up</li>

<li>Free 1000 minutes/month video processing (transcoding and uploading videos)</li>

<li>Allows for</li>

<strong>live streaming</strong>

<p>Cons:</p>

<li>No analytics dashboard</li>

<li>Streaming of</li>

<strong>pre-loaded videos (VODs)</strong>

<li>currently requires using Studio API</li>

<li>After 1000 free monthly minutes, costs are calculated as:</li>

<li>$0.005 USD/min for transcoding</li>

<li>$0.015 USD/GB for delivery</li>

<h3>Self-hosted</h3>

<strong>Set up own server on Digital Ocean</strong>

<p>Pros:</p>

<li>You can do streaming or</li>

<strong>any modality</strong>

<li>you want</li>

<li>Can cost as little as $5 USD a month (this option supports up to roughly 50 viewers)</li>

<li>Relatively nice UI, if you have a strong technical background</li>

<p>Cons:</p>

<li>Requires high technical skills to set up everything manually</li>

<li>The cheap option is not recommended for +50 viewers, more expensive options may be on par with Vimeo Premium.</li>

<p>Note: For many Decentraland Foundation events, we use Amazon Web Services hosting. This option is more robust, but also more expensive and less friendly to set up.</p>

<h2>Set up Vimeo Pro</h2>

<p>This is the simplest option, but doesn't allow for live streaming.</p>

<p>Create a Vimeo account if you don't have one. Then upgrade to any of the</p>

<p>offered there.</p>

<p>Upload a video to one of your folders.</p>

<p>Open the video's settings, and select</p>

<strong>Advanced</strong>

<p>.</p>

<p>Pick</p>

<strong>Distribution</strong>

<p>, and scroll to the bottom to Video file links. Copy the last one of these links, the one labeled</p>

<strong>HTTP live streaming</strong>

<p>.</p>

<p>Note: The other available links on specific resoltuions often don't work when streamed into Decentraland. Always use the</p>

<strong>HTTP Live streaming</strong>

<p>. This option adjusts the quality of the video dynamically depending on the player's connection, leading to an optimal result. Note that this link is different from performing a streaming of a live event: players will each see the video from start to finish, without necessarily being in sync with what each other is seeing.</p>

<li>Paste the link into your scene, replacing the placeholder on the</li>

<code>VideoClip</code>

<li>object.</li>

<p>Tip: If you intend your video to loop, make sure you set the</p>

<code>loop</code>

<p>property on the</p>

<code>VideoTexture</code>

<p>in your scene. Otherwise the video will play just once for each player.</p>

<h2>Set up Livepeer Studio</h2>

<p>The first step is to create a</p>

<p>.</p>

<strong>Live streaming</strong>

<li>While signed in, go to the</li>

<li>section</li>

<li>Click the</li>

<code>+ Create stream</code>

<li>button</li>

<li>Give your stream a name in the prompt. Click</li>

<code>Create stream</code>

<li>button when finished.</li>

<li>For broadcasting (via broadcasting software like OBS), use the the</li>

<code>RTMP ingest URL</code>

<li>and</li>

<code>Stream key</code>

<li>found on the newly created stream page.</li>

<li>For playback in a video player, use the</li>

<code>Playback URL</code>

<li>url.</li>

<strong>Pre-loaded video (VOD) streaming</strong>

<em>Functionality to upload asset directly in Studio dashboard coming in Q3 2022</em>

<h2>Custom Server on Digital Ocean (Advanced)</h2>

<p>This is the cheapest option, but is significantly harder to set up than the others.</p>

<p>See</p>

<p>for detailed instructions for how to deploy a server, configure it, and install all the necessary command-line tools.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>10</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>10</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/zombies

# URL: https://github.com/decentraland-scenes/zombies

<title>GitHub - decentraland-scenes/zombies</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/zombies</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>8</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Zombie Attack</h1>

<em>demo of zombie-attack scene running in preview.</em>

<h2>Description</h2>

<p>A zombie will chase you around and attack you once it gets near. To view the scene, please visit</p>

<p>.</p>

<h2>Instructions</h2>

<p>Use your mouse to look around and</p>

<kbd>W</kbd>

<kbd>A</kbd>

<kbd>S</kbd>

<kbd>D</kbd>

<p>keys on your keyboard to move forward, left, backward and right respectively. To jump, press the</p>

<kbd>Space</kbd>

<p>key.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/leaderboard-ui-sdk7

# URL: https://github.com/decentraland-scenes/leaderboard-ui-sdk7

<title>GitHub - decentraland-scenes/leaderboard-ui-sdk7</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/leaderboard-ui-sdk7</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>77</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Leaderboard sdk7</h1>

<p>This demo scene present 2 different leaderboards made using sdk7.

Both of them where drawn by the ones present in the</p>

<p>.</p>

<h4>**Modal Leader Board **</h4>

<h4>**HUD Leader Board **</h4>

<h1>Instructions</h1>

<p>Point to the cube in the center of the screen, press "E" and see the leader boards changing data.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>sdk version</strong>

<p>Inside the package.json make sure that  sdk version is set to "next"</p>

<code>"devDependencies": {

"@dcl/sdk": "next"

},</code>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  npm run start</code>

<h2>About</h2>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/snowball-xmas-arena

# URL: https://github.com/decentraland-scenes/snowball-xmas-arena

<title>GitHub - decentraland-scenes/snowball-xmas-arena</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/snowball-xmas-arena</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>7</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Snowball Arena</h1>

<p>A multiplayer scene with [Colyseus]{</p>

<p>for websockets multiplayer messaging.

The game logic is carried out server-side.</p>

<p>This scene shows you:</p>

<li>How to support [Colyseus]{</li>

<li>in a Decentraland scene</li>

<li>How to set up a simple scene state in Colyseus</li>

<li>How to handle game state changes from the server in your scene</li>

<li>How to fetch a player's realm</li>

<li>How to keep track of the state of each realm as a separate room in your game</li>

<p>The server keeps track of the color selected by each player and the changes in cube colors.</p>

<h3>PlayFab</h3>

<p>"</p>

<p>enables developers to use the intelligent cloud to build and operate games, analyze gaming data and improve overall gaming experiences. The PlayFab platform is a natural complement to Azure for gaming (Visit</p>

<p>for more info)"</p>

<h2>How PlayFab Login Works</h2>

<p>PlayFab offers several authentication options</p>

<p>. However we chose CustomID so that we can tie the player ID to the account.  CustomID allows us to set anything as the login a player.   To keep the login ID secure and not predictable we use a server to generate a random UUID as the login ID and return it.  We use</p>

<p>which authenticates the signedFetch from the scene and ensures only that player can fetch their CustomID.</p>

<pre>sequenceDiagram

    

    Player->> Scene : enterScene

    Scene->> Service : signedFetch(/player/auth)

    Service->>Service: authenticate signedFetch

    opt If you wanted to verify player is in DCL

        Colyseus->>Catalyst: check is player connected

    end 

    Service->> DB : lookup/create Playfab CustomId

    Note over Scene,PlayFab: Have a few login options here

    alt: Scene logs itself in 

        Service-->>Scene: returns Playfab CustomId

        Scene->>PlayFab: Client/LoginWithCustomID (with CustomId) 

        PlayFab-->>Scene: Login Result

    else: OR Service logs in for client (VARIENT)

        Service->>PlayFab: Client/LoginWithCustomID (with CustomId) 

        PlayFab-->>Service: Login Result

        Service-->>Scene: returns Playfab Login Result

    end

    Note over Scene,PlayFab: Player now logged in to PlayFab

    Scene->>PlayFab: Client/GetPlayerCombinedInfo

    PlayFab-->>Scene: GetPlayerCombinedInfoResult

    Scene-->>Player: Update UI to Logged In State</pre>

<h2>How Multiplayer Works</h2>

<pre>sequenceDiagram

    

    Player->> Scene : playBattle

    Scene->> Colyseus : joinOrCreate

    Colyseus->>PlayFab: AuthenticateSessionTicket

    PlayFab-->> Colyseus : valid session

    opt If you wanted to verify player is in DCL

        Colyseus->>Catalyst: check is player connected

    end

    Colyseus-->>Scene: room id

    Note over Colyseus,Scene: Battle begins

    par

        loop Player Battle

            Player->>Scene: sends inputs

        end

        loop Scene sends actions taken

            Scene->>Colyseus: player data

        end

        loop Colyseus sends room state

            Colyseus->>Scene: room state

            Scene->>Scene: sync entity positions

        end

    end

    Note over Colyseus,Scene: When battle is over

    Colyseus->>PlayFab: Updates player stats

    Colyseus->>Scene: Broadcast about to disconnect

    Colyseus->>Scene: Disconnect clients

    Scene->>PlayFab: Client/GetPlayerCombinedInfo for latest stat

    PlayFab-->>Scene: GetPlayerCombinedInfoResult

    Scene-->>Player: Show Battle Results</pre>

<h2>Configuration</h2>

<p>NOTE: In an attempt to make playing the scene locally PLAYFAB_ENABLED is by default set to false in the Scene and Colyseus making so you can play locally with no external services configure (do not need a PlayFab account to test it out).  To enable playfab follow the instructions below.</p>

<h3>Scene</h3>

<p>You may want to configure endpoints for your local environment in the instance where you do not want or need to run Colyseus and login server locally</p>

<p>Found in</p>

<code>src/config.ts</code>

<p>there are variables in the following format so you could have configurations for multiple environments</p>

<code>const VARIABLE: Record<string, string> = {

  local: "local value",

  dev: "dev value",

  stg: "staging value",

  prd: "production value",

};</code>

<code>DEFAULT_ENV</code>

<p>- The environment for which values are to be used (local,dev,prod,etc.)</p>

<code>PLAYFAB_ENABLED</code>

<p>- true if PlayFab should be enabled.</p>

<code>PLAYFAB_TITLE_ID</code>

<p>- PlayFab Title ID</p>

<code>COLYSEUS_ENDPOINT_URL</code>

<p>- Websocker endpoint</p>

<code>AUTH_URL</code>

<p>Login Service Endpoint</p>

<h3>Colyseus</h3>

<p>Found in</p>

<code>server/arena.env</code>

<p>you must either disable PlayFab integration OR provide a PlayFab title and developer secret.  By default for the demo BATTLE_PLAYFAB_ENABLED is set to false so you can play locally without requiring a PlayFab account</p>

<code>BATTLE_PLAYFAB_ENABLED=true

BATTLE_PLAYFAB_TITLEID= PlayFab Title ID goes here

BATTLE_PLAYFAB_DEVELOPER_SECRET= PlayFab Title ID goes here</code>

<p>Details on how to get these can be found here</p>

<h3>Service</h3>

<p>By default for the demo</p>

<code>BATTLE_PLAYFAB_ENABLED</code>

<p>is set to false so you can play locally without requiring a PlayFab account.  The service does not need to be ran in this case.</p>

<p>Found in</p>

<code>service/.env.default</code>

<p>default values for the service</p>

<p>Found in</p>

<code>service/.env</code>

<p>are override values.  Place your firebase admin json here</p>

<code>FIREBASE_JSON=you-firebase-admin-json-here</code>

<h2>Try it out</h2>

<p>It will require you to run 3 servers locally</p>

<li>DCL Scene</li>

<li>Colyseus (multiplayer server)</li>

<li>Service (for login support and other server side needs)</li>

<p>And have a PlayFab account and title already created</p>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<h4>Run DCL Scene (Tab1)</h4>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h4>Run Colyseus (Multiplayer server) (Tab2)</h4>

<p>In another command line tab Open ./server/ folder on the command line, then run:</p>

<code>npm run start</code>

<p>Any dependencies are installed and then the server should be running. You should see something like this</p>

<code>â development.env loaded.

â Express initialized

ð  Your Colyseus App

âï¸  Listening on ws://localhost:2567</code>

<h4>Run Service (Tab3)</h4>

<p>NOTE: By default for the demo BATTLE_PLAYFAB_ENABLED is set to false so you can play locally without requiring a PlayFab account.  The service does not need to be ran in this case.</p>

<p>In another command line tab Open ./service/ folder on the command line, then run:</p>

<code>npm run build

npm run start</code>

<p>Any dependencies are installed and then the server should be running. You should see something like this</p>

<code>2022-07-17T01:44:35.100Z [LOG] (http-server): Listening 0.0.0.0:5001</code>

<h2>More</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>Acknowledgements</h2>

<p>Portions of this program Â© 2022 Microsoft Azure PlayFab</p>

<p>Multiplayer made possible with Colyseus</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/validate-player-authenticity

# URL: https://github.com/decentraland-scenes/validate-player-authenticity

<title>GitHub - decentraland-scenes/validate-player-authenticity: Signed fetch base implementation</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Signed fetch base implementation</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/validate-player-authenticity</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>16</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Validate Player Authenticity</h1>

<p>This is a simple scene + REST server that implements a few security checks to ensure that the requests that arrive to the server are legitimate.</p>

<p>This example shows you:</p>

<p>On the scene:</p>

<li>Send requests with</li>

<code>signedFetch</code>

<li>, to include headers with an ephemeral key signature in the request.</li>

<p>On the server:</p>

<li>Check that the origin of the request, to ensure it's from a Decentraland domain</li>

<li>Filter out malicious IPs that were manually identified</li>

<li>Check that the headers included in the</li>

<code>signedFetch</code>

<li>are properly signed, ensuring also that the timestamp in the signature is also recent and that the ephemeral key corresponds to the player's address.</li>

<li>Query the catalyst server that the player claims to be in, and ensure that the player is truly there.</li>

<li>Check that the player's location when sending the request is at a specific parcel, or within a margin or error of that.</li>

<p>These checks together ensure that a request needs to come from inside decentraland, from a player in a deployed scene within the specified coordinates.</p>

<p>Through all of these checks, you can make it very hard for anyone who might want to take advantage of your scene. These security measures are especially valuable in scenes that give away tokens, or where there's some kind of monetary incentive for cheating.</p>

<h3>About the ephemeral key</h3>

<p>When players log into decentraland, they sign a message using Metamask or their preferred web3 client. This signature is used to generate an ephemeral wallet that exists during that session, this address can be traced back to the player's original address. The advantage is that it can be used by the Decentraland explorer to sign messages behind the curtains, without requesting that the player manually signs every request.</p>

<p>When you use the</p>

<code>signedFetch()</code>

<p>function in a scene, you're sending additional metadata in the request's headers, that includes a signed message encrypted with the ephemeral key. This signed message includes a timestamp, the player's position on the map, the player's actual address, and the contents of the request itself.</p>

<h2>Branches</h2>

<p>The</p>

<code>main</code>

<p>branch of this project delegates the validation of the message signature to an endpoint of a catalyst server.</p>

<p>The</p>

<code>localcheck</code>

<p>branch of this same repository performs the signature validation locally. It only connects to the catalyst server to check that the player is connected and near the reported position.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to the</p>

<code>scene</code>

<p>directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Run the server</strong>

<p>To run the server locally, on a separate command line window, navigate to the</p>

<code>server</code>

<p>directory and run the following command to install all the dependencies:</p>

<code>npm i</code>

<p>Once the dependencies are installed, run the following command to start the server:</p>

<code>npm run start</code>

<p>The server will then be listening on</p>

<code>localhost:8080</code>

<p>, the scene is already sending requests to this address.</p>

<code>socket = new WebSocket(

    'wss://localhost:8080/broadcast/' + realm.displayName

  )</code>

<strong>Scene Usage</strong>

<p>First run the server, then run the scene.</p>

<p>In the scene, simply click on the fountain, and it will send a request to the server.</p>

<p>The scene will tell you if you passed the validations or not.</p>

<p>Since you're running the scene locally on localhost, the validations that relate to the request's origin and on querying the catalyst servers are turned off. Turn them on with the</p>

<code>TESTS_ENABLED</code>

<p>flag, on</p>

<code>securityChecks.ts</code>

<p>in the server folder. Notice that once that's enabled your requests from localhost will no longer pass the validations.</p>

<p>By copying the</p>

<code>security</code>

<p>folder in</p>

<code>server</code>

<p>, you can use the same set of security validations on any request that was originated with</p>

<code>signedFetch()</code>

<p>in a Decentraland scene.</p>

<p>Simply run:</p>

<p>Or add a set of coordinates to also validate the request's origin on the map:</p>

<h3>Configurable properties</h3>

<p>The following properties can be configured on</p>

<code>securityChecks.ts</code>

<p>:</p>

<code>TESTS_ENABLED</code>

<p>: If true, requests from localhost are allowed. If false, the server also enforces that the requests come from a decentraland domain, and validates with a catalyst server that the player is currently there.</p>

<code>MARGIN_OF_ERROR</code>

<p>: Make the location checks more or less permissive. A margin or error of 2 will allow locations at + - 2 parcels of distance on either axis from the indicated location.</p>

<code>denyListedIPS</code>

<p>: Add any IPs to this list that you want to block from making any requests.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Signed fetch base implementation</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>7</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Soho-Plaza

# URL: https://github.com/decentraland-scenes/Soho-Plaza

<title>GitHub - decentraland-scenes/Soho-Plaza: The full Soho Plaza in Genesis City</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>The full Soho Plaza in Genesis City</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Soho-Plaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>11</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>146</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Soho-Plaza</h1>

<p>The full Soho Plaza.</p>

<p>This scene contains a lot of useful mechanics, including:</p>

<li>Fetching data from APIs</li>

<li>Adding teleports to other scenes</li>

<li>Adding external links outside Decentraland</li>

<li>Syncing player actions with the messagebus</li>

<li>Streaming audio</li>

<li>Streaming video</li>

<li>Displaying a custom UI</li>

<p>Because it can be hard to find specific things in such a large repository, some of the most interesting bits of the scene have been exported into their own example repos:</p>

<li>: Create 3D voxel art by placing cubes in place. Players are synced through both the messagebus and a DB in a server.</li>

<li>: Fetch the list of wearables that a player currently has on. If they have something in the eyewear category, open the door for them.</li>

<li>: The cubes in this fountain have several animations that each set can play. When a player pushes a button, all players see the same animation.</li>

<li>: Display a 2D NFT in a picture frame.</li>

<li>: Play the keys of this piano by stepping on them. All players will hear the notes that are played.</li>

<li>: Create musical patterns that are played in sequence. Players are synced through both the messagebus and a DB in a server.</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of the same server that's used by Soho Plaza. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>. To store data on an Amazon S3 server, as done here, you'll also need to set up your own Amazon S3, and fetch credentials for that account to include in your server folder.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>The full Soho Plaza in Genesis City</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/voxel-art-creator

# URL: https://github.com/decentraland-scenes/voxel-art-creator

<title>GitHub - decentraland-scenes/voxel-art-creator: A voxel art creator.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A voxel art creator.</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/voxel-art-creator</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>29</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Voxel Art Creator</h1>

<em>A screenshot of the voxel art creator running in preview.</em>

<p>A voxel art creator based on the amazing</p>

<p>. You can try out the scene</p>

<p>.</p>

<p>This scen shows you:</p>

<li>How to use the message bus to keep players in sync with each other's actions while they're together in the scene</li>

<li>How to send HTTP requests to an API to store the scene state in a permanent place, so others can then retrieve changes</li>

<li>How to set up a server that is capable of handling the storage of data in a separate Amazon S3 server</li>

<li>How to obtain the realm that a player is currently on</li>

<li>How to use ray casting to spawn an entity at the position that the player is pointing</li>

<li>How to play sounds from a file</li>

<li>How to add custom UI hints that don't interfere with the interactin with the scene</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>$ npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of the same server that's used by Soho Plaza. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>. To store data on an Amazon S3 server, as done here, you'll also need to set up your own Amazon S3, and fetch credentials for that account to include in your server folder.</p>

<h2>Controls</h2>

<li>Left mouse click to add / remove / eye drop a voxel</li>

<li>Use 'E' to toggle between add / remove / eye drop mode</li>

<li>Use 'F' to change colors</li>

<h2>Future Improvements</h2>

<li>Undo / Reset / Clear button</li>

<li>Color palette to choose and store colors</li>

<li>Help menu with instructions</li>

<li>More tools such as Ellipse / Rectangle / Line</li>

<li>Shared experience</li>

<li>Many more...</li>

<h2>About syncing changes between players</h2>

<p>When a player comes into the scene they download the latest data about existing voxels from off the server. Then, as different players that are there add and remove voxels, they get these changes from each other using the Message Bus, they donât need to check the server regularly to know whatâs new.</p>

<p>For this to work properly, we need to keep a separate version of this pattern for each realm and know what realm each player is on when they update the pattern. This is because only players that are in the same realm message each other via the Message Bus. There would otherwise be odd inconsistencies in what ends up being stored when players that are in different realms modify the same scene without notifying each other. The scene includes the playerâs realm as part of the requests it sends, and the server then handles a different .json file depending on the realm.</p>

<p>Note: This works fine as long as the scene is deployed in one single place in the map. If various copies of the same scene exist and call the same server, writing to the same database, then that could be a problem. If two players are interacting with the two different versions of the scene, they will be acting upon the same database, but they won't share changes via the message bus. This will result in inconsistencies in between what each one sees and the final result being stored.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>Acknowledgements</h2>

<em>eyeIcon.png</em>

<li>modified from</li>

<em>eyeDropVoxel.mp3</em>

<li>modified from</li>

<h2>About</h2>

<p>A voxel art creator.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/wearables-scanner

# URL: https://github.com/decentraland-scenes/wearables-scanner

<title>GitHub - decentraland-scenes/wearables-scanner: A simple scene that shows how to fetch player wearable data to match against a criteria. In this case, only players wearing eyewear are allowed in.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scene that shows how to fetch player wearable data to match against a criteria. In this case, only players wearing eyewear are allowed in.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/wearables-scanner</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>20</strong>

<h2>Files</h2>

<button>View code</button>

<h1>wearables-scanner</h1>

<p>A simple scene that shows how to fetch player wearable data to match against a criteria. In this case, only players wearing eyewear are allowed in.</p>

<p>This scene shows you:</p>

<li>How to fetch the wearables currently worn by a player</li>

<li>How to handle async functions</li>

<li>How to delay an action with the utils library</li>

<li>How to define the elements of a scene as game objects, with state and functions</li>

<p>Here we're querying the player's wearable items that are being equipped, and also fetching the full list of Decentraland wearables. We then match both these lists up to obtain more information about each of the wearables that the player has equipped, and check if any of these belongs to the 'eyewear' category.</p>

<p>Feel free to reuse the models and code from this scene!</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<code>&ENABLE_WEB3</code>

<p>For example, if the URL is</p>

<code>http://127.0.0.1:8000?position=0%2C0&SCENE_DEBUG_PANEL</code>

<p>, make it</p>

<code>http://127.0.0.1:8000?position=0%2C0&SCENE_DEBUG_PANEL&ENABLE_WEB3</code>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple scene that shows how to fetch player wearable data to match against a criteria. In this case, only players wearing eyewear are allowed in.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Block-Fountain

# Change to URL: https://github.com/decentraland-scenes/video-uv-mapping-to-archways

# URL: https://github.com/decentraland-scenes/video-uv-mapping-to-archways

<title>GitHub - decentraland-scenes/video-uv-mapping-to-archways</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/video-uv-mapping-to-archways</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Video UV Mapping to Archways</h1>

<p>This scene demonstrates how to UV map a video texture onto many many planes</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Follow the labels on each cube to turn it green, testing all the different ways a player can interact with a Decentraland scene.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/avatar-mannequin

# Change to URL: https://github.com/decentraland-scenes/DCL_HQ

# URL: https://github.com/decentraland-scenes/DCL_HQ

<title>GitHub - decentraland-scenes/DCL_HQ: Decentraland Foundation HQ Building</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Decentraland Foundation HQ Building</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/DCL_HQ</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>4</strong>

<h2>Files</h2>

<button>View code</button>

<h1>DCL_HQ</h1>

<p>Decentraland Foundation HQ Building</p>

<h2>About</h2>

<p>Decentraland Foundation HQ Building</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Puffer

# URL: https://github.com/decentraland-scenes/Puffer

<title>GitHub - decentraland-scenes/Puffer: A puffer fish that inflates and deflates when clicked. This scene uses the Utils library.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A puffer fish that inflates and deflates when clicked. This scene uses the Utils library.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Puffer</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>3</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h2>Puffer fish</h2>

<p>A simple interactive scene with a puffer fish that blows up when clicked.</p>

<p>This scene shows you:</p>

<li>How to add a 3D model to a scene</li>

<li>How to use utils helper library to scale an entity and to delay actions</li>

<li>How to chain several actions so that they're performed one after the other</li>

<li>How to play a sound from a file</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>Click on the fish and it will puff up and then deflate, emitting a sound.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>Attributions</h2>

<p>3D model from Sketchfab user</p>

<p>Soudn file from FreeSound user</p>

<p>Both with creative commons licenses.</p>

<h2>About</h2>

<p>A puffer fish that inflates and deflates when clicked. This scene uses the Utils library.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/decentrally

# URL: https://github.com/decentraland-scenes/decentrally

<title>GitHub - decentraland-scenes/decentrally: A cutting edge racing game</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A cutting edge racing game</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/decentrally</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Decentrally</h1>

<h2>Description</h2>

<p>This scene demonstrates</p>

<li>Infinity Engine could be used in a scene</li>

<li>Integrate with</li>

<li>which offers many features you may need while building a game</li>

<li>Using</li>

<li>framework for the utility service</li>

<h3>Infinity Engine</h3>

<p>The Infinity Engine is a framework designed to workaround space limitation of your parcel.  While you may only have a 1x1 parcel, the Infinity Engine holds the player in the center and a scene around the player giving you infinite space to work with.</p>

<h3>PlayFab</h3>

<p>"</p>

<p>enables developers to use the intelligent cloud to build and operate games, analyze gaming data and improve overall gaming experiences. The PlayFab platform is a natural complement to Azure for gaming (Visit</p>

<p>for more info)"</p>

<h2>How PlayFab Login Works</h2>

<p>PlayFab offers several authentication options</p>

<p>. However we chose CustomID so that we can tie the player ID to the account.  CustomID allows us to set anything as the login a player.   To keep the login ID secure and not predictable we use a server to generate a random UUID as the login ID and return it.  We use</p>

<p>which authenticates the signedFetch from the scene and ensures only that player can fetch their CustomID.</p>

<pre>sequenceDiagram

    

    Player->> Scene : enterScene

    Scene->> Service : signedFetch(/player/auth)

    Service->>Service: authenticate signedFetch

    opt If you wanted to verify player is in DCL

        Colyseus->>Catalyst: check is player connected

    end 

    Service->> DB : lookup/create Playfab CustomId

    Note over Scene,PlayFab: Have a few login options here

    alt: Scene logs itself in 

        Service-->>Scene: returns Playfab CustomId

        Scene->>PlayFab: Client/LoginWithCustomID (with CustomId) 

        PlayFab-->>Scene: Login Result

    else: OR Service logs in for client (VARIENT)

        Service->>PlayFab: Client/LoginWithCustomID (with CustomId) 

        PlayFab-->>Service: Login Result

        Service-->>Scene: returns Playfab Login Result

    end

    Note over Scene,PlayFab: Player now logged in to PlayFab

    Scene->>PlayFab: Client/GetPlayerCombinedInfo

    PlayFab-->>Scene: GetPlayerCombinedInfoResult

    Scene-->>Player: Update UI to Logged In State</pre>

<h2>How Multiplayer Works</h2>

<pre>sequenceDiagram

    

    Player->> Scene : playRace

    Scene->> Colyseus : joinOrCreate

    Colyseus->>PlayFab: AuthenticateSessionTicket

    PlayFab-->> Colyseus : valid session

    opt If you wanted to verify player is in DCL

        Colyseus->>Catalyst: check is player connected

    end

    Colyseus-->>Scene: room id

    Note over Colyseus,Scene: Race begins

    par

        loop Player racing

            Player->>Scene: sends inputs

        end

        loop Scene sends actions taken

            Scene->>Colyseus: player data

        end

        loop Colyseus sends room state

            Colyseus->>Scene: room state

            Scene->>Scene: sync entity positions

        end

    end

    Note over Colyseus,Scene: When race is over

    Colyseus->>PlayFab: Updates player stats

    Colyseus->>Scene: Broadcast about to disconnect

    Colyseus->>Scene: Disconnect clients

    Scene->>PlayFab: Client/GetPlayerCombinedInfo for latest stat

    PlayFab-->>Scene: GetPlayerCombinedInfoResult

    Scene-->>Player: Show Race Results</pre>

<h2>Configuration</h2>

<p>NOTE: In an attempt to make playing the scene locally PLAYFAB_ENABLED is by default set to false in the Scene and Colyseus making so you can play locally with no external services configure (do not need a PlayFab account to test it out).  To enable playfab follow the instructions below.</p>

<h3>Scene</h3>

<p>You may want to configure endpoints for your local environment in the instance where you do not want or need to run Colyseus and login server locally</p>

<p>Found in</p>

<code>src/config.ts</code>

<p>there are variables in the following format so you could have configurations for multiple environments</p>

<code>const VARIABLE: Record<string, string> = {

  local: "local value",

  dev: "dev value",

  stg: "staging value",

  prd: "production value",

};</code>

<code>DEFAULT_ENV</code>

<p>- The environment for which values are to be used (local,dev,prod,etc.)</p>

<code>PLAYFAB_ENABLED</code>

<p>- true if PlayFab should be enabled.</p>

<code>PLAYFAB_TITLE_ID</code>

<p>- PlayFab Title ID</p>

<code>COLYSEUS_ENDPOINT_URL</code>

<p>- Websocker endpoint</p>

<code>AUTH_URL</code>

<p>Login Service Endpoint</p>

<h3>Colyseus</h3>

<p>Found in</p>

<code>server/arena.env</code>

<p>you must either disable PlayFab integration OR provide a PlayFab title and developer secret.  By default for the demo PLAYFAB_ENABLED is set to false so you can play locally without requiring a PlayFab account</p>

<code>PLAYFAB_ENABLED=true

PLAYFAB_TITLEID= PlayFab Title ID goes here

PLAYFAB_DEVELOPER_SECRET= PlayFab Title ID goes here</code>

<p>Details on how to get these can be found here</p>

<p>(</p>

<h3>Service</h3>

<p>By default for the demo PLAYFAB_ENABLED is set to false so you can play locally without requiring a PlayFab account.  The service does not need to be ran in this case.</p>

<p>Found in</p>

<code>service/.env.default</code>

<p>default values for the service</p>

<p>Found in</p>

<code>service/.env</code>

<p>are override values.  Place your firebase admin json here</p>

<code>FIREBASE_JSON=you-firebase-admin-json-here</code>

<h2>Try it out</h2>

<p>It will require you to run 3 servers locally</p>

<li>DCL Scene</li>

<li>Colyseus (multiplayer server)</li>

<li>Service (for login support and other server side needs)</li>

<p>And have a PlayFab account and title already created</p>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<h4>Run DCL Scene (Tab1)</h4>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h4>Run Colyseus (Multiplayer server) (Tab2)</h4>

<p>In another command line tab Open ./server/ folder on the command line, then run:</p>

<code>npm run start</code>

<p>Any dependencies are installed and then the server should be running. You should see something like this</p>

<code>â development.env loaded.

â Express initialized

ð  Your Colyseus App

âï¸  Listening on ws://localhost:2567</code>

<h4>Run Service (Tab3)</h4>

<p>NOTE: By default for the demo PLAYFAB_ENABLED is set to false so you can play locally without requiring a PlayFab account.  The service does not need to be ran in this case.</p>

<p>In another command line tab Open ./service/ folder on the command line, then run:</p>

<code>npm run build

npm run start</code>

<p>Any dependencies are installed and then the server should be running. You should see something like this</p>

<code>2022-07-17T01:44:35.100Z [LOG] (http-server): Listening 0.0.0.0:5001</code>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>Acknowledgements</h2>

<p>Some sound clips are from</p>

<p>.   Credits</p>

<p>Portions of this program Â© 2022 Microsoft Azure PlayFab</p>

<p>Multiplayer made possible with Colyseus</p>

<h2>About</h2>

<p>A cutting edge racing game</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>2</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Leader-Board

# URL: https://github.com/decentraland-scenes/Leader-Board

<title>GitHub - decentraland-scenes/Leader-Board: A simple scene showing how to create a leader board for high scores</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scene showing how to create a leader board for high scores</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Leader-Board</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>9</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>18</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Leader Board</h1>

<p>This is a simple scene that implements a leader board. It includes a basic game of clicking a dog statues as many times as possible in 10 seconds. The score is then sent to a server.</p>

<p>This scene shows you:</p>

<li>How to send HTTP requests to an API to store data in a permanent place, so others can then retrieve changes</li>

<li>How to set up a server on Firebase that uses the Firestore database</li>

<li>How to parse a JSON response from an API call</li>

<li>How to arrange text fields into an in-world table</li>

<li>How to parse a string so that it fits a maximum line length and maximum number of lines</li>

<li>How to fetch the player's UserId</li>

<p>TIP: As a placeholder, the scene can use sample data that's packed with the scene to display on the scoreboard.</p>

<p>The server implementation uses</p>

<p>. See</p>

<p>for setting up the server in a similar use case. You could also store the scores somewhere else, like an Amazon S3 server, or any other storage provider.</p>

<p>Bare in mind that this implementation doesn't implement any measures to counter cheating. Since new scores are added to the server via RESTful HTTP calls, these could be easily replicated with fake values.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of an existing server. To launch your own server, we recommend you deploy what's in the</p>

<code>/server</code>

<p>folder to your own Firebase account, following the steps in</p>

<p>.</p>

<strong>Scene Usage</strong>

<p>Play the game by clicking franticly on the dog before the time runs out. If your score makes it into the high-scores it will be uploaded to the server and stored there. It will be retrieved next time you load the scene.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple scene showing how to create a leader board for high scores</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Guest-Book-API

# URL: https://github.com/decentraland-scenes/Guest-Book-API

<title>GitHub - decentraland-scenes/Guest-Book-API: Sign a guestbook. User names are stored in a RESFful API, whic is also included in this repo.</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Sign a guestbook. User names are stored in a RESFful API, whic is also included in this repo.</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Guest-Book-API</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>12</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Guest book</h1>

<p>Sign a guestbook. Signatures done on the guestbook are stored in a Firebase server. The code for the server is included in the</p>

<code>/server</code>

<p>folder of this repo.</p>

<p>Check out the</p>

<p>!</p>

<p>This scene shows you:</p>

<li>How to send HTTP requests to an API to store data in a permanent place, so others can then retrieve changes</li>

<li>How to set up a server on Firebase that uses the Firestore database</li>

<li>How to display a custom UI</li>

<li>How to parse a JSON response from an API call</li>

<li>How to parse a string so that it fits a maximum line length and maximum number of lines</li>

<li>How to fetch the player's UserId</li>

<p>Every time the book is opened, a request is sent to a RESFful API that this server exposes, to fetch all existing signatures. When a new signature is made, another request is sent to that API, including the player's name and id, to add to the database.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Setting up the server</strong>

<p>The scene is set up to make use of an existing server. To launch your own server, we recommend you deploy what's in the /server folder to your own Firebase account, following the steps in</p>

<p>.</p>

<strong>Scene Usage</strong>

<p>Click on the guestbook to open the UI and fetch all the signatures on the book. You can flip through the pages by clicking the arrows on the sides. If you click the sign button, your user ID will be fetched and added to the list of signatures. If you run this on preview, you will be using the randomly generated</p>

<code>guest</code>

<p>UI used by preview.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Sign a guestbook. User names are stored in a RESFful API, whic is also included in this repo.</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>4</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>6</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/snowball-fight

# URL: https://github.com/decentraland-scenes/snowball-fight

<title>GitHub - decentraland-scenes/snowball-fight</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/snowball-fight</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>17</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>42</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Colyseus Tutorial</h1>

<p>A multiplayer scene with [Colyseus]{</p>

<p>for websockets multiplayer messaging. The game logic is carried out server-side.</p>

<p>This scene shows you:</p>

<li>How to support [Colyseus]{</li>

<li>in a Decentraland scene</li>

<li>How to set up a simple scene state in Colyseus</li>

<li>How to handle game state changes from the server in your scene</li>

<li>How to fetch a player's realm</li>

<li>How to keep track of the state of each realm as a separate room in your game</li>

<p>The server keeps track of the color selected by each player and the changes in cube colors.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Run the server locally</strong>

<code>$ cd server

$ npm run build

$ npm run start</code>

<p>NOTE: If this is your first time running the scene then you need to run</p>

<code>npm install</code>

<p>before</p>

<code>npm start</code>

<strong>Run the scene</strong>

<p>Keep the server running, run the scene on a separate command line window:</p>

<code>$ cd scene

$ dcl start</code>

<strong>Scene Usage</strong>

<p>Open two separate browser windows, click on the cones to pick a color, then click on the cubes to paint them that same color.</p>

<h2>Using Colyseus SDK with Decentraland</h2>

<p>Install</p>

<code>colyseus.js</code>

<p>:</p>

<code>npm install --save colyseus.js</code>

<p>Add</p>

<code>colyseus.js</code>

<p>to your</p>

<code>"bundleDependencies"</code>

<p>in your</p>

<code>package.json</code>

<p>:</p>

<pre>: [</pre>

<pre>]</pre>

<p>To avoid TypeScript compilation errors you'll need to edit</p>

<code>tsconfig.json</code>

<p>, and include a few</p>

<code>///<reference</code>

<p>to your source-code, as you can see in the</p>

<p>file.</p>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>}

}</pre>

<p>The Colyseus SDK requires a few TypeScript libraries that are excluded by default by Decentraland.</p>

<h2>Creating a Colyseus server:</h2>

<code>npm init colyseus-app ./server</code>

<h2>Deploying to</h2>

<code>npm run build</code>

<p>Upload the</p>

<code>lib</code>

<p>folder from the Arena control panel.</p>

<h2>More</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/using-colyseus-sdk-with-decentraland

# Change to URL: https://github.com/decentraland-scenes/Colyseus-Tutorial

# URL: https://github.com/decentraland-scenes/Colyseus-Tutorial

<title>GitHub - decentraland-scenes/Colyseus-Tutorial: Tutorial for multiplayer with Colyseus</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Tutorial for multiplayer with Colyseus</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Colyseus-Tutorial</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>16</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>10</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Colyseus Tutorial</h1>

<p>A multiplayer scene with [Colyseus]{</p>

<p>for websockets multiplayer messaging. The game logic is carried out server-side.</p>

<p>This scene shows you:</p>

<li>How to support [Colyseus]{</li>

<li>in a Decentraland scene</li>

<li>How to set up a simple scene state in Colyseus</li>

<li>How to handle game state changes from the server in your scene</li>

<li>How to fetch a player's realm</li>

<li>How to keep track of the state of each realm as a separate room in your game</li>

<p>The server keeps track of the color selected by each player and the changes in cube colors.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Run the server locally</strong>

<code>$ cd server

$ npm run build

$ npm run start</code>

<p>NOTE: If this is your first time running the scene then you need to run</p>

<code>npm install</code>

<p>before</p>

<code>npm start</code>

<strong>Run the scene</strong>

<p>Keep the server running, run the scene on a separate command line window:</p>

<code>$ cd scene

$ dcl start</code>

<strong>Scene Usage</strong>

<p>Open two separate browser windows, click on the cones to pick a color, then click on the cubes to paint them that same color.</p>

<h2>Using Colyseus SDK with Decentraland</h2>

<p>Install</p>

<code>colyseus.js</code>

<p>:</p>

<code>npm install --save colyseus.js</code>

<p>Add</p>

<code>colyseus.js</code>

<p>to your</p>

<code>"bundleDependencies"</code>

<p>in your</p>

<code>package.json</code>

<p>:</p>

<pre>: [</pre>

<pre>]</pre>

<p>To avoid TypeScript compilation errors you'll need to edit</p>

<code>tsconfig.json</code>

<p>, and include a few</p>

<code>///<reference</code>

<p>to your source-code, as you can see in the</p>

<p>file.</p>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>}

}</pre>

<p>The Colyseus SDK requires a few TypeScript libraries that are excluded by default by Decentraland.</p>

<h2>Creating a Colyseus server:</h2>

<code>npm init colyseus-app ./server</code>

<h2>Deploying to</h2>

<code>npm run build</code>

<p>Upload the</p>

<code>lib</code>

<p>folder from the Arena control panel.</p>

<h2>More</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Tutorial for multiplayer with Colyseus</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>3</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/osc-relay

# URL: https://github.com/decentraland-scenes/osc-relay

<title>GitHub - decentraland-scenes/osc-relay: Route OSC messages to Decentraland scenes, via Colyseus</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Route OSC messages to Decentraland scenes, via Colyseus</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/osc-relay</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>14</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>13</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Relay OSC messages to Decentraland</h1>

<p>This project relies on 3 parts:</p>

<li>A browser app that can receive OSC messages from any source (</li>

<em>linker-app</em>

<li>)</li>

<li>A Colyseus server that gets sent these messages over webSockets (</li>

<em>server</em>

<li>)</li>

<li>A Decentraland scene that receives these messages and updates positions of entities accordingly (</li>

<em>scene</em>

<li>)</li>

<p>You can generate OSC messages with many different sources, some examples:</p>

<li>OSCHoop Mobile app</li>

<li>Ableton Live + Connection Kit</li>

<li>Leap Motion + Ableton Live + Connection Kit</li>

<h2>Instructions</h2>

<h3>Run locally</h3>

<li>Open a console on the</li>

<code>server</code>

<li>folder</li>

<li>Run</li>

<code>npm run build</code>

<li>, then</li>

<code>npm run start</code>

<li>in server's folder to start the Colyseus local server</li>

<li>Open a second console window on the</li>

<code>linker-app/browser-oscjs</code>

<li>folder</li>

<li>Run</li>

<code>npm install</code>

<li>to install all the project dependencies.</li>

<li>Run</li>

<code>node .</code>

<li>to start the OSC relayer (no need to open the app in a browser window, it does all it needs to do from the console)</li>

<li>Check the IP and port that the OSC relayer is listening on. Hook any external services to this same address, make sure it's connected on the same local network.</li>

<li>Open a third console window in</li>

<code>scene</code>

<li>Run</li>

<code>dcl start</code>

<li>to start running the scene locally</li>

<p>Note: The server and scene expect messages with the following addresses:</p>

<code>/fader1</code>

<p>,</p>

<code>/fader2</code>

<p>,</p>

<code>/fader3</code>

<p>,</p>

<code>/fader4</code>

<p>, all with values between 0 and 1.</p>

<h3>Try it in-word</h3>

<li>Open a console window on the</li>

<code>linker-app/browser-oscjs</code>

<li>folder</li>

<li>Run</li>

<code>npm install</code>

<li>to install all the project dependencies.</li>

<li>Run</li>

<code>node .</code>

<li>to start the OSC relayer (no need to open the app in a browser window, it does all it needs to do from the console)</li>

<li>Check the IP and port that the OSC relayer is listening on. Hook any external services to this same address, make sure it's connected on the same local network.</li>

<li>Open a browser tab to visit Decentraland at coords</li>

<p>Note: This might not work if someone else is already acting as Director on this Colyseus server.</p>

<p>Note: The server and scene expect messages with the following addresses:</p>

<code>/fader1</code>

<p>,</p>

<code>/fader2</code>

<p>,</p>

<code>/fader3</code>

<p>,</p>

<code>/fader4</code>

<p>, all with values between 0 and 1.</p>

<h3>How this works</h3>

<li>The OSC Relayer app receives OSC messages and forwards these as Websocket messages to the Colyseus server.</li>

<li>The Colyseus server then updates its room state based on these messages</li>

<li>Scenes that are also connected to the Colyseus server get updated as the room state changes</li>

<p>In each Colyseus room, there can be only one "Director" user. This user is the one that sends all the changes, all other players just listen. The OSC relayer is connected as a director, sending a password together with the request to connect. Players who connect to the server via Decentraland join as audience, and have no means to affect the room state by themselves.</p>

<p>If a Colyseus room doesn't have a director assigned, it will listen to messages shared between rooms, using the</p>

<code>presence</code>

<p>functionality of Colyseus. In this way, a single Director can reach all rooms and affect all realms of Decentraland, without being limited to the room limits of Colyseus nor the realm limits of Decentraland.</p>

<h2>Using Colyseus SDK with Decentraland</h2>

<p>Install</p>

<code>colyseus.js</code>

<p>:</p>

<code>npm install --save colyseus.js</code>

<p>Add</p>

<code>colyseus.js</code>

<p>to your</p>

<code>"bundleDependencies"</code>

<p>in your</p>

<code>package.json</code>

<p>:</p>

<pre>: [</pre>

<pre>]</pre>

<p>To avoid TypeScript compilation errors you'll need to edit</p>

<code>tsconfig.json</code>

<p>, and include a few</p>

<code>///<reference</code>

<p>to your source-code, as you can see in the</p>

<p>file.</p>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>}

}</pre>

<p>The Colyseus SDK requires a few TypeScript libraries that are excluded by default by Decentraland.</p>

<h2>Creating a Colyseus server:</h2>

<code>npm init colyseus-app ./server</code>

<h2>Deploying to</h2>

<code>npm run build</code>

<p>Upload the</p>

<code>lib</code>

<p>folder from the Arena control panel.</p>

<h2>More</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Route OSC messages to Decentraland scenes, via Colyseus</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/relay-osc-messages-to-decentraland

# Change to URL: https://github.com/decentraland-scenes/Land-Flipper-Game

# URL: https://github.com/decentraland-scenes/Land-Flipper-Game

<title>GitHub - decentraland-scenes/Land-Flipper-Game: A multiplayer game with websockets</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A multiplayer game with websockets</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Land-Flipper-Game</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>15</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>32</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Land Flipper Game</h1>

<p>A multiplayer game with</p>

<p>for websockets multiplayer messaging. The game logic is carried out server-side.</p>

<p>This scene shows you:</p>

<li>How to support</li>

<li>in a Decentraland scene</li>

<li>How to set up a simple game logic in Colyseus</li>

<li>How to handle game state changes from the server in your scene</li>

<li>How to fetch a player's realm</li>

<li>How to keep track of the state of each realm as a separate room in your game</li>

<li>How to handle team formation, scoring and time limits from the server</li>

<p>The server takes care of organizing players into teams and only starting a match when there are players on both sides.</p>

<p>Each scene runs its own calculations of the current remaining time and the scores of each team, but so does the server. In the end, the server has the final word about when the match is over and what is the final result.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<code>$ npm i -g decentraland</code>

<strong>Run the server locally</strong>

<code>$ cd server

$ npm run build

$ npm run start</code>

<p>NOTE: If this is your first time running the scene then you need to run</p>

<code>npm install</code>

<p>before</p>

<code>npm start</code>

<strong>Run the scene</strong>

<p>Keep the server running, run the scene on a separate command line window:</p>

<code>$ cd scene

$ dcl start</code>

<strong>Scene Usage</strong>

<p>Open two separate browser windows, and direct one player to the Blue tile and another to the Red tile, so that there are players in both teams.</p>

<h2>Using Colyseus SDK with Decentraland</h2>

<p>Install</p>

<code>colyseus.js</code>

<p>:</p>

<code>npm install --save colyseus.js</code>

<p>Add</p>

<code>colyseus.js</code>

<p>to your</p>

<code>"bundleDependencies"</code>

<p>in your</p>

<code>package.json</code>

<p>:</p>

<pre>: [</pre>

<pre>]</pre>

<p>To avoid TypeScript compilation errors you'll need to edit</p>

<code>tsconfig.json</code>

<p>, and include a few</p>

<code>///<reference</code>

<p>to your source-code, as you can see in the</p>

<p>file.</p>

<pre>{</pre>

<pre>: {</pre>

<pre>:</pre>

<pre>,</pre>

<pre>}

}</pre>

<p>The Colyseus SDK requires a few TypeScript libraries that are excluded by default by Decentraland.</p>

<h2>Creating a Colyseus server:</h2>

<code>npm init colyseus-app ./server</code>

<h2>Deploying to</h2>

<code>npm run build</code>

<p>Upload the</p>

<code>lib</code>

<p>folder from the Arena control panel.</p>

<h2>More</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A multiplayer game with websockets</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>6</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/POAP-Booth

# URL: https://github.com/decentraland-scenes/POAP-Booth

<title>GitHub - decentraland-scenes/POAP-Booth: A simple scene with an interactive booth that gives out POAP tokens to certify the player's attendance to an event</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simple scene with an interactive booth that gives out POAP tokens to certify the player's attendance to an event</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/POAP-Booth</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>5</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>44</strong>

<h2>Files</h2>

<button>View code</button>

<h1>POAP Booth</h1>

<p>A simple scene with an interactive booth that hands out POAP tokens to certify the player's attendance to an event.</p>

<p>This scene shows you:</p>

<li>How to interact with the functions of a smart contract</li>

<li>How to obtain a player's wallet address</li>

<li>How to send requests to an API</li>

<li>How to use the messagebus to sync events between players</li>

<p>Important: This scene connects to a server that stores the POAP codes to be claimed. See</p>

<p>for instructions for how to set up this server.</p>

<p>When a POAP code is redeemed, the scene then sends a series of requests that include this code and the player's public address to servers from the POAP project, these return a cryptographic signed message. This message can then be used to call the POAP contract to mint a new POAP token that is sent to the player's wallet.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<p>If you click on the booth, this will send a request to attempt to claim a POAP token to a server. This request will fail the server's validations if you run the scene on a local preview. Only requests performed from inside Decentraland are allowed to work.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h2>Set up an event</h2>

<p>Each copy of a POAP token that is minted must present a single-use claim code, these are handed out by the POAP team when creating an event. A Decentraland POAP server acts as an intermediary to assign a unique claim code to each player, this server also requests a token using that claim code on behalf of the player.</p>

<p>See</p>

<p>for instructions on how to set up the event and the Decentraland POAP sever.</p>

<h2>Set up the scene</h2>

<p>Once the event and the Decentraland POAP server are set up, modify the</p>

<code>game.ts</code>

<p>file in this repo, when initializing the</p>

<code>POAPBooth</code>

<p>object, to match your event:</p>

<p>Change the second parameter,</p>

<code>eventUUID</code>

<p>, so that the string matches the</p>

<code>uuid</code>

<p>string that was returned by the Decentraland POAP server when registering the event.</p>

<p>So, for example if the Decentraland POAP server assigned you a UUID of</p>

<code>123456789-1234-1234-1234-123456789123</code>

<p>, your</p>

<code>game.ts</code>

<p>file should look like this:</p>

<pre>:</pre>

<pre>:</pre>

<p>TIP: When running a local preview of this scene with</p>

<code>dcl start</code>

<p>, you won't be able to fetch a POAP, because in preview mode you use a fake random id that won't match the one on your Metamask. You will be able to call a transaction, but the transaction will have an error. Once deployed it should work fine.</p>

<p>If something doesnât work, please</p>

<p>.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>A simple scene with an interactive booth that gives out POAP tokens to certify the player's attendance to an event</p>

<h3>Topics</h3>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>30</strong>

<h3>Watchers</h3>

<strong>4</strong>

<h3>Forks</h3>

<strong>26</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=1

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=1

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A collection of links to examples and tutorials to help you get started building Decentraland scenes and other content.</p>

<p>Using the rewards server to claim wearables</p>

<p>A simple portable experience where you can create portals anywhere in the world</p>

<p>The newly revamped Genesis Plaza.</p>

<p>A scene showing a working quest</p>

<p>A simple platformer that demonstrates various platform movements using code.</p>

<p>Forbid players from claiming a prize if wearing any portable experience</p>

<p>Green Screen Scene for photoshoots and showing off wearables and emotes. You can switch background colors</p>

<p>A simple example that shows how you can use DCL Access library to restrict access to players to a part of your scene</p>

<p>A scene that checks a weather API for the weather in a location and displays that weather condition, showing rain, thunder or snowflakes Use real weather data from different locations by changing the coordinates, or change the value of the âfakeWeatherâ variable to see different weather conditions manifest.</p>

<p>A scene that shows how you can use Ray Casting to trace imaginary lines in space and check for object intersections.</p>

<p>A scene where you can play different songs by pressing buttons on a jukebox.</p>

<p>A fully fledged game, based on the popular game 2048.</p>

<p>port of</p>

<p>colyseus-sdk7</p>

<p>A large example scene with a store, this example is meant for using in worlds. It includes default art but no interactive behavior</p>

<p>A large scene for worlds, with a simple screen ready for streaming video</p>

<p>A simple scene with default art meant for Worlds, with 10x10 parcels</p>

<p>A template scene with default art, featuring an office. This is built for using in Worlds</p>

<p>A large scene for worlds, with default art, featuring a cool nightclub</p>

<p>Basic 101 Avocado Tutorial</p>

<em>1</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/orgs/decentraland-scenes/repositories?page=3

# URL: https://github.com/orgs/decentraland-scenes/repositories?page=3

<title>decentraland-scenes Â· GitHub</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h2>Repositories</h2>

<p>A portable experience to paint graffitti on a layer only visible to those wearing the wearable</p>

<p>Assets and code used for the Metaverse Festival 2022 Main Stage Scene</p>

<p>Assets and code used for the Metaverse Festival 2022 Tower of Babel Scene</p>

<p>Stress test the SDK with many entities updating every frame</p>

<p>A simpe example scene that uses quests</p>

<p>Medieval Plaza in Decentraland</p>

<p>crypto valley convention center</p>

<p>Optimized scene that only loads certain entites when the player approaches them</p>

<p>A project that shows how to use workspaces to run multiple scenes + smart wearables together</p>

<p>Grant admin players special abilities in a scene, like kicking other players out</p>

<p>A minimal scene that shows all the basic ways a player can interact with a scene.</p>

<p>Demonstrates several objects that react to your proximity. Simulates a Boolean Hole in a wall, has objects that move over/around you, triggers to activate effects inside or outside the building.</p>

<p>A simple generic virtual museum for displaying NFT art</p>

<p>A basic generic virtual store for wearables and other tokens</p>

<p>Test scene to verify a bug with UVs</p>

<p>Asian Plaza in Decentraland</p>

<p>Forst plaza</p>

<p>messageBus-tuto</p>

<p>An example scene that handles quests</p>

<p>Trams public transport system</p>

<p>A fully-fledged game where a random 2d path is generated along which enemies walk, and where traps are randomly placed. You need to activate the traps as the enemies advance along the path to kill them. Itâs all about timing.</p>

<p>A scene where birds fly up in the air based on their relative distance to the player.</p>

<p>Tool that helps you project a large video stretching over many smaller screens</p>

<p>Decentraland's first 24/7 night club</p>

<p>Checks whether the player owns a token from a particular smart contract before granting them permission to enter the club.</p>

<em>3</em>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/boids

# URL: https://github.com/decentraland-scenes/boids

<title>GitHub - decentraland-scenes/boids</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/boids</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>11</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Boids</h1>

<p>Boids is an implementation of the boids algorithm. This can be used for simulation flock behavior such as birds or fish in 3D space.  It uses a grid implementation for fast lookups.</p>

<h1>Class Overview</h1>

<p>BoidsController class defines a container for boids entities. All entities (flock or obstalces) are added to BoidsController. BoidsController calculates and updates entity positions and velocities.</p>

<p>BoidSystem is the wrapper for BoidsController to make it work inside a Decentraland SDK. The responsibility of this class is to create a new BoidsController instance with the received data and run the requested iterations in this isolated context.</p>

<p>setupBoids is the setup class.  It will initialize the BoidController.  Here can define here the area, flock, obsticles, predators, subGrid count</p>

<p>BoidEntity class defines an entitiy model which has a position and a velocity. Also it has some utiliy methods.</p>

<p>Grid class creates cubic grid for spatial partitioning. This helps lookups to be performed faster for nearby entities. More information can be found here:</p>

<h1>Configuration</h1>

<p>/src/boids/Constants.js</p>

<p>See Debug Markers such as grid markers, boundary top/bottom, obstacles, seek and prediator entities</p>

<code>//see debug markers for seek/obsticle/predator

VISIBLE_OBSTACLES:boolean = true 

VISIBLE_SEEK:boolean = true

VISIBLE_PREDATOR:boolean = true

// see boundary grid markers

SHOW_DEBUG_BOUNDARY_MARKERS:boolean = true

// see boundary planes (top,bottom)

SHOW_DEBUG_BOUNDARY_PLANES:boolean = true</code>

<p>/src/config.ts</p>

<code>TEST_CONTROLS_ENABLE = true</code>

<p>/src/boids/setupBoids.js</p>

<p>see initBoidController for creation of all entities types.  Some flags of note include</p>

<code>//SETUP BOUNDARIES

const parcelSize = 15.5

const width = parcelSize 

const depth = parcelSize * 2

const height = 5

const heightBottomOffset = 1 

const subGrids = 4 //large grid count makes all fish operating the same get reduced

/*

300 - 1 subgrid

600 - 2 subgrid

700 - 3 subgrid*

*/

//SETUP INITIALIZATION OF BOIDS

const flockEntityCount = 80

//will randomly place these

const obstacleEntityCount = 0

const predatorCount = 0

const seekCount = 0</code>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>Acknowledgements</h2>

<p>Code here is an adaptation of</p>

<p>BoidJS has standard MIT licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Smart-wearable-graffitti

# URL: https://github.com/decentraland-scenes/Smart-wearable-graffitti

<title>GitHub - decentraland-scenes/Smart-wearable-graffitti: A portable experience to paint graffitti on a layer only visible to those wearing the wearable</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A portable experience to paint graffitti on a layer only visible to those wearing the wearable</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Smart-wearable-graffitti</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>6</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>6</strong>

<h2>Files</h2>

<button>View code</button>

<h1>graffitti</h1>

<p>A portable experience to paint graffitti on a layer only visible to those wearing the wearable</p>

<h2>About</h2>

<p>A portable experience to paint graffitti on a layer only visible to those wearing the wearable</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>1</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/metaverse-festival22-main-stage

# URL: https://github.com/decentraland-scenes/metaverse-festival22-main-stage

<title>GitHub - decentraland-scenes/metaverse-festival22-main-stage: Assets and code used for the Metaverse Festival 2022 Main Stage Scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Assets and code used for the Metaverse Festival 2022 Main Stage Scene</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/metaverse-festival22-main-stage</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>5</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Metaverse Music Festival 2022 Main Sage</h1>

<p>Assets and code used for the</p>

<p>Main Stage Scene</p>

<h2>How to deploy</h2>

<p>NOTE: This is deployed by a git action

branches are configured to auto deploy.  Merge code ready to release into release branch</p>

<li>master = peer-testing</li>

<li>release = production</li>

<p>Requires an action secret setup named DCL_PRIVATE_KEY that has a private key to a wallet that has operator rights to the parcels you are deploying to</p>

<h2>Description</h2>

<p>This scene demonstrates how to synchronize actions in the scene to specific moments in a video by implementing the</p>

<p>.</p>

<p>This scene shows you:</p>

<li>How to schedule playing a video streamed on-demand to play at a certain time</li>

<li>How to sync actions in the scene to moments in the video</li>

<p>Note: For details on how to store videos in servers that can be fetched from Decentraland, see</p>

<h2>Tutorial</h2>

<h3>Show Managment Library</h3>

<h3>Show Management Scene</h3>

<h2>What is Where</h2>

<h4>src/show-management</h4>

<p>is a copy of the show management library code. hopfully you do not have to touch this. but is there for quick edits if needed</p>

<h3>src/subtitle-files</h3>

<p>holds subtitles for videos</p>

<h3>src/modules/festivalMgmt</h3>

<p>serverHandler.ts handled pinging the remote server</p>

<p>manageShow.ts handles actions to fire for a show</p>

<h3>showMgmt/modules/showMgmt</h3>

<h4>showMgmt/modules/showMgmt/scheduleSetup.ts</h4>

<p>configured shows however serverHandler.ts will override this</p>

<p>Default video url is in here</p>

<h4>showMgmt/modules/showMgmt/showEntities.ts</h4>

<p>registers show entities with the show manager. Example animations</p>

<h4>showMgmt/modules/showMgmt/showSetup.ts</h4>

<p>sets up the show manager instance</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Assets and code used for the Metaverse Festival 2022 Main Stage Scene</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/metaverse-festival22-tower-of-babel

# URL: https://github.com/decentraland-scenes/metaverse-festival22-tower-of-babel

<title>GitHub - decentraland-scenes/metaverse-festival22-tower-of-babel: Assets and code used for the Metaverse Festival 2022 Tower of Babel Scene</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Assets and code used for the Metaverse Festival 2022 Tower of Babel Scene</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/metaverse-festival22-tower-of-babel</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>3</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Tower of Babel</h1>

<p>Assets and code used for the</p>

<p>Tower of Babel Scene</p>

<h2>How to deploy</h2>

<p>NOTE: This can be deployed by a git action.

Branches are configured to auto deploy.  Merge code ready to release into release branch</p>

<li>release = production</li>

<p>Requires an action secret setup named DCL_PRIVATE_KEY that has a private key to a wallet that has operator rights to the parcels you are deploying to</p>

<p>This folder contains all the necessary files to launch a Decentraland scene.</p>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Open this folder on the command line, then run:</p>

<code>dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<h2>Deploy to Decentraland</h2>

<p>If you own any parcels of land in Decentraland, or have permissions to deploy to someone else's, you can publish this project.</p>

<li>Make sure the scene parcels in</li>

<code>scene.json</code>

<li>match those you own or have permissions on.</li>

<li>Run</li>

<code>dcl deploy</code>

<li>on the project folder</li>

<li>This will open a browser tab to confirm. Metamask will prompt you to sign.</li>

<p>Note: Make sure you are using the wallet that owns the parcels or has permissions.</p>

<h3>Deploy to a free server</h3>

<p>If you don't own parcels in Decentraland or are not ready to publish your scene to the world, you can share your creations by uploading your scenes to a free hosting service.</p>

<p>See</p>

<p>for instructions on how to do this.</p>

<h2>Resources</h2>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<p>Find more example scenes, tutorials and helper libraries in the</p>

<p>.</p>

<p>If you need any help, join</p>

<p>, where you'll find a vibrant community of other creators who are eager to help. You're sure to find help in the #SDK support channel.</p>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Assets and code used for the Metaverse Festival 2022 Tower of Babel Scene</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/stress-test

# URL: https://github.com/decentraland-scenes/stress-test

<title>GitHub - decentraland-scenes/stress-test: Stress test the SDK with many entities updating every frame</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Stress test the SDK with many entities updating every frame</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/stress-test</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h1>stress-test</h1>

<p>Stress test the SDK with many entities updating every frame</p>

<h2>About</h2>

<p>Stress test the SDK with many entities updating every frame</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Portal-quest

# URL: https://github.com/decentraland-scenes/Portal-quest

<title>GitHub - decentraland-scenes/Portal-quest: A simpe example scene that uses quests</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A simpe example scene that uses quests</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Portal-quest</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>8</strong>

<h2>Files</h2>

<button>View code</button>

<h1>portal-quest</h1>

<p>A simpe example scene that uses quests</p>

<p>IMPORTANT: To run this example with</p>

<code>dcl start</code>

<p>, make sure you manually add this to the preview URL</p>

<code>&QUESTS_SERVER_URL=https://quests-api.decentraland.io</code>

<p>This quest includes some single tasks, a step based task, and stores arbritrary state that gives the game continuity if you come back. It also gives away a POAP reward when the quest is finished.</p>

<p>Check the file</p>

<code>quest-example.json</code>

<p>to see what was uploaded to the quests server to match this scene.</p>

<p>Note: This quest includes a reward, the reward must be first created in the server with a separate request, and then linked to the quest by id.</p>

<h2>Quest library</h2>

<h3>Install</h3>

<p>To install the library in a Decentraland scene, run:</p>

<code>npm i dcl-ecs-quests -B</code>

<p>Then open your sceneâs tsconfig.json file, and add the following to the paths object:</p>

<pre>: [</pre>

<pre>],</pre>

<p>Finally, run dcl start or dcl build on your project for all the internal files of the library to get properly built.</p>

<p>Then on your sceneâs Typescript files import the library by writing the following:</p>

<h3>Initiate a quest tracker</h3>

<p>All interactions with the quest server and the quest UI are handled by a quest tracker object.</p>

<p>To initiate a quest tracker, create a new RemoteQuestTracker object, passing at least a quest ID, referencing a quest thatâs already created in the quests server.</p>

<p>Note: Since the constructor of RemoteQuestTracker is asynchronous, you should run it inside an async function or an async block. All examples from now on will be assumed to run asynchronously.</p>

<h2>About</h2>

<p>A simpe example scene that uses quests</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>7</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/Medieval-Plaza

# URL: https://github.com/decentraland-scenes/Medieval-Plaza

<title>GitHub - decentraland-scenes/Medieval-Plaza: Medieval Plaza in Decentraland</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Medieval Plaza in Decentraland</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/Medieval-Plaza</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>4</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>2</strong>

<h2>Files</h2>

<button>View code</button>

<h1>MedievalPlaza</h1>

<p>Medieval Plaza in Decentraland</p>

<h2>About</h2>

<p>Medieval Plaza in Decentraland</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>0</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/crypto-valley-conference-center

# URL: https://github.com/decentraland-scenes/crypto-valley-conference-center

<title>GitHub - decentraland-scenes/crypto-valley-conference-center: crypto valley convention center</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>crypto valley convention center</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/crypto-valley-conference-center</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>16</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>30</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Crypto Valley Convention Center</h1>

<p>The convention center is a venue that hosts all kinds of live events with a live streaming screen.</p>

<p>This scene shows you:</p>

<li>How to stream video and audio</li>

<li>How to trigger the playing of video or audio streams with trigger aras</li>

<li>How to handle a POAP dispenser</li>

<li>How to allowlist players as admins with special permissions in a scene</li>

<li>How to teleport a player within a scene</li>

<li>How to fetch data from an API to display market values in a scene</li>

<h2>Try it out</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command:</p>

<pre>npm i -g decentraland</pre>

<strong>Previewing the scene</strong>

<p>Download this example and navigate to its directory, then run:</p>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI opens the scene in a new browser tab.</p>

<strong>Scene Usage</strong>

<p>The main lobby has a screen that can be hooked up to video streams, then upstairs there's alo a sound stream and a video stream that projects onto some spinning cubes. When the player is in the lobby, only the stream downstairs runs. If the player goes upstairs, only the upstairs streams run.</p>

<p>There's a POAP dispenser machine that connects to a server to hand out POAP tokens to visitors.</p>

<p>The back of the building shows the price of a few coins, with data fetched on loading from the Binance API.</p>

<p>Admin users that are whitelisted by name can access a special UI to send announcement messages or to kick out problematic players, teleporting them to the 0,0 of the scene.</p>

<h2>About</h2>

<p>crypto valley convention center</p>

<h3>Resources</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>1</strong>

<h3>Forks</h3>

<strong>5</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/halloween-day5

# URL: https://github.com/decentraland-scenes/halloween-day5

<title>GitHub - decentraland-scenes/halloween-day5</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/halloween-day5</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>1</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>1</strong>

<h2>Files</h2>

<button>View code</button>

<h2>About</h2>

<h3>Stars</h3>

<strong>0</strong>

<h3>Watchers</h3>

<strong>3</strong>

<h3>Forks</h3>

<strong>2</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/lazy-loading

# URL: https://github.com/decentraland-scenes/lazy-loading

<title>GitHub - decentraland-scenes/lazy-loading: Optimized scene that only loads certain entites when the player approaches them</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>Optimized scene that only loads certain entites when the player approaches them</p>

<h3>License</h3>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/lazy-loading</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Xcode</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching Visual Studio Code</h4>

<p>Your codespace will open once ready.</p>

<p>There was a problem preparing your codespace, please try again.</p>

<h2>Latest commit</h2>

<h2>Git stats</h2>

<strong>22</strong>

<h2>Files</h2>

<button>View code</button>

<h1>Lazy Loading</h1>

<p>This is an optimized scene that only loads certain entities when the player approaches them. This reduces the scene load time, and also has less of an impact on framerate as the player moves through the scene.</p>

<p>Art galleries often include a lot of NFTs, which raises the material count and impacts performance considerably. Keep in mind that the material count only considers materials being used at a given time. Entities that are not currently being loaded aren't counted. The ideal solution is to not load everything at once, but instead to load and unload content that is indoors as the player enters the corresponding parts of the scene.</p>

<p>This scene includes multiple small buildings, each with a set of NFTs in it. Each of these buildings has a trigger area that loads its NFTs only when the player walks near it, and then hides them when the player walks away.</p>

<p>For easier maintenance, the scene lists all of the NFTs in the scene in an array, including data about their positions and what subScene they belong to. The scene then assigns these to their corresponding subScene and handles showing and hiding them when appropriate.</p>

<p>We then take this further.  What if you wanted multiple galleries but not the space to display them all in your parcel.  Enter SubScenes.   We show you how to register entities to SubScenes, register those SubScenes to a Scene Manager and from there you can convienently swap out which subscenes you want visible and when.  It also provides a visibilityStrategy flag on the SubScene and registered SceneEntities allowing you to further fine tune how you manage resources of the scene.</p>

<h2>Video Tutorial</h2>

<strong>Install the CLI</strong>

<p>Download and install the Decentraland CLI by running the following command</p>

<pre>npm i -g decentraland</pre>

<p>For a more details, follow the steps in the</p>

<p>.</p>

<strong>Previewing the scene</strong>

<p>Once you've installed the CLI, download this example and navigate to its directory from your terminal or command prompt.</p>

<em>from the scene directory:</em>

<code>$:  dcl start</code>

<p>Any dependencies are installed and then the CLI will open the scene in a new browser tab automatically.</p>

<p>Learn more about how to build your own scenes in our</p>

<p>site.</p>

<h2>Hide / Show Options</h2>

<p>When you wrap an SDK Entity in a EntityWrapper class and put it into a SubScene when SubScene init(), hide(), show() is called you can choose if that entity is removed from the engine or just hidden with a</p>

<code>visibilityStrategy</code>

<p>flag.</p>

<code>sceneEntity.visibilityStrategy = VisibilityStrategyEnum.ENGINE_ADD_REMOVE

OR

sceneEntity.visibilityStrategy = VisibilityStrategyEnum.SHAPE_SHOW_HIDE</code>

<code>ENGINE_ADD_REMOVE</code>

<p>Pros</p>

<li>Performance gain as it completely removes the item from engine so in no way impacts engine resources (GPU, textures, systems etc)</li>

<p>Cons</p>

<li>Hiding and particularly showing (for the first time) may cause some increased CPU work and may not appear immeidatly in scene.   You need to account for this.</li>

<p>Could be good or bad</p>

<li>Systems are no longer aware of the entity and operate on it</li>

<code>SHAPE_SHOW_HIDE</code>

<p>Pros</p>

<li>Performance gain for the GPU.  It does not have to spend time on rendering it.</li>

<li>Because it is already in the engine it has faster loading time when hide/showing</li>

<p>Cons</p>

<li>While the GPU does not have to render it, it is still in the engine consuming resources. For example Systems still see it and operate on it.  Textures, Body counts remain higher</li>

<p>Could be good or bad</p>

<li>Systems are still aware of the entity and operate on it</li>

<h3>Listeners</h3>

<p>You also can choose to implement listeners to react to hiding and showing of the entity.   From here you can fully customize the life cycle of the object from a init, show and hide perspective.  For example could choose to lazy load the entity when the scene itself is init.</p>

<code>sceneEnt.addOnInitListener((entityWrap)=>{

  //do something special

})

sceneEnt.addOnShowListener((entityWrap)=>{

  //do something special

}) 

sceneEnt.addOnHideListener((entityWrap)=>{

  //do something special

})</code>

<h2>Usage of Scene Manager</h2>

<p>see</p>

<code>/src/subSceneSetup.ts</code>

<p>for an exampe of how to use Scene Manager with SubScenes</p>

<code>SCENE_MGR = new SceneManager(); 

//make scene1

const mySceneEntity = new Entity()

mySceneEntity.addComponent(new BoxShape())

const sceneId = SCENE_MGR.generateSceneId()

const subScene = new SubScene(sceneId,"myScene",[],undefined,undefined)

const sceneEntity = subScene.addEntity(mySceneEntity) 

sceneEntity.visibilityStrategy = VisibilityStrategyEnum.ENGINE_ADD_REMOVE

SCENE_MGR.addScene(subScene)

//make scene2

const mySceneEntity2 = new Entity()

mySceneEntity2.addComponent(new ConeShape())

const sceneId2 = SCENE_MGR.generateSceneId()

const subScene2 = new SubScene(sceneId2,"myScene2",[],undefined,undefined)

const sceneEntity2 = subScene2.addEntity(mySceneEntity2) 

sceneEntity2.visibilityStrategy = VisibilityStrategyEnum.ENGINE_ADD_REMOVE

SCENE_MGR.addScene(subScene2)

...

SCENE_MGR.changeToScene(subScene) //change to desired scene</code>

<h2>Class Diagram</h2>

<pre>classDiagram

SceneManager "*" o-- "1" SubScene : Manages SubScenes

SubScene "*" o-- "1" SceneEntity : Manages the scene entities

SubScene "*" --o "1" SubSceneGroup : Groups a collection of subscenes

EntityWrapper "*" o-- "1" Entity : Manages the entity in unity

SceneEntity --|> EntityWrapper: extends

SubSceneGroup --|> SubScene: extends

SubScene --|> BaseEntityWrapper: extends

EntityWrapper --> BaseEntityWrapper : extends

class SceneManager{

  scenes:SubScene[] = [] 

  generateSceneId():number

  getSceneById(id:number):SubScene|null

  addScene(scene:SubScene|SceneInitData):SubScene

  changeToScene(scene:SubScene)

  initScenes()

  hideScenes()

}

class BaseEntityWrapper{

  name:string 

  visible:boolean=true

  visibilityStrategy:VisibilityStrategyEnum = VisibilityStrategyEnum.SHAPE_SHOW_HIDE

  visibleTransformInfo?:Transform //if vault hide/showing

  initAlready:boolean=false

  onInitListener:EntityActionListener[] = [] //(scene:SubScene)=>void = []

  onShowListener:EntityActionListener[] = []

  onHideListener:EntityActionListener[] = []

  enabled:boolean=true

  

  disable()

  enable()

  init()

   

  onChangeEntityVisibility(entity:BaseEntityWrapper,type:VisibleChangeType)

  

  isVisible()

  onHide(baseEntWrapper:BaseEntityWrapper)

  onShow(baseEntWrapper:BaseEntityWrapper)

  onInit(baseEntWrapper:BaseEntityWrapper)

  processListener(sceneEnt:BaseEntityWrapper,listeners:((sceneEnt:BaseEntityWrapper)=>void)[] )

  show(force?:boolean) 

  hide(force?:boolean) 

  addOnInitListener(listener:EntityActionListener)

  addOnShowListener(listener:EntityActionListener)

  addOnHideListener(listener:EntityActionListener)

}

class EntityWrapper{

  rootEntity:Entity

  entities:Entity[]

  addEntity(entity:Entity)

  onShow()

  onHide()

}

class SceneEntity{

  

}

class SubScene {

  public rootEntity?: Entity 

  public triggerEntity: Entity

  public initAlready:boolean = false

  public entities: SceneEntity[]

  public id: number

  public spawnPoints:SpawnPoint[]=[]

  

 

  addEntity(sceneEnt:SceneEntity|Entity,args?:SceneEntityArgs):SceneEntity

  onInit(sceneEnt:SubScene)

  randomSpawnPoint(spawnPointFilter?:POISelectorType):SpawnPoint

  movePlayerHere(spawnPointFilter?:POISelectorType|SpawnPoint)

  

  

  onHide(scene:SubScene)

  onShow(scene:SubScene)

}

class SubSceneGroup{

  public scenes:SubScene[]=[]

  disable()

  enable()

  init()

  onHide(scene:SubScene)

  onShow(scene:SubScene)

}</pre>

<h2>Copyright info</h2>

<p>This scene is protected with a standard Apache 2 licence. See the terms and conditions in the</p>

<p>file.</p>

<h2>About</h2>

<p>Optimized scene that only loads certain entites when the player approaches them</p>

<h3>Resources</h3>

<h3>License</h3>

<h3>Stars</h3>

<strong>3</strong>

<h3>Watchers</h3>

<strong>2</strong>

<h3>Forks</h3>

<strong>1</strong>

<h2>Languages</h2>

<h2>Footer</h2>

<h3>Footer navigation</h3>

<button>Manage cookies</button>

<button>Do not share my personal information</button>

# Change to URL: https://github.com/decentraland-scenes/dcl-working-with-workspaces

# URL: https://github.com/decentraland-scenes/dcl-working-with-workspaces

<title>GitHub - decentraland-scenes/dcl-working-with-workspaces: A project that shows how to use workspaces to run multiple scenes + smart wearables together</title>

<button>Product</button>

<button>Solutions</button>

<button>Open Source</button>

<h1>Search code, repositories, users, issues, pull requests...</h1>

<label>Search</label>

<h1>Provide feedback</h1>

<p>We read every piece of feedback, and take your input very seriously.</p>

<label>Include my email address so I can be contacted</label>

<button>Cancel</button>

<button>Submit feedback</button>

<h1>Saved searches</h1>

<h2>Use saved searches to filter your results more quickly</h2>

<label>Name</label>

<label>Query</label>

<p>To see all available qualifiers, see our</p>

<p>.</p>

<button>Cancel</button>

<button>Create saved search</button>

<tool-tip>Dismiss alert</tool-tip>

<p>A project that shows how to use workspaces to run multiple scenes + smart wearables together</p>

<tool-tip>Additional navigation options</tool-tip>

<h1>decentraland-scenes/dcl-working-with-workspaces</h1>

<button>Branches</button>

<button>Tags</button>

<h1>Name already in use</h1>

<button>Cancel</button>

<button>Create</button>

<strong>2</strong>

<strong>0</strong>

<button>HTTPS</button>

<button>GitHub CLI</button>

<p>Use Git or checkout with SVN using the web URL.</p>

<p>Work fast with our official CLI.</p>

<p>.</p>

<h4>Sign In Required</h4>

<p>Please</p>

<p>to use Codespaces.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>

<p>and try again.</p>

<h4>Launching GitHub Desktop</h4>

<p>If nothing happens,</p>